
0210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef48  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800f218  0800f218  0001f218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f580  0800f580  0001f580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f588  0800f588  0001f588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f590  0800f590  0001f590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c88  24000078  0800f60c  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001d00  0800f60c  00021d00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fabf  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032a1  00000000  00000000  0003fb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  00042e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c8  00000000  00000000  000442c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034db1  00000000  00000000  00045688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a638  00000000  00000000  0007a439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153ff9  00000000  00000000  00094a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e8a6a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d94  00000000  00000000  001e8abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f200 	.word	0x0800f200

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f200 	.word	0x0800f200

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PV1 = 0, PV2 = 0, PV3 = 0, PV4 = 0;
 8000684:	49b8      	ldr	r1, [pc, #736]	; (8000968 <main+0x2e8>)
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c1 2300 	strd	r2, r3, [r1]
 8000692:	49b6      	ldr	r1, [pc, #728]	; (800096c <main+0x2ec>)
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c1 2300 	strd	r2, r3, [r1]
 80006a0:	49b3      	ldr	r1, [pc, #716]	; (8000970 <main+0x2f0>)
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e9c1 2300 	strd	r2, r3, [r1]
 80006ae:	49b1      	ldr	r1, [pc, #708]	; (8000974 <main+0x2f4>)
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	f04f 0300 	mov.w	r3, #0
 80006b8:	e9c1 2300 	strd	r2, r3, [r1]
	SP1 = 0, SP2 = 0, SP3 = 0, SP4 = 0;
 80006bc:	49ae      	ldr	r1, [pc, #696]	; (8000978 <main+0x2f8>)
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
 80006ca:	49ac      	ldr	r1, [pc, #688]	; (800097c <main+0x2fc>)
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c1 2300 	strd	r2, r3, [r1]
 80006d8:	49a9      	ldr	r1, [pc, #676]	; (8000980 <main+0x300>)
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
 80006e6:	49a7      	ldr	r1, [pc, #668]	; (8000984 <main+0x304>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]

	n = 0;
 80006f4:	4ba4      	ldr	r3, [pc, #656]	; (8000988 <main+0x308>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	kkk = 0;
 80006fa:	4ba4      	ldr	r3, [pc, #656]	; (800098c <main+0x30c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
	count = 0;
 8000700:	4ba3      	ldr	r3, [pc, #652]	; (8000990 <main+0x310>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	error1 = PV1 - SP1;
 8000706:	4b98      	ldr	r3, [pc, #608]	; (8000968 <main+0x2e8>)
 8000708:	ed93 6b00 	vldr	d6, [r3]
 800070c:	4b9a      	ldr	r3, [pc, #616]	; (8000978 <main+0x2f8>)
 800070e:	ed93 7b00 	vldr	d7, [r3]
 8000712:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000716:	4b9f      	ldr	r3, [pc, #636]	; (8000994 <main+0x314>)
 8000718:	ed83 7b00 	vstr	d7, [r3]
	error2 = PV2 - SP2;
 800071c:	4b93      	ldr	r3, [pc, #588]	; (800096c <main+0x2ec>)
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	4b96      	ldr	r3, [pc, #600]	; (800097c <main+0x2fc>)
 8000724:	ed93 7b00 	vldr	d7, [r3]
 8000728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072c:	4b9a      	ldr	r3, [pc, #616]	; (8000998 <main+0x318>)
 800072e:	ed83 7b00 	vstr	d7, [r3]
	error3 = PV3 - SP3;
 8000732:	4b8f      	ldr	r3, [pc, #572]	; (8000970 <main+0x2f0>)
 8000734:	ed93 6b00 	vldr	d6, [r3]
 8000738:	4b91      	ldr	r3, [pc, #580]	; (8000980 <main+0x300>)
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000742:	4b96      	ldr	r3, [pc, #600]	; (800099c <main+0x31c>)
 8000744:	ed83 7b00 	vstr	d7, [r3]
	error4 = PV4 - SP4;
 8000748:	4b8a      	ldr	r3, [pc, #552]	; (8000974 <main+0x2f4>)
 800074a:	ed93 6b00 	vldr	d6, [r3]
 800074e:	4b8d      	ldr	r3, [pc, #564]	; (8000984 <main+0x304>)
 8000750:	ed93 7b00 	vldr	d7, [r3]
 8000754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000758:	4b91      	ldr	r3, [pc, #580]	; (80009a0 <main+0x320>)
 800075a:	ed83 7b00 	vstr	d7, [r3]
	enc1 = 0, enc2 = 0, enc3 = 0, enc4 = 0;
 800075e:	4b91      	ldr	r3, [pc, #580]	; (80009a4 <main+0x324>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	4b90      	ldr	r3, [pc, #576]	; (80009a8 <main+0x328>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	4b90      	ldr	r3, [pc, #576]	; (80009ac <main+0x32c>)
 800076c:	2200      	movs	r2, #0
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	4b8f      	ldr	r3, [pc, #572]	; (80009b0 <main+0x330>)
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]

	Kp1 = 0.361732063; // blue
 8000776:	498f      	ldr	r1, [pc, #572]	; (80009b4 <main+0x334>)
 8000778:	a367      	add	r3, pc, #412	; (adr r3, 8000918 <main+0x298>)
 800077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 = 15.80374981; // blue
 8000782:	498d      	ldr	r1, [pc, #564]	; (80009b8 <main+0x338>)
 8000784:	a366      	add	r3, pc, #408	; (adr r3, 8000920 <main+0x2a0>)
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 = 0.394239297; // purple
 800078e:	498b      	ldr	r1, [pc, #556]	; (80009bc <main+0x33c>)
 8000790:	a365      	add	r3, pc, #404	; (adr r3, 8000928 <main+0x2a8>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 = 16.97823652; // purple
 800079a:	4989      	ldr	r1, [pc, #548]	; (80009c0 <main+0x340>)
 800079c:	a364      	add	r3, pc, #400	; (adr r3, 8000930 <main+0x2b0>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	e9c1 2300 	strd	r2, r3, [r1]
	Kp3 = 0.408122176;  // 801 0.408122176
 80007a6:	4987      	ldr	r1, [pc, #540]	; (80009c4 <main+0x344>)
 80007a8:	a363      	add	r3, pc, #396	; (adr r3, 8000938 <main+0x2b8>)
 80007aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ae:	e9c1 2300 	strd	r2, r3, [r1]
	Ki3 = 15.83432596; // 801 15.83432596
 80007b2:	4985      	ldr	r1, [pc, #532]	; (80009c8 <main+0x348>)
 80007b4:	a362      	add	r3, pc, #392	; (adr r3, 8000940 <main+0x2c0>)
 80007b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ba:	e9c1 2300 	strd	r2, r3, [r1]
	Kp4 = 0.541670637;  // DC9 0.541670637
 80007be:	4983      	ldr	r1, [pc, #524]	; (80009cc <main+0x34c>)
 80007c0:	a361      	add	r3, pc, #388	; (adr r3, 8000948 <main+0x2c8>)
 80007c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
	Ki4 = 18.96397104;  // DC9 18.96397104
 80007ca:	4981      	ldr	r1, [pc, #516]	; (80009d0 <main+0x350>)
 80007cc:	a360      	add	r3, pc, #384	; (adr r3, 8000950 <main+0x2d0>)
 80007ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007d2:	e9c1 2300 	strd	r2, r3, [r1]

	error_last1 = 0;
 80007d6:	497f      	ldr	r1, [pc, #508]	; (80009d4 <main+0x354>)
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c1 2300 	strd	r2, r3, [r1]
	error_last2 = 0;
 80007e4:	497c      	ldr	r1, [pc, #496]	; (80009d8 <main+0x358>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9c1 2300 	strd	r2, r3, [r1]
	error_last3 = 0;
 80007f2:	497a      	ldr	r1, [pc, #488]	; (80009dc <main+0x35c>)
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c1 2300 	strd	r2, r3, [r1]
	error_last4 = 0;
 8000800:	4977      	ldr	r1, [pc, #476]	; (80009e0 <main+0x360>)
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c1 2300 	strd	r2, r3, [r1]

	errorsum1 = 0;
 800080e:	4975      	ldr	r1, [pc, #468]	; (80009e4 <main+0x364>)
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum2 = 0;
 800081c:	4972      	ldr	r1, [pc, #456]	; (80009e8 <main+0x368>)
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum3 = 0;
 800082a:	4970      	ldr	r1, [pc, #448]	; (80009ec <main+0x36c>)
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum4 = 0;
 8000838:	496d      	ldr	r1, [pc, #436]	; (80009f0 <main+0x370>)
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2300 	strd	r2, r3, [r1]

	push_vel_x = 0;
 8000846:	496b      	ldr	r1, [pc, #428]	; (80009f4 <main+0x374>)
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_y = 0;
 8000854:	4968      	ldr	r1, [pc, #416]	; (80009f8 <main+0x378>)
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_z = 0;
 8000862:	4966      	ldr	r1, [pc, #408]	; (80009fc <main+0x37c>)
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e9c1 2300 	strd	r2, r3, [r1]

	lx = 5.825; // lx 58.25 mm(forward backward direction)
 8000870:	4963      	ldr	r1, [pc, #396]	; (8000a00 <main+0x380>)
 8000872:	a339      	add	r3, pc, #228	; (adr r3, 8000958 <main+0x2d8>)
 8000874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000878:	e9c1 2300 	strd	r2, r3, [r1]
	ly = 10.175; // ly 101.75 mm
 800087c:	4961      	ldr	r1, [pc, #388]	; (8000a04 <main+0x384>)
 800087e:	a338      	add	r3, pc, #224	; (adr r3, 8000960 <main+0x2e0>)
 8000880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000884:	e9c1 2300 	strd	r2, r3, [r1]
	r = 5; // unit 10 cm(measure on 5/18)
 8000888:	495f      	ldr	r1, [pc, #380]	; (8000a08 <main+0x388>)
 800088a:	f04f 0200 	mov.w	r2, #0
 800088e:	4b5f      	ldr	r3, [pc, #380]	; (8000a0c <main+0x38c>)
 8000890:	e9c1 2300 	strd	r2, r3, [r1]

	gear = 75;
 8000894:	4b5e      	ldr	r3, [pc, #376]	; (8000a10 <main+0x390>)
 8000896:	224b      	movs	r2, #75	; 0x4b
 8000898:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089a:	f005 f8bd 	bl	8005a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089e:	f000 f8d7 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a2:	f000 fda1 	bl	80013e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a6:	f000 fd77 	bl	8001398 <MX_DMA_Init>
  MX_TIM2_Init();
 80008aa:	f000 f9cf 	bl	8000c4c <MX_TIM2_Init>
  MX_TIM3_Init();
 80008ae:	f000 fa1b 	bl	8000ce8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008b2:	f000 fa6f 	bl	8000d94 <MX_TIM4_Init>
  MX_TIM6_Init();
 80008b6:	f000 fb21 	bl	8000efc <MX_TIM6_Init>
  MX_TIM7_Init();
 80008ba:	f000 fb5f 	bl	8000f7c <MX_TIM7_Init>
  MX_TIM1_Init();
 80008be:	f000 f935 	bl	8000b2c <MX_TIM1_Init>
  MX_TIM5_Init();
 80008c2:	f000 fac1 	bl	8000e48 <MX_TIM5_Init>
  MX_TIM8_Init();
 80008c6:	f000 fb8f 	bl	8000fe8 <MX_TIM8_Init>
  MX_TIM15_Init();
 80008ca:	f000 fbe7 	bl	800109c <MX_TIM15_Init>
  MX_TIM23_Init();
 80008ce:	f000 fc6b 	bl	80011a8 <MX_TIM23_Init>
  MX_TIM24_Init();
 80008d2:	f000 fcbf 	bl	8001254 <MX_TIM24_Init>
  MX_USART3_UART_Init();
 80008d6:	f000 fd13 	bl	8001300 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80008da:	484e      	ldr	r0, [pc, #312]	; (8000a14 <main+0x394>)
 80008dc:	f00a fd22 	bl	800b324 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80008e0:	2100      	movs	r1, #0
 80008e2:	484d      	ldr	r0, [pc, #308]	; (8000a18 <main+0x398>)
 80008e4:	f00b f818 	bl	800b918 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 80008e8:	2100      	movs	r1, #0
 80008ea:	484c      	ldr	r0, [pc, #304]	; (8000a1c <main+0x39c>)
 80008ec:	f00b f814 	bl	800b918 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80008f0:	2100      	movs	r1, #0
 80008f2:	484b      	ldr	r0, [pc, #300]	; (8000a20 <main+0x3a0>)
 80008f4:	f00b f810 	bl	800b918 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80008f8:	2100      	movs	r1, #0
 80008fa:	484a      	ldr	r0, [pc, #296]	; (8000a24 <main+0x3a4>)
 80008fc:	f00b f80c 	bl	800b918 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000900:	2100      	movs	r1, #0
 8000902:	4849      	ldr	r0, [pc, #292]	; (8000a28 <main+0x3a8>)
 8000904:	f00a fdec 	bl	800b4e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000908:	2100      	movs	r1, #0
 800090a:	4848      	ldr	r0, [pc, #288]	; (8000a2c <main+0x3ac>)
 800090c:	f00a fde8 	bl	800b4e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	e08d      	b.n	8000a30 <main+0x3b0>
 8000914:	f3af 8000 	nop.w
 8000918:	3d1ff9a3 	.word	0x3d1ff9a3
 800091c:	3fd7269e 	.word	0x3fd7269e
 8000920:	18583b80 	.word	0x18583b80
 8000924:	402f9b85 	.word	0x402f9b85
 8000928:	75da6f19 	.word	0x75da6f19
 800092c:	3fd93b37 	.word	0x3fd93b37
 8000930:	b5652721 	.word	0xb5652721
 8000934:	4030fa6d 	.word	0x4030fa6d
 8000938:	79ac4f90 	.word	0x79ac4f90
 800093c:	3fda1eac 	.word	0x3fda1eac
 8000940:	c5b0cebf 	.word	0xc5b0cebf
 8000944:	402fab2c 	.word	0x402fab2c
 8000948:	a8e3caa6 	.word	0xa8e3caa6
 800094c:	3fe1555d 	.word	0x3fe1555d
 8000950:	ce5b1753 	.word	0xce5b1753
 8000954:	4032f6c6 	.word	0x4032f6c6
 8000958:	cccccccd 	.word	0xcccccccd
 800095c:	40174ccc 	.word	0x40174ccc
 8000960:	9999999a 	.word	0x9999999a
 8000964:	40245999 	.word	0x40245999
 8000968:	24000558 	.word	0x24000558
 800096c:	24000560 	.word	0x24000560
 8000970:	24000568 	.word	0x24000568
 8000974:	24000570 	.word	0x24000570
 8000978:	24000578 	.word	0x24000578
 800097c:	24000580 	.word	0x24000580
 8000980:	24000588 	.word	0x24000588
 8000984:	24000590 	.word	0x24000590
 8000988:	24000660 	.word	0x24000660
 800098c:	24000664 	.word	0x24000664
 8000990:	24000668 	.word	0x24000668
 8000994:	24000598 	.word	0x24000598
 8000998:	240005a0 	.word	0x240005a0
 800099c:	240005a8 	.word	0x240005a8
 80009a0:	240005b0 	.word	0x240005b0
 80009a4:	240005b8 	.word	0x240005b8
 80009a8:	240005ba 	.word	0x240005ba
 80009ac:	240005bc 	.word	0x240005bc
 80009b0:	240005be 	.word	0x240005be
 80009b4:	240005c0 	.word	0x240005c0
 80009b8:	240005e0 	.word	0x240005e0
 80009bc:	240005c8 	.word	0x240005c8
 80009c0:	240005e8 	.word	0x240005e8
 80009c4:	240005d0 	.word	0x240005d0
 80009c8:	240005f0 	.word	0x240005f0
 80009cc:	240005d8 	.word	0x240005d8
 80009d0:	240005f8 	.word	0x240005f8
 80009d4:	24000620 	.word	0x24000620
 80009d8:	24000628 	.word	0x24000628
 80009dc:	24000630 	.word	0x24000630
 80009e0:	24000638 	.word	0x24000638
 80009e4:	24000640 	.word	0x24000640
 80009e8:	24000648 	.word	0x24000648
 80009ec:	24000650 	.word	0x24000650
 80009f0:	24000658 	.word	0x24000658
 80009f4:	240006a0 	.word	0x240006a0
 80009f8:	240006a8 	.word	0x240006a8
 80009fc:	240006b0 	.word	0x240006b0
 8000a00:	24000670 	.word	0x24000670
 8000a04:	24000678 	.word	0x24000678
 8000a08:	24000680 	.word	0x24000680
 8000a0c:	40140000 	.word	0x40140000
 8000a10:	240006b8 	.word	0x240006b8
 8000a14:	240000e0 	.word	0x240000e0
 8000a18:	2400012c 	.word	0x2400012c
 8000a1c:	240002a8 	.word	0x240002a8
 8000a20:	24000340 	.word	0x24000340
 8000a24:	2400038c 	.word	0x2400038c
 8000a28:	24000178 	.word	0x24000178
 8000a2c:	240001c4 	.word	0x240001c4
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <main+0x3c8>)
 8000a32:	f00a fd55 	bl	800b4e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a36:	2100      	movs	r1, #0
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <main+0x3cc>)
 8000a3a:	f00a fd51 	bl	800b4e0 <HAL_TIM_PWM_Start>

  setup();
 8000a3e:	f003 fb25 	bl	800408c <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000a42:	f003 fb3f 	bl	80040c4 <loop>
 8000a46:	e7fc      	b.n	8000a42 <main+0x3c2>
 8000a48:	240002f4 	.word	0x240002f4
 8000a4c:	24000094 	.word	0x24000094

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09c      	sub	sp, #112	; 0x70
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	224c      	movs	r2, #76	; 0x4c
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00e fa44 	bl	800eeec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2220      	movs	r2, #32
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f00e fa3e 	bl	800eeec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f008 f96f 	bl	8008d54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <SystemClock_Config+0xd8>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4a2a      	ldr	r2, [pc, #168]	; (8000b28 <SystemClock_Config+0xd8>)
 8000a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a84:	6193      	str	r3, [r2, #24]
 8000a86:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <SystemClock_Config+0xd8>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a92:	bf00      	nop
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <SystemClock_Config+0xd8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa0:	d1f8      	bne.n	8000a94 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aa6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aac:	2302      	movs	r3, #2
 8000aae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ab8:	23a8      	movs	r3, #168	; 0xa8
 8000aba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 f975 	bl	8008dc8 <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ae4:	f001 faca 	bl	800207c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	233f      	movs	r3, #63	; 0x3f
 8000aea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2303      	movs	r3, #3
 8000aee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000af4:	2308      	movs	r3, #8
 8000af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000af8:	2340      	movs	r3, #64	; 0x40
 8000afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000afc:	2340      	movs	r3, #64	; 0x40
 8000afe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b06:	2340      	movs	r3, #64	; 0x40
 8000b08:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f008 fd08 	bl	8009524 <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b1a:	f001 faaf 	bl	800207c <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3770      	adds	r7, #112	; 0x70
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	58024800 	.word	0x58024800

08000b2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b098      	sub	sp, #96	; 0x60
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
 8000b4e:	615a      	str	r2, [r3, #20]
 8000b50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2234      	movs	r2, #52	; 0x34
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f00e f9c7 	bl	800eeec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b5e:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b60:	4a39      	ldr	r2, [pc, #228]	; (8000c48 <MX_TIM1_Init+0x11c>)
 8000b62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b64:	4b37      	ldr	r3, [pc, #220]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6a:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b70:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b78:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b8a:	482e      	ldr	r0, [pc, #184]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b8c:	f00a fc50 	bl	800b430 <HAL_TIM_PWM_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b96:	f001 fa71 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ba6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000baa:	4619      	mov	r1, r3
 8000bac:	4825      	ldr	r0, [pc, #148]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000bae:	f00b fed5 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bb8:	f001 fa60 	bl	800207c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbc:	2360      	movs	r3, #96	; 0x60
 8000bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4619      	mov	r1, r3
 8000be0:	4818      	ldr	r0, [pc, #96]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000be2:	f00b f847 	bl	800bc74 <HAL_TIM_PWM_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000bec:	f001 fa46 	bl	800207c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4807      	ldr	r0, [pc, #28]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000c26:	f00b ff35 	bl	800ca94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000c30:	f001 fa24 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000c36:	f004 fc13 	bl	8005460 <HAL_TIM_MspPostInit>

}
 8000c3a:	bf00      	nop
 8000c3c:	3760      	adds	r7, #96	; 0x60
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	24000094 	.word	0x24000094
 8000c48:	40010000 	.word	0x40010000

08000c4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c74:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000c78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c94:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c96:	f00a faed 	bl	800b274 <HAL_TIM_Base_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f001 f9ec 	bl	800207c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000cb2:	f00b f8f3 	bl	800be9c <HAL_TIM_ConfigClockSource>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000cbc:	f001 f9de 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000cce:	f00b fe45 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cd8:	f001 f9d0 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	240000e0 	.word	0x240000e0

08000ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	2224      	movs	r2, #36	; 0x24
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00e f8f8 	bl	800eeec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d08:	4a21      	ldr	r2, [pc, #132]	; (8000d90 <MX_TIM3_Init+0xa8>)
 8000d0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d34:	2301      	movs	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d44:	2301      	movs	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d58:	f00a fd38 	bl	800b7cc <HAL_TIM_Encoder_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d62:	f001 f98b 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d74:	f00b fdf2 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d7e:	f001 f97d 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	3730      	adds	r7, #48	; 0x30
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2400012c 	.word	0x2400012c
 8000d90:	40000400 	.word	0x40000400

08000d94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da6:	463b      	mov	r3, r7
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	615a      	str	r2, [r3, #20]
 8000db6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000db8:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000dba:	4a22      	ldr	r2, [pc, #136]	; (8000e44 <MX_TIM4_Init+0xb0>)
 8000dbc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000dcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dd0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dde:	4818      	ldr	r0, [pc, #96]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000de0:	f00a fb26 	bl	800b430 <HAL_TIM_PWM_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000dea:	f001 f947 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4810      	ldr	r0, [pc, #64]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000dfe:	f00b fdad 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000e08:	f001 f938 	bl	800207c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0c:	2360      	movs	r3, #96	; 0x60
 8000e0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4619      	mov	r1, r3
 8000e22:	4807      	ldr	r0, [pc, #28]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000e24:	f00a ff26 	bl	800bc74 <HAL_TIM_PWM_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000e2e:	f001 f925 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000e34:	f004 fb14 	bl	8005460 <HAL_TIM_MspPostInit>

}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	24000178 	.word	0x24000178
 8000e44:	40000800 	.word	0x40000800

08000e48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	615a      	str	r2, [r3, #20]
 8000e6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000e6e:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <MX_TIM5_Init+0xb0>)
 8000e70:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000e80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e84:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e92:	4818      	ldr	r0, [pc, #96]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000e94:	f00a facc 	bl	800b430 <HAL_TIM_PWM_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8000e9e:	f001 f8ed 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4810      	ldr	r0, [pc, #64]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000eb2:	f00b fd53 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8000ebc:	f001 f8de 	bl	800207c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec0:	2360      	movs	r3, #96	; 0x60
 8000ec2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000ed8:	f00a fecc 	bl	800bc74 <HAL_TIM_PWM_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000ee2:	f001 f8cb 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ee6:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000ee8:	f004 faba 	bl	8005460 <HAL_TIM_MspPostInit>

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	240001c4 	.word	0x240001c4
 8000ef8:	40000c00 	.word	0x40000c00

08000efc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f0e:	4a1a      	ldr	r2, [pc, #104]	; (8000f78 <MX_TIM6_Init+0x7c>)
 8000f10:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f24:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f2c:	4811      	ldr	r0, [pc, #68]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f2e:	f00a f9a1 	bl	800b274 <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f38:	f001 f8a0 	bl	800207c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	480d      	ldr	r0, [pc, #52]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f40:	f00a fbea 	bl	800b718 <HAL_TIM_OnePulse_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000f4a:	f001 f897 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f5c:	f00b fcfe 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000f66:	f001 f889 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	24000210 	.word	0x24000210
 8000f78:	40001000 	.word	0x40001000

08000f7c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_TIM7_Init+0x64>)
 8000f8e:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <MX_TIM7_Init+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <MX_TIM7_Init+0x64>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_TIM7_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_TIM7_Init+0x64>)
 8000fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_TIM7_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <MX_TIM7_Init+0x64>)
 8000fae:	f00a f961 	bl	800b274 <HAL_TIM_Base_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000fb8:	f001 f860 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_TIM7_Init+0x64>)
 8000fca:	f00b fcc7 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000fd4:	f001 f852 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2400025c 	.word	0x2400025c
 8000fe4:	40001400 	.word	0x40001400

08000fe8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	; 0x30
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2224      	movs	r2, #36	; 0x24
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f00d ff78 	bl	800eeec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <MX_TIM8_Init+0xac>)
 8001008:	4a23      	ldr	r2, [pc, #140]	; (8001098 <MX_TIM8_Init+0xb0>)
 800100a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_TIM8_Init+0xac>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <MX_TIM8_Init+0xac>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001018:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <MX_TIM8_Init+0xac>)
 800101a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800101e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_TIM8_Init+0xac>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_TIM8_Init+0xac>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_TIM8_Init+0xac>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001032:	2303      	movs	r3, #3
 8001034:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800103a:	2301      	movs	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800104a:	2301      	movs	r3, #1
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	4619      	mov	r1, r3
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_TIM8_Init+0xac>)
 800105e:	f00a fbb5 	bl	800b7cc <HAL_TIM_Encoder_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001068:	f001 f808 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001078:	463b      	mov	r3, r7
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_TIM8_Init+0xac>)
 800107e:	f00b fc6d 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001088:	f000 fff8 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	3730      	adds	r7, #48	; 0x30
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	240002a8 	.word	0x240002a8
 8001098:	40010400 	.word	0x40010400

0800109c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b098      	sub	sp, #96	; 0x60
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]
 80010be:	615a      	str	r2, [r3, #20]
 80010c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2234      	movs	r2, #52	; 0x34
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00d ff0f 	bl	800eeec <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010ce:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010d0:	4a34      	ldr	r2, [pc, #208]	; (80011a4 <MX_TIM15_Init+0x108>)
 80010d2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2;
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010e6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010ee:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80010fa:	4829      	ldr	r0, [pc, #164]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010fc:	f00a f998 	bl	800b430 <HAL_TIM_PWM_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001106:	f000 ffb9 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001112:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001116:	4619      	mov	r1, r3
 8001118:	4821      	ldr	r0, [pc, #132]	; (80011a0 <MX_TIM15_Init+0x104>)
 800111a:	f00b fc1f 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001124:	f000 ffaa 	bl	800207c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001128:	2360      	movs	r3, #96	; 0x60
 800112a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001130:	2300      	movs	r3, #0
 8001132:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001134:	2300      	movs	r3, #0
 8001136:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001144:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	4814      	ldr	r0, [pc, #80]	; (80011a0 <MX_TIM15_Init+0x104>)
 800114e:	f00a fd91 	bl	800bc74 <HAL_TIM_PWM_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001158:	f000 ff90 	bl	800207c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001174:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <MX_TIM15_Init+0x104>)
 8001184:	f00b fc86 	bl	800ca94 <HAL_TIMEx_ConfigBreakDeadTime>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800118e:	f000 ff75 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <MX_TIM15_Init+0x104>)
 8001194:	f004 f964 	bl	8005460 <HAL_TIM_MspPostInit>

}
 8001198:	bf00      	nop
 800119a:	3760      	adds	r7, #96	; 0x60
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	240002f4 	.word	0x240002f4
 80011a4:	40014000 	.word	0x40014000

080011a8 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2224      	movs	r2, #36	; 0x24
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f00d fe98 	bl	800eeec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <MX_TIM23_Init+0xa4>)
 80011c8:	4a21      	ldr	r2, [pc, #132]	; (8001250 <MX_TIM23_Init+0xa8>)
 80011ca:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <MX_TIM23_Init+0xa4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <MX_TIM23_Init+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 65535;
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_TIM23_Init+0xa4>)
 80011da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011de:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <MX_TIM23_Init+0xa4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_TIM23_Init+0xa4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011ec:	2303      	movs	r3, #3
 80011ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011f4:	2301      	movs	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001204:	2301      	movs	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	; (800124c <MX_TIM23_Init+0xa4>)
 8001218:	f00a fad8 	bl	800b7cc <HAL_TIM_Encoder_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8001222:	f000 ff2b 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <MX_TIM23_Init+0xa4>)
 8001234:	f00b fb92 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 800123e:	f000 ff1d 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3730      	adds	r7, #48	; 0x30
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	24000340 	.word	0x24000340
 8001250:	4000e000 	.word	0x4000e000

08001254 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2224      	movs	r2, #36	; 0x24
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f00d fe42 	bl	800eeec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_TIM24_Init+0xa4>)
 8001274:	4a21      	ldr	r2, [pc, #132]	; (80012fc <MX_TIM24_Init+0xa8>)
 8001276:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_TIM24_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_TIM24_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 65535;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_TIM24_Init+0xa4>)
 8001286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128a:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_TIM24_Init+0xa4>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_TIM24_Init+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001298:	2303      	movs	r3, #3
 800129a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a0:	2301      	movs	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b0:	2301      	movs	r3, #1
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4619      	mov	r1, r3
 80012c2:	480d      	ldr	r0, [pc, #52]	; (80012f8 <MX_TIM24_Init+0xa4>)
 80012c4:	f00a fa82 	bl	800b7cc <HAL_TIM_Encoder_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 80012ce:	f000 fed5 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_TIM24_Init+0xa4>)
 80012e0:	f00b fb3c 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 80012ea:	f000 fec7 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3730      	adds	r7, #48	; 0x30
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2400038c 	.word	0x2400038c
 80012fc:	4000e400 	.word	0x4000e400

08001300 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <MX_USART3_UART_Init+0x90>)
 8001306:	4a23      	ldr	r2, [pc, #140]	; (8001394 <MX_USART3_UART_Init+0x94>)
 8001308:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800130a:	4b21      	ldr	r3, [pc, #132]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <MX_USART3_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <MX_USART3_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_USART3_UART_Init+0x90>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_USART3_UART_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_USART3_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_USART3_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001348:	4811      	ldr	r0, [pc, #68]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800134a:	f00b fc61 	bl	800cc10 <HAL_UART_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001354:	f000 fe92 	bl	800207c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001358:	2100      	movs	r1, #0
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800135c:	f00d fca8 	bl	800ecb0 <HAL_UARTEx_SetTxFifoThreshold>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001366:	f000 fe89 	bl	800207c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136a:	2100      	movs	r1, #0
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800136e:	f00d fcdd 	bl	800ed2c <HAL_UARTEx_SetRxFifoThreshold>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001378:	f000 fe80 	bl	800207c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800137e:	f00d fc5e 	bl	800ec3e <HAL_UARTEx_DisableFifoMode>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001388:	f000 fe78 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	240003d8 	.word	0x240003d8
 8001394:	40004800 	.word	0x40004800

08001398 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_DMA_Init+0x4c>)
 80013a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013a4:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <MX_DMA_Init+0x4c>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <MX_DMA_Init+0x4c>)
 80013b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	200b      	movs	r0, #11
 80013c2:	f004 fc96 	bl	8005cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013c6:	200b      	movs	r0, #11
 80013c8:	f004 fcad 	bl	8005d26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	200c      	movs	r0, #12
 80013d2:	f004 fc8e 	bl	8005cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013d6:	200c      	movs	r0, #12
 80013d8:	f004 fca5 	bl	8005d26 <HAL_NVIC_EnableIRQ>

}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	58024400 	.word	0x58024400

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fe:	4ba8      	ldr	r3, [pc, #672]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001404:	4aa6      	ldr	r2, [pc, #664]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140e:	4ba4      	ldr	r3, [pc, #656]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141c:	4ba0      	ldr	r3, [pc, #640]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001422:	4a9f      	ldr	r2, [pc, #636]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142c:	4b9c      	ldr	r3, [pc, #624]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800143a:	4b99      	ldr	r3, [pc, #612]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	4a97      	ldr	r2, [pc, #604]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001442:	f043 0320 	orr.w	r3, r3, #32
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144a:	4b95      	ldr	r3, [pc, #596]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001458:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145e:	4a90      	ldr	r2, [pc, #576]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001468:	4b8d      	ldr	r3, [pc, #564]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	4b8a      	ldr	r3, [pc, #552]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	4a88      	ldr	r2, [pc, #544]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001486:	4b86      	ldr	r3, [pc, #536]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	4a81      	ldr	r2, [pc, #516]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a4:	4b7e      	ldr	r3, [pc, #504]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014b2:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a79      	ldr	r2, [pc, #484]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 80014ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b77      	ldr	r3, [pc, #476]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d0:	4b73      	ldr	r3, [pc, #460]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	4a72      	ldr	r2, [pc, #456]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e0:	4b6f      	ldr	r3, [pc, #444]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f240 4104 	movw	r1, #1028	; 0x404
 80014f4:	486b      	ldr	r0, [pc, #428]	; (80016a4 <MX_GPIO_Init+0x2bc>)
 80014f6:	f007 fc13 	bl	8008d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f244 0105 	movw	r1, #16389	; 0x4005
 8001500:	4869      	ldr	r0, [pc, #420]	; (80016a8 <MX_GPIO_Init+0x2c0>)
 8001502:	f007 fc0d 	bl	8008d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2103      	movs	r1, #3
 800150a:	4868      	ldr	r0, [pc, #416]	; (80016ac <MX_GPIO_Init+0x2c4>)
 800150c:	f007 fc08 	bl	8008d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f241 4102 	movw	r1, #5122	; 0x1402
 8001516:	4866      	ldr	r0, [pc, #408]	; (80016b0 <MX_GPIO_Init+0x2c8>)
 8001518:	f007 fc02 	bl	8008d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f240 4103 	movw	r1, #1027	; 0x403
 8001522:	4864      	ldr	r0, [pc, #400]	; (80016b4 <MX_GPIO_Init+0x2cc>)
 8001524:	f007 fbfc 	bl	8008d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	485e      	ldr	r0, [pc, #376]	; (80016b8 <MX_GPIO_Init+0x2d0>)
 800153e:	f007 fa47 	bl	80089d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001542:	f240 4304 	movw	r3, #1028	; 0x404
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	4852      	ldr	r0, [pc, #328]	; (80016a4 <MX_GPIO_Init+0x2bc>)
 800155c:	f007 fa38 	bl	80089d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001560:	2332      	movs	r3, #50	; 0x32
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001570:	230b      	movs	r3, #11
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	4619      	mov	r1, r3
 800157a:	484f      	ldr	r0, [pc, #316]	; (80016b8 <MX_GPIO_Init+0x2d0>)
 800157c:	f007 fa28 	bl	80089d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001580:	2386      	movs	r3, #134	; 0x86
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001590:	230b      	movs	r3, #11
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	4848      	ldr	r0, [pc, #288]	; (80016bc <MX_GPIO_Init+0x2d4>)
 800159c:	f007 fa18 	bl	80089d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PB2 LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin;
 80015a0:	f244 0305 	movw	r3, #16389	; 0x4005
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b6:	4619      	mov	r1, r3
 80015b8:	483b      	ldr	r0, [pc, #236]	; (80016a8 <MX_GPIO_Init+0x2c0>)
 80015ba:	f007 fa09 	bl	80089d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015be:	2303      	movs	r3, #3
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d2:	4619      	mov	r1, r3
 80015d4:	4835      	ldr	r0, [pc, #212]	; (80016ac <MX_GPIO_Init+0x2c4>)
 80015d6:	f007 f9fb 	bl	80089d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin;
 80015da:	f241 4302 	movw	r3, #5122	; 0x1402
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	482f      	ldr	r0, [pc, #188]	; (80016b0 <MX_GPIO_Init+0x2c8>)
 80015f4:	f007 f9ec 	bl	80089d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800160a:	230b      	movs	r3, #11
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001612:	4619      	mov	r1, r3
 8001614:	4824      	ldr	r0, [pc, #144]	; (80016a8 <MX_GPIO_Init+0x2c0>)
 8001616:	f007 f9db 	bl	80089d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD0 PD1 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1;
 800161a:	f240 4303 	movw	r3, #1027	; 0x403
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	4820      	ldr	r0, [pc, #128]	; (80016b4 <MX_GPIO_Init+0x2cc>)
 8001634:	f007 f9cc 	bl	80089d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800163c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	4817      	ldr	r0, [pc, #92]	; (80016ac <MX_GPIO_Init+0x2c4>)
 800164e:	f007 f9bf 	bl	80089d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001664:	230a      	movs	r3, #10
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166c:	4619      	mov	r1, r3
 800166e:	4813      	ldr	r0, [pc, #76]	; (80016bc <MX_GPIO_Init+0x2d4>)
 8001670:	f007 f9ae 	bl	80089d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001674:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001686:	230b      	movs	r3, #11
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	4806      	ldr	r0, [pc, #24]	; (80016ac <MX_GPIO_Init+0x2c4>)
 8001692:	f007 f99d 	bl	80089d0 <HAL_GPIO_Init>

}
 8001696:	bf00      	nop
 8001698:	3738      	adds	r7, #56	; 0x38
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	58024400 	.word	0x58024400
 80016a4:	58021400 	.word	0x58021400
 80016a8:	58020400 	.word	0x58020400
 80016ac:	58021800 	.word	0x58021800
 80016b0:	58021000 	.word	0x58021000
 80016b4:	58020c00 	.word	0x58020c00
 80016b8:	58020800 	.word	0x58020800
 80016bc:	58020000 	.word	0x58020000

080016c0 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
}
}
PID ?�度*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d0:	f040 8491 	bne.w	8001ff6 <HAL_TIM_PeriodElapsedCallback+0x936>

		SP2 = 1/r * (get_vel_x - get_vel_y - (lx + ly) * get_vel_z); // fl
 80016d4:	4bc6      	ldr	r3, [pc, #792]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016d6:	ed93 7b00 	vldr	d7, [r3]
 80016da:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80016de:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016e2:	4bc4      	ldr	r3, [pc, #784]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80016e4:	ed93 5b00 	vldr	d5, [r3]
 80016e8:	4bc3      	ldr	r3, [pc, #780]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80016ea:	ed93 7b00 	vldr	d7, [r3]
 80016ee:	ee35 5b47 	vsub.f64	d5, d5, d7
 80016f2:	4bc2      	ldr	r3, [pc, #776]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80016f4:	ed93 4b00 	vldr	d4, [r3]
 80016f8:	4bc1      	ldr	r3, [pc, #772]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80016fa:	ed93 7b00 	vldr	d7, [r3]
 80016fe:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001702:	4bc0      	ldr	r3, [pc, #768]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001704:	ed93 7b00 	vldr	d7, [r3]
 8001708:	ee24 7b07 	vmul.f64	d7, d4, d7
 800170c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001710:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001714:	4bbc      	ldr	r3, [pc, #752]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001716:	ed83 7b00 	vstr	d7, [r3]
		SP1 = 1/r * (get_vel_x + get_vel_y + (lx + ly) * get_vel_z); // fr
 800171a:	4bb5      	ldr	r3, [pc, #724]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800171c:	ed93 7b00 	vldr	d7, [r3]
 8001720:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001724:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001728:	4bb2      	ldr	r3, [pc, #712]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800172a:	ed93 5b00 	vldr	d5, [r3]
 800172e:	4bb2      	ldr	r3, [pc, #712]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001730:	ed93 7b00 	vldr	d7, [r3]
 8001734:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001738:	4bb0      	ldr	r3, [pc, #704]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800173a:	ed93 4b00 	vldr	d4, [r3]
 800173e:	4bb0      	ldr	r3, [pc, #704]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001740:	ed93 7b00 	vldr	d7, [r3]
 8001744:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001748:	4bae      	ldr	r3, [pc, #696]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800174a:	ed93 7b00 	vldr	d7, [r3]
 800174e:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001752:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001756:	ee26 7b07 	vmul.f64	d7, d6, d7
 800175a:	4bac      	ldr	r3, [pc, #688]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800175c:	ed83 7b00 	vstr	d7, [r3]
		SP4 = 1/r * (get_vel_x + get_vel_y - (lx + ly) * get_vel_z); // rl
 8001760:	4ba3      	ldr	r3, [pc, #652]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001762:	ed93 7b00 	vldr	d7, [r3]
 8001766:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800176a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800176e:	4ba1      	ldr	r3, [pc, #644]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001770:	ed93 5b00 	vldr	d5, [r3]
 8001774:	4ba0      	ldr	r3, [pc, #640]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001776:	ed93 7b00 	vldr	d7, [r3]
 800177a:	ee35 5b07 	vadd.f64	d5, d5, d7
 800177e:	4b9f      	ldr	r3, [pc, #636]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001780:	ed93 4b00 	vldr	d4, [r3]
 8001784:	4b9e      	ldr	r3, [pc, #632]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001786:	ed93 7b00 	vldr	d7, [r3]
 800178a:	ee34 4b07 	vadd.f64	d4, d4, d7
 800178e:	4b9d      	ldr	r3, [pc, #628]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001790:	ed93 7b00 	vldr	d7, [r3]
 8001794:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001798:	ee35 7b47 	vsub.f64	d7, d5, d7
 800179c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017a0:	4b9b      	ldr	r3, [pc, #620]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80017a2:	ed83 7b00 	vstr	d7, [r3]
		SP3 = 1/r * (get_vel_x - get_vel_y + (lx + ly) * get_vel_z); // rr
 80017a6:	4b92      	ldr	r3, [pc, #584]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80017a8:	ed93 7b00 	vldr	d7, [r3]
 80017ac:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80017b0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80017b4:	4b8f      	ldr	r3, [pc, #572]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80017b6:	ed93 5b00 	vldr	d5, [r3]
 80017ba:	4b8f      	ldr	r3, [pc, #572]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80017bc:	ed93 7b00 	vldr	d7, [r3]
 80017c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80017c4:	4b8d      	ldr	r3, [pc, #564]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80017c6:	ed93 4b00 	vldr	d4, [r3]
 80017ca:	4b8d      	ldr	r3, [pc, #564]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80017cc:	ed93 7b00 	vldr	d7, [r3]
 80017d0:	ee34 4b07 	vadd.f64	d4, d4, d7
 80017d4:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017d6:	ed93 7b00 	vldr	d7, [r3]
 80017da:	ee24 7b07 	vmul.f64	d7, d4, d7
 80017de:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017e6:	4b8b      	ldr	r3, [pc, #556]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80017e8:	ed83 7b00 	vstr	d7, [r3]
		// 2 -> front left
		// 3 -> back(rear) right
		// 4 -> back(rear) left


		enc1 = __HAL_TIM_GetCounter(&htim3) * (-1);
 80017ec:	4b8a      	ldr	r3, [pc, #552]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	425b      	negs	r3, r3
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80017fc:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim8);
 80017fe:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	b21a      	sxth	r2, r3
 8001806:	4b87      	ldr	r3, [pc, #540]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001808:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim23);
 800180a:	4b87      	ldr	r3, [pc, #540]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	b21a      	sxth	r2, r3
 8001812:	4b86      	ldr	r3, [pc, #536]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001814:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim24);
 8001816:	4b86      	ldr	r3, [pc, #536]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	b21a      	sxth	r2, r3
 800181e:	4b85      	ldr	r3, [pc, #532]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001820:	801a      	strh	r2, [r3, #0]

		n++;
 8001822:	4b85      	ldr	r3, [pc, #532]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	3301      	adds	r3, #1
 8001828:	4a83      	ldr	r2, [pc, #524]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800182a:	6013      	str	r3, [r2, #0]

		PV1 = (double) enc1 / (4 * 512 * 27 * 0.001);
 800182c:	4b7b      	ldr	r3, [pc, #492]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800182e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800183a:	ed9f 5b65 	vldr	d5, [pc, #404]	; 80019d0 <HAL_TIM_PeriodElapsedCallback+0x310>
 800183e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001842:	4b7e      	ldr	r3, [pc, #504]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001844:	ed83 7b00 	vstr	d7, [r3]
		PV2 = (double) enc2 / (4 * 512 * 27 * 0.001);
 8001848:	4b76      	ldr	r3, [pc, #472]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800184a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001856:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 80019d0 <HAL_TIM_PeriodElapsedCallback+0x310>
 800185a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800185e:	4b78      	ldr	r3, [pc, #480]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001860:	ed83 7b00 	vstr	d7, [r3]
		PV3 = (double) enc3 / (4 * 500 * 27 * 0.001);
 8001864:	4b71      	ldr	r3, [pc, #452]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186a:	ee07 3a90 	vmov	s15, r3
 800186e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001872:	ed9f 5b59 	vldr	d5, [pc, #356]	; 80019d8 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001876:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800187a:	4b72      	ldr	r3, [pc, #456]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800187c:	ed83 7b00 	vstr	d7, [r3]
		PV4 = (double) enc4 / (4 * 512 * 64 * 0.001);
 8001880:	4b6c      	ldr	r3, [pc, #432]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001886:	ee07 3a90 	vmov	s15, r3
 800188a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800188e:	ed9f 5b54 	vldr	d5, [pc, #336]	; 80019e0 <HAL_TIM_PeriodElapsedCallback+0x320>
 8001892:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001896:	4b6c      	ldr	r3, [pc, #432]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001898:	ed83 7b00 	vstr	d7, [r3]

 		__HAL_TIM_SetCounter(&htim3, 0);
 800189c:	4b5e      	ldr	r3, [pc, #376]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim8, 0);
 80018a4:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2200      	movs	r2, #0
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim23, 0);
 80018ac:	4b5e      	ldr	r3, [pc, #376]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2200      	movs	r2, #0
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim24, 0);
 80018b4:	4b5e      	ldr	r3, [pc, #376]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2200      	movs	r2, #0
 80018ba:	625a      	str	r2, [r3, #36]	; 0x24

		error1 = SP1 - PV1;
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80018be:	ed93 6b00 	vldr	d6, [r3]
 80018c2:	4b5e      	ldr	r3, [pc, #376]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018c4:	ed93 7b00 	vldr	d7, [r3]
 80018c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018cc:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80018ce:	ed83 7b00 	vstr	d7, [r3]
		error2 = SP2 - PV2;
 80018d2:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80018d4:	ed93 6b00 	vldr	d6, [r3]
 80018d8:	4b59      	ldr	r3, [pc, #356]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80018da:	ed93 7b00 	vldr	d7, [r3]
 80018de:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018e2:	4b5b      	ldr	r3, [pc, #364]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80018e4:	ed83 7b00 	vstr	d7, [r3]
		error3 = SP3 - PV3;
 80018e8:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80018ea:	ed93 6b00 	vldr	d6, [r3]
 80018ee:	4b55      	ldr	r3, [pc, #340]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80018f0:	ed93 7b00 	vldr	d7, [r3]
 80018f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018f8:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80018fa:	ed83 7b00 	vstr	d7, [r3]
		error4 = SP4 - PV4;
 80018fe:	4b44      	ldr	r3, [pc, #272]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001900:	ed93 6b00 	vldr	d6, [r3]
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001906:	ed93 7b00 	vldr	d7, [r3]
 800190a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800190e:	4b52      	ldr	r3, [pc, #328]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001910:	ed83 7b00 	vstr	d7, [r3]

		errorsum1 += error1;
 8001914:	4b51      	ldr	r3, [pc, #324]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001916:	ed93 6b00 	vldr	d6, [r3]
 800191a:	4b4c      	ldr	r3, [pc, #304]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800191c:	ed93 7b00 	vldr	d7, [r3]
 8001920:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001924:	4b4d      	ldr	r3, [pc, #308]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001926:	ed83 7b00 	vstr	d7, [r3]
		errorsum2 += error2;
 800192a:	4b4d      	ldr	r3, [pc, #308]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800192c:	ed93 6b00 	vldr	d6, [r3]
 8001930:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001932:	ed93 7b00 	vldr	d7, [r3]
 8001936:	ee36 7b07 	vadd.f64	d7, d6, d7
 800193a:	4b49      	ldr	r3, [pc, #292]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800193c:	ed83 7b00 	vstr	d7, [r3]
		errorsum3 += error3;
 8001940:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001942:	ed93 6b00 	vldr	d6, [r3]
 8001946:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001948:	ed93 7b00 	vldr	d7, [r3]
 800194c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001950:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001952:	ed83 7b00 	vstr	d7, [r3]
		errorsum4 += error4;
 8001956:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001958:	ed93 6b00 	vldr	d6, [r3]
 800195c:	4b3e      	ldr	r3, [pc, #248]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800195e:	ed93 7b00 	vldr	d7, [r3]
 8001962:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001966:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001968:	ed83 7b00 	vstr	d7, [r3]

		ut1 = Kp1 * error1 + Ki1 * errorsum1 * 0.001;
 800196c:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800196e:	ed93 6b00 	vldr	d6, [r3]
 8001972:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001974:	ed93 7b00 	vldr	d7, [r3]
 8001978:	ee26 6b07 	vmul.f64	d6, d6, d7
 800197c:	4b3c      	ldr	r3, [pc, #240]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800197e:	ed93 5b00 	vldr	d5, [r3]
 8001982:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001984:	ed93 7b00 	vldr	d7, [r3]
 8001988:	ee25 7b07 	vmul.f64	d7, d5, d7
 800198c:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80019e8 <HAL_TIM_PeriodElapsedCallback+0x328>
 8001990:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001994:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 800199a:	ed83 7b00 	vstr	d7, [r3]
		ut2 = Kp2 * error2 + Ki2 * errorsum2 * 0.001;
 800199e:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80019a0:	ed93 6b00 	vldr	d6, [r3]
 80019a4:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80019a6:	ed93 7b00 	vldr	d7, [r3]
 80019aa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80019ae:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80019b0:	ed93 5b00 	vldr	d5, [r3]
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80019b6:	ed93 7b00 	vldr	d7, [r3]
 80019ba:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019be:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80019e8 <HAL_TIM_PeriodElapsedCallback+0x328>
 80019c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019ca:	e059      	b.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0x3c0>
 80019cc:	f3af 8000 	nop.w
 80019d0:	53f7ced9 	.word	0x53f7ced9
 80019d4:	404ba5e3 	.word	0x404ba5e3
 80019d8:	00000000 	.word	0x00000000
 80019dc:	404b0000 	.word	0x404b0000
 80019e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80019e4:	4060624d 	.word	0x4060624d
 80019e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019ec:	3f50624d 	.word	0x3f50624d
 80019f0:	24000680 	.word	0x24000680
 80019f4:	24000688 	.word	0x24000688
 80019f8:	24000690 	.word	0x24000690
 80019fc:	24000670 	.word	0x24000670
 8001a00:	24000678 	.word	0x24000678
 8001a04:	24000698 	.word	0x24000698
 8001a08:	24000580 	.word	0x24000580
 8001a0c:	24000578 	.word	0x24000578
 8001a10:	24000590 	.word	0x24000590
 8001a14:	24000588 	.word	0x24000588
 8001a18:	2400012c 	.word	0x2400012c
 8001a1c:	240005b8 	.word	0x240005b8
 8001a20:	240002a8 	.word	0x240002a8
 8001a24:	240005ba 	.word	0x240005ba
 8001a28:	24000340 	.word	0x24000340
 8001a2c:	240005bc 	.word	0x240005bc
 8001a30:	2400038c 	.word	0x2400038c
 8001a34:	240005be 	.word	0x240005be
 8001a38:	24000660 	.word	0x24000660
 8001a3c:	24000558 	.word	0x24000558
 8001a40:	24000560 	.word	0x24000560
 8001a44:	24000568 	.word	0x24000568
 8001a48:	24000570 	.word	0x24000570
 8001a4c:	24000598 	.word	0x24000598
 8001a50:	240005a0 	.word	0x240005a0
 8001a54:	240005a8 	.word	0x240005a8
 8001a58:	240005b0 	.word	0x240005b0
 8001a5c:	24000640 	.word	0x24000640
 8001a60:	24000648 	.word	0x24000648
 8001a64:	24000650 	.word	0x24000650
 8001a68:	24000658 	.word	0x24000658
 8001a6c:	240005c0 	.word	0x240005c0
 8001a70:	240005e0 	.word	0x240005e0
 8001a74:	24000600 	.word	0x24000600
 8001a78:	240005c8 	.word	0x240005c8
 8001a7c:	240005e8 	.word	0x240005e8
 8001a80:	4bab      	ldr	r3, [pc, #684]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001a82:	ed83 7b00 	vstr	d7, [r3]
		ut3 = Kp3 * error3 + Ki3 * errorsum3 * 0.001;
 8001a86:	4bab      	ldr	r3, [pc, #684]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x674>)
 8001a88:	ed93 6b00 	vldr	d6, [r3]
 8001a8c:	4baa      	ldr	r3, [pc, #680]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8001a8e:	ed93 7b00 	vldr	d7, [r3]
 8001a92:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a96:	4ba9      	ldr	r3, [pc, #676]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8001a98:	ed93 5b00 	vldr	d5, [r3]
 8001a9c:	4ba8      	ldr	r3, [pc, #672]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001a9e:	ed93 7b00 	vldr	d7, [r3]
 8001aa2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001aa6:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 8001d28 <HAL_TIM_PeriodElapsedCallback+0x668>
 8001aaa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001aae:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ab2:	4ba4      	ldr	r3, [pc, #656]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001ab4:	ed83 7b00 	vstr	d7, [r3]
		ut4 = Kp4 * error4 + Ki4 * errorsum4 * 0.001;
 8001ab8:	4ba3      	ldr	r3, [pc, #652]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8001aba:	ed93 6b00 	vldr	d6, [r3]
 8001abe:	4ba3      	ldr	r3, [pc, #652]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8001ac0:	ed93 7b00 	vldr	d7, [r3]
 8001ac4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ac8:	4ba1      	ldr	r3, [pc, #644]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8001aca:	ed93 5b00 	vldr	d5, [r3]
 8001ace:	4ba1      	ldr	r3, [pc, #644]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001ad0:	ed93 7b00 	vldr	d7, [r3]
 8001ad4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ad8:	ed9f 5b93 	vldr	d5, [pc, #588]	; 8001d28 <HAL_TIM_PeriodElapsedCallback+0x668>
 8001adc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ae0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ae4:	4b9c      	ldr	r3, [pc, #624]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001ae6:	ed83 7b00 	vstr	d7, [r3]

		if(ut1 > 1){
 8001aea:	4b9c      	ldr	r3, [pc, #624]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001aec:	ed93 7b00 	vldr	d7, [r3]
 8001af0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001af4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	dd06      	ble.n	8001b0c <HAL_TIM_PeriodElapsedCallback+0x44c>
			ut1 = 1;
 8001afe:	4997      	ldr	r1, [pc, #604]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b96      	ldr	r3, [pc, #600]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001b06:	e9c1 2300 	strd	r2, r3, [r1]
 8001b0a:	e00f      	b.n	8001b2c <HAL_TIM_PeriodElapsedCallback+0x46c>
		}else if(ut1 < -1){
 8001b0c:	4b93      	ldr	r3, [pc, #588]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001b0e:	ed93 7b00 	vldr	d7, [r3]
 8001b12:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b16:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1e:	d505      	bpl.n	8001b2c <HAL_TIM_PeriodElapsedCallback+0x46c>
			ut1 = -1;
 8001b20:	498e      	ldr	r1, [pc, #568]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	4b8f      	ldr	r3, [pc, #572]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001b28:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut2 > 1){
 8001b2c:	4b80      	ldr	r3, [pc, #512]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001b2e:	ed93 7b00 	vldr	d7, [r3]
 8001b32:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b36:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	dd06      	ble.n	8001b4e <HAL_TIM_PeriodElapsedCallback+0x48e>
			ut2 = 1;
 8001b40:	497b      	ldr	r1, [pc, #492]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	4b86      	ldr	r3, [pc, #536]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001b48:	e9c1 2300 	strd	r2, r3, [r1]
 8001b4c:	e00f      	b.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x4ae>
		}else if(ut2 < -1){
 8001b4e:	4b78      	ldr	r3, [pc, #480]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001b50:	ed93 7b00 	vldr	d7, [r3]
 8001b54:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b58:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b60:	d505      	bpl.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x4ae>
			ut2 = -1;
 8001b62:	4973      	ldr	r1, [pc, #460]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4b7e      	ldr	r3, [pc, #504]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001b6a:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut3 > 1){
 8001b6e:	4b75      	ldr	r3, [pc, #468]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001b70:	ed93 7b00 	vldr	d7, [r3]
 8001b74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b78:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	dd06      	ble.n	8001b90 <HAL_TIM_PeriodElapsedCallback+0x4d0>
			ut3 = 1;
 8001b82:	4970      	ldr	r1, [pc, #448]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b75      	ldr	r3, [pc, #468]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001b8a:	e9c1 2300 	strd	r2, r3, [r1]
 8001b8e:	e00f      	b.n	8001bb0 <HAL_TIM_PeriodElapsedCallback+0x4f0>
		}else if(ut3 < -1){
 8001b90:	4b6c      	ldr	r3, [pc, #432]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001b92:	ed93 7b00 	vldr	d7, [r3]
 8001b96:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	d505      	bpl.n	8001bb0 <HAL_TIM_PeriodElapsedCallback+0x4f0>
			ut3 = -1;
 8001ba4:	4967      	ldr	r1, [pc, #412]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b6e      	ldr	r3, [pc, #440]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001bac:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut4 > 1){
 8001bb0:	4b69      	ldr	r3, [pc, #420]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001bb2:	ed93 7b00 	vldr	d7, [r3]
 8001bb6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001bba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc2:	dd06      	ble.n	8001bd2 <HAL_TIM_PeriodElapsedCallback+0x512>
			ut4 = 1;
 8001bc4:	4964      	ldr	r1, [pc, #400]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	4b65      	ldr	r3, [pc, #404]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001bcc:	e9c1 2300 	strd	r2, r3, [r1]
 8001bd0:	e00f      	b.n	8001bf2 <HAL_TIM_PeriodElapsedCallback+0x532>
		}else if(ut4 < -1){
 8001bd2:	4b61      	ldr	r3, [pc, #388]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001bd4:	ed93 7b00 	vldr	d7, [r3]
 8001bd8:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001bdc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be4:	d505      	bpl.n	8001bf2 <HAL_TIM_PeriodElapsedCallback+0x532>
			ut4 = -1;
 8001be6:	495c      	ldr	r1, [pc, #368]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001bee:	e9c1 2300 	strd	r2, r3, [r1]
		}


		if(ut1 < 0){
 8001bf2:	4b5a      	ldr	r3, [pc, #360]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001bf4:	ed93 7b00 	vldr	d7, [r3]
 8001bf8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	d50b      	bpl.n	8001c1a <HAL_TIM_PeriodElapsedCallback+0x55a>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2104      	movs	r1, #4
 8001c06:	4858      	ldr	r0, [pc, #352]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001c08:	f007 f88a 	bl	8008d20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c12:	4855      	ldr	r0, [pc, #340]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001c14:	f007 f884 	bl	8008d20 <HAL_GPIO_WritePin>
 8001c18:	e026      	b.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0x5a8>
		}else if(ut1 > 0){
 8001c1a:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001c1c:	ed93 7b00 	vldr	d7, [r3]
 8001c20:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c28:	dd0b      	ble.n	8001c42 <HAL_TIM_PeriodElapsedCallback+0x582>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	484e      	ldr	r0, [pc, #312]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001c30:	f007 f876 	bl	8008d20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c3a:	484b      	ldr	r0, [pc, #300]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001c3c:	f007 f870 	bl	8008d20 <HAL_GPIO_WritePin>
 8001c40:	e012      	b.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0x5a8>
		}else if(ut1 == 0){
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001c44:	ed93 7b00 	vldr	d7, [r3]
 8001c48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	d10a      	bne.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0x5a8>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2104      	movs	r1, #4
 8001c56:	4844      	ldr	r0, [pc, #272]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001c58:	f007 f862 	bl	8008d20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c62:	4841      	ldr	r0, [pc, #260]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001c64:	f007 f85c 	bl	8008d20 <HAL_GPIO_WritePin>
		}

		if(ut2 < 0){
 8001c68:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001c6a:	ed93 7b00 	vldr	d7, [r3]
 8001c6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c76:	d50a      	bpl.n	8001c8e <HAL_TIM_PeriodElapsedCallback+0x5ce>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	483b      	ldr	r0, [pc, #236]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001c7e:	f007 f84f 	bl	8008d20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8001c82:	2201      	movs	r2, #1
 8001c84:	2102      	movs	r1, #2
 8001c86:	4839      	ldr	r0, [pc, #228]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001c88:	f007 f84a 	bl	8008d20 <HAL_GPIO_WritePin>
 8001c8c:	e024      	b.n	8001cd8 <HAL_TIM_PeriodElapsedCallback+0x618>
		}else if(ut2 > 0){
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001c90:	ed93 7b00 	vldr	d7, [r3]
 8001c94:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9c:	dd0a      	ble.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x5f4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4832      	ldr	r0, [pc, #200]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001ca4:	f007 f83c 	bl	8008d20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2102      	movs	r1, #2
 8001cac:	482f      	ldr	r0, [pc, #188]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001cae:	f007 f837 	bl	8008d20 <HAL_GPIO_WritePin>
 8001cb2:	e011      	b.n	8001cd8 <HAL_TIM_PeriodElapsedCallback+0x618>
		}else if(ut2 == 0){
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001cb6:	ed93 7b00 	vldr	d7, [r3]
 8001cba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc2:	d109      	bne.n	8001cd8 <HAL_TIM_PeriodElapsedCallback+0x618>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4828      	ldr	r0, [pc, #160]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001cca:	f007 f829 	bl	8008d20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	4826      	ldr	r0, [pc, #152]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001cd4:	f007 f824 	bl	8008d20 <HAL_GPIO_WritePin>
		}

		if(ut3 > 0){
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001cda:	ed93 7b00 	vldr	d7, [r3]
 8001cde:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	dd0a      	ble.n	8001cfe <HAL_TIM_PeriodElapsedCallback+0x63e>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	2101      	movs	r1, #1
 8001cec:	4820      	ldr	r0, [pc, #128]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001cee:	f007 f817 	bl	8008d20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	481e      	ldr	r0, [pc, #120]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001cf8:	f007 f812 	bl	8008d20 <HAL_GPIO_WritePin>
 8001cfc:	e04c      	b.n	8001d98 <HAL_TIM_PeriodElapsedCallback+0x6d8>
		}else if(ut3 < 0){
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001d00:	ed93 7b00 	vldr	d7, [r3]
 8001d04:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	d532      	bpl.n	8001d74 <HAL_TIM_PeriodElapsedCallback+0x6b4>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2101      	movs	r1, #1
 8001d12:	4817      	ldr	r0, [pc, #92]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001d14:	f007 f804 	bl	8008d20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	4814      	ldr	r0, [pc, #80]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001d1e:	f006 ffff 	bl	8008d20 <HAL_GPIO_WritePin>
 8001d22:	e039      	b.n	8001d98 <HAL_TIM_PeriodElapsedCallback+0x6d8>
 8001d24:	f3af 8000 	nop.w
 8001d28:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d2c:	3f50624d 	.word	0x3f50624d
 8001d30:	24000608 	.word	0x24000608
 8001d34:	240005d0 	.word	0x240005d0
 8001d38:	240005a8 	.word	0x240005a8
 8001d3c:	240005f0 	.word	0x240005f0
 8001d40:	24000650 	.word	0x24000650
 8001d44:	24000610 	.word	0x24000610
 8001d48:	240005d8 	.word	0x240005d8
 8001d4c:	240005b0 	.word	0x240005b0
 8001d50:	240005f8 	.word	0x240005f8
 8001d54:	24000658 	.word	0x24000658
 8001d58:	24000618 	.word	0x24000618
 8001d5c:	24000600 	.word	0x24000600
 8001d60:	3ff00000 	.word	0x3ff00000
 8001d64:	bff00000 	.word	0xbff00000
 8001d68:	58021400 	.word	0x58021400
 8001d6c:	58020c00 	.word	0x58020c00
 8001d70:	58021800 	.word	0x58021800
		}else if(ut3 == 0){
 8001d74:	4ba4      	ldr	r3, [pc, #656]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001d76:	ed93 7b00 	vldr	d7, [r3]
 8001d7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d82:	d109      	bne.n	8001d98 <HAL_TIM_PeriodElapsedCallback+0x6d8>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2101      	movs	r1, #1
 8001d88:	48a0      	ldr	r0, [pc, #640]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001d8a:	f006 ffc9 	bl	8008d20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2102      	movs	r1, #2
 8001d92:	489e      	ldr	r0, [pc, #632]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001d94:	f006 ffc4 	bl	8008d20 <HAL_GPIO_WritePin>
		}

		if(ut4 > 0){
 8001d98:	4b9d      	ldr	r3, [pc, #628]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8001d9a:	ed93 7b00 	vldr	d7, [r3]
 8001d9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	dd0c      	ble.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x702>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dae:	4899      	ldr	r0, [pc, #612]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8001db0:	f006 ffb6 	bl	8008d20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,  GPIO_PIN_SET);
 8001db4:	2201      	movs	r2, #1
 8001db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dba:	4896      	ldr	r0, [pc, #600]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8001dbc:	f006 ffb0 	bl	8008d20 <HAL_GPIO_WritePin>
 8001dc0:	e028      	b.n	8001e14 <HAL_TIM_PeriodElapsedCallback+0x754>
		}else if(ut4 < 0){
 8001dc2:	4b93      	ldr	r3, [pc, #588]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8001dc4:	ed93 7b00 	vldr	d7, [r3]
 8001dc8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd0:	d50c      	bpl.n	8001dec <HAL_TIM_PeriodElapsedCallback+0x72c>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dd8:	488e      	ldr	r0, [pc, #568]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8001dda:	f006 ffa1 	bl	8008d20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001de4:	488b      	ldr	r0, [pc, #556]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8001de6:	f006 ff9b 	bl	8008d20 <HAL_GPIO_WritePin>
 8001dea:	e013      	b.n	8001e14 <HAL_TIM_PeriodElapsedCallback+0x754>
		}else if(ut4 == 0){
 8001dec:	4b88      	ldr	r3, [pc, #544]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8001dee:	ed93 7b00 	vldr	d7, [r3]
 8001df2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfa:	d10b      	bne.n	8001e14 <HAL_TIM_PeriodElapsedCallback+0x754>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e02:	4884      	ldr	r0, [pc, #528]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8001e04:	f006 ff8c 	bl	8008d20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e0e:	4881      	ldr	r0, [pc, #516]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8001e10:	f006 ff86 	bl	8008d20 <HAL_GPIO_WritePin>
		}


		ut1 = fabs(ut1);
 8001e14:	4b80      	ldr	r3, [pc, #512]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8001e16:	ed93 7b00 	vldr	d7, [r3]
 8001e1a:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e1e:	4b7e      	ldr	r3, [pc, #504]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8001e20:	ed83 7b00 	vstr	d7, [r3]
		ut2 = fabs(ut2);
 8001e24:	4b7d      	ldr	r3, [pc, #500]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8001e26:	ed93 7b00 	vldr	d7, [r3]
 8001e2a:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e2e:	4b7b      	ldr	r3, [pc, #492]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8001e30:	ed83 7b00 	vstr	d7, [r3]
		ut3 = fabs(ut3);
 8001e34:	4b74      	ldr	r3, [pc, #464]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001e36:	ed93 7b00 	vldr	d7, [r3]
 8001e3a:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e3e:	4b72      	ldr	r3, [pc, #456]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001e40:	ed83 7b00 	vstr	d7, [r3]
		ut4 = fabs(ut4);
 8001e44:	4b72      	ldr	r3, [pc, #456]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8001e46:	ed93 7b00 	vldr	d7, [r3]
 8001e4a:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e4e:	4b70      	ldr	r3, [pc, #448]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8001e50:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ut1 * 1000);
 8001e54:	4b70      	ldr	r3, [pc, #448]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8001e56:	ed93 7b00 	vldr	d7, [r3]
 8001e5a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8002000 <HAL_TIM_PeriodElapsedCallback+0x940>
 8001e5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e62:	4b6f      	ldr	r3, [pc, #444]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e6a:	ee17 2a90 	vmov	r2, s15
 8001e6e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ut2 * 1000);
 8001e70:	4b6a      	ldr	r3, [pc, #424]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8001e72:	ed93 7b00 	vldr	d7, [r3]
 8001e76:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8002000 <HAL_TIM_PeriodElapsedCallback+0x940>
 8001e7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e7e:	4b69      	ldr	r3, [pc, #420]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x964>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e86:	ee17 2a90 	vmov	r2, s15
 8001e8a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ut3 * 1000);
 8001e8c:	4b5e      	ldr	r3, [pc, #376]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001e8e:	ed93 7b00 	vldr	d7, [r3]
 8001e92:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8002000 <HAL_TIM_PeriodElapsedCallback+0x940>
 8001e96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e9a:	4b63      	ldr	r3, [pc, #396]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ea2:	ee17 2a90 	vmov	r2, s15
 8001ea6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ut4 * 1000);
 8001ea8:	4b59      	ldr	r3, [pc, #356]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8001eaa:	ed93 7b00 	vldr	d7, [r3]
 8001eae:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8002000 <HAL_TIM_PeriodElapsedCallback+0x940>
 8001eb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001eb6:	4b5d      	ldr	r3, [pc, #372]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ebe:	ee17 2a90 	vmov	r2, s15
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34

		error_last1 = error1;
 8001ec4:	4b5a      	ldr	r3, [pc, #360]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	495a      	ldr	r1, [pc, #360]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8001ecc:	e9c1 2300 	strd	r2, r3, [r1]
		error_last2 = error2;
 8001ed0:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	4959      	ldr	r1, [pc, #356]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8001ed8:	e9c1 2300 	strd	r2, r3, [r1]
		error_last3 = error3;
 8001edc:	4b58      	ldr	r3, [pc, #352]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	4958      	ldr	r1, [pc, #352]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001ee4:	e9c1 2300 	strd	r2, r3, [r1]
		error_last4 = error4;
 8001ee8:	4b57      	ldr	r3, [pc, #348]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eee:	4957      	ldr	r1, [pc, #348]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001ef0:	e9c1 2300 	strd	r2, r3, [r1]

		push_vel_x = (PV1 + PV2 + PV3 + PV4) * r/4 ;
 8001ef4:	4b56      	ldr	r3, [pc, #344]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001ef6:	ed93 6b00 	vldr	d6, [r3]
 8001efa:	4b56      	ldr	r3, [pc, #344]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001efc:	ed93 7b00 	vldr	d7, [r3]
 8001f00:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f04:	4b54      	ldr	r3, [pc, #336]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001f06:	ed93 7b00 	vldr	d7, [r3]
 8001f0a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f0e:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001f10:	ed93 7b00 	vldr	d7, [r3]
 8001f14:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f18:	4b51      	ldr	r3, [pc, #324]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001f1a:	ed93 7b00 	vldr	d7, [r3]
 8001f1e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f22:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001f26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f2a:	4b4e      	ldr	r3, [pc, #312]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001f2c:	ed83 7b00 	vstr	d7, [r3]
		push_vel_y = (-PV2 + PV1 + PV4 - PV3) * r/4 ;
 8001f30:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001f32:	ed93 6b00 	vldr	d6, [r3]
 8001f36:	4b47      	ldr	r3, [pc, #284]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001f38:	ed93 7b00 	vldr	d7, [r3]
 8001f3c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f40:	4b46      	ldr	r3, [pc, #280]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001f42:	ed93 7b00 	vldr	d7, [r3]
 8001f46:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f4a:	4b43      	ldr	r3, [pc, #268]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001f4c:	ed93 7b00 	vldr	d7, [r3]
 8001f50:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f54:	4b42      	ldr	r3, [pc, #264]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001f56:	ed93 7b00 	vldr	d7, [r3]
 8001f5a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f5e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001f62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f66:	4b40      	ldr	r3, [pc, #256]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001f68:	ed83 7b00 	vstr	d7, [r3]
		push_vel_z = (-PV2 + PV1 - PV4 + PV3) * r/(4 * (lx + ly) );
 8001f6c:	4b38      	ldr	r3, [pc, #224]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001f6e:	ed93 6b00 	vldr	d6, [r3]
 8001f72:	4b38      	ldr	r3, [pc, #224]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001f74:	ed93 7b00 	vldr	d7, [r3]
 8001f78:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f7c:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001f7e:	ed93 7b00 	vldr	d7, [r3]
 8001f82:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f86:	4b34      	ldr	r3, [pc, #208]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001f88:	ed93 7b00 	vldr	d7, [r3]
 8001f8c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f90:	4b33      	ldr	r3, [pc, #204]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001f92:	ed93 7b00 	vldr	d7, [r3]
 8001f96:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001f9a:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8001f9c:	ed93 6b00 	vldr	d6, [r3]
 8001fa0:	4b33      	ldr	r3, [pc, #204]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001fa2:	ed93 7b00 	vldr	d7, [r3]
 8001fa6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001faa:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001fae:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fb2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001fb6:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001fb8:	ed83 7b00 	vstr	d7, [r3]

		// 1 -> front right
		// 2 -> front left
		// 3 -> back(rear) right
		// 4 -> back(rear) left
		kkk += 1;
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	4a2d      	ldr	r2, [pc, #180]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001fc4:	6013      	str	r3, [r2, #0]
		if(kkk == 10){
 8001fc6:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b0a      	cmp	r3, #10
 8001fcc:	d113      	bne.n	8001ff6 <HAL_TIM_PeriodElapsedCallback+0x936>
			// change parameter to real velocity
			 publish_vel(push_vel_x, push_vel_y, push_vel_z);
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001fd0:	ed93 7b00 	vldr	d7, [r3]
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001fd6:	ed93 6b00 	vldr	d6, [r3]
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001fdc:	ed93 5b00 	vldr	d5, [r3]
 8001fe0:	eeb0 2b45 	vmov.f64	d2, d5
 8001fe4:	eeb0 1b46 	vmov.f64	d1, d6
 8001fe8:	eeb0 0b47 	vmov.f64	d0, d7
 8001fec:	f002 f874 	bl	80040d8 <publish_vel>
//			publish_vel(get_vel_x, get_vel_y, get_vel_z);
			kkk = 0;
 8001ff0:	4b21      	ldr	r3, [pc, #132]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	00000000 	.word	0x00000000
 8002004:	408f4000 	.word	0x408f4000
 8002008:	24000610 	.word	0x24000610
 800200c:	58021800 	.word	0x58021800
 8002010:	24000618 	.word	0x24000618
 8002014:	58021000 	.word	0x58021000
 8002018:	24000600 	.word	0x24000600
 800201c:	24000608 	.word	0x24000608
 8002020:	24000178 	.word	0x24000178
 8002024:	240001c4 	.word	0x240001c4
 8002028:	240002f4 	.word	0x240002f4
 800202c:	24000094 	.word	0x24000094
 8002030:	24000598 	.word	0x24000598
 8002034:	24000620 	.word	0x24000620
 8002038:	240005a0 	.word	0x240005a0
 800203c:	24000628 	.word	0x24000628
 8002040:	240005a8 	.word	0x240005a8
 8002044:	24000630 	.word	0x24000630
 8002048:	240005b0 	.word	0x240005b0
 800204c:	24000638 	.word	0x24000638
 8002050:	24000558 	.word	0x24000558
 8002054:	24000560 	.word	0x24000560
 8002058:	24000568 	.word	0x24000568
 800205c:	24000570 	.word	0x24000570
 8002060:	24000680 	.word	0x24000680
 8002064:	240006a0 	.word	0x240006a0
 8002068:	240006a8 	.word	0x240006a8
 800206c:	24000670 	.word	0x24000670
 8002070:	24000678 	.word	0x24000678
 8002074:	240006b0 	.word	0x240006b0
 8002078:	24000664 	.word	0x24000664

0800207c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002080:	b672      	cpsid	i
}
 8002082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002084:	e7fe      	b.n	8002084 <Error_Handler+0x8>

08002086 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <_ZN3ros3MsgC1Ev+0x1c>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	0800f530 	.word	0x0800f530

080020c8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
      data()
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ffe8 	bl	80020a8 <_ZN3ros3MsgC1Ev>
 80020d8:	4a06      	ldr	r2, [pc, #24]	; (80020f4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3304      	adds	r3, #4
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ffcf 	bl	8002086 <_ZN3ros4TimeC1Ev>
    {
    }
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	0800f518 	.word	0x0800f518

080020f8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6859      	ldr	r1, [r3, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	4413      	add	r3, r2
 8002110:	b2ca      	uxtb	r2, r1
 8002112:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	0a19      	lsrs	r1, r3, #8
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3301      	adds	r3, #1
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	4413      	add	r3, r2
 8002122:	b2ca      	uxtb	r2, r1
 8002124:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	0c19      	lsrs	r1, r3, #16
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3302      	adds	r3, #2
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	4413      	add	r3, r2
 8002134:	b2ca      	uxtb	r2, r1
 8002136:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	0e19      	lsrs	r1, r3, #24
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3303      	adds	r3, #3
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	4413      	add	r3, r2
 8002146:	b2ca      	uxtb	r2, r1
 8002148:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3304      	adds	r3, #4
 800214e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6899      	ldr	r1, [r3, #8]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	4413      	add	r3, r2
 800215a:	b2ca      	uxtb	r2, r1
 800215c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0a19      	lsrs	r1, r3, #8
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3301      	adds	r3, #1
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	4413      	add	r3, r2
 800216c:	b2ca      	uxtb	r2, r1
 800216e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	0c19      	lsrs	r1, r3, #16
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3302      	adds	r3, #2
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	4413      	add	r3, r2
 800217e:	b2ca      	uxtb	r2, r1
 8002180:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	0e19      	lsrs	r1, r3, #24
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3303      	adds	r3, #3
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	4413      	add	r3, r2
 8002190:	b2ca      	uxtb	r2, r1
 8002192:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3304      	adds	r3, #4
 8002198:	60fb      	str	r3, [r7, #12]
      return offset;
 800219a:	68fb      	ldr	r3, [r7, #12]
    }
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3301      	adds	r3, #1
 80021cc:	6839      	ldr	r1, [r7, #0]
 80021ce:	440b      	add	r3, r1
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3302      	adds	r3, #2
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	440b      	add	r3, r1
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3303      	adds	r3, #3
 80021f8:	6839      	ldr	r1, [r7, #0]
 80021fa:	440b      	add	r3, r1
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	061b      	lsls	r3, r3, #24
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3304      	adds	r3, #4
 800220a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	4413      	add	r3, r2
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3301      	adds	r3, #1
 8002222:	6839      	ldr	r1, [r7, #0]
 8002224:	440b      	add	r3, r1
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	3302      	adds	r3, #2
 8002238:	6839      	ldr	r1, [r7, #0]
 800223a:	440b      	add	r3, r1
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	041b      	lsls	r3, r3, #16
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3303      	adds	r3, #3
 800224e:	6839      	ldr	r1, [r7, #0]
 8002250:	440b      	add	r3, r1
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	061b      	lsls	r3, r3, #24
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3304      	adds	r3, #4
 8002260:	60fb      	str	r3, [r7, #12]
     return offset;
 8002262:	68fb      	ldr	r3, [r7, #12]
    }
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	0800f218 	.word	0x0800f218

0800228c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	0800f228 	.word	0x0800f228

080022a8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fef8 	bl	80020a8 <_ZN3ros3MsgC1Ev>
 80022b8:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	809a      	strh	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a09      	ldr	r2, [pc, #36]	; (80022ec <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a07      	ldr	r2, [pc, #28]	; (80022ec <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80022ce:	60da      	str	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a06      	ldr	r2, [pc, #24]	; (80022ec <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80022d4:	611a      	str	r2, [r3, #16]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	615a      	str	r2, [r3, #20]
    {
    }
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	0800f500 	.word	0x0800f500
 80022ec:	0800f24c 	.word	0x0800f24c

080022f0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	8899      	ldrh	r1, [r3, #4]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	4413      	add	r3, r2
 8002308:	b2ca      	uxtb	r2, r1
 800230a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	889b      	ldrh	r3, [r3, #4]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	b299      	uxth	r1, r3
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	3301      	adds	r3, #1
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	4413      	add	r3, r2
 800231c:	b2ca      	uxtb	r2, r1
 800231e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	3302      	adds	r3, #2
 8002324:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fd fff0 	bl	8000310 <strlen>
 8002330:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4413      	add	r3, r2
 8002338:	69b9      	ldr	r1, [r7, #24]
 800233a:	4618      	mov	r0, r3
 800233c:	f001 fef0 	bl	8004120 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	3304      	adds	r3, #4
 8002344:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	18d0      	adds	r0, r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4619      	mov	r1, r3
 8002354:	f00c fdbc 	bl	800eed0 <memcpy>
      offset += length_topic_name;
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4413      	add	r3, r2
 800235e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fd ffd3 	bl	8000310 <strlen>
 800236a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	4413      	add	r3, r2
 8002372:	6979      	ldr	r1, [r7, #20]
 8002374:	4618      	mov	r0, r3
 8002376:	f001 fed3 	bl	8004120 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	18d0      	adds	r0, r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4619      	mov	r1, r3
 800238e:	f00c fd9f 	bl	800eed0 <memcpy>
      offset += length_message_type;
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	4413      	add	r3, r2
 8002398:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fd ffb6 	bl	8000310 <strlen>
 80023a4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	4413      	add	r3, r2
 80023ac:	6939      	ldr	r1, [r7, #16]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f001 feb6 	bl	8004120 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	3304      	adds	r3, #4
 80023b8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	18d0      	adds	r0, r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4619      	mov	r1, r3
 80023c8:	f00c fd82 	bl	800eed0 <memcpy>
      offset += length_md5sum;
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80023da:	68f9      	ldr	r1, [r7, #12]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	4413      	add	r3, r2
 80023e2:	b2ca      	uxtb	r2, r1
 80023e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	0a19      	lsrs	r1, r3, #8
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3301      	adds	r3, #1
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	4413      	add	r3, r2
 80023f2:	b2ca      	uxtb	r2, r1
 80023f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	0c19      	lsrs	r1, r3, #16
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3302      	adds	r3, #2
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	4413      	add	r3, r2
 8002402:	b2ca      	uxtb	r2, r1
 8002404:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	0e19      	lsrs	r1, r3, #24
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3303      	adds	r3, #3
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	4413      	add	r3, r2
 8002412:	b2ca      	uxtb	r2, r1
 8002414:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3304      	adds	r3, #4
 800241a:	61fb      	str	r3, [r7, #28]
      return offset;
 800241c:	69fb      	ldr	r3, [r7, #28]
    }
 800241e:	4618      	mov	r0, r3
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002426:	b580      	push	{r7, lr}
 8002428:	b08a      	sub	sp, #40	; 0x28
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	4413      	add	r3, r2
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b29a      	uxth	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	889b      	ldrh	r3, [r3, #4]
 8002446:	b21a      	sxth	r2, r3
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	3301      	adds	r3, #1
 800244c:	6839      	ldr	r1, [r7, #0]
 800244e:	440b      	add	r3, r1
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	b21b      	sxth	r3, r3
 8002456:	4313      	orrs	r3, r2
 8002458:	b21b      	sxth	r3, r3
 800245a:	b29a      	uxth	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	3302      	adds	r3, #2
 8002464:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	441a      	add	r2, r3
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f001 fe72 	bl	800415c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	3304      	adds	r3, #4
 800247c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	4413      	add	r3, r2
 8002488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248a:	429a      	cmp	r2, r3
 800248c:	d20c      	bcs.n	80024a8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	441a      	add	r2, r3
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	3b01      	subs	r3, #1
 8002498:	6839      	ldr	r1, [r7, #0]
 800249a:	440b      	add	r3, r1
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	3301      	adds	r3, #1
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
 80024a6:	e7ec      	b.n	8002482 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	4413      	add	r3, r2
 80024ae:	3b01      	subs	r3, #1
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	441a      	add	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	4413      	add	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	441a      	add	r2, r3
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f001 fe3f 	bl	800415c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	3304      	adds	r3, #4
 80024e2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	623b      	str	r3, [r7, #32]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	6a3a      	ldr	r2, [r7, #32]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d20c      	bcs.n	800250e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	441a      	add	r2, r3
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	6839      	ldr	r1, [r7, #0]
 8002500:	440b      	add	r3, r1
 8002502:	7812      	ldrb	r2, [r2, #0]
 8002504:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	3301      	adds	r3, #1
 800250a:	623b      	str	r3, [r7, #32]
 800250c:	e7ec      	b.n	80024e8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4413      	add	r3, r2
 8002514:	3b01      	subs	r3, #1
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	4413      	add	r3, r2
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	3b01      	subs	r3, #1
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	441a      	add	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	441a      	add	r2, r3
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f001 fe0c 	bl	800415c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	3304      	adds	r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	429a      	cmp	r2, r3
 8002558:	d20c      	bcs.n	8002574 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	441a      	add	r2, r3
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	3b01      	subs	r3, #1
 8002564:	6839      	ldr	r1, [r7, #0]
 8002566:	440b      	add	r3, r1
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	3301      	adds	r3, #1
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	e7ec      	b.n	800254e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4413      	add	r3, r2
 800257a:	3b01      	subs	r3, #1
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	4413      	add	r3, r2
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	3b01      	subs	r3, #1
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	441a      	add	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4413      	add	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	6839      	ldr	r1, [r7, #0]
 80025a2:	440a      	add	r2, r1
 80025a4:	7812      	ldrb	r2, [r2, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	3301      	adds	r3, #1
 80025b0:	6839      	ldr	r1, [r7, #0]
 80025b2:	440b      	add	r3, r1
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	3302      	adds	r3, #2
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	440b      	add	r3, r1
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	3303      	adds	r3, #3
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	440b      	add	r3, r1
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	061b      	lsls	r3, r3, #24
 80025dc:	4313      	orrs	r3, r2
 80025de:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	3304      	adds	r3, #4
 80025ea:	61bb      	str	r3, [r7, #24]
     return offset;
 80025ec:	69bb      	ldr	r3, [r7, #24]
    }
 80025ee:	4618      	mov	r0, r3
 80025f0:	3728      	adds	r7, #40	; 0x28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	0800f250 	.word	0x0800f250

08002614 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	0800f26c 	.word	0x0800f26c

08002630 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fd34 	bl	80020a8 <_ZN3ros3MsgC1Ev>
 8002640:	4a06      	ldr	r2, [pc, #24]	; (800265c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	711a      	strb	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a04      	ldr	r2, [pc, #16]	; (8002660 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002650:	609a      	str	r2, [r3, #8]
    {
    }
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	0800f4e8 	.word	0x0800f4e8
 8002660:	0800f24c 	.word	0x0800f24c

08002664 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	4413      	add	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	7912      	ldrb	r2, [r2, #4]
 800267c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3301      	adds	r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd fe41 	bl	8000310 <strlen>
 800268e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	4413      	add	r3, r2
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	4618      	mov	r0, r3
 800269a:	f001 fd41 	bl	8004120 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3304      	adds	r3, #4
 80026a2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	18d0      	adds	r0, r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	4619      	mov	r1, r3
 80026b2:	f00c fc0d 	bl	800eed0 <memcpy>
      offset += length_msg;
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4413      	add	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
      return offset;
 80026be:	68fb      	ldr	r3, [r7, #12]
    }
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	781a      	ldrb	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	3301      	adds	r3, #1
 80026e6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	441a      	add	r2, r3
 80026ee:	f107 030c 	add.w	r3, r7, #12
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f001 fd31 	bl	800415c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	3304      	adds	r3, #4
 80026fe:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4413      	add	r3, r2
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	429a      	cmp	r2, r3
 800270e:	d20c      	bcs.n	800272a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	441a      	add	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3b01      	subs	r3, #1
 800271a:	6839      	ldr	r1, [r7, #0]
 800271c:	440b      	add	r3, r1
 800271e:	7812      	ldrb	r2, [r2, #0]
 8002720:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3301      	adds	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	e7ec      	b.n	8002704 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4413      	add	r3, r2
 8002730:	3b01      	subs	r3, #1
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	4413      	add	r3, r2
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	3b01      	subs	r3, #1
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	441a      	add	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
     return offset;
 800274e:	693b      	ldr	r3, [r7, #16]
    }
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	0800f290 	.word	0x0800f290

08002774 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	0800f2a4 	.word	0x0800f2a4

08002790 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fc84 	bl	80020a8 <_ZN3ros3MsgC1Ev>
 80027a0:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	611a      	str	r2, [r3, #16]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	619a      	str	r2, [r3, #24]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	61da      	str	r2, [r3, #28]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	0800f4d0 	.word	0x0800f4d0

080027d8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	4413      	add	r3, r2
 80027f0:	b2ca      	uxtb	r2, r1
 80027f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	0a19      	lsrs	r1, r3, #8
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	3301      	adds	r3, #1
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	4413      	add	r3, r2
 8002802:	b2ca      	uxtb	r2, r1
 8002804:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	0c19      	lsrs	r1, r3, #16
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	3302      	adds	r3, #2
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	4413      	add	r3, r2
 8002814:	b2ca      	uxtb	r2, r1
 8002816:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	0e19      	lsrs	r1, r3, #24
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	3303      	adds	r3, #3
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	4413      	add	r3, r2
 8002826:	b2ca      	uxtb	r2, r1
 8002828:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	3304      	adds	r3, #4
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	6a3a      	ldr	r2, [r7, #32]
 800283a:	429a      	cmp	r2, r3
 800283c:	d22b      	bcs.n	8002896 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800284c:	6939      	ldr	r1, [r7, #16]
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	4413      	add	r3, r2
 8002854:	b2ca      	uxtb	r2, r1
 8002856:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	0a19      	lsrs	r1, r3, #8
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	3301      	adds	r3, #1
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	4413      	add	r3, r2
 8002864:	b2ca      	uxtb	r2, r1
 8002866:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	0c19      	lsrs	r1, r3, #16
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	3302      	adds	r3, #2
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	4413      	add	r3, r2
 8002874:	b2ca      	uxtb	r2, r1
 8002876:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	0e19      	lsrs	r1, r3, #24
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	3303      	adds	r3, #3
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	4413      	add	r3, r2
 8002884:	b2ca      	uxtb	r2, r1
 8002886:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	3304      	adds	r3, #4
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	3301      	adds	r3, #1
 8002892:	623b      	str	r3, [r7, #32]
 8002894:	e7ce      	b.n	8002834 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6919      	ldr	r1, [r3, #16]
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	4413      	add	r3, r2
 80028a0:	b2ca      	uxtb	r2, r1
 80028a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	0a19      	lsrs	r1, r3, #8
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	3301      	adds	r3, #1
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	4413      	add	r3, r2
 80028b2:	b2ca      	uxtb	r2, r1
 80028b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	0c19      	lsrs	r1, r3, #16
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	3302      	adds	r3, #2
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	b2ca      	uxtb	r2, r1
 80028c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	0e19      	lsrs	r1, r3, #24
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	3303      	adds	r3, #3
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	4413      	add	r3, r2
 80028d6:	b2ca      	uxtb	r2, r1
 80028d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	3304      	adds	r3, #4
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d22b      	bcs.n	8002946 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80028fc:	68f9      	ldr	r1, [r7, #12]
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	4413      	add	r3, r2
 8002904:	b2ca      	uxtb	r2, r1
 8002906:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	0a19      	lsrs	r1, r3, #8
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	3301      	adds	r3, #1
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	4413      	add	r3, r2
 8002914:	b2ca      	uxtb	r2, r1
 8002916:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	0c19      	lsrs	r1, r3, #16
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	3302      	adds	r3, #2
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	4413      	add	r3, r2
 8002924:	b2ca      	uxtb	r2, r1
 8002926:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	0e19      	lsrs	r1, r3, #24
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	3303      	adds	r3, #3
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	4413      	add	r3, r2
 8002934:	b2ca      	uxtb	r2, r1
 8002936:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	3304      	adds	r3, #4
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3301      	adds	r3, #1
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	e7ce      	b.n	80028e4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69d9      	ldr	r1, [r3, #28]
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	4413      	add	r3, r2
 8002950:	b2ca      	uxtb	r2, r1
 8002952:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	0a19      	lsrs	r1, r3, #8
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	3301      	adds	r3, #1
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	4413      	add	r3, r2
 8002962:	b2ca      	uxtb	r2, r1
 8002964:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	0c19      	lsrs	r1, r3, #16
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	3302      	adds	r3, #2
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	4413      	add	r3, r2
 8002974:	b2ca      	uxtb	r2, r1
 8002976:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	0e19      	lsrs	r1, r3, #24
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	3303      	adds	r3, #3
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	4413      	add	r3, r2
 8002986:	b2ca      	uxtb	r2, r1
 8002988:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	3304      	adds	r3, #4
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002990:	2300      	movs	r3, #0
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	429a      	cmp	r2, r3
 800299c:	d228      	bcs.n	80029f0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fd fcb0 	bl	8000310 <strlen>
 80029b0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	6979      	ldr	r1, [r7, #20]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f001 fbb0 	bl	8004120 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	3304      	adds	r3, #4
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	18d0      	adds	r0, r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4619      	mov	r1, r3
 80029dc:	f00c fa78 	bl	800eed0 <memcpy>
      offset += length_stringsi;
 80029e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	4413      	add	r3, r2
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	3301      	adds	r3, #1
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	e7d1      	b.n	8002994 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80029f2:	4618      	mov	r0, r3
 80029f4:	3728      	adds	r7, #40	; 0x28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b08e      	sub	sp, #56	; 0x38
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	3301      	adds	r3, #1
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	4413      	add	r3, r2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	021b      	lsls	r3, r3, #8
 8002a1e:	6a3a      	ldr	r2, [r7, #32]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a26:	3302      	adds	r3, #2
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	041b      	lsls	r3, r3, #16
 8002a30:	6a3a      	ldr	r2, [r7, #32]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	3303      	adds	r3, #3
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	6a3a      	ldr	r2, [r7, #32]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	6a3a      	ldr	r2, [r7, #32]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d90a      	bls.n	8002a6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f00c fa4a 	bl	800eefc <realloc>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a3a      	ldr	r2, [r7, #32]
 8002a72:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a74:	2300      	movs	r3, #0
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d236      	bcs.n	8002af0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a8a:	6839      	ldr	r1, [r7, #0]
 8002a8c:	440a      	add	r2, r1
 8002a8e:	7812      	ldrb	r2, [r2, #0]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a98:	3301      	adds	r3, #1
 8002a9a:	6839      	ldr	r1, [r7, #0]
 8002a9c:	440b      	add	r3, r1
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aaa:	3302      	adds	r3, #2
 8002aac:	6839      	ldr	r1, [r7, #0]
 8002aae:	440b      	add	r3, r1
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abc:	3303      	adds	r3, #3
 8002abe:	6839      	ldr	r1, [r7, #0]
 8002ac0:	440b      	add	r3, r1
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	3208      	adds	r2, #8
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	3301      	adds	r3, #1
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
 8002aee:	e7c3      	b.n	8002a78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	4413      	add	r3, r2
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afc:	3301      	adds	r3, #1
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	4413      	add	r3, r2
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0e:	3302      	adds	r3, #2
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b20:	3303      	adds	r3, #3
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	4413      	add	r3, r2
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b32:	3304      	adds	r3, #4
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d90a      	bls.n	8002b56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699a      	ldr	r2, [r3, #24]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	f00c f9d6 	bl	800eefc <realloc>
 8002b50:	4602      	mov	r2, r0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d236      	bcs.n	8002bd8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b72:	6839      	ldr	r1, [r7, #0]
 8002b74:	440a      	add	r2, r1
 8002b76:	7812      	ldrb	r2, [r2, #0]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	3301      	adds	r3, #1
 8002b82:	6839      	ldr	r1, [r7, #0]
 8002b84:	440b      	add	r3, r1
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b92:	3302      	adds	r3, #2
 8002b94:	6839      	ldr	r1, [r7, #0]
 8002b96:	440b      	add	r3, r1
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba4:	3303      	adds	r3, #3
 8002ba6:	6839      	ldr	r1, [r7, #0]
 8002ba8:	440b      	add	r3, r1
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	061b      	lsls	r3, r3, #24
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bba:	3304      	adds	r3, #4
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	3214      	adds	r2, #20
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd6:	e7c3      	b.n	8002b60 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	4413      	add	r3, r2
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be4:	3301      	adds	r3, #1
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	4413      	add	r3, r2
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c08:	3303      	adds	r3, #3
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	061b      	lsls	r3, r3, #24
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d90a      	bls.n	8002c3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f00c f962 	bl	800eefc <realloc>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002c44:	2300      	movs	r3, #0
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d23f      	bcs.n	8002cd2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	441a      	add	r2, r3
 8002c58:	f107 030c 	add.w	r3, r7, #12
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 fa7c 	bl	800415c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	3304      	adds	r3, #4
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d20c      	bcs.n	8002c94 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	441a      	add	r2, r3
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6839      	ldr	r1, [r7, #0]
 8002c86:	440b      	add	r3, r1
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	3301      	adds	r3, #1
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	e7ec      	b.n	8002c6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4413      	add	r3, r2
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	441a      	add	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	3220      	adds	r2, #32
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	3301      	adds	r3, #1
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd0:	e7ba      	b.n	8002c48 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3738      	adds	r7, #56	; 0x38
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	0800f3f4 	.word	0x0800f3f4

08002cf8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	0800f2c8 	.word	0x0800f2c8

08002d14 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	611a      	str	r2, [r3, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68d8      	ldr	r0, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6891      	ldr	r1, [r2, #8]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	4798      	blx	r3
 8002d60:	4603      	mov	r3, r0
  };
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
  }
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a42      	ldr	r2, [pc, #264]	; (8002ea0 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d068      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a40      	ldr	r2, [pc, #256]	; (8002ea4 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d061      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a3d      	ldr	r2, [pc, #244]	; (8002ea8 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d05a      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3b      	ldr	r2, [pc, #236]	; (8002eac <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d053      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a38      	ldr	r2, [pc, #224]	; (8002eb0 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d04c      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a36      	ldr	r2, [pc, #216]	; (8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d045      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a33      	ldr	r2, [pc, #204]	; (8002eb8 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d03e      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a31      	ldr	r2, [pc, #196]	; (8002ebc <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d037      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2e      	ldr	r2, [pc, #184]	; (8002ec0 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d030      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a2c      	ldr	r2, [pc, #176]	; (8002ec4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d029      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a29      	ldr	r2, [pc, #164]	; (8002ec8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d022      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a27      	ldr	r2, [pc, #156]	; (8002ecc <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d01b      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d014      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a22      	ldr	r2, [pc, #136]	; (8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00d      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1f      	ldr	r2, [pc, #124]	; (8002ed8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d006      	beq.n	8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d109      	bne.n	8002e80 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e7e:	e008      	b.n	8002e92 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40020010 	.word	0x40020010
 8002ea4:	40020028 	.word	0x40020028
 8002ea8:	40020040 	.word	0x40020040
 8002eac:	40020058 	.word	0x40020058
 8002eb0:	40020070 	.word	0x40020070
 8002eb4:	40020088 	.word	0x40020088
 8002eb8:	400200a0 	.word	0x400200a0
 8002ebc:	400200b8 	.word	0x400200b8
 8002ec0:	40020410 	.word	0x40020410
 8002ec4:	40020428 	.word	0x40020428
 8002ec8:	40020440 	.word	0x40020440
 8002ecc:	40020458 	.word	0x40020458
 8002ed0:	40020470 	.word	0x40020470
 8002ed4:	40020488 	.word	0x40020488
 8002ed8:	400204a0 	.word	0x400204a0
 8002edc:	400204b8 	.word	0x400204b8

08002ee0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a0c      	ldr	r2, [pc, #48]	; (8002f1c <_ZN13STM32HardwareC1Ev+0x3c>)
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002efc:	461a      	mov	r2, r3
 8002efe:	2300      	movs	r3, #0
 8002f00:	6093      	str	r3, [r2, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60d3      	str	r3, [r2, #12]
    }
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	240003d8 	.word	0x240003d8

08002f20 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f804 	bl	8002f36 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3304      	adds	r3, #4
 8002f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f009 ff42 	bl	800cdd4 <HAL_UART_Receive_DMA>
    }
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f64:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ff09 	bl	8002d84 <_ZN13STM32Hardware10getRdmaIndEv>
 8002f72:	4603      	mov	r3, r0
 8002f74:	429c      	cmp	r4, r3
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d012      	beq.n	8002fa8 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002f88:	1c59      	adds	r1, r3, #1
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	4413      	add	r3, r2
 8002f94:	791b      	ldrb	r3, [r3, #4]
 8002f96:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002f9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    }
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd90      	pop	{r4, r7, pc}
	...

08002fb4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d108      	bne.n	8002fda <_ZN13STM32Hardware5flushEv+0x26>
 8002fc8:	4b2c      	ldr	r3, [pc, #176]	; (800307c <_ZN13STM32Hardware5flushEv+0xc8>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	f083 0301 	eor.w	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <_ZN13STM32Hardware5flushEv+0x26>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <_ZN13STM32Hardware5flushEv+0x28>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d049      	beq.n	8003074 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002fe0:	4b26      	ldr	r3, [pc, #152]	; (800307c <_ZN13STM32Hardware5flushEv+0xc8>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d039      	beq.n	800306e <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	429a      	cmp	r2, r3
 800300c:	d20c      	bcs.n	8003028 <_ZN13STM32Hardware5flushEv+0x74>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	b29a      	uxth	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	b29b      	uxth	r3, r3
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	b29b      	uxth	r3, r3
 8003026:	e007      	b.n	8003038 <_ZN13STM32Hardware5flushEv+0x84>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	b29b      	uxth	r3, r3
 8003032:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8003036:	b29b      	uxth	r3, r3
 8003038:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	89fa      	ldrh	r2, [r7, #14]
 8003050:	4619      	mov	r1, r3
 8003052:	f009 fe2d 	bl	800ccb0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	89fb      	ldrh	r3, [r7, #14]
 8003060:	4413      	add	r3, r2
 8003062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800306c:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 800306e:	4b03      	ldr	r3, [pc, #12]	; (800307c <_ZN13STM32Hardware5flushEv+0xc8>)
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
      }
    }
 8003074:	bf00      	nop
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	240006bc 	.word	0x240006bc

08003080 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
      int n = length;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003096:	bfa8      	it	ge
 8003098:	f44f 6300 	movge.w	r3, #2048	; 0x800
 800309c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	4293      	cmp	r3, r2
 80030ae:	bf28      	it	cs
 80030b0:	4613      	movcs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f00b ff01 	bl	800eed0 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	4413      	add	r3, r2
 80030da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030e4:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d00b      	beq.n	8003106 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f603 0008 	addw	r0, r3, #2056	; 0x808
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	18d1      	adds	r1, r2, r3
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	461a      	mov	r2, r3
 8003102:	f00b fee5 	bl	800eed0 <memcpy>
      }

      flush();
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7ff ff54 	bl	8002fb4 <_ZN13STM32Hardware5flushEv>
    }
 800310c:	bf00      	nop
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	f002 fd02 	bl	8005b24 <HAL_GetTick>
 8003120:	4603      	mov	r3, r0
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
      data(0)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe ffb6 	bl	80020a8 <_ZN3ros3MsgC1Ev>
 800313c:	4a07      	ldr	r2, [pc, #28]	; (800315c <_ZN8std_msgs5Int64C1Ev+0x30>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	0800f48c 	.word	0x0800f48c

08003160 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003174:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003178:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800317c:	6979      	ldr	r1, [r7, #20]
 800317e:	6838      	ldr	r0, [r7, #0]
 8003180:	4401      	add	r1, r0
 8003182:	b2d3      	uxtb	r3, r2
 8003184:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003186:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	0a02      	lsrs	r2, r0, #8
 8003194:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003198:	0a0b      	lsrs	r3, r1, #8
 800319a:	6979      	ldr	r1, [r7, #20]
 800319c:	3101      	adds	r1, #1
 800319e:	6838      	ldr	r0, [r7, #0]
 80031a0:	4401      	add	r1, r0
 80031a2:	b2d3      	uxtb	r3, r2
 80031a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80031a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	0c02      	lsrs	r2, r0, #16
 80031b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80031b8:	0c0b      	lsrs	r3, r1, #16
 80031ba:	6979      	ldr	r1, [r7, #20]
 80031bc:	3102      	adds	r1, #2
 80031be:	6838      	ldr	r0, [r7, #0]
 80031c0:	4401      	add	r1, r0
 80031c2:	b2d3      	uxtb	r3, r2
 80031c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80031c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	0e02      	lsrs	r2, r0, #24
 80031d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031d8:	0e0b      	lsrs	r3, r1, #24
 80031da:	6979      	ldr	r1, [r7, #20]
 80031dc:	3103      	adds	r1, #3
 80031de:	6838      	ldr	r0, [r7, #0]
 80031e0:	4401      	add	r1, r0
 80031e2:	b2d3      	uxtb	r3, r2
 80031e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80031e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	000a      	movs	r2, r1
 80031f4:	2300      	movs	r3, #0
 80031f6:	6979      	ldr	r1, [r7, #20]
 80031f8:	3104      	adds	r1, #4
 80031fa:	6838      	ldr	r0, [r7, #0]
 80031fc:	4401      	add	r1, r0
 80031fe:	b2d3      	uxtb	r3, r2
 8003200:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8003202:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	0a0a      	lsrs	r2, r1, #8
 8003210:	2300      	movs	r3, #0
 8003212:	6979      	ldr	r1, [r7, #20]
 8003214:	3105      	adds	r1, #5
 8003216:	6838      	ldr	r0, [r7, #0]
 8003218:	4401      	add	r1, r0
 800321a:	b2d3      	uxtb	r3, r2
 800321c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 800321e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	0c0a      	lsrs	r2, r1, #16
 800322c:	2300      	movs	r3, #0
 800322e:	6979      	ldr	r1, [r7, #20]
 8003230:	3106      	adds	r1, #6
 8003232:	6838      	ldr	r0, [r7, #0]
 8003234:	4401      	add	r1, r0
 8003236:	b2d3      	uxtb	r3, r2
 8003238:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 800323a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	0e0a      	lsrs	r2, r1, #24
 8003248:	2300      	movs	r3, #0
 800324a:	6979      	ldr	r1, [r7, #20]
 800324c:	3107      	adds	r1, #7
 800324e:	6838      	ldr	r0, [r7, #0]
 8003250:	4401      	add	r1, r0
 8003252:	b2d3      	uxtb	r3, r2
 8003254:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	3308      	adds	r3, #8
 800325a:	617b      	str	r3, [r7, #20]
      return offset;
 800325c:	697b      	ldr	r3, [r7, #20]
    }
 800325e:	4618      	mov	r0, r3
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800326a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800326e:	b0a3      	sub	sp, #140	; 0x8c
 8003270:	af00      	add	r7, sp, #0
 8003272:	6778      	str	r0, [r7, #116]	; 0x74
 8003274:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003288:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800328c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2200      	movs	r2, #0
 800329a:	461c      	mov	r4, r3
 800329c:	4615      	mov	r5, r2
 800329e:	ea40 0804 	orr.w	r8, r0, r4
 80032a2:	ea41 0905 	orr.w	r9, r1, r5
 80032a6:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80032aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032b6:	4413      	add	r3, r2
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2200      	movs	r2, #0
 80032be:	469a      	mov	sl, r3
 80032c0:	4693      	mov	fp, r2
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80032ce:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80032d2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80032d6:	ea40 0402 	orr.w	r4, r0, r2
 80032da:	66bc      	str	r4, [r7, #104]	; 0x68
 80032dc:	430b      	orrs	r3, r1
 80032de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032e0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80032e4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80032e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032f0:	1c9a      	adds	r2, r3, #2
 80032f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f4:	4413      	add	r3, r2
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2200      	movs	r2, #0
 80032fc:	663b      	str	r3, [r7, #96]	; 0x60
 80032fe:	667a      	str	r2, [r7, #100]	; 0x64
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800330c:	464c      	mov	r4, r9
 800330e:	0423      	lsls	r3, r4, #16
 8003310:	4644      	mov	r4, r8
 8003312:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003316:	4644      	mov	r4, r8
 8003318:	0422      	lsls	r2, r4, #16
 800331a:	ea40 0402 	orr.w	r4, r0, r2
 800331e:	65bc      	str	r4, [r7, #88]	; 0x58
 8003320:	430b      	orrs	r3, r1
 8003322:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003324:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003328:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800332c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003330:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003334:	1cda      	adds	r2, r3, #3
 8003336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003338:	4413      	add	r3, r2
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2200      	movs	r2, #0
 8003340:	653b      	str	r3, [r7, #80]	; 0x50
 8003342:	657a      	str	r2, [r7, #84]	; 0x54
 8003344:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003348:	4623      	mov	r3, r4
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800334e:	4623      	mov	r3, r4
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	64bb      	str	r3, [r7, #72]	; 0x48
 8003354:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003358:	4623      	mov	r3, r4
 800335a:	4303      	orrs	r3, r0
 800335c:	643b      	str	r3, [r7, #64]	; 0x40
 800335e:	462b      	mov	r3, r5
 8003360:	430b      	orrs	r3, r1
 8003362:	647b      	str	r3, [r7, #68]	; 0x44
 8003364:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003368:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800336c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003374:	1d1a      	adds	r2, r3, #4
 8003376:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003378:	4413      	add	r3, r2
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2200      	movs	r2, #0
 8003380:	63bb      	str	r3, [r7, #56]	; 0x38
 8003382:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800338e:	0023      	movs	r3, r4
 8003390:	2200      	movs	r2, #0
 8003392:	ea40 0402 	orr.w	r4, r0, r2
 8003396:	633c      	str	r4, [r7, #48]	; 0x30
 8003398:	430b      	orrs	r3, r1
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
 800339c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80033a0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80033a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ac:	1d5a      	adds	r2, r3, #5
 80033ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b0:	4413      	add	r3, r2
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2200      	movs	r2, #0
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80033c6:	0223      	lsls	r3, r4, #8
 80033c8:	2200      	movs	r2, #0
 80033ca:	ea40 0402 	orr.w	r4, r0, r2
 80033ce:	623c      	str	r4, [r7, #32]
 80033d0:	430b      	orrs	r3, r1
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
 80033d4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80033d8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80033dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033e4:	3306      	adds	r3, #6
 80033e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80033e8:	4413      	add	r3, r2
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2200      	movs	r2, #0
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	61fa      	str	r2, [r7, #28]
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	69bc      	ldr	r4, [r7, #24]
 80033fe:	0423      	lsls	r3, r4, #16
 8003400:	2200      	movs	r2, #0
 8003402:	ea40 0402 	orr.w	r4, r0, r2
 8003406:	613c      	str	r4, [r7, #16]
 8003408:	430b      	orrs	r3, r1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003410:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003414:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003418:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800341c:	3307      	adds	r3, #7
 800341e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003420:	4413      	add	r3, r2
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2200      	movs	r2, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	60fa      	str	r2, [r7, #12]
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	68bc      	ldr	r4, [r7, #8]
 8003436:	0623      	lsls	r3, r4, #24
 8003438:	2200      	movs	r2, #0
 800343a:	ea40 0402 	orr.w	r4, r0, r2
 800343e:	603c      	str	r4, [r7, #0]
 8003440:	430b      	orrs	r3, r1
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003448:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 800344c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003450:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003452:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003456:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800345a:	3308      	adds	r3, #8
 800345c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8003464:	4618      	mov	r0, r3
 8003466:	378c      	adds	r7, #140	; 0x8c
 8003468:	46bd      	mov	sp, r7
 800346a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800346e:	4770      	bx	lr

08003470 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	0800f2ec 	.word	0x0800f2ec

0800348c <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	0800f2fc 	.word	0x0800f2fc

080034a8 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fdf8 	bl	80020a8 <_ZN3ros3MsgC1Ev>
 80034b8:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	0800f474 	.word	0x0800f474

080034f8 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80034f8:	b480      	push	{r7}
 80034fa:	b08b      	sub	sp, #44	; 0x2c
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800350c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003516:	6838      	ldr	r0, [r7, #0]
 8003518:	4401      	add	r1, r0
 800351a:	b2d3      	uxtb	r3, r2
 800351c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800351e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	0a02      	lsrs	r2, r0, #8
 800352c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003530:	0a0b      	lsrs	r3, r1, #8
 8003532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003534:	3101      	adds	r1, #1
 8003536:	6838      	ldr	r0, [r7, #0]
 8003538:	4401      	add	r1, r0
 800353a:	b2d3      	uxtb	r3, r2
 800353c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800353e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	0c02      	lsrs	r2, r0, #16
 800354c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003550:	0c0b      	lsrs	r3, r1, #16
 8003552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003554:	3102      	adds	r1, #2
 8003556:	6838      	ldr	r0, [r7, #0]
 8003558:	4401      	add	r1, r0
 800355a:	b2d3      	uxtb	r3, r2
 800355c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800355e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	0e02      	lsrs	r2, r0, #24
 800356c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003570:	0e0b      	lsrs	r3, r1, #24
 8003572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003574:	3103      	adds	r1, #3
 8003576:	6838      	ldr	r0, [r7, #0]
 8003578:	4401      	add	r1, r0
 800357a:	b2d3      	uxtb	r3, r2
 800357c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800357e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	000a      	movs	r2, r1
 800358c:	2300      	movs	r3, #0
 800358e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003590:	3104      	adds	r1, #4
 8003592:	6838      	ldr	r0, [r7, #0]
 8003594:	4401      	add	r1, r0
 8003596:	b2d3      	uxtb	r3, r2
 8003598:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800359a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	0a0a      	lsrs	r2, r1, #8
 80035a8:	2300      	movs	r3, #0
 80035aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ac:	3105      	adds	r1, #5
 80035ae:	6838      	ldr	r0, [r7, #0]
 80035b0:	4401      	add	r1, r0
 80035b2:	b2d3      	uxtb	r3, r2
 80035b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80035b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	0c0a      	lsrs	r2, r1, #16
 80035c4:	2300      	movs	r3, #0
 80035c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035c8:	3106      	adds	r1, #6
 80035ca:	6838      	ldr	r0, [r7, #0]
 80035cc:	4401      	add	r1, r0
 80035ce:	b2d3      	uxtb	r3, r2
 80035d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80035d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	0e0a      	lsrs	r2, r1, #24
 80035e0:	2300      	movs	r3, #0
 80035e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e4:	3107      	adds	r1, #7
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	4401      	add	r1, r0
 80035ea:	b2d3      	uxtb	r3, r2
 80035ec:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	3308      	adds	r3, #8
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80035fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80035fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003602:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003604:	6838      	ldr	r0, [r7, #0]
 8003606:	4401      	add	r1, r0
 8003608:	b2d3      	uxtb	r3, r2
 800360a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800360c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	0a02      	lsrs	r2, r0, #8
 800361a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800361e:	0a0b      	lsrs	r3, r1, #8
 8003620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003622:	3101      	adds	r1, #1
 8003624:	6838      	ldr	r0, [r7, #0]
 8003626:	4401      	add	r1, r0
 8003628:	b2d3      	uxtb	r3, r2
 800362a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800362c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	0c02      	lsrs	r2, r0, #16
 800363a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800363e:	0c0b      	lsrs	r3, r1, #16
 8003640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003642:	3102      	adds	r1, #2
 8003644:	6838      	ldr	r0, [r7, #0]
 8003646:	4401      	add	r1, r0
 8003648:	b2d3      	uxtb	r3, r2
 800364a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800364c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	0e02      	lsrs	r2, r0, #24
 800365a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800365e:	0e0b      	lsrs	r3, r1, #24
 8003660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003662:	3103      	adds	r1, #3
 8003664:	6838      	ldr	r0, [r7, #0]
 8003666:	4401      	add	r1, r0
 8003668:	b2d3      	uxtb	r3, r2
 800366a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800366c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	000a      	movs	r2, r1
 800367a:	2300      	movs	r3, #0
 800367c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800367e:	3104      	adds	r1, #4
 8003680:	6838      	ldr	r0, [r7, #0]
 8003682:	4401      	add	r1, r0
 8003684:	b2d3      	uxtb	r3, r2
 8003686:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003688:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	0a0a      	lsrs	r2, r1, #8
 8003696:	2300      	movs	r3, #0
 8003698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800369a:	3105      	adds	r1, #5
 800369c:	6838      	ldr	r0, [r7, #0]
 800369e:	4401      	add	r1, r0
 80036a0:	b2d3      	uxtb	r3, r2
 80036a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80036a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	0c0a      	lsrs	r2, r1, #16
 80036b2:	2300      	movs	r3, #0
 80036b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036b6:	3106      	adds	r1, #6
 80036b8:	6838      	ldr	r0, [r7, #0]
 80036ba:	4401      	add	r1, r0
 80036bc:	b2d3      	uxtb	r3, r2
 80036be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80036c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	0e0a      	lsrs	r2, r1, #24
 80036ce:	2300      	movs	r3, #0
 80036d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d2:	3107      	adds	r1, #7
 80036d4:	6838      	ldr	r0, [r7, #0]
 80036d6:	4401      	add	r1, r0
 80036d8:	b2d3      	uxtb	r3, r2
 80036da:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	3308      	adds	r3, #8
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80036e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80036ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f2:	6838      	ldr	r0, [r7, #0]
 80036f4:	4401      	add	r1, r0
 80036f6:	b2d3      	uxtb	r3, r2
 80036f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80036fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	0a02      	lsrs	r2, r0, #8
 8003708:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800370c:	0a0b      	lsrs	r3, r1, #8
 800370e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003710:	3101      	adds	r1, #1
 8003712:	6838      	ldr	r0, [r7, #0]
 8003714:	4401      	add	r1, r0
 8003716:	b2d3      	uxtb	r3, r2
 8003718:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800371a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	0c02      	lsrs	r2, r0, #16
 8003728:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800372c:	0c0b      	lsrs	r3, r1, #16
 800372e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003730:	3102      	adds	r1, #2
 8003732:	6838      	ldr	r0, [r7, #0]
 8003734:	4401      	add	r1, r0
 8003736:	b2d3      	uxtb	r3, r2
 8003738:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800373a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	0e02      	lsrs	r2, r0, #24
 8003748:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800374c:	0e0b      	lsrs	r3, r1, #24
 800374e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003750:	3103      	adds	r1, #3
 8003752:	6838      	ldr	r0, [r7, #0]
 8003754:	4401      	add	r1, r0
 8003756:	b2d3      	uxtb	r3, r2
 8003758:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800375a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	000a      	movs	r2, r1
 8003768:	2300      	movs	r3, #0
 800376a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800376c:	3104      	adds	r1, #4
 800376e:	6838      	ldr	r0, [r7, #0]
 8003770:	4401      	add	r1, r0
 8003772:	b2d3      	uxtb	r3, r2
 8003774:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003776:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	0a0a      	lsrs	r2, r1, #8
 8003784:	2300      	movs	r3, #0
 8003786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003788:	3105      	adds	r1, #5
 800378a:	6838      	ldr	r0, [r7, #0]
 800378c:	4401      	add	r1, r0
 800378e:	b2d3      	uxtb	r3, r2
 8003790:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	0c0a      	lsrs	r2, r1, #16
 80037a0:	2300      	movs	r3, #0
 80037a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037a4:	3106      	adds	r1, #6
 80037a6:	6838      	ldr	r0, [r7, #0]
 80037a8:	4401      	add	r1, r0
 80037aa:	b2d3      	uxtb	r3, r2
 80037ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80037ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	0e0a      	lsrs	r2, r1, #24
 80037bc:	2300      	movs	r3, #0
 80037be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037c0:	3107      	adds	r1, #7
 80037c2:	6838      	ldr	r0, [r7, #0]
 80037c4:	4401      	add	r1, r0
 80037c6:	b2d3      	uxtb	r3, r2
 80037c8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	3308      	adds	r3, #8
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80037d2:	4618      	mov	r0, r3
 80037d4:	372c      	adds	r7, #44	; 0x2c
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80037de:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80037e2:	b0eb      	sub	sp, #428	; 0x1ac
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80037ea:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003800:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003804:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003808:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800380c:	4413      	add	r3, r2
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2200      	movs	r2, #0
 8003814:	461c      	mov	r4, r3
 8003816:	4615      	mov	r5, r2
 8003818:	ea40 0804 	orr.w	r8, r0, r4
 800381c:	ea41 0905 	orr.w	r9, r1, r5
 8003820:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003824:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003828:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003832:	4413      	add	r3, r2
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2200      	movs	r2, #0
 800383a:	469a      	mov	sl, r3
 800383c:	4693      	mov	fp, r2
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800384a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800384e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003852:	ea40 0402 	orr.w	r4, r0, r2
 8003856:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800385a:	430b      	orrs	r3, r1
 800385c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003860:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003864:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003868:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800386c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003870:	1c9a      	adds	r2, r3, #2
 8003872:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003876:	4413      	add	r3, r2
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2200      	movs	r2, #0
 800387e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003882:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003892:	464c      	mov	r4, r9
 8003894:	0423      	lsls	r3, r4, #16
 8003896:	4644      	mov	r4, r8
 8003898:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800389c:	4644      	mov	r4, r8
 800389e:	0422      	lsls	r2, r4, #16
 80038a0:	ea40 0402 	orr.w	r4, r0, r2
 80038a4:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80038a8:	430b      	orrs	r3, r1
 80038aa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80038ae:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80038b2:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038b6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80038ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038be:	1cda      	adds	r2, r3, #3
 80038c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038c4:	4413      	add	r3, r2
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2200      	movs	r2, #0
 80038cc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80038d0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80038d4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80038d8:	4623      	mov	r3, r4
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80038e0:	4623      	mov	r3, r4
 80038e2:	061b      	lsls	r3, r3, #24
 80038e4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80038e8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80038ec:	4623      	mov	r3, r4
 80038ee:	4303      	orrs	r3, r0
 80038f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80038f4:	462b      	mov	r3, r5
 80038f6:	430b      	orrs	r3, r1
 80038f8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038fc:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003900:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003904:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003908:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800390c:	1d1a      	adds	r2, r3, #4
 800390e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003912:	4413      	add	r3, r2
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2200      	movs	r2, #0
 800391a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800391e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800392e:	0023      	movs	r3, r4
 8003930:	2200      	movs	r2, #0
 8003932:	ea40 0402 	orr.w	r4, r0, r2
 8003936:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800393a:	430b      	orrs	r3, r1
 800393c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003940:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003944:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003948:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800394c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003950:	1d5a      	adds	r2, r3, #5
 8003952:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003956:	4413      	add	r3, r2
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2200      	movs	r2, #0
 800395e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003962:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003972:	0223      	lsls	r3, r4, #8
 8003974:	2200      	movs	r2, #0
 8003976:	ea40 0402 	orr.w	r4, r0, r2
 800397a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800397e:	430b      	orrs	r3, r1
 8003980:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003984:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003988:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800398c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003990:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003994:	1d9a      	adds	r2, r3, #6
 8003996:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800399a:	4413      	add	r3, r2
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2200      	movs	r2, #0
 80039a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80039a6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80039b6:	0423      	lsls	r3, r4, #16
 80039b8:	2200      	movs	r2, #0
 80039ba:	ea40 0402 	orr.w	r4, r0, r2
 80039be:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80039c2:	430b      	orrs	r3, r1
 80039c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039c8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80039cc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80039d0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039d8:	1dda      	adds	r2, r3, #7
 80039da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039de:	4413      	add	r3, r2
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2200      	movs	r2, #0
 80039e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80039ea:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80039fa:	0623      	lsls	r3, r4, #24
 80039fc:	2200      	movs	r2, #0
 80039fe:	ea40 0402 	orr.w	r4, r0, r2
 8003a02:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003a06:	430b      	orrs	r3, r1
 8003a08:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003a0c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003a10:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003a14:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a18:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003a1c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003a20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a24:	3308      	adds	r3, #8
 8003a26:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a36:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a3a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003a3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a42:	4413      	add	r3, r2
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003a4e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003a52:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003a56:	4623      	mov	r3, r4
 8003a58:	4303      	orrs	r3, r0
 8003a5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a5e:	462b      	mov	r3, r5
 8003a60:	430b      	orrs	r3, r1
 8003a62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a66:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003a6a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a6e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a72:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a7c:	4413      	add	r3, r2
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a88:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003a98:	464c      	mov	r4, r9
 8003a9a:	0223      	lsls	r3, r4, #8
 8003a9c:	4644      	mov	r4, r8
 8003a9e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003aa2:	4644      	mov	r4, r8
 8003aa4:	0222      	lsls	r2, r4, #8
 8003aa6:	ea40 0402 	orr.w	r4, r0, r2
 8003aaa:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ab4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003ab8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003abc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ac0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ac4:	1c9a      	adds	r2, r3, #2
 8003ac6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aca:	4413      	add	r3, r2
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ad6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003ae6:	464c      	mov	r4, r9
 8003ae8:	0423      	lsls	r3, r4, #16
 8003aea:	4644      	mov	r4, r8
 8003aec:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003af0:	4644      	mov	r4, r8
 8003af2:	0422      	lsls	r2, r4, #16
 8003af4:	ea40 0402 	orr.w	r4, r0, r2
 8003af8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003afc:	430b      	orrs	r3, r1
 8003afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b02:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003b06:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b0a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b12:	1cda      	adds	r2, r3, #3
 8003b14:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b18:	4413      	add	r3, r2
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b24:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b28:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003b2c:	4623      	mov	r3, r4
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b34:	4623      	mov	r3, r4
 8003b36:	061b      	lsls	r3, r3, #24
 8003b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b3c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003b40:	4623      	mov	r3, r4
 8003b42:	4303      	orrs	r3, r0
 8003b44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b48:	462b      	mov	r3, r5
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b50:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003b54:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b58:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b60:	1d1a      	adds	r2, r3, #4
 8003b62:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b66:	4413      	add	r3, r2
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b72:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003b82:	0023      	movs	r3, r4
 8003b84:	2200      	movs	r2, #0
 8003b86:	ea40 0402 	orr.w	r4, r0, r2
 8003b8a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b94:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003b98:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b9c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ba0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ba4:	1d5a      	adds	r2, r3, #5
 8003ba6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003baa:	4413      	add	r3, r2
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bb6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003bc6:	0223      	lsls	r3, r4, #8
 8003bc8:	2200      	movs	r2, #0
 8003bca:	ea40 0402 	orr.w	r4, r0, r2
 8003bce:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bd8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003bdc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003be0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003be4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003be8:	1d9a      	adds	r2, r3, #6
 8003bea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bee:	4413      	add	r3, r2
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003c0a:	0423      	lsls	r3, r4, #16
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	ea40 0402 	orr.w	r4, r0, r2
 8003c12:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003c16:	430b      	orrs	r3, r1
 8003c18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c1c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003c20:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c24:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c2c:	1dda      	adds	r2, r3, #7
 8003c2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c32:	4413      	add	r3, r2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003c4e:	0623      	lsls	r3, r4, #24
 8003c50:	2200      	movs	r2, #0
 8003c52:	ea40 0402 	orr.w	r4, r0, r2
 8003c56:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c60:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003c64:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003c68:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c6c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003c70:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003c74:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c78:	3308      	adds	r3, #8
 8003c7a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c8a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c8e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003c92:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c96:	4413      	add	r3, r2
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ca2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ca6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003caa:	4623      	mov	r3, r4
 8003cac:	4303      	orrs	r3, r0
 8003cae:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003cb6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003cba:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003cbe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003cc2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ccc:	4413      	add	r3, r2
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	673b      	str	r3, [r7, #112]	; 0x70
 8003cd6:	677a      	str	r2, [r7, #116]	; 0x74
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ce4:	464c      	mov	r4, r9
 8003ce6:	0223      	lsls	r3, r4, #8
 8003ce8:	4644      	mov	r4, r8
 8003cea:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cee:	4644      	mov	r4, r8
 8003cf0:	0222      	lsls	r2, r4, #8
 8003cf2:	ea40 0402 	orr.w	r4, r0, r2
 8003cf6:	66bc      	str	r4, [r7, #104]	; 0x68
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cfc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003d00:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d04:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d0c:	1c9a      	adds	r2, r3, #2
 8003d0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d12:	4413      	add	r3, r2
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2200      	movs	r2, #0
 8003d1a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d1c:	667a      	str	r2, [r7, #100]	; 0x64
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d2a:	464c      	mov	r4, r9
 8003d2c:	0423      	lsls	r3, r4, #16
 8003d2e:	4644      	mov	r4, r8
 8003d30:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003d34:	4644      	mov	r4, r8
 8003d36:	0422      	lsls	r2, r4, #16
 8003d38:	ea40 0402 	orr.w	r4, r0, r2
 8003d3c:	65bc      	str	r4, [r7, #88]	; 0x58
 8003d3e:	430b      	orrs	r3, r1
 8003d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d42:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003d46:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d4a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d4e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d52:	1cda      	adds	r2, r3, #3
 8003d54:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d58:	4413      	add	r3, r2
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2200      	movs	r2, #0
 8003d60:	653b      	str	r3, [r7, #80]	; 0x50
 8003d62:	657a      	str	r2, [r7, #84]	; 0x54
 8003d64:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003d68:	4623      	mov	r3, r4
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d6e:	4623      	mov	r3, r4
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d74:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003d78:	4623      	mov	r3, r4
 8003d7a:	4303      	orrs	r3, r0
 8003d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d7e:	462b      	mov	r3, r5
 8003d80:	430b      	orrs	r3, r1
 8003d82:	647b      	str	r3, [r7, #68]	; 0x44
 8003d84:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003d88:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003d8c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d94:	1d1a      	adds	r2, r3, #4
 8003d96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d9a:	4413      	add	r3, r2
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2200      	movs	r2, #0
 8003da2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003da4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003db0:	0023      	movs	r3, r4
 8003db2:	2200      	movs	r2, #0
 8003db4:	ea40 0402 	orr.w	r4, r0, r2
 8003db8:	633c      	str	r4, [r7, #48]	; 0x30
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dbe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003dc2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003dc6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003dca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003dce:	1d5a      	adds	r2, r3, #5
 8003dd0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dd4:	4413      	add	r3, r2
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2200      	movs	r2, #0
 8003ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003dea:	0223      	lsls	r3, r4, #8
 8003dec:	2200      	movs	r2, #0
 8003dee:	ea40 0402 	orr.w	r4, r0, r2
 8003df2:	623c      	str	r4, [r7, #32]
 8003df4:	430b      	orrs	r3, r1
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
 8003df8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003dfc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003e00:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e04:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e08:	3306      	adds	r3, #6
 8003e0a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003e0e:	4413      	add	r3, r2
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2200      	movs	r2, #0
 8003e16:	61bb      	str	r3, [r7, #24]
 8003e18:	61fa      	str	r2, [r7, #28]
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	69bc      	ldr	r4, [r7, #24]
 8003e24:	0423      	lsls	r3, r4, #16
 8003e26:	2200      	movs	r2, #0
 8003e28:	ea40 0402 	orr.w	r4, r0, r2
 8003e2c:	613c      	str	r4, [r7, #16]
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003e36:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003e3a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e3e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e42:	3307      	adds	r3, #7
 8003e44:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003e48:	4413      	add	r3, r2
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2200      	movs	r2, #0
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	60fa      	str	r2, [r7, #12]
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	68bc      	ldr	r4, [r7, #8]
 8003e5e:	0623      	lsls	r3, r4, #24
 8003e60:	2200      	movs	r2, #0
 8003e62:	ea40 0402 	orr.w	r4, r0, r2
 8003e66:	603c      	str	r4, [r7, #0]
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	607b      	str	r3, [r7, #4]
 8003e6c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e70:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003e74:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003e78:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003e7c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003e80:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e84:	3308      	adds	r3, #8
 8003e86:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003e8a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003e94:	46bd      	mov	sp, r7
 8003e96:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003e9a:	4770      	bx	lr

08003e9c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	0800f320 	.word	0x0800f320

08003eb8 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	0800f338 	.word	0x0800f338

08003ed4 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe f8e2 	bl	80020a8 <_ZN3ros3MsgC1Ev>
 8003ee4:	4a08      	ldr	r2, [pc, #32]	; (8003f08 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3308      	adds	r3, #8
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fada 	bl	80034a8 <_ZN13geometry_msgs7Vector3C1Ev>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3328      	adds	r3, #40	; 0x28
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fad5 	bl	80034a8 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	0800f45c 	.word	0x0800f45c

08003f0c <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f103 0008 	add.w	r0, r3, #8
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	4413      	add	r3, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	f7ff fae6 	bl	80034f8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4413      	add	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	4413      	add	r3, r2
 8003f40:	4619      	mov	r1, r3
 8003f42:	f7ff fad9 	bl	80034f8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003f46:	4602      	mov	r2, r0
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]
      return offset;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
    }
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f103 0008 	add.w	r0, r3, #8
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	4413      	add	r3, r2
 8003f72:	4619      	mov	r1, r3
 8003f74:	f7ff fc33 	bl	80037de <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f7ff fc26 	bl	80037de <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
     return offset;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
    }
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	0800f35c 	.word	0x0800f35c

08003fc0 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	0800f370 	.word	0x0800f370

08003fdc <_Z10sub_vel_cbRKN13geometry_msgs5TwistE>:
#include "geometry_msgs/Point.h"
#include "STM32Hardware.h"

geometry_msgs::Twist pub_out_msg;
void sub_vel_cb(const geometry_msgs::Twist &msg)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
   get_vel_x = msg.linear.x;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003fea:	490a      	ldr	r1, [pc, #40]	; (8004014 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8003fec:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_y = msg.linear.y;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003ff6:	4908      	ldr	r1, [pc, #32]	; (8004018 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8003ff8:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_z = msg.angular.z;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004002:	4906      	ldr	r1, [pc, #24]	; (800401c <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x40>)
 8004004:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	24000688 	.word	0x24000688
 8004018:	24000690 	.word	0x24000690
 800401c:	24000698 	.word	0x24000698

08004020 <_Z8callbackRKN8std_msgs5Int64E>:

void callback(const std_msgs::Int64 &msg)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
   count = msg.data;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800402e:	4b04      	ldr	r3, [pc, #16]	; (8004040 <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 8004030:	601a      	str	r2, [r3, #0]
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	24000668 	.word	0x24000668

08004044 <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
ros::Subscriber<std_msgs::Int64> sub("counting", callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 800404c:	4805      	ldr	r0, [pc, #20]	; (8004064 <HAL_UART_TxCpltCallback+0x20>)
 800404e:	f000 f9ad 	bl	80043ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004052:	4603      	mov	r3, r0
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe ffad 	bl	8002fb4 <_ZN13STM32Hardware5flushEv>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	24000708 	.word	0x24000708

08004068 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8004070:	4805      	ldr	r0, [pc, #20]	; (8004088 <HAL_UART_RxCpltCallback+0x20>)
 8004072:	f000 f99b 	bl	80043ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004076:	4603      	mov	r3, r0
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe ff5c 	bl	8002f36 <_ZN13STM32Hardware10reset_rbufEv>
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	24000708 	.word	0x24000708

0800408c <setup>:

void setup(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
    nh.initNode();
 8004090:	4808      	ldr	r0, [pc, #32]	; (80040b4 <setup+0x28>)
 8004092:	f000 f997 	bl	80043c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//    sub_vel = nh.subscribe("/cmd_vel", 1, sub_vel_cb);
//    pub_vel = nh.advertise<geometry_msgs::Twist>("/base_speed", 1);
    nh.subscribe(sub_vel);
 8004096:	4908      	ldr	r1, [pc, #32]	; (80040b8 <setup+0x2c>)
 8004098:	4806      	ldr	r0, [pc, #24]	; (80040b4 <setup+0x28>)
 800409a:	f000 f9bc 	bl	8004416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(sub);
 800409e:	4907      	ldr	r1, [pc, #28]	; (80040bc <setup+0x30>)
 80040a0:	4804      	ldr	r0, [pc, #16]	; (80040b4 <setup+0x28>)
 80040a2:	f000 f9e3 	bl	800446c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
    nh.advertise(pub_vel);
 80040a6:	4906      	ldr	r1, [pc, #24]	; (80040c0 <setup+0x34>)
 80040a8:	4802      	ldr	r0, [pc, #8]	; (80040b4 <setup+0x28>)
 80040aa:	f000 fa0a 	bl	80044c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	24000708 	.word	0x24000708
 80040b8:	24001c48 	.word	0x24001c48
 80040bc:	24001cc0 	.word	0x24001cc0
 80040c0:	24001ca8 	.word	0x24001ca8

080040c4 <loop>:
void loop(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
    nh.spinOnce();
 80040c8:	4802      	ldr	r0, [pc, #8]	; (80040d4 <loop+0x10>)
 80040ca:	f000 fa2a 	bl	8004522 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	24000708 	.word	0x24000708

080040d8 <publish_vel>:

void publish_vel(double x, double y, double z)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	ed87 0b04 	vstr	d0, [r7, #16]
 80040e2:	ed87 1b02 	vstr	d1, [r7, #8]
 80040e6:	ed87 2b00 	vstr	d2, [r7]

	pub_out_msg.linear.x = x;
 80040ea:	490b      	ldr	r1, [pc, #44]	; (8004118 <publish_vel+0x40>)
 80040ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pub_out_msg.linear.y = y;
 80040f4:	4908      	ldr	r1, [pc, #32]	; (8004118 <publish_vel+0x40>)
 80040f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pub_out_msg.angular.z = z;
 80040fe:	4906      	ldr	r1, [pc, #24]	; (8004118 <publish_vel+0x40>)
 8004100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004104:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pub_vel.publish(&pub_out_msg);
 8004108:	4903      	ldr	r1, [pc, #12]	; (8004118 <publish_vel+0x40>)
 800410a:	4804      	ldr	r0, [pc, #16]	; (800411c <publish_vel+0x44>)
 800410c:	f7fe fe19 	bl	8002d42 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8004110:	bf00      	nop
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	240006c0 	.word	0x240006c0
 800411c:	24001ca8 	.word	0x24001ca8

08004120 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b03      	cmp	r3, #3
 8004132:	d80d      	bhi.n	8004150 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	fa22 f103 	lsr.w	r1, r2, r3
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	b2ca      	uxtb	r2, r1
 8004146:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3301      	adds	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	e7ee      	b.n	800412e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d811      	bhi.n	800419a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6839      	ldr	r1, [r7, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	440a      	add	r2, r1
 8004180:	7812      	ldrb	r2, [r2, #0]
 8004182:	4611      	mov	r1, r2
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	00d2      	lsls	r2, r2, #3
 8004188:	fa01 f202 	lsl.w	r2, r1, r2
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3301      	adds	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	e7ea      	b.n	8004170 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800419a:	bf00      	nop
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	0800f4bc 	.word	0x0800f4bc

080041c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff ffe8 	bl	80041a8 <_ZN3ros15NodeHandleBase_C1Ev>
 80041d8:	4a47      	ldr	r2, [pc, #284]	; (80042f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3304      	adds	r3, #4
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe fe7c 	bl	8002ee0 <_ZN13STM32HardwareC1Ev>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	f241 5314 	movw	r3, #5396	; 0x1514
 80041fa:	4413      	add	r3, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fe fac7 	bl	8002790 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b18      	cmp	r3, #24
 800420a:	d80b      	bhi.n	8004224 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	2200      	movs	r2, #0
 800421a:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	3301      	adds	r3, #1
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	e7f0      	b.n	8004206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b18      	cmp	r3, #24
 800422c:	d80a      	bhi.n	8004244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004236:	2100      	movs	r1, #0
 8004238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	3301      	adds	r3, #1
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	e7f1      	b.n	8004228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424e:	d20b      	bcs.n	8004268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	441a      	add	r2, r3
 8004256:	f241 0324 	movw	r3, #4132	; 0x1024
 800425a:	4413      	add	r3, r2
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3301      	adds	r3, #1
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	e7ef      	b.n	8004248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004268:	2300      	movs	r3, #0
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004272:	d20b      	bcs.n	800428c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	441a      	add	r2, r3
 800427a:	f241 2324 	movw	r3, #4644	; 0x1224
 800427e:	4413      	add	r3, r2
 8004280:	2200      	movs	r2, #0
 8004282:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	3301      	adds	r3, #1
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	e7ef      	b.n	800426c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004292:	461a      	mov	r2, r3
 8004294:	2300      	movs	r3, #0
 8004296:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a0:	461a      	mov	r2, r3
 80042a2:	2300      	movs	r3, #0
 80042a4:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ae:	461a      	mov	r2, r3
 80042b0:	2300      	movs	r3, #0
 80042b2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042bc:	461a      	mov	r2, r3
 80042be:	2300      	movs	r3, #0
 80042c0:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ca:	461a      	mov	r2, r3
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d8:	461a      	mov	r2, r3
 80042da:	2300      	movs	r3, #0
 80042dc:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e6:	461a      	mov	r2, r3
 80042e8:	2300      	movs	r3, #0
 80042ea:	6213      	str	r3, [r2, #32]
  }
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	0800f448 	.word	0x0800f448

080042fc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	4a04      	ldr	r2, [pc, #16]	; (8004318 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4618      	mov	r0, r3
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	0800f4a4 	.word	0x0800f4a4

0800431c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ffe5 	bl	80042fc <_ZN3ros11Subscriber_C1Ev>
 8004332:	4a0b      	ldr	r2, [pc, #44]	; (8004360 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3310      	adds	r3, #16
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fdc9 	bl	8003ed4 <_ZN13geometry_msgs5TwistC1Ev>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	659a      	str	r2, [r3, #88]	; 0x58
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	609a      	str	r2, [r3, #8]
  };
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	0800f430 	.word	0x0800f430

08004364 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ffc1 	bl	80042fc <_ZN3ros11Subscriber_C1Ev>
 800437a:	4a0b      	ldr	r2, [pc, #44]	; (80043a8 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3310      	adds	r3, #16
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe fed1 	bl	800312c <_ZN8std_msgs5Int64C1Ev>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	621a      	str	r2, [r3, #32]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	609a      	str	r2, [r3, #8]
  };
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	0800f418 	.word	0x0800f418

080043ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
  }
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe fda5 	bl	8002f20 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043dc:	461a      	mov	r2, r3
 80043de:	2300      	movs	r3, #0
 80043e0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ea:	461a      	mov	r2, r3
 80043ec:	2300      	movs	r3, #0
 80043ee:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f8:	461a      	mov	r2, r3
 80043fa:	2300      	movs	r3, #0
 80043fc:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004406:	461a      	mov	r2, r3
 8004408:	2300      	movs	r3, #0
 800440a:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8004416:	b480      	push	{r7}
 8004418:	b085      	sub	sp, #20
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b18      	cmp	r3, #24
 8004428:	dc19      	bgt.n	800445e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10d      	bne.n	8004456 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800443a:	6839      	ldr	r1, [r7, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	605a      	str	r2, [r3, #4]
        return true;
 8004452:	2301      	movs	r3, #1
 8004454:	e004      	b.n	8004460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3301      	adds	r3, #1
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	e7e2      	b.n	8004424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 800445e:	2300      	movs	r3, #0
  }
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b18      	cmp	r3, #24
 800447e:	dc19      	bgt.n	80044b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10d      	bne.n	80044ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800449a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	605a      	str	r2, [r3, #4]
        return true;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e004      	b.n	80044b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3301      	adds	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	e7e2      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
    return false;
 80044b4:	2300      	movs	r3, #0
  }
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b18      	cmp	r3, #24
 80044d4:	dc1e      	bgt.n	8004514 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d111      	bne.n	800450c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	60da      	str	r2, [r3, #12]
        return true;
 8004508:	2301      	movs	r3, #1
 800450a:	e004      	b.n	8004516 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3301      	adds	r3, #1
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	e7dd      	b.n	80044d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8004514:	2300      	movs	r3, #0
  }
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3304      	adds	r3, #4
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe fdf0 	bl	8003114 <_ZN13STM32Hardware4timeEv>
 8004534:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800453c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004548:	4293      	cmp	r3, r2
 800454a:	d905      	bls.n	8004558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00e      	beq.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456c:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	429a      	cmp	r2, r3
 8004574:	d906      	bls.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800457c:	461a      	mov	r2, r3
 800457e:	2300      	movs	r3, #0
 8004580:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d015      	beq.n	80045bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3304      	adds	r3, #4
 8004594:	4618      	mov	r0, r3
 8004596:	f7fe fdbd 	bl	8003114 <_ZN13STM32Hardware4timeEv>
 800459a:	4602      	mov	r2, r0
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	1ad2      	subs	r2, r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	bf8c      	ite	hi
 80045ac:	2301      	movhi	r3, #1
 80045ae:	2300      	movls	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80045b6:	f06f 0301 	mvn.w	r3, #1
 80045ba:	e226      	b.n	8004a0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3304      	adds	r3, #4
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe fcc9 	bl	8002f58 <_ZN13STM32Hardware4readEv>
 80045c6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f2c0 81ff 	blt.w	80049ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d6:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4413      	add	r3, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045e4:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ee:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045f2:	2b07      	cmp	r3, #7
 80045f4:	d12d      	bne.n	8004652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fc:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8004608:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	b2d1      	uxtb	r1, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	441a      	add	r2, r3
 8004614:	f241 0324 	movw	r3, #4132	; 0x1024
 8004618:	4413      	add	r3, r2
 800461a:	460a      	mov	r2, r1
 800461c:	701a      	strb	r2, [r3, #0]
        bytes_--;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004624:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004628:	3b01      	subs	r3, #1
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004630:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1a0      	bne.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004648:	461a      	mov	r2, r3
 800464a:	2308      	movs	r3, #8
 800464c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004650:	e798      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004658:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800465c:	2b00      	cmp	r3, #0
 800465e:	d130      	bne.n	80046c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2bff      	cmp	r3, #255	; 0xff
 8004664:	d112      	bne.n	800468c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004670:	3301      	adds	r3, #1
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004678:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3314      	adds	r3, #20
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004686:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 800468a:	e77b      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe fd3f 	bl	8003114 <_ZN13STM32Hardware4timeEv>
 8004696:	4602      	mov	r2, r0
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a0:	4293      	cmp	r3, r2
 80046a2:	bf8c      	ite	hi
 80046a4:	2301      	movhi	r3, #1
 80046a6:	2300      	movls	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f43f af6a 	beq.w	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 80046bc:	f06f 0301 	mvn.w	r3, #1
 80046c0:	e1a3      	b.n	8004a0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d121      	bne.n	8004714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2bfe      	cmp	r3, #254	; 0xfe
 80046d4:	d10b      	bne.n	80046ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046dc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046e0:	3301      	adds	r3, #1
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046e8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80046ec:	e74a      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f4:	461a      	mov	r2, r3
 80046f6:	2300      	movs	r3, #0
 80046f8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004702:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004706:	2b00      	cmp	r3, #0
 8004708:	f47f af3c 	bne.w	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f980 	bl	8004a12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004712:	e737      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800471e:	2b02      	cmp	r3, #2
 8004720:	d120      	bne.n	8004764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004728:	461a      	mov	r2, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004736:	461a      	mov	r2, r3
 8004738:	2300      	movs	r3, #0
 800473a:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004744:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004748:	3301      	adds	r3, #1
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004750:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475a:	461a      	mov	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004762:	e70f      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800476e:	2b03      	cmp	r3, #3
 8004770:	d118      	bne.n	80047a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004778:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	4413      	add	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004788:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004792:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004796:	3301      	adds	r3, #1
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800479e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047a2:	e6ef      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047aa:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d11f      	bne.n	80047f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80047bc:	425a      	negs	r2, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	bf58      	it	pl
 80047c4:	4253      	negpl	r3, r2
 80047c6:	2bff      	cmp	r3, #255	; 0xff
 80047c8:	d10b      	bne.n	80047e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047d4:	3301      	adds	r3, #1
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047dc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047e0:	e6d0      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e8:	461a      	mov	r2, r3
 80047ea:	2300      	movs	r3, #0
 80047ec:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047f0:	e6c8      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047fc:	2b05      	cmp	r3, #5
 80047fe:	d119      	bne.n	8004834 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004806:	461a      	mov	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004814:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004818:	3301      	adds	r3, #1
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004820:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800482a:	461a      	mov	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004832:	e6a7      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800483e:	2b06      	cmp	r3, #6
 8004840:	d123      	bne.n	800488a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004848:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	4413      	add	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004858:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004862:	461a      	mov	r2, r3
 8004864:	2307      	movs	r3, #7
 8004866:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004870:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004874:	2b00      	cmp	r3, #0
 8004876:	f47f ae85 	bne.w	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004880:	461a      	mov	r2, r3
 8004882:	2308      	movs	r3, #8
 8004884:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004888:	e67c      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004890:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004894:	2b08      	cmp	r3, #8
 8004896:	f47f ae75 	bne.w	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a0:	461a      	mov	r2, r3
 80048a2:	2300      	movs	r3, #0
 80048a4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ae:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80048b2:	425a      	negs	r2, r3
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	bf58      	it	pl
 80048ba:	4253      	negpl	r3, r2
 80048bc:	2bff      	cmp	r3, #255	; 0xff
 80048be:	f47f ae61 	bne.w	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d116      	bne.n	80048fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f89e 	bl	8004a12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8ba 	bl	8004a50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e2:	461a      	mov	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f0:	461a      	mov	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 80048f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048fc:	e085      	b.n	8004a0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004904:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004908:	2b0a      	cmp	r3, #10
 800490a:	d108      	bne.n	800491e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	f241 0324 	movw	r3, #4132	; 0x1024
 8004912:	4413      	add	r3, r2
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f97c 	bl	8004c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800491c:	e632      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004924:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004928:	2b06      	cmp	r3, #6
 800492a:	d112      	bne.n	8004952 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	f241 5314 	movw	r3, #5396	; 0x1514
 8004932:	4413      	add	r3, r2
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	f241 0224 	movw	r2, #4132	; 0x1024
 800493a:	440a      	add	r2, r1
 800493c:	4611      	mov	r1, r2
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe f85b 	bl	80029fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004950:	e618      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004958:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800495c:	2b0b      	cmp	r3, #11
 800495e:	d106      	bne.n	800496e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 800496c:	e60a      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004974:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004978:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f43f adfc 	beq.w	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004992:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004996:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80049a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049aa:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80049ae:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80049b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	f241 0324 	movw	r3, #4132	; 0x1024
 80049c6:	440b      	add	r3, r1
 80049c8:	4619      	mov	r1, r3
 80049ca:	4790      	blx	r2
    while (true)
 80049cc:	e5da      	b.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 80049ce:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d6:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d014      	beq.n	8004a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d909      	bls.n	8004a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f80c 	bl	8004a12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a00:	461a      	mov	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8004a08:	2300      	movs	r3, #0
  }
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b086      	sub	sp, #24
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004a1a:	f107 030c 	add.w	r3, r7, #12
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fd fb52 	bl	80020c8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f107 020c 	add.w	r2, r7, #12
 8004a2e:	210a      	movs	r1, #10
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	4798      	blx	r3
    rt_time = hardware_.time();
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe fb6b 	bl	8003114 <_ZN13STM32Hardware4timeEv>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a46:	615a      	str	r2, [r3, #20]
  }
 8004a48:	bf00      	nop
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b08b      	sub	sp, #44	; 0x2c
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004a58:	f107 030c 	add.w	r3, r7, #12
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fd fc23 	bl	80022a8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a62:	2300      	movs	r3, #0
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	2b18      	cmp	r3, #24
 8004a6a:	dc63      	bgt.n	8004b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d056      	beq.n	8004b2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	6859      	ldr	r1, [r3, #4]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4608      	mov	r0, r1
 8004acc:	4798      	blx	r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	6859      	ldr	r1, [r3, #4]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4608      	mov	r0, r1
 8004afa:	4798      	blx	r3
 8004afc:	4603      	mov	r3, r0
 8004afe:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b04:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681c      	ldr	r4, [r3, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe f925 	bl	8002d6a <_ZN3ros9Publisher15getEndpointTypeEv>
 8004b20:	4601      	mov	r1, r0
 8004b22:	f107 030c 	add.w	r3, r7, #12
 8004b26:	461a      	mov	r2, r3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	3301      	adds	r3, #1
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
 8004b32:	e798      	b.n	8004a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b34:	2300      	movs	r3, #0
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	2b18      	cmp	r3, #24
 8004b3c:	dc5f      	bgt.n	8004bfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b42:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d053      	beq.n	8004bf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b52:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b64:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b74:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b80:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4608      	mov	r0, r1
 8004b90:	4798      	blx	r3
 8004b92:	4603      	mov	r3, r0
 8004b94:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	4798      	blx	r3
 8004bb8:	4603      	mov	r3, r0
 8004bba:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bc0:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681c      	ldr	r4, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bcc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3304      	adds	r3, #4
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4608      	mov	r0, r1
 8004be8:	4798      	blx	r3
 8004bea:	4601      	mov	r1, r0
 8004bec:	f107 030c 	add.w	r3, r7, #12
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfc:	e79c      	b.n	8004b38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004c0a:	bf00      	nop
 8004c0c:	372c      	adds	r7, #44	; 0x2c
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd90      	pop	{r4, r7, pc}
	...

08004c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004c1e:	f107 0308 	add.w	r3, r7, #8
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fd fa50 	bl	80020c8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fe fa71 	bl	8003114 <_ZN13STM32Hardware4timeEv>
 8004c32:	4602      	mov	r2, r0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004c40:	f107 0308 	add.w	r3, r7, #8
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fd faae 	bl	80021a8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	4915      	ldr	r1, [pc, #84]	; (8004ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c52:	fba1 1303 	umull	r1, r3, r1, r3
 8004c56:	099b      	lsrs	r3, r3, #6
 8004c58:	4413      	add	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004c5c:	6939      	ldr	r1, [r7, #16]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c62:	fba3 0302 	umull	r0, r3, r3, r2
 8004c66:	099b      	lsrs	r3, r3, #6
 8004c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c6c:	fb00 f303 	mul.w	r3, r0, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	4a0e      	ldr	r2, [pc, #56]	; (8004cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004c74:	fb02 f303 	mul.w	r3, r2, r3
 8004c78:	440b      	add	r3, r1
 8004c7a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004c7c:	f107 0308 	add.w	r3, r7, #8
 8004c80:	3304      	adds	r3, #4
 8004c82:	4619      	mov	r1, r3
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f8bf 	bl	8004e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe fa40 	bl	8003114 <_ZN13STM32Hardware4timeEv>
 8004c94:	4602      	mov	r2, r0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004ca0:	bf00      	nop
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	10624dd3 	.word	0x10624dd3
 8004cac:	000f4240 	.word	0x000f4240

08004cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b63      	cmp	r3, #99	; 0x63
 8004cc0:	dd0b      	ble.n	8004cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc8:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004ccc:	f083 0301 	eor.w	r3, r3, #1
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e090      	b.n	8004dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68f9      	ldr	r1, [r7, #12]
 8004ce2:	f241 2324 	movw	r3, #4644	; 0x1224
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3307      	adds	r3, #7
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	4790      	blx	r2
 8004cf0:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf8:	22ff      	movs	r2, #255	; 0xff
 8004cfa:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d04:	22fe      	movs	r2, #254	; 0xfe
 8004d06:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d14:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	0a1b      	lsrs	r3, r3, #8
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d28:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d32:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d3c:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004d40:	4413      	add	r3, r2
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	43db      	mvns	r3, r3
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	b21b      	sxth	r3, r3
 8004d64:	121b      	asrs	r3, r3, #8
 8004d66:	b21b      	sxth	r3, r3
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d70:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d78:	2305      	movs	r3, #5
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	3306      	adds	r3, #6
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	dc0e      	bgt.n	8004da4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	441a      	add	r2, r3
 8004d8c:	f241 2324 	movw	r3, #4644	; 0x1224
 8004d90:	4413      	add	r3, r2
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	e7eb      	b.n	8004d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	3307      	adds	r3, #7
 8004da8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	425a      	negs	r2, r3
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	bf58      	it	pl
 8004db4:	4253      	negpl	r3, r2
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	1c59      	adds	r1, r3, #1
 8004dbc:	6179      	str	r1, [r7, #20]
 8004dbe:	43d2      	mvns	r2, r2
 8004dc0:	b2d1      	uxtb	r1, r2
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	f241 2324 	movw	r3, #4644	; 0x1224
 8004dca:	4413      	add	r3, r2
 8004dcc:	460a      	mov	r2, r1
 8004dce:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd6:	dc0b      	bgt.n	8004df0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	1d18      	adds	r0, r3, #4
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	f241 2324 	movw	r3, #4644	; 0x1224
 8004de2:	4413      	add	r3, r2
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4619      	mov	r1, r3
 8004de8:	f7fe f94a 	bl	8003080 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	e005      	b.n	8004dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004df0:	4904      	ldr	r1, [pc, #16]	; (8004e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f84c 	bl	8004e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3720      	adds	r7, #32
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	0800f394 	.word	0x0800f394

08004e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe f97c 	bl	8003114 <_ZN13STM32Hardware4timeEv>
 8004e1c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4917      	ldr	r1, [pc, #92]	; (8004e84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004e26:	fba1 1303 	umull	r1, r3, r1, r3
 8004e2a:	099b      	lsrs	r3, r3, #6
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e36:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6859      	ldr	r1, [r3, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004e40:	fba3 0302 	umull	r0, r3, r3, r2
 8004e44:	099b      	lsrs	r3, r3, #6
 8004e46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e4a:	fb00 f303 	mul.w	r3, r0, r3
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	4a0d      	ldr	r2, [pc, #52]	; (8004e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004e52:	fb02 f303 	mul.w	r3, r2, r3
 8004e56:	1aca      	subs	r2, r1, r3
 8004e58:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004e5a:	4413      	add	r3, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e62:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e6a:	4413      	add	r3, r2
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	f241 021c 	movw	r2, #4124	; 0x101c
 8004e72:	440a      	add	r2, r1
 8004e74:	4611      	mov	r1, r2
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fb fbd4 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	10624dd3 	.word	0x10624dd3
 8004e88:	000f4240 	.word	0x000f4240
 8004e8c:	3b9aca00 	.word	0x3b9aca00

08004e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	2103      	movs	r1, #3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f804 	bl	8004eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004ea4:	bf00      	nop
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004eba:	f107 0314 	add.w	r3, r7, #20
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fd fbb6 	bl	8002630 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004ec4:	7afb      	ldrb	r3, [r7, #11]
 8004ec6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f107 0214 	add.w	r2, r7, #20
 8004ed6:	2107      	movs	r1, #7
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	4798      	blx	r3
  }
 8004edc:	bf00      	nop
 8004ede:	3720      	adds	r7, #32
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <_Z41__static_initialization_and_destruction_0ii>:
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d11c      	bne.n	8004f2e <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d117      	bne.n	8004f2e <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist pub_out_msg;
 8004efe:	480e      	ldr	r0, [pc, #56]	; (8004f38 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004f00:	f7fe ffe8 	bl	8003ed4 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004f04:	480d      	ldr	r0, [pc, #52]	; (8004f3c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004f06:	f7ff f95f 	bl	80041c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	4a0c      	ldr	r2, [pc, #48]	; (8004f40 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004f0e:	490d      	ldr	r1, [pc, #52]	; (8004f44 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004f10:	480d      	ldr	r0, [pc, #52]	; (8004f48 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004f12:	f7ff fa03 	bl	800431c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
 8004f16:	2300      	movs	r3, #0
 8004f18:	4a07      	ldr	r2, [pc, #28]	; (8004f38 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004f1a:	490c      	ldr	r1, [pc, #48]	; (8004f4c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004f1c:	480c      	ldr	r0, [pc, #48]	; (8004f50 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004f1e:	f7fd fef9 	bl	8002d14 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8004f22:	2301      	movs	r3, #1
 8004f24:	4a0b      	ldr	r2, [pc, #44]	; (8004f54 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004f26:	490c      	ldr	r1, [pc, #48]	; (8004f58 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004f28:	480c      	ldr	r0, [pc, #48]	; (8004f5c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004f2a:	f7ff fa1b 	bl	8004364 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
}
 8004f2e:	bf00      	nop
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	240006c0 	.word	0x240006c0
 8004f3c:	24000708 	.word	0x24000708
 8004f40:	08003fdd 	.word	0x08003fdd
 8004f44:	0800f3d0 	.word	0x0800f3d0
 8004f48:	24001c48 	.word	0x24001c48
 8004f4c:	0800f3dc 	.word	0x0800f3dc
 8004f50:	24001ca8 	.word	0x24001ca8
 8004f54:	08004021 	.word	0x08004021
 8004f58:	0800f3e8 	.word	0x0800f3e8
 8004f5c:	24001cc0 	.word	0x24001cc0

08004f60 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3310      	adds	r3, #16
 8004f6e:	6839      	ldr	r1, [r7, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fe f97a 	bl	800326a <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	3210      	adds	r2, #16
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4798      	blx	r3
  }
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8004f96:	4618      	mov	r0, r3
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3310      	adds	r3, #16
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fa5e 	bl	8003470 <_ZN8std_msgs5Int647getTypeEv>
 8004fb4:	4603      	mov	r3, r0
  }
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3310      	adds	r3, #16
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe fa5e 	bl	800348c <_ZN8std_msgs5Int646getMD5Ev>
 8004fd0:	4603      	mov	r3, r0
  }
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3310      	adds	r3, #16
 8004fe8:	6839      	ldr	r1, [r7, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fe ffb4 	bl	8003f58 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	3210      	adds	r2, #16
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4798      	blx	r3
  }
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
    return endpoint_;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8005010:	4618      	mov	r0, r3
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3310      	adds	r3, #16
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe ffbb 	bl	8003fa4 <_ZN13geometry_msgs5Twist7getTypeEv>
 800502e:	4603      	mov	r3, r0
  }
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3310      	adds	r3, #16
 8005044:	4618      	mov	r0, r3
 8005046:	f7fe ffbb 	bl	8003fc0 <_ZN13geometry_msgs5Twist6getMD5Ev>
 800504a:	4603      	mov	r3, r0
  }
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
    return configured_;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005062:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <_GLOBAL__sub_I_pub_out_msg>:
 8005072:	b580      	push	{r7, lr}
 8005074:	af00      	add	r7, sp, #0
 8005076:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800507a:	2001      	movs	r0, #1
 800507c:	f7ff ff32 	bl	8004ee4 <_Z41__static_initialization_and_destruction_0ii>
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800508a:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <HAL_MspInit+0x3c>)
 800508c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005090:	4a0b      	ldr	r2, [pc, #44]	; (80050c0 <HAL_MspInit+0x3c>)
 8005092:	f043 0302 	orr.w	r3, r3, #2
 8005096:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800509a:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <HAL_MspInit+0x3c>)
 800509c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80050a8:	2200      	movs	r2, #0
 80050aa:	2100      	movs	r1, #0
 80050ac:	2005      	movs	r0, #5
 80050ae:	f000 fe20 	bl	8005cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80050b2:	2005      	movs	r0, #5
 80050b4:	f000 fe37 	bl	8005d26 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050b8:	bf00      	nop
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	58024400 	.word	0x58024400

080050c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a2b      	ldr	r2, [pc, #172]	; (8005180 <HAL_TIM_PWM_MspInit+0xbc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10f      	bne.n	80050f6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050d6:	4b2b      	ldr	r3, [pc, #172]	; (8005184 <HAL_TIM_PWM_MspInit+0xc0>)
 80050d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050dc:	4a29      	ldr	r2, [pc, #164]	; (8005184 <HAL_TIM_PWM_MspInit+0xc0>)
 80050de:	f043 0301 	orr.w	r3, r3, #1
 80050e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80050e6:	4b27      	ldr	r3, [pc, #156]	; (8005184 <HAL_TIM_PWM_MspInit+0xc0>)
 80050e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80050f4:	e03d      	b.n	8005172 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a23      	ldr	r2, [pc, #140]	; (8005188 <HAL_TIM_PWM_MspInit+0xc4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d10f      	bne.n	8005120 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005100:	4b20      	ldr	r3, [pc, #128]	; (8005184 <HAL_TIM_PWM_MspInit+0xc0>)
 8005102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005106:	4a1f      	ldr	r2, [pc, #124]	; (8005184 <HAL_TIM_PWM_MspInit+0xc0>)
 8005108:	f043 0304 	orr.w	r3, r3, #4
 800510c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005110:	4b1c      	ldr	r3, [pc, #112]	; (8005184 <HAL_TIM_PWM_MspInit+0xc0>)
 8005112:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	693b      	ldr	r3, [r7, #16]
}
 800511e:	e028      	b.n	8005172 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a19      	ldr	r2, [pc, #100]	; (800518c <HAL_TIM_PWM_MspInit+0xc8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d10f      	bne.n	800514a <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800512a:	4b16      	ldr	r3, [pc, #88]	; (8005184 <HAL_TIM_PWM_MspInit+0xc0>)
 800512c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005130:	4a14      	ldr	r2, [pc, #80]	; (8005184 <HAL_TIM_PWM_MspInit+0xc0>)
 8005132:	f043 0308 	orr.w	r3, r3, #8
 8005136:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800513a:	4b12      	ldr	r3, [pc, #72]	; (8005184 <HAL_TIM_PWM_MspInit+0xc0>)
 800513c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
}
 8005148:	e013      	b.n	8005172 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM15)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a10      	ldr	r2, [pc, #64]	; (8005190 <HAL_TIM_PWM_MspInit+0xcc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d10e      	bne.n	8005172 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005154:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <HAL_TIM_PWM_MspInit+0xc0>)
 8005156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800515a:	4a0a      	ldr	r2, [pc, #40]	; (8005184 <HAL_TIM_PWM_MspInit+0xc0>)
 800515c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005160:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005164:	4b07      	ldr	r3, [pc, #28]	; (8005184 <HAL_TIM_PWM_MspInit+0xc0>)
 8005166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800516a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800516e:	60bb      	str	r3, [r7, #8]
 8005170:	68bb      	ldr	r3, [r7, #8]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40010000 	.word	0x40010000
 8005184:	58024400 	.word	0x58024400
 8005188:	40000800 	.word	0x40000800
 800518c:	40000c00 	.word	0x40000c00
 8005190:	40014000 	.word	0x40014000

08005194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a4:	d117      	bne.n	80051d6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051a6:	4b22      	ldr	r3, [pc, #136]	; (8005230 <HAL_TIM_Base_MspInit+0x9c>)
 80051a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051ac:	4a20      	ldr	r2, [pc, #128]	; (8005230 <HAL_TIM_Base_MspInit+0x9c>)
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051b6:	4b1e      	ldr	r3, [pc, #120]	; (8005230 <HAL_TIM_Base_MspInit+0x9c>)
 80051b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80051c4:	2200      	movs	r2, #0
 80051c6:	2100      	movs	r1, #0
 80051c8:	201c      	movs	r0, #28
 80051ca:	f000 fd92 	bl	8005cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80051ce:	201c      	movs	r0, #28
 80051d0:	f000 fda9 	bl	8005d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80051d4:	e028      	b.n	8005228 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM6)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a16      	ldr	r2, [pc, #88]	; (8005234 <HAL_TIM_Base_MspInit+0xa0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d10f      	bne.n	8005200 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <HAL_TIM_Base_MspInit+0x9c>)
 80051e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051e6:	4a12      	ldr	r2, [pc, #72]	; (8005230 <HAL_TIM_Base_MspInit+0x9c>)
 80051e8:	f043 0310 	orr.w	r3, r3, #16
 80051ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <HAL_TIM_Base_MspInit+0x9c>)
 80051f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	693b      	ldr	r3, [r7, #16]
}
 80051fe:	e013      	b.n	8005228 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM7)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a0c      	ldr	r2, [pc, #48]	; (8005238 <HAL_TIM_Base_MspInit+0xa4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d10e      	bne.n	8005228 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800520a:	4b09      	ldr	r3, [pc, #36]	; (8005230 <HAL_TIM_Base_MspInit+0x9c>)
 800520c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005210:	4a07      	ldr	r2, [pc, #28]	; (8005230 <HAL_TIM_Base_MspInit+0x9c>)
 8005212:	f043 0320 	orr.w	r3, r3, #32
 8005216:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800521a:	4b05      	ldr	r3, [pc, #20]	; (8005230 <HAL_TIM_Base_MspInit+0x9c>)
 800521c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	68fb      	ldr	r3, [r7, #12]
}
 8005228:	bf00      	nop
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	58024400 	.word	0x58024400
 8005234:	40001000 	.word	0x40001000
 8005238:	40001400 	.word	0x40001400

0800523c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b090      	sub	sp, #64	; 0x40
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	609a      	str	r2, [r3, #8]
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a78      	ldr	r2, [pc, #480]	; (800543c <HAL_TIM_Encoder_MspInit+0x200>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d14d      	bne.n	80052fa <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800525e:	4b78      	ldr	r3, [pc, #480]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 8005260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005264:	4a76      	ldr	r2, [pc, #472]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 8005266:	f043 0302 	orr.w	r3, r3, #2
 800526a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800526e:	4b74      	ldr	r3, [pc, #464]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 8005270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	62bb      	str	r3, [r7, #40]	; 0x28
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800527c:	4b70      	ldr	r3, [pc, #448]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 800527e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005282:	4a6f      	ldr	r2, [pc, #444]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800528c:	4b6c      	ldr	r3, [pc, #432]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 800528e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800529a:	4b69      	ldr	r3, [pc, #420]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 800529c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052a0:	4a67      	ldr	r2, [pc, #412]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 80052a2:	f043 0302 	orr.w	r3, r3, #2
 80052a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052aa:	4b65      	ldr	r3, [pc, #404]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 80052ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	623b      	str	r3, [r7, #32]
 80052b6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80052b8:	2340      	movs	r3, #64	; 0x40
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052bc:	2302      	movs	r3, #2
 80052be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c0:	2300      	movs	r3, #0
 80052c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c4:	2300      	movs	r3, #0
 80052c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052c8:	2302      	movs	r3, #2
 80052ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052d0:	4619      	mov	r1, r3
 80052d2:	485c      	ldr	r0, [pc, #368]	; (8005444 <HAL_TIM_Encoder_MspInit+0x208>)
 80052d4:	f003 fb7c 	bl	80089d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80052d8:	2320      	movs	r3, #32
 80052da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052dc:	2302      	movs	r3, #2
 80052de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e4:	2300      	movs	r3, #0
 80052e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052e8:	2302      	movs	r3, #2
 80052ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052f0:	4619      	mov	r1, r3
 80052f2:	4855      	ldr	r0, [pc, #340]	; (8005448 <HAL_TIM_Encoder_MspInit+0x20c>)
 80052f4:	f003 fb6c 	bl	80089d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80052f8:	e09b      	b.n	8005432 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a53      	ldr	r2, [pc, #332]	; (800544c <HAL_TIM_Encoder_MspInit+0x210>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d12e      	bne.n	8005362 <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005304:	4b4e      	ldr	r3, [pc, #312]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 8005306:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800530a:	4a4d      	ldr	r2, [pc, #308]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 800530c:	f043 0302 	orr.w	r3, r3, #2
 8005310:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005314:	4b4a      	ldr	r3, [pc, #296]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 8005316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	61fb      	str	r3, [r7, #28]
 8005320:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005322:	4b47      	ldr	r3, [pc, #284]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 8005324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005328:	4a45      	ldr	r2, [pc, #276]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 800532a:	f043 0304 	orr.w	r3, r3, #4
 800532e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005332:	4b43      	ldr	r3, [pc, #268]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 8005334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005340:	23c0      	movs	r3, #192	; 0xc0
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005344:	2302      	movs	r3, #2
 8005346:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005348:	2300      	movs	r3, #0
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800534c:	2300      	movs	r3, #0
 800534e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005350:	2303      	movs	r3, #3
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005358:	4619      	mov	r1, r3
 800535a:	483d      	ldr	r0, [pc, #244]	; (8005450 <HAL_TIM_Encoder_MspInit+0x214>)
 800535c:	f003 fb38 	bl	80089d0 <HAL_GPIO_Init>
}
 8005360:	e067      	b.n	8005432 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM23)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a3b      	ldr	r2, [pc, #236]	; (8005454 <HAL_TIM_Encoder_MspInit+0x218>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d12e      	bne.n	80053ca <HAL_TIM_Encoder_MspInit+0x18e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800536c:	4b34      	ldr	r3, [pc, #208]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 800536e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005372:	4a33      	ldr	r2, [pc, #204]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 8005374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005378:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800537c:	4b30      	ldr	r3, [pc, #192]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 800537e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800538a:	4b2d      	ldr	r3, [pc, #180]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 800538c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005390:	4a2b      	ldr	r2, [pc, #172]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 8005392:	f043 0320 	orr.w	r3, r3, #32
 8005396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800539a:	4b29      	ldr	r3, [pc, #164]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 800539c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80053a8:	2303      	movs	r3, #3
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ac:	2302      	movs	r3, #2
 80053ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053b4:	2300      	movs	r3, #0
 80053b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80053b8:	230d      	movs	r3, #13
 80053ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053c0:	4619      	mov	r1, r3
 80053c2:	4825      	ldr	r0, [pc, #148]	; (8005458 <HAL_TIM_Encoder_MspInit+0x21c>)
 80053c4:	f003 fb04 	bl	80089d0 <HAL_GPIO_Init>
}
 80053c8:	e033      	b.n	8005432 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM24)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a23      	ldr	r2, [pc, #140]	; (800545c <HAL_TIM_Encoder_MspInit+0x220>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d12e      	bne.n	8005432 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80053d4:	4b1a      	ldr	r3, [pc, #104]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 80053d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80053da:	4a19      	ldr	r2, [pc, #100]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 80053dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053e0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80053e4:	4b16      	ldr	r3, [pc, #88]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 80053e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80053ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80053f2:	4b13      	ldr	r3, [pc, #76]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 80053f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053f8:	4a11      	ldr	r2, [pc, #68]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 80053fa:	f043 0320 	orr.w	r3, r3, #32
 80053fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005402:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <HAL_TIM_Encoder_MspInit+0x204>)
 8005404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	60bb      	str	r3, [r7, #8]
 800540e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005410:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005414:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005416:	2302      	movs	r3, #2
 8005418:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800541a:	2300      	movs	r3, #0
 800541c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800541e:	2300      	movs	r3, #0
 8005420:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8005422:	230e      	movs	r3, #14
 8005424:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800542a:	4619      	mov	r1, r3
 800542c:	480a      	ldr	r0, [pc, #40]	; (8005458 <HAL_TIM_Encoder_MspInit+0x21c>)
 800542e:	f003 facf 	bl	80089d0 <HAL_GPIO_Init>
}
 8005432:	bf00      	nop
 8005434:	3740      	adds	r7, #64	; 0x40
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40000400 	.word	0x40000400
 8005440:	58024400 	.word	0x58024400
 8005444:	58020000 	.word	0x58020000
 8005448:	58020400 	.word	0x58020400
 800544c:	40010400 	.word	0x40010400
 8005450:	58020800 	.word	0x58020800
 8005454:	4000e000 	.word	0x4000e000
 8005458:	58021400 	.word	0x58021400
 800545c:	4000e400 	.word	0x4000e400

08005460 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08c      	sub	sp, #48	; 0x30
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005468:	f107 031c 	add.w	r3, r7, #28
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	605a      	str	r2, [r3, #4]
 8005472:	609a      	str	r2, [r3, #8]
 8005474:	60da      	str	r2, [r3, #12]
 8005476:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a4b      	ldr	r2, [pc, #300]	; (80055ac <HAL_TIM_MspPostInit+0x14c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d120      	bne.n	80054c4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005482:	4b4b      	ldr	r3, [pc, #300]	; (80055b0 <HAL_TIM_MspPostInit+0x150>)
 8005484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005488:	4a49      	ldr	r2, [pc, #292]	; (80055b0 <HAL_TIM_MspPostInit+0x150>)
 800548a:	f043 0310 	orr.w	r3, r3, #16
 800548e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005492:	4b47      	ldr	r3, [pc, #284]	; (80055b0 <HAL_TIM_MspPostInit+0x150>)
 8005494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80054a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a6:	2302      	movs	r3, #2
 80054a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ae:	2300      	movs	r3, #0
 80054b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80054b2:	2301      	movs	r3, #1
 80054b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054b6:	f107 031c 	add.w	r3, r7, #28
 80054ba:	4619      	mov	r1, r3
 80054bc:	483d      	ldr	r0, [pc, #244]	; (80055b4 <HAL_TIM_MspPostInit+0x154>)
 80054be:	f003 fa87 	bl	80089d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80054c2:	e06e      	b.n	80055a2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a3b      	ldr	r2, [pc, #236]	; (80055b8 <HAL_TIM_MspPostInit+0x158>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d120      	bne.n	8005510 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054ce:	4b38      	ldr	r3, [pc, #224]	; (80055b0 <HAL_TIM_MspPostInit+0x150>)
 80054d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054d4:	4a36      	ldr	r2, [pc, #216]	; (80055b0 <HAL_TIM_MspPostInit+0x150>)
 80054d6:	f043 0308 	orr.w	r3, r3, #8
 80054da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054de:	4b34      	ldr	r3, [pc, #208]	; (80055b0 <HAL_TIM_MspPostInit+0x150>)
 80054e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80054ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f2:	2302      	movs	r3, #2
 80054f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fa:	2300      	movs	r3, #0
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80054fe:	2302      	movs	r3, #2
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005502:	f107 031c 	add.w	r3, r7, #28
 8005506:	4619      	mov	r1, r3
 8005508:	482c      	ldr	r0, [pc, #176]	; (80055bc <HAL_TIM_MspPostInit+0x15c>)
 800550a:	f003 fa61 	bl	80089d0 <HAL_GPIO_Init>
}
 800550e:	e048      	b.n	80055a2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a2a      	ldr	r2, [pc, #168]	; (80055c0 <HAL_TIM_MspPostInit+0x160>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d11f      	bne.n	800555a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800551a:	4b25      	ldr	r3, [pc, #148]	; (80055b0 <HAL_TIM_MspPostInit+0x150>)
 800551c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005520:	4a23      	ldr	r2, [pc, #140]	; (80055b0 <HAL_TIM_MspPostInit+0x150>)
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800552a:	4b21      	ldr	r3, [pc, #132]	; (80055b0 <HAL_TIM_MspPostInit+0x150>)
 800552c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	613b      	str	r3, [r7, #16]
 8005536:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005538:	2301      	movs	r3, #1
 800553a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800553c:	2302      	movs	r3, #2
 800553e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005540:	2300      	movs	r3, #0
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005544:	2300      	movs	r3, #0
 8005546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005548:	2302      	movs	r3, #2
 800554a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800554c:	f107 031c 	add.w	r3, r7, #28
 8005550:	4619      	mov	r1, r3
 8005552:	481c      	ldr	r0, [pc, #112]	; (80055c4 <HAL_TIM_MspPostInit+0x164>)
 8005554:	f003 fa3c 	bl	80089d0 <HAL_GPIO_Init>
}
 8005558:	e023      	b.n	80055a2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1a      	ldr	r2, [pc, #104]	; (80055c8 <HAL_TIM_MspPostInit+0x168>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d11e      	bne.n	80055a2 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005564:	4b12      	ldr	r3, [pc, #72]	; (80055b0 <HAL_TIM_MspPostInit+0x150>)
 8005566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800556a:	4a11      	ldr	r2, [pc, #68]	; (80055b0 <HAL_TIM_MspPostInit+0x150>)
 800556c:	f043 0310 	orr.w	r3, r3, #16
 8005570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005574:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <HAL_TIM_MspPostInit+0x150>)
 8005576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005582:	2320      	movs	r3, #32
 8005584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005586:	2302      	movs	r3, #2
 8005588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800558a:	2300      	movs	r3, #0
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800558e:	2300      	movs	r3, #0
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005592:	2304      	movs	r3, #4
 8005594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005596:	f107 031c 	add.w	r3, r7, #28
 800559a:	4619      	mov	r1, r3
 800559c:	4805      	ldr	r0, [pc, #20]	; (80055b4 <HAL_TIM_MspPostInit+0x154>)
 800559e:	f003 fa17 	bl	80089d0 <HAL_GPIO_Init>
}
 80055a2:	bf00      	nop
 80055a4:	3730      	adds	r7, #48	; 0x30
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	40010000 	.word	0x40010000
 80055b0:	58024400 	.word	0x58024400
 80055b4:	58021000 	.word	0x58021000
 80055b8:	40000800 	.word	0x40000800
 80055bc:	58020c00 	.word	0x58020c00
 80055c0:	40000c00 	.word	0x40000c00
 80055c4:	58020000 	.word	0x58020000
 80055c8:	40014000 	.word	0x40014000

080055cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b0b6      	sub	sp, #216	; 0xd8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	605a      	str	r2, [r3, #4]
 80055de:	609a      	str	r2, [r3, #8]
 80055e0:	60da      	str	r2, [r3, #12]
 80055e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80055e4:	f107 0310 	add.w	r3, r7, #16
 80055e8:	22b4      	movs	r2, #180	; 0xb4
 80055ea:	2100      	movs	r1, #0
 80055ec:	4618      	mov	r0, r3
 80055ee:	f009 fc7d 	bl	800eeec <memset>
  if(huart->Instance==USART3)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a57      	ldr	r2, [pc, #348]	; (8005754 <HAL_UART_MspInit+0x188>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	f040 80a7 	bne.w	800574c <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80055fe:	2302      	movs	r3, #2
 8005600:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005602:	2300      	movs	r3, #0
 8005604:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005608:	f107 0310 	add.w	r3, r7, #16
 800560c:	4618      	mov	r0, r3
 800560e:	f004 fb15 	bl	8009c3c <HAL_RCCEx_PeriphCLKConfig>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005618:	f7fc fd30 	bl	800207c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800561c:	4b4e      	ldr	r3, [pc, #312]	; (8005758 <HAL_UART_MspInit+0x18c>)
 800561e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005622:	4a4d      	ldr	r2, [pc, #308]	; (8005758 <HAL_UART_MspInit+0x18c>)
 8005624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005628:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800562c:	4b4a      	ldr	r3, [pc, #296]	; (8005758 <HAL_UART_MspInit+0x18c>)
 800562e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800563a:	4b47      	ldr	r3, [pc, #284]	; (8005758 <HAL_UART_MspInit+0x18c>)
 800563c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005640:	4a45      	ldr	r2, [pc, #276]	; (8005758 <HAL_UART_MspInit+0x18c>)
 8005642:	f043 0302 	orr.w	r3, r3, #2
 8005646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800564a:	4b43      	ldr	r3, [pc, #268]	; (8005758 <HAL_UART_MspInit+0x18c>)
 800564c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	60bb      	str	r3, [r7, #8]
 8005656:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005658:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800565c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005660:	2302      	movs	r3, #2
 8005662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005666:	2300      	movs	r3, #0
 8005668:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800566c:	2300      	movs	r3, #0
 800566e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005672:	2307      	movs	r3, #7
 8005674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005678:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800567c:	4619      	mov	r1, r3
 800567e:	4837      	ldr	r0, [pc, #220]	; (800575c <HAL_UART_MspInit+0x190>)
 8005680:	f003 f9a6 	bl	80089d0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8005684:	4b36      	ldr	r3, [pc, #216]	; (8005760 <HAL_UART_MspInit+0x194>)
 8005686:	4a37      	ldr	r2, [pc, #220]	; (8005764 <HAL_UART_MspInit+0x198>)
 8005688:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800568a:	4b35      	ldr	r3, [pc, #212]	; (8005760 <HAL_UART_MspInit+0x194>)
 800568c:	222d      	movs	r2, #45	; 0x2d
 800568e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005690:	4b33      	ldr	r3, [pc, #204]	; (8005760 <HAL_UART_MspInit+0x194>)
 8005692:	2200      	movs	r2, #0
 8005694:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005696:	4b32      	ldr	r3, [pc, #200]	; (8005760 <HAL_UART_MspInit+0x194>)
 8005698:	2200      	movs	r2, #0
 800569a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800569c:	4b30      	ldr	r3, [pc, #192]	; (8005760 <HAL_UART_MspInit+0x194>)
 800569e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056a4:	4b2e      	ldr	r3, [pc, #184]	; (8005760 <HAL_UART_MspInit+0x194>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056aa:	4b2d      	ldr	r3, [pc, #180]	; (8005760 <HAL_UART_MspInit+0x194>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80056b0:	4b2b      	ldr	r3, [pc, #172]	; (8005760 <HAL_UART_MspInit+0x194>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80056b6:	4b2a      	ldr	r3, [pc, #168]	; (8005760 <HAL_UART_MspInit+0x194>)
 80056b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056bc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056be:	4b28      	ldr	r3, [pc, #160]	; (8005760 <HAL_UART_MspInit+0x194>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80056c4:	4826      	ldr	r0, [pc, #152]	; (8005760 <HAL_UART_MspInit+0x194>)
 80056c6:	f000 fb49 	bl	8005d5c <HAL_DMA_Init>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80056d0:	f7fc fcd4 	bl	800207c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a22      	ldr	r2, [pc, #136]	; (8005760 <HAL_UART_MspInit+0x194>)
 80056d8:	67da      	str	r2, [r3, #124]	; 0x7c
 80056da:	4a21      	ldr	r2, [pc, #132]	; (8005760 <HAL_UART_MspInit+0x194>)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80056e0:	4b21      	ldr	r3, [pc, #132]	; (8005768 <HAL_UART_MspInit+0x19c>)
 80056e2:	4a22      	ldr	r2, [pc, #136]	; (800576c <HAL_UART_MspInit+0x1a0>)
 80056e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80056e6:	4b20      	ldr	r3, [pc, #128]	; (8005768 <HAL_UART_MspInit+0x19c>)
 80056e8:	222e      	movs	r2, #46	; 0x2e
 80056ea:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056ec:	4b1e      	ldr	r3, [pc, #120]	; (8005768 <HAL_UART_MspInit+0x19c>)
 80056ee:	2240      	movs	r2, #64	; 0x40
 80056f0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056f2:	4b1d      	ldr	r3, [pc, #116]	; (8005768 <HAL_UART_MspInit+0x19c>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056f8:	4b1b      	ldr	r3, [pc, #108]	; (8005768 <HAL_UART_MspInit+0x19c>)
 80056fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005700:	4b19      	ldr	r3, [pc, #100]	; (8005768 <HAL_UART_MspInit+0x19c>)
 8005702:	2200      	movs	r2, #0
 8005704:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005706:	4b18      	ldr	r3, [pc, #96]	; (8005768 <HAL_UART_MspInit+0x19c>)
 8005708:	2200      	movs	r2, #0
 800570a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800570c:	4b16      	ldr	r3, [pc, #88]	; (8005768 <HAL_UART_MspInit+0x19c>)
 800570e:	2200      	movs	r2, #0
 8005710:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005712:	4b15      	ldr	r3, [pc, #84]	; (8005768 <HAL_UART_MspInit+0x19c>)
 8005714:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005718:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800571a:	4b13      	ldr	r3, [pc, #76]	; (8005768 <HAL_UART_MspInit+0x19c>)
 800571c:	2200      	movs	r2, #0
 800571e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005720:	4811      	ldr	r0, [pc, #68]	; (8005768 <HAL_UART_MspInit+0x19c>)
 8005722:	f000 fb1b 	bl	8005d5c <HAL_DMA_Init>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 800572c:	f7fc fca6 	bl	800207c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a0d      	ldr	r2, [pc, #52]	; (8005768 <HAL_UART_MspInit+0x19c>)
 8005734:	679a      	str	r2, [r3, #120]	; 0x78
 8005736:	4a0c      	ldr	r2, [pc, #48]	; (8005768 <HAL_UART_MspInit+0x19c>)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800573c:	2200      	movs	r2, #0
 800573e:	2100      	movs	r1, #0
 8005740:	2027      	movs	r0, #39	; 0x27
 8005742:	f000 fad6 	bl	8005cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005746:	2027      	movs	r0, #39	; 0x27
 8005748:	f000 faed 	bl	8005d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800574c:	bf00      	nop
 800574e:	37d8      	adds	r7, #216	; 0xd8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40004800 	.word	0x40004800
 8005758:	58024400 	.word	0x58024400
 800575c:	58020400 	.word	0x58020400
 8005760:	24000468 	.word	0x24000468
 8005764:	40020010 	.word	0x40020010
 8005768:	240004e0 	.word	0x240004e0
 800576c:	40020028 	.word	0x40020028

08005770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005774:	e7fe      	b.n	8005774 <NMI_Handler+0x4>

08005776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005776:	b480      	push	{r7}
 8005778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800577a:	e7fe      	b.n	800577a <HardFault_Handler+0x4>

0800577c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005780:	e7fe      	b.n	8005780 <MemManage_Handler+0x4>

08005782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005782:	b480      	push	{r7}
 8005784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005786:	e7fe      	b.n	8005786 <BusFault_Handler+0x4>

08005788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800578c:	e7fe      	b.n	800578c <UsageFault_Handler+0x4>

0800578e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800578e:	b480      	push	{r7}
 8005790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005792:	bf00      	nop
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057a0:	bf00      	nop
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057aa:	b480      	push	{r7}
 80057ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057ae:	bf00      	nop
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057bc:	f000 f99e 	bl	8005afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057c0:	bf00      	nop
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80057c8:	bf00      	nop
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80057d8:	4802      	ldr	r0, [pc, #8]	; (80057e4 <DMA1_Stream0_IRQHandler+0x10>)
 80057da:	f001 fde7 	bl	80073ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	24000468 	.word	0x24000468

080057e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80057ec:	4802      	ldr	r0, [pc, #8]	; (80057f8 <DMA1_Stream1_IRQHandler+0x10>)
 80057ee:	f001 fddd 	bl	80073ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80057f2:	bf00      	nop
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	240004e0 	.word	0x240004e0

080057fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005800:	4802      	ldr	r0, [pc, #8]	; (800580c <TIM2_IRQHandler+0x10>)
 8005802:	f006 f917 	bl	800ba34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005806:	bf00      	nop
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	240000e0 	.word	0x240000e0

08005810 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005814:	4802      	ldr	r0, [pc, #8]	; (8005820 <USART3_IRQHandler+0x10>)
 8005816:	f007 fb33 	bl	800ce80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800581a:	bf00      	nop
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	240003d8 	.word	0x240003d8

08005824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
	return 1;
 8005828:	2301      	movs	r3, #1
}
 800582a:	4618      	mov	r0, r3
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <_kill>:

int _kill(int pid, int sig)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800583e:	f009 fb1d 	bl	800ee7c <__errno>
 8005842:	4603      	mov	r3, r0
 8005844:	2216      	movs	r2, #22
 8005846:	601a      	str	r2, [r3, #0]
	return -1;
 8005848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <_exit>:

void _exit (int status)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800585c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff ffe7 	bl	8005834 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005866:	e7fe      	b.n	8005866 <_exit+0x12>

08005868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005870:	4a14      	ldr	r2, [pc, #80]	; (80058c4 <_sbrk+0x5c>)
 8005872:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <_sbrk+0x60>)
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800587c:	4b13      	ldr	r3, [pc, #76]	; (80058cc <_sbrk+0x64>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005884:	4b11      	ldr	r3, [pc, #68]	; (80058cc <_sbrk+0x64>)
 8005886:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <_sbrk+0x68>)
 8005888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800588a:	4b10      	ldr	r3, [pc, #64]	; (80058cc <_sbrk+0x64>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	429a      	cmp	r2, r3
 8005896:	d207      	bcs.n	80058a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005898:	f009 faf0 	bl	800ee7c <__errno>
 800589c:	4603      	mov	r3, r0
 800589e:	220c      	movs	r2, #12
 80058a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80058a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058a6:	e009      	b.n	80058bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058a8:	4b08      	ldr	r3, [pc, #32]	; (80058cc <_sbrk+0x64>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058ae:	4b07      	ldr	r3, [pc, #28]	; (80058cc <_sbrk+0x64>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4413      	add	r3, r2
 80058b6:	4a05      	ldr	r2, [pc, #20]	; (80058cc <_sbrk+0x64>)
 80058b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058ba:	68fb      	ldr	r3, [r7, #12]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	24050000 	.word	0x24050000
 80058c8:	00000400 	.word	0x00000400
 80058cc:	24001ce8 	.word	0x24001ce8
 80058d0:	24001d00 	.word	0x24001d00

080058d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80058d8:	4b32      	ldr	r3, [pc, #200]	; (80059a4 <SystemInit+0xd0>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058de:	4a31      	ldr	r2, [pc, #196]	; (80059a4 <SystemInit+0xd0>)
 80058e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80058e8:	4b2f      	ldr	r3, [pc, #188]	; (80059a8 <SystemInit+0xd4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 030f 	and.w	r3, r3, #15
 80058f0:	2b06      	cmp	r3, #6
 80058f2:	d807      	bhi.n	8005904 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80058f4:	4b2c      	ldr	r3, [pc, #176]	; (80059a8 <SystemInit+0xd4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f023 030f 	bic.w	r3, r3, #15
 80058fc:	4a2a      	ldr	r2, [pc, #168]	; (80059a8 <SystemInit+0xd4>)
 80058fe:	f043 0307 	orr.w	r3, r3, #7
 8005902:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005904:	4b29      	ldr	r3, [pc, #164]	; (80059ac <SystemInit+0xd8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a28      	ldr	r2, [pc, #160]	; (80059ac <SystemInit+0xd8>)
 800590a:	f043 0301 	orr.w	r3, r3, #1
 800590e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005910:	4b26      	ldr	r3, [pc, #152]	; (80059ac <SystemInit+0xd8>)
 8005912:	2200      	movs	r2, #0
 8005914:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005916:	4b25      	ldr	r3, [pc, #148]	; (80059ac <SystemInit+0xd8>)
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	4924      	ldr	r1, [pc, #144]	; (80059ac <SystemInit+0xd8>)
 800591c:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <SystemInit+0xdc>)
 800591e:	4013      	ands	r3, r2
 8005920:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005922:	4b21      	ldr	r3, [pc, #132]	; (80059a8 <SystemInit+0xd4>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d007      	beq.n	800593e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800592e:	4b1e      	ldr	r3, [pc, #120]	; (80059a8 <SystemInit+0xd4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f023 030f 	bic.w	r3, r3, #15
 8005936:	4a1c      	ldr	r2, [pc, #112]	; (80059a8 <SystemInit+0xd4>)
 8005938:	f043 0307 	orr.w	r3, r3, #7
 800593c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800593e:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <SystemInit+0xd8>)
 8005940:	2200      	movs	r2, #0
 8005942:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005944:	4b19      	ldr	r3, [pc, #100]	; (80059ac <SystemInit+0xd8>)
 8005946:	2200      	movs	r2, #0
 8005948:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800594a:	4b18      	ldr	r3, [pc, #96]	; (80059ac <SystemInit+0xd8>)
 800594c:	2200      	movs	r2, #0
 800594e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005950:	4b16      	ldr	r3, [pc, #88]	; (80059ac <SystemInit+0xd8>)
 8005952:	4a18      	ldr	r2, [pc, #96]	; (80059b4 <SystemInit+0xe0>)
 8005954:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005956:	4b15      	ldr	r3, [pc, #84]	; (80059ac <SystemInit+0xd8>)
 8005958:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <SystemInit+0xe4>)
 800595a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800595c:	4b13      	ldr	r3, [pc, #76]	; (80059ac <SystemInit+0xd8>)
 800595e:	4a17      	ldr	r2, [pc, #92]	; (80059bc <SystemInit+0xe8>)
 8005960:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005962:	4b12      	ldr	r3, [pc, #72]	; (80059ac <SystemInit+0xd8>)
 8005964:	2200      	movs	r2, #0
 8005966:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005968:	4b10      	ldr	r3, [pc, #64]	; (80059ac <SystemInit+0xd8>)
 800596a:	4a14      	ldr	r2, [pc, #80]	; (80059bc <SystemInit+0xe8>)
 800596c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800596e:	4b0f      	ldr	r3, [pc, #60]	; (80059ac <SystemInit+0xd8>)
 8005970:	2200      	movs	r2, #0
 8005972:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005974:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <SystemInit+0xd8>)
 8005976:	4a11      	ldr	r2, [pc, #68]	; (80059bc <SystemInit+0xe8>)
 8005978:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800597a:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <SystemInit+0xd8>)
 800597c:	2200      	movs	r2, #0
 800597e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005980:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <SystemInit+0xd8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a09      	ldr	r2, [pc, #36]	; (80059ac <SystemInit+0xd8>)
 8005986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800598a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800598c:	4b07      	ldr	r3, [pc, #28]	; (80059ac <SystemInit+0xd8>)
 800598e:	2200      	movs	r2, #0
 8005990:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005992:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <SystemInit+0xec>)
 8005994:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005998:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800599a:	bf00      	nop
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	e000ed00 	.word	0xe000ed00
 80059a8:	52002000 	.word	0x52002000
 80059ac:	58024400 	.word	0x58024400
 80059b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80059b4:	02020200 	.word	0x02020200
 80059b8:	01ff0000 	.word	0x01ff0000
 80059bc:	01010280 	.word	0x01010280
 80059c0:	52004000 	.word	0x52004000

080059c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80059c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80059fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80059c8:	f7ff ff84 	bl	80058d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059cc:	480c      	ldr	r0, [pc, #48]	; (8005a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80059ce:	490d      	ldr	r1, [pc, #52]	; (8005a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80059d0:	4a0d      	ldr	r2, [pc, #52]	; (8005a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80059d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059d4:	e002      	b.n	80059dc <LoopCopyDataInit>

080059d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059da:	3304      	adds	r3, #4

080059dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059e0:	d3f9      	bcc.n	80059d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059e2:	4a0a      	ldr	r2, [pc, #40]	; (8005a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80059e4:	4c0a      	ldr	r4, [pc, #40]	; (8005a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80059e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059e8:	e001      	b.n	80059ee <LoopFillZerobss>

080059ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059ec:	3204      	adds	r2, #4

080059ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059f0:	d3fb      	bcc.n	80059ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80059f2:	f009 fa49 	bl	800ee88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059f6:	f7fa fe43 	bl	8000680 <main>
  bx  lr
 80059fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80059fc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005a00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005a04:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8005a08:	0800f594 	.word	0x0800f594
  ldr r2, =_sbss
 8005a0c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8005a10:	24001d00 	.word	0x24001d00

08005a14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a14:	e7fe      	b.n	8005a14 <ADC3_IRQHandler>
	...

08005a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a1e:	2003      	movs	r0, #3
 8005a20:	f000 f95c 	bl	8005cdc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a24:	f003 ff34 	bl	8009890 <HAL_RCC_GetSysClockFreq>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	4b15      	ldr	r3, [pc, #84]	; (8005a80 <HAL_Init+0x68>)
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	0a1b      	lsrs	r3, r3, #8
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	4913      	ldr	r1, [pc, #76]	; (8005a84 <HAL_Init+0x6c>)
 8005a36:	5ccb      	ldrb	r3, [r1, r3]
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a42:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <HAL_Init+0x68>)
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	4a0e      	ldr	r2, [pc, #56]	; (8005a84 <HAL_Init+0x6c>)
 8005a4c:	5cd3      	ldrb	r3, [r2, r3]
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
 8005a58:	4a0b      	ldr	r2, [pc, #44]	; (8005a88 <HAL_Init+0x70>)
 8005a5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a5c:	4a0b      	ldr	r2, [pc, #44]	; (8005a8c <HAL_Init+0x74>)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a62:	2000      	movs	r0, #0
 8005a64:	f000 f814 	bl	8005a90 <HAL_InitTick>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e002      	b.n	8005a78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005a72:	f7ff fb07 	bl	8005084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	58024400 	.word	0x58024400
 8005a84:	0800f540 	.word	0x0800f540
 8005a88:	24000004 	.word	0x24000004
 8005a8c:	24000000 	.word	0x24000000

08005a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005a98:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <HAL_InitTick+0x60>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e021      	b.n	8005ae8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005aa4:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <HAL_InitTick+0x64>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <HAL_InitTick+0x60>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	4619      	mov	r1, r3
 8005aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f941 	bl	8005d42 <HAL_SYSTICK_Config>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e00e      	b.n	8005ae8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b0f      	cmp	r3, #15
 8005ace:	d80a      	bhi.n	8005ae6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ad8:	f000 f90b 	bl	8005cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005adc:	4a06      	ldr	r2, [pc, #24]	; (8005af8 <HAL_InitTick+0x68>)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e000      	b.n	8005ae8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	2400000c 	.word	0x2400000c
 8005af4:	24000000 	.word	0x24000000
 8005af8:	24000008 	.word	0x24000008

08005afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005b00:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <HAL_IncTick+0x20>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <HAL_IncTick+0x24>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	4a04      	ldr	r2, [pc, #16]	; (8005b20 <HAL_IncTick+0x24>)
 8005b0e:	6013      	str	r3, [r2, #0]
}
 8005b10:	bf00      	nop
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	2400000c 	.word	0x2400000c
 8005b20:	24001cec 	.word	0x24001cec

08005b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  return uwTick;
 8005b28:	4b03      	ldr	r3, [pc, #12]	; (8005b38 <HAL_GetTick+0x14>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	24001cec 	.word	0x24001cec

08005b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <__NVIC_SetPriorityGrouping+0x40>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b58:	4013      	ands	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b64:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <__NVIC_SetPriorityGrouping+0x44>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b6a:	4a04      	ldr	r2, [pc, #16]	; (8005b7c <__NVIC_SetPriorityGrouping+0x40>)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	60d3      	str	r3, [r2, #12]
}
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	e000ed00 	.word	0xe000ed00
 8005b80:	05fa0000 	.word	0x05fa0000

08005b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b88:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <__NVIC_GetPriorityGrouping+0x18>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	0a1b      	lsrs	r3, r3, #8
 8005b8e:	f003 0307 	and.w	r3, r3, #7
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	e000ed00 	.word	0xe000ed00

08005ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	db0b      	blt.n	8005bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	f003 021f 	and.w	r2, r3, #31
 8005bb8:	4907      	ldr	r1, [pc, #28]	; (8005bd8 <__NVIC_EnableIRQ+0x38>)
 8005bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8005bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	e000e100 	.word	0xe000e100

08005bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4603      	mov	r3, r0
 8005be4:	6039      	str	r1, [r7, #0]
 8005be6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	db0a      	blt.n	8005c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	490c      	ldr	r1, [pc, #48]	; (8005c28 <__NVIC_SetPriority+0x4c>)
 8005bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bfa:	0112      	lsls	r2, r2, #4
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	440b      	add	r3, r1
 8005c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c04:	e00a      	b.n	8005c1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	4908      	ldr	r1, [pc, #32]	; (8005c2c <__NVIC_SetPriority+0x50>)
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	3b04      	subs	r3, #4
 8005c14:	0112      	lsls	r2, r2, #4
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	440b      	add	r3, r1
 8005c1a:	761a      	strb	r2, [r3, #24]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	e000e100 	.word	0xe000e100
 8005c2c:	e000ed00 	.word	0xe000ed00

08005c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b089      	sub	sp, #36	; 0x24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f1c3 0307 	rsb	r3, r3, #7
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	bf28      	it	cs
 8005c4e:	2304      	movcs	r3, #4
 8005c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	3304      	adds	r3, #4
 8005c56:	2b06      	cmp	r3, #6
 8005c58:	d902      	bls.n	8005c60 <NVIC_EncodePriority+0x30>
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	3b03      	subs	r3, #3
 8005c5e:	e000      	b.n	8005c62 <NVIC_EncodePriority+0x32>
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	43da      	mvns	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	401a      	ands	r2, r3
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c82:	43d9      	mvns	r1, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c88:	4313      	orrs	r3, r2
         );
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3724      	adds	r7, #36	; 0x24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
	...

08005c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ca8:	d301      	bcc.n	8005cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005caa:	2301      	movs	r3, #1
 8005cac:	e00f      	b.n	8005cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cae:	4a0a      	ldr	r2, [pc, #40]	; (8005cd8 <SysTick_Config+0x40>)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cb6:	210f      	movs	r1, #15
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cbc:	f7ff ff8e 	bl	8005bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <SysTick_Config+0x40>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cc6:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <SysTick_Config+0x40>)
 8005cc8:	2207      	movs	r2, #7
 8005cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	e000e010 	.word	0xe000e010

08005cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff ff29 	bl	8005b3c <__NVIC_SetPriorityGrouping>
}
 8005cea:	bf00      	nop
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b086      	sub	sp, #24
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
 8005cfe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d00:	f7ff ff40 	bl	8005b84 <__NVIC_GetPriorityGrouping>
 8005d04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	6978      	ldr	r0, [r7, #20]
 8005d0c:	f7ff ff90 	bl	8005c30 <NVIC_EncodePriority>
 8005d10:	4602      	mov	r2, r0
 8005d12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d16:	4611      	mov	r1, r2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff ff5f 	bl	8005bdc <__NVIC_SetPriority>
}
 8005d1e:	bf00      	nop
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff ff33 	bl	8005ba0 <__NVIC_EnableIRQ>
}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff ffa4 	bl	8005c98 <SysTick_Config>
 8005d50:	4603      	mov	r3, r0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d64:	f7ff fede 	bl	8005b24 <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e314      	b.n	800639e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a66      	ldr	r2, [pc, #408]	; (8005f14 <HAL_DMA_Init+0x1b8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d04a      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a65      	ldr	r2, [pc, #404]	; (8005f18 <HAL_DMA_Init+0x1bc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d045      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a63      	ldr	r2, [pc, #396]	; (8005f1c <HAL_DMA_Init+0x1c0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d040      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a62      	ldr	r2, [pc, #392]	; (8005f20 <HAL_DMA_Init+0x1c4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d03b      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a60      	ldr	r2, [pc, #384]	; (8005f24 <HAL_DMA_Init+0x1c8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d036      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a5f      	ldr	r2, [pc, #380]	; (8005f28 <HAL_DMA_Init+0x1cc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d031      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a5d      	ldr	r2, [pc, #372]	; (8005f2c <HAL_DMA_Init+0x1d0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d02c      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a5c      	ldr	r2, [pc, #368]	; (8005f30 <HAL_DMA_Init+0x1d4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d027      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a5a      	ldr	r2, [pc, #360]	; (8005f34 <HAL_DMA_Init+0x1d8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d022      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a59      	ldr	r2, [pc, #356]	; (8005f38 <HAL_DMA_Init+0x1dc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d01d      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a57      	ldr	r2, [pc, #348]	; (8005f3c <HAL_DMA_Init+0x1e0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d018      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a56      	ldr	r2, [pc, #344]	; (8005f40 <HAL_DMA_Init+0x1e4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d013      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a54      	ldr	r2, [pc, #336]	; (8005f44 <HAL_DMA_Init+0x1e8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00e      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a53      	ldr	r2, [pc, #332]	; (8005f48 <HAL_DMA_Init+0x1ec>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d009      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a51      	ldr	r2, [pc, #324]	; (8005f4c <HAL_DMA_Init+0x1f0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d004      	beq.n	8005e14 <HAL_DMA_Init+0xb8>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a50      	ldr	r2, [pc, #320]	; (8005f50 <HAL_DMA_Init+0x1f4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d101      	bne.n	8005e18 <HAL_DMA_Init+0xbc>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <HAL_DMA_Init+0xbe>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 813c 	beq.w	8006098 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a37      	ldr	r2, [pc, #220]	; (8005f14 <HAL_DMA_Init+0x1b8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d04a      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a36      	ldr	r2, [pc, #216]	; (8005f18 <HAL_DMA_Init+0x1bc>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d045      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a34      	ldr	r2, [pc, #208]	; (8005f1c <HAL_DMA_Init+0x1c0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d040      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a33      	ldr	r2, [pc, #204]	; (8005f20 <HAL_DMA_Init+0x1c4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d03b      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a31      	ldr	r2, [pc, #196]	; (8005f24 <HAL_DMA_Init+0x1c8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d036      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a30      	ldr	r2, [pc, #192]	; (8005f28 <HAL_DMA_Init+0x1cc>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d031      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a2e      	ldr	r2, [pc, #184]	; (8005f2c <HAL_DMA_Init+0x1d0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d02c      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a2d      	ldr	r2, [pc, #180]	; (8005f30 <HAL_DMA_Init+0x1d4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d027      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a2b      	ldr	r2, [pc, #172]	; (8005f34 <HAL_DMA_Init+0x1d8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d022      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a2a      	ldr	r2, [pc, #168]	; (8005f38 <HAL_DMA_Init+0x1dc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d01d      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a28      	ldr	r2, [pc, #160]	; (8005f3c <HAL_DMA_Init+0x1e0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d018      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a27      	ldr	r2, [pc, #156]	; (8005f40 <HAL_DMA_Init+0x1e4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d013      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a25      	ldr	r2, [pc, #148]	; (8005f44 <HAL_DMA_Init+0x1e8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00e      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a24      	ldr	r2, [pc, #144]	; (8005f48 <HAL_DMA_Init+0x1ec>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d009      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a22      	ldr	r2, [pc, #136]	; (8005f4c <HAL_DMA_Init+0x1f0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d004      	beq.n	8005ed0 <HAL_DMA_Init+0x174>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a21      	ldr	r2, [pc, #132]	; (8005f50 <HAL_DMA_Init+0x1f4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d108      	bne.n	8005ee2 <HAL_DMA_Init+0x186>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0201 	bic.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	e007      	b.n	8005ef2 <HAL_DMA_Init+0x196>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ef2:	e02f      	b.n	8005f54 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ef4:	f7ff fe16 	bl	8005b24 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d928      	bls.n	8005f54 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e244      	b.n	800639e <HAL_DMA_Init+0x642>
 8005f14:	40020010 	.word	0x40020010
 8005f18:	40020028 	.word	0x40020028
 8005f1c:	40020040 	.word	0x40020040
 8005f20:	40020058 	.word	0x40020058
 8005f24:	40020070 	.word	0x40020070
 8005f28:	40020088 	.word	0x40020088
 8005f2c:	400200a0 	.word	0x400200a0
 8005f30:	400200b8 	.word	0x400200b8
 8005f34:	40020410 	.word	0x40020410
 8005f38:	40020428 	.word	0x40020428
 8005f3c:	40020440 	.word	0x40020440
 8005f40:	40020458 	.word	0x40020458
 8005f44:	40020470 	.word	0x40020470
 8005f48:	40020488 	.word	0x40020488
 8005f4c:	400204a0 	.word	0x400204a0
 8005f50:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1c8      	bne.n	8005ef4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4b84      	ldr	r3, [pc, #528]	; (8006180 <HAL_DMA_Init+0x424>)
 8005f6e:	4013      	ands	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f86:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f92:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d107      	bne.n	8005fb8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b28      	cmp	r3, #40	; 0x28
 8005fbe:	d903      	bls.n	8005fc8 <HAL_DMA_Init+0x26c>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b2e      	cmp	r3, #46	; 0x2e
 8005fc6:	d91f      	bls.n	8006008 <HAL_DMA_Init+0x2ac>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b3e      	cmp	r3, #62	; 0x3e
 8005fce:	d903      	bls.n	8005fd8 <HAL_DMA_Init+0x27c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b42      	cmp	r3, #66	; 0x42
 8005fd6:	d917      	bls.n	8006008 <HAL_DMA_Init+0x2ac>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b46      	cmp	r3, #70	; 0x46
 8005fde:	d903      	bls.n	8005fe8 <HAL_DMA_Init+0x28c>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b48      	cmp	r3, #72	; 0x48
 8005fe6:	d90f      	bls.n	8006008 <HAL_DMA_Init+0x2ac>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b4e      	cmp	r3, #78	; 0x4e
 8005fee:	d903      	bls.n	8005ff8 <HAL_DMA_Init+0x29c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b52      	cmp	r3, #82	; 0x52
 8005ff6:	d907      	bls.n	8006008 <HAL_DMA_Init+0x2ac>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b73      	cmp	r3, #115	; 0x73
 8005ffe:	d905      	bls.n	800600c <HAL_DMA_Init+0x2b0>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b77      	cmp	r3, #119	; 0x77
 8006006:	d801      	bhi.n	800600c <HAL_DMA_Init+0x2b0>
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <HAL_DMA_Init+0x2b2>
 800600c:	2300      	movs	r3, #0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006018:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f023 0307 	bic.w	r3, r3, #7
 8006030:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	4313      	orrs	r3, r2
 800603a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	2b04      	cmp	r3, #4
 8006042:	d117      	bne.n	8006074 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00e      	beq.n	8006074 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f002 fb30 	bl	80086bc <DMA_CheckFifoParam>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2240      	movs	r2, #64	; 0x40
 8006066:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e194      	b.n	800639e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f002 fa6b 	bl	8008558 <DMA_CalcBaseAndBitshift>
 8006082:	4603      	mov	r3, r0
 8006084:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608a:	f003 031f 	and.w	r3, r3, #31
 800608e:	223f      	movs	r2, #63	; 0x3f
 8006090:	409a      	lsls	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	609a      	str	r2, [r3, #8]
 8006096:	e0ca      	b.n	800622e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a39      	ldr	r2, [pc, #228]	; (8006184 <HAL_DMA_Init+0x428>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d022      	beq.n	80060e8 <HAL_DMA_Init+0x38c>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a38      	ldr	r2, [pc, #224]	; (8006188 <HAL_DMA_Init+0x42c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d01d      	beq.n	80060e8 <HAL_DMA_Init+0x38c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a36      	ldr	r2, [pc, #216]	; (800618c <HAL_DMA_Init+0x430>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d018      	beq.n	80060e8 <HAL_DMA_Init+0x38c>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a35      	ldr	r2, [pc, #212]	; (8006190 <HAL_DMA_Init+0x434>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d013      	beq.n	80060e8 <HAL_DMA_Init+0x38c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a33      	ldr	r2, [pc, #204]	; (8006194 <HAL_DMA_Init+0x438>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00e      	beq.n	80060e8 <HAL_DMA_Init+0x38c>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a32      	ldr	r2, [pc, #200]	; (8006198 <HAL_DMA_Init+0x43c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d009      	beq.n	80060e8 <HAL_DMA_Init+0x38c>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a30      	ldr	r2, [pc, #192]	; (800619c <HAL_DMA_Init+0x440>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d004      	beq.n	80060e8 <HAL_DMA_Init+0x38c>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a2f      	ldr	r2, [pc, #188]	; (80061a0 <HAL_DMA_Init+0x444>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d101      	bne.n	80060ec <HAL_DMA_Init+0x390>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <HAL_DMA_Init+0x392>
 80060ec:	2300      	movs	r3, #0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 8094 	beq.w	800621c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a22      	ldr	r2, [pc, #136]	; (8006184 <HAL_DMA_Init+0x428>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d021      	beq.n	8006142 <HAL_DMA_Init+0x3e6>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a21      	ldr	r2, [pc, #132]	; (8006188 <HAL_DMA_Init+0x42c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d01c      	beq.n	8006142 <HAL_DMA_Init+0x3e6>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1f      	ldr	r2, [pc, #124]	; (800618c <HAL_DMA_Init+0x430>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d017      	beq.n	8006142 <HAL_DMA_Init+0x3e6>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1e      	ldr	r2, [pc, #120]	; (8006190 <HAL_DMA_Init+0x434>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d012      	beq.n	8006142 <HAL_DMA_Init+0x3e6>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1c      	ldr	r2, [pc, #112]	; (8006194 <HAL_DMA_Init+0x438>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00d      	beq.n	8006142 <HAL_DMA_Init+0x3e6>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1b      	ldr	r2, [pc, #108]	; (8006198 <HAL_DMA_Init+0x43c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d008      	beq.n	8006142 <HAL_DMA_Init+0x3e6>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a19      	ldr	r2, [pc, #100]	; (800619c <HAL_DMA_Init+0x440>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d003      	beq.n	8006142 <HAL_DMA_Init+0x3e6>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a18      	ldr	r2, [pc, #96]	; (80061a0 <HAL_DMA_Init+0x444>)
 8006140:	4293      	cmp	r3, r2
 8006142:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4b11      	ldr	r3, [pc, #68]	; (80061a4 <HAL_DMA_Init+0x448>)
 8006160:	4013      	ands	r3, r2
 8006162:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	2b40      	cmp	r3, #64	; 0x40
 800616a:	d01d      	beq.n	80061a8 <HAL_DMA_Init+0x44c>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	2b80      	cmp	r3, #128	; 0x80
 8006172:	d102      	bne.n	800617a <HAL_DMA_Init+0x41e>
 8006174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006178:	e017      	b.n	80061aa <HAL_DMA_Init+0x44e>
 800617a:	2300      	movs	r3, #0
 800617c:	e015      	b.n	80061aa <HAL_DMA_Init+0x44e>
 800617e:	bf00      	nop
 8006180:	fe10803f 	.word	0xfe10803f
 8006184:	58025408 	.word	0x58025408
 8006188:	5802541c 	.word	0x5802541c
 800618c:	58025430 	.word	0x58025430
 8006190:	58025444 	.word	0x58025444
 8006194:	58025458 	.word	0x58025458
 8006198:	5802546c 	.word	0x5802546c
 800619c:	58025480 	.word	0x58025480
 80061a0:	58025494 	.word	0x58025494
 80061a4:	fffe000f 	.word	0xfffe000f
 80061a8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	68d2      	ldr	r2, [r2, #12]
 80061ae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80061b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80061c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80061c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80061d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061d8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	4b6e      	ldr	r3, [pc, #440]	; (80063a8 <HAL_DMA_Init+0x64c>)
 80061f0:	4413      	add	r3, r2
 80061f2:	4a6e      	ldr	r2, [pc, #440]	; (80063ac <HAL_DMA_Init+0x650>)
 80061f4:	fba2 2303 	umull	r2, r3, r2, r3
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	009a      	lsls	r2, r3, #2
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f002 f9a9 	bl	8008558 <DMA_CalcBaseAndBitshift>
 8006206:	4603      	mov	r3, r0
 8006208:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	2201      	movs	r2, #1
 8006214:	409a      	lsls	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	605a      	str	r2, [r3, #4]
 800621a:	e008      	b.n	800622e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2240      	movs	r2, #64	; 0x40
 8006220:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2203      	movs	r2, #3
 8006226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e0b7      	b.n	800639e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a5f      	ldr	r2, [pc, #380]	; (80063b0 <HAL_DMA_Init+0x654>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d072      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a5d      	ldr	r2, [pc, #372]	; (80063b4 <HAL_DMA_Init+0x658>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d06d      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a5c      	ldr	r2, [pc, #368]	; (80063b8 <HAL_DMA_Init+0x65c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d068      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a5a      	ldr	r2, [pc, #360]	; (80063bc <HAL_DMA_Init+0x660>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d063      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a59      	ldr	r2, [pc, #356]	; (80063c0 <HAL_DMA_Init+0x664>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d05e      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a57      	ldr	r2, [pc, #348]	; (80063c4 <HAL_DMA_Init+0x668>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d059      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a56      	ldr	r2, [pc, #344]	; (80063c8 <HAL_DMA_Init+0x66c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d054      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a54      	ldr	r2, [pc, #336]	; (80063cc <HAL_DMA_Init+0x670>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d04f      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a53      	ldr	r2, [pc, #332]	; (80063d0 <HAL_DMA_Init+0x674>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d04a      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a51      	ldr	r2, [pc, #324]	; (80063d4 <HAL_DMA_Init+0x678>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d045      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a50      	ldr	r2, [pc, #320]	; (80063d8 <HAL_DMA_Init+0x67c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d040      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a4e      	ldr	r2, [pc, #312]	; (80063dc <HAL_DMA_Init+0x680>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d03b      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a4d      	ldr	r2, [pc, #308]	; (80063e0 <HAL_DMA_Init+0x684>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d036      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a4b      	ldr	r2, [pc, #300]	; (80063e4 <HAL_DMA_Init+0x688>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d031      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a4a      	ldr	r2, [pc, #296]	; (80063e8 <HAL_DMA_Init+0x68c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d02c      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a48      	ldr	r2, [pc, #288]	; (80063ec <HAL_DMA_Init+0x690>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d027      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a47      	ldr	r2, [pc, #284]	; (80063f0 <HAL_DMA_Init+0x694>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d022      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a45      	ldr	r2, [pc, #276]	; (80063f4 <HAL_DMA_Init+0x698>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d01d      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a44      	ldr	r2, [pc, #272]	; (80063f8 <HAL_DMA_Init+0x69c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d018      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a42      	ldr	r2, [pc, #264]	; (80063fc <HAL_DMA_Init+0x6a0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d013      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a41      	ldr	r2, [pc, #260]	; (8006400 <HAL_DMA_Init+0x6a4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00e      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a3f      	ldr	r2, [pc, #252]	; (8006404 <HAL_DMA_Init+0x6a8>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d009      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a3e      	ldr	r2, [pc, #248]	; (8006408 <HAL_DMA_Init+0x6ac>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d004      	beq.n	800631e <HAL_DMA_Init+0x5c2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a3c      	ldr	r2, [pc, #240]	; (800640c <HAL_DMA_Init+0x6b0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d101      	bne.n	8006322 <HAL_DMA_Init+0x5c6>
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <HAL_DMA_Init+0x5c8>
 8006322:	2300      	movs	r3, #0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d032      	beq.n	800638e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f002 fa43 	bl	80087b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2b80      	cmp	r3, #128	; 0x80
 8006334:	d102      	bne.n	800633c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006350:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d010      	beq.n	800637c <HAL_DMA_Init+0x620>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2b08      	cmp	r3, #8
 8006360:	d80c      	bhi.n	800637c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f002 fac0 	bl	80088e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006378:	605a      	str	r2, [r3, #4]
 800637a:	e008      	b.n	800638e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	a7fdabf8 	.word	0xa7fdabf8
 80063ac:	cccccccd 	.word	0xcccccccd
 80063b0:	40020010 	.word	0x40020010
 80063b4:	40020028 	.word	0x40020028
 80063b8:	40020040 	.word	0x40020040
 80063bc:	40020058 	.word	0x40020058
 80063c0:	40020070 	.word	0x40020070
 80063c4:	40020088 	.word	0x40020088
 80063c8:	400200a0 	.word	0x400200a0
 80063cc:	400200b8 	.word	0x400200b8
 80063d0:	40020410 	.word	0x40020410
 80063d4:	40020428 	.word	0x40020428
 80063d8:	40020440 	.word	0x40020440
 80063dc:	40020458 	.word	0x40020458
 80063e0:	40020470 	.word	0x40020470
 80063e4:	40020488 	.word	0x40020488
 80063e8:	400204a0 	.word	0x400204a0
 80063ec:	400204b8 	.word	0x400204b8
 80063f0:	58025408 	.word	0x58025408
 80063f4:	5802541c 	.word	0x5802541c
 80063f8:	58025430 	.word	0x58025430
 80063fc:	58025444 	.word	0x58025444
 8006400:	58025458 	.word	0x58025458
 8006404:	5802546c 	.word	0x5802546c
 8006408:	58025480 	.word	0x58025480
 800640c:	58025494 	.word	0x58025494

08006410 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e226      	b.n	800687a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_DMA_Start_IT+0x2a>
 8006436:	2302      	movs	r3, #2
 8006438:	e21f      	b.n	800687a <HAL_DMA_Start_IT+0x46a>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b01      	cmp	r3, #1
 800644c:	f040 820a 	bne.w	8006864 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a68      	ldr	r2, [pc, #416]	; (8006604 <HAL_DMA_Start_IT+0x1f4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d04a      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a66      	ldr	r2, [pc, #408]	; (8006608 <HAL_DMA_Start_IT+0x1f8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d045      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a65      	ldr	r2, [pc, #404]	; (800660c <HAL_DMA_Start_IT+0x1fc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d040      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a63      	ldr	r2, [pc, #396]	; (8006610 <HAL_DMA_Start_IT+0x200>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d03b      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a62      	ldr	r2, [pc, #392]	; (8006614 <HAL_DMA_Start_IT+0x204>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d036      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a60      	ldr	r2, [pc, #384]	; (8006618 <HAL_DMA_Start_IT+0x208>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d031      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a5f      	ldr	r2, [pc, #380]	; (800661c <HAL_DMA_Start_IT+0x20c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d02c      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a5d      	ldr	r2, [pc, #372]	; (8006620 <HAL_DMA_Start_IT+0x210>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d027      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a5c      	ldr	r2, [pc, #368]	; (8006624 <HAL_DMA_Start_IT+0x214>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d022      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a5a      	ldr	r2, [pc, #360]	; (8006628 <HAL_DMA_Start_IT+0x218>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d01d      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a59      	ldr	r2, [pc, #356]	; (800662c <HAL_DMA_Start_IT+0x21c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d018      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a57      	ldr	r2, [pc, #348]	; (8006630 <HAL_DMA_Start_IT+0x220>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a56      	ldr	r2, [pc, #344]	; (8006634 <HAL_DMA_Start_IT+0x224>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00e      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a54      	ldr	r2, [pc, #336]	; (8006638 <HAL_DMA_Start_IT+0x228>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d009      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a53      	ldr	r2, [pc, #332]	; (800663c <HAL_DMA_Start_IT+0x22c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d004      	beq.n	80064fe <HAL_DMA_Start_IT+0xee>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a51      	ldr	r2, [pc, #324]	; (8006640 <HAL_DMA_Start_IT+0x230>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d108      	bne.n	8006510 <HAL_DMA_Start_IT+0x100>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	e007      	b.n	8006520 <HAL_DMA_Start_IT+0x110>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0201 	bic.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f001 fe6a 	bl	8008200 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a34      	ldr	r2, [pc, #208]	; (8006604 <HAL_DMA_Start_IT+0x1f4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d04a      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a33      	ldr	r2, [pc, #204]	; (8006608 <HAL_DMA_Start_IT+0x1f8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d045      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a31      	ldr	r2, [pc, #196]	; (800660c <HAL_DMA_Start_IT+0x1fc>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d040      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a30      	ldr	r2, [pc, #192]	; (8006610 <HAL_DMA_Start_IT+0x200>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d03b      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a2e      	ldr	r2, [pc, #184]	; (8006614 <HAL_DMA_Start_IT+0x204>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d036      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a2d      	ldr	r2, [pc, #180]	; (8006618 <HAL_DMA_Start_IT+0x208>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d031      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a2b      	ldr	r2, [pc, #172]	; (800661c <HAL_DMA_Start_IT+0x20c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d02c      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a2a      	ldr	r2, [pc, #168]	; (8006620 <HAL_DMA_Start_IT+0x210>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d027      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a28      	ldr	r2, [pc, #160]	; (8006624 <HAL_DMA_Start_IT+0x214>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d022      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a27      	ldr	r2, [pc, #156]	; (8006628 <HAL_DMA_Start_IT+0x218>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d01d      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a25      	ldr	r2, [pc, #148]	; (800662c <HAL_DMA_Start_IT+0x21c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d018      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a24      	ldr	r2, [pc, #144]	; (8006630 <HAL_DMA_Start_IT+0x220>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d013      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a22      	ldr	r2, [pc, #136]	; (8006634 <HAL_DMA_Start_IT+0x224>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00e      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a21      	ldr	r2, [pc, #132]	; (8006638 <HAL_DMA_Start_IT+0x228>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d009      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1f      	ldr	r2, [pc, #124]	; (800663c <HAL_DMA_Start_IT+0x22c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d004      	beq.n	80065cc <HAL_DMA_Start_IT+0x1bc>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a1e      	ldr	r2, [pc, #120]	; (8006640 <HAL_DMA_Start_IT+0x230>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d101      	bne.n	80065d0 <HAL_DMA_Start_IT+0x1c0>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <HAL_DMA_Start_IT+0x1c2>
 80065d0:	2300      	movs	r3, #0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d036      	beq.n	8006644 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f023 021e 	bic.w	r2, r3, #30
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f042 0216 	orr.w	r2, r2, #22
 80065e8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d03e      	beq.n	8006670 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f042 0208 	orr.w	r2, r2, #8
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	e035      	b.n	8006670 <HAL_DMA_Start_IT+0x260>
 8006604:	40020010 	.word	0x40020010
 8006608:	40020028 	.word	0x40020028
 800660c:	40020040 	.word	0x40020040
 8006610:	40020058 	.word	0x40020058
 8006614:	40020070 	.word	0x40020070
 8006618:	40020088 	.word	0x40020088
 800661c:	400200a0 	.word	0x400200a0
 8006620:	400200b8 	.word	0x400200b8
 8006624:	40020410 	.word	0x40020410
 8006628:	40020428 	.word	0x40020428
 800662c:	40020440 	.word	0x40020440
 8006630:	40020458 	.word	0x40020458
 8006634:	40020470 	.word	0x40020470
 8006638:	40020488 	.word	0x40020488
 800663c:	400204a0 	.word	0x400204a0
 8006640:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f023 020e 	bic.w	r2, r3, #14
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 020a 	orr.w	r2, r2, #10
 8006656:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0204 	orr.w	r2, r2, #4
 800666e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a83      	ldr	r2, [pc, #524]	; (8006884 <HAL_DMA_Start_IT+0x474>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d072      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a82      	ldr	r2, [pc, #520]	; (8006888 <HAL_DMA_Start_IT+0x478>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d06d      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a80      	ldr	r2, [pc, #512]	; (800688c <HAL_DMA_Start_IT+0x47c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d068      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a7f      	ldr	r2, [pc, #508]	; (8006890 <HAL_DMA_Start_IT+0x480>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d063      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a7d      	ldr	r2, [pc, #500]	; (8006894 <HAL_DMA_Start_IT+0x484>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d05e      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a7c      	ldr	r2, [pc, #496]	; (8006898 <HAL_DMA_Start_IT+0x488>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d059      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a7a      	ldr	r2, [pc, #488]	; (800689c <HAL_DMA_Start_IT+0x48c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d054      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a79      	ldr	r2, [pc, #484]	; (80068a0 <HAL_DMA_Start_IT+0x490>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d04f      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a77      	ldr	r2, [pc, #476]	; (80068a4 <HAL_DMA_Start_IT+0x494>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d04a      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a76      	ldr	r2, [pc, #472]	; (80068a8 <HAL_DMA_Start_IT+0x498>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d045      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a74      	ldr	r2, [pc, #464]	; (80068ac <HAL_DMA_Start_IT+0x49c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d040      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a73      	ldr	r2, [pc, #460]	; (80068b0 <HAL_DMA_Start_IT+0x4a0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d03b      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a71      	ldr	r2, [pc, #452]	; (80068b4 <HAL_DMA_Start_IT+0x4a4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d036      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a70      	ldr	r2, [pc, #448]	; (80068b8 <HAL_DMA_Start_IT+0x4a8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d031      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a6e      	ldr	r2, [pc, #440]	; (80068bc <HAL_DMA_Start_IT+0x4ac>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d02c      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a6d      	ldr	r2, [pc, #436]	; (80068c0 <HAL_DMA_Start_IT+0x4b0>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d027      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a6b      	ldr	r2, [pc, #428]	; (80068c4 <HAL_DMA_Start_IT+0x4b4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d022      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a6a      	ldr	r2, [pc, #424]	; (80068c8 <HAL_DMA_Start_IT+0x4b8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d01d      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a68      	ldr	r2, [pc, #416]	; (80068cc <HAL_DMA_Start_IT+0x4bc>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d018      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a67      	ldr	r2, [pc, #412]	; (80068d0 <HAL_DMA_Start_IT+0x4c0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d013      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a65      	ldr	r2, [pc, #404]	; (80068d4 <HAL_DMA_Start_IT+0x4c4>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00e      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a64      	ldr	r2, [pc, #400]	; (80068d8 <HAL_DMA_Start_IT+0x4c8>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d009      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a62      	ldr	r2, [pc, #392]	; (80068dc <HAL_DMA_Start_IT+0x4cc>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d004      	beq.n	8006760 <HAL_DMA_Start_IT+0x350>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a61      	ldr	r2, [pc, #388]	; (80068e0 <HAL_DMA_Start_IT+0x4d0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d101      	bne.n	8006764 <HAL_DMA_Start_IT+0x354>
 8006760:	2301      	movs	r3, #1
 8006762:	e000      	b.n	8006766 <HAL_DMA_Start_IT+0x356>
 8006764:	2300      	movs	r3, #0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d01a      	beq.n	80067a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d007      	beq.n	8006788 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006786:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800679a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800679e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a37      	ldr	r2, [pc, #220]	; (8006884 <HAL_DMA_Start_IT+0x474>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d04a      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a36      	ldr	r2, [pc, #216]	; (8006888 <HAL_DMA_Start_IT+0x478>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d045      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a34      	ldr	r2, [pc, #208]	; (800688c <HAL_DMA_Start_IT+0x47c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d040      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a33      	ldr	r2, [pc, #204]	; (8006890 <HAL_DMA_Start_IT+0x480>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d03b      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a31      	ldr	r2, [pc, #196]	; (8006894 <HAL_DMA_Start_IT+0x484>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d036      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a30      	ldr	r2, [pc, #192]	; (8006898 <HAL_DMA_Start_IT+0x488>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d031      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a2e      	ldr	r2, [pc, #184]	; (800689c <HAL_DMA_Start_IT+0x48c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d02c      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a2d      	ldr	r2, [pc, #180]	; (80068a0 <HAL_DMA_Start_IT+0x490>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d027      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a2b      	ldr	r2, [pc, #172]	; (80068a4 <HAL_DMA_Start_IT+0x494>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d022      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a2a      	ldr	r2, [pc, #168]	; (80068a8 <HAL_DMA_Start_IT+0x498>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d01d      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a28      	ldr	r2, [pc, #160]	; (80068ac <HAL_DMA_Start_IT+0x49c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d018      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a27      	ldr	r2, [pc, #156]	; (80068b0 <HAL_DMA_Start_IT+0x4a0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d013      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a25      	ldr	r2, [pc, #148]	; (80068b4 <HAL_DMA_Start_IT+0x4a4>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00e      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a24      	ldr	r2, [pc, #144]	; (80068b8 <HAL_DMA_Start_IT+0x4a8>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d009      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a22      	ldr	r2, [pc, #136]	; (80068bc <HAL_DMA_Start_IT+0x4ac>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d004      	beq.n	8006840 <HAL_DMA_Start_IT+0x430>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a21      	ldr	r2, [pc, #132]	; (80068c0 <HAL_DMA_Start_IT+0x4b0>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d108      	bne.n	8006852 <HAL_DMA_Start_IT+0x442>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0201 	orr.w	r2, r2, #1
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	e012      	b.n	8006878 <HAL_DMA_Start_IT+0x468>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f042 0201 	orr.w	r2, r2, #1
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	e009      	b.n	8006878 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800686a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006878:	7dfb      	ldrb	r3, [r7, #23]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	40020010 	.word	0x40020010
 8006888:	40020028 	.word	0x40020028
 800688c:	40020040 	.word	0x40020040
 8006890:	40020058 	.word	0x40020058
 8006894:	40020070 	.word	0x40020070
 8006898:	40020088 	.word	0x40020088
 800689c:	400200a0 	.word	0x400200a0
 80068a0:	400200b8 	.word	0x400200b8
 80068a4:	40020410 	.word	0x40020410
 80068a8:	40020428 	.word	0x40020428
 80068ac:	40020440 	.word	0x40020440
 80068b0:	40020458 	.word	0x40020458
 80068b4:	40020470 	.word	0x40020470
 80068b8:	40020488 	.word	0x40020488
 80068bc:	400204a0 	.word	0x400204a0
 80068c0:	400204b8 	.word	0x400204b8
 80068c4:	58025408 	.word	0x58025408
 80068c8:	5802541c 	.word	0x5802541c
 80068cc:	58025430 	.word	0x58025430
 80068d0:	58025444 	.word	0x58025444
 80068d4:	58025458 	.word	0x58025458
 80068d8:	5802546c 	.word	0x5802546c
 80068dc:	58025480 	.word	0x58025480
 80068e0:	58025494 	.word	0x58025494

080068e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80068ec:	f7ff f91a 	bl	8005b24 <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e2dc      	b.n	8006eb6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d008      	beq.n	800691a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2280      	movs	r2, #128	; 0x80
 800690c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e2cd      	b.n	8006eb6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a76      	ldr	r2, [pc, #472]	; (8006af8 <HAL_DMA_Abort+0x214>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d04a      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a74      	ldr	r2, [pc, #464]	; (8006afc <HAL_DMA_Abort+0x218>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d045      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a73      	ldr	r2, [pc, #460]	; (8006b00 <HAL_DMA_Abort+0x21c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d040      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a71      	ldr	r2, [pc, #452]	; (8006b04 <HAL_DMA_Abort+0x220>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d03b      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a70      	ldr	r2, [pc, #448]	; (8006b08 <HAL_DMA_Abort+0x224>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d036      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a6e      	ldr	r2, [pc, #440]	; (8006b0c <HAL_DMA_Abort+0x228>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d031      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a6d      	ldr	r2, [pc, #436]	; (8006b10 <HAL_DMA_Abort+0x22c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d02c      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a6b      	ldr	r2, [pc, #428]	; (8006b14 <HAL_DMA_Abort+0x230>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d027      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a6a      	ldr	r2, [pc, #424]	; (8006b18 <HAL_DMA_Abort+0x234>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d022      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a68      	ldr	r2, [pc, #416]	; (8006b1c <HAL_DMA_Abort+0x238>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d01d      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a67      	ldr	r2, [pc, #412]	; (8006b20 <HAL_DMA_Abort+0x23c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d018      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a65      	ldr	r2, [pc, #404]	; (8006b24 <HAL_DMA_Abort+0x240>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d013      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a64      	ldr	r2, [pc, #400]	; (8006b28 <HAL_DMA_Abort+0x244>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00e      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a62      	ldr	r2, [pc, #392]	; (8006b2c <HAL_DMA_Abort+0x248>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d009      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a61      	ldr	r2, [pc, #388]	; (8006b30 <HAL_DMA_Abort+0x24c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d004      	beq.n	80069ba <HAL_DMA_Abort+0xd6>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a5f      	ldr	r2, [pc, #380]	; (8006b34 <HAL_DMA_Abort+0x250>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d101      	bne.n	80069be <HAL_DMA_Abort+0xda>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <HAL_DMA_Abort+0xdc>
 80069be:	2300      	movs	r3, #0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d013      	beq.n	80069ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 021e 	bic.w	r2, r2, #30
 80069d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695a      	ldr	r2, [r3, #20]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	617b      	str	r3, [r7, #20]
 80069ea:	e00a      	b.n	8006a02 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 020e 	bic.w	r2, r2, #14
 80069fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a3c      	ldr	r2, [pc, #240]	; (8006af8 <HAL_DMA_Abort+0x214>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d072      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a3a      	ldr	r2, [pc, #232]	; (8006afc <HAL_DMA_Abort+0x218>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d06d      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a39      	ldr	r2, [pc, #228]	; (8006b00 <HAL_DMA_Abort+0x21c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d068      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a37      	ldr	r2, [pc, #220]	; (8006b04 <HAL_DMA_Abort+0x220>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d063      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a36      	ldr	r2, [pc, #216]	; (8006b08 <HAL_DMA_Abort+0x224>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d05e      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a34      	ldr	r2, [pc, #208]	; (8006b0c <HAL_DMA_Abort+0x228>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d059      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a33      	ldr	r2, [pc, #204]	; (8006b10 <HAL_DMA_Abort+0x22c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d054      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a31      	ldr	r2, [pc, #196]	; (8006b14 <HAL_DMA_Abort+0x230>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d04f      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a30      	ldr	r2, [pc, #192]	; (8006b18 <HAL_DMA_Abort+0x234>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d04a      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a2e      	ldr	r2, [pc, #184]	; (8006b1c <HAL_DMA_Abort+0x238>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d045      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a2d      	ldr	r2, [pc, #180]	; (8006b20 <HAL_DMA_Abort+0x23c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d040      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a2b      	ldr	r2, [pc, #172]	; (8006b24 <HAL_DMA_Abort+0x240>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d03b      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a2a      	ldr	r2, [pc, #168]	; (8006b28 <HAL_DMA_Abort+0x244>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d036      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a28      	ldr	r2, [pc, #160]	; (8006b2c <HAL_DMA_Abort+0x248>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d031      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a27      	ldr	r2, [pc, #156]	; (8006b30 <HAL_DMA_Abort+0x24c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d02c      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a25      	ldr	r2, [pc, #148]	; (8006b34 <HAL_DMA_Abort+0x250>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d027      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a24      	ldr	r2, [pc, #144]	; (8006b38 <HAL_DMA_Abort+0x254>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d022      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a22      	ldr	r2, [pc, #136]	; (8006b3c <HAL_DMA_Abort+0x258>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d01d      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a21      	ldr	r2, [pc, #132]	; (8006b40 <HAL_DMA_Abort+0x25c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d018      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a1f      	ldr	r2, [pc, #124]	; (8006b44 <HAL_DMA_Abort+0x260>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d013      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a1e      	ldr	r2, [pc, #120]	; (8006b48 <HAL_DMA_Abort+0x264>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00e      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a1c      	ldr	r2, [pc, #112]	; (8006b4c <HAL_DMA_Abort+0x268>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d009      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a1b      	ldr	r2, [pc, #108]	; (8006b50 <HAL_DMA_Abort+0x26c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d004      	beq.n	8006af2 <HAL_DMA_Abort+0x20e>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a19      	ldr	r2, [pc, #100]	; (8006b54 <HAL_DMA_Abort+0x270>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d132      	bne.n	8006b58 <HAL_DMA_Abort+0x274>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e031      	b.n	8006b5a <HAL_DMA_Abort+0x276>
 8006af6:	bf00      	nop
 8006af8:	40020010 	.word	0x40020010
 8006afc:	40020028 	.word	0x40020028
 8006b00:	40020040 	.word	0x40020040
 8006b04:	40020058 	.word	0x40020058
 8006b08:	40020070 	.word	0x40020070
 8006b0c:	40020088 	.word	0x40020088
 8006b10:	400200a0 	.word	0x400200a0
 8006b14:	400200b8 	.word	0x400200b8
 8006b18:	40020410 	.word	0x40020410
 8006b1c:	40020428 	.word	0x40020428
 8006b20:	40020440 	.word	0x40020440
 8006b24:	40020458 	.word	0x40020458
 8006b28:	40020470 	.word	0x40020470
 8006b2c:	40020488 	.word	0x40020488
 8006b30:	400204a0 	.word	0x400204a0
 8006b34:	400204b8 	.word	0x400204b8
 8006b38:	58025408 	.word	0x58025408
 8006b3c:	5802541c 	.word	0x5802541c
 8006b40:	58025430 	.word	0x58025430
 8006b44:	58025444 	.word	0x58025444
 8006b48:	58025458 	.word	0x58025458
 8006b4c:	5802546c 	.word	0x5802546c
 8006b50:	58025480 	.word	0x58025480
 8006b54:	58025494 	.word	0x58025494
 8006b58:	2300      	movs	r3, #0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a6d      	ldr	r2, [pc, #436]	; (8006d28 <HAL_DMA_Abort+0x444>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d04a      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a6b      	ldr	r2, [pc, #428]	; (8006d2c <HAL_DMA_Abort+0x448>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d045      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a6a      	ldr	r2, [pc, #424]	; (8006d30 <HAL_DMA_Abort+0x44c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d040      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a68      	ldr	r2, [pc, #416]	; (8006d34 <HAL_DMA_Abort+0x450>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d03b      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a67      	ldr	r2, [pc, #412]	; (8006d38 <HAL_DMA_Abort+0x454>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d036      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a65      	ldr	r2, [pc, #404]	; (8006d3c <HAL_DMA_Abort+0x458>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d031      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a64      	ldr	r2, [pc, #400]	; (8006d40 <HAL_DMA_Abort+0x45c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d02c      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a62      	ldr	r2, [pc, #392]	; (8006d44 <HAL_DMA_Abort+0x460>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d027      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a61      	ldr	r2, [pc, #388]	; (8006d48 <HAL_DMA_Abort+0x464>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d022      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a5f      	ldr	r2, [pc, #380]	; (8006d4c <HAL_DMA_Abort+0x468>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d01d      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a5e      	ldr	r2, [pc, #376]	; (8006d50 <HAL_DMA_Abort+0x46c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d018      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a5c      	ldr	r2, [pc, #368]	; (8006d54 <HAL_DMA_Abort+0x470>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d013      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a5b      	ldr	r2, [pc, #364]	; (8006d58 <HAL_DMA_Abort+0x474>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00e      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a59      	ldr	r2, [pc, #356]	; (8006d5c <HAL_DMA_Abort+0x478>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d009      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a58      	ldr	r2, [pc, #352]	; (8006d60 <HAL_DMA_Abort+0x47c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d004      	beq.n	8006c0e <HAL_DMA_Abort+0x32a>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a56      	ldr	r2, [pc, #344]	; (8006d64 <HAL_DMA_Abort+0x480>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d108      	bne.n	8006c20 <HAL_DMA_Abort+0x33c>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0201 	bic.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	e007      	b.n	8006c30 <HAL_DMA_Abort+0x34c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0201 	bic.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c30:	e013      	b.n	8006c5a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c32:	f7fe ff77 	bl	8005b24 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b05      	cmp	r3, #5
 8006c3e:	d90c      	bls.n	8006c5a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2203      	movs	r2, #3
 8006c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e12d      	b.n	8006eb6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e5      	bne.n	8006c32 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a2f      	ldr	r2, [pc, #188]	; (8006d28 <HAL_DMA_Abort+0x444>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d04a      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a2d      	ldr	r2, [pc, #180]	; (8006d2c <HAL_DMA_Abort+0x448>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d045      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a2c      	ldr	r2, [pc, #176]	; (8006d30 <HAL_DMA_Abort+0x44c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d040      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a2a      	ldr	r2, [pc, #168]	; (8006d34 <HAL_DMA_Abort+0x450>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d03b      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a29      	ldr	r2, [pc, #164]	; (8006d38 <HAL_DMA_Abort+0x454>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d036      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a27      	ldr	r2, [pc, #156]	; (8006d3c <HAL_DMA_Abort+0x458>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d031      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a26      	ldr	r2, [pc, #152]	; (8006d40 <HAL_DMA_Abort+0x45c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d02c      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a24      	ldr	r2, [pc, #144]	; (8006d44 <HAL_DMA_Abort+0x460>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d027      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a23      	ldr	r2, [pc, #140]	; (8006d48 <HAL_DMA_Abort+0x464>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d022      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a21      	ldr	r2, [pc, #132]	; (8006d4c <HAL_DMA_Abort+0x468>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d01d      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a20      	ldr	r2, [pc, #128]	; (8006d50 <HAL_DMA_Abort+0x46c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d018      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a1e      	ldr	r2, [pc, #120]	; (8006d54 <HAL_DMA_Abort+0x470>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d013      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1d      	ldr	r2, [pc, #116]	; (8006d58 <HAL_DMA_Abort+0x474>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00e      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1b      	ldr	r2, [pc, #108]	; (8006d5c <HAL_DMA_Abort+0x478>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d009      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a1a      	ldr	r2, [pc, #104]	; (8006d60 <HAL_DMA_Abort+0x47c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <HAL_DMA_Abort+0x422>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a18      	ldr	r2, [pc, #96]	; (8006d64 <HAL_DMA_Abort+0x480>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d101      	bne.n	8006d0a <HAL_DMA_Abort+0x426>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <HAL_DMA_Abort+0x428>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d02b      	beq.n	8006d68 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d14:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1a:	f003 031f 	and.w	r3, r3, #31
 8006d1e:	223f      	movs	r2, #63	; 0x3f
 8006d20:	409a      	lsls	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	609a      	str	r2, [r3, #8]
 8006d26:	e02a      	b.n	8006d7e <HAL_DMA_Abort+0x49a>
 8006d28:	40020010 	.word	0x40020010
 8006d2c:	40020028 	.word	0x40020028
 8006d30:	40020040 	.word	0x40020040
 8006d34:	40020058 	.word	0x40020058
 8006d38:	40020070 	.word	0x40020070
 8006d3c:	40020088 	.word	0x40020088
 8006d40:	400200a0 	.word	0x400200a0
 8006d44:	400200b8 	.word	0x400200b8
 8006d48:	40020410 	.word	0x40020410
 8006d4c:	40020428 	.word	0x40020428
 8006d50:	40020440 	.word	0x40020440
 8006d54:	40020458 	.word	0x40020458
 8006d58:	40020470 	.word	0x40020470
 8006d5c:	40020488 	.word	0x40020488
 8006d60:	400204a0 	.word	0x400204a0
 8006d64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d72:	f003 031f 	and.w	r3, r3, #31
 8006d76:	2201      	movs	r2, #1
 8006d78:	409a      	lsls	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a4f      	ldr	r2, [pc, #316]	; (8006ec0 <HAL_DMA_Abort+0x5dc>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d072      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a4d      	ldr	r2, [pc, #308]	; (8006ec4 <HAL_DMA_Abort+0x5e0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d06d      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a4c      	ldr	r2, [pc, #304]	; (8006ec8 <HAL_DMA_Abort+0x5e4>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d068      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a4a      	ldr	r2, [pc, #296]	; (8006ecc <HAL_DMA_Abort+0x5e8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d063      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a49      	ldr	r2, [pc, #292]	; (8006ed0 <HAL_DMA_Abort+0x5ec>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d05e      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a47      	ldr	r2, [pc, #284]	; (8006ed4 <HAL_DMA_Abort+0x5f0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d059      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a46      	ldr	r2, [pc, #280]	; (8006ed8 <HAL_DMA_Abort+0x5f4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d054      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a44      	ldr	r2, [pc, #272]	; (8006edc <HAL_DMA_Abort+0x5f8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d04f      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a43      	ldr	r2, [pc, #268]	; (8006ee0 <HAL_DMA_Abort+0x5fc>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d04a      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a41      	ldr	r2, [pc, #260]	; (8006ee4 <HAL_DMA_Abort+0x600>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d045      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a40      	ldr	r2, [pc, #256]	; (8006ee8 <HAL_DMA_Abort+0x604>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d040      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a3e      	ldr	r2, [pc, #248]	; (8006eec <HAL_DMA_Abort+0x608>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d03b      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a3d      	ldr	r2, [pc, #244]	; (8006ef0 <HAL_DMA_Abort+0x60c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d036      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a3b      	ldr	r2, [pc, #236]	; (8006ef4 <HAL_DMA_Abort+0x610>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d031      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a3a      	ldr	r2, [pc, #232]	; (8006ef8 <HAL_DMA_Abort+0x614>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d02c      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a38      	ldr	r2, [pc, #224]	; (8006efc <HAL_DMA_Abort+0x618>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d027      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a37      	ldr	r2, [pc, #220]	; (8006f00 <HAL_DMA_Abort+0x61c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d022      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a35      	ldr	r2, [pc, #212]	; (8006f04 <HAL_DMA_Abort+0x620>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d01d      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a34      	ldr	r2, [pc, #208]	; (8006f08 <HAL_DMA_Abort+0x624>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d018      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a32      	ldr	r2, [pc, #200]	; (8006f0c <HAL_DMA_Abort+0x628>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d013      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a31      	ldr	r2, [pc, #196]	; (8006f10 <HAL_DMA_Abort+0x62c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00e      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a2f      	ldr	r2, [pc, #188]	; (8006f14 <HAL_DMA_Abort+0x630>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d009      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a2e      	ldr	r2, [pc, #184]	; (8006f18 <HAL_DMA_Abort+0x634>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d004      	beq.n	8006e6e <HAL_DMA_Abort+0x58a>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a2c      	ldr	r2, [pc, #176]	; (8006f1c <HAL_DMA_Abort+0x638>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d101      	bne.n	8006e72 <HAL_DMA_Abort+0x58e>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <HAL_DMA_Abort+0x590>
 8006e72:	2300      	movs	r3, #0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d015      	beq.n	8006ea4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e80:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00c      	beq.n	8006ea4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e98:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ea2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40020010 	.word	0x40020010
 8006ec4:	40020028 	.word	0x40020028
 8006ec8:	40020040 	.word	0x40020040
 8006ecc:	40020058 	.word	0x40020058
 8006ed0:	40020070 	.word	0x40020070
 8006ed4:	40020088 	.word	0x40020088
 8006ed8:	400200a0 	.word	0x400200a0
 8006edc:	400200b8 	.word	0x400200b8
 8006ee0:	40020410 	.word	0x40020410
 8006ee4:	40020428 	.word	0x40020428
 8006ee8:	40020440 	.word	0x40020440
 8006eec:	40020458 	.word	0x40020458
 8006ef0:	40020470 	.word	0x40020470
 8006ef4:	40020488 	.word	0x40020488
 8006ef8:	400204a0 	.word	0x400204a0
 8006efc:	400204b8 	.word	0x400204b8
 8006f00:	58025408 	.word	0x58025408
 8006f04:	5802541c 	.word	0x5802541c
 8006f08:	58025430 	.word	0x58025430
 8006f0c:	58025444 	.word	0x58025444
 8006f10:	58025458 	.word	0x58025458
 8006f14:	5802546c 	.word	0x5802546c
 8006f18:	58025480 	.word	0x58025480
 8006f1c:	58025494 	.word	0x58025494

08006f20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e237      	b.n	80073a2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d004      	beq.n	8006f48 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2280      	movs	r2, #128	; 0x80
 8006f42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e22c      	b.n	80073a2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a5c      	ldr	r2, [pc, #368]	; (80070c0 <HAL_DMA_Abort_IT+0x1a0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d04a      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a5b      	ldr	r2, [pc, #364]	; (80070c4 <HAL_DMA_Abort_IT+0x1a4>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d045      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a59      	ldr	r2, [pc, #356]	; (80070c8 <HAL_DMA_Abort_IT+0x1a8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d040      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a58      	ldr	r2, [pc, #352]	; (80070cc <HAL_DMA_Abort_IT+0x1ac>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d03b      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a56      	ldr	r2, [pc, #344]	; (80070d0 <HAL_DMA_Abort_IT+0x1b0>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d036      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a55      	ldr	r2, [pc, #340]	; (80070d4 <HAL_DMA_Abort_IT+0x1b4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d031      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a53      	ldr	r2, [pc, #332]	; (80070d8 <HAL_DMA_Abort_IT+0x1b8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d02c      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a52      	ldr	r2, [pc, #328]	; (80070dc <HAL_DMA_Abort_IT+0x1bc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d027      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a50      	ldr	r2, [pc, #320]	; (80070e0 <HAL_DMA_Abort_IT+0x1c0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d022      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a4f      	ldr	r2, [pc, #316]	; (80070e4 <HAL_DMA_Abort_IT+0x1c4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d01d      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a4d      	ldr	r2, [pc, #308]	; (80070e8 <HAL_DMA_Abort_IT+0x1c8>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d018      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a4c      	ldr	r2, [pc, #304]	; (80070ec <HAL_DMA_Abort_IT+0x1cc>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d013      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a4a      	ldr	r2, [pc, #296]	; (80070f0 <HAL_DMA_Abort_IT+0x1d0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00e      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a49      	ldr	r2, [pc, #292]	; (80070f4 <HAL_DMA_Abort_IT+0x1d4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d009      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a47      	ldr	r2, [pc, #284]	; (80070f8 <HAL_DMA_Abort_IT+0x1d8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d004      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a46      	ldr	r2, [pc, #280]	; (80070fc <HAL_DMA_Abort_IT+0x1dc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d101      	bne.n	8006fec <HAL_DMA_Abort_IT+0xcc>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <HAL_DMA_Abort_IT+0xce>
 8006fec:	2300      	movs	r3, #0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 8086 	beq.w	8007100 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a2f      	ldr	r2, [pc, #188]	; (80070c0 <HAL_DMA_Abort_IT+0x1a0>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d04a      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a2e      	ldr	r2, [pc, #184]	; (80070c4 <HAL_DMA_Abort_IT+0x1a4>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d045      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a2c      	ldr	r2, [pc, #176]	; (80070c8 <HAL_DMA_Abort_IT+0x1a8>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d040      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a2b      	ldr	r2, [pc, #172]	; (80070cc <HAL_DMA_Abort_IT+0x1ac>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d03b      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a29      	ldr	r2, [pc, #164]	; (80070d0 <HAL_DMA_Abort_IT+0x1b0>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d036      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a28      	ldr	r2, [pc, #160]	; (80070d4 <HAL_DMA_Abort_IT+0x1b4>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d031      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a26      	ldr	r2, [pc, #152]	; (80070d8 <HAL_DMA_Abort_IT+0x1b8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d02c      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a25      	ldr	r2, [pc, #148]	; (80070dc <HAL_DMA_Abort_IT+0x1bc>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d027      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a23      	ldr	r2, [pc, #140]	; (80070e0 <HAL_DMA_Abort_IT+0x1c0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d022      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a22      	ldr	r2, [pc, #136]	; (80070e4 <HAL_DMA_Abort_IT+0x1c4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d01d      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a20      	ldr	r2, [pc, #128]	; (80070e8 <HAL_DMA_Abort_IT+0x1c8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d018      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a1f      	ldr	r2, [pc, #124]	; (80070ec <HAL_DMA_Abort_IT+0x1cc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d013      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a1d      	ldr	r2, [pc, #116]	; (80070f0 <HAL_DMA_Abort_IT+0x1d0>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00e      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a1c      	ldr	r2, [pc, #112]	; (80070f4 <HAL_DMA_Abort_IT+0x1d4>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d009      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a1a      	ldr	r2, [pc, #104]	; (80070f8 <HAL_DMA_Abort_IT+0x1d8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d004      	beq.n	800709c <HAL_DMA_Abort_IT+0x17c>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a19      	ldr	r2, [pc, #100]	; (80070fc <HAL_DMA_Abort_IT+0x1dc>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d108      	bne.n	80070ae <HAL_DMA_Abort_IT+0x18e>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0201 	bic.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	e178      	b.n	80073a0 <HAL_DMA_Abort_IT+0x480>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0201 	bic.w	r2, r2, #1
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e16f      	b.n	80073a0 <HAL_DMA_Abort_IT+0x480>
 80070c0:	40020010 	.word	0x40020010
 80070c4:	40020028 	.word	0x40020028
 80070c8:	40020040 	.word	0x40020040
 80070cc:	40020058 	.word	0x40020058
 80070d0:	40020070 	.word	0x40020070
 80070d4:	40020088 	.word	0x40020088
 80070d8:	400200a0 	.word	0x400200a0
 80070dc:	400200b8 	.word	0x400200b8
 80070e0:	40020410 	.word	0x40020410
 80070e4:	40020428 	.word	0x40020428
 80070e8:	40020440 	.word	0x40020440
 80070ec:	40020458 	.word	0x40020458
 80070f0:	40020470 	.word	0x40020470
 80070f4:	40020488 	.word	0x40020488
 80070f8:	400204a0 	.word	0x400204a0
 80070fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 020e 	bic.w	r2, r2, #14
 800710e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a6c      	ldr	r2, [pc, #432]	; (80072c8 <HAL_DMA_Abort_IT+0x3a8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d04a      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a6b      	ldr	r2, [pc, #428]	; (80072cc <HAL_DMA_Abort_IT+0x3ac>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d045      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a69      	ldr	r2, [pc, #420]	; (80072d0 <HAL_DMA_Abort_IT+0x3b0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d040      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a68      	ldr	r2, [pc, #416]	; (80072d4 <HAL_DMA_Abort_IT+0x3b4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d03b      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a66      	ldr	r2, [pc, #408]	; (80072d8 <HAL_DMA_Abort_IT+0x3b8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d036      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a65      	ldr	r2, [pc, #404]	; (80072dc <HAL_DMA_Abort_IT+0x3bc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d031      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a63      	ldr	r2, [pc, #396]	; (80072e0 <HAL_DMA_Abort_IT+0x3c0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d02c      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a62      	ldr	r2, [pc, #392]	; (80072e4 <HAL_DMA_Abort_IT+0x3c4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d027      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a60      	ldr	r2, [pc, #384]	; (80072e8 <HAL_DMA_Abort_IT+0x3c8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d022      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a5f      	ldr	r2, [pc, #380]	; (80072ec <HAL_DMA_Abort_IT+0x3cc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d01d      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a5d      	ldr	r2, [pc, #372]	; (80072f0 <HAL_DMA_Abort_IT+0x3d0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d018      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a5c      	ldr	r2, [pc, #368]	; (80072f4 <HAL_DMA_Abort_IT+0x3d4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d013      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a5a      	ldr	r2, [pc, #360]	; (80072f8 <HAL_DMA_Abort_IT+0x3d8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00e      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a59      	ldr	r2, [pc, #356]	; (80072fc <HAL_DMA_Abort_IT+0x3dc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d009      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a57      	ldr	r2, [pc, #348]	; (8007300 <HAL_DMA_Abort_IT+0x3e0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d004      	beq.n	80071b0 <HAL_DMA_Abort_IT+0x290>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a56      	ldr	r2, [pc, #344]	; (8007304 <HAL_DMA_Abort_IT+0x3e4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d108      	bne.n	80071c2 <HAL_DMA_Abort_IT+0x2a2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0201 	bic.w	r2, r2, #1
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	e007      	b.n	80071d2 <HAL_DMA_Abort_IT+0x2b2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0201 	bic.w	r2, r2, #1
 80071d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a3c      	ldr	r2, [pc, #240]	; (80072c8 <HAL_DMA_Abort_IT+0x3a8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d072      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a3a      	ldr	r2, [pc, #232]	; (80072cc <HAL_DMA_Abort_IT+0x3ac>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d06d      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a39      	ldr	r2, [pc, #228]	; (80072d0 <HAL_DMA_Abort_IT+0x3b0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d068      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a37      	ldr	r2, [pc, #220]	; (80072d4 <HAL_DMA_Abort_IT+0x3b4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d063      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a36      	ldr	r2, [pc, #216]	; (80072d8 <HAL_DMA_Abort_IT+0x3b8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d05e      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a34      	ldr	r2, [pc, #208]	; (80072dc <HAL_DMA_Abort_IT+0x3bc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d059      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a33      	ldr	r2, [pc, #204]	; (80072e0 <HAL_DMA_Abort_IT+0x3c0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d054      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a31      	ldr	r2, [pc, #196]	; (80072e4 <HAL_DMA_Abort_IT+0x3c4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d04f      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a30      	ldr	r2, [pc, #192]	; (80072e8 <HAL_DMA_Abort_IT+0x3c8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d04a      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a2e      	ldr	r2, [pc, #184]	; (80072ec <HAL_DMA_Abort_IT+0x3cc>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d045      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a2d      	ldr	r2, [pc, #180]	; (80072f0 <HAL_DMA_Abort_IT+0x3d0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d040      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a2b      	ldr	r2, [pc, #172]	; (80072f4 <HAL_DMA_Abort_IT+0x3d4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d03b      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a2a      	ldr	r2, [pc, #168]	; (80072f8 <HAL_DMA_Abort_IT+0x3d8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d036      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a28      	ldr	r2, [pc, #160]	; (80072fc <HAL_DMA_Abort_IT+0x3dc>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d031      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a27      	ldr	r2, [pc, #156]	; (8007300 <HAL_DMA_Abort_IT+0x3e0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d02c      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a25      	ldr	r2, [pc, #148]	; (8007304 <HAL_DMA_Abort_IT+0x3e4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d027      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a24      	ldr	r2, [pc, #144]	; (8007308 <HAL_DMA_Abort_IT+0x3e8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d022      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a22      	ldr	r2, [pc, #136]	; (800730c <HAL_DMA_Abort_IT+0x3ec>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d01d      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a21      	ldr	r2, [pc, #132]	; (8007310 <HAL_DMA_Abort_IT+0x3f0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d018      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1f      	ldr	r2, [pc, #124]	; (8007314 <HAL_DMA_Abort_IT+0x3f4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d013      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1e      	ldr	r2, [pc, #120]	; (8007318 <HAL_DMA_Abort_IT+0x3f8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00e      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a1c      	ldr	r2, [pc, #112]	; (800731c <HAL_DMA_Abort_IT+0x3fc>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d009      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1b      	ldr	r2, [pc, #108]	; (8007320 <HAL_DMA_Abort_IT+0x400>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d004      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x3a2>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a19      	ldr	r2, [pc, #100]	; (8007324 <HAL_DMA_Abort_IT+0x404>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d132      	bne.n	8007328 <HAL_DMA_Abort_IT+0x408>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e031      	b.n	800732a <HAL_DMA_Abort_IT+0x40a>
 80072c6:	bf00      	nop
 80072c8:	40020010 	.word	0x40020010
 80072cc:	40020028 	.word	0x40020028
 80072d0:	40020040 	.word	0x40020040
 80072d4:	40020058 	.word	0x40020058
 80072d8:	40020070 	.word	0x40020070
 80072dc:	40020088 	.word	0x40020088
 80072e0:	400200a0 	.word	0x400200a0
 80072e4:	400200b8 	.word	0x400200b8
 80072e8:	40020410 	.word	0x40020410
 80072ec:	40020428 	.word	0x40020428
 80072f0:	40020440 	.word	0x40020440
 80072f4:	40020458 	.word	0x40020458
 80072f8:	40020470 	.word	0x40020470
 80072fc:	40020488 	.word	0x40020488
 8007300:	400204a0 	.word	0x400204a0
 8007304:	400204b8 	.word	0x400204b8
 8007308:	58025408 	.word	0x58025408
 800730c:	5802541c 	.word	0x5802541c
 8007310:	58025430 	.word	0x58025430
 8007314:	58025444 	.word	0x58025444
 8007318:	58025458 	.word	0x58025458
 800731c:	5802546c 	.word	0x5802546c
 8007320:	58025480 	.word	0x58025480
 8007324:	58025494 	.word	0x58025494
 8007328:	2300      	movs	r3, #0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d028      	beq.n	8007380 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800733c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007342:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007348:	f003 031f 	and.w	r3, r3, #31
 800734c:	2201      	movs	r2, #1
 800734e:	409a      	lsls	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800735c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00c      	beq.n	8007380 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007374:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800737e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007394:	2b00      	cmp	r3, #0
 8007396:	d003      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop

080073ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08a      	sub	sp, #40	; 0x28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80073b8:	4b67      	ldr	r3, [pc, #412]	; (8007558 <HAL_DMA_IRQHandler+0x1ac>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a67      	ldr	r2, [pc, #412]	; (800755c <HAL_DMA_IRQHandler+0x1b0>)
 80073be:	fba2 2303 	umull	r2, r3, r2, r3
 80073c2:	0a9b      	lsrs	r3, r3, #10
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a5f      	ldr	r2, [pc, #380]	; (8007560 <HAL_DMA_IRQHandler+0x1b4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d04a      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a5d      	ldr	r2, [pc, #372]	; (8007564 <HAL_DMA_IRQHandler+0x1b8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d045      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a5c      	ldr	r2, [pc, #368]	; (8007568 <HAL_DMA_IRQHandler+0x1bc>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d040      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a5a      	ldr	r2, [pc, #360]	; (800756c <HAL_DMA_IRQHandler+0x1c0>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d03b      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a59      	ldr	r2, [pc, #356]	; (8007570 <HAL_DMA_IRQHandler+0x1c4>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d036      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a57      	ldr	r2, [pc, #348]	; (8007574 <HAL_DMA_IRQHandler+0x1c8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d031      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a56      	ldr	r2, [pc, #344]	; (8007578 <HAL_DMA_IRQHandler+0x1cc>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d02c      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a54      	ldr	r2, [pc, #336]	; (800757c <HAL_DMA_IRQHandler+0x1d0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d027      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a53      	ldr	r2, [pc, #332]	; (8007580 <HAL_DMA_IRQHandler+0x1d4>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d022      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a51      	ldr	r2, [pc, #324]	; (8007584 <HAL_DMA_IRQHandler+0x1d8>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d01d      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a50      	ldr	r2, [pc, #320]	; (8007588 <HAL_DMA_IRQHandler+0x1dc>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d018      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a4e      	ldr	r2, [pc, #312]	; (800758c <HAL_DMA_IRQHandler+0x1e0>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d013      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a4d      	ldr	r2, [pc, #308]	; (8007590 <HAL_DMA_IRQHandler+0x1e4>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00e      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a4b      	ldr	r2, [pc, #300]	; (8007594 <HAL_DMA_IRQHandler+0x1e8>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d009      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a4a      	ldr	r2, [pc, #296]	; (8007598 <HAL_DMA_IRQHandler+0x1ec>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d004      	beq.n	800747e <HAL_DMA_IRQHandler+0xd2>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a48      	ldr	r2, [pc, #288]	; (800759c <HAL_DMA_IRQHandler+0x1f0>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d101      	bne.n	8007482 <HAL_DMA_IRQHandler+0xd6>
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <HAL_DMA_IRQHandler+0xd8>
 8007482:	2300      	movs	r3, #0
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 842b 	beq.w	8007ce0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800748e:	f003 031f 	and.w	r3, r3, #31
 8007492:	2208      	movs	r2, #8
 8007494:	409a      	lsls	r2, r3
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	4013      	ands	r3, r2
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 80a2 	beq.w	80075e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a2e      	ldr	r2, [pc, #184]	; (8007560 <HAL_DMA_IRQHandler+0x1b4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d04a      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a2d      	ldr	r2, [pc, #180]	; (8007564 <HAL_DMA_IRQHandler+0x1b8>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d045      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a2b      	ldr	r2, [pc, #172]	; (8007568 <HAL_DMA_IRQHandler+0x1bc>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d040      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a2a      	ldr	r2, [pc, #168]	; (800756c <HAL_DMA_IRQHandler+0x1c0>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d03b      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a28      	ldr	r2, [pc, #160]	; (8007570 <HAL_DMA_IRQHandler+0x1c4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d036      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a27      	ldr	r2, [pc, #156]	; (8007574 <HAL_DMA_IRQHandler+0x1c8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d031      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a25      	ldr	r2, [pc, #148]	; (8007578 <HAL_DMA_IRQHandler+0x1cc>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d02c      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a24      	ldr	r2, [pc, #144]	; (800757c <HAL_DMA_IRQHandler+0x1d0>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d027      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a22      	ldr	r2, [pc, #136]	; (8007580 <HAL_DMA_IRQHandler+0x1d4>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d022      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a21      	ldr	r2, [pc, #132]	; (8007584 <HAL_DMA_IRQHandler+0x1d8>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d01d      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a1f      	ldr	r2, [pc, #124]	; (8007588 <HAL_DMA_IRQHandler+0x1dc>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d018      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a1e      	ldr	r2, [pc, #120]	; (800758c <HAL_DMA_IRQHandler+0x1e0>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d013      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a1c      	ldr	r2, [pc, #112]	; (8007590 <HAL_DMA_IRQHandler+0x1e4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00e      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a1b      	ldr	r2, [pc, #108]	; (8007594 <HAL_DMA_IRQHandler+0x1e8>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d009      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a19      	ldr	r2, [pc, #100]	; (8007598 <HAL_DMA_IRQHandler+0x1ec>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d004      	beq.n	8007540 <HAL_DMA_IRQHandler+0x194>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a18      	ldr	r2, [pc, #96]	; (800759c <HAL_DMA_IRQHandler+0x1f0>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d12f      	bne.n	80075a0 <HAL_DMA_IRQHandler+0x1f4>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	2b00      	cmp	r3, #0
 800754c:	bf14      	ite	ne
 800754e:	2301      	movne	r3, #1
 8007550:	2300      	moveq	r3, #0
 8007552:	b2db      	uxtb	r3, r3
 8007554:	e02e      	b.n	80075b4 <HAL_DMA_IRQHandler+0x208>
 8007556:	bf00      	nop
 8007558:	24000000 	.word	0x24000000
 800755c:	1b4e81b5 	.word	0x1b4e81b5
 8007560:	40020010 	.word	0x40020010
 8007564:	40020028 	.word	0x40020028
 8007568:	40020040 	.word	0x40020040
 800756c:	40020058 	.word	0x40020058
 8007570:	40020070 	.word	0x40020070
 8007574:	40020088 	.word	0x40020088
 8007578:	400200a0 	.word	0x400200a0
 800757c:	400200b8 	.word	0x400200b8
 8007580:	40020410 	.word	0x40020410
 8007584:	40020428 	.word	0x40020428
 8007588:	40020440 	.word	0x40020440
 800758c:	40020458 	.word	0x40020458
 8007590:	40020470 	.word	0x40020470
 8007594:	40020488 	.word	0x40020488
 8007598:	400204a0 	.word	0x400204a0
 800759c:	400204b8 	.word	0x400204b8
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0308 	and.w	r3, r3, #8
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bf14      	ite	ne
 80075ae:	2301      	movne	r3, #1
 80075b0:	2300      	moveq	r3, #0
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d015      	beq.n	80075e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0204 	bic.w	r2, r2, #4
 80075c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075cc:	f003 031f 	and.w	r3, r3, #31
 80075d0:	2208      	movs	r2, #8
 80075d2:	409a      	lsls	r2, r3
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075dc:	f043 0201 	orr.w	r2, r3, #1
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e8:	f003 031f 	and.w	r3, r3, #31
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	fa22 f303 	lsr.w	r3, r2, r3
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d06e      	beq.n	80076d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a69      	ldr	r2, [pc, #420]	; (80077a4 <HAL_DMA_IRQHandler+0x3f8>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d04a      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a67      	ldr	r2, [pc, #412]	; (80077a8 <HAL_DMA_IRQHandler+0x3fc>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d045      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a66      	ldr	r2, [pc, #408]	; (80077ac <HAL_DMA_IRQHandler+0x400>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d040      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a64      	ldr	r2, [pc, #400]	; (80077b0 <HAL_DMA_IRQHandler+0x404>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d03b      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a63      	ldr	r2, [pc, #396]	; (80077b4 <HAL_DMA_IRQHandler+0x408>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d036      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a61      	ldr	r2, [pc, #388]	; (80077b8 <HAL_DMA_IRQHandler+0x40c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d031      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a60      	ldr	r2, [pc, #384]	; (80077bc <HAL_DMA_IRQHandler+0x410>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d02c      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a5e      	ldr	r2, [pc, #376]	; (80077c0 <HAL_DMA_IRQHandler+0x414>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d027      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a5d      	ldr	r2, [pc, #372]	; (80077c4 <HAL_DMA_IRQHandler+0x418>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d022      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a5b      	ldr	r2, [pc, #364]	; (80077c8 <HAL_DMA_IRQHandler+0x41c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d01d      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a5a      	ldr	r2, [pc, #360]	; (80077cc <HAL_DMA_IRQHandler+0x420>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d018      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a58      	ldr	r2, [pc, #352]	; (80077d0 <HAL_DMA_IRQHandler+0x424>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d013      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a57      	ldr	r2, [pc, #348]	; (80077d4 <HAL_DMA_IRQHandler+0x428>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00e      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a55      	ldr	r2, [pc, #340]	; (80077d8 <HAL_DMA_IRQHandler+0x42c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d009      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a54      	ldr	r2, [pc, #336]	; (80077dc <HAL_DMA_IRQHandler+0x430>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d004      	beq.n	800769a <HAL_DMA_IRQHandler+0x2ee>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a52      	ldr	r2, [pc, #328]	; (80077e0 <HAL_DMA_IRQHandler+0x434>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d10a      	bne.n	80076b0 <HAL_DMA_IRQHandler+0x304>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bf14      	ite	ne
 80076a8:	2301      	movne	r3, #1
 80076aa:	2300      	moveq	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	e003      	b.n	80076b8 <HAL_DMA_IRQHandler+0x30c>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2300      	movs	r3, #0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00d      	beq.n	80076d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c0:	f003 031f 	and.w	r3, r3, #31
 80076c4:	2201      	movs	r2, #1
 80076c6:	409a      	lsls	r2, r3
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d0:	f043 0202 	orr.w	r2, r3, #2
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076dc:	f003 031f 	and.w	r3, r3, #31
 80076e0:	2204      	movs	r2, #4
 80076e2:	409a      	lsls	r2, r3
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	4013      	ands	r3, r2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 808f 	beq.w	800780c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a2c      	ldr	r2, [pc, #176]	; (80077a4 <HAL_DMA_IRQHandler+0x3f8>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d04a      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a2a      	ldr	r2, [pc, #168]	; (80077a8 <HAL_DMA_IRQHandler+0x3fc>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d045      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a29      	ldr	r2, [pc, #164]	; (80077ac <HAL_DMA_IRQHandler+0x400>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d040      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a27      	ldr	r2, [pc, #156]	; (80077b0 <HAL_DMA_IRQHandler+0x404>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d03b      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a26      	ldr	r2, [pc, #152]	; (80077b4 <HAL_DMA_IRQHandler+0x408>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d036      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a24      	ldr	r2, [pc, #144]	; (80077b8 <HAL_DMA_IRQHandler+0x40c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d031      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a23      	ldr	r2, [pc, #140]	; (80077bc <HAL_DMA_IRQHandler+0x410>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d02c      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a21      	ldr	r2, [pc, #132]	; (80077c0 <HAL_DMA_IRQHandler+0x414>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d027      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a20      	ldr	r2, [pc, #128]	; (80077c4 <HAL_DMA_IRQHandler+0x418>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d022      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a1e      	ldr	r2, [pc, #120]	; (80077c8 <HAL_DMA_IRQHandler+0x41c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d01d      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a1d      	ldr	r2, [pc, #116]	; (80077cc <HAL_DMA_IRQHandler+0x420>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d018      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a1b      	ldr	r2, [pc, #108]	; (80077d0 <HAL_DMA_IRQHandler+0x424>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d013      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a1a      	ldr	r2, [pc, #104]	; (80077d4 <HAL_DMA_IRQHandler+0x428>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d00e      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a18      	ldr	r2, [pc, #96]	; (80077d8 <HAL_DMA_IRQHandler+0x42c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d009      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a17      	ldr	r2, [pc, #92]	; (80077dc <HAL_DMA_IRQHandler+0x430>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d004      	beq.n	800778e <HAL_DMA_IRQHandler+0x3e2>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a15      	ldr	r2, [pc, #84]	; (80077e0 <HAL_DMA_IRQHandler+0x434>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d12a      	bne.n	80077e4 <HAL_DMA_IRQHandler+0x438>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	bf14      	ite	ne
 800779c:	2301      	movne	r3, #1
 800779e:	2300      	moveq	r3, #0
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	e023      	b.n	80077ec <HAL_DMA_IRQHandler+0x440>
 80077a4:	40020010 	.word	0x40020010
 80077a8:	40020028 	.word	0x40020028
 80077ac:	40020040 	.word	0x40020040
 80077b0:	40020058 	.word	0x40020058
 80077b4:	40020070 	.word	0x40020070
 80077b8:	40020088 	.word	0x40020088
 80077bc:	400200a0 	.word	0x400200a0
 80077c0:	400200b8 	.word	0x400200b8
 80077c4:	40020410 	.word	0x40020410
 80077c8:	40020428 	.word	0x40020428
 80077cc:	40020440 	.word	0x40020440
 80077d0:	40020458 	.word	0x40020458
 80077d4:	40020470 	.word	0x40020470
 80077d8:	40020488 	.word	0x40020488
 80077dc:	400204a0 	.word	0x400204a0
 80077e0:	400204b8 	.word	0x400204b8
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2300      	movs	r3, #0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00d      	beq.n	800780c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f4:	f003 031f 	and.w	r3, r3, #31
 80077f8:	2204      	movs	r2, #4
 80077fa:	409a      	lsls	r2, r3
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007804:	f043 0204 	orr.w	r2, r3, #4
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007810:	f003 031f 	and.w	r3, r3, #31
 8007814:	2210      	movs	r2, #16
 8007816:	409a      	lsls	r2, r3
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	4013      	ands	r3, r2
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80a6 	beq.w	800796e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a85      	ldr	r2, [pc, #532]	; (8007a3c <HAL_DMA_IRQHandler+0x690>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d04a      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a83      	ldr	r2, [pc, #524]	; (8007a40 <HAL_DMA_IRQHandler+0x694>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d045      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a82      	ldr	r2, [pc, #520]	; (8007a44 <HAL_DMA_IRQHandler+0x698>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d040      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a80      	ldr	r2, [pc, #512]	; (8007a48 <HAL_DMA_IRQHandler+0x69c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d03b      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a7f      	ldr	r2, [pc, #508]	; (8007a4c <HAL_DMA_IRQHandler+0x6a0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d036      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a7d      	ldr	r2, [pc, #500]	; (8007a50 <HAL_DMA_IRQHandler+0x6a4>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d031      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a7c      	ldr	r2, [pc, #496]	; (8007a54 <HAL_DMA_IRQHandler+0x6a8>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d02c      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a7a      	ldr	r2, [pc, #488]	; (8007a58 <HAL_DMA_IRQHandler+0x6ac>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d027      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a79      	ldr	r2, [pc, #484]	; (8007a5c <HAL_DMA_IRQHandler+0x6b0>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d022      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a77      	ldr	r2, [pc, #476]	; (8007a60 <HAL_DMA_IRQHandler+0x6b4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d01d      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a76      	ldr	r2, [pc, #472]	; (8007a64 <HAL_DMA_IRQHandler+0x6b8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d018      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a74      	ldr	r2, [pc, #464]	; (8007a68 <HAL_DMA_IRQHandler+0x6bc>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d013      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a73      	ldr	r2, [pc, #460]	; (8007a6c <HAL_DMA_IRQHandler+0x6c0>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d00e      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a71      	ldr	r2, [pc, #452]	; (8007a70 <HAL_DMA_IRQHandler+0x6c4>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d009      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a70      	ldr	r2, [pc, #448]	; (8007a74 <HAL_DMA_IRQHandler+0x6c8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d004      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x516>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a6e      	ldr	r2, [pc, #440]	; (8007a78 <HAL_DMA_IRQHandler+0x6cc>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d10a      	bne.n	80078d8 <HAL_DMA_IRQHandler+0x52c>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0308 	and.w	r3, r3, #8
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bf14      	ite	ne
 80078d0:	2301      	movne	r3, #1
 80078d2:	2300      	moveq	r3, #0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	e009      	b.n	80078ec <HAL_DMA_IRQHandler+0x540>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0304 	and.w	r3, r3, #4
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	bf14      	ite	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	2300      	moveq	r3, #0
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d03e      	beq.n	800796e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f4:	f003 031f 	and.w	r3, r3, #31
 80078f8:	2210      	movs	r2, #16
 80078fa:	409a      	lsls	r2, r3
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d018      	beq.n	8007940 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d108      	bne.n	800792e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007920:	2b00      	cmp	r3, #0
 8007922:	d024      	beq.n	800796e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	4798      	blx	r3
 800792c:	e01f      	b.n	800796e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007932:	2b00      	cmp	r3, #0
 8007934:	d01b      	beq.n	800796e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	4798      	blx	r3
 800793e:	e016      	b.n	800796e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800794a:	2b00      	cmp	r3, #0
 800794c:	d107      	bne.n	800795e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0208 	bic.w	r2, r2, #8
 800795c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007972:	f003 031f 	and.w	r3, r3, #31
 8007976:	2220      	movs	r2, #32
 8007978:	409a      	lsls	r2, r3
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	4013      	ands	r3, r2
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 8110 	beq.w	8007ba4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a2c      	ldr	r2, [pc, #176]	; (8007a3c <HAL_DMA_IRQHandler+0x690>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d04a      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a2b      	ldr	r2, [pc, #172]	; (8007a40 <HAL_DMA_IRQHandler+0x694>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d045      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a29      	ldr	r2, [pc, #164]	; (8007a44 <HAL_DMA_IRQHandler+0x698>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d040      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a28      	ldr	r2, [pc, #160]	; (8007a48 <HAL_DMA_IRQHandler+0x69c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d03b      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a26      	ldr	r2, [pc, #152]	; (8007a4c <HAL_DMA_IRQHandler+0x6a0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d036      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a25      	ldr	r2, [pc, #148]	; (8007a50 <HAL_DMA_IRQHandler+0x6a4>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d031      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a23      	ldr	r2, [pc, #140]	; (8007a54 <HAL_DMA_IRQHandler+0x6a8>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d02c      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a22      	ldr	r2, [pc, #136]	; (8007a58 <HAL_DMA_IRQHandler+0x6ac>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d027      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a20      	ldr	r2, [pc, #128]	; (8007a5c <HAL_DMA_IRQHandler+0x6b0>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d022      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a1f      	ldr	r2, [pc, #124]	; (8007a60 <HAL_DMA_IRQHandler+0x6b4>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d01d      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a1d      	ldr	r2, [pc, #116]	; (8007a64 <HAL_DMA_IRQHandler+0x6b8>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d018      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a1c      	ldr	r2, [pc, #112]	; (8007a68 <HAL_DMA_IRQHandler+0x6bc>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d013      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a1a      	ldr	r2, [pc, #104]	; (8007a6c <HAL_DMA_IRQHandler+0x6c0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00e      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a19      	ldr	r2, [pc, #100]	; (8007a70 <HAL_DMA_IRQHandler+0x6c4>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d009      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a17      	ldr	r2, [pc, #92]	; (8007a74 <HAL_DMA_IRQHandler+0x6c8>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d004      	beq.n	8007a24 <HAL_DMA_IRQHandler+0x678>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a16      	ldr	r2, [pc, #88]	; (8007a78 <HAL_DMA_IRQHandler+0x6cc>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d12b      	bne.n	8007a7c <HAL_DMA_IRQHandler+0x6d0>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0310 	and.w	r3, r3, #16
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	bf14      	ite	ne
 8007a32:	2301      	movne	r3, #1
 8007a34:	2300      	moveq	r3, #0
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	e02a      	b.n	8007a90 <HAL_DMA_IRQHandler+0x6e4>
 8007a3a:	bf00      	nop
 8007a3c:	40020010 	.word	0x40020010
 8007a40:	40020028 	.word	0x40020028
 8007a44:	40020040 	.word	0x40020040
 8007a48:	40020058 	.word	0x40020058
 8007a4c:	40020070 	.word	0x40020070
 8007a50:	40020088 	.word	0x40020088
 8007a54:	400200a0 	.word	0x400200a0
 8007a58:	400200b8 	.word	0x400200b8
 8007a5c:	40020410 	.word	0x40020410
 8007a60:	40020428 	.word	0x40020428
 8007a64:	40020440 	.word	0x40020440
 8007a68:	40020458 	.word	0x40020458
 8007a6c:	40020470 	.word	0x40020470
 8007a70:	40020488 	.word	0x40020488
 8007a74:	400204a0 	.word	0x400204a0
 8007a78:	400204b8 	.word	0x400204b8
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	bf14      	ite	ne
 8007a8a:	2301      	movne	r3, #1
 8007a8c:	2300      	moveq	r3, #0
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 8087 	beq.w	8007ba4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a9a:	f003 031f 	and.w	r3, r3, #31
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	409a      	lsls	r2, r3
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	d139      	bne.n	8007b26 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 0216 	bic.w	r2, r2, #22
 8007ac0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	695a      	ldr	r2, [r3, #20]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ad0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d103      	bne.n	8007ae2 <HAL_DMA_IRQHandler+0x736>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d007      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0208 	bic.w	r2, r2, #8
 8007af0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af6:	f003 031f 	and.w	r3, r3, #31
 8007afa:	223f      	movs	r2, #63	; 0x3f
 8007afc:	409a      	lsls	r2, r3
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 834a 	beq.w	80081b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
          }
          return;
 8007b24:	e344      	b.n	80081b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d018      	beq.n	8007b66 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d108      	bne.n	8007b54 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d02c      	beq.n	8007ba4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
 8007b52:	e027      	b.n	8007ba4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d023      	beq.n	8007ba4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	4798      	blx	r3
 8007b64:	e01e      	b.n	8007ba4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10f      	bne.n	8007b94 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0210 	bic.w	r2, r2, #16
 8007b82:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 8306 	beq.w	80081ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 8088 	beq.w	8007ccc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2204      	movs	r2, #4
 8007bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a7a      	ldr	r2, [pc, #488]	; (8007db4 <HAL_DMA_IRQHandler+0xa08>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d04a      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a79      	ldr	r2, [pc, #484]	; (8007db8 <HAL_DMA_IRQHandler+0xa0c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d045      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a77      	ldr	r2, [pc, #476]	; (8007dbc <HAL_DMA_IRQHandler+0xa10>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d040      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a76      	ldr	r2, [pc, #472]	; (8007dc0 <HAL_DMA_IRQHandler+0xa14>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d03b      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a74      	ldr	r2, [pc, #464]	; (8007dc4 <HAL_DMA_IRQHandler+0xa18>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d036      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a73      	ldr	r2, [pc, #460]	; (8007dc8 <HAL_DMA_IRQHandler+0xa1c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d031      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a71      	ldr	r2, [pc, #452]	; (8007dcc <HAL_DMA_IRQHandler+0xa20>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d02c      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a70      	ldr	r2, [pc, #448]	; (8007dd0 <HAL_DMA_IRQHandler+0xa24>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d027      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a6e      	ldr	r2, [pc, #440]	; (8007dd4 <HAL_DMA_IRQHandler+0xa28>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d022      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a6d      	ldr	r2, [pc, #436]	; (8007dd8 <HAL_DMA_IRQHandler+0xa2c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d01d      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a6b      	ldr	r2, [pc, #428]	; (8007ddc <HAL_DMA_IRQHandler+0xa30>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d018      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a6a      	ldr	r2, [pc, #424]	; (8007de0 <HAL_DMA_IRQHandler+0xa34>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d013      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a68      	ldr	r2, [pc, #416]	; (8007de4 <HAL_DMA_IRQHandler+0xa38>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00e      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a67      	ldr	r2, [pc, #412]	; (8007de8 <HAL_DMA_IRQHandler+0xa3c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d009      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a65      	ldr	r2, [pc, #404]	; (8007dec <HAL_DMA_IRQHandler+0xa40>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d004      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x8b8>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a64      	ldr	r2, [pc, #400]	; (8007df0 <HAL_DMA_IRQHandler+0xa44>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d108      	bne.n	8007c76 <HAL_DMA_IRQHandler+0x8ca>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0201 	bic.w	r2, r2, #1
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	e007      	b.n	8007c86 <HAL_DMA_IRQHandler+0x8da>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 0201 	bic.w	r2, r2, #1
 8007c84:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d307      	bcc.n	8007ca2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1f2      	bne.n	8007c86 <HAL_DMA_IRQHandler+0x8da>
 8007ca0:	e000      	b.n	8007ca4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007ca2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d004      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007cba:	e003      	b.n	8007cc4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 8272 	beq.w	80081ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	4798      	blx	r3
 8007cde:	e26c      	b.n	80081ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a43      	ldr	r2, [pc, #268]	; (8007df4 <HAL_DMA_IRQHandler+0xa48>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d022      	beq.n	8007d30 <HAL_DMA_IRQHandler+0x984>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a42      	ldr	r2, [pc, #264]	; (8007df8 <HAL_DMA_IRQHandler+0xa4c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d01d      	beq.n	8007d30 <HAL_DMA_IRQHandler+0x984>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a40      	ldr	r2, [pc, #256]	; (8007dfc <HAL_DMA_IRQHandler+0xa50>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d018      	beq.n	8007d30 <HAL_DMA_IRQHandler+0x984>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a3f      	ldr	r2, [pc, #252]	; (8007e00 <HAL_DMA_IRQHandler+0xa54>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d013      	beq.n	8007d30 <HAL_DMA_IRQHandler+0x984>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a3d      	ldr	r2, [pc, #244]	; (8007e04 <HAL_DMA_IRQHandler+0xa58>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00e      	beq.n	8007d30 <HAL_DMA_IRQHandler+0x984>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a3c      	ldr	r2, [pc, #240]	; (8007e08 <HAL_DMA_IRQHandler+0xa5c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d009      	beq.n	8007d30 <HAL_DMA_IRQHandler+0x984>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a3a      	ldr	r2, [pc, #232]	; (8007e0c <HAL_DMA_IRQHandler+0xa60>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d004      	beq.n	8007d30 <HAL_DMA_IRQHandler+0x984>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a39      	ldr	r2, [pc, #228]	; (8007e10 <HAL_DMA_IRQHandler+0xa64>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d101      	bne.n	8007d34 <HAL_DMA_IRQHandler+0x988>
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <HAL_DMA_IRQHandler+0x98a>
 8007d34:	2300      	movs	r3, #0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 823f 	beq.w	80081ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d48:	f003 031f 	and.w	r3, r3, #31
 8007d4c:	2204      	movs	r2, #4
 8007d4e:	409a      	lsls	r2, r3
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	4013      	ands	r3, r2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 80cd 	beq.w	8007ef4 <HAL_DMA_IRQHandler+0xb48>
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 80c7 	beq.w	8007ef4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d6a:	f003 031f 	and.w	r3, r3, #31
 8007d6e:	2204      	movs	r2, #4
 8007d70:	409a      	lsls	r2, r3
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d049      	beq.n	8007e14 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d109      	bne.n	8007d9e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f000 8210 	beq.w	80081b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d9c:	e20a      	b.n	80081b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 8206 	beq.w	80081b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007db0:	e200      	b.n	80081b4 <HAL_DMA_IRQHandler+0xe08>
 8007db2:	bf00      	nop
 8007db4:	40020010 	.word	0x40020010
 8007db8:	40020028 	.word	0x40020028
 8007dbc:	40020040 	.word	0x40020040
 8007dc0:	40020058 	.word	0x40020058
 8007dc4:	40020070 	.word	0x40020070
 8007dc8:	40020088 	.word	0x40020088
 8007dcc:	400200a0 	.word	0x400200a0
 8007dd0:	400200b8 	.word	0x400200b8
 8007dd4:	40020410 	.word	0x40020410
 8007dd8:	40020428 	.word	0x40020428
 8007ddc:	40020440 	.word	0x40020440
 8007de0:	40020458 	.word	0x40020458
 8007de4:	40020470 	.word	0x40020470
 8007de8:	40020488 	.word	0x40020488
 8007dec:	400204a0 	.word	0x400204a0
 8007df0:	400204b8 	.word	0x400204b8
 8007df4:	58025408 	.word	0x58025408
 8007df8:	5802541c 	.word	0x5802541c
 8007dfc:	58025430 	.word	0x58025430
 8007e00:	58025444 	.word	0x58025444
 8007e04:	58025458 	.word	0x58025458
 8007e08:	5802546c 	.word	0x5802546c
 8007e0c:	58025480 	.word	0x58025480
 8007e10:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d160      	bne.n	8007ee0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a7f      	ldr	r2, [pc, #508]	; (8008020 <HAL_DMA_IRQHandler+0xc74>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d04a      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a7d      	ldr	r2, [pc, #500]	; (8008024 <HAL_DMA_IRQHandler+0xc78>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d045      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a7c      	ldr	r2, [pc, #496]	; (8008028 <HAL_DMA_IRQHandler+0xc7c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d040      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a7a      	ldr	r2, [pc, #488]	; (800802c <HAL_DMA_IRQHandler+0xc80>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d03b      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a79      	ldr	r2, [pc, #484]	; (8008030 <HAL_DMA_IRQHandler+0xc84>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d036      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a77      	ldr	r2, [pc, #476]	; (8008034 <HAL_DMA_IRQHandler+0xc88>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d031      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a76      	ldr	r2, [pc, #472]	; (8008038 <HAL_DMA_IRQHandler+0xc8c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d02c      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a74      	ldr	r2, [pc, #464]	; (800803c <HAL_DMA_IRQHandler+0xc90>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d027      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a73      	ldr	r2, [pc, #460]	; (8008040 <HAL_DMA_IRQHandler+0xc94>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d022      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a71      	ldr	r2, [pc, #452]	; (8008044 <HAL_DMA_IRQHandler+0xc98>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d01d      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a70      	ldr	r2, [pc, #448]	; (8008048 <HAL_DMA_IRQHandler+0xc9c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d018      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a6e      	ldr	r2, [pc, #440]	; (800804c <HAL_DMA_IRQHandler+0xca0>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d013      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a6d      	ldr	r2, [pc, #436]	; (8008050 <HAL_DMA_IRQHandler+0xca4>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d00e      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a6b      	ldr	r2, [pc, #428]	; (8008054 <HAL_DMA_IRQHandler+0xca8>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d009      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a6a      	ldr	r2, [pc, #424]	; (8008058 <HAL_DMA_IRQHandler+0xcac>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d004      	beq.n	8007ebe <HAL_DMA_IRQHandler+0xb12>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a68      	ldr	r2, [pc, #416]	; (800805c <HAL_DMA_IRQHandler+0xcb0>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d108      	bne.n	8007ed0 <HAL_DMA_IRQHandler+0xb24>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0208 	bic.w	r2, r2, #8
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	e007      	b.n	8007ee0 <HAL_DMA_IRQHandler+0xb34>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 0204 	bic.w	r2, r2, #4
 8007ede:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 8165 	beq.w	80081b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ef2:	e15f      	b.n	80081b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef8:	f003 031f 	and.w	r3, r3, #31
 8007efc:	2202      	movs	r2, #2
 8007efe:	409a      	lsls	r2, r3
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	4013      	ands	r3, r2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80c5 	beq.w	8008094 <HAL_DMA_IRQHandler+0xce8>
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 80bf 	beq.w	8008094 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f1a:	f003 031f 	and.w	r3, r3, #31
 8007f1e:	2202      	movs	r2, #2
 8007f20:	409a      	lsls	r2, r3
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d018      	beq.n	8007f62 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d109      	bne.n	8007f4e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 813a 	beq.w	80081b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f4c:	e134      	b.n	80081b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 8130 	beq.w	80081b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f60:	e12a      	b.n	80081b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f003 0320 	and.w	r3, r3, #32
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f040 8089 	bne.w	8008080 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a2b      	ldr	r2, [pc, #172]	; (8008020 <HAL_DMA_IRQHandler+0xc74>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d04a      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a29      	ldr	r2, [pc, #164]	; (8008024 <HAL_DMA_IRQHandler+0xc78>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d045      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a28      	ldr	r2, [pc, #160]	; (8008028 <HAL_DMA_IRQHandler+0xc7c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d040      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a26      	ldr	r2, [pc, #152]	; (800802c <HAL_DMA_IRQHandler+0xc80>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d03b      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a25      	ldr	r2, [pc, #148]	; (8008030 <HAL_DMA_IRQHandler+0xc84>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d036      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a23      	ldr	r2, [pc, #140]	; (8008034 <HAL_DMA_IRQHandler+0xc88>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d031      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a22      	ldr	r2, [pc, #136]	; (8008038 <HAL_DMA_IRQHandler+0xc8c>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d02c      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a20      	ldr	r2, [pc, #128]	; (800803c <HAL_DMA_IRQHandler+0xc90>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d027      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a1f      	ldr	r2, [pc, #124]	; (8008040 <HAL_DMA_IRQHandler+0xc94>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d022      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a1d      	ldr	r2, [pc, #116]	; (8008044 <HAL_DMA_IRQHandler+0xc98>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d01d      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a1c      	ldr	r2, [pc, #112]	; (8008048 <HAL_DMA_IRQHandler+0xc9c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d018      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a1a      	ldr	r2, [pc, #104]	; (800804c <HAL_DMA_IRQHandler+0xca0>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d013      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a19      	ldr	r2, [pc, #100]	; (8008050 <HAL_DMA_IRQHandler+0xca4>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d00e      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a17      	ldr	r2, [pc, #92]	; (8008054 <HAL_DMA_IRQHandler+0xca8>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d009      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a16      	ldr	r2, [pc, #88]	; (8008058 <HAL_DMA_IRQHandler+0xcac>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d004      	beq.n	800800e <HAL_DMA_IRQHandler+0xc62>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a14      	ldr	r2, [pc, #80]	; (800805c <HAL_DMA_IRQHandler+0xcb0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d128      	bne.n	8008060 <HAL_DMA_IRQHandler+0xcb4>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0214 	bic.w	r2, r2, #20
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e027      	b.n	8008070 <HAL_DMA_IRQHandler+0xcc4>
 8008020:	40020010 	.word	0x40020010
 8008024:	40020028 	.word	0x40020028
 8008028:	40020040 	.word	0x40020040
 800802c:	40020058 	.word	0x40020058
 8008030:	40020070 	.word	0x40020070
 8008034:	40020088 	.word	0x40020088
 8008038:	400200a0 	.word	0x400200a0
 800803c:	400200b8 	.word	0x400200b8
 8008040:	40020410 	.word	0x40020410
 8008044:	40020428 	.word	0x40020428
 8008048:	40020440 	.word	0x40020440
 800804c:	40020458 	.word	0x40020458
 8008050:	40020470 	.word	0x40020470
 8008054:	40020488 	.word	0x40020488
 8008058:	400204a0 	.word	0x400204a0
 800805c:	400204b8 	.word	0x400204b8
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 020a 	bic.w	r2, r2, #10
 800806e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 8097 	beq.w	80081b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008092:	e091      	b.n	80081b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008098:	f003 031f 	and.w	r3, r3, #31
 800809c:	2208      	movs	r2, #8
 800809e:	409a      	lsls	r2, r3
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	4013      	ands	r3, r2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 8088 	beq.w	80081ba <HAL_DMA_IRQHandler+0xe0e>
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	f003 0308 	and.w	r3, r3, #8
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 8082 	beq.w	80081ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a41      	ldr	r2, [pc, #260]	; (80081c0 <HAL_DMA_IRQHandler+0xe14>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d04a      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a3f      	ldr	r2, [pc, #252]	; (80081c4 <HAL_DMA_IRQHandler+0xe18>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d045      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a3e      	ldr	r2, [pc, #248]	; (80081c8 <HAL_DMA_IRQHandler+0xe1c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d040      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a3c      	ldr	r2, [pc, #240]	; (80081cc <HAL_DMA_IRQHandler+0xe20>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d03b      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a3b      	ldr	r2, [pc, #236]	; (80081d0 <HAL_DMA_IRQHandler+0xe24>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d036      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a39      	ldr	r2, [pc, #228]	; (80081d4 <HAL_DMA_IRQHandler+0xe28>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d031      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a38      	ldr	r2, [pc, #224]	; (80081d8 <HAL_DMA_IRQHandler+0xe2c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d02c      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a36      	ldr	r2, [pc, #216]	; (80081dc <HAL_DMA_IRQHandler+0xe30>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d027      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a35      	ldr	r2, [pc, #212]	; (80081e0 <HAL_DMA_IRQHandler+0xe34>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d022      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a33      	ldr	r2, [pc, #204]	; (80081e4 <HAL_DMA_IRQHandler+0xe38>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d01d      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a32      	ldr	r2, [pc, #200]	; (80081e8 <HAL_DMA_IRQHandler+0xe3c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d018      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a30      	ldr	r2, [pc, #192]	; (80081ec <HAL_DMA_IRQHandler+0xe40>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d013      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a2f      	ldr	r2, [pc, #188]	; (80081f0 <HAL_DMA_IRQHandler+0xe44>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d00e      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a2d      	ldr	r2, [pc, #180]	; (80081f4 <HAL_DMA_IRQHandler+0xe48>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d009      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a2c      	ldr	r2, [pc, #176]	; (80081f8 <HAL_DMA_IRQHandler+0xe4c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d004      	beq.n	8008156 <HAL_DMA_IRQHandler+0xdaa>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a2a      	ldr	r2, [pc, #168]	; (80081fc <HAL_DMA_IRQHandler+0xe50>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d108      	bne.n	8008168 <HAL_DMA_IRQHandler+0xdbc>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 021c 	bic.w	r2, r2, #28
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	e007      	b.n	8008178 <HAL_DMA_IRQHandler+0xdcc>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 020e 	bic.w	r2, r2, #14
 8008176:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800817c:	f003 031f 	and.w	r3, r3, #31
 8008180:	2201      	movs	r2, #1
 8008182:	409a      	lsls	r2, r3
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d009      	beq.n	80081ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	4798      	blx	r3
 80081ae:	e004      	b.n	80081ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 80081b0:	bf00      	nop
 80081b2:	e002      	b.n	80081ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081b4:	bf00      	nop
 80081b6:	e000      	b.n	80081ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80081ba:	3728      	adds	r7, #40	; 0x28
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	40020010 	.word	0x40020010
 80081c4:	40020028 	.word	0x40020028
 80081c8:	40020040 	.word	0x40020040
 80081cc:	40020058 	.word	0x40020058
 80081d0:	40020070 	.word	0x40020070
 80081d4:	40020088 	.word	0x40020088
 80081d8:	400200a0 	.word	0x400200a0
 80081dc:	400200b8 	.word	0x400200b8
 80081e0:	40020410 	.word	0x40020410
 80081e4:	40020428 	.word	0x40020428
 80081e8:	40020440 	.word	0x40020440
 80081ec:	40020458 	.word	0x40020458
 80081f0:	40020470 	.word	0x40020470
 80081f4:	40020488 	.word	0x40020488
 80081f8:	400204a0 	.word	0x400204a0
 80081fc:	400204b8 	.word	0x400204b8

08008200 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008212:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008218:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a7f      	ldr	r2, [pc, #508]	; (800841c <DMA_SetConfig+0x21c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d072      	beq.n	800830a <DMA_SetConfig+0x10a>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a7d      	ldr	r2, [pc, #500]	; (8008420 <DMA_SetConfig+0x220>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d06d      	beq.n	800830a <DMA_SetConfig+0x10a>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a7c      	ldr	r2, [pc, #496]	; (8008424 <DMA_SetConfig+0x224>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d068      	beq.n	800830a <DMA_SetConfig+0x10a>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a7a      	ldr	r2, [pc, #488]	; (8008428 <DMA_SetConfig+0x228>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d063      	beq.n	800830a <DMA_SetConfig+0x10a>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a79      	ldr	r2, [pc, #484]	; (800842c <DMA_SetConfig+0x22c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d05e      	beq.n	800830a <DMA_SetConfig+0x10a>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a77      	ldr	r2, [pc, #476]	; (8008430 <DMA_SetConfig+0x230>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d059      	beq.n	800830a <DMA_SetConfig+0x10a>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a76      	ldr	r2, [pc, #472]	; (8008434 <DMA_SetConfig+0x234>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d054      	beq.n	800830a <DMA_SetConfig+0x10a>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a74      	ldr	r2, [pc, #464]	; (8008438 <DMA_SetConfig+0x238>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d04f      	beq.n	800830a <DMA_SetConfig+0x10a>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a73      	ldr	r2, [pc, #460]	; (800843c <DMA_SetConfig+0x23c>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d04a      	beq.n	800830a <DMA_SetConfig+0x10a>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a71      	ldr	r2, [pc, #452]	; (8008440 <DMA_SetConfig+0x240>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d045      	beq.n	800830a <DMA_SetConfig+0x10a>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a70      	ldr	r2, [pc, #448]	; (8008444 <DMA_SetConfig+0x244>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d040      	beq.n	800830a <DMA_SetConfig+0x10a>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a6e      	ldr	r2, [pc, #440]	; (8008448 <DMA_SetConfig+0x248>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d03b      	beq.n	800830a <DMA_SetConfig+0x10a>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a6d      	ldr	r2, [pc, #436]	; (800844c <DMA_SetConfig+0x24c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d036      	beq.n	800830a <DMA_SetConfig+0x10a>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a6b      	ldr	r2, [pc, #428]	; (8008450 <DMA_SetConfig+0x250>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d031      	beq.n	800830a <DMA_SetConfig+0x10a>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a6a      	ldr	r2, [pc, #424]	; (8008454 <DMA_SetConfig+0x254>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d02c      	beq.n	800830a <DMA_SetConfig+0x10a>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a68      	ldr	r2, [pc, #416]	; (8008458 <DMA_SetConfig+0x258>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d027      	beq.n	800830a <DMA_SetConfig+0x10a>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a67      	ldr	r2, [pc, #412]	; (800845c <DMA_SetConfig+0x25c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d022      	beq.n	800830a <DMA_SetConfig+0x10a>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a65      	ldr	r2, [pc, #404]	; (8008460 <DMA_SetConfig+0x260>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d01d      	beq.n	800830a <DMA_SetConfig+0x10a>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a64      	ldr	r2, [pc, #400]	; (8008464 <DMA_SetConfig+0x264>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d018      	beq.n	800830a <DMA_SetConfig+0x10a>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a62      	ldr	r2, [pc, #392]	; (8008468 <DMA_SetConfig+0x268>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d013      	beq.n	800830a <DMA_SetConfig+0x10a>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a61      	ldr	r2, [pc, #388]	; (800846c <DMA_SetConfig+0x26c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d00e      	beq.n	800830a <DMA_SetConfig+0x10a>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a5f      	ldr	r2, [pc, #380]	; (8008470 <DMA_SetConfig+0x270>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d009      	beq.n	800830a <DMA_SetConfig+0x10a>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a5e      	ldr	r2, [pc, #376]	; (8008474 <DMA_SetConfig+0x274>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d004      	beq.n	800830a <DMA_SetConfig+0x10a>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a5c      	ldr	r2, [pc, #368]	; (8008478 <DMA_SetConfig+0x278>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d101      	bne.n	800830e <DMA_SetConfig+0x10e>
 800830a:	2301      	movs	r3, #1
 800830c:	e000      	b.n	8008310 <DMA_SetConfig+0x110>
 800830e:	2300      	movs	r3, #0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00d      	beq.n	8008330 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800831c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008322:	2b00      	cmp	r3, #0
 8008324:	d004      	beq.n	8008330 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800832e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a39      	ldr	r2, [pc, #228]	; (800841c <DMA_SetConfig+0x21c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d04a      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a38      	ldr	r2, [pc, #224]	; (8008420 <DMA_SetConfig+0x220>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d045      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a36      	ldr	r2, [pc, #216]	; (8008424 <DMA_SetConfig+0x224>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d040      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a35      	ldr	r2, [pc, #212]	; (8008428 <DMA_SetConfig+0x228>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d03b      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a33      	ldr	r2, [pc, #204]	; (800842c <DMA_SetConfig+0x22c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d036      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a32      	ldr	r2, [pc, #200]	; (8008430 <DMA_SetConfig+0x230>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d031      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a30      	ldr	r2, [pc, #192]	; (8008434 <DMA_SetConfig+0x234>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d02c      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a2f      	ldr	r2, [pc, #188]	; (8008438 <DMA_SetConfig+0x238>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d027      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a2d      	ldr	r2, [pc, #180]	; (800843c <DMA_SetConfig+0x23c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d022      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a2c      	ldr	r2, [pc, #176]	; (8008440 <DMA_SetConfig+0x240>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d01d      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a2a      	ldr	r2, [pc, #168]	; (8008444 <DMA_SetConfig+0x244>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d018      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a29      	ldr	r2, [pc, #164]	; (8008448 <DMA_SetConfig+0x248>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d013      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a27      	ldr	r2, [pc, #156]	; (800844c <DMA_SetConfig+0x24c>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00e      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a26      	ldr	r2, [pc, #152]	; (8008450 <DMA_SetConfig+0x250>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d009      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a24      	ldr	r2, [pc, #144]	; (8008454 <DMA_SetConfig+0x254>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d004      	beq.n	80083d0 <DMA_SetConfig+0x1d0>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a23      	ldr	r2, [pc, #140]	; (8008458 <DMA_SetConfig+0x258>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d101      	bne.n	80083d4 <DMA_SetConfig+0x1d4>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e000      	b.n	80083d6 <DMA_SetConfig+0x1d6>
 80083d4:	2300      	movs	r3, #0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d059      	beq.n	800848e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083de:	f003 031f 	and.w	r3, r3, #31
 80083e2:	223f      	movs	r2, #63	; 0x3f
 80083e4:	409a      	lsls	r2, r3
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083f8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	2b40      	cmp	r3, #64	; 0x40
 8008408:	d138      	bne.n	800847c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800841a:	e086      	b.n	800852a <DMA_SetConfig+0x32a>
 800841c:	40020010 	.word	0x40020010
 8008420:	40020028 	.word	0x40020028
 8008424:	40020040 	.word	0x40020040
 8008428:	40020058 	.word	0x40020058
 800842c:	40020070 	.word	0x40020070
 8008430:	40020088 	.word	0x40020088
 8008434:	400200a0 	.word	0x400200a0
 8008438:	400200b8 	.word	0x400200b8
 800843c:	40020410 	.word	0x40020410
 8008440:	40020428 	.word	0x40020428
 8008444:	40020440 	.word	0x40020440
 8008448:	40020458 	.word	0x40020458
 800844c:	40020470 	.word	0x40020470
 8008450:	40020488 	.word	0x40020488
 8008454:	400204a0 	.word	0x400204a0
 8008458:	400204b8 	.word	0x400204b8
 800845c:	58025408 	.word	0x58025408
 8008460:	5802541c 	.word	0x5802541c
 8008464:	58025430 	.word	0x58025430
 8008468:	58025444 	.word	0x58025444
 800846c:	58025458 	.word	0x58025458
 8008470:	5802546c 	.word	0x5802546c
 8008474:	58025480 	.word	0x58025480
 8008478:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	60da      	str	r2, [r3, #12]
}
 800848c:	e04d      	b.n	800852a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a29      	ldr	r2, [pc, #164]	; (8008538 <DMA_SetConfig+0x338>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d022      	beq.n	80084de <DMA_SetConfig+0x2de>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a27      	ldr	r2, [pc, #156]	; (800853c <DMA_SetConfig+0x33c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d01d      	beq.n	80084de <DMA_SetConfig+0x2de>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a26      	ldr	r2, [pc, #152]	; (8008540 <DMA_SetConfig+0x340>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d018      	beq.n	80084de <DMA_SetConfig+0x2de>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a24      	ldr	r2, [pc, #144]	; (8008544 <DMA_SetConfig+0x344>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d013      	beq.n	80084de <DMA_SetConfig+0x2de>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a23      	ldr	r2, [pc, #140]	; (8008548 <DMA_SetConfig+0x348>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d00e      	beq.n	80084de <DMA_SetConfig+0x2de>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a21      	ldr	r2, [pc, #132]	; (800854c <DMA_SetConfig+0x34c>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d009      	beq.n	80084de <DMA_SetConfig+0x2de>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a20      	ldr	r2, [pc, #128]	; (8008550 <DMA_SetConfig+0x350>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d004      	beq.n	80084de <DMA_SetConfig+0x2de>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a1e      	ldr	r2, [pc, #120]	; (8008554 <DMA_SetConfig+0x354>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d101      	bne.n	80084e2 <DMA_SetConfig+0x2e2>
 80084de:	2301      	movs	r3, #1
 80084e0:	e000      	b.n	80084e4 <DMA_SetConfig+0x2e4>
 80084e2:	2300      	movs	r3, #0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d020      	beq.n	800852a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084ec:	f003 031f 	and.w	r3, r3, #31
 80084f0:	2201      	movs	r2, #1
 80084f2:	409a      	lsls	r2, r3
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	2b40      	cmp	r3, #64	; 0x40
 8008506:	d108      	bne.n	800851a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	60da      	str	r2, [r3, #12]
}
 8008518:	e007      	b.n	800852a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	60da      	str	r2, [r3, #12]
}
 800852a:	bf00      	nop
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	58025408 	.word	0x58025408
 800853c:	5802541c 	.word	0x5802541c
 8008540:	58025430 	.word	0x58025430
 8008544:	58025444 	.word	0x58025444
 8008548:	58025458 	.word	0x58025458
 800854c:	5802546c 	.word	0x5802546c
 8008550:	58025480 	.word	0x58025480
 8008554:	58025494 	.word	0x58025494

08008558 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a42      	ldr	r2, [pc, #264]	; (8008670 <DMA_CalcBaseAndBitshift+0x118>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d04a      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a41      	ldr	r2, [pc, #260]	; (8008674 <DMA_CalcBaseAndBitshift+0x11c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d045      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a3f      	ldr	r2, [pc, #252]	; (8008678 <DMA_CalcBaseAndBitshift+0x120>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d040      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a3e      	ldr	r2, [pc, #248]	; (800867c <DMA_CalcBaseAndBitshift+0x124>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d03b      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a3c      	ldr	r2, [pc, #240]	; (8008680 <DMA_CalcBaseAndBitshift+0x128>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d036      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a3b      	ldr	r2, [pc, #236]	; (8008684 <DMA_CalcBaseAndBitshift+0x12c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d031      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a39      	ldr	r2, [pc, #228]	; (8008688 <DMA_CalcBaseAndBitshift+0x130>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d02c      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a38      	ldr	r2, [pc, #224]	; (800868c <DMA_CalcBaseAndBitshift+0x134>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d027      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a36      	ldr	r2, [pc, #216]	; (8008690 <DMA_CalcBaseAndBitshift+0x138>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d022      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a35      	ldr	r2, [pc, #212]	; (8008694 <DMA_CalcBaseAndBitshift+0x13c>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d01d      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a33      	ldr	r2, [pc, #204]	; (8008698 <DMA_CalcBaseAndBitshift+0x140>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d018      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a32      	ldr	r2, [pc, #200]	; (800869c <DMA_CalcBaseAndBitshift+0x144>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d013      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a30      	ldr	r2, [pc, #192]	; (80086a0 <DMA_CalcBaseAndBitshift+0x148>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00e      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a2f      	ldr	r2, [pc, #188]	; (80086a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d009      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a2d      	ldr	r2, [pc, #180]	; (80086a8 <DMA_CalcBaseAndBitshift+0x150>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d004      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xa8>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a2c      	ldr	r2, [pc, #176]	; (80086ac <DMA_CalcBaseAndBitshift+0x154>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d101      	bne.n	8008604 <DMA_CalcBaseAndBitshift+0xac>
 8008600:	2301      	movs	r3, #1
 8008602:	e000      	b.n	8008606 <DMA_CalcBaseAndBitshift+0xae>
 8008604:	2300      	movs	r3, #0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d024      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	3b10      	subs	r3, #16
 8008612:	4a27      	ldr	r2, [pc, #156]	; (80086b0 <DMA_CalcBaseAndBitshift+0x158>)
 8008614:	fba2 2303 	umull	r2, r3, r2, r3
 8008618:	091b      	lsrs	r3, r3, #4
 800861a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	4a24      	ldr	r2, [pc, #144]	; (80086b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008624:	5cd3      	ldrb	r3, [r2, r3]
 8008626:	461a      	mov	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b03      	cmp	r3, #3
 8008630:	d908      	bls.n	8008644 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	4b1f      	ldr	r3, [pc, #124]	; (80086b8 <DMA_CalcBaseAndBitshift+0x160>)
 800863a:	4013      	ands	r3, r2
 800863c:	1d1a      	adds	r2, r3, #4
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	659a      	str	r2, [r3, #88]	; 0x58
 8008642:	e00d      	b.n	8008660 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	461a      	mov	r2, r3
 800864a:	4b1b      	ldr	r3, [pc, #108]	; (80086b8 <DMA_CalcBaseAndBitshift+0x160>)
 800864c:	4013      	ands	r3, r2
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	6593      	str	r3, [r2, #88]	; 0x58
 8008652:	e005      	b.n	8008660 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	40020010 	.word	0x40020010
 8008674:	40020028 	.word	0x40020028
 8008678:	40020040 	.word	0x40020040
 800867c:	40020058 	.word	0x40020058
 8008680:	40020070 	.word	0x40020070
 8008684:	40020088 	.word	0x40020088
 8008688:	400200a0 	.word	0x400200a0
 800868c:	400200b8 	.word	0x400200b8
 8008690:	40020410 	.word	0x40020410
 8008694:	40020428 	.word	0x40020428
 8008698:	40020440 	.word	0x40020440
 800869c:	40020458 	.word	0x40020458
 80086a0:	40020470 	.word	0x40020470
 80086a4:	40020488 	.word	0x40020488
 80086a8:	400204a0 	.word	0x400204a0
 80086ac:	400204b8 	.word	0x400204b8
 80086b0:	aaaaaaab 	.word	0xaaaaaaab
 80086b4:	0800f550 	.word	0x0800f550
 80086b8:	fffffc00 	.word	0xfffffc00

080086bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d120      	bne.n	8008712 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d858      	bhi.n	800878a <DMA_CheckFifoParam+0xce>
 80086d8:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <DMA_CheckFifoParam+0x24>)
 80086da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086de:	bf00      	nop
 80086e0:	080086f1 	.word	0x080086f1
 80086e4:	08008703 	.word	0x08008703
 80086e8:	080086f1 	.word	0x080086f1
 80086ec:	0800878b 	.word	0x0800878b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d048      	beq.n	800878e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008700:	e045      	b.n	800878e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008706:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800870a:	d142      	bne.n	8008792 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008710:	e03f      	b.n	8008792 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800871a:	d123      	bne.n	8008764 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008720:	2b03      	cmp	r3, #3
 8008722:	d838      	bhi.n	8008796 <DMA_CheckFifoParam+0xda>
 8008724:	a201      	add	r2, pc, #4	; (adr r2, 800872c <DMA_CheckFifoParam+0x70>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	0800873d 	.word	0x0800873d
 8008730:	08008743 	.word	0x08008743
 8008734:	0800873d 	.word	0x0800873d
 8008738:	08008755 	.word	0x08008755
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	73fb      	strb	r3, [r7, #15]
        break;
 8008740:	e030      	b.n	80087a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d025      	beq.n	800879a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008752:	e022      	b.n	800879a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800875c:	d11f      	bne.n	800879e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008762:	e01c      	b.n	800879e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008768:	2b02      	cmp	r3, #2
 800876a:	d902      	bls.n	8008772 <DMA_CheckFifoParam+0xb6>
 800876c:	2b03      	cmp	r3, #3
 800876e:	d003      	beq.n	8008778 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008770:	e018      	b.n	80087a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	73fb      	strb	r3, [r7, #15]
        break;
 8008776:	e015      	b.n	80087a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00e      	beq.n	80087a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	73fb      	strb	r3, [r7, #15]
    break;
 8008788:	e00b      	b.n	80087a2 <DMA_CheckFifoParam+0xe6>
        break;
 800878a:	bf00      	nop
 800878c:	e00a      	b.n	80087a4 <DMA_CheckFifoParam+0xe8>
        break;
 800878e:	bf00      	nop
 8008790:	e008      	b.n	80087a4 <DMA_CheckFifoParam+0xe8>
        break;
 8008792:	bf00      	nop
 8008794:	e006      	b.n	80087a4 <DMA_CheckFifoParam+0xe8>
        break;
 8008796:	bf00      	nop
 8008798:	e004      	b.n	80087a4 <DMA_CheckFifoParam+0xe8>
        break;
 800879a:	bf00      	nop
 800879c:	e002      	b.n	80087a4 <DMA_CheckFifoParam+0xe8>
        break;
 800879e:	bf00      	nop
 80087a0:	e000      	b.n	80087a4 <DMA_CheckFifoParam+0xe8>
    break;
 80087a2:	bf00      	nop
    }
  }

  return status;
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop

080087b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a38      	ldr	r2, [pc, #224]	; (80088a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d022      	beq.n	8008812 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a36      	ldr	r2, [pc, #216]	; (80088ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d01d      	beq.n	8008812 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a35      	ldr	r2, [pc, #212]	; (80088b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d018      	beq.n	8008812 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a33      	ldr	r2, [pc, #204]	; (80088b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d013      	beq.n	8008812 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a32      	ldr	r2, [pc, #200]	; (80088b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d00e      	beq.n	8008812 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a30      	ldr	r2, [pc, #192]	; (80088bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d009      	beq.n	8008812 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a2f      	ldr	r2, [pc, #188]	; (80088c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d004      	beq.n	8008812 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a2d      	ldr	r2, [pc, #180]	; (80088c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d101      	bne.n	8008816 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008812:	2301      	movs	r3, #1
 8008814:	e000      	b.n	8008818 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008816:	2300      	movs	r3, #0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d01a      	beq.n	8008852 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	b2db      	uxtb	r3, r3
 8008822:	3b08      	subs	r3, #8
 8008824:	4a28      	ldr	r2, [pc, #160]	; (80088c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008826:	fba2 2303 	umull	r2, r3, r2, r3
 800882a:	091b      	lsrs	r3, r3, #4
 800882c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4b26      	ldr	r3, [pc, #152]	; (80088cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008832:	4413      	add	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	461a      	mov	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a24      	ldr	r2, [pc, #144]	; (80088d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008840:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f003 031f 	and.w	r3, r3, #31
 8008848:	2201      	movs	r2, #1
 800884a:	409a      	lsls	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008850:	e024      	b.n	800889c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	b2db      	uxtb	r3, r3
 8008858:	3b10      	subs	r3, #16
 800885a:	4a1e      	ldr	r2, [pc, #120]	; (80088d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800885c:	fba2 2303 	umull	r2, r3, r2, r3
 8008860:	091b      	lsrs	r3, r3, #4
 8008862:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	4a1c      	ldr	r2, [pc, #112]	; (80088d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d806      	bhi.n	800887a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	4a1b      	ldr	r2, [pc, #108]	; (80088dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d902      	bls.n	800887a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3308      	adds	r3, #8
 8008878:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	4b18      	ldr	r3, [pc, #96]	; (80088e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	461a      	mov	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a16      	ldr	r2, [pc, #88]	; (80088e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800888c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f003 031f 	and.w	r3, r3, #31
 8008894:	2201      	movs	r2, #1
 8008896:	409a      	lsls	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800889c:	bf00      	nop
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	58025408 	.word	0x58025408
 80088ac:	5802541c 	.word	0x5802541c
 80088b0:	58025430 	.word	0x58025430
 80088b4:	58025444 	.word	0x58025444
 80088b8:	58025458 	.word	0x58025458
 80088bc:	5802546c 	.word	0x5802546c
 80088c0:	58025480 	.word	0x58025480
 80088c4:	58025494 	.word	0x58025494
 80088c8:	cccccccd 	.word	0xcccccccd
 80088cc:	16009600 	.word	0x16009600
 80088d0:	58025880 	.word	0x58025880
 80088d4:	aaaaaaab 	.word	0xaaaaaaab
 80088d8:	400204b8 	.word	0x400204b8
 80088dc:	4002040f 	.word	0x4002040f
 80088e0:	10008200 	.word	0x10008200
 80088e4:	40020880 	.word	0x40020880

080088e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d04a      	beq.n	8008994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2b08      	cmp	r3, #8
 8008902:	d847      	bhi.n	8008994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a25      	ldr	r2, [pc, #148]	; (80089a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d022      	beq.n	8008954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a24      	ldr	r2, [pc, #144]	; (80089a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d01d      	beq.n	8008954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a22      	ldr	r2, [pc, #136]	; (80089a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d018      	beq.n	8008954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a21      	ldr	r2, [pc, #132]	; (80089ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d013      	beq.n	8008954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a1f      	ldr	r2, [pc, #124]	; (80089b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00e      	beq.n	8008954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a1e      	ldr	r2, [pc, #120]	; (80089b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d009      	beq.n	8008954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a1c      	ldr	r2, [pc, #112]	; (80089b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d004      	beq.n	8008954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a1b      	ldr	r2, [pc, #108]	; (80089bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d101      	bne.n	8008958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008954:	2301      	movs	r3, #1
 8008956:	e000      	b.n	800895a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008958:	2300      	movs	r3, #0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	4b17      	ldr	r3, [pc, #92]	; (80089c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008962:	4413      	add	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	461a      	mov	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a15      	ldr	r2, [pc, #84]	; (80089c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008970:	671a      	str	r2, [r3, #112]	; 0x70
 8008972:	e009      	b.n	8008988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	4b14      	ldr	r3, [pc, #80]	; (80089c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008978:	4413      	add	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	461a      	mov	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a11      	ldr	r2, [pc, #68]	; (80089cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008986:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3b01      	subs	r3, #1
 800898c:	2201      	movs	r2, #1
 800898e:	409a      	lsls	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008994:	bf00      	nop
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	58025408 	.word	0x58025408
 80089a4:	5802541c 	.word	0x5802541c
 80089a8:	58025430 	.word	0x58025430
 80089ac:	58025444 	.word	0x58025444
 80089b0:	58025458 	.word	0x58025458
 80089b4:	5802546c 	.word	0x5802546c
 80089b8:	58025480 	.word	0x58025480
 80089bc:	58025494 	.word	0x58025494
 80089c0:	1600963f 	.word	0x1600963f
 80089c4:	58025940 	.word	0x58025940
 80089c8:	1000823f 	.word	0x1000823f
 80089cc:	40020940 	.word	0x40020940

080089d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b089      	sub	sp, #36	; 0x24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089da:	2300      	movs	r3, #0
 80089dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80089de:	4b86      	ldr	r3, [pc, #536]	; (8008bf8 <HAL_GPIO_Init+0x228>)
 80089e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089e2:	e18c      	b.n	8008cfe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	2101      	movs	r1, #1
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	fa01 f303 	lsl.w	r3, r1, r3
 80089f0:	4013      	ands	r3, r2
 80089f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 817e 	beq.w	8008cf8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	f003 0303 	and.w	r3, r3, #3
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d005      	beq.n	8008a14 <HAL_GPIO_Init+0x44>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	f003 0303 	and.w	r3, r3, #3
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d130      	bne.n	8008a76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	2203      	movs	r2, #3
 8008a20:	fa02 f303 	lsl.w	r3, r2, r3
 8008a24:	43db      	mvns	r3, r3
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	4013      	ands	r3, r2
 8008a2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	68da      	ldr	r2, [r3, #12]
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	fa02 f303 	lsl.w	r3, r2, r3
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	69ba      	ldr	r2, [r7, #24]
 8008a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a52:	43db      	mvns	r3, r3
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	4013      	ands	r3, r2
 8008a58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	091b      	lsrs	r3, r3, #4
 8008a60:	f003 0201 	and.w	r2, r3, #1
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d017      	beq.n	8008ab2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	005b      	lsls	r3, r3, #1
 8008a8c:	2203      	movs	r2, #3
 8008a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a92:	43db      	mvns	r3, r3
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	4013      	ands	r3, r2
 8008a98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	689a      	ldr	r2, [r3, #8]
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d123      	bne.n	8008b06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	08da      	lsrs	r2, r3, #3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3208      	adds	r2, #8
 8008ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	f003 0307 	and.w	r3, r3, #7
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	220f      	movs	r2, #15
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	43db      	mvns	r3, r3
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	691a      	ldr	r2, [r3, #16]
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	f003 0307 	and.w	r3, r3, #7
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	fa02 f303 	lsl.w	r3, r2, r3
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	08da      	lsrs	r2, r3, #3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	3208      	adds	r2, #8
 8008b00:	69b9      	ldr	r1, [r7, #24]
 8008b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	2203      	movs	r2, #3
 8008b12:	fa02 f303 	lsl.w	r3, r2, r3
 8008b16:	43db      	mvns	r3, r3
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	f003 0203 	and.w	r2, r3, #3
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	005b      	lsls	r3, r3, #1
 8008b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 80d8 	beq.w	8008cf8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b48:	4b2c      	ldr	r3, [pc, #176]	; (8008bfc <HAL_GPIO_Init+0x22c>)
 8008b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b4e:	4a2b      	ldr	r2, [pc, #172]	; (8008bfc <HAL_GPIO_Init+0x22c>)
 8008b50:	f043 0302 	orr.w	r3, r3, #2
 8008b54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008b58:	4b28      	ldr	r3, [pc, #160]	; (8008bfc <HAL_GPIO_Init+0x22c>)
 8008b5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b5e:	f003 0302 	and.w	r3, r3, #2
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b66:	4a26      	ldr	r2, [pc, #152]	; (8008c00 <HAL_GPIO_Init+0x230>)
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	089b      	lsrs	r3, r3, #2
 8008b6c:	3302      	adds	r3, #2
 8008b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	f003 0303 	and.w	r3, r3, #3
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	220f      	movs	r2, #15
 8008b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b82:	43db      	mvns	r3, r3
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	4013      	ands	r3, r2
 8008b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a1d      	ldr	r2, [pc, #116]	; (8008c04 <HAL_GPIO_Init+0x234>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d04a      	beq.n	8008c28 <HAL_GPIO_Init+0x258>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a1c      	ldr	r2, [pc, #112]	; (8008c08 <HAL_GPIO_Init+0x238>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d02b      	beq.n	8008bf2 <HAL_GPIO_Init+0x222>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a1b      	ldr	r2, [pc, #108]	; (8008c0c <HAL_GPIO_Init+0x23c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d025      	beq.n	8008bee <HAL_GPIO_Init+0x21e>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a1a      	ldr	r2, [pc, #104]	; (8008c10 <HAL_GPIO_Init+0x240>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d01f      	beq.n	8008bea <HAL_GPIO_Init+0x21a>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a19      	ldr	r2, [pc, #100]	; (8008c14 <HAL_GPIO_Init+0x244>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d019      	beq.n	8008be6 <HAL_GPIO_Init+0x216>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a18      	ldr	r2, [pc, #96]	; (8008c18 <HAL_GPIO_Init+0x248>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d013      	beq.n	8008be2 <HAL_GPIO_Init+0x212>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a17      	ldr	r2, [pc, #92]	; (8008c1c <HAL_GPIO_Init+0x24c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d00d      	beq.n	8008bde <HAL_GPIO_Init+0x20e>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a16      	ldr	r2, [pc, #88]	; (8008c20 <HAL_GPIO_Init+0x250>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d007      	beq.n	8008bda <HAL_GPIO_Init+0x20a>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a15      	ldr	r2, [pc, #84]	; (8008c24 <HAL_GPIO_Init+0x254>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d101      	bne.n	8008bd6 <HAL_GPIO_Init+0x206>
 8008bd2:	2309      	movs	r3, #9
 8008bd4:	e029      	b.n	8008c2a <HAL_GPIO_Init+0x25a>
 8008bd6:	230a      	movs	r3, #10
 8008bd8:	e027      	b.n	8008c2a <HAL_GPIO_Init+0x25a>
 8008bda:	2307      	movs	r3, #7
 8008bdc:	e025      	b.n	8008c2a <HAL_GPIO_Init+0x25a>
 8008bde:	2306      	movs	r3, #6
 8008be0:	e023      	b.n	8008c2a <HAL_GPIO_Init+0x25a>
 8008be2:	2305      	movs	r3, #5
 8008be4:	e021      	b.n	8008c2a <HAL_GPIO_Init+0x25a>
 8008be6:	2304      	movs	r3, #4
 8008be8:	e01f      	b.n	8008c2a <HAL_GPIO_Init+0x25a>
 8008bea:	2303      	movs	r3, #3
 8008bec:	e01d      	b.n	8008c2a <HAL_GPIO_Init+0x25a>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	e01b      	b.n	8008c2a <HAL_GPIO_Init+0x25a>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e019      	b.n	8008c2a <HAL_GPIO_Init+0x25a>
 8008bf6:	bf00      	nop
 8008bf8:	58000080 	.word	0x58000080
 8008bfc:	58024400 	.word	0x58024400
 8008c00:	58000400 	.word	0x58000400
 8008c04:	58020000 	.word	0x58020000
 8008c08:	58020400 	.word	0x58020400
 8008c0c:	58020800 	.word	0x58020800
 8008c10:	58020c00 	.word	0x58020c00
 8008c14:	58021000 	.word	0x58021000
 8008c18:	58021400 	.word	0x58021400
 8008c1c:	58021800 	.word	0x58021800
 8008c20:	58021c00 	.word	0x58021c00
 8008c24:	58022400 	.word	0x58022400
 8008c28:	2300      	movs	r3, #0
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	f002 0203 	and.w	r2, r2, #3
 8008c30:	0092      	lsls	r2, r2, #2
 8008c32:	4093      	lsls	r3, r2
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c3a:	4938      	ldr	r1, [pc, #224]	; (8008d1c <HAL_GPIO_Init+0x34c>)
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	089b      	lsrs	r3, r3, #2
 8008c40:	3302      	adds	r3, #2
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	43db      	mvns	r3, r3
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	4013      	ands	r3, r2
 8008c58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008c66:	69ba      	ldr	r2, [r7, #24]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	43db      	mvns	r3, r3
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	4013      	ands	r3, r2
 8008c86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d003      	beq.n	8008c9c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	43db      	mvns	r3, r3
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	43db      	mvns	r3, r3
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	4013      	ands	r3, r2
 8008cdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	fa22 f303 	lsr.w	r3, r2, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f47f ae6b 	bne.w	80089e4 <HAL_GPIO_Init+0x14>
  }
}
 8008d0e:	bf00      	nop
 8008d10:	bf00      	nop
 8008d12:	3724      	adds	r7, #36	; 0x24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	58000400 	.word	0x58000400

08008d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	807b      	strh	r3, [r7, #2]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d30:	787b      	ldrb	r3, [r7, #1]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d36:	887a      	ldrh	r2, [r7, #2]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008d3c:	e003      	b.n	8008d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d3e:	887b      	ldrh	r3, [r7, #2]
 8008d40:	041a      	lsls	r2, r3, #16
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	619a      	str	r2, [r3, #24]
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
	...

08008d54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d5c:	4b19      	ldr	r3, [pc, #100]	; (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f003 0304 	and.w	r3, r3, #4
 8008d64:	2b04      	cmp	r3, #4
 8008d66:	d00a      	beq.n	8008d7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d68:	4b16      	ldr	r3, [pc, #88]	; (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f003 0307 	and.w	r3, r3, #7
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d001      	beq.n	8008d7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e01f      	b.n	8008dba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e01d      	b.n	8008dba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d7e:	4b11      	ldr	r3, [pc, #68]	; (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f023 0207 	bic.w	r2, r3, #7
 8008d86:	490f      	ldr	r1, [pc, #60]	; (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d8e:	f7fc fec9 	bl	8005b24 <HAL_GetTick>
 8008d92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d94:	e009      	b.n	8008daa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d96:	f7fc fec5 	bl	8005b24 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008da4:	d901      	bls.n	8008daa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e007      	b.n	8008dba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008daa:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008db6:	d1ee      	bne.n	8008d96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	58024800 	.word	0x58024800

08008dc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08c      	sub	sp, #48	; 0x30
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e39d      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 8087 	beq.w	8008ef6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008de8:	4b88      	ldr	r3, [pc, #544]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008df2:	4b86      	ldr	r3, [pc, #536]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	2b10      	cmp	r3, #16
 8008dfc:	d007      	beq.n	8008e0e <HAL_RCC_OscConfig+0x46>
 8008dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e00:	2b18      	cmp	r3, #24
 8008e02:	d110      	bne.n	8008e26 <HAL_RCC_OscConfig+0x5e>
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	f003 0303 	and.w	r3, r3, #3
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d10b      	bne.n	8008e26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e0e:	4b7f      	ldr	r3, [pc, #508]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d06c      	beq.n	8008ef4 <HAL_RCC_OscConfig+0x12c>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d168      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e377      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e2e:	d106      	bne.n	8008e3e <HAL_RCC_OscConfig+0x76>
 8008e30:	4b76      	ldr	r3, [pc, #472]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a75      	ldr	r2, [pc, #468]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e3a:	6013      	str	r3, [r2, #0]
 8008e3c:	e02e      	b.n	8008e9c <HAL_RCC_OscConfig+0xd4>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10c      	bne.n	8008e60 <HAL_RCC_OscConfig+0x98>
 8008e46:	4b71      	ldr	r3, [pc, #452]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a70      	ldr	r2, [pc, #448]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e50:	6013      	str	r3, [r2, #0]
 8008e52:	4b6e      	ldr	r3, [pc, #440]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a6d      	ldr	r2, [pc, #436]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e5c:	6013      	str	r3, [r2, #0]
 8008e5e:	e01d      	b.n	8008e9c <HAL_RCC_OscConfig+0xd4>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e68:	d10c      	bne.n	8008e84 <HAL_RCC_OscConfig+0xbc>
 8008e6a:	4b68      	ldr	r3, [pc, #416]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a67      	ldr	r2, [pc, #412]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	4b65      	ldr	r3, [pc, #404]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a64      	ldr	r2, [pc, #400]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e80:	6013      	str	r3, [r2, #0]
 8008e82:	e00b      	b.n	8008e9c <HAL_RCC_OscConfig+0xd4>
 8008e84:	4b61      	ldr	r3, [pc, #388]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a60      	ldr	r2, [pc, #384]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	4b5e      	ldr	r3, [pc, #376]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a5d      	ldr	r2, [pc, #372]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d013      	beq.n	8008ecc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea4:	f7fc fe3e 	bl	8005b24 <HAL_GetTick>
 8008ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008eaa:	e008      	b.n	8008ebe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008eac:	f7fc fe3a 	bl	8005b24 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b64      	cmp	r3, #100	; 0x64
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e32b      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ebe:	4b53      	ldr	r3, [pc, #332]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0f0      	beq.n	8008eac <HAL_RCC_OscConfig+0xe4>
 8008eca:	e014      	b.n	8008ef6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ecc:	f7fc fe2a 	bl	8005b24 <HAL_GetTick>
 8008ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ed2:	e008      	b.n	8008ee6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ed4:	f7fc fe26 	bl	8005b24 <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	2b64      	cmp	r3, #100	; 0x64
 8008ee0:	d901      	bls.n	8008ee6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e317      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ee6:	4b49      	ldr	r3, [pc, #292]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1f0      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x10c>
 8008ef2:	e000      	b.n	8008ef6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f000 808c 	beq.w	800901c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f04:	4b41      	ldr	r3, [pc, #260]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f0c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f0e:	4b3f      	ldr	r3, [pc, #252]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f12:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d007      	beq.n	8008f2a <HAL_RCC_OscConfig+0x162>
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	2b18      	cmp	r3, #24
 8008f1e:	d137      	bne.n	8008f90 <HAL_RCC_OscConfig+0x1c8>
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	f003 0303 	and.w	r3, r3, #3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d132      	bne.n	8008f90 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f2a:	4b38      	ldr	r3, [pc, #224]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0304 	and.w	r3, r3, #4
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d005      	beq.n	8008f42 <HAL_RCC_OscConfig+0x17a>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e2e9      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f42:	4b32      	ldr	r3, [pc, #200]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f023 0219 	bic.w	r2, r3, #25
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	492f      	ldr	r1, [pc, #188]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008f50:	4313      	orrs	r3, r2
 8008f52:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f54:	f7fc fde6 	bl	8005b24 <HAL_GetTick>
 8008f58:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f5a:	e008      	b.n	8008f6e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f5c:	f7fc fde2 	bl	8005b24 <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d901      	bls.n	8008f6e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e2d3      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f6e:	4b27      	ldr	r3, [pc, #156]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0f0      	beq.n	8008f5c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f7a:	4b24      	ldr	r3, [pc, #144]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	061b      	lsls	r3, r3, #24
 8008f88:	4920      	ldr	r1, [pc, #128]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f8e:	e045      	b.n	800901c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d026      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f98:	4b1c      	ldr	r3, [pc, #112]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f023 0219 	bic.w	r2, r3, #25
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	4919      	ldr	r1, [pc, #100]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008faa:	f7fc fdbb 	bl	8005b24 <HAL_GetTick>
 8008fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fb0:	e008      	b.n	8008fc4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fb2:	f7fc fdb7 	bl	8005b24 <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d901      	bls.n	8008fc4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e2a8      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fc4:	4b11      	ldr	r3, [pc, #68]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0304 	and.w	r3, r3, #4
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d0f0      	beq.n	8008fb2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fd0:	4b0e      	ldr	r3, [pc, #56]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	061b      	lsls	r3, r3, #24
 8008fde:	490b      	ldr	r1, [pc, #44]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	604b      	str	r3, [r1, #4]
 8008fe4:	e01a      	b.n	800901c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fe6:	4b09      	ldr	r3, [pc, #36]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a08      	ldr	r2, [pc, #32]	; (800900c <HAL_RCC_OscConfig+0x244>)
 8008fec:	f023 0301 	bic.w	r3, r3, #1
 8008ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff2:	f7fc fd97 	bl	8005b24 <HAL_GetTick>
 8008ff6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ff8:	e00a      	b.n	8009010 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ffa:	f7fc fd93 	bl	8005b24 <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	2b02      	cmp	r3, #2
 8009006:	d903      	bls.n	8009010 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	e284      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
 800900c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009010:	4b96      	ldr	r3, [pc, #600]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0304 	and.w	r3, r3, #4
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1ee      	bne.n	8008ffa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b00      	cmp	r3, #0
 8009026:	d06a      	beq.n	80090fe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009028:	4b90      	ldr	r3, [pc, #576]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009030:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009032:	4b8e      	ldr	r3, [pc, #568]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009036:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	2b08      	cmp	r3, #8
 800903c:	d007      	beq.n	800904e <HAL_RCC_OscConfig+0x286>
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	2b18      	cmp	r3, #24
 8009042:	d11b      	bne.n	800907c <HAL_RCC_OscConfig+0x2b4>
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	2b01      	cmp	r3, #1
 800904c:	d116      	bne.n	800907c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800904e:	4b87      	ldr	r3, [pc, #540]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009056:	2b00      	cmp	r3, #0
 8009058:	d005      	beq.n	8009066 <HAL_RCC_OscConfig+0x29e>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	2b80      	cmp	r3, #128	; 0x80
 8009060:	d001      	beq.n	8009066 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e257      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009066:	4b81      	ldr	r3, [pc, #516]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	061b      	lsls	r3, r3, #24
 8009074:	497d      	ldr	r1, [pc, #500]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009076:	4313      	orrs	r3, r2
 8009078:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800907a:	e040      	b.n	80090fe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	69db      	ldr	r3, [r3, #28]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d023      	beq.n	80090cc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009084:	4b79      	ldr	r3, [pc, #484]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a78      	ldr	r2, [pc, #480]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 800908a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800908e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009090:	f7fc fd48 	bl	8005b24 <HAL_GetTick>
 8009094:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009096:	e008      	b.n	80090aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009098:	f7fc fd44 	bl	8005b24 <HAL_GetTick>
 800909c:	4602      	mov	r2, r0
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e235      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090aa:	4b70      	ldr	r3, [pc, #448]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0f0      	beq.n	8009098 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090b6:	4b6d      	ldr	r3, [pc, #436]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	061b      	lsls	r3, r3, #24
 80090c4:	4969      	ldr	r1, [pc, #420]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60cb      	str	r3, [r1, #12]
 80090ca:	e018      	b.n	80090fe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80090cc:	4b67      	ldr	r3, [pc, #412]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a66      	ldr	r2, [pc, #408]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 80090d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d8:	f7fc fd24 	bl	8005b24 <HAL_GetTick>
 80090dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090de:	e008      	b.n	80090f2 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80090e0:	f7fc fd20 	bl	8005b24 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d901      	bls.n	80090f2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e211      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090f2:	4b5e      	ldr	r3, [pc, #376]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1f0      	bne.n	80090e0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0308 	and.w	r3, r3, #8
 8009106:	2b00      	cmp	r3, #0
 8009108:	d036      	beq.n	8009178 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d019      	beq.n	8009146 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009112:	4b56      	ldr	r3, [pc, #344]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009116:	4a55      	ldr	r2, [pc, #340]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009118:	f043 0301 	orr.w	r3, r3, #1
 800911c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800911e:	f7fc fd01 	bl	8005b24 <HAL_GetTick>
 8009122:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009124:	e008      	b.n	8009138 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009126:	f7fc fcfd 	bl	8005b24 <HAL_GetTick>
 800912a:	4602      	mov	r2, r0
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	2b02      	cmp	r3, #2
 8009132:	d901      	bls.n	8009138 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e1ee      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009138:	4b4c      	ldr	r3, [pc, #304]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 800913a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800913c:	f003 0302 	and.w	r3, r3, #2
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0f0      	beq.n	8009126 <HAL_RCC_OscConfig+0x35e>
 8009144:	e018      	b.n	8009178 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009146:	4b49      	ldr	r3, [pc, #292]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800914a:	4a48      	ldr	r2, [pc, #288]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 800914c:	f023 0301 	bic.w	r3, r3, #1
 8009150:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009152:	f7fc fce7 	bl	8005b24 <HAL_GetTick>
 8009156:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009158:	e008      	b.n	800916c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800915a:	f7fc fce3 	bl	8005b24 <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	2b02      	cmp	r3, #2
 8009166:	d901      	bls.n	800916c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e1d4      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800916c:	4b3f      	ldr	r3, [pc, #252]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 800916e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009170:	f003 0302 	and.w	r3, r3, #2
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1f0      	bne.n	800915a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0320 	and.w	r3, r3, #32
 8009180:	2b00      	cmp	r3, #0
 8009182:	d036      	beq.n	80091f2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d019      	beq.n	80091c0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800918c:	4b37      	ldr	r3, [pc, #220]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a36      	ldr	r2, [pc, #216]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009192:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009196:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009198:	f7fc fcc4 	bl	8005b24 <HAL_GetTick>
 800919c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800919e:	e008      	b.n	80091b2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80091a0:	f7fc fcc0 	bl	8005b24 <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d901      	bls.n	80091b2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e1b1      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80091b2:	4b2e      	ldr	r3, [pc, #184]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0f0      	beq.n	80091a0 <HAL_RCC_OscConfig+0x3d8>
 80091be:	e018      	b.n	80091f2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80091c0:	4b2a      	ldr	r3, [pc, #168]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a29      	ldr	r2, [pc, #164]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 80091c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80091cc:	f7fc fcaa 	bl	8005b24 <HAL_GetTick>
 80091d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091d2:	e008      	b.n	80091e6 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80091d4:	f7fc fca6 	bl	8005b24 <HAL_GetTick>
 80091d8:	4602      	mov	r2, r0
 80091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d901      	bls.n	80091e6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e197      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091e6:	4b21      	ldr	r3, [pc, #132]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f0      	bne.n	80091d4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 0304 	and.w	r3, r3, #4
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f000 8086 	beq.w	800930c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009200:	4b1b      	ldr	r3, [pc, #108]	; (8009270 <HAL_RCC_OscConfig+0x4a8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a1a      	ldr	r2, [pc, #104]	; (8009270 <HAL_RCC_OscConfig+0x4a8>)
 8009206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800920a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800920c:	f7fc fc8a 	bl	8005b24 <HAL_GetTick>
 8009210:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009212:	e008      	b.n	8009226 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009214:	f7fc fc86 	bl	8005b24 <HAL_GetTick>
 8009218:	4602      	mov	r2, r0
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	2b64      	cmp	r3, #100	; 0x64
 8009220:	d901      	bls.n	8009226 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009222:	2303      	movs	r3, #3
 8009224:	e177      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009226:	4b12      	ldr	r3, [pc, #72]	; (8009270 <HAL_RCC_OscConfig+0x4a8>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922e:	2b00      	cmp	r3, #0
 8009230:	d0f0      	beq.n	8009214 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d106      	bne.n	8009248 <HAL_RCC_OscConfig+0x480>
 800923a:	4b0c      	ldr	r3, [pc, #48]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 800923c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923e:	4a0b      	ldr	r2, [pc, #44]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009240:	f043 0301 	orr.w	r3, r3, #1
 8009244:	6713      	str	r3, [r2, #112]	; 0x70
 8009246:	e032      	b.n	80092ae <HAL_RCC_OscConfig+0x4e6>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d111      	bne.n	8009274 <HAL_RCC_OscConfig+0x4ac>
 8009250:	4b06      	ldr	r3, [pc, #24]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009254:	4a05      	ldr	r2, [pc, #20]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009256:	f023 0301 	bic.w	r3, r3, #1
 800925a:	6713      	str	r3, [r2, #112]	; 0x70
 800925c:	4b03      	ldr	r3, [pc, #12]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 800925e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009260:	4a02      	ldr	r2, [pc, #8]	; (800926c <HAL_RCC_OscConfig+0x4a4>)
 8009262:	f023 0304 	bic.w	r3, r3, #4
 8009266:	6713      	str	r3, [r2, #112]	; 0x70
 8009268:	e021      	b.n	80092ae <HAL_RCC_OscConfig+0x4e6>
 800926a:	bf00      	nop
 800926c:	58024400 	.word	0x58024400
 8009270:	58024800 	.word	0x58024800
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	2b05      	cmp	r3, #5
 800927a:	d10c      	bne.n	8009296 <HAL_RCC_OscConfig+0x4ce>
 800927c:	4b83      	ldr	r3, [pc, #524]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 800927e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009280:	4a82      	ldr	r2, [pc, #520]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009282:	f043 0304 	orr.w	r3, r3, #4
 8009286:	6713      	str	r3, [r2, #112]	; 0x70
 8009288:	4b80      	ldr	r3, [pc, #512]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 800928a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928c:	4a7f      	ldr	r2, [pc, #508]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 800928e:	f043 0301 	orr.w	r3, r3, #1
 8009292:	6713      	str	r3, [r2, #112]	; 0x70
 8009294:	e00b      	b.n	80092ae <HAL_RCC_OscConfig+0x4e6>
 8009296:	4b7d      	ldr	r3, [pc, #500]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929a:	4a7c      	ldr	r2, [pc, #496]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 800929c:	f023 0301 	bic.w	r3, r3, #1
 80092a0:	6713      	str	r3, [r2, #112]	; 0x70
 80092a2:	4b7a      	ldr	r3, [pc, #488]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 80092a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a6:	4a79      	ldr	r2, [pc, #484]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 80092a8:	f023 0304 	bic.w	r3, r3, #4
 80092ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d015      	beq.n	80092e2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092b6:	f7fc fc35 	bl	8005b24 <HAL_GetTick>
 80092ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092bc:	e00a      	b.n	80092d4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092be:	f7fc fc31 	bl	8005b24 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d901      	bls.n	80092d4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e120      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092d4:	4b6d      	ldr	r3, [pc, #436]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 80092d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d0ee      	beq.n	80092be <HAL_RCC_OscConfig+0x4f6>
 80092e0:	e014      	b.n	800930c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e2:	f7fc fc1f 	bl	8005b24 <HAL_GetTick>
 80092e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092e8:	e00a      	b.n	8009300 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092ea:	f7fc fc1b 	bl	8005b24 <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d901      	bls.n	8009300 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e10a      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009300:	4b62      	ldr	r3, [pc, #392]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009304:	f003 0302 	and.w	r3, r3, #2
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1ee      	bne.n	80092ea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 80ff 	beq.w	8009514 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009316:	4b5d      	ldr	r3, [pc, #372]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800931e:	2b18      	cmp	r3, #24
 8009320:	f000 80ba 	beq.w	8009498 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	2b02      	cmp	r3, #2
 800932a:	f040 8095 	bne.w	8009458 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800932e:	4b57      	ldr	r3, [pc, #348]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a56      	ldr	r2, [pc, #344]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009334:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800933a:	f7fc fbf3 	bl	8005b24 <HAL_GetTick>
 800933e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009340:	e008      	b.n	8009354 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009342:	f7fc fbef 	bl	8005b24 <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	2b02      	cmp	r3, #2
 800934e:	d901      	bls.n	8009354 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e0e0      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009354:	4b4d      	ldr	r3, [pc, #308]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1f0      	bne.n	8009342 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009360:	4b4a      	ldr	r3, [pc, #296]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009364:	4b4a      	ldr	r3, [pc, #296]	; (8009490 <HAL_RCC_OscConfig+0x6c8>)
 8009366:	4013      	ands	r3, r2
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009370:	0112      	lsls	r2, r2, #4
 8009372:	430a      	orrs	r2, r1
 8009374:	4945      	ldr	r1, [pc, #276]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009376:	4313      	orrs	r3, r2
 8009378:	628b      	str	r3, [r1, #40]	; 0x28
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937e:	3b01      	subs	r3, #1
 8009380:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009388:	3b01      	subs	r3, #1
 800938a:	025b      	lsls	r3, r3, #9
 800938c:	b29b      	uxth	r3, r3
 800938e:	431a      	orrs	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009394:	3b01      	subs	r3, #1
 8009396:	041b      	lsls	r3, r3, #16
 8009398:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800939c:	431a      	orrs	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a2:	3b01      	subs	r3, #1
 80093a4:	061b      	lsls	r3, r3, #24
 80093a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80093aa:	4938      	ldr	r1, [pc, #224]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80093b0:	4b36      	ldr	r3, [pc, #216]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b4:	4a35      	ldr	r2, [pc, #212]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093b6:	f023 0301 	bic.w	r3, r3, #1
 80093ba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80093bc:	4b33      	ldr	r3, [pc, #204]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093c0:	4b34      	ldr	r3, [pc, #208]	; (8009494 <HAL_RCC_OscConfig+0x6cc>)
 80093c2:	4013      	ands	r3, r2
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80093c8:	00d2      	lsls	r2, r2, #3
 80093ca:	4930      	ldr	r1, [pc, #192]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80093d0:	4b2e      	ldr	r3, [pc, #184]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d4:	f023 020c 	bic.w	r2, r3, #12
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093dc:	492b      	ldr	r1, [pc, #172]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80093e2:	4b2a      	ldr	r3, [pc, #168]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e6:	f023 0202 	bic.w	r2, r3, #2
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ee:	4927      	ldr	r1, [pc, #156]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093f0:	4313      	orrs	r3, r2
 80093f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80093f4:	4b25      	ldr	r3, [pc, #148]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	4a24      	ldr	r2, [pc, #144]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 80093fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009400:	4b22      	ldr	r3, [pc, #136]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	4a21      	ldr	r2, [pc, #132]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800940a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800940c:	4b1f      	ldr	r3, [pc, #124]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 800940e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009410:	4a1e      	ldr	r2, [pc, #120]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009412:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009416:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009418:	4b1c      	ldr	r3, [pc, #112]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 800941a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941c:	4a1b      	ldr	r2, [pc, #108]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 800941e:	f043 0301 	orr.w	r3, r3, #1
 8009422:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009424:	4b19      	ldr	r3, [pc, #100]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a18      	ldr	r2, [pc, #96]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 800942a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800942e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009430:	f7fc fb78 	bl	8005b24 <HAL_GetTick>
 8009434:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009436:	e008      	b.n	800944a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009438:	f7fc fb74 	bl	8005b24 <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2b02      	cmp	r3, #2
 8009444:	d901      	bls.n	800944a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e065      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800944a:	4b10      	ldr	r3, [pc, #64]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0f0      	beq.n	8009438 <HAL_RCC_OscConfig+0x670>
 8009456:	e05d      	b.n	8009514 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009458:	4b0c      	ldr	r3, [pc, #48]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a0b      	ldr	r2, [pc, #44]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 800945e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009464:	f7fc fb5e 	bl	8005b24 <HAL_GetTick>
 8009468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800946a:	e008      	b.n	800947e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800946c:	f7fc fb5a 	bl	8005b24 <HAL_GetTick>
 8009470:	4602      	mov	r2, r0
 8009472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	2b02      	cmp	r3, #2
 8009478:	d901      	bls.n	800947e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e04b      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800947e:	4b03      	ldr	r3, [pc, #12]	; (800948c <HAL_RCC_OscConfig+0x6c4>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1f0      	bne.n	800946c <HAL_RCC_OscConfig+0x6a4>
 800948a:	e043      	b.n	8009514 <HAL_RCC_OscConfig+0x74c>
 800948c:	58024400 	.word	0x58024400
 8009490:	fffffc0c 	.word	0xfffffc0c
 8009494:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009498:	4b21      	ldr	r3, [pc, #132]	; (8009520 <HAL_RCC_OscConfig+0x758>)
 800949a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800949e:	4b20      	ldr	r3, [pc, #128]	; (8009520 <HAL_RCC_OscConfig+0x758>)
 80094a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d031      	beq.n	8009510 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f003 0203 	and.w	r2, r3, #3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d12a      	bne.n	8009510 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	091b      	lsrs	r3, r3, #4
 80094be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d122      	bne.n	8009510 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d11a      	bne.n	8009510 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	0a5b      	lsrs	r3, r3, #9
 80094de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d111      	bne.n	8009510 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	0c1b      	lsrs	r3, r3, #16
 80094f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d108      	bne.n	8009510 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	0e1b      	lsrs	r3, r3, #24
 8009502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800950c:	429a      	cmp	r2, r3
 800950e:	d001      	beq.n	8009514 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e000      	b.n	8009516 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3730      	adds	r7, #48	; 0x30
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	58024400 	.word	0x58024400

08009524 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e19c      	b.n	8009872 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009538:	4b8a      	ldr	r3, [pc, #552]	; (8009764 <HAL_RCC_ClockConfig+0x240>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 030f 	and.w	r3, r3, #15
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	429a      	cmp	r2, r3
 8009544:	d910      	bls.n	8009568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009546:	4b87      	ldr	r3, [pc, #540]	; (8009764 <HAL_RCC_ClockConfig+0x240>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f023 020f 	bic.w	r2, r3, #15
 800954e:	4985      	ldr	r1, [pc, #532]	; (8009764 <HAL_RCC_ClockConfig+0x240>)
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	4313      	orrs	r3, r2
 8009554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009556:	4b83      	ldr	r3, [pc, #524]	; (8009764 <HAL_RCC_ClockConfig+0x240>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 030f 	and.w	r3, r3, #15
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d001      	beq.n	8009568 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e184      	b.n	8009872 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 0304 	and.w	r3, r3, #4
 8009570:	2b00      	cmp	r3, #0
 8009572:	d010      	beq.n	8009596 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	691a      	ldr	r2, [r3, #16]
 8009578:	4b7b      	ldr	r3, [pc, #492]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009580:	429a      	cmp	r2, r3
 8009582:	d908      	bls.n	8009596 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009584:	4b78      	ldr	r3, [pc, #480]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	4975      	ldr	r1, [pc, #468]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 8009592:	4313      	orrs	r3, r2
 8009594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0308 	and.w	r3, r3, #8
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d010      	beq.n	80095c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	695a      	ldr	r2, [r3, #20]
 80095a6:	4b70      	ldr	r3, [pc, #448]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d908      	bls.n	80095c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095b2:	4b6d      	ldr	r3, [pc, #436]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	496a      	ldr	r1, [pc, #424]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 0310 	and.w	r3, r3, #16
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d010      	beq.n	80095f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	699a      	ldr	r2, [r3, #24]
 80095d4:	4b64      	ldr	r3, [pc, #400]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095dc:	429a      	cmp	r2, r3
 80095de:	d908      	bls.n	80095f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095e0:	4b61      	ldr	r3, [pc, #388]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	495e      	ldr	r1, [pc, #376]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 0320 	and.w	r3, r3, #32
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d010      	beq.n	8009620 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	69da      	ldr	r2, [r3, #28]
 8009602:	4b59      	ldr	r3, [pc, #356]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800960a:	429a      	cmp	r2, r3
 800960c:	d908      	bls.n	8009620 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800960e:	4b56      	ldr	r3, [pc, #344]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 8009610:	6a1b      	ldr	r3, [r3, #32]
 8009612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	4953      	ldr	r1, [pc, #332]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 800961c:	4313      	orrs	r3, r2
 800961e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0302 	and.w	r3, r3, #2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d010      	beq.n	800964e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68da      	ldr	r2, [r3, #12]
 8009630:	4b4d      	ldr	r3, [pc, #308]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	f003 030f 	and.w	r3, r3, #15
 8009638:	429a      	cmp	r2, r3
 800963a:	d908      	bls.n	800964e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800963c:	4b4a      	ldr	r3, [pc, #296]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	f023 020f 	bic.w	r2, r3, #15
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	4947      	ldr	r1, [pc, #284]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 800964a:	4313      	orrs	r3, r2
 800964c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d055      	beq.n	8009706 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800965a:	4b43      	ldr	r3, [pc, #268]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	4940      	ldr	r1, [pc, #256]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 8009668:	4313      	orrs	r3, r2
 800966a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	2b02      	cmp	r3, #2
 8009672:	d107      	bne.n	8009684 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009674:	4b3c      	ldr	r3, [pc, #240]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d121      	bne.n	80096c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e0f6      	b.n	8009872 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	2b03      	cmp	r3, #3
 800968a:	d107      	bne.n	800969c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800968c:	4b36      	ldr	r3, [pc, #216]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d115      	bne.n	80096c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e0ea      	b.n	8009872 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d107      	bne.n	80096b4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096a4:	4b30      	ldr	r3, [pc, #192]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d109      	bne.n	80096c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e0de      	b.n	8009872 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096b4:	4b2c      	ldr	r3, [pc, #176]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0304 	and.w	r3, r3, #4
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e0d6      	b.n	8009872 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096c4:	4b28      	ldr	r3, [pc, #160]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	f023 0207 	bic.w	r2, r3, #7
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	4925      	ldr	r1, [pc, #148]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096d6:	f7fc fa25 	bl	8005b24 <HAL_GetTick>
 80096da:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096dc:	e00a      	b.n	80096f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096de:	f7fc fa21 	bl	8005b24 <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d901      	bls.n	80096f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e0be      	b.n	8009872 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096f4:	4b1c      	ldr	r3, [pc, #112]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	429a      	cmp	r2, r3
 8009704:	d1eb      	bne.n	80096de <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 0302 	and.w	r3, r3, #2
 800970e:	2b00      	cmp	r3, #0
 8009710:	d010      	beq.n	8009734 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68da      	ldr	r2, [r3, #12]
 8009716:	4b14      	ldr	r3, [pc, #80]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	f003 030f 	and.w	r3, r3, #15
 800971e:	429a      	cmp	r2, r3
 8009720:	d208      	bcs.n	8009734 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009722:	4b11      	ldr	r3, [pc, #68]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	f023 020f 	bic.w	r2, r3, #15
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	490e      	ldr	r1, [pc, #56]	; (8009768 <HAL_RCC_ClockConfig+0x244>)
 8009730:	4313      	orrs	r3, r2
 8009732:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009734:	4b0b      	ldr	r3, [pc, #44]	; (8009764 <HAL_RCC_ClockConfig+0x240>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 030f 	and.w	r3, r3, #15
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	429a      	cmp	r2, r3
 8009740:	d214      	bcs.n	800976c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009742:	4b08      	ldr	r3, [pc, #32]	; (8009764 <HAL_RCC_ClockConfig+0x240>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f023 020f 	bic.w	r2, r3, #15
 800974a:	4906      	ldr	r1, [pc, #24]	; (8009764 <HAL_RCC_ClockConfig+0x240>)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	4313      	orrs	r3, r2
 8009750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009752:	4b04      	ldr	r3, [pc, #16]	; (8009764 <HAL_RCC_ClockConfig+0x240>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 030f 	and.w	r3, r3, #15
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	429a      	cmp	r2, r3
 800975e:	d005      	beq.n	800976c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e086      	b.n	8009872 <HAL_RCC_ClockConfig+0x34e>
 8009764:	52002000 	.word	0x52002000
 8009768:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 0304 	and.w	r3, r3, #4
 8009774:	2b00      	cmp	r3, #0
 8009776:	d010      	beq.n	800979a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	691a      	ldr	r2, [r3, #16]
 800977c:	4b3f      	ldr	r3, [pc, #252]	; (800987c <HAL_RCC_ClockConfig+0x358>)
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009784:	429a      	cmp	r2, r3
 8009786:	d208      	bcs.n	800979a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009788:	4b3c      	ldr	r3, [pc, #240]	; (800987c <HAL_RCC_ClockConfig+0x358>)
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	4939      	ldr	r1, [pc, #228]	; (800987c <HAL_RCC_ClockConfig+0x358>)
 8009796:	4313      	orrs	r3, r2
 8009798:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0308 	and.w	r3, r3, #8
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d010      	beq.n	80097c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	695a      	ldr	r2, [r3, #20]
 80097aa:	4b34      	ldr	r3, [pc, #208]	; (800987c <HAL_RCC_ClockConfig+0x358>)
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d208      	bcs.n	80097c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80097b6:	4b31      	ldr	r3, [pc, #196]	; (800987c <HAL_RCC_ClockConfig+0x358>)
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	492e      	ldr	r1, [pc, #184]	; (800987c <HAL_RCC_ClockConfig+0x358>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0310 	and.w	r3, r3, #16
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d010      	beq.n	80097f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	699a      	ldr	r2, [r3, #24]
 80097d8:	4b28      	ldr	r3, [pc, #160]	; (800987c <HAL_RCC_ClockConfig+0x358>)
 80097da:	69db      	ldr	r3, [r3, #28]
 80097dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d208      	bcs.n	80097f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097e4:	4b25      	ldr	r3, [pc, #148]	; (800987c <HAL_RCC_ClockConfig+0x358>)
 80097e6:	69db      	ldr	r3, [r3, #28]
 80097e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	4922      	ldr	r1, [pc, #136]	; (800987c <HAL_RCC_ClockConfig+0x358>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0320 	and.w	r3, r3, #32
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d010      	beq.n	8009824 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	69da      	ldr	r2, [r3, #28]
 8009806:	4b1d      	ldr	r3, [pc, #116]	; (800987c <HAL_RCC_ClockConfig+0x358>)
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800980e:	429a      	cmp	r2, r3
 8009810:	d208      	bcs.n	8009824 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009812:	4b1a      	ldr	r3, [pc, #104]	; (800987c <HAL_RCC_ClockConfig+0x358>)
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	69db      	ldr	r3, [r3, #28]
 800981e:	4917      	ldr	r1, [pc, #92]	; (800987c <HAL_RCC_ClockConfig+0x358>)
 8009820:	4313      	orrs	r3, r2
 8009822:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009824:	f000 f834 	bl	8009890 <HAL_RCC_GetSysClockFreq>
 8009828:	4602      	mov	r2, r0
 800982a:	4b14      	ldr	r3, [pc, #80]	; (800987c <HAL_RCC_ClockConfig+0x358>)
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	0a1b      	lsrs	r3, r3, #8
 8009830:	f003 030f 	and.w	r3, r3, #15
 8009834:	4912      	ldr	r1, [pc, #72]	; (8009880 <HAL_RCC_ClockConfig+0x35c>)
 8009836:	5ccb      	ldrb	r3, [r1, r3]
 8009838:	f003 031f 	and.w	r3, r3, #31
 800983c:	fa22 f303 	lsr.w	r3, r2, r3
 8009840:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009842:	4b0e      	ldr	r3, [pc, #56]	; (800987c <HAL_RCC_ClockConfig+0x358>)
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	f003 030f 	and.w	r3, r3, #15
 800984a:	4a0d      	ldr	r2, [pc, #52]	; (8009880 <HAL_RCC_ClockConfig+0x35c>)
 800984c:	5cd3      	ldrb	r3, [r2, r3]
 800984e:	f003 031f 	and.w	r3, r3, #31
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	fa22 f303 	lsr.w	r3, r2, r3
 8009858:	4a0a      	ldr	r2, [pc, #40]	; (8009884 <HAL_RCC_ClockConfig+0x360>)
 800985a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800985c:	4a0a      	ldr	r2, [pc, #40]	; (8009888 <HAL_RCC_ClockConfig+0x364>)
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009862:	4b0a      	ldr	r3, [pc, #40]	; (800988c <HAL_RCC_ClockConfig+0x368>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4618      	mov	r0, r3
 8009868:	f7fc f912 	bl	8005a90 <HAL_InitTick>
 800986c:	4603      	mov	r3, r0
 800986e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009870:	7bfb      	ldrb	r3, [r7, #15]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3718      	adds	r7, #24
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	58024400 	.word	0x58024400
 8009880:	0800f540 	.word	0x0800f540
 8009884:	24000004 	.word	0x24000004
 8009888:	24000000 	.word	0x24000000
 800988c:	24000008 	.word	0x24000008

08009890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009890:	b480      	push	{r7}
 8009892:	b089      	sub	sp, #36	; 0x24
 8009894:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009896:	4bb3      	ldr	r3, [pc, #716]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800989e:	2b18      	cmp	r3, #24
 80098a0:	f200 8155 	bhi.w	8009b4e <HAL_RCC_GetSysClockFreq+0x2be>
 80098a4:	a201      	add	r2, pc, #4	; (adr r2, 80098ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80098a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098aa:	bf00      	nop
 80098ac:	08009911 	.word	0x08009911
 80098b0:	08009b4f 	.word	0x08009b4f
 80098b4:	08009b4f 	.word	0x08009b4f
 80098b8:	08009b4f 	.word	0x08009b4f
 80098bc:	08009b4f 	.word	0x08009b4f
 80098c0:	08009b4f 	.word	0x08009b4f
 80098c4:	08009b4f 	.word	0x08009b4f
 80098c8:	08009b4f 	.word	0x08009b4f
 80098cc:	08009937 	.word	0x08009937
 80098d0:	08009b4f 	.word	0x08009b4f
 80098d4:	08009b4f 	.word	0x08009b4f
 80098d8:	08009b4f 	.word	0x08009b4f
 80098dc:	08009b4f 	.word	0x08009b4f
 80098e0:	08009b4f 	.word	0x08009b4f
 80098e4:	08009b4f 	.word	0x08009b4f
 80098e8:	08009b4f 	.word	0x08009b4f
 80098ec:	0800993d 	.word	0x0800993d
 80098f0:	08009b4f 	.word	0x08009b4f
 80098f4:	08009b4f 	.word	0x08009b4f
 80098f8:	08009b4f 	.word	0x08009b4f
 80098fc:	08009b4f 	.word	0x08009b4f
 8009900:	08009b4f 	.word	0x08009b4f
 8009904:	08009b4f 	.word	0x08009b4f
 8009908:	08009b4f 	.word	0x08009b4f
 800990c:	08009943 	.word	0x08009943
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009910:	4b94      	ldr	r3, [pc, #592]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 0320 	and.w	r3, r3, #32
 8009918:	2b00      	cmp	r3, #0
 800991a:	d009      	beq.n	8009930 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800991c:	4b91      	ldr	r3, [pc, #580]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	08db      	lsrs	r3, r3, #3
 8009922:	f003 0303 	and.w	r3, r3, #3
 8009926:	4a90      	ldr	r2, [pc, #576]	; (8009b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009928:	fa22 f303 	lsr.w	r3, r2, r3
 800992c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800992e:	e111      	b.n	8009b54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009930:	4b8d      	ldr	r3, [pc, #564]	; (8009b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009932:	61bb      	str	r3, [r7, #24]
    break;
 8009934:	e10e      	b.n	8009b54 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009936:	4b8d      	ldr	r3, [pc, #564]	; (8009b6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009938:	61bb      	str	r3, [r7, #24]
    break;
 800993a:	e10b      	b.n	8009b54 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800993c:	4b8c      	ldr	r3, [pc, #560]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800993e:	61bb      	str	r3, [r7, #24]
    break;
 8009940:	e108      	b.n	8009b54 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009942:	4b88      	ldr	r3, [pc, #544]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009946:	f003 0303 	and.w	r3, r3, #3
 800994a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800994c:	4b85      	ldr	r3, [pc, #532]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800994e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009950:	091b      	lsrs	r3, r3, #4
 8009952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009956:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009958:	4b82      	ldr	r3, [pc, #520]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800995a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009962:	4b80      	ldr	r3, [pc, #512]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009966:	08db      	lsrs	r3, r3, #3
 8009968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	fb02 f303 	mul.w	r3, r2, r3
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 80e1 	beq.w	8009b48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2b02      	cmp	r3, #2
 800998a:	f000 8083 	beq.w	8009a94 <HAL_RCC_GetSysClockFreq+0x204>
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2b02      	cmp	r3, #2
 8009992:	f200 80a1 	bhi.w	8009ad8 <HAL_RCC_GetSysClockFreq+0x248>
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <HAL_RCC_GetSysClockFreq+0x114>
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d056      	beq.n	8009a50 <HAL_RCC_GetSysClockFreq+0x1c0>
 80099a2:	e099      	b.n	8009ad8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099a4:	4b6f      	ldr	r3, [pc, #444]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 0320 	and.w	r3, r3, #32
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d02d      	beq.n	8009a0c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099b0:	4b6c      	ldr	r3, [pc, #432]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	08db      	lsrs	r3, r3, #3
 80099b6:	f003 0303 	and.w	r3, r3, #3
 80099ba:	4a6b      	ldr	r2, [pc, #428]	; (8009b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80099bc:	fa22 f303 	lsr.w	r3, r2, r3
 80099c0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	ee07 3a90 	vmov	s15, r3
 80099c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	ee07 3a90 	vmov	s15, r3
 80099d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099da:	4b62      	ldr	r3, [pc, #392]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80099ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009a0a:	e087      	b.n	8009b1c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	ee07 3a90 	vmov	s15, r3
 8009a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a16:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009b78 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a1e:	4b51      	ldr	r3, [pc, #324]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a26:	ee07 3a90 	vmov	s15, r3
 8009a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a32:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a4e:	e065      	b.n	8009b1c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	ee07 3a90 	vmov	s15, r3
 8009a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009b7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a62:	4b40      	ldr	r3, [pc, #256]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a92:	e043      	b.n	8009b1c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	ee07 3a90 	vmov	s15, r3
 8009a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009b80 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aa6:	4b2f      	ldr	r3, [pc, #188]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009aba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ad6:	e021      	b.n	8009b1c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	ee07 3a90 	vmov	s15, r3
 8009ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009b7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aea:	4b1e      	ldr	r3, [pc, #120]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8009afe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b1a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009b1c:	4b11      	ldr	r3, [pc, #68]	; (8009b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b20:	0a5b      	lsrs	r3, r3, #9
 8009b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b26:	3301      	adds	r3, #1
 8009b28:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	ee07 3a90 	vmov	s15, r3
 8009b30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b40:	ee17 3a90 	vmov	r3, s15
 8009b44:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009b46:	e005      	b.n	8009b54 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	61bb      	str	r3, [r7, #24]
    break;
 8009b4c:	e002      	b.n	8009b54 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009b4e:	4b07      	ldr	r3, [pc, #28]	; (8009b6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b50:	61bb      	str	r3, [r7, #24]
    break;
 8009b52:	bf00      	nop
  }

  return sysclockfreq;
 8009b54:	69bb      	ldr	r3, [r7, #24]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3724      	adds	r7, #36	; 0x24
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	58024400 	.word	0x58024400
 8009b68:	03d09000 	.word	0x03d09000
 8009b6c:	003d0900 	.word	0x003d0900
 8009b70:	007a1200 	.word	0x007a1200
 8009b74:	46000000 	.word	0x46000000
 8009b78:	4c742400 	.word	0x4c742400
 8009b7c:	4a742400 	.word	0x4a742400
 8009b80:	4af42400 	.word	0x4af42400

08009b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b8a:	f7ff fe81 	bl	8009890 <HAL_RCC_GetSysClockFreq>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	4b10      	ldr	r3, [pc, #64]	; (8009bd4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	0a1b      	lsrs	r3, r3, #8
 8009b96:	f003 030f 	and.w	r3, r3, #15
 8009b9a:	490f      	ldr	r1, [pc, #60]	; (8009bd8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b9c:	5ccb      	ldrb	r3, [r1, r3]
 8009b9e:	f003 031f 	and.w	r3, r3, #31
 8009ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ba8:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	f003 030f 	and.w	r3, r3, #15
 8009bb0:	4a09      	ldr	r2, [pc, #36]	; (8009bd8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009bb2:	5cd3      	ldrb	r3, [r2, r3]
 8009bb4:	f003 031f 	and.w	r3, r3, #31
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	fa22 f303 	lsr.w	r3, r2, r3
 8009bbe:	4a07      	ldr	r2, [pc, #28]	; (8009bdc <HAL_RCC_GetHCLKFreq+0x58>)
 8009bc0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009bc2:	4a07      	ldr	r2, [pc, #28]	; (8009be0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009bc8:	4b04      	ldr	r3, [pc, #16]	; (8009bdc <HAL_RCC_GetHCLKFreq+0x58>)
 8009bca:	681b      	ldr	r3, [r3, #0]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	58024400 	.word	0x58024400
 8009bd8:	0800f540 	.word	0x0800f540
 8009bdc:	24000004 	.word	0x24000004
 8009be0:	24000000 	.word	0x24000000

08009be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009be8:	f7ff ffcc 	bl	8009b84 <HAL_RCC_GetHCLKFreq>
 8009bec:	4602      	mov	r2, r0
 8009bee:	4b06      	ldr	r3, [pc, #24]	; (8009c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	091b      	lsrs	r3, r3, #4
 8009bf4:	f003 0307 	and.w	r3, r3, #7
 8009bf8:	4904      	ldr	r1, [pc, #16]	; (8009c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009bfa:	5ccb      	ldrb	r3, [r1, r3]
 8009bfc:	f003 031f 	and.w	r3, r3, #31
 8009c00:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	58024400 	.word	0x58024400
 8009c0c:	0800f540 	.word	0x0800f540

08009c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009c14:	f7ff ffb6 	bl	8009b84 <HAL_RCC_GetHCLKFreq>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c1c:	69db      	ldr	r3, [r3, #28]
 8009c1e:	0a1b      	lsrs	r3, r3, #8
 8009c20:	f003 0307 	and.w	r3, r3, #7
 8009c24:	4904      	ldr	r1, [pc, #16]	; (8009c38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c26:	5ccb      	ldrb	r3, [r1, r3]
 8009c28:	f003 031f 	and.w	r3, r3, #31
 8009c2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	58024400 	.word	0x58024400
 8009c38:	0800f540 	.word	0x0800f540

08009c3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009c44:	2300      	movs	r3, #0
 8009c46:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009c48:	2300      	movs	r3, #0
 8009c4a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d03f      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c60:	d02a      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009c62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c66:	d824      	bhi.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c6c:	d018      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c72:	d81e      	bhi.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d003      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c7c:	d007      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009c7e:	e018      	b.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c80:	4ba4      	ldr	r3, [pc, #656]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	4aa3      	ldr	r2, [pc, #652]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009c8c:	e015      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3304      	adds	r3, #4
 8009c92:	2102      	movs	r1, #2
 8009c94:	4618      	mov	r0, r3
 8009c96:	f001 f989 	bl	800afac <RCCEx_PLL2_Config>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009c9e:	e00c      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	3324      	adds	r3, #36	; 0x24
 8009ca4:	2102      	movs	r1, #2
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f001 fa32 	bl	800b110 <RCCEx_PLL3_Config>
 8009cac:	4603      	mov	r3, r0
 8009cae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009cb0:	e003      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8009cb6:	e000      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cba:	7dfb      	ldrb	r3, [r7, #23]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d109      	bne.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009cc0:	4b94      	ldr	r3, [pc, #592]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ccc:	4991      	ldr	r1, [pc, #580]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	650b      	str	r3, [r1, #80]	; 0x50
 8009cd2:	e001      	b.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
 8009cd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d03d      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce8:	2b04      	cmp	r3, #4
 8009cea:	d826      	bhi.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009cec:	a201      	add	r2, pc, #4	; (adr r2, 8009cf4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf2:	bf00      	nop
 8009cf4:	08009d09 	.word	0x08009d09
 8009cf8:	08009d17 	.word	0x08009d17
 8009cfc:	08009d29 	.word	0x08009d29
 8009d00:	08009d41 	.word	0x08009d41
 8009d04:	08009d41 	.word	0x08009d41
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d08:	4b82      	ldr	r3, [pc, #520]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0c:	4a81      	ldr	r2, [pc, #516]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d14:	e015      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	3304      	adds	r3, #4
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 f945 	bl	800afac <RCCEx_PLL2_Config>
 8009d22:	4603      	mov	r3, r0
 8009d24:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d26:	e00c      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3324      	adds	r3, #36	; 0x24
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f001 f9ee 	bl	800b110 <RCCEx_PLL3_Config>
 8009d34:	4603      	mov	r3, r0
 8009d36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d38:	e003      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d3e:	e000      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d109      	bne.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d48:	4b72      	ldr	r3, [pc, #456]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d4c:	f023 0207 	bic.w	r2, r3, #7
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d54:	496f      	ldr	r1, [pc, #444]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d56:	4313      	orrs	r3, r2
 8009d58:	650b      	str	r3, [r1, #80]	; 0x50
 8009d5a:	e001      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
 8009d5e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d051      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d72:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009d76:	d036      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009d78:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009d7c:	d830      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d82:	d032      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009d84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d88:	d82a      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d8e:	d02e      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009d90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d94:	d824      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d9a:	d018      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009d9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009da0:	d81e      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d003      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009da6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009daa:	d007      	beq.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009dac:	e018      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dae:	4b59      	ldr	r3, [pc, #356]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db2:	4a58      	ldr	r2, [pc, #352]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009db8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009dba:	e019      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f001 f8f2 	bl	800afac <RCCEx_PLL2_Config>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009dcc:	e010      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3324      	adds	r3, #36	; 0x24
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f001 f99b 	bl	800b110 <RCCEx_PLL3_Config>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009dde:	e007      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	75fb      	strb	r3, [r7, #23]
      break;
 8009de4:	e004      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009de6:	bf00      	nop
 8009de8:	e002      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009dea:	bf00      	nop
 8009dec:	e000      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009df6:	4b47      	ldr	r3, [pc, #284]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dfa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e04:	4943      	ldr	r1, [pc, #268]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e06:	4313      	orrs	r3, r2
 8009e08:	658b      	str	r3, [r1, #88]	; 0x58
 8009e0a:	e001      	b.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d051      	beq.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e22:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009e26:	d036      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009e28:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009e2c:	d830      	bhi.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e32:	d032      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009e34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e38:	d82a      	bhi.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e3e:	d02e      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009e40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e44:	d824      	bhi.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e4a:	d018      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009e4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e50:	d81e      	bhi.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d003      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009e56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e5a:	d007      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009e5c:	e018      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e5e:	4b2d      	ldr	r3, [pc, #180]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e62:	4a2c      	ldr	r2, [pc, #176]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e6a:	e019      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	3304      	adds	r3, #4
 8009e70:	2100      	movs	r1, #0
 8009e72:	4618      	mov	r0, r3
 8009e74:	f001 f89a 	bl	800afac <RCCEx_PLL2_Config>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009e7c:	e010      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	3324      	adds	r3, #36	; 0x24
 8009e82:	2100      	movs	r1, #0
 8009e84:	4618      	mov	r0, r3
 8009e86:	f001 f943 	bl	800b110 <RCCEx_PLL3_Config>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e8e:	e007      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	75fb      	strb	r3, [r7, #23]
      break;
 8009e94:	e004      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009e96:	bf00      	nop
 8009e98:	e002      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009e9a:	bf00      	nop
 8009e9c:	e000      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10a      	bne.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009ea6:	4b1b      	ldr	r3, [pc, #108]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eaa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009eb4:	4917      	ldr	r1, [pc, #92]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	658b      	str	r3, [r1, #88]	; 0x58
 8009eba:	e001      	b.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ebc:	7dfb      	ldrb	r3, [r7, #23]
 8009ebe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d035      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ed0:	2b30      	cmp	r3, #48	; 0x30
 8009ed2:	d01c      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ed4:	2b30      	cmp	r3, #48	; 0x30
 8009ed6:	d817      	bhi.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009ed8:	2b20      	cmp	r3, #32
 8009eda:	d00c      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009edc:	2b20      	cmp	r3, #32
 8009ede:	d813      	bhi.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d019      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009ee4:	2b10      	cmp	r3, #16
 8009ee6:	d10f      	bne.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee8:	4b0a      	ldr	r3, [pc, #40]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eec:	4a09      	ldr	r2, [pc, #36]	; (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009ef4:	e011      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	2102      	movs	r1, #2
 8009efc:	4618      	mov	r0, r3
 8009efe:	f001 f855 	bl	800afac <RCCEx_PLL2_Config>
 8009f02:	4603      	mov	r3, r0
 8009f04:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009f06:	e008      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f0c:	e005      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009f0e:	bf00      	nop
 8009f10:	e003      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009f12:	bf00      	nop
 8009f14:	58024400 	.word	0x58024400
      break;
 8009f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d109      	bne.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009f20:	4ba3      	ldr	r3, [pc, #652]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f2c:	49a0      	ldr	r1, [pc, #640]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f32:	e001      	b.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f34:	7dfb      	ldrb	r3, [r7, #23]
 8009f36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d047      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f4c:	d030      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f52:	d82a      	bhi.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f58:	d02c      	beq.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009f5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f5e:	d824      	bhi.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f64:	d018      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f6a:	d81e      	bhi.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f74:	d007      	beq.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009f76:	e018      	b.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f78:	4b8d      	ldr	r3, [pc, #564]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	4a8c      	ldr	r2, [pc, #560]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009f84:	e017      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	3304      	adds	r3, #4
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f001 f80d 	bl	800afac <RCCEx_PLL2_Config>
 8009f92:	4603      	mov	r3, r0
 8009f94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009f96:	e00e      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	3324      	adds	r3, #36	; 0x24
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f001 f8b6 	bl	800b110 <RCCEx_PLL3_Config>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009fa8:	e005      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	75fb      	strb	r3, [r7, #23]
      break;
 8009fae:	e002      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009fb0:	bf00      	nop
 8009fb2:	e000      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fb6:	7dfb      	ldrb	r3, [r7, #23]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d109      	bne.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009fbc:	4b7c      	ldr	r3, [pc, #496]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fc0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc8:	4979      	ldr	r1, [pc, #484]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	650b      	str	r3, [r1, #80]	; 0x50
 8009fce:	e001      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fd0:	7dfb      	ldrb	r3, [r7, #23]
 8009fd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d049      	beq.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fe8:	d02e      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009fea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fee:	d828      	bhi.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009ff0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ff4:	d02a      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009ff6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ffa:	d822      	bhi.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009ffc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a000:	d026      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a002:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a006:	d81c      	bhi.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a00c:	d010      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a00e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a012:	d816      	bhi.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a014:	2b00      	cmp	r3, #0
 800a016:	d01d      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a01c:	d111      	bne.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	3304      	adds	r3, #4
 800a022:	2101      	movs	r1, #1
 800a024:	4618      	mov	r0, r3
 800a026:	f000 ffc1 	bl	800afac <RCCEx_PLL2_Config>
 800a02a:	4603      	mov	r3, r0
 800a02c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a02e:	e012      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3324      	adds	r3, #36	; 0x24
 800a034:	2101      	movs	r1, #1
 800a036:	4618      	mov	r0, r3
 800a038:	f001 f86a 	bl	800b110 <RCCEx_PLL3_Config>
 800a03c:	4603      	mov	r3, r0
 800a03e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a040:	e009      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	75fb      	strb	r3, [r7, #23]
      break;
 800a046:	e006      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a048:	bf00      	nop
 800a04a:	e004      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a04c:	bf00      	nop
 800a04e:	e002      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a050:	bf00      	nop
 800a052:	e000      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a054:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a056:	7dfb      	ldrb	r3, [r7, #23]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d109      	bne.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a05c:	4b54      	ldr	r3, [pc, #336]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a060:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a068:	4951      	ldr	r1, [pc, #324]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	650b      	str	r3, [r1, #80]	; 0x50
 800a06e:	e001      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a070:	7dfb      	ldrb	r3, [r7, #23]
 800a072:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d04b      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a086:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a08a:	d02e      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a08c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a090:	d828      	bhi.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a096:	d02a      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a09c:	d822      	bhi.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a09e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0a2:	d026      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a0a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0a8:	d81c      	bhi.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a0aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0ae:	d010      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a0b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0b4:	d816      	bhi.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d01d      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a0ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0be:	d111      	bne.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	3304      	adds	r3, #4
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 ff70 	bl	800afac <RCCEx_PLL2_Config>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a0d0:	e012      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	3324      	adds	r3, #36	; 0x24
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f001 f819 	bl	800b110 <RCCEx_PLL3_Config>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a0e2:	e009      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0e8:	e006      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0ea:	bf00      	nop
 800a0ec:	e004      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0ee:	bf00      	nop
 800a0f0:	e002      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0f2:	bf00      	nop
 800a0f4:	e000      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10a      	bne.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a0fe:	4b2c      	ldr	r3, [pc, #176]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a102:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a10c:	4928      	ldr	r1, [pc, #160]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a10e:	4313      	orrs	r3, r2
 800a110:	658b      	str	r3, [r1, #88]	; 0x58
 800a112:	e001      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a114:	7dfb      	ldrb	r3, [r7, #23]
 800a116:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d02f      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a12c:	d00e      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a12e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a132:	d814      	bhi.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a134:	2b00      	cmp	r3, #0
 800a136:	d015      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a13c:	d10f      	bne.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a13e:	4b1c      	ldr	r3, [pc, #112]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a142:	4a1b      	ldr	r2, [pc, #108]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a148:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a14a:	e00c      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3304      	adds	r3, #4
 800a150:	2101      	movs	r1, #1
 800a152:	4618      	mov	r0, r3
 800a154:	f000 ff2a 	bl	800afac <RCCEx_PLL2_Config>
 800a158:	4603      	mov	r3, r0
 800a15a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a15c:	e003      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	75fb      	strb	r3, [r7, #23]
      break;
 800a162:	e000      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a164:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a166:	7dfb      	ldrb	r3, [r7, #23]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d109      	bne.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a16c:	4b10      	ldr	r3, [pc, #64]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a16e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a170:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a178:	490d      	ldr	r1, [pc, #52]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a17a:	4313      	orrs	r3, r2
 800a17c:	650b      	str	r3, [r1, #80]	; 0x50
 800a17e:	e001      	b.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a180:	7dfb      	ldrb	r3, [r7, #23]
 800a182:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d034      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a194:	2b03      	cmp	r3, #3
 800a196:	d81d      	bhi.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a198:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19e:	bf00      	nop
 800a1a0:	0800a1db 	.word	0x0800a1db
 800a1a4:	0800a1b5 	.word	0x0800a1b5
 800a1a8:	0800a1c3 	.word	0x0800a1c3
 800a1ac:	0800a1db 	.word	0x0800a1db
 800a1b0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1b4:	4bb1      	ldr	r3, [pc, #708]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b8:	4ab0      	ldr	r2, [pc, #704]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a1c0:	e00c      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	2102      	movs	r1, #2
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 feef 	bl	800afac <RCCEx_PLL2_Config>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a1d2:	e003      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a1d8:	e000      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a1da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d109      	bne.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a1e2:	4ba6      	ldr	r3, [pc, #664]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1e6:	f023 0203 	bic.w	r2, r3, #3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ee:	49a3      	ldr	r1, [pc, #652]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a1f4:	e001      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f6:	7dfb      	ldrb	r3, [r7, #23]
 800a1f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 8086 	beq.w	800a314 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a208:	4b9d      	ldr	r3, [pc, #628]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a9c      	ldr	r2, [pc, #624]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a20e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a212:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a214:	f7fb fc86 	bl	8005b24 <HAL_GetTick>
 800a218:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a21a:	e009      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a21c:	f7fb fc82 	bl	8005b24 <HAL_GetTick>
 800a220:	4602      	mov	r2, r0
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	2b64      	cmp	r3, #100	; 0x64
 800a228:	d902      	bls.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	75fb      	strb	r3, [r7, #23]
        break;
 800a22e:	e005      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a230:	4b93      	ldr	r3, [pc, #588]	; (800a480 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d0ef      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d166      	bne.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a242:	4b8e      	ldr	r3, [pc, #568]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a244:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a24c:	4053      	eors	r3, r2
 800a24e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a252:	2b00      	cmp	r3, #0
 800a254:	d013      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a256:	4b89      	ldr	r3, [pc, #548]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a25a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a25e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a260:	4b86      	ldr	r3, [pc, #536]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a264:	4a85      	ldr	r2, [pc, #532]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a26a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a26c:	4b83      	ldr	r3, [pc, #524]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a26e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a270:	4a82      	ldr	r2, [pc, #520]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a276:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a278:	4a80      	ldr	r2, [pc, #512]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a288:	d115      	bne.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a28a:	f7fb fc4b 	bl	8005b24 <HAL_GetTick>
 800a28e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a290:	e00b      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a292:	f7fb fc47 	bl	8005b24 <HAL_GetTick>
 800a296:	4602      	mov	r2, r0
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d902      	bls.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	75fb      	strb	r3, [r7, #23]
            break;
 800a2a8:	e005      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2aa:	4b74      	ldr	r3, [pc, #464]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ae:	f003 0302 	and.w	r3, r3, #2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0ed      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a2b6:	7dfb      	ldrb	r3, [r7, #23]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d126      	bne.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2ca:	d10d      	bne.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a2cc:	4b6b      	ldr	r3, [pc, #428]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2da:	0919      	lsrs	r1, r3, #4
 800a2dc:	4b69      	ldr	r3, [pc, #420]	; (800a484 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a2de:	400b      	ands	r3, r1
 800a2e0:	4966      	ldr	r1, [pc, #408]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	610b      	str	r3, [r1, #16]
 800a2e6:	e005      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a2e8:	4b64      	ldr	r3, [pc, #400]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	4a63      	ldr	r2, [pc, #396]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a2f2:	6113      	str	r3, [r2, #16]
 800a2f4:	4b61      	ldr	r3, [pc, #388]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a302:	495e      	ldr	r1, [pc, #376]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a304:	4313      	orrs	r3, r2
 800a306:	670b      	str	r3, [r1, #112]	; 0x70
 800a308:	e004      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
 800a30c:	75bb      	strb	r3, [r7, #22]
 800a30e:	e001      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a310:	7dfb      	ldrb	r3, [r7, #23]
 800a312:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d07e      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a324:	2b28      	cmp	r3, #40	; 0x28
 800a326:	d867      	bhi.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a328:	a201      	add	r2, pc, #4	; (adr r2, 800a330 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32e:	bf00      	nop
 800a330:	0800a3ff 	.word	0x0800a3ff
 800a334:	0800a3f9 	.word	0x0800a3f9
 800a338:	0800a3f9 	.word	0x0800a3f9
 800a33c:	0800a3f9 	.word	0x0800a3f9
 800a340:	0800a3f9 	.word	0x0800a3f9
 800a344:	0800a3f9 	.word	0x0800a3f9
 800a348:	0800a3f9 	.word	0x0800a3f9
 800a34c:	0800a3f9 	.word	0x0800a3f9
 800a350:	0800a3d5 	.word	0x0800a3d5
 800a354:	0800a3f9 	.word	0x0800a3f9
 800a358:	0800a3f9 	.word	0x0800a3f9
 800a35c:	0800a3f9 	.word	0x0800a3f9
 800a360:	0800a3f9 	.word	0x0800a3f9
 800a364:	0800a3f9 	.word	0x0800a3f9
 800a368:	0800a3f9 	.word	0x0800a3f9
 800a36c:	0800a3f9 	.word	0x0800a3f9
 800a370:	0800a3e7 	.word	0x0800a3e7
 800a374:	0800a3f9 	.word	0x0800a3f9
 800a378:	0800a3f9 	.word	0x0800a3f9
 800a37c:	0800a3f9 	.word	0x0800a3f9
 800a380:	0800a3f9 	.word	0x0800a3f9
 800a384:	0800a3f9 	.word	0x0800a3f9
 800a388:	0800a3f9 	.word	0x0800a3f9
 800a38c:	0800a3f9 	.word	0x0800a3f9
 800a390:	0800a3ff 	.word	0x0800a3ff
 800a394:	0800a3f9 	.word	0x0800a3f9
 800a398:	0800a3f9 	.word	0x0800a3f9
 800a39c:	0800a3f9 	.word	0x0800a3f9
 800a3a0:	0800a3f9 	.word	0x0800a3f9
 800a3a4:	0800a3f9 	.word	0x0800a3f9
 800a3a8:	0800a3f9 	.word	0x0800a3f9
 800a3ac:	0800a3f9 	.word	0x0800a3f9
 800a3b0:	0800a3ff 	.word	0x0800a3ff
 800a3b4:	0800a3f9 	.word	0x0800a3f9
 800a3b8:	0800a3f9 	.word	0x0800a3f9
 800a3bc:	0800a3f9 	.word	0x0800a3f9
 800a3c0:	0800a3f9 	.word	0x0800a3f9
 800a3c4:	0800a3f9 	.word	0x0800a3f9
 800a3c8:	0800a3f9 	.word	0x0800a3f9
 800a3cc:	0800a3f9 	.word	0x0800a3f9
 800a3d0:	0800a3ff 	.word	0x0800a3ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	2101      	movs	r1, #1
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 fde6 	bl	800afac <RCCEx_PLL2_Config>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a3e4:	e00c      	b.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3324      	adds	r3, #36	; 0x24
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f000 fe8f 	bl	800b110 <RCCEx_PLL3_Config>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a3f6:	e003      	b.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a3fc:	e000      	b.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a3fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a400:	7dfb      	ldrb	r3, [r7, #23]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d109      	bne.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a406:	4b1d      	ldr	r3, [pc, #116]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a40a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a412:	491a      	ldr	r1, [pc, #104]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a414:	4313      	orrs	r3, r2
 800a416:	654b      	str	r3, [r1, #84]	; 0x54
 800a418:	e001      	b.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b00      	cmp	r3, #0
 800a428:	d03e      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a42e:	2b05      	cmp	r3, #5
 800a430:	d820      	bhi.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a432:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a438:	0800a489 	.word	0x0800a489
 800a43c:	0800a451 	.word	0x0800a451
 800a440:	0800a463 	.word	0x0800a463
 800a444:	0800a489 	.word	0x0800a489
 800a448:	0800a489 	.word	0x0800a489
 800a44c:	0800a489 	.word	0x0800a489
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3304      	adds	r3, #4
 800a454:	2101      	movs	r1, #1
 800a456:	4618      	mov	r0, r3
 800a458:	f000 fda8 	bl	800afac <RCCEx_PLL2_Config>
 800a45c:	4603      	mov	r3, r0
 800a45e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a460:	e013      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	3324      	adds	r3, #36	; 0x24
 800a466:	2101      	movs	r1, #1
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 fe51 	bl	800b110 <RCCEx_PLL3_Config>
 800a46e:	4603      	mov	r3, r0
 800a470:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a472:	e00a      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	75fb      	strb	r3, [r7, #23]
      break;
 800a478:	e007      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a47a:	bf00      	nop
 800a47c:	58024400 	.word	0x58024400
 800a480:	58024800 	.word	0x58024800
 800a484:	00ffffcf 	.word	0x00ffffcf
      break;
 800a488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a48a:	7dfb      	ldrb	r3, [r7, #23]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d109      	bne.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a490:	4b9f      	ldr	r3, [pc, #636]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a494:	f023 0207 	bic.w	r2, r3, #7
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a49c:	499c      	ldr	r1, [pc, #624]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	654b      	str	r3, [r1, #84]	; 0x54
 800a4a2:	e001      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
 800a4a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 0304 	and.w	r3, r3, #4
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d039      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4ba:	2b05      	cmp	r3, #5
 800a4bc:	d820      	bhi.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a4be:	a201      	add	r2, pc, #4	; (adr r2, 800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c4:	0800a507 	.word	0x0800a507
 800a4c8:	0800a4dd 	.word	0x0800a4dd
 800a4cc:	0800a4ef 	.word	0x0800a4ef
 800a4d0:	0800a507 	.word	0x0800a507
 800a4d4:	0800a507 	.word	0x0800a507
 800a4d8:	0800a507 	.word	0x0800a507
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	3304      	adds	r3, #4
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 fd62 	bl	800afac <RCCEx_PLL2_Config>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a4ec:	e00c      	b.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	3324      	adds	r3, #36	; 0x24
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f000 fe0b 	bl	800b110 <RCCEx_PLL3_Config>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a4fe:	e003      	b.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	75fb      	strb	r3, [r7, #23]
      break;
 800a504:	e000      	b.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a506:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a508:	7dfb      	ldrb	r3, [r7, #23]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10a      	bne.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a50e:	4b80      	ldr	r3, [pc, #512]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a512:	f023 0207 	bic.w	r2, r3, #7
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a51c:	497c      	ldr	r1, [pc, #496]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	658b      	str	r3, [r1, #88]	; 0x58
 800a522:	e001      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a524:	7dfb      	ldrb	r3, [r7, #23]
 800a526:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 0320 	and.w	r3, r3, #32
 800a530:	2b00      	cmp	r3, #0
 800a532:	d04b      	beq.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a53a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a53e:	d02e      	beq.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a544:	d828      	bhi.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a54a:	d02a      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a54c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a550:	d822      	bhi.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a552:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a556:	d026      	beq.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a558:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a55c:	d81c      	bhi.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a55e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a562:	d010      	beq.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a568:	d816      	bhi.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d01d      	beq.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a56e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a572:	d111      	bne.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	3304      	adds	r3, #4
 800a578:	2100      	movs	r1, #0
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 fd16 	bl	800afac <RCCEx_PLL2_Config>
 800a580:	4603      	mov	r3, r0
 800a582:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a584:	e012      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	3324      	adds	r3, #36	; 0x24
 800a58a:	2102      	movs	r1, #2
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 fdbf 	bl	800b110 <RCCEx_PLL3_Config>
 800a592:	4603      	mov	r3, r0
 800a594:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a596:	e009      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	75fb      	strb	r3, [r7, #23]
      break;
 800a59c:	e006      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a59e:	bf00      	nop
 800a5a0:	e004      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a5a2:	bf00      	nop
 800a5a4:	e002      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a5a6:	bf00      	nop
 800a5a8:	e000      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a5aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5ac:	7dfb      	ldrb	r3, [r7, #23]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10a      	bne.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a5b2:	4b57      	ldr	r3, [pc, #348]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5c0:	4953      	ldr	r1, [pc, #332]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	654b      	str	r3, [r1, #84]	; 0x54
 800a5c6:	e001      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5c8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d04b      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a5e2:	d02e      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a5e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a5e8:	d828      	bhi.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a5ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ee:	d02a      	beq.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a5f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5f4:	d822      	bhi.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a5f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5fa:	d026      	beq.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a5fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a600:	d81c      	bhi.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a606:	d010      	beq.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a60c:	d816      	bhi.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d01d      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a616:	d111      	bne.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	3304      	adds	r3, #4
 800a61c:	2100      	movs	r1, #0
 800a61e:	4618      	mov	r0, r3
 800a620:	f000 fcc4 	bl	800afac <RCCEx_PLL2_Config>
 800a624:	4603      	mov	r3, r0
 800a626:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a628:	e012      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	3324      	adds	r3, #36	; 0x24
 800a62e:	2102      	movs	r1, #2
 800a630:	4618      	mov	r0, r3
 800a632:	f000 fd6d 	bl	800b110 <RCCEx_PLL3_Config>
 800a636:	4603      	mov	r3, r0
 800a638:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a63a:	e009      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	75fb      	strb	r3, [r7, #23]
      break;
 800a640:	e006      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a642:	bf00      	nop
 800a644:	e004      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a646:	bf00      	nop
 800a648:	e002      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a64a:	bf00      	nop
 800a64c:	e000      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a64e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a650:	7dfb      	ldrb	r3, [r7, #23]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10a      	bne.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a656:	4b2e      	ldr	r3, [pc, #184]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a65a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a664:	492a      	ldr	r1, [pc, #168]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a666:	4313      	orrs	r3, r2
 800a668:	658b      	str	r3, [r1, #88]	; 0x58
 800a66a:	e001      	b.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a66c:	7dfb      	ldrb	r3, [r7, #23]
 800a66e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d04d      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a682:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a686:	d02e      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a688:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a68c:	d828      	bhi.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a68e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a692:	d02a      	beq.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a698:	d822      	bhi.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a69a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a69e:	d026      	beq.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a6a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a6a4:	d81c      	bhi.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a6a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6aa:	d010      	beq.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a6ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6b0:	d816      	bhi.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d01d      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a6b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ba:	d111      	bne.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	3304      	adds	r3, #4
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 fc72 	bl	800afac <RCCEx_PLL2_Config>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a6cc:	e012      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	3324      	adds	r3, #36	; 0x24
 800a6d2:	2102      	movs	r1, #2
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 fd1b 	bl	800b110 <RCCEx_PLL3_Config>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a6de:	e009      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a6e4:	e006      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6e6:	bf00      	nop
 800a6e8:	e004      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6ea:	bf00      	nop
 800a6ec:	e002      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6ee:	bf00      	nop
 800a6f0:	e000      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6f4:	7dfb      	ldrb	r3, [r7, #23]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10c      	bne.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a6fa:	4b05      	ldr	r3, [pc, #20]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a708:	4901      	ldr	r1, [pc, #4]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a70a:	4313      	orrs	r3, r2
 800a70c:	658b      	str	r3, [r1, #88]	; 0x58
 800a70e:	e003      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a710:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a714:	7dfb      	ldrb	r3, [r7, #23]
 800a716:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 0308 	and.w	r3, r3, #8
 800a720:	2b00      	cmp	r3, #0
 800a722:	d018      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a72c:	d10a      	bne.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	3324      	adds	r3, #36	; 0x24
 800a732:	2102      	movs	r1, #2
 800a734:	4618      	mov	r0, r3
 800a736:	f000 fceb 	bl	800b110 <RCCEx_PLL3_Config>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a744:	4b8a      	ldr	r3, [pc, #552]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a748:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a750:	4987      	ldr	r1, [pc, #540]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a752:	4313      	orrs	r3, r2
 800a754:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0310 	and.w	r3, r3, #16
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d01a      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a76c:	d10a      	bne.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3324      	adds	r3, #36	; 0x24
 800a772:	2102      	movs	r1, #2
 800a774:	4618      	mov	r0, r3
 800a776:	f000 fccb 	bl	800b110 <RCCEx_PLL3_Config>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a784:	4b7a      	ldr	r3, [pc, #488]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a792:	4977      	ldr	r1, [pc, #476]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a794:	4313      	orrs	r3, r2
 800a796:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d034      	beq.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7ae:	d01d      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a7b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7b4:	d817      	bhi.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a7ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7be:	d009      	beq.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a7c0:	e011      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f000 fbef 	bl	800afac <RCCEx_PLL2_Config>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a7d2:	e00c      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3324      	adds	r3, #36	; 0x24
 800a7d8:	2102      	movs	r1, #2
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f000 fc98 	bl	800b110 <RCCEx_PLL3_Config>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a7e4:	e003      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a7ea:	e000      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a7ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10a      	bne.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a7f4:	4b5e      	ldr	r3, [pc, #376]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a802:	495b      	ldr	r1, [pc, #364]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a804:	4313      	orrs	r3, r2
 800a806:	658b      	str	r3, [r1, #88]	; 0x58
 800a808:	e001      	b.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a80a:	7dfb      	ldrb	r3, [r7, #23]
 800a80c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d033      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a820:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a824:	d01c      	beq.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a826:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a82a:	d816      	bhi.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a82c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a830:	d003      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a836:	d007      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a838:	e00f      	b.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a83a:	4b4d      	ldr	r3, [pc, #308]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83e:	4a4c      	ldr	r2, [pc, #304]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a844:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a846:	e00c      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	3324      	adds	r3, #36	; 0x24
 800a84c:	2101      	movs	r1, #1
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 fc5e 	bl	800b110 <RCCEx_PLL3_Config>
 800a854:	4603      	mov	r3, r0
 800a856:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a858:	e003      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	75fb      	strb	r3, [r7, #23]
      break;
 800a85e:	e000      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a860:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a862:	7dfb      	ldrb	r3, [r7, #23]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10a      	bne.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a868:	4b41      	ldr	r3, [pc, #260]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a86a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a86c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a876:	493e      	ldr	r1, [pc, #248]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a878:	4313      	orrs	r3, r2
 800a87a:	654b      	str	r3, [r1, #84]	; 0x54
 800a87c:	e001      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a87e:	7dfb      	ldrb	r3, [r7, #23]
 800a880:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d029      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a892:	2b00      	cmp	r3, #0
 800a894:	d003      	beq.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a89a:	d007      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a89c:	e00f      	b.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a89e:	4b34      	ldr	r3, [pc, #208]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a2:	4a33      	ldr	r2, [pc, #204]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a8aa:	e00b      	b.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	2102      	movs	r1, #2
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f000 fb7a 	bl	800afac <RCCEx_PLL2_Config>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a8bc:	e002      	b.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a8c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8c4:	7dfb      	ldrb	r3, [r7, #23]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d109      	bne.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a8ca:	4b29      	ldr	r3, [pc, #164]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d6:	4926      	ldr	r1, [pc, #152]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a8dc:	e001      	b.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8de:	7dfb      	ldrb	r3, [r7, #23]
 800a8e0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00a      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	3324      	adds	r3, #36	; 0x24
 800a8f2:	2102      	movs	r1, #2
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 fc0b 	bl	800b110 <RCCEx_PLL3_Config>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d033      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a918:	d017      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a91a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a91e:	d811      	bhi.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a924:	d013      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a92a:	d80b      	bhi.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d010      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a934:	d106      	bne.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a936:	4b0e      	ldr	r3, [pc, #56]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93a:	4a0d      	ldr	r2, [pc, #52]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a93c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a940:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a942:	e007      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	75fb      	strb	r3, [r7, #23]
      break;
 800a948:	e004      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a94a:	bf00      	nop
 800a94c:	e002      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a94e:	bf00      	nop
 800a950:	e000      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a952:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a954:	7dfb      	ldrb	r3, [r7, #23]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10c      	bne.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a95a:	4b05      	ldr	r3, [pc, #20]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a95e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a966:	4902      	ldr	r1, [pc, #8]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a968:	4313      	orrs	r3, r2
 800a96a:	654b      	str	r3, [r1, #84]	; 0x54
 800a96c:	e004      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a96e:	bf00      	nop
 800a970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a974:	7dfb      	ldrb	r3, [r7, #23]
 800a976:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a980:	2b00      	cmp	r3, #0
 800a982:	d008      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a984:	4b29      	ldr	r3, [pc, #164]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a988:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a990:	4926      	ldr	r1, [pc, #152]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a992:	4313      	orrs	r3, r2
 800a994:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d008      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a9a2:	4b22      	ldr	r3, [pc, #136]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9ae:	491f      	ldr	r1, [pc, #124]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00d      	beq.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a9c0:	4b1a      	ldr	r3, [pc, #104]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	4a19      	ldr	r2, [pc, #100]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a9ca:	6113      	str	r3, [r2, #16]
 800a9cc:	4b17      	ldr	r3, [pc, #92]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9ce:	691a      	ldr	r2, [r3, #16]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9d6:	4915      	ldr	r1, [pc, #84]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	da08      	bge.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a9e4:	4b11      	ldr	r3, [pc, #68]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f0:	490e      	ldr	r1, [pc, #56]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d009      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aa02:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa10:	4906      	ldr	r1, [pc, #24]	; (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa12:	4313      	orrs	r3, r2
 800aa14:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800aa16:	7dbb      	ldrb	r3, [r7, #22]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d101      	bne.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	e000      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3718      	adds	r7, #24
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	58024400 	.word	0x58024400

0800aa30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aa34:	f7ff f8a6 	bl	8009b84 <HAL_RCC_GetHCLKFreq>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	4b06      	ldr	r3, [pc, #24]	; (800aa54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aa3c:	6a1b      	ldr	r3, [r3, #32]
 800aa3e:	091b      	lsrs	r3, r3, #4
 800aa40:	f003 0307 	and.w	r3, r3, #7
 800aa44:	4904      	ldr	r1, [pc, #16]	; (800aa58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aa46:	5ccb      	ldrb	r3, [r1, r3]
 800aa48:	f003 031f 	and.w	r3, r3, #31
 800aa4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	58024400 	.word	0x58024400
 800aa58:	0800f540 	.word	0x0800f540

0800aa5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b089      	sub	sp, #36	; 0x24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa64:	4ba1      	ldr	r3, [pc, #644]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa68:	f003 0303 	and.w	r3, r3, #3
 800aa6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800aa6e:	4b9f      	ldr	r3, [pc, #636]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa72:	0b1b      	lsrs	r3, r3, #12
 800aa74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa7a:	4b9c      	ldr	r3, [pc, #624]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7e:	091b      	lsrs	r3, r3, #4
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800aa86:	4b99      	ldr	r3, [pc, #612]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa8a:	08db      	lsrs	r3, r3, #3
 800aa8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa90:	693a      	ldr	r2, [r7, #16]
 800aa92:	fb02 f303 	mul.w	r3, r2, r3
 800aa96:	ee07 3a90 	vmov	s15, r3
 800aa9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 8111 	beq.w	800accc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	f000 8083 	beq.w	800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	f200 80a1 	bhi.w	800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d003      	beq.n	800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d056      	beq.n	800ab74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aac6:	e099      	b.n	800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aac8:	4b88      	ldr	r3, [pc, #544]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 0320 	and.w	r3, r3, #32
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d02d      	beq.n	800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aad4:	4b85      	ldr	r3, [pc, #532]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	08db      	lsrs	r3, r3, #3
 800aada:	f003 0303 	and.w	r3, r3, #3
 800aade:	4a84      	ldr	r2, [pc, #528]	; (800acf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aae0:	fa22 f303 	lsr.w	r3, r2, r3
 800aae4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	ee07 3a90 	vmov	s15, r3
 800aaec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	ee07 3a90 	vmov	s15, r3
 800aaf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aafa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aafe:	4b7b      	ldr	r3, [pc, #492]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab06:	ee07 3a90 	vmov	s15, r3
 800ab0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab12:	eddf 5a78 	vldr	s11, [pc, #480]	; 800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ab2e:	e087      	b.n	800ac40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	ee07 3a90 	vmov	s15, r3
 800ab36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800acf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ab3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab42:	4b6a      	ldr	r3, [pc, #424]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab56:	eddf 5a67 	vldr	s11, [pc, #412]	; 800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab72:	e065      	b.n	800ac40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800acfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab86:	4b59      	ldr	r3, [pc, #356]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abb6:	e043      	b.n	800ac40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ad00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800abc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abca:	4b48      	ldr	r3, [pc, #288]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abda:	ed97 6a03 	vldr	s12, [r7, #12]
 800abde:	eddf 5a45 	vldr	s11, [pc, #276]	; 800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abfa:	e021      	b.n	800ac40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800acfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac0e:	4b37      	ldr	r3, [pc, #220]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac16:	ee07 3a90 	vmov	s15, r3
 800ac1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac22:	eddf 5a34 	vldr	s11, [pc, #208]	; 800acf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ac40:	4b2a      	ldr	r3, [pc, #168]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac44:	0a5b      	lsrs	r3, r3, #9
 800ac46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac4a:	ee07 3a90 	vmov	s15, r3
 800ac4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac66:	ee17 2a90 	vmov	r2, s15
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ac6e:	4b1f      	ldr	r3, [pc, #124]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac72:	0c1b      	lsrs	r3, r3, #16
 800ac74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac78:	ee07 3a90 	vmov	s15, r3
 800ac7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac88:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac94:	ee17 2a90 	vmov	r2, s15
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ac9c:	4b13      	ldr	r3, [pc, #76]	; (800acec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca0:	0e1b      	lsrs	r3, r3, #24
 800aca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800acba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acc2:	ee17 2a90 	vmov	r2, s15
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800acca:	e008      	b.n	800acde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	609a      	str	r2, [r3, #8]
}
 800acde:	bf00      	nop
 800ace0:	3724      	adds	r7, #36	; 0x24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	58024400 	.word	0x58024400
 800acf0:	03d09000 	.word	0x03d09000
 800acf4:	46000000 	.word	0x46000000
 800acf8:	4c742400 	.word	0x4c742400
 800acfc:	4a742400 	.word	0x4a742400
 800ad00:	4af42400 	.word	0x4af42400

0800ad04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b089      	sub	sp, #36	; 0x24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad0c:	4ba1      	ldr	r3, [pc, #644]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad10:	f003 0303 	and.w	r3, r3, #3
 800ad14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ad16:	4b9f      	ldr	r3, [pc, #636]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1a:	0d1b      	lsrs	r3, r3, #20
 800ad1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ad22:	4b9c      	ldr	r3, [pc, #624]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad26:	0a1b      	lsrs	r3, r3, #8
 800ad28:	f003 0301 	and.w	r3, r3, #1
 800ad2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ad2e:	4b99      	ldr	r3, [pc, #612]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad32:	08db      	lsrs	r3, r3, #3
 800ad34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad38:	693a      	ldr	r2, [r7, #16]
 800ad3a:	fb02 f303 	mul.w	r3, r2, r3
 800ad3e:	ee07 3a90 	vmov	s15, r3
 800ad42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 8111 	beq.w	800af74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	f000 8083 	beq.w	800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	f200 80a1 	bhi.w	800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d003      	beq.n	800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d056      	beq.n	800ae1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad6e:	e099      	b.n	800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad70:	4b88      	ldr	r3, [pc, #544]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 0320 	and.w	r3, r3, #32
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d02d      	beq.n	800add8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad7c:	4b85      	ldr	r3, [pc, #532]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	08db      	lsrs	r3, r3, #3
 800ad82:	f003 0303 	and.w	r3, r3, #3
 800ad86:	4a84      	ldr	r2, [pc, #528]	; (800af98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad88:	fa22 f303 	lsr.w	r3, r2, r3
 800ad8c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	ee07 3a90 	vmov	s15, r3
 800ad94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	ee07 3a90 	vmov	s15, r3
 800ad9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ada6:	4b7b      	ldr	r3, [pc, #492]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ada8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adae:	ee07 3a90 	vmov	s15, r3
 800adb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800add6:	e087      	b.n	800aee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	ee07 3a90 	vmov	s15, r3
 800adde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800afa0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ade6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adea:	4b6a      	ldr	r3, [pc, #424]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800adfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae1a:	e065      	b.n	800aee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800afa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae2e:	4b59      	ldr	r3, [pc, #356]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae36:	ee07 3a90 	vmov	s15, r3
 800ae3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae42:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae5e:	e043      	b.n	800aee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800afa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae72:	4b48      	ldr	r3, [pc, #288]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae86:	eddf 5a45 	vldr	s11, [pc, #276]	; 800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aea2:	e021      	b.n	800aee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	ee07 3a90 	vmov	s15, r3
 800aeaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800afa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aeb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeb6:	4b37      	ldr	r3, [pc, #220]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aebe:	ee07 3a90 	vmov	s15, r3
 800aec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aec6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800af9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aede:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aee6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800aee8:	4b2a      	ldr	r3, [pc, #168]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeec:	0a5b      	lsrs	r3, r3, #9
 800aeee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aef2:	ee07 3a90 	vmov	s15, r3
 800aef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aefe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af02:	edd7 6a07 	vldr	s13, [r7, #28]
 800af06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af0e:	ee17 2a90 	vmov	r2, s15
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800af16:	4b1f      	ldr	r3, [pc, #124]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1a:	0c1b      	lsrs	r3, r3, #16
 800af1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af20:	ee07 3a90 	vmov	s15, r3
 800af24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af30:	edd7 6a07 	vldr	s13, [r7, #28]
 800af34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af3c:	ee17 2a90 	vmov	r2, s15
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800af44:	4b13      	ldr	r3, [pc, #76]	; (800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af48:	0e1b      	lsrs	r3, r3, #24
 800af4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af4e:	ee07 3a90 	vmov	s15, r3
 800af52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800af62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af6a:	ee17 2a90 	vmov	r2, s15
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af72:	e008      	b.n	800af86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	609a      	str	r2, [r3, #8]
}
 800af86:	bf00      	nop
 800af88:	3724      	adds	r7, #36	; 0x24
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	58024400 	.word	0x58024400
 800af98:	03d09000 	.word	0x03d09000
 800af9c:	46000000 	.word	0x46000000
 800afa0:	4c742400 	.word	0x4c742400
 800afa4:	4a742400 	.word	0x4a742400
 800afa8:	4af42400 	.word	0x4af42400

0800afac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800afba:	4b53      	ldr	r3, [pc, #332]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800afbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbe:	f003 0303 	and.w	r3, r3, #3
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d101      	bne.n	800afca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	e099      	b.n	800b0fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800afca:	4b4f      	ldr	r3, [pc, #316]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a4e      	ldr	r2, [pc, #312]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800afd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800afd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afd6:	f7fa fda5 	bl	8005b24 <HAL_GetTick>
 800afda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800afdc:	e008      	b.n	800aff0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800afde:	f7fa fda1 	bl	8005b24 <HAL_GetTick>
 800afe2:	4602      	mov	r2, r0
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d901      	bls.n	800aff0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800afec:	2303      	movs	r3, #3
 800afee:	e086      	b.n	800b0fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aff0:	4b45      	ldr	r3, [pc, #276]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1f0      	bne.n	800afde <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800affc:	4b42      	ldr	r3, [pc, #264]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800affe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b000:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	031b      	lsls	r3, r3, #12
 800b00a:	493f      	ldr	r1, [pc, #252]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b00c:	4313      	orrs	r3, r2
 800b00e:	628b      	str	r3, [r1, #40]	; 0x28
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	3b01      	subs	r3, #1
 800b016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	3b01      	subs	r3, #1
 800b020:	025b      	lsls	r3, r3, #9
 800b022:	b29b      	uxth	r3, r3
 800b024:	431a      	orrs	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	3b01      	subs	r3, #1
 800b02c:	041b      	lsls	r3, r3, #16
 800b02e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b032:	431a      	orrs	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	3b01      	subs	r3, #1
 800b03a:	061b      	lsls	r3, r3, #24
 800b03c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b040:	4931      	ldr	r1, [pc, #196]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b042:	4313      	orrs	r3, r2
 800b044:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b046:	4b30      	ldr	r3, [pc, #192]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	695b      	ldr	r3, [r3, #20]
 800b052:	492d      	ldr	r1, [pc, #180]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b054:	4313      	orrs	r3, r2
 800b056:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b058:	4b2b      	ldr	r3, [pc, #172]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05c:	f023 0220 	bic.w	r2, r3, #32
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	4928      	ldr	r1, [pc, #160]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b066:	4313      	orrs	r3, r2
 800b068:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b06a:	4b27      	ldr	r3, [pc, #156]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06e:	4a26      	ldr	r2, [pc, #152]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b070:	f023 0310 	bic.w	r3, r3, #16
 800b074:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b076:	4b24      	ldr	r3, [pc, #144]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b07a:	4b24      	ldr	r3, [pc, #144]	; (800b10c <RCCEx_PLL2_Config+0x160>)
 800b07c:	4013      	ands	r3, r2
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	69d2      	ldr	r2, [r2, #28]
 800b082:	00d2      	lsls	r2, r2, #3
 800b084:	4920      	ldr	r1, [pc, #128]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b086:	4313      	orrs	r3, r2
 800b088:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b08a:	4b1f      	ldr	r3, [pc, #124]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08e:	4a1e      	ldr	r2, [pc, #120]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b090:	f043 0310 	orr.w	r3, r3, #16
 800b094:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d106      	bne.n	800b0aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b09c:	4b1a      	ldr	r3, [pc, #104]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a0:	4a19      	ldr	r2, [pc, #100]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b0a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0a8:	e00f      	b.n	800b0ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d106      	bne.n	800b0be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b0b0:	4b15      	ldr	r3, [pc, #84]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b4:	4a14      	ldr	r2, [pc, #80]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b0b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0bc:	e005      	b.n	800b0ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b0be:	4b12      	ldr	r3, [pc, #72]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c2:	4a11      	ldr	r2, [pc, #68]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b0c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b0c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b0ca:	4b0f      	ldr	r3, [pc, #60]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a0e      	ldr	r2, [pc, #56]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b0d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b0d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0d6:	f7fa fd25 	bl	8005b24 <HAL_GetTick>
 800b0da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b0dc:	e008      	b.n	800b0f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b0de:	f7fa fd21 	bl	8005b24 <HAL_GetTick>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	d901      	bls.n	800b0f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	e006      	b.n	800b0fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b0f0:	4b05      	ldr	r3, [pc, #20]	; (800b108 <RCCEx_PLL2_Config+0x15c>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d0f0      	beq.n	800b0de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	58024400 	.word	0x58024400
 800b10c:	ffff0007 	.word	0xffff0007

0800b110 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b11a:	2300      	movs	r3, #0
 800b11c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b11e:	4b53      	ldr	r3, [pc, #332]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b122:	f003 0303 	and.w	r3, r3, #3
 800b126:	2b03      	cmp	r3, #3
 800b128:	d101      	bne.n	800b12e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e099      	b.n	800b262 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b12e:	4b4f      	ldr	r3, [pc, #316]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a4e      	ldr	r2, [pc, #312]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b13a:	f7fa fcf3 	bl	8005b24 <HAL_GetTick>
 800b13e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b140:	e008      	b.n	800b154 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b142:	f7fa fcef 	bl	8005b24 <HAL_GetTick>
 800b146:	4602      	mov	r2, r0
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d901      	bls.n	800b154 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b150:	2303      	movs	r3, #3
 800b152:	e086      	b.n	800b262 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b154:	4b45      	ldr	r3, [pc, #276]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1f0      	bne.n	800b142 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b160:	4b42      	ldr	r3, [pc, #264]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b164:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	051b      	lsls	r3, r3, #20
 800b16e:	493f      	ldr	r1, [pc, #252]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b170:	4313      	orrs	r3, r2
 800b172:	628b      	str	r3, [r1, #40]	; 0x28
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	3b01      	subs	r3, #1
 800b17a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	3b01      	subs	r3, #1
 800b184:	025b      	lsls	r3, r3, #9
 800b186:	b29b      	uxth	r3, r3
 800b188:	431a      	orrs	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	3b01      	subs	r3, #1
 800b190:	041b      	lsls	r3, r3, #16
 800b192:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b196:	431a      	orrs	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	691b      	ldr	r3, [r3, #16]
 800b19c:	3b01      	subs	r3, #1
 800b19e:	061b      	lsls	r3, r3, #24
 800b1a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b1a4:	4931      	ldr	r1, [pc, #196]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b1aa:	4b30      	ldr	r3, [pc, #192]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	695b      	ldr	r3, [r3, #20]
 800b1b6:	492d      	ldr	r1, [pc, #180]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b1bc:	4b2b      	ldr	r3, [pc, #172]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	4928      	ldr	r1, [pc, #160]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b1ce:	4b27      	ldr	r3, [pc, #156]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d2:	4a26      	ldr	r2, [pc, #152]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b1d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b1da:	4b24      	ldr	r3, [pc, #144]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b1dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1de:	4b24      	ldr	r3, [pc, #144]	; (800b270 <RCCEx_PLL3_Config+0x160>)
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	69d2      	ldr	r2, [r2, #28]
 800b1e6:	00d2      	lsls	r2, r2, #3
 800b1e8:	4920      	ldr	r1, [pc, #128]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b1ee:	4b1f      	ldr	r3, [pc, #124]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f2:	4a1e      	ldr	r2, [pc, #120]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b1f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d106      	bne.n	800b20e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b200:	4b1a      	ldr	r3, [pc, #104]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b204:	4a19      	ldr	r2, [pc, #100]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b206:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b20a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b20c:	e00f      	b.n	800b22e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d106      	bne.n	800b222 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b214:	4b15      	ldr	r3, [pc, #84]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b218:	4a14      	ldr	r2, [pc, #80]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b21a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b21e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b220:	e005      	b.n	800b22e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b222:	4b12      	ldr	r3, [pc, #72]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b226:	4a11      	ldr	r2, [pc, #68]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b22c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b22e:	4b0f      	ldr	r3, [pc, #60]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a0e      	ldr	r2, [pc, #56]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b23a:	f7fa fc73 	bl	8005b24 <HAL_GetTick>
 800b23e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b240:	e008      	b.n	800b254 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b242:	f7fa fc6f 	bl	8005b24 <HAL_GetTick>
 800b246:	4602      	mov	r2, r0
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	d901      	bls.n	800b254 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b250:	2303      	movs	r3, #3
 800b252:	e006      	b.n	800b262 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b254:	4b05      	ldr	r3, [pc, #20]	; (800b26c <RCCEx_PLL3_Config+0x15c>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d0f0      	beq.n	800b242 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b260:	7bfb      	ldrb	r3, [r7, #15]
}
 800b262:	4618      	mov	r0, r3
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	58024400 	.word	0x58024400
 800b270:	ffff0007 	.word	0xffff0007

0800b274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	e049      	b.n	800b31a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d106      	bne.n	800b2a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7f9 ff7a 	bl	8005194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3304      	adds	r3, #4
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	f000 ff12 	bl	800c0dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
	...

0800b324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b324:	b480      	push	{r7}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b01      	cmp	r3, #1
 800b336:	d001      	beq.n	800b33c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	e05e      	b.n	800b3fa <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2202      	movs	r2, #2
 800b340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68da      	ldr	r2, [r3, #12]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f042 0201 	orr.w	r2, r2, #1
 800b352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a2b      	ldr	r2, [pc, #172]	; (800b408 <HAL_TIM_Base_Start_IT+0xe4>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d02c      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x94>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b366:	d027      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x94>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a27      	ldr	r2, [pc, #156]	; (800b40c <HAL_TIM_Base_Start_IT+0xe8>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d022      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x94>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a26      	ldr	r2, [pc, #152]	; (800b410 <HAL_TIM_Base_Start_IT+0xec>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d01d      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x94>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a24      	ldr	r2, [pc, #144]	; (800b414 <HAL_TIM_Base_Start_IT+0xf0>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d018      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x94>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a23      	ldr	r2, [pc, #140]	; (800b418 <HAL_TIM_Base_Start_IT+0xf4>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d013      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x94>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a21      	ldr	r2, [pc, #132]	; (800b41c <HAL_TIM_Base_Start_IT+0xf8>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d00e      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x94>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a20      	ldr	r2, [pc, #128]	; (800b420 <HAL_TIM_Base_Start_IT+0xfc>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d009      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x94>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a1e      	ldr	r2, [pc, #120]	; (800b424 <HAL_TIM_Base_Start_IT+0x100>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d004      	beq.n	800b3b8 <HAL_TIM_Base_Start_IT+0x94>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a1d      	ldr	r2, [pc, #116]	; (800b428 <HAL_TIM_Base_Start_IT+0x104>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d115      	bne.n	800b3e4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	689a      	ldr	r2, [r3, #8]
 800b3be:	4b1b      	ldr	r3, [pc, #108]	; (800b42c <HAL_TIM_Base_Start_IT+0x108>)
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b06      	cmp	r3, #6
 800b3c8:	d015      	beq.n	800b3f6 <HAL_TIM_Base_Start_IT+0xd2>
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3d0:	d011      	beq.n	800b3f6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f042 0201 	orr.w	r2, r2, #1
 800b3e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3e2:	e008      	b.n	800b3f6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f042 0201 	orr.w	r2, r2, #1
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	e000      	b.n	800b3f8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	40010000 	.word	0x40010000
 800b40c:	40000400 	.word	0x40000400
 800b410:	40000800 	.word	0x40000800
 800b414:	40000c00 	.word	0x40000c00
 800b418:	40010400 	.word	0x40010400
 800b41c:	40001800 	.word	0x40001800
 800b420:	40014000 	.word	0x40014000
 800b424:	4000e000 	.word	0x4000e000
 800b428:	4000e400 	.word	0x4000e400
 800b42c:	00010007 	.word	0x00010007

0800b430 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d101      	bne.n	800b442 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e049      	b.n	800b4d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d106      	bne.n	800b45c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f7f9 fe34 	bl	80050c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2202      	movs	r2, #2
 800b460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	3304      	adds	r3, #4
 800b46c:	4619      	mov	r1, r3
 800b46e:	4610      	mov	r0, r2
 800b470:	f000 fe34 	bl	800c0dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
	...

0800b4e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d109      	bne.n	800b504 <HAL_TIM_PWM_Start+0x24>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	bf14      	ite	ne
 800b4fc:	2301      	movne	r3, #1
 800b4fe:	2300      	moveq	r3, #0
 800b500:	b2db      	uxtb	r3, r3
 800b502:	e03c      	b.n	800b57e <HAL_TIM_PWM_Start+0x9e>
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	2b04      	cmp	r3, #4
 800b508:	d109      	bne.n	800b51e <HAL_TIM_PWM_Start+0x3e>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b510:	b2db      	uxtb	r3, r3
 800b512:	2b01      	cmp	r3, #1
 800b514:	bf14      	ite	ne
 800b516:	2301      	movne	r3, #1
 800b518:	2300      	moveq	r3, #0
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	e02f      	b.n	800b57e <HAL_TIM_PWM_Start+0x9e>
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2b08      	cmp	r3, #8
 800b522:	d109      	bne.n	800b538 <HAL_TIM_PWM_Start+0x58>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	bf14      	ite	ne
 800b530:	2301      	movne	r3, #1
 800b532:	2300      	moveq	r3, #0
 800b534:	b2db      	uxtb	r3, r3
 800b536:	e022      	b.n	800b57e <HAL_TIM_PWM_Start+0x9e>
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	2b0c      	cmp	r3, #12
 800b53c:	d109      	bne.n	800b552 <HAL_TIM_PWM_Start+0x72>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b01      	cmp	r3, #1
 800b548:	bf14      	ite	ne
 800b54a:	2301      	movne	r3, #1
 800b54c:	2300      	moveq	r3, #0
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	e015      	b.n	800b57e <HAL_TIM_PWM_Start+0x9e>
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	2b10      	cmp	r3, #16
 800b556:	d109      	bne.n	800b56c <HAL_TIM_PWM_Start+0x8c>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b01      	cmp	r3, #1
 800b562:	bf14      	ite	ne
 800b564:	2301      	movne	r3, #1
 800b566:	2300      	moveq	r3, #0
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	e008      	b.n	800b57e <HAL_TIM_PWM_Start+0x9e>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b572:	b2db      	uxtb	r3, r3
 800b574:	2b01      	cmp	r3, #1
 800b576:	bf14      	ite	ne
 800b578:	2301      	movne	r3, #1
 800b57a:	2300      	moveq	r3, #0
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	e0ab      	b.n	800b6de <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d104      	bne.n	800b596 <HAL_TIM_PWM_Start+0xb6>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2202      	movs	r2, #2
 800b590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b594:	e023      	b.n	800b5de <HAL_TIM_PWM_Start+0xfe>
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	2b04      	cmp	r3, #4
 800b59a:	d104      	bne.n	800b5a6 <HAL_TIM_PWM_Start+0xc6>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2202      	movs	r2, #2
 800b5a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5a4:	e01b      	b.n	800b5de <HAL_TIM_PWM_Start+0xfe>
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	2b08      	cmp	r3, #8
 800b5aa:	d104      	bne.n	800b5b6 <HAL_TIM_PWM_Start+0xd6>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2202      	movs	r2, #2
 800b5b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5b4:	e013      	b.n	800b5de <HAL_TIM_PWM_Start+0xfe>
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	2b0c      	cmp	r3, #12
 800b5ba:	d104      	bne.n	800b5c6 <HAL_TIM_PWM_Start+0xe6>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2202      	movs	r2, #2
 800b5c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b5c4:	e00b      	b.n	800b5de <HAL_TIM_PWM_Start+0xfe>
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b10      	cmp	r3, #16
 800b5ca:	d104      	bne.n	800b5d6 <HAL_TIM_PWM_Start+0xf6>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2202      	movs	r2, #2
 800b5d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5d4:	e003      	b.n	800b5de <HAL_TIM_PWM_Start+0xfe>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2202      	movs	r2, #2
 800b5da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	6839      	ldr	r1, [r7, #0]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f001 f992 	bl	800c910 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a3d      	ldr	r2, [pc, #244]	; (800b6e8 <HAL_TIM_PWM_Start+0x208>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d013      	beq.n	800b61e <HAL_TIM_PWM_Start+0x13e>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a3c      	ldr	r2, [pc, #240]	; (800b6ec <HAL_TIM_PWM_Start+0x20c>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d00e      	beq.n	800b61e <HAL_TIM_PWM_Start+0x13e>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a3a      	ldr	r2, [pc, #232]	; (800b6f0 <HAL_TIM_PWM_Start+0x210>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d009      	beq.n	800b61e <HAL_TIM_PWM_Start+0x13e>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a39      	ldr	r2, [pc, #228]	; (800b6f4 <HAL_TIM_PWM_Start+0x214>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d004      	beq.n	800b61e <HAL_TIM_PWM_Start+0x13e>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a37      	ldr	r2, [pc, #220]	; (800b6f8 <HAL_TIM_PWM_Start+0x218>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d101      	bne.n	800b622 <HAL_TIM_PWM_Start+0x142>
 800b61e:	2301      	movs	r3, #1
 800b620:	e000      	b.n	800b624 <HAL_TIM_PWM_Start+0x144>
 800b622:	2300      	movs	r3, #0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d007      	beq.n	800b638 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b636:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a2a      	ldr	r2, [pc, #168]	; (800b6e8 <HAL_TIM_PWM_Start+0x208>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d02c      	beq.n	800b69c <HAL_TIM_PWM_Start+0x1bc>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b64a:	d027      	beq.n	800b69c <HAL_TIM_PWM_Start+0x1bc>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a2a      	ldr	r2, [pc, #168]	; (800b6fc <HAL_TIM_PWM_Start+0x21c>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d022      	beq.n	800b69c <HAL_TIM_PWM_Start+0x1bc>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a29      	ldr	r2, [pc, #164]	; (800b700 <HAL_TIM_PWM_Start+0x220>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d01d      	beq.n	800b69c <HAL_TIM_PWM_Start+0x1bc>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a27      	ldr	r2, [pc, #156]	; (800b704 <HAL_TIM_PWM_Start+0x224>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d018      	beq.n	800b69c <HAL_TIM_PWM_Start+0x1bc>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a1f      	ldr	r2, [pc, #124]	; (800b6ec <HAL_TIM_PWM_Start+0x20c>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d013      	beq.n	800b69c <HAL_TIM_PWM_Start+0x1bc>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a23      	ldr	r2, [pc, #140]	; (800b708 <HAL_TIM_PWM_Start+0x228>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d00e      	beq.n	800b69c <HAL_TIM_PWM_Start+0x1bc>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a1b      	ldr	r2, [pc, #108]	; (800b6f0 <HAL_TIM_PWM_Start+0x210>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d009      	beq.n	800b69c <HAL_TIM_PWM_Start+0x1bc>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a1f      	ldr	r2, [pc, #124]	; (800b70c <HAL_TIM_PWM_Start+0x22c>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d004      	beq.n	800b69c <HAL_TIM_PWM_Start+0x1bc>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a1e      	ldr	r2, [pc, #120]	; (800b710 <HAL_TIM_PWM_Start+0x230>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d115      	bne.n	800b6c8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	689a      	ldr	r2, [r3, #8]
 800b6a2:	4b1c      	ldr	r3, [pc, #112]	; (800b714 <HAL_TIM_PWM_Start+0x234>)
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2b06      	cmp	r3, #6
 800b6ac:	d015      	beq.n	800b6da <HAL_TIM_PWM_Start+0x1fa>
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b4:	d011      	beq.n	800b6da <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f042 0201 	orr.w	r2, r2, #1
 800b6c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6c6:	e008      	b.n	800b6da <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f042 0201 	orr.w	r2, r2, #1
 800b6d6:	601a      	str	r2, [r3, #0]
 800b6d8:	e000      	b.n	800b6dc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	40010000 	.word	0x40010000
 800b6ec:	40010400 	.word	0x40010400
 800b6f0:	40014000 	.word	0x40014000
 800b6f4:	40014400 	.word	0x40014400
 800b6f8:	40014800 	.word	0x40014800
 800b6fc:	40000400 	.word	0x40000400
 800b700:	40000800 	.word	0x40000800
 800b704:	40000c00 	.word	0x40000c00
 800b708:	40001800 	.word	0x40001800
 800b70c:	4000e000 	.word	0x4000e000
 800b710:	4000e400 	.word	0x4000e400
 800b714:	00010007 	.word	0x00010007

0800b718 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d101      	bne.n	800b72c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	e041      	b.n	800b7b0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b732:	b2db      	uxtb	r3, r3
 800b734:	2b00      	cmp	r3, #0
 800b736:	d106      	bne.n	800b746 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 f839 	bl	800b7b8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2202      	movs	r2, #2
 800b74a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	3304      	adds	r3, #4
 800b756:	4619      	mov	r1, r3
 800b758:	4610      	mov	r0, r2
 800b75a:	f000 fcbf 	bl	800c0dc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f022 0208 	bic.w	r2, r2, #8
 800b76c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6819      	ldr	r1, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	683a      	ldr	r2, [r7, #0]
 800b77a:	430a      	orrs	r2, r1
 800b77c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2201      	movs	r2, #1
 800b78a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2201      	movs	r2, #1
 800b792:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d101      	bne.n	800b7e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e08f      	b.n	800b900 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d106      	bne.n	800b7fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7f9 fd21 	bl	800523c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6899      	ldr	r1, [r3, #8]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	4b3e      	ldr	r3, [pc, #248]	; (800b908 <HAL_TIM_Encoder_Init+0x13c>)
 800b80e:	400b      	ands	r3, r1
 800b810:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	3304      	adds	r3, #4
 800b81a:	4619      	mov	r1, r3
 800b81c:	4610      	mov	r0, r2
 800b81e:	f000 fc5d 	bl	800c0dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	699b      	ldr	r3, [r3, #24]
 800b830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6a1b      	ldr	r3, [r3, #32]
 800b838:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	4313      	orrs	r3, r2
 800b842:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b844:	693a      	ldr	r2, [r7, #16]
 800b846:	4b31      	ldr	r3, [pc, #196]	; (800b90c <HAL_TIM_Encoder_Init+0x140>)
 800b848:	4013      	ands	r3, r2
 800b84a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	689a      	ldr	r2, [r3, #8]
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	021b      	lsls	r3, r3, #8
 800b856:	4313      	orrs	r3, r2
 800b858:	693a      	ldr	r2, [r7, #16]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	4b2b      	ldr	r3, [pc, #172]	; (800b910 <HAL_TIM_Encoder_Init+0x144>)
 800b862:	4013      	ands	r3, r2
 800b864:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	4b2a      	ldr	r3, [pc, #168]	; (800b914 <HAL_TIM_Encoder_Init+0x148>)
 800b86a:	4013      	ands	r3, r2
 800b86c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	68da      	ldr	r2, [r3, #12]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	69db      	ldr	r3, [r3, #28]
 800b876:	021b      	lsls	r3, r3, #8
 800b878:	4313      	orrs	r3, r2
 800b87a:	693a      	ldr	r2, [r7, #16]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	011a      	lsls	r2, r3, #4
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	6a1b      	ldr	r3, [r3, #32]
 800b88a:	031b      	lsls	r3, r3, #12
 800b88c:	4313      	orrs	r3, r2
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	4313      	orrs	r3, r2
 800b892:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b89a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b8a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	685a      	ldr	r2, [r3, #4]
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	695b      	ldr	r3, [r3, #20]
 800b8ac:	011b      	lsls	r3, r3, #4
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	697a      	ldr	r2, [r7, #20]
 800b8bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	693a      	ldr	r2, [r7, #16]
 800b8c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3718      	adds	r7, #24
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	fffebff8 	.word	0xfffebff8
 800b90c:	fffffcfc 	.word	0xfffffcfc
 800b910:	fffff3f3 	.word	0xfffff3f3
 800b914:	ffff0f0f 	.word	0xffff0f0f

0800b918 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b928:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b930:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b938:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b940:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d110      	bne.n	800b96a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b948:	7bfb      	ldrb	r3, [r7, #15]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d102      	bne.n	800b954 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b94e:	7b7b      	ldrb	r3, [r7, #13]
 800b950:	2b01      	cmp	r3, #1
 800b952:	d001      	beq.n	800b958 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	e069      	b.n	800ba2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2202      	movs	r2, #2
 800b95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2202      	movs	r2, #2
 800b964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b968:	e031      	b.n	800b9ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	2b04      	cmp	r3, #4
 800b96e:	d110      	bne.n	800b992 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b970:	7bbb      	ldrb	r3, [r7, #14]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d102      	bne.n	800b97c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b976:	7b3b      	ldrb	r3, [r7, #12]
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d001      	beq.n	800b980 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	e055      	b.n	800ba2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2202      	movs	r2, #2
 800b984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2202      	movs	r2, #2
 800b98c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b990:	e01d      	b.n	800b9ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b992:	7bfb      	ldrb	r3, [r7, #15]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d108      	bne.n	800b9aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b998:	7bbb      	ldrb	r3, [r7, #14]
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d105      	bne.n	800b9aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b99e:	7b7b      	ldrb	r3, [r7, #13]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d102      	bne.n	800b9aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b9a4:	7b3b      	ldrb	r3, [r7, #12]
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d001      	beq.n	800b9ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e03e      	b.n	800ba2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2202      	movs	r2, #2
 800b9b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2202      	movs	r2, #2
 800b9ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2202      	movs	r2, #2
 800b9c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2202      	movs	r2, #2
 800b9ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d003      	beq.n	800b9dc <HAL_TIM_Encoder_Start+0xc4>
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	d008      	beq.n	800b9ec <HAL_TIM_Encoder_Start+0xd4>
 800b9da:	e00f      	b.n	800b9fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f000 ff93 	bl	800c910 <TIM_CCxChannelCmd>
      break;
 800b9ea:	e016      	b.n	800ba1a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	2104      	movs	r1, #4
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f000 ff8b 	bl	800c910 <TIM_CCxChannelCmd>
      break;
 800b9fa:	e00e      	b.n	800ba1a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2201      	movs	r2, #1
 800ba02:	2100      	movs	r1, #0
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 ff83 	bl	800c910 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	2104      	movs	r1, #4
 800ba12:	4618      	mov	r0, r3
 800ba14:	f000 ff7c 	bl	800c910 <TIM_CCxChannelCmd>
      break;
 800ba18:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f042 0201 	orr.w	r2, r2, #1
 800ba28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	f003 0302 	and.w	r3, r3, #2
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d122      	bne.n	800ba90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	f003 0302 	and.w	r3, r3, #2
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d11b      	bne.n	800ba90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f06f 0202 	mvn.w	r2, #2
 800ba60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2201      	movs	r2, #1
 800ba66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	f003 0303 	and.w	r3, r3, #3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 fb12 	bl	800c0a0 <HAL_TIM_IC_CaptureCallback>
 800ba7c:	e005      	b.n	800ba8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 fb04 	bl	800c08c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fb15 	bl	800c0b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	f003 0304 	and.w	r3, r3, #4
 800ba9a:	2b04      	cmp	r3, #4
 800ba9c:	d122      	bne.n	800bae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b04      	cmp	r3, #4
 800baaa:	d11b      	bne.n	800bae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f06f 0204 	mvn.w	r2, #4
 800bab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2202      	movs	r2, #2
 800baba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	699b      	ldr	r3, [r3, #24]
 800bac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d003      	beq.n	800bad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fae8 	bl	800c0a0 <HAL_TIM_IC_CaptureCallback>
 800bad0:	e005      	b.n	800bade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fada 	bl	800c08c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 faeb 	bl	800c0b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	f003 0308 	and.w	r3, r3, #8
 800baee:	2b08      	cmp	r3, #8
 800baf0:	d122      	bne.n	800bb38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	f003 0308 	and.w	r3, r3, #8
 800bafc:	2b08      	cmp	r3, #8
 800bafe:	d11b      	bne.n	800bb38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f06f 0208 	mvn.w	r2, #8
 800bb08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2204      	movs	r2, #4
 800bb0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	69db      	ldr	r3, [r3, #28]
 800bb16:	f003 0303 	and.w	r3, r3, #3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d003      	beq.n	800bb26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 fabe 	bl	800c0a0 <HAL_TIM_IC_CaptureCallback>
 800bb24:	e005      	b.n	800bb32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 fab0 	bl	800c08c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fac1 	bl	800c0b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	f003 0310 	and.w	r3, r3, #16
 800bb42:	2b10      	cmp	r3, #16
 800bb44:	d122      	bne.n	800bb8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	f003 0310 	and.w	r3, r3, #16
 800bb50:	2b10      	cmp	r3, #16
 800bb52:	d11b      	bne.n	800bb8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f06f 0210 	mvn.w	r2, #16
 800bb5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2208      	movs	r2, #8
 800bb62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	69db      	ldr	r3, [r3, #28]
 800bb6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d003      	beq.n	800bb7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 fa94 	bl	800c0a0 <HAL_TIM_IC_CaptureCallback>
 800bb78:	e005      	b.n	800bb86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fa86 	bl	800c08c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 fa97 	bl	800c0b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	f003 0301 	and.w	r3, r3, #1
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d10e      	bne.n	800bbb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	f003 0301 	and.w	r3, r3, #1
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d107      	bne.n	800bbb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f06f 0201 	mvn.w	r2, #1
 800bbb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f7f5 fd84 	bl	80016c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbc2:	2b80      	cmp	r3, #128	; 0x80
 800bbc4:	d10e      	bne.n	800bbe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbd0:	2b80      	cmp	r3, #128	; 0x80
 800bbd2:	d107      	bne.n	800bbe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bbdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f001 f802 	bl	800cbe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbf2:	d10e      	bne.n	800bc12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbfe:	2b80      	cmp	r3, #128	; 0x80
 800bc00:	d107      	bne.n	800bc12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bc0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 fff5 	bl	800cbfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	691b      	ldr	r3, [r3, #16]
 800bc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc1c:	2b40      	cmp	r3, #64	; 0x40
 800bc1e:	d10e      	bne.n	800bc3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc2a:	2b40      	cmp	r3, #64	; 0x40
 800bc2c:	d107      	bne.n	800bc3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 fa45 	bl	800c0c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	f003 0320 	and.w	r3, r3, #32
 800bc48:	2b20      	cmp	r3, #32
 800bc4a:	d10e      	bne.n	800bc6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	f003 0320 	and.w	r3, r3, #32
 800bc56:	2b20      	cmp	r3, #32
 800bc58:	d107      	bne.n	800bc6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f06f 0220 	mvn.w	r2, #32
 800bc62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 ffb5 	bl	800cbd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc6a:	bf00      	nop
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
	...

0800bc74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b086      	sub	sp, #24
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc80:	2300      	movs	r3, #0
 800bc82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d101      	bne.n	800bc92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bc8e:	2302      	movs	r3, #2
 800bc90:	e0ff      	b.n	800be92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2201      	movs	r2, #1
 800bc96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2b14      	cmp	r3, #20
 800bc9e:	f200 80f0 	bhi.w	800be82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bca2:	a201      	add	r2, pc, #4	; (adr r2, 800bca8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca8:	0800bcfd 	.word	0x0800bcfd
 800bcac:	0800be83 	.word	0x0800be83
 800bcb0:	0800be83 	.word	0x0800be83
 800bcb4:	0800be83 	.word	0x0800be83
 800bcb8:	0800bd3d 	.word	0x0800bd3d
 800bcbc:	0800be83 	.word	0x0800be83
 800bcc0:	0800be83 	.word	0x0800be83
 800bcc4:	0800be83 	.word	0x0800be83
 800bcc8:	0800bd7f 	.word	0x0800bd7f
 800bccc:	0800be83 	.word	0x0800be83
 800bcd0:	0800be83 	.word	0x0800be83
 800bcd4:	0800be83 	.word	0x0800be83
 800bcd8:	0800bdbf 	.word	0x0800bdbf
 800bcdc:	0800be83 	.word	0x0800be83
 800bce0:	0800be83 	.word	0x0800be83
 800bce4:	0800be83 	.word	0x0800be83
 800bce8:	0800be01 	.word	0x0800be01
 800bcec:	0800be83 	.word	0x0800be83
 800bcf0:	0800be83 	.word	0x0800be83
 800bcf4:	0800be83 	.word	0x0800be83
 800bcf8:	0800be41 	.word	0x0800be41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	68b9      	ldr	r1, [r7, #8]
 800bd02:	4618      	mov	r0, r3
 800bd04:	f000 fa90 	bl	800c228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	699a      	ldr	r2, [r3, #24]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f042 0208 	orr.w	r2, r2, #8
 800bd16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	699a      	ldr	r2, [r3, #24]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f022 0204 	bic.w	r2, r2, #4
 800bd26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	6999      	ldr	r1, [r3, #24]
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	691a      	ldr	r2, [r3, #16]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	430a      	orrs	r2, r1
 800bd38:	619a      	str	r2, [r3, #24]
      break;
 800bd3a:	e0a5      	b.n	800be88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	68b9      	ldr	r1, [r7, #8]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f000 fb00 	bl	800c348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	699a      	ldr	r2, [r3, #24]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	699a      	ldr	r2, [r3, #24]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	6999      	ldr	r1, [r3, #24]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	021a      	lsls	r2, r3, #8
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	430a      	orrs	r2, r1
 800bd7a:	619a      	str	r2, [r3, #24]
      break;
 800bd7c:	e084      	b.n	800be88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68b9      	ldr	r1, [r7, #8]
 800bd84:	4618      	mov	r0, r3
 800bd86:	f000 fb69 	bl	800c45c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	69da      	ldr	r2, [r3, #28]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f042 0208 	orr.w	r2, r2, #8
 800bd98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	69da      	ldr	r2, [r3, #28]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f022 0204 	bic.w	r2, r2, #4
 800bda8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	69d9      	ldr	r1, [r3, #28]
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	691a      	ldr	r2, [r3, #16]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	61da      	str	r2, [r3, #28]
      break;
 800bdbc:	e064      	b.n	800be88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68b9      	ldr	r1, [r7, #8]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 fbd1 	bl	800c56c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	69da      	ldr	r2, [r3, #28]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	69da      	ldr	r2, [r3, #28]
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bde8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	69d9      	ldr	r1, [r3, #28]
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	021a      	lsls	r2, r3, #8
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	430a      	orrs	r2, r1
 800bdfc:	61da      	str	r2, [r3, #28]
      break;
 800bdfe:	e043      	b.n	800be88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	68b9      	ldr	r1, [r7, #8]
 800be06:	4618      	mov	r0, r3
 800be08:	f000 fc1a 	bl	800c640 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f042 0208 	orr.w	r2, r2, #8
 800be1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f022 0204 	bic.w	r2, r2, #4
 800be2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	691a      	ldr	r2, [r3, #16]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	430a      	orrs	r2, r1
 800be3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be3e:	e023      	b.n	800be88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	68b9      	ldr	r1, [r7, #8]
 800be46:	4618      	mov	r0, r3
 800be48:	f000 fc5e 	bl	800c708 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	021a      	lsls	r2, r3, #8
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	430a      	orrs	r2, r1
 800be7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be80:	e002      	b.n	800be88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	75fb      	strb	r3, [r7, #23]
      break;
 800be86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be90:	7dfb      	ldrb	r3, [r7, #23]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3718      	adds	r7, #24
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop

0800be9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bea6:	2300      	movs	r3, #0
 800bea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d101      	bne.n	800beb8 <HAL_TIM_ConfigClockSource+0x1c>
 800beb4:	2302      	movs	r3, #2
 800beb6:	e0dc      	b.n	800c072 <HAL_TIM_ConfigClockSource+0x1d6>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2202      	movs	r2, #2
 800bec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	4b6a      	ldr	r3, [pc, #424]	; (800c07c <HAL_TIM_ConfigClockSource+0x1e0>)
 800bed4:	4013      	ands	r3, r2
 800bed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a64      	ldr	r2, [pc, #400]	; (800c080 <HAL_TIM_ConfigClockSource+0x1e4>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	f000 80a9 	beq.w	800c046 <HAL_TIM_ConfigClockSource+0x1aa>
 800bef4:	4a62      	ldr	r2, [pc, #392]	; (800c080 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	f200 80ae 	bhi.w	800c058 <HAL_TIM_ConfigClockSource+0x1bc>
 800befc:	4a61      	ldr	r2, [pc, #388]	; (800c084 <HAL_TIM_ConfigClockSource+0x1e8>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	f000 80a1 	beq.w	800c046 <HAL_TIM_ConfigClockSource+0x1aa>
 800bf04:	4a5f      	ldr	r2, [pc, #380]	; (800c084 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	f200 80a6 	bhi.w	800c058 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf0c:	4a5e      	ldr	r2, [pc, #376]	; (800c088 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	f000 8099 	beq.w	800c046 <HAL_TIM_ConfigClockSource+0x1aa>
 800bf14:	4a5c      	ldr	r2, [pc, #368]	; (800c088 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	f200 809e 	bhi.w	800c058 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bf20:	f000 8091 	beq.w	800c046 <HAL_TIM_ConfigClockSource+0x1aa>
 800bf24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bf28:	f200 8096 	bhi.w	800c058 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf30:	f000 8089 	beq.w	800c046 <HAL_TIM_ConfigClockSource+0x1aa>
 800bf34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf38:	f200 808e 	bhi.w	800c058 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf40:	d03e      	beq.n	800bfc0 <HAL_TIM_ConfigClockSource+0x124>
 800bf42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf46:	f200 8087 	bhi.w	800c058 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf4e:	f000 8086 	beq.w	800c05e <HAL_TIM_ConfigClockSource+0x1c2>
 800bf52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf56:	d87f      	bhi.n	800c058 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf58:	2b70      	cmp	r3, #112	; 0x70
 800bf5a:	d01a      	beq.n	800bf92 <HAL_TIM_ConfigClockSource+0xf6>
 800bf5c:	2b70      	cmp	r3, #112	; 0x70
 800bf5e:	d87b      	bhi.n	800c058 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf60:	2b60      	cmp	r3, #96	; 0x60
 800bf62:	d050      	beq.n	800c006 <HAL_TIM_ConfigClockSource+0x16a>
 800bf64:	2b60      	cmp	r3, #96	; 0x60
 800bf66:	d877      	bhi.n	800c058 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf68:	2b50      	cmp	r3, #80	; 0x50
 800bf6a:	d03c      	beq.n	800bfe6 <HAL_TIM_ConfigClockSource+0x14a>
 800bf6c:	2b50      	cmp	r3, #80	; 0x50
 800bf6e:	d873      	bhi.n	800c058 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf70:	2b40      	cmp	r3, #64	; 0x40
 800bf72:	d058      	beq.n	800c026 <HAL_TIM_ConfigClockSource+0x18a>
 800bf74:	2b40      	cmp	r3, #64	; 0x40
 800bf76:	d86f      	bhi.n	800c058 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf78:	2b30      	cmp	r3, #48	; 0x30
 800bf7a:	d064      	beq.n	800c046 <HAL_TIM_ConfigClockSource+0x1aa>
 800bf7c:	2b30      	cmp	r3, #48	; 0x30
 800bf7e:	d86b      	bhi.n	800c058 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf80:	2b20      	cmp	r3, #32
 800bf82:	d060      	beq.n	800c046 <HAL_TIM_ConfigClockSource+0x1aa>
 800bf84:	2b20      	cmp	r3, #32
 800bf86:	d867      	bhi.n	800c058 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d05c      	beq.n	800c046 <HAL_TIM_ConfigClockSource+0x1aa>
 800bf8c:	2b10      	cmp	r3, #16
 800bf8e:	d05a      	beq.n	800c046 <HAL_TIM_ConfigClockSource+0x1aa>
 800bf90:	e062      	b.n	800c058 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6818      	ldr	r0, [r3, #0]
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	6899      	ldr	r1, [r3, #8]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	f000 fc95 	bl	800c8d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bfb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	609a      	str	r2, [r3, #8]
      break;
 800bfbe:	e04f      	b.n	800c060 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6818      	ldr	r0, [r3, #0]
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	6899      	ldr	r1, [r3, #8]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	685a      	ldr	r2, [r3, #4]
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	f000 fc7e 	bl	800c8d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	689a      	ldr	r2, [r3, #8]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfe2:	609a      	str	r2, [r3, #8]
      break;
 800bfe4:	e03c      	b.n	800c060 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6818      	ldr	r0, [r3, #0]
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	6859      	ldr	r1, [r3, #4]
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	461a      	mov	r2, r3
 800bff4:	f000 fbee 	bl	800c7d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2150      	movs	r1, #80	; 0x50
 800bffe:	4618      	mov	r0, r3
 800c000:	f000 fc48 	bl	800c894 <TIM_ITRx_SetConfig>
      break;
 800c004:	e02c      	b.n	800c060 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6818      	ldr	r0, [r3, #0]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	6859      	ldr	r1, [r3, #4]
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	461a      	mov	r2, r3
 800c014:	f000 fc0d 	bl	800c832 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2160      	movs	r1, #96	; 0x60
 800c01e:	4618      	mov	r0, r3
 800c020:	f000 fc38 	bl	800c894 <TIM_ITRx_SetConfig>
      break;
 800c024:	e01c      	b.n	800c060 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6818      	ldr	r0, [r3, #0]
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	6859      	ldr	r1, [r3, #4]
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	461a      	mov	r2, r3
 800c034:	f000 fbce 	bl	800c7d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	2140      	movs	r1, #64	; 0x40
 800c03e:	4618      	mov	r0, r3
 800c040:	f000 fc28 	bl	800c894 <TIM_ITRx_SetConfig>
      break;
 800c044:	e00c      	b.n	800c060 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4619      	mov	r1, r3
 800c050:	4610      	mov	r0, r2
 800c052:	f000 fc1f 	bl	800c894 <TIM_ITRx_SetConfig>
      break;
 800c056:	e003      	b.n	800c060 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	73fb      	strb	r3, [r7, #15]
      break;
 800c05c:	e000      	b.n	800c060 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c05e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c070:	7bfb      	ldrb	r3, [r7, #15]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	ffceff88 	.word	0xffceff88
 800c080:	00100040 	.word	0x00100040
 800c084:	00100030 	.word	0x00100030
 800c088:	00100020 	.word	0x00100020

0800c08c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c0a8:	bf00      	nop
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0bc:	bf00      	nop
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a44      	ldr	r2, [pc, #272]	; (800c200 <TIM_Base_SetConfig+0x124>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d013      	beq.n	800c11c <TIM_Base_SetConfig+0x40>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0fa:	d00f      	beq.n	800c11c <TIM_Base_SetConfig+0x40>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4a41      	ldr	r2, [pc, #260]	; (800c204 <TIM_Base_SetConfig+0x128>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d00b      	beq.n	800c11c <TIM_Base_SetConfig+0x40>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	4a40      	ldr	r2, [pc, #256]	; (800c208 <TIM_Base_SetConfig+0x12c>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d007      	beq.n	800c11c <TIM_Base_SetConfig+0x40>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4a3f      	ldr	r2, [pc, #252]	; (800c20c <TIM_Base_SetConfig+0x130>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d003      	beq.n	800c11c <TIM_Base_SetConfig+0x40>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4a3e      	ldr	r2, [pc, #248]	; (800c210 <TIM_Base_SetConfig+0x134>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d108      	bne.n	800c12e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a33      	ldr	r2, [pc, #204]	; (800c200 <TIM_Base_SetConfig+0x124>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d027      	beq.n	800c186 <TIM_Base_SetConfig+0xaa>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c13c:	d023      	beq.n	800c186 <TIM_Base_SetConfig+0xaa>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a30      	ldr	r2, [pc, #192]	; (800c204 <TIM_Base_SetConfig+0x128>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d01f      	beq.n	800c186 <TIM_Base_SetConfig+0xaa>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4a2f      	ldr	r2, [pc, #188]	; (800c208 <TIM_Base_SetConfig+0x12c>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d01b      	beq.n	800c186 <TIM_Base_SetConfig+0xaa>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4a2e      	ldr	r2, [pc, #184]	; (800c20c <TIM_Base_SetConfig+0x130>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d017      	beq.n	800c186 <TIM_Base_SetConfig+0xaa>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a2d      	ldr	r2, [pc, #180]	; (800c210 <TIM_Base_SetConfig+0x134>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d013      	beq.n	800c186 <TIM_Base_SetConfig+0xaa>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a2c      	ldr	r2, [pc, #176]	; (800c214 <TIM_Base_SetConfig+0x138>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d00f      	beq.n	800c186 <TIM_Base_SetConfig+0xaa>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a2b      	ldr	r2, [pc, #172]	; (800c218 <TIM_Base_SetConfig+0x13c>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d00b      	beq.n	800c186 <TIM_Base_SetConfig+0xaa>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4a2a      	ldr	r2, [pc, #168]	; (800c21c <TIM_Base_SetConfig+0x140>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d007      	beq.n	800c186 <TIM_Base_SetConfig+0xaa>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	4a29      	ldr	r2, [pc, #164]	; (800c220 <TIM_Base_SetConfig+0x144>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d003      	beq.n	800c186 <TIM_Base_SetConfig+0xaa>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	4a28      	ldr	r2, [pc, #160]	; (800c224 <TIM_Base_SetConfig+0x148>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d108      	bne.n	800c198 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c18c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	4313      	orrs	r3, r2
 800c196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	695b      	ldr	r3, [r3, #20]
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a10      	ldr	r2, [pc, #64]	; (800c200 <TIM_Base_SetConfig+0x124>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d00f      	beq.n	800c1e4 <TIM_Base_SetConfig+0x108>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a12      	ldr	r2, [pc, #72]	; (800c210 <TIM_Base_SetConfig+0x134>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d00b      	beq.n	800c1e4 <TIM_Base_SetConfig+0x108>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a11      	ldr	r2, [pc, #68]	; (800c214 <TIM_Base_SetConfig+0x138>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d007      	beq.n	800c1e4 <TIM_Base_SetConfig+0x108>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a10      	ldr	r2, [pc, #64]	; (800c218 <TIM_Base_SetConfig+0x13c>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d003      	beq.n	800c1e4 <TIM_Base_SetConfig+0x108>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a0f      	ldr	r2, [pc, #60]	; (800c21c <TIM_Base_SetConfig+0x140>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d103      	bne.n	800c1ec <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	691a      	ldr	r2, [r3, #16]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	615a      	str	r2, [r3, #20]
}
 800c1f2:	bf00      	nop
 800c1f4:	3714      	adds	r7, #20
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	40010000 	.word	0x40010000
 800c204:	40000400 	.word	0x40000400
 800c208:	40000800 	.word	0x40000800
 800c20c:	40000c00 	.word	0x40000c00
 800c210:	40010400 	.word	0x40010400
 800c214:	40014000 	.word	0x40014000
 800c218:	40014400 	.word	0x40014400
 800c21c:	40014800 	.word	0x40014800
 800c220:	4000e000 	.word	0x4000e000
 800c224:	4000e400 	.word	0x4000e400

0800c228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c228:	b480      	push	{r7}
 800c22a:	b087      	sub	sp, #28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6a1b      	ldr	r3, [r3, #32]
 800c236:	f023 0201 	bic.w	r2, r3, #1
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a1b      	ldr	r3, [r3, #32]
 800c242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	4b37      	ldr	r3, [pc, #220]	; (800c330 <TIM_OC1_SetConfig+0x108>)
 800c254:	4013      	ands	r3, r2
 800c256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f023 0303 	bic.w	r3, r3, #3
 800c25e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	4313      	orrs	r3, r2
 800c268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	f023 0302 	bic.w	r3, r3, #2
 800c270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	4313      	orrs	r3, r2
 800c27a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a2d      	ldr	r2, [pc, #180]	; (800c334 <TIM_OC1_SetConfig+0x10c>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d00f      	beq.n	800c2a4 <TIM_OC1_SetConfig+0x7c>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a2c      	ldr	r2, [pc, #176]	; (800c338 <TIM_OC1_SetConfig+0x110>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d00b      	beq.n	800c2a4 <TIM_OC1_SetConfig+0x7c>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a2b      	ldr	r2, [pc, #172]	; (800c33c <TIM_OC1_SetConfig+0x114>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d007      	beq.n	800c2a4 <TIM_OC1_SetConfig+0x7c>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a2a      	ldr	r2, [pc, #168]	; (800c340 <TIM_OC1_SetConfig+0x118>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d003      	beq.n	800c2a4 <TIM_OC1_SetConfig+0x7c>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	4a29      	ldr	r2, [pc, #164]	; (800c344 <TIM_OC1_SetConfig+0x11c>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d10c      	bne.n	800c2be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	f023 0308 	bic.w	r3, r3, #8
 800c2aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	f023 0304 	bic.w	r3, r3, #4
 800c2bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a1c      	ldr	r2, [pc, #112]	; (800c334 <TIM_OC1_SetConfig+0x10c>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d00f      	beq.n	800c2e6 <TIM_OC1_SetConfig+0xbe>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4a1b      	ldr	r2, [pc, #108]	; (800c338 <TIM_OC1_SetConfig+0x110>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d00b      	beq.n	800c2e6 <TIM_OC1_SetConfig+0xbe>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a1a      	ldr	r2, [pc, #104]	; (800c33c <TIM_OC1_SetConfig+0x114>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d007      	beq.n	800c2e6 <TIM_OC1_SetConfig+0xbe>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a19      	ldr	r2, [pc, #100]	; (800c340 <TIM_OC1_SetConfig+0x118>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d003      	beq.n	800c2e6 <TIM_OC1_SetConfig+0xbe>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a18      	ldr	r2, [pc, #96]	; (800c344 <TIM_OC1_SetConfig+0x11c>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d111      	bne.n	800c30a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c2f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	695b      	ldr	r3, [r3, #20]
 800c2fa:	693a      	ldr	r2, [r7, #16]
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	699b      	ldr	r3, [r3, #24]
 800c304:	693a      	ldr	r2, [r7, #16]
 800c306:	4313      	orrs	r3, r2
 800c308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	685a      	ldr	r2, [r3, #4]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	621a      	str	r2, [r3, #32]
}
 800c324:	bf00      	nop
 800c326:	371c      	adds	r7, #28
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	fffeff8f 	.word	0xfffeff8f
 800c334:	40010000 	.word	0x40010000
 800c338:	40010400 	.word	0x40010400
 800c33c:	40014000 	.word	0x40014000
 800c340:	40014400 	.word	0x40014400
 800c344:	40014800 	.word	0x40014800

0800c348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c348:	b480      	push	{r7}
 800c34a:	b087      	sub	sp, #28
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a1b      	ldr	r3, [r3, #32]
 800c356:	f023 0210 	bic.w	r2, r3, #16
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6a1b      	ldr	r3, [r3, #32]
 800c362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	699b      	ldr	r3, [r3, #24]
 800c36e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	4b34      	ldr	r3, [pc, #208]	; (800c444 <TIM_OC2_SetConfig+0xfc>)
 800c374:	4013      	ands	r3, r2
 800c376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c37e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	021b      	lsls	r3, r3, #8
 800c386:	68fa      	ldr	r2, [r7, #12]
 800c388:	4313      	orrs	r3, r2
 800c38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	f023 0320 	bic.w	r3, r3, #32
 800c392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	011b      	lsls	r3, r3, #4
 800c39a:	697a      	ldr	r2, [r7, #20]
 800c39c:	4313      	orrs	r3, r2
 800c39e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a29      	ldr	r2, [pc, #164]	; (800c448 <TIM_OC2_SetConfig+0x100>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d003      	beq.n	800c3b0 <TIM_OC2_SetConfig+0x68>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a28      	ldr	r2, [pc, #160]	; (800c44c <TIM_OC2_SetConfig+0x104>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d10d      	bne.n	800c3cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	011b      	lsls	r3, r3, #4
 800c3be:	697a      	ldr	r2, [r7, #20]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a1e      	ldr	r2, [pc, #120]	; (800c448 <TIM_OC2_SetConfig+0x100>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d00f      	beq.n	800c3f4 <TIM_OC2_SetConfig+0xac>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a1d      	ldr	r2, [pc, #116]	; (800c44c <TIM_OC2_SetConfig+0x104>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d00b      	beq.n	800c3f4 <TIM_OC2_SetConfig+0xac>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a1c      	ldr	r2, [pc, #112]	; (800c450 <TIM_OC2_SetConfig+0x108>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d007      	beq.n	800c3f4 <TIM_OC2_SetConfig+0xac>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4a1b      	ldr	r2, [pc, #108]	; (800c454 <TIM_OC2_SetConfig+0x10c>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d003      	beq.n	800c3f4 <TIM_OC2_SetConfig+0xac>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a1a      	ldr	r2, [pc, #104]	; (800c458 <TIM_OC2_SetConfig+0x110>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d113      	bne.n	800c41c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c3fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	693a      	ldr	r2, [r7, #16]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	699b      	ldr	r3, [r3, #24]
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	693a      	ldr	r2, [r7, #16]
 800c418:	4313      	orrs	r3, r2
 800c41a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	685a      	ldr	r2, [r3, #4]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	697a      	ldr	r2, [r7, #20]
 800c434:	621a      	str	r2, [r3, #32]
}
 800c436:	bf00      	nop
 800c438:	371c      	adds	r7, #28
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	feff8fff 	.word	0xfeff8fff
 800c448:	40010000 	.word	0x40010000
 800c44c:	40010400 	.word	0x40010400
 800c450:	40014000 	.word	0x40014000
 800c454:	40014400 	.word	0x40014400
 800c458:	40014800 	.word	0x40014800

0800c45c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b087      	sub	sp, #28
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a1b      	ldr	r3, [r3, #32]
 800c46a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6a1b      	ldr	r3, [r3, #32]
 800c476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	69db      	ldr	r3, [r3, #28]
 800c482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	4b33      	ldr	r3, [pc, #204]	; (800c554 <TIM_OC3_SetConfig+0xf8>)
 800c488:	4013      	ands	r3, r2
 800c48a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f023 0303 	bic.w	r3, r3, #3
 800c492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	021b      	lsls	r3, r3, #8
 800c4ac:	697a      	ldr	r2, [r7, #20]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a28      	ldr	r2, [pc, #160]	; (800c558 <TIM_OC3_SetConfig+0xfc>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d003      	beq.n	800c4c2 <TIM_OC3_SetConfig+0x66>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a27      	ldr	r2, [pc, #156]	; (800c55c <TIM_OC3_SetConfig+0x100>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d10d      	bne.n	800c4de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	021b      	lsls	r3, r3, #8
 800c4d0:	697a      	ldr	r2, [r7, #20]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c4dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4a1d      	ldr	r2, [pc, #116]	; (800c558 <TIM_OC3_SetConfig+0xfc>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d00f      	beq.n	800c506 <TIM_OC3_SetConfig+0xaa>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4a1c      	ldr	r2, [pc, #112]	; (800c55c <TIM_OC3_SetConfig+0x100>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d00b      	beq.n	800c506 <TIM_OC3_SetConfig+0xaa>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4a1b      	ldr	r2, [pc, #108]	; (800c560 <TIM_OC3_SetConfig+0x104>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d007      	beq.n	800c506 <TIM_OC3_SetConfig+0xaa>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4a1a      	ldr	r2, [pc, #104]	; (800c564 <TIM_OC3_SetConfig+0x108>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d003      	beq.n	800c506 <TIM_OC3_SetConfig+0xaa>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4a19      	ldr	r2, [pc, #100]	; (800c568 <TIM_OC3_SetConfig+0x10c>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d113      	bne.n	800c52e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c50c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	695b      	ldr	r3, [r3, #20]
 800c51a:	011b      	lsls	r3, r3, #4
 800c51c:	693a      	ldr	r2, [r7, #16]
 800c51e:	4313      	orrs	r3, r2
 800c520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	699b      	ldr	r3, [r3, #24]
 800c526:	011b      	lsls	r3, r3, #4
 800c528:	693a      	ldr	r2, [r7, #16]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	693a      	ldr	r2, [r7, #16]
 800c532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	68fa      	ldr	r2, [r7, #12]
 800c538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	685a      	ldr	r2, [r3, #4]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	697a      	ldr	r2, [r7, #20]
 800c546:	621a      	str	r2, [r3, #32]
}
 800c548:	bf00      	nop
 800c54a:	371c      	adds	r7, #28
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr
 800c554:	fffeff8f 	.word	0xfffeff8f
 800c558:	40010000 	.word	0x40010000
 800c55c:	40010400 	.word	0x40010400
 800c560:	40014000 	.word	0x40014000
 800c564:	40014400 	.word	0x40014400
 800c568:	40014800 	.word	0x40014800

0800c56c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b087      	sub	sp, #28
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6a1b      	ldr	r3, [r3, #32]
 800c57a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a1b      	ldr	r3, [r3, #32]
 800c586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	69db      	ldr	r3, [r3, #28]
 800c592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	4b24      	ldr	r3, [pc, #144]	; (800c628 <TIM_OC4_SetConfig+0xbc>)
 800c598:	4013      	ands	r3, r2
 800c59a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	021b      	lsls	r3, r3, #8
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	031b      	lsls	r3, r3, #12
 800c5be:	693a      	ldr	r2, [r7, #16]
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4a19      	ldr	r2, [pc, #100]	; (800c62c <TIM_OC4_SetConfig+0xc0>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d00f      	beq.n	800c5ec <TIM_OC4_SetConfig+0x80>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a18      	ldr	r2, [pc, #96]	; (800c630 <TIM_OC4_SetConfig+0xc4>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d00b      	beq.n	800c5ec <TIM_OC4_SetConfig+0x80>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a17      	ldr	r2, [pc, #92]	; (800c634 <TIM_OC4_SetConfig+0xc8>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d007      	beq.n	800c5ec <TIM_OC4_SetConfig+0x80>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	4a16      	ldr	r2, [pc, #88]	; (800c638 <TIM_OC4_SetConfig+0xcc>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d003      	beq.n	800c5ec <TIM_OC4_SetConfig+0x80>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4a15      	ldr	r2, [pc, #84]	; (800c63c <TIM_OC4_SetConfig+0xd0>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d109      	bne.n	800c600 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c5f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	019b      	lsls	r3, r3, #6
 800c5fa:	697a      	ldr	r2, [r7, #20]
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	685a      	ldr	r2, [r3, #4]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	621a      	str	r2, [r3, #32]
}
 800c61a:	bf00      	nop
 800c61c:	371c      	adds	r7, #28
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	feff8fff 	.word	0xfeff8fff
 800c62c:	40010000 	.word	0x40010000
 800c630:	40010400 	.word	0x40010400
 800c634:	40014000 	.word	0x40014000
 800c638:	40014400 	.word	0x40014400
 800c63c:	40014800 	.word	0x40014800

0800c640 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c640:	b480      	push	{r7}
 800c642:	b087      	sub	sp, #28
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a1b      	ldr	r3, [r3, #32]
 800c65a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	4b21      	ldr	r3, [pc, #132]	; (800c6f0 <TIM_OC5_SetConfig+0xb0>)
 800c66c:	4013      	ands	r3, r2
 800c66e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	4313      	orrs	r3, r2
 800c678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c680:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	041b      	lsls	r3, r3, #16
 800c688:	693a      	ldr	r2, [r7, #16]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a18      	ldr	r2, [pc, #96]	; (800c6f4 <TIM_OC5_SetConfig+0xb4>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d00f      	beq.n	800c6b6 <TIM_OC5_SetConfig+0x76>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4a17      	ldr	r2, [pc, #92]	; (800c6f8 <TIM_OC5_SetConfig+0xb8>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d00b      	beq.n	800c6b6 <TIM_OC5_SetConfig+0x76>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4a16      	ldr	r2, [pc, #88]	; (800c6fc <TIM_OC5_SetConfig+0xbc>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d007      	beq.n	800c6b6 <TIM_OC5_SetConfig+0x76>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4a15      	ldr	r2, [pc, #84]	; (800c700 <TIM_OC5_SetConfig+0xc0>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d003      	beq.n	800c6b6 <TIM_OC5_SetConfig+0x76>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a14      	ldr	r2, [pc, #80]	; (800c704 <TIM_OC5_SetConfig+0xc4>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d109      	bne.n	800c6ca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	695b      	ldr	r3, [r3, #20]
 800c6c2:	021b      	lsls	r3, r3, #8
 800c6c4:	697a      	ldr	r2, [r7, #20]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	697a      	ldr	r2, [r7, #20]
 800c6ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	685a      	ldr	r2, [r3, #4]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	693a      	ldr	r2, [r7, #16]
 800c6e2:	621a      	str	r2, [r3, #32]
}
 800c6e4:	bf00      	nop
 800c6e6:	371c      	adds	r7, #28
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr
 800c6f0:	fffeff8f 	.word	0xfffeff8f
 800c6f4:	40010000 	.word	0x40010000
 800c6f8:	40010400 	.word	0x40010400
 800c6fc:	40014000 	.word	0x40014000
 800c700:	40014400 	.word	0x40014400
 800c704:	40014800 	.word	0x40014800

0800c708 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c708:	b480      	push	{r7}
 800c70a:	b087      	sub	sp, #28
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6a1b      	ldr	r3, [r3, #32]
 800c716:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6a1b      	ldr	r3, [r3, #32]
 800c722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c72e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	4b22      	ldr	r3, [pc, #136]	; (800c7bc <TIM_OC6_SetConfig+0xb4>)
 800c734:	4013      	ands	r3, r2
 800c736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	021b      	lsls	r3, r3, #8
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	4313      	orrs	r3, r2
 800c742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c74a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	051b      	lsls	r3, r3, #20
 800c752:	693a      	ldr	r2, [r7, #16]
 800c754:	4313      	orrs	r3, r2
 800c756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	4a19      	ldr	r2, [pc, #100]	; (800c7c0 <TIM_OC6_SetConfig+0xb8>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d00f      	beq.n	800c780 <TIM_OC6_SetConfig+0x78>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4a18      	ldr	r2, [pc, #96]	; (800c7c4 <TIM_OC6_SetConfig+0xbc>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d00b      	beq.n	800c780 <TIM_OC6_SetConfig+0x78>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4a17      	ldr	r2, [pc, #92]	; (800c7c8 <TIM_OC6_SetConfig+0xc0>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d007      	beq.n	800c780 <TIM_OC6_SetConfig+0x78>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	4a16      	ldr	r2, [pc, #88]	; (800c7cc <TIM_OC6_SetConfig+0xc4>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d003      	beq.n	800c780 <TIM_OC6_SetConfig+0x78>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4a15      	ldr	r2, [pc, #84]	; (800c7d0 <TIM_OC6_SetConfig+0xc8>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d109      	bne.n	800c794 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c786:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	695b      	ldr	r3, [r3, #20]
 800c78c:	029b      	lsls	r3, r3, #10
 800c78e:	697a      	ldr	r2, [r7, #20]
 800c790:	4313      	orrs	r3, r2
 800c792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	697a      	ldr	r2, [r7, #20]
 800c798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	685a      	ldr	r2, [r3, #4]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	693a      	ldr	r2, [r7, #16]
 800c7ac:	621a      	str	r2, [r3, #32]
}
 800c7ae:	bf00      	nop
 800c7b0:	371c      	adds	r7, #28
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	feff8fff 	.word	0xfeff8fff
 800c7c0:	40010000 	.word	0x40010000
 800c7c4:	40010400 	.word	0x40010400
 800c7c8:	40014000 	.word	0x40014000
 800c7cc:	40014400 	.word	0x40014400
 800c7d0:	40014800 	.word	0x40014800

0800c7d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b087      	sub	sp, #28
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6a1b      	ldr	r3, [r3, #32]
 800c7e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6a1b      	ldr	r3, [r3, #32]
 800c7ea:	f023 0201 	bic.w	r2, r3, #1
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	699b      	ldr	r3, [r3, #24]
 800c7f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	011b      	lsls	r3, r3, #4
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	4313      	orrs	r3, r2
 800c808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	f023 030a 	bic.w	r3, r3, #10
 800c810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c812:	697a      	ldr	r2, [r7, #20]
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	4313      	orrs	r3, r2
 800c818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	621a      	str	r2, [r3, #32]
}
 800c826:	bf00      	nop
 800c828:	371c      	adds	r7, #28
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr

0800c832 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c832:	b480      	push	{r7}
 800c834:	b087      	sub	sp, #28
 800c836:	af00      	add	r7, sp, #0
 800c838:	60f8      	str	r0, [r7, #12]
 800c83a:	60b9      	str	r1, [r7, #8]
 800c83c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6a1b      	ldr	r3, [r3, #32]
 800c842:	f023 0210 	bic.w	r2, r3, #16
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	699b      	ldr	r3, [r3, #24]
 800c84e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	6a1b      	ldr	r3, [r3, #32]
 800c854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c85c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	031b      	lsls	r3, r3, #12
 800c862:	697a      	ldr	r2, [r7, #20]
 800c864:	4313      	orrs	r3, r2
 800c866:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c86e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	011b      	lsls	r3, r3, #4
 800c874:	693a      	ldr	r2, [r7, #16]
 800c876:	4313      	orrs	r3, r2
 800c878:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	697a      	ldr	r2, [r7, #20]
 800c87e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	693a      	ldr	r2, [r7, #16]
 800c884:	621a      	str	r2, [r3, #32]
}
 800c886:	bf00      	nop
 800c888:	371c      	adds	r7, #28
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
	...

0800c894 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c894:	b480      	push	{r7}
 800c896:	b085      	sub	sp, #20
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	4b09      	ldr	r3, [pc, #36]	; (800c8cc <TIM_ITRx_SetConfig+0x38>)
 800c8a8:	4013      	ands	r3, r2
 800c8aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c8ac:	683a      	ldr	r2, [r7, #0]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	f043 0307 	orr.w	r3, r3, #7
 800c8b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	609a      	str	r2, [r3, #8]
}
 800c8be:	bf00      	nop
 800c8c0:	3714      	adds	r7, #20
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr
 800c8ca:	bf00      	nop
 800c8cc:	ffcfff8f 	.word	0xffcfff8f

0800c8d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b087      	sub	sp, #28
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
 800c8dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c8ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	021a      	lsls	r2, r3, #8
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	431a      	orrs	r2, r3
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	697a      	ldr	r2, [r7, #20]
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	697a      	ldr	r2, [r7, #20]
 800c902:	609a      	str	r2, [r3, #8]
}
 800c904:	bf00      	nop
 800c906:	371c      	adds	r7, #28
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c910:	b480      	push	{r7}
 800c912:	b087      	sub	sp, #28
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	f003 031f 	and.w	r3, r3, #31
 800c922:	2201      	movs	r2, #1
 800c924:	fa02 f303 	lsl.w	r3, r2, r3
 800c928:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6a1a      	ldr	r2, [r3, #32]
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	43db      	mvns	r3, r3
 800c932:	401a      	ands	r2, r3
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6a1a      	ldr	r2, [r3, #32]
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	f003 031f 	and.w	r3, r3, #31
 800c942:	6879      	ldr	r1, [r7, #4]
 800c944:	fa01 f303 	lsl.w	r3, r1, r3
 800c948:	431a      	orrs	r2, r3
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	621a      	str	r2, [r3, #32]
}
 800c94e:	bf00      	nop
 800c950:	371c      	adds	r7, #28
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
	...

0800c95c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d101      	bne.n	800c974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c970:	2302      	movs	r3, #2
 800c972:	e077      	b.n	800ca64 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2201      	movs	r2, #1
 800c978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2202      	movs	r2, #2
 800c980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a35      	ldr	r2, [pc, #212]	; (800ca70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d004      	beq.n	800c9a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a34      	ldr	r2, [pc, #208]	; (800ca74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d108      	bne.n	800c9ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c9ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a25      	ldr	r2, [pc, #148]	; (800ca70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d02c      	beq.n	800ca38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9e6:	d027      	beq.n	800ca38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a22      	ldr	r2, [pc, #136]	; (800ca78 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d022      	beq.n	800ca38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a21      	ldr	r2, [pc, #132]	; (800ca7c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d01d      	beq.n	800ca38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a1f      	ldr	r2, [pc, #124]	; (800ca80 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d018      	beq.n	800ca38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a1a      	ldr	r2, [pc, #104]	; (800ca74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d013      	beq.n	800ca38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a1b      	ldr	r2, [pc, #108]	; (800ca84 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d00e      	beq.n	800ca38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a1a      	ldr	r2, [pc, #104]	; (800ca88 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d009      	beq.n	800ca38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a18      	ldr	r2, [pc, #96]	; (800ca8c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d004      	beq.n	800ca38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a17      	ldr	r2, [pc, #92]	; (800ca90 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d10c      	bne.n	800ca52 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	4313      	orrs	r3, r2
 800ca48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2201      	movs	r2, #1
 800ca56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca62:	2300      	movs	r3, #0
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3714      	adds	r7, #20
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr
 800ca70:	40010000 	.word	0x40010000
 800ca74:	40010400 	.word	0x40010400
 800ca78:	40000400 	.word	0x40000400
 800ca7c:	40000800 	.word	0x40000800
 800ca80:	40000c00 	.word	0x40000c00
 800ca84:	40001800 	.word	0x40001800
 800ca88:	40014000 	.word	0x40014000
 800ca8c:	4000e000 	.word	0x4000e000
 800ca90:	4000e400 	.word	0x4000e400

0800ca94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d101      	bne.n	800cab0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800caac:	2302      	movs	r3, #2
 800caae:	e087      	b.n	800cbc0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	68db      	ldr	r3, [r3, #12]
 800cac2:	4313      	orrs	r3, r2
 800cac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	4313      	orrs	r3, r2
 800cae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4313      	orrs	r3, r2
 800caee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	691b      	ldr	r3, [r3, #16]
 800cafa:	4313      	orrs	r3, r2
 800cafc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	695b      	ldr	r3, [r3, #20]
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb16:	4313      	orrs	r3, r2
 800cb18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	699b      	ldr	r3, [r3, #24]
 800cb24:	041b      	lsls	r3, r3, #16
 800cb26:	4313      	orrs	r3, r2
 800cb28:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a27      	ldr	r2, [pc, #156]	; (800cbcc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d004      	beq.n	800cb3e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a25      	ldr	r2, [pc, #148]	; (800cbd0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d106      	bne.n	800cb4c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	69db      	ldr	r3, [r3, #28]
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a1e      	ldr	r2, [pc, #120]	; (800cbcc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d004      	beq.n	800cb60 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4a1d      	ldr	r2, [pc, #116]	; (800cbd0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d126      	bne.n	800cbae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb6a:	051b      	lsls	r3, r3, #20
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	6a1b      	ldr	r3, [r3, #32]
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a0e      	ldr	r2, [pc, #56]	; (800cbcc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d004      	beq.n	800cba0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a0d      	ldr	r2, [pc, #52]	; (800cbd0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d106      	bne.n	800cbae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	40010000 	.word	0x40010000
 800cbd0:	40010400 	.word	0x40010400

0800cbd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cbdc:	bf00      	nop
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cbf0:	bf00      	nop
 800cbf2:	370c      	adds	r7, #12
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b083      	sub	sp, #12
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc04:	bf00      	nop
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d101      	bne.n	800cc22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e042      	b.n	800cca8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d106      	bne.n	800cc3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f7f8 fcc9 	bl	80055cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2224      	movs	r2, #36	; 0x24
 800cc3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f022 0201 	bic.w	r2, r2, #1
 800cc50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 fcdc 	bl	800d610 <UART_SetConfig>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d101      	bne.n	800cc62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e022      	b.n	800cca8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d002      	beq.n	800cc70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f001 fb3c 	bl	800e2e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	685a      	ldr	r2, [r3, #4]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cc7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	689a      	ldr	r2, [r3, #8]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f042 0201 	orr.w	r2, r2, #1
 800cc9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f001 fbc3 	bl	800e42c <UART_CheckIdleState>
 800cca6:	4603      	mov	r3, r0
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3708      	adds	r7, #8
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b08a      	sub	sp, #40	; 0x28
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccc4:	2b20      	cmp	r3, #32
 800ccc6:	d17a      	bne.n	800cdbe <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d002      	beq.n	800ccd4 <HAL_UART_Transmit_DMA+0x24>
 800ccce:	88fb      	ldrh	r3, [r7, #6]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d101      	bne.n	800ccd8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e073      	b.n	800cdc0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d101      	bne.n	800cce6 <HAL_UART_Transmit_DMA+0x36>
 800cce2:	2302      	movs	r3, #2
 800cce4:	e06c      	b.n	800cdc0 <HAL_UART_Transmit_DMA+0x110>
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2201      	movs	r2, #1
 800ccea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	88fa      	ldrh	r2, [r7, #6]
 800ccf8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	88fa      	ldrh	r2, [r7, #6]
 800cd00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2221      	movs	r2, #33	; 0x21
 800cd10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d02c      	beq.n	800cd76 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd20:	4a29      	ldr	r2, [pc, #164]	; (800cdc8 <HAL_UART_Transmit_DMA+0x118>)
 800cd22:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd28:	4a28      	ldr	r2, [pc, #160]	; (800cdcc <HAL_UART_Transmit_DMA+0x11c>)
 800cd2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd30:	4a27      	ldr	r2, [pc, #156]	; (800cdd0 <HAL_UART_Transmit_DMA+0x120>)
 800cd32:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd38:	2200      	movs	r2, #0
 800cd3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd44:	4619      	mov	r1, r3
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	3328      	adds	r3, #40	; 0x28
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	88fb      	ldrh	r3, [r7, #6]
 800cd50:	f7f9 fb5e 	bl	8006410 <HAL_DMA_Start_IT>
 800cd54:	4603      	mov	r3, r0
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d00d      	beq.n	800cd76 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2210      	movs	r2, #16
 800cd5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2220      	movs	r2, #32
 800cd6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800cd72:	2301      	movs	r3, #1
 800cd74:	e024      	b.n	800cdc0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2240      	movs	r2, #64	; 0x40
 800cd7c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3308      	adds	r3, #8
 800cd8c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	e853 3f00 	ldrex	r3, [r3]
 800cd94:	613b      	str	r3, [r7, #16]
   return(result);
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd9c:	627b      	str	r3, [r7, #36]	; 0x24
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	3308      	adds	r3, #8
 800cda4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cda6:	623a      	str	r2, [r7, #32]
 800cda8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdaa:	69f9      	ldr	r1, [r7, #28]
 800cdac:	6a3a      	ldr	r2, [r7, #32]
 800cdae:	e841 2300 	strex	r3, r2, [r1]
 800cdb2:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1e5      	bne.n	800cd86 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	e000      	b.n	800cdc0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800cdbe:	2302      	movs	r3, #2
  }
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3728      	adds	r7, #40	; 0x28
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	0800e8f5 	.word	0x0800e8f5
 800cdcc:	0800e98b 	.word	0x0800e98b
 800cdd0:	0800eb01 	.word	0x0800eb01

0800cdd4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b08a      	sub	sp, #40	; 0x28
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	4613      	mov	r3, r2
 800cde0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cde8:	2b20      	cmp	r3, #32
 800cdea:	d142      	bne.n	800ce72 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d002      	beq.n	800cdf8 <HAL_UART_Receive_DMA+0x24>
 800cdf2:	88fb      	ldrh	r3, [r7, #6]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d101      	bne.n	800cdfc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e03b      	b.n	800ce74 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d101      	bne.n	800ce0a <HAL_UART_Receive_DMA+0x36>
 800ce06:	2302      	movs	r3, #2
 800ce08:	e034      	b.n	800ce74 <HAL_UART_Receive_DMA+0xa0>
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2200      	movs	r2, #0
 800ce16:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a17      	ldr	r2, [pc, #92]	; (800ce7c <HAL_UART_Receive_DMA+0xa8>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d01f      	beq.n	800ce62 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d018      	beq.n	800ce62 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	e853 3f00 	ldrex	r3, [r3]
 800ce3c:	613b      	str	r3, [r7, #16]
   return(result);
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce44:	627b      	str	r3, [r7, #36]	; 0x24
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4e:	623b      	str	r3, [r7, #32]
 800ce50:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce52:	69f9      	ldr	r1, [r7, #28]
 800ce54:	6a3a      	ldr	r2, [r7, #32]
 800ce56:	e841 2300 	strex	r3, r2, [r1]
 800ce5a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1e6      	bne.n	800ce30 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ce62:	88fb      	ldrh	r3, [r7, #6]
 800ce64:	461a      	mov	r2, r3
 800ce66:	68b9      	ldr	r1, [r7, #8]
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f001 fbf3 	bl	800e654 <UART_Start_Receive_DMA>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	e000      	b.n	800ce74 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ce72:	2302      	movs	r3, #2
  }
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3728      	adds	r7, #40	; 0x28
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	58000c00 	.word	0x58000c00

0800ce80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b0ba      	sub	sp, #232	; 0xe8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	69db      	ldr	r3, [r3, #28]
 800ce8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cea6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ceaa:	f640 030f 	movw	r3, #2063	; 0x80f
 800ceae:	4013      	ands	r3, r2
 800ceb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ceb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d11b      	bne.n	800cef4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cec0:	f003 0320 	and.w	r3, r3, #32
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d015      	beq.n	800cef4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cecc:	f003 0320 	and.w	r3, r3, #32
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d105      	bne.n	800cee0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ced4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ced8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d009      	beq.n	800cef4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f000 835a 	beq.w	800d59e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	4798      	blx	r3
      }
      return;
 800cef2:	e354      	b.n	800d59e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f000 811f 	beq.w	800d13c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cefe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf02:	4b8b      	ldr	r3, [pc, #556]	; (800d130 <HAL_UART_IRQHandler+0x2b0>)
 800cf04:	4013      	ands	r3, r2
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d106      	bne.n	800cf18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cf0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cf0e:	4b89      	ldr	r3, [pc, #548]	; (800d134 <HAL_UART_IRQHandler+0x2b4>)
 800cf10:	4013      	ands	r3, r2
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	f000 8112 	beq.w	800d13c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cf18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d011      	beq.n	800cf48 <HAL_UART_IRQHandler+0xc8>
 800cf24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00b      	beq.n	800cf48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2201      	movs	r2, #1
 800cf36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf3e:	f043 0201 	orr.w	r2, r3, #1
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf4c:	f003 0302 	and.w	r3, r3, #2
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d011      	beq.n	800cf78 <HAL_UART_IRQHandler+0xf8>
 800cf54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf58:	f003 0301 	and.w	r3, r3, #1
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00b      	beq.n	800cf78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2202      	movs	r2, #2
 800cf66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf6e:	f043 0204 	orr.w	r2, r3, #4
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf7c:	f003 0304 	and.w	r3, r3, #4
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d011      	beq.n	800cfa8 <HAL_UART_IRQHandler+0x128>
 800cf84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf88:	f003 0301 	and.w	r3, r3, #1
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00b      	beq.n	800cfa8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2204      	movs	r2, #4
 800cf96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf9e:	f043 0202 	orr.w	r2, r3, #2
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cfa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfac:	f003 0308 	and.w	r3, r3, #8
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d017      	beq.n	800cfe4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cfb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfb8:	f003 0320 	and.w	r3, r3, #32
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d105      	bne.n	800cfcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cfc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cfc4:	4b5a      	ldr	r3, [pc, #360]	; (800d130 <HAL_UART_IRQHandler+0x2b0>)
 800cfc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00b      	beq.n	800cfe4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2208      	movs	r2, #8
 800cfd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfda:	f043 0208 	orr.w	r2, r3, #8
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cfe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d012      	beq.n	800d016 <HAL_UART_IRQHandler+0x196>
 800cff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00c      	beq.n	800d016 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d00c:	f043 0220 	orr.w	r2, r3, #32
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f000 82c0 	beq.w	800d5a2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d026:	f003 0320 	and.w	r3, r3, #32
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d013      	beq.n	800d056 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d02e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d032:	f003 0320 	and.w	r3, r3, #32
 800d036:	2b00      	cmp	r3, #0
 800d038:	d105      	bne.n	800d046 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d03a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d03e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d042:	2b00      	cmp	r3, #0
 800d044:	d007      	beq.n	800d056 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d003      	beq.n	800d056 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d05c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d06a:	2b40      	cmp	r3, #64	; 0x40
 800d06c:	d005      	beq.n	800d07a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d06e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d072:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d076:	2b00      	cmp	r3, #0
 800d078:	d04f      	beq.n	800d11a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f001 fbd4 	bl	800e828 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d08a:	2b40      	cmp	r3, #64	; 0x40
 800d08c:	d141      	bne.n	800d112 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	3308      	adds	r3, #8
 800d094:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d098:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d09c:	e853 3f00 	ldrex	r3, [r3]
 800d0a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d0a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d0a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	3308      	adds	r3, #8
 800d0b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d0ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d0be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d0c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d0ca:	e841 2300 	strex	r3, r2, [r1]
 800d0ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d0d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1d9      	bne.n	800d08e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d013      	beq.n	800d10a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0e6:	4a14      	ldr	r2, [pc, #80]	; (800d138 <HAL_UART_IRQHandler+0x2b8>)
 800d0e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7f9 ff16 	bl	8006f20 <HAL_DMA_Abort_IT>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d017      	beq.n	800d12a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d104:	4610      	mov	r0, r2
 800d106:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d108:	e00f      	b.n	800d12a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 fa6a 	bl	800d5e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d110:	e00b      	b.n	800d12a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 fa66 	bl	800d5e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d118:	e007      	b.n	800d12a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 fa62 	bl	800d5e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d128:	e23b      	b.n	800d5a2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d12a:	bf00      	nop
    return;
 800d12c:	e239      	b.n	800d5a2 <HAL_UART_IRQHandler+0x722>
 800d12e:	bf00      	nop
 800d130:	10000001 	.word	0x10000001
 800d134:	04000120 	.word	0x04000120
 800d138:	0800eb81 	.word	0x0800eb81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d140:	2b01      	cmp	r3, #1
 800d142:	f040 81ce 	bne.w	800d4e2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d14a:	f003 0310 	and.w	r3, r3, #16
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f000 81c7 	beq.w	800d4e2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d158:	f003 0310 	and.w	r3, r3, #16
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f000 81c0 	beq.w	800d4e2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2210      	movs	r2, #16
 800d168:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d174:	2b40      	cmp	r3, #64	; 0x40
 800d176:	f040 813b 	bne.w	800d3f0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a8b      	ldr	r2, [pc, #556]	; (800d3b0 <HAL_UART_IRQHandler+0x530>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d059      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a89      	ldr	r2, [pc, #548]	; (800d3b4 <HAL_UART_IRQHandler+0x534>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d053      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a87      	ldr	r2, [pc, #540]	; (800d3b8 <HAL_UART_IRQHandler+0x538>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d04d      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a85      	ldr	r2, [pc, #532]	; (800d3bc <HAL_UART_IRQHandler+0x53c>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d047      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a83      	ldr	r2, [pc, #524]	; (800d3c0 <HAL_UART_IRQHandler+0x540>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d041      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a81      	ldr	r2, [pc, #516]	; (800d3c4 <HAL_UART_IRQHandler+0x544>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d03b      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a7f      	ldr	r2, [pc, #508]	; (800d3c8 <HAL_UART_IRQHandler+0x548>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d035      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a7d      	ldr	r2, [pc, #500]	; (800d3cc <HAL_UART_IRQHandler+0x54c>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d02f      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a7b      	ldr	r2, [pc, #492]	; (800d3d0 <HAL_UART_IRQHandler+0x550>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d029      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a79      	ldr	r2, [pc, #484]	; (800d3d4 <HAL_UART_IRQHandler+0x554>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d023      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a77      	ldr	r2, [pc, #476]	; (800d3d8 <HAL_UART_IRQHandler+0x558>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d01d      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a75      	ldr	r2, [pc, #468]	; (800d3dc <HAL_UART_IRQHandler+0x55c>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d017      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a73      	ldr	r2, [pc, #460]	; (800d3e0 <HAL_UART_IRQHandler+0x560>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d011      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a71      	ldr	r2, [pc, #452]	; (800d3e4 <HAL_UART_IRQHandler+0x564>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d00b      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a6f      	ldr	r2, [pc, #444]	; (800d3e8 <HAL_UART_IRQHandler+0x568>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d005      	beq.n	800d23a <HAL_UART_IRQHandler+0x3ba>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a6d      	ldr	r2, [pc, #436]	; (800d3ec <HAL_UART_IRQHandler+0x56c>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d105      	bne.n	800d246 <HAL_UART_IRQHandler+0x3c6>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	b29b      	uxth	r3, r3
 800d244:	e004      	b.n	800d250 <HAL_UART_IRQHandler+0x3d0>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	b29b      	uxth	r3, r3
 800d250:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d254:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f000 81a4 	beq.w	800d5a6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d264:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d268:	429a      	cmp	r2, r3
 800d26a:	f080 819c 	bcs.w	800d5a6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d274:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d27c:	69db      	ldr	r3, [r3, #28]
 800d27e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d282:	f000 8086 	beq.w	800d392 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d28e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d292:	e853 3f00 	ldrex	r3, [r3]
 800d296:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d29a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d29e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d2b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d2b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d2bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d2c0:	e841 2300 	strex	r3, r2, [r1]
 800d2c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d2c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d1da      	bne.n	800d286 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	3308      	adds	r3, #8
 800d2d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2da:	e853 3f00 	ldrex	r3, [r3]
 800d2de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d2e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2e2:	f023 0301 	bic.w	r3, r3, #1
 800d2e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	3308      	adds	r3, #8
 800d2f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d2f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d2f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d2fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d300:	e841 2300 	strex	r3, r2, [r1]
 800d304:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d1e1      	bne.n	800d2d0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	3308      	adds	r3, #8
 800d312:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d316:	e853 3f00 	ldrex	r3, [r3]
 800d31a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d31c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d31e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	3308      	adds	r3, #8
 800d32c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d330:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d332:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d334:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d336:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d338:	e841 2300 	strex	r3, r2, [r1]
 800d33c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d33e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d340:	2b00      	cmp	r3, #0
 800d342:	d1e3      	bne.n	800d30c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2220      	movs	r2, #32
 800d348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2200      	movs	r2, #0
 800d350:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d35a:	e853 3f00 	ldrex	r3, [r3]
 800d35e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d362:	f023 0310 	bic.w	r3, r3, #16
 800d366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	461a      	mov	r2, r3
 800d370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d374:	65bb      	str	r3, [r7, #88]	; 0x58
 800d376:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d37a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d37c:	e841 2300 	strex	r3, r2, [r1]
 800d380:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d384:	2b00      	cmp	r3, #0
 800d386:	d1e4      	bne.n	800d352 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7f9 faa9 	bl	80068e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d39e:	b29b      	uxth	r3, r3
 800d3a0:	1ad3      	subs	r3, r2, r3
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 f926 	bl	800d5f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d3ac:	e0fb      	b.n	800d5a6 <HAL_UART_IRQHandler+0x726>
 800d3ae:	bf00      	nop
 800d3b0:	40020010 	.word	0x40020010
 800d3b4:	40020028 	.word	0x40020028
 800d3b8:	40020040 	.word	0x40020040
 800d3bc:	40020058 	.word	0x40020058
 800d3c0:	40020070 	.word	0x40020070
 800d3c4:	40020088 	.word	0x40020088
 800d3c8:	400200a0 	.word	0x400200a0
 800d3cc:	400200b8 	.word	0x400200b8
 800d3d0:	40020410 	.word	0x40020410
 800d3d4:	40020428 	.word	0x40020428
 800d3d8:	40020440 	.word	0x40020440
 800d3dc:	40020458 	.word	0x40020458
 800d3e0:	40020470 	.word	0x40020470
 800d3e4:	40020488 	.word	0x40020488
 800d3e8:	400204a0 	.word	0x400204a0
 800d3ec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	1ad3      	subs	r3, r2, r3
 800d400:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f000 80cc 	beq.w	800d5aa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d412:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d416:	2b00      	cmp	r3, #0
 800d418:	f000 80c7 	beq.w	800d5aa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d424:	e853 3f00 	ldrex	r3, [r3]
 800d428:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d42c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d430:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	461a      	mov	r2, r3
 800d43a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d43e:	647b      	str	r3, [r7, #68]	; 0x44
 800d440:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d442:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d444:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d446:	e841 2300 	strex	r3, r2, [r1]
 800d44a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1e4      	bne.n	800d41c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	3308      	adds	r3, #8
 800d458:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45c:	e853 3f00 	ldrex	r3, [r3]
 800d460:	623b      	str	r3, [r7, #32]
   return(result);
 800d462:	6a3a      	ldr	r2, [r7, #32]
 800d464:	4b54      	ldr	r3, [pc, #336]	; (800d5b8 <HAL_UART_IRQHandler+0x738>)
 800d466:	4013      	ands	r3, r2
 800d468:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	3308      	adds	r3, #8
 800d472:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d476:	633a      	str	r2, [r7, #48]	; 0x30
 800d478:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d47c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d47e:	e841 2300 	strex	r3, r2, [r1]
 800d482:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d486:	2b00      	cmp	r3, #0
 800d488:	d1e3      	bne.n	800d452 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2220      	movs	r2, #32
 800d48e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2200      	movs	r2, #0
 800d49c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	e853 3f00 	ldrex	r3, [r3]
 800d4aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f023 0310 	bic.w	r3, r3, #16
 800d4b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d4c0:	61fb      	str	r3, [r7, #28]
 800d4c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c4:	69b9      	ldr	r1, [r7, #24]
 800d4c6:	69fa      	ldr	r2, [r7, #28]
 800d4c8:	e841 2300 	strex	r3, r2, [r1]
 800d4cc:	617b      	str	r3, [r7, #20]
   return(result);
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1e4      	bne.n	800d49e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d4d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d4d8:	4619      	mov	r1, r3
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f88c 	bl	800d5f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d4e0:	e063      	b.n	800d5aa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00e      	beq.n	800d50c <HAL_UART_IRQHandler+0x68c>
 800d4ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d008      	beq.n	800d50c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d502:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f001 fb7c 	bl	800ec02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d50a:	e051      	b.n	800d5b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d50c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d514:	2b00      	cmp	r3, #0
 800d516:	d014      	beq.n	800d542 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d51c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d520:	2b00      	cmp	r3, #0
 800d522:	d105      	bne.n	800d530 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d528:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d008      	beq.n	800d542 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d534:	2b00      	cmp	r3, #0
 800d536:	d03a      	beq.n	800d5ae <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	4798      	blx	r3
    }
    return;
 800d540:	e035      	b.n	800d5ae <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d009      	beq.n	800d562 <HAL_UART_IRQHandler+0x6e2>
 800d54e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d556:	2b00      	cmp	r3, #0
 800d558:	d003      	beq.n	800d562 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f001 fb26 	bl	800ebac <UART_EndTransmit_IT>
    return;
 800d560:	e026      	b.n	800d5b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d009      	beq.n	800d582 <HAL_UART_IRQHandler+0x702>
 800d56e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d572:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d576:	2b00      	cmp	r3, #0
 800d578:	d003      	beq.n	800d582 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f001 fb55 	bl	800ec2a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d580:	e016      	b.n	800d5b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d586:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d010      	beq.n	800d5b0 <HAL_UART_IRQHandler+0x730>
 800d58e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d592:	2b00      	cmp	r3, #0
 800d594:	da0c      	bge.n	800d5b0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f001 fb3d 	bl	800ec16 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d59c:	e008      	b.n	800d5b0 <HAL_UART_IRQHandler+0x730>
      return;
 800d59e:	bf00      	nop
 800d5a0:	e006      	b.n	800d5b0 <HAL_UART_IRQHandler+0x730>
    return;
 800d5a2:	bf00      	nop
 800d5a4:	e004      	b.n	800d5b0 <HAL_UART_IRQHandler+0x730>
      return;
 800d5a6:	bf00      	nop
 800d5a8:	e002      	b.n	800d5b0 <HAL_UART_IRQHandler+0x730>
      return;
 800d5aa:	bf00      	nop
 800d5ac:	e000      	b.n	800d5b0 <HAL_UART_IRQHandler+0x730>
    return;
 800d5ae:	bf00      	nop
  }
}
 800d5b0:	37e8      	adds	r7, #232	; 0xe8
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	effffffe 	.word	0xeffffffe

0800d5bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d5c4:	bf00      	nop
 800d5c6:	370c      	adds	r7, #12
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d5d8:	bf00      	nop
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d5ec:	bf00      	nop
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr

0800d5f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b083      	sub	sp, #12
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	460b      	mov	r3, r1
 800d602:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d604:	bf00      	nop
 800d606:	370c      	adds	r7, #12
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d614:	b092      	sub	sp, #72	; 0x48
 800d616:	af00      	add	r7, sp, #0
 800d618:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d61a:	2300      	movs	r3, #0
 800d61c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	689a      	ldr	r2, [r3, #8]
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	431a      	orrs	r2, r3
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	695b      	ldr	r3, [r3, #20]
 800d62e:	431a      	orrs	r2, r3
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	69db      	ldr	r3, [r3, #28]
 800d634:	4313      	orrs	r3, r2
 800d636:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	4bbe      	ldr	r3, [pc, #760]	; (800d938 <UART_SetConfig+0x328>)
 800d640:	4013      	ands	r3, r2
 800d642:	697a      	ldr	r2, [r7, #20]
 800d644:	6812      	ldr	r2, [r2, #0]
 800d646:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d648:	430b      	orrs	r3, r1
 800d64a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	68da      	ldr	r2, [r3, #12]
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	430a      	orrs	r2, r1
 800d660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	699b      	ldr	r3, [r3, #24]
 800d666:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4ab3      	ldr	r2, [pc, #716]	; (800d93c <UART_SetConfig+0x32c>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d004      	beq.n	800d67c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	6a1b      	ldr	r3, [r3, #32]
 800d676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d678:	4313      	orrs	r3, r2
 800d67a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	689a      	ldr	r2, [r3, #8]
 800d682:	4baf      	ldr	r3, [pc, #700]	; (800d940 <UART_SetConfig+0x330>)
 800d684:	4013      	ands	r3, r2
 800d686:	697a      	ldr	r2, [r7, #20]
 800d688:	6812      	ldr	r2, [r2, #0]
 800d68a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d68c:	430b      	orrs	r3, r1
 800d68e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d696:	f023 010f 	bic.w	r1, r3, #15
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	430a      	orrs	r2, r1
 800d6a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4aa6      	ldr	r2, [pc, #664]	; (800d944 <UART_SetConfig+0x334>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d177      	bne.n	800d7a0 <UART_SetConfig+0x190>
 800d6b0:	4ba5      	ldr	r3, [pc, #660]	; (800d948 <UART_SetConfig+0x338>)
 800d6b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d6b8:	2b28      	cmp	r3, #40	; 0x28
 800d6ba:	d86d      	bhi.n	800d798 <UART_SetConfig+0x188>
 800d6bc:	a201      	add	r2, pc, #4	; (adr r2, 800d6c4 <UART_SetConfig+0xb4>)
 800d6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c2:	bf00      	nop
 800d6c4:	0800d769 	.word	0x0800d769
 800d6c8:	0800d799 	.word	0x0800d799
 800d6cc:	0800d799 	.word	0x0800d799
 800d6d0:	0800d799 	.word	0x0800d799
 800d6d4:	0800d799 	.word	0x0800d799
 800d6d8:	0800d799 	.word	0x0800d799
 800d6dc:	0800d799 	.word	0x0800d799
 800d6e0:	0800d799 	.word	0x0800d799
 800d6e4:	0800d771 	.word	0x0800d771
 800d6e8:	0800d799 	.word	0x0800d799
 800d6ec:	0800d799 	.word	0x0800d799
 800d6f0:	0800d799 	.word	0x0800d799
 800d6f4:	0800d799 	.word	0x0800d799
 800d6f8:	0800d799 	.word	0x0800d799
 800d6fc:	0800d799 	.word	0x0800d799
 800d700:	0800d799 	.word	0x0800d799
 800d704:	0800d779 	.word	0x0800d779
 800d708:	0800d799 	.word	0x0800d799
 800d70c:	0800d799 	.word	0x0800d799
 800d710:	0800d799 	.word	0x0800d799
 800d714:	0800d799 	.word	0x0800d799
 800d718:	0800d799 	.word	0x0800d799
 800d71c:	0800d799 	.word	0x0800d799
 800d720:	0800d799 	.word	0x0800d799
 800d724:	0800d781 	.word	0x0800d781
 800d728:	0800d799 	.word	0x0800d799
 800d72c:	0800d799 	.word	0x0800d799
 800d730:	0800d799 	.word	0x0800d799
 800d734:	0800d799 	.word	0x0800d799
 800d738:	0800d799 	.word	0x0800d799
 800d73c:	0800d799 	.word	0x0800d799
 800d740:	0800d799 	.word	0x0800d799
 800d744:	0800d789 	.word	0x0800d789
 800d748:	0800d799 	.word	0x0800d799
 800d74c:	0800d799 	.word	0x0800d799
 800d750:	0800d799 	.word	0x0800d799
 800d754:	0800d799 	.word	0x0800d799
 800d758:	0800d799 	.word	0x0800d799
 800d75c:	0800d799 	.word	0x0800d799
 800d760:	0800d799 	.word	0x0800d799
 800d764:	0800d791 	.word	0x0800d791
 800d768:	2301      	movs	r3, #1
 800d76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d76e:	e326      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d770:	2304      	movs	r3, #4
 800d772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d776:	e322      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d778:	2308      	movs	r3, #8
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77e:	e31e      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d780:	2310      	movs	r3, #16
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d786:	e31a      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d788:	2320      	movs	r3, #32
 800d78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78e:	e316      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d790:	2340      	movs	r3, #64	; 0x40
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d796:	e312      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d798:	2380      	movs	r3, #128	; 0x80
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79e:	e30e      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a69      	ldr	r2, [pc, #420]	; (800d94c <UART_SetConfig+0x33c>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d130      	bne.n	800d80c <UART_SetConfig+0x1fc>
 800d7aa:	4b67      	ldr	r3, [pc, #412]	; (800d948 <UART_SetConfig+0x338>)
 800d7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7ae:	f003 0307 	and.w	r3, r3, #7
 800d7b2:	2b05      	cmp	r3, #5
 800d7b4:	d826      	bhi.n	800d804 <UART_SetConfig+0x1f4>
 800d7b6:	a201      	add	r2, pc, #4	; (adr r2, 800d7bc <UART_SetConfig+0x1ac>)
 800d7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7bc:	0800d7d5 	.word	0x0800d7d5
 800d7c0:	0800d7dd 	.word	0x0800d7dd
 800d7c4:	0800d7e5 	.word	0x0800d7e5
 800d7c8:	0800d7ed 	.word	0x0800d7ed
 800d7cc:	0800d7f5 	.word	0x0800d7f5
 800d7d0:	0800d7fd 	.word	0x0800d7fd
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7da:	e2f0      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d7dc:	2304      	movs	r3, #4
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7e2:	e2ec      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d7e4:	2308      	movs	r3, #8
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ea:	e2e8      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d7ec:	2310      	movs	r3, #16
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7f2:	e2e4      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d7f4:	2320      	movs	r3, #32
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fa:	e2e0      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d7fc:	2340      	movs	r3, #64	; 0x40
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d802:	e2dc      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d804:	2380      	movs	r3, #128	; 0x80
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80a:	e2d8      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a4f      	ldr	r2, [pc, #316]	; (800d950 <UART_SetConfig+0x340>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d130      	bne.n	800d878 <UART_SetConfig+0x268>
 800d816:	4b4c      	ldr	r3, [pc, #304]	; (800d948 <UART_SetConfig+0x338>)
 800d818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d81a:	f003 0307 	and.w	r3, r3, #7
 800d81e:	2b05      	cmp	r3, #5
 800d820:	d826      	bhi.n	800d870 <UART_SetConfig+0x260>
 800d822:	a201      	add	r2, pc, #4	; (adr r2, 800d828 <UART_SetConfig+0x218>)
 800d824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d828:	0800d841 	.word	0x0800d841
 800d82c:	0800d849 	.word	0x0800d849
 800d830:	0800d851 	.word	0x0800d851
 800d834:	0800d859 	.word	0x0800d859
 800d838:	0800d861 	.word	0x0800d861
 800d83c:	0800d869 	.word	0x0800d869
 800d840:	2300      	movs	r3, #0
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d846:	e2ba      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d848:	2304      	movs	r3, #4
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d84e:	e2b6      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d850:	2308      	movs	r3, #8
 800d852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d856:	e2b2      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d858:	2310      	movs	r3, #16
 800d85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d85e:	e2ae      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d860:	2320      	movs	r3, #32
 800d862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d866:	e2aa      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d868:	2340      	movs	r3, #64	; 0x40
 800d86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d86e:	e2a6      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d870:	2380      	movs	r3, #128	; 0x80
 800d872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d876:	e2a2      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a35      	ldr	r2, [pc, #212]	; (800d954 <UART_SetConfig+0x344>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d130      	bne.n	800d8e4 <UART_SetConfig+0x2d4>
 800d882:	4b31      	ldr	r3, [pc, #196]	; (800d948 <UART_SetConfig+0x338>)
 800d884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d886:	f003 0307 	and.w	r3, r3, #7
 800d88a:	2b05      	cmp	r3, #5
 800d88c:	d826      	bhi.n	800d8dc <UART_SetConfig+0x2cc>
 800d88e:	a201      	add	r2, pc, #4	; (adr r2, 800d894 <UART_SetConfig+0x284>)
 800d890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d894:	0800d8ad 	.word	0x0800d8ad
 800d898:	0800d8b5 	.word	0x0800d8b5
 800d89c:	0800d8bd 	.word	0x0800d8bd
 800d8a0:	0800d8c5 	.word	0x0800d8c5
 800d8a4:	0800d8cd 	.word	0x0800d8cd
 800d8a8:	0800d8d5 	.word	0x0800d8d5
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8b2:	e284      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d8b4:	2304      	movs	r3, #4
 800d8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ba:	e280      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d8bc:	2308      	movs	r3, #8
 800d8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8c2:	e27c      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d8c4:	2310      	movs	r3, #16
 800d8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ca:	e278      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d8cc:	2320      	movs	r3, #32
 800d8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8d2:	e274      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d8d4:	2340      	movs	r3, #64	; 0x40
 800d8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8da:	e270      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d8dc:	2380      	movs	r3, #128	; 0x80
 800d8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8e2:	e26c      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a1b      	ldr	r2, [pc, #108]	; (800d958 <UART_SetConfig+0x348>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d142      	bne.n	800d974 <UART_SetConfig+0x364>
 800d8ee:	4b16      	ldr	r3, [pc, #88]	; (800d948 <UART_SetConfig+0x338>)
 800d8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8f2:	f003 0307 	and.w	r3, r3, #7
 800d8f6:	2b05      	cmp	r3, #5
 800d8f8:	d838      	bhi.n	800d96c <UART_SetConfig+0x35c>
 800d8fa:	a201      	add	r2, pc, #4	; (adr r2, 800d900 <UART_SetConfig+0x2f0>)
 800d8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d900:	0800d919 	.word	0x0800d919
 800d904:	0800d921 	.word	0x0800d921
 800d908:	0800d929 	.word	0x0800d929
 800d90c:	0800d931 	.word	0x0800d931
 800d910:	0800d95d 	.word	0x0800d95d
 800d914:	0800d965 	.word	0x0800d965
 800d918:	2300      	movs	r3, #0
 800d91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d91e:	e24e      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d920:	2304      	movs	r3, #4
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d926:	e24a      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d928:	2308      	movs	r3, #8
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92e:	e246      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d930:	2310      	movs	r3, #16
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d936:	e242      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d938:	cfff69f3 	.word	0xcfff69f3
 800d93c:	58000c00 	.word	0x58000c00
 800d940:	11fff4ff 	.word	0x11fff4ff
 800d944:	40011000 	.word	0x40011000
 800d948:	58024400 	.word	0x58024400
 800d94c:	40004400 	.word	0x40004400
 800d950:	40004800 	.word	0x40004800
 800d954:	40004c00 	.word	0x40004c00
 800d958:	40005000 	.word	0x40005000
 800d95c:	2320      	movs	r3, #32
 800d95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d962:	e22c      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d964:	2340      	movs	r3, #64	; 0x40
 800d966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d96a:	e228      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d96c:	2380      	movs	r3, #128	; 0x80
 800d96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d972:	e224      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4ab1      	ldr	r2, [pc, #708]	; (800dc40 <UART_SetConfig+0x630>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d176      	bne.n	800da6c <UART_SetConfig+0x45c>
 800d97e:	4bb1      	ldr	r3, [pc, #708]	; (800dc44 <UART_SetConfig+0x634>)
 800d980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d986:	2b28      	cmp	r3, #40	; 0x28
 800d988:	d86c      	bhi.n	800da64 <UART_SetConfig+0x454>
 800d98a:	a201      	add	r2, pc, #4	; (adr r2, 800d990 <UART_SetConfig+0x380>)
 800d98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d990:	0800da35 	.word	0x0800da35
 800d994:	0800da65 	.word	0x0800da65
 800d998:	0800da65 	.word	0x0800da65
 800d99c:	0800da65 	.word	0x0800da65
 800d9a0:	0800da65 	.word	0x0800da65
 800d9a4:	0800da65 	.word	0x0800da65
 800d9a8:	0800da65 	.word	0x0800da65
 800d9ac:	0800da65 	.word	0x0800da65
 800d9b0:	0800da3d 	.word	0x0800da3d
 800d9b4:	0800da65 	.word	0x0800da65
 800d9b8:	0800da65 	.word	0x0800da65
 800d9bc:	0800da65 	.word	0x0800da65
 800d9c0:	0800da65 	.word	0x0800da65
 800d9c4:	0800da65 	.word	0x0800da65
 800d9c8:	0800da65 	.word	0x0800da65
 800d9cc:	0800da65 	.word	0x0800da65
 800d9d0:	0800da45 	.word	0x0800da45
 800d9d4:	0800da65 	.word	0x0800da65
 800d9d8:	0800da65 	.word	0x0800da65
 800d9dc:	0800da65 	.word	0x0800da65
 800d9e0:	0800da65 	.word	0x0800da65
 800d9e4:	0800da65 	.word	0x0800da65
 800d9e8:	0800da65 	.word	0x0800da65
 800d9ec:	0800da65 	.word	0x0800da65
 800d9f0:	0800da4d 	.word	0x0800da4d
 800d9f4:	0800da65 	.word	0x0800da65
 800d9f8:	0800da65 	.word	0x0800da65
 800d9fc:	0800da65 	.word	0x0800da65
 800da00:	0800da65 	.word	0x0800da65
 800da04:	0800da65 	.word	0x0800da65
 800da08:	0800da65 	.word	0x0800da65
 800da0c:	0800da65 	.word	0x0800da65
 800da10:	0800da55 	.word	0x0800da55
 800da14:	0800da65 	.word	0x0800da65
 800da18:	0800da65 	.word	0x0800da65
 800da1c:	0800da65 	.word	0x0800da65
 800da20:	0800da65 	.word	0x0800da65
 800da24:	0800da65 	.word	0x0800da65
 800da28:	0800da65 	.word	0x0800da65
 800da2c:	0800da65 	.word	0x0800da65
 800da30:	0800da5d 	.word	0x0800da5d
 800da34:	2301      	movs	r3, #1
 800da36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da3a:	e1c0      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800da3c:	2304      	movs	r3, #4
 800da3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da42:	e1bc      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800da44:	2308      	movs	r3, #8
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da4a:	e1b8      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800da4c:	2310      	movs	r3, #16
 800da4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da52:	e1b4      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800da54:	2320      	movs	r3, #32
 800da56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5a:	e1b0      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800da5c:	2340      	movs	r3, #64	; 0x40
 800da5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da62:	e1ac      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800da64:	2380      	movs	r3, #128	; 0x80
 800da66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6a:	e1a8      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a75      	ldr	r2, [pc, #468]	; (800dc48 <UART_SetConfig+0x638>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d130      	bne.n	800dad8 <UART_SetConfig+0x4c8>
 800da76:	4b73      	ldr	r3, [pc, #460]	; (800dc44 <UART_SetConfig+0x634>)
 800da78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da7a:	f003 0307 	and.w	r3, r3, #7
 800da7e:	2b05      	cmp	r3, #5
 800da80:	d826      	bhi.n	800dad0 <UART_SetConfig+0x4c0>
 800da82:	a201      	add	r2, pc, #4	; (adr r2, 800da88 <UART_SetConfig+0x478>)
 800da84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da88:	0800daa1 	.word	0x0800daa1
 800da8c:	0800daa9 	.word	0x0800daa9
 800da90:	0800dab1 	.word	0x0800dab1
 800da94:	0800dab9 	.word	0x0800dab9
 800da98:	0800dac1 	.word	0x0800dac1
 800da9c:	0800dac9 	.word	0x0800dac9
 800daa0:	2300      	movs	r3, #0
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daa6:	e18a      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800daa8:	2304      	movs	r3, #4
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daae:	e186      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dab0:	2308      	movs	r3, #8
 800dab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dab6:	e182      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dab8:	2310      	movs	r3, #16
 800daba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dabe:	e17e      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dac0:	2320      	movs	r3, #32
 800dac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dac6:	e17a      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dac8:	2340      	movs	r3, #64	; 0x40
 800daca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dace:	e176      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dad0:	2380      	movs	r3, #128	; 0x80
 800dad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad6:	e172      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a5b      	ldr	r2, [pc, #364]	; (800dc4c <UART_SetConfig+0x63c>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d130      	bne.n	800db44 <UART_SetConfig+0x534>
 800dae2:	4b58      	ldr	r3, [pc, #352]	; (800dc44 <UART_SetConfig+0x634>)
 800dae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dae6:	f003 0307 	and.w	r3, r3, #7
 800daea:	2b05      	cmp	r3, #5
 800daec:	d826      	bhi.n	800db3c <UART_SetConfig+0x52c>
 800daee:	a201      	add	r2, pc, #4	; (adr r2, 800daf4 <UART_SetConfig+0x4e4>)
 800daf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf4:	0800db0d 	.word	0x0800db0d
 800daf8:	0800db15 	.word	0x0800db15
 800dafc:	0800db1d 	.word	0x0800db1d
 800db00:	0800db25 	.word	0x0800db25
 800db04:	0800db2d 	.word	0x0800db2d
 800db08:	0800db35 	.word	0x0800db35
 800db0c:	2300      	movs	r3, #0
 800db0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db12:	e154      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800db14:	2304      	movs	r3, #4
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1a:	e150      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800db1c:	2308      	movs	r3, #8
 800db1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db22:	e14c      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800db24:	2310      	movs	r3, #16
 800db26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db2a:	e148      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800db2c:	2320      	movs	r3, #32
 800db2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db32:	e144      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800db34:	2340      	movs	r3, #64	; 0x40
 800db36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db3a:	e140      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800db3c:	2380      	movs	r3, #128	; 0x80
 800db3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db42:	e13c      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a41      	ldr	r2, [pc, #260]	; (800dc50 <UART_SetConfig+0x640>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	f040 8082 	bne.w	800dc54 <UART_SetConfig+0x644>
 800db50:	4b3c      	ldr	r3, [pc, #240]	; (800dc44 <UART_SetConfig+0x634>)
 800db52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db58:	2b28      	cmp	r3, #40	; 0x28
 800db5a:	d86d      	bhi.n	800dc38 <UART_SetConfig+0x628>
 800db5c:	a201      	add	r2, pc, #4	; (adr r2, 800db64 <UART_SetConfig+0x554>)
 800db5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db62:	bf00      	nop
 800db64:	0800dc09 	.word	0x0800dc09
 800db68:	0800dc39 	.word	0x0800dc39
 800db6c:	0800dc39 	.word	0x0800dc39
 800db70:	0800dc39 	.word	0x0800dc39
 800db74:	0800dc39 	.word	0x0800dc39
 800db78:	0800dc39 	.word	0x0800dc39
 800db7c:	0800dc39 	.word	0x0800dc39
 800db80:	0800dc39 	.word	0x0800dc39
 800db84:	0800dc11 	.word	0x0800dc11
 800db88:	0800dc39 	.word	0x0800dc39
 800db8c:	0800dc39 	.word	0x0800dc39
 800db90:	0800dc39 	.word	0x0800dc39
 800db94:	0800dc39 	.word	0x0800dc39
 800db98:	0800dc39 	.word	0x0800dc39
 800db9c:	0800dc39 	.word	0x0800dc39
 800dba0:	0800dc39 	.word	0x0800dc39
 800dba4:	0800dc19 	.word	0x0800dc19
 800dba8:	0800dc39 	.word	0x0800dc39
 800dbac:	0800dc39 	.word	0x0800dc39
 800dbb0:	0800dc39 	.word	0x0800dc39
 800dbb4:	0800dc39 	.word	0x0800dc39
 800dbb8:	0800dc39 	.word	0x0800dc39
 800dbbc:	0800dc39 	.word	0x0800dc39
 800dbc0:	0800dc39 	.word	0x0800dc39
 800dbc4:	0800dc21 	.word	0x0800dc21
 800dbc8:	0800dc39 	.word	0x0800dc39
 800dbcc:	0800dc39 	.word	0x0800dc39
 800dbd0:	0800dc39 	.word	0x0800dc39
 800dbd4:	0800dc39 	.word	0x0800dc39
 800dbd8:	0800dc39 	.word	0x0800dc39
 800dbdc:	0800dc39 	.word	0x0800dc39
 800dbe0:	0800dc39 	.word	0x0800dc39
 800dbe4:	0800dc29 	.word	0x0800dc29
 800dbe8:	0800dc39 	.word	0x0800dc39
 800dbec:	0800dc39 	.word	0x0800dc39
 800dbf0:	0800dc39 	.word	0x0800dc39
 800dbf4:	0800dc39 	.word	0x0800dc39
 800dbf8:	0800dc39 	.word	0x0800dc39
 800dbfc:	0800dc39 	.word	0x0800dc39
 800dc00:	0800dc39 	.word	0x0800dc39
 800dc04:	0800dc31 	.word	0x0800dc31
 800dc08:	2301      	movs	r3, #1
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0e:	e0d6      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dc10:	2304      	movs	r3, #4
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc16:	e0d2      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dc18:	2308      	movs	r3, #8
 800dc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc1e:	e0ce      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dc20:	2310      	movs	r3, #16
 800dc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc26:	e0ca      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dc28:	2320      	movs	r3, #32
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc2e:	e0c6      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dc30:	2340      	movs	r3, #64	; 0x40
 800dc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc36:	e0c2      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dc38:	2380      	movs	r3, #128	; 0x80
 800dc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc3e:	e0be      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dc40:	40011400 	.word	0x40011400
 800dc44:	58024400 	.word	0x58024400
 800dc48:	40007800 	.word	0x40007800
 800dc4c:	40007c00 	.word	0x40007c00
 800dc50:	40011800 	.word	0x40011800
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4aad      	ldr	r2, [pc, #692]	; (800df10 <UART_SetConfig+0x900>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d176      	bne.n	800dd4c <UART_SetConfig+0x73c>
 800dc5e:	4bad      	ldr	r3, [pc, #692]	; (800df14 <UART_SetConfig+0x904>)
 800dc60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc66:	2b28      	cmp	r3, #40	; 0x28
 800dc68:	d86c      	bhi.n	800dd44 <UART_SetConfig+0x734>
 800dc6a:	a201      	add	r2, pc, #4	; (adr r2, 800dc70 <UART_SetConfig+0x660>)
 800dc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc70:	0800dd15 	.word	0x0800dd15
 800dc74:	0800dd45 	.word	0x0800dd45
 800dc78:	0800dd45 	.word	0x0800dd45
 800dc7c:	0800dd45 	.word	0x0800dd45
 800dc80:	0800dd45 	.word	0x0800dd45
 800dc84:	0800dd45 	.word	0x0800dd45
 800dc88:	0800dd45 	.word	0x0800dd45
 800dc8c:	0800dd45 	.word	0x0800dd45
 800dc90:	0800dd1d 	.word	0x0800dd1d
 800dc94:	0800dd45 	.word	0x0800dd45
 800dc98:	0800dd45 	.word	0x0800dd45
 800dc9c:	0800dd45 	.word	0x0800dd45
 800dca0:	0800dd45 	.word	0x0800dd45
 800dca4:	0800dd45 	.word	0x0800dd45
 800dca8:	0800dd45 	.word	0x0800dd45
 800dcac:	0800dd45 	.word	0x0800dd45
 800dcb0:	0800dd25 	.word	0x0800dd25
 800dcb4:	0800dd45 	.word	0x0800dd45
 800dcb8:	0800dd45 	.word	0x0800dd45
 800dcbc:	0800dd45 	.word	0x0800dd45
 800dcc0:	0800dd45 	.word	0x0800dd45
 800dcc4:	0800dd45 	.word	0x0800dd45
 800dcc8:	0800dd45 	.word	0x0800dd45
 800dccc:	0800dd45 	.word	0x0800dd45
 800dcd0:	0800dd2d 	.word	0x0800dd2d
 800dcd4:	0800dd45 	.word	0x0800dd45
 800dcd8:	0800dd45 	.word	0x0800dd45
 800dcdc:	0800dd45 	.word	0x0800dd45
 800dce0:	0800dd45 	.word	0x0800dd45
 800dce4:	0800dd45 	.word	0x0800dd45
 800dce8:	0800dd45 	.word	0x0800dd45
 800dcec:	0800dd45 	.word	0x0800dd45
 800dcf0:	0800dd35 	.word	0x0800dd35
 800dcf4:	0800dd45 	.word	0x0800dd45
 800dcf8:	0800dd45 	.word	0x0800dd45
 800dcfc:	0800dd45 	.word	0x0800dd45
 800dd00:	0800dd45 	.word	0x0800dd45
 800dd04:	0800dd45 	.word	0x0800dd45
 800dd08:	0800dd45 	.word	0x0800dd45
 800dd0c:	0800dd45 	.word	0x0800dd45
 800dd10:	0800dd3d 	.word	0x0800dd3d
 800dd14:	2301      	movs	r3, #1
 800dd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd1a:	e050      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dd1c:	2304      	movs	r3, #4
 800dd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd22:	e04c      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dd24:	2308      	movs	r3, #8
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd2a:	e048      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dd2c:	2310      	movs	r3, #16
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd32:	e044      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dd34:	2320      	movs	r3, #32
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd3a:	e040      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dd3c:	2340      	movs	r3, #64	; 0x40
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd42:	e03c      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dd44:	2380      	movs	r3, #128	; 0x80
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4a:	e038      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a71      	ldr	r2, [pc, #452]	; (800df18 <UART_SetConfig+0x908>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d130      	bne.n	800ddb8 <UART_SetConfig+0x7a8>
 800dd56:	4b6f      	ldr	r3, [pc, #444]	; (800df14 <UART_SetConfig+0x904>)
 800dd58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd5a:	f003 0307 	and.w	r3, r3, #7
 800dd5e:	2b05      	cmp	r3, #5
 800dd60:	d826      	bhi.n	800ddb0 <UART_SetConfig+0x7a0>
 800dd62:	a201      	add	r2, pc, #4	; (adr r2, 800dd68 <UART_SetConfig+0x758>)
 800dd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd68:	0800dd81 	.word	0x0800dd81
 800dd6c:	0800dd89 	.word	0x0800dd89
 800dd70:	0800dd91 	.word	0x0800dd91
 800dd74:	0800dd99 	.word	0x0800dd99
 800dd78:	0800dda1 	.word	0x0800dda1
 800dd7c:	0800dda9 	.word	0x0800dda9
 800dd80:	2302      	movs	r3, #2
 800dd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd86:	e01a      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dd88:	2304      	movs	r3, #4
 800dd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd8e:	e016      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dd90:	2308      	movs	r3, #8
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd96:	e012      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dd98:	2310      	movs	r3, #16
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd9e:	e00e      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dda0:	2320      	movs	r3, #32
 800dda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dda6:	e00a      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800dda8:	2340      	movs	r3, #64	; 0x40
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddae:	e006      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800ddb0:	2380      	movs	r3, #128	; 0x80
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddb6:	e002      	b.n	800ddbe <UART_SetConfig+0x7ae>
 800ddb8:	2380      	movs	r3, #128	; 0x80
 800ddba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a55      	ldr	r2, [pc, #340]	; (800df18 <UART_SetConfig+0x908>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	f040 80f8 	bne.w	800dfba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ddca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ddce:	2b20      	cmp	r3, #32
 800ddd0:	dc46      	bgt.n	800de60 <UART_SetConfig+0x850>
 800ddd2:	2b02      	cmp	r3, #2
 800ddd4:	db75      	blt.n	800dec2 <UART_SetConfig+0x8b2>
 800ddd6:	3b02      	subs	r3, #2
 800ddd8:	2b1e      	cmp	r3, #30
 800ddda:	d872      	bhi.n	800dec2 <UART_SetConfig+0x8b2>
 800dddc:	a201      	add	r2, pc, #4	; (adr r2, 800dde4 <UART_SetConfig+0x7d4>)
 800ddde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde2:	bf00      	nop
 800dde4:	0800de67 	.word	0x0800de67
 800dde8:	0800dec3 	.word	0x0800dec3
 800ddec:	0800de6f 	.word	0x0800de6f
 800ddf0:	0800dec3 	.word	0x0800dec3
 800ddf4:	0800dec3 	.word	0x0800dec3
 800ddf8:	0800dec3 	.word	0x0800dec3
 800ddfc:	0800de7f 	.word	0x0800de7f
 800de00:	0800dec3 	.word	0x0800dec3
 800de04:	0800dec3 	.word	0x0800dec3
 800de08:	0800dec3 	.word	0x0800dec3
 800de0c:	0800dec3 	.word	0x0800dec3
 800de10:	0800dec3 	.word	0x0800dec3
 800de14:	0800dec3 	.word	0x0800dec3
 800de18:	0800dec3 	.word	0x0800dec3
 800de1c:	0800de8f 	.word	0x0800de8f
 800de20:	0800dec3 	.word	0x0800dec3
 800de24:	0800dec3 	.word	0x0800dec3
 800de28:	0800dec3 	.word	0x0800dec3
 800de2c:	0800dec3 	.word	0x0800dec3
 800de30:	0800dec3 	.word	0x0800dec3
 800de34:	0800dec3 	.word	0x0800dec3
 800de38:	0800dec3 	.word	0x0800dec3
 800de3c:	0800dec3 	.word	0x0800dec3
 800de40:	0800dec3 	.word	0x0800dec3
 800de44:	0800dec3 	.word	0x0800dec3
 800de48:	0800dec3 	.word	0x0800dec3
 800de4c:	0800dec3 	.word	0x0800dec3
 800de50:	0800dec3 	.word	0x0800dec3
 800de54:	0800dec3 	.word	0x0800dec3
 800de58:	0800dec3 	.word	0x0800dec3
 800de5c:	0800deb5 	.word	0x0800deb5
 800de60:	2b40      	cmp	r3, #64	; 0x40
 800de62:	d02a      	beq.n	800deba <UART_SetConfig+0x8aa>
 800de64:	e02d      	b.n	800dec2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800de66:	f7fc fde3 	bl	800aa30 <HAL_RCCEx_GetD3PCLK1Freq>
 800de6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de6c:	e02f      	b.n	800dece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de72:	4618      	mov	r0, r3
 800de74:	f7fc fdf2 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de7c:	e027      	b.n	800dece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de7e:	f107 0318 	add.w	r3, r7, #24
 800de82:	4618      	mov	r0, r3
 800de84:	f7fc ff3e 	bl	800ad04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de8c:	e01f      	b.n	800dece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de8e:	4b21      	ldr	r3, [pc, #132]	; (800df14 <UART_SetConfig+0x904>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f003 0320 	and.w	r3, r3, #32
 800de96:	2b00      	cmp	r3, #0
 800de98:	d009      	beq.n	800deae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de9a:	4b1e      	ldr	r3, [pc, #120]	; (800df14 <UART_SetConfig+0x904>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	08db      	lsrs	r3, r3, #3
 800dea0:	f003 0303 	and.w	r3, r3, #3
 800dea4:	4a1d      	ldr	r2, [pc, #116]	; (800df1c <UART_SetConfig+0x90c>)
 800dea6:	fa22 f303 	lsr.w	r3, r2, r3
 800deaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800deac:	e00f      	b.n	800dece <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800deae:	4b1b      	ldr	r3, [pc, #108]	; (800df1c <UART_SetConfig+0x90c>)
 800deb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800deb2:	e00c      	b.n	800dece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800deb4:	4b1a      	ldr	r3, [pc, #104]	; (800df20 <UART_SetConfig+0x910>)
 800deb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800deb8:	e009      	b.n	800dece <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800deba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800debe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dec0:	e005      	b.n	800dece <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dec2:	2300      	movs	r3, #0
 800dec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dec6:	2301      	movs	r3, #1
 800dec8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800decc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f000 81ee 	beq.w	800e2b2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deda:	4a12      	ldr	r2, [pc, #72]	; (800df24 <UART_SetConfig+0x914>)
 800dedc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dee0:	461a      	mov	r2, r3
 800dee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dee4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dee8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	685a      	ldr	r2, [r3, #4]
 800deee:	4613      	mov	r3, r2
 800def0:	005b      	lsls	r3, r3, #1
 800def2:	4413      	add	r3, r2
 800def4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800def6:	429a      	cmp	r2, r3
 800def8:	d305      	bcc.n	800df06 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df02:	429a      	cmp	r2, r3
 800df04:	d910      	bls.n	800df28 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800df06:	2301      	movs	r3, #1
 800df08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800df0c:	e1d1      	b.n	800e2b2 <UART_SetConfig+0xca2>
 800df0e:	bf00      	nop
 800df10:	40011c00 	.word	0x40011c00
 800df14:	58024400 	.word	0x58024400
 800df18:	58000c00 	.word	0x58000c00
 800df1c:	03d09000 	.word	0x03d09000
 800df20:	003d0900 	.word	0x003d0900
 800df24:	0800f558 	.word	0x0800f558
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df2a:	2200      	movs	r2, #0
 800df2c:	60bb      	str	r3, [r7, #8]
 800df2e:	60fa      	str	r2, [r7, #12]
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df34:	4ac0      	ldr	r2, [pc, #768]	; (800e238 <UART_SetConfig+0xc28>)
 800df36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	2200      	movs	r2, #0
 800df3e:	603b      	str	r3, [r7, #0]
 800df40:	607a      	str	r2, [r7, #4]
 800df42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800df4a:	f7f2 f9e9 	bl	8000320 <__aeabi_uldivmod>
 800df4e:	4602      	mov	r2, r0
 800df50:	460b      	mov	r3, r1
 800df52:	4610      	mov	r0, r2
 800df54:	4619      	mov	r1, r3
 800df56:	f04f 0200 	mov.w	r2, #0
 800df5a:	f04f 0300 	mov.w	r3, #0
 800df5e:	020b      	lsls	r3, r1, #8
 800df60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800df64:	0202      	lsls	r2, r0, #8
 800df66:	6979      	ldr	r1, [r7, #20]
 800df68:	6849      	ldr	r1, [r1, #4]
 800df6a:	0849      	lsrs	r1, r1, #1
 800df6c:	2000      	movs	r0, #0
 800df6e:	460c      	mov	r4, r1
 800df70:	4605      	mov	r5, r0
 800df72:	eb12 0804 	adds.w	r8, r2, r4
 800df76:	eb43 0905 	adc.w	r9, r3, r5
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	469a      	mov	sl, r3
 800df82:	4693      	mov	fp, r2
 800df84:	4652      	mov	r2, sl
 800df86:	465b      	mov	r3, fp
 800df88:	4640      	mov	r0, r8
 800df8a:	4649      	mov	r1, r9
 800df8c:	f7f2 f9c8 	bl	8000320 <__aeabi_uldivmod>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4613      	mov	r3, r2
 800df96:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df9e:	d308      	bcc.n	800dfb2 <UART_SetConfig+0x9a2>
 800dfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfa6:	d204      	bcs.n	800dfb2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfae:	60da      	str	r2, [r3, #12]
 800dfb0:	e17f      	b.n	800e2b2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dfb8:	e17b      	b.n	800e2b2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	69db      	ldr	r3, [r3, #28]
 800dfbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfc2:	f040 80bd 	bne.w	800e140 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800dfc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dfca:	2b20      	cmp	r3, #32
 800dfcc:	dc48      	bgt.n	800e060 <UART_SetConfig+0xa50>
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	db7b      	blt.n	800e0ca <UART_SetConfig+0xaba>
 800dfd2:	2b20      	cmp	r3, #32
 800dfd4:	d879      	bhi.n	800e0ca <UART_SetConfig+0xaba>
 800dfd6:	a201      	add	r2, pc, #4	; (adr r2, 800dfdc <UART_SetConfig+0x9cc>)
 800dfd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfdc:	0800e067 	.word	0x0800e067
 800dfe0:	0800e06f 	.word	0x0800e06f
 800dfe4:	0800e0cb 	.word	0x0800e0cb
 800dfe8:	0800e0cb 	.word	0x0800e0cb
 800dfec:	0800e077 	.word	0x0800e077
 800dff0:	0800e0cb 	.word	0x0800e0cb
 800dff4:	0800e0cb 	.word	0x0800e0cb
 800dff8:	0800e0cb 	.word	0x0800e0cb
 800dffc:	0800e087 	.word	0x0800e087
 800e000:	0800e0cb 	.word	0x0800e0cb
 800e004:	0800e0cb 	.word	0x0800e0cb
 800e008:	0800e0cb 	.word	0x0800e0cb
 800e00c:	0800e0cb 	.word	0x0800e0cb
 800e010:	0800e0cb 	.word	0x0800e0cb
 800e014:	0800e0cb 	.word	0x0800e0cb
 800e018:	0800e0cb 	.word	0x0800e0cb
 800e01c:	0800e097 	.word	0x0800e097
 800e020:	0800e0cb 	.word	0x0800e0cb
 800e024:	0800e0cb 	.word	0x0800e0cb
 800e028:	0800e0cb 	.word	0x0800e0cb
 800e02c:	0800e0cb 	.word	0x0800e0cb
 800e030:	0800e0cb 	.word	0x0800e0cb
 800e034:	0800e0cb 	.word	0x0800e0cb
 800e038:	0800e0cb 	.word	0x0800e0cb
 800e03c:	0800e0cb 	.word	0x0800e0cb
 800e040:	0800e0cb 	.word	0x0800e0cb
 800e044:	0800e0cb 	.word	0x0800e0cb
 800e048:	0800e0cb 	.word	0x0800e0cb
 800e04c:	0800e0cb 	.word	0x0800e0cb
 800e050:	0800e0cb 	.word	0x0800e0cb
 800e054:	0800e0cb 	.word	0x0800e0cb
 800e058:	0800e0cb 	.word	0x0800e0cb
 800e05c:	0800e0bd 	.word	0x0800e0bd
 800e060:	2b40      	cmp	r3, #64	; 0x40
 800e062:	d02e      	beq.n	800e0c2 <UART_SetConfig+0xab2>
 800e064:	e031      	b.n	800e0ca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e066:	f7fb fdbd 	bl	8009be4 <HAL_RCC_GetPCLK1Freq>
 800e06a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e06c:	e033      	b.n	800e0d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e06e:	f7fb fdcf 	bl	8009c10 <HAL_RCC_GetPCLK2Freq>
 800e072:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e074:	e02f      	b.n	800e0d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fc fcee 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e084:	e027      	b.n	800e0d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e086:	f107 0318 	add.w	r3, r7, #24
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fc fe3a 	bl	800ad04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e094:	e01f      	b.n	800e0d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e096:	4b69      	ldr	r3, [pc, #420]	; (800e23c <UART_SetConfig+0xc2c>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f003 0320 	and.w	r3, r3, #32
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d009      	beq.n	800e0b6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e0a2:	4b66      	ldr	r3, [pc, #408]	; (800e23c <UART_SetConfig+0xc2c>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	08db      	lsrs	r3, r3, #3
 800e0a8:	f003 0303 	and.w	r3, r3, #3
 800e0ac:	4a64      	ldr	r2, [pc, #400]	; (800e240 <UART_SetConfig+0xc30>)
 800e0ae:	fa22 f303 	lsr.w	r3, r2, r3
 800e0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0b4:	e00f      	b.n	800e0d6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e0b6:	4b62      	ldr	r3, [pc, #392]	; (800e240 <UART_SetConfig+0xc30>)
 800e0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ba:	e00c      	b.n	800e0d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e0bc:	4b61      	ldr	r3, [pc, #388]	; (800e244 <UART_SetConfig+0xc34>)
 800e0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0c0:	e009      	b.n	800e0d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0c8:	e005      	b.n	800e0d6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e0d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e0d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f000 80ea 	beq.w	800e2b2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e2:	4a55      	ldr	r2, [pc, #340]	; (800e238 <UART_SetConfig+0xc28>)
 800e0e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0f0:	005a      	lsls	r2, r3, #1
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	085b      	lsrs	r3, r3, #1
 800e0f8:	441a      	add	r2, r3
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800e102:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e106:	2b0f      	cmp	r3, #15
 800e108:	d916      	bls.n	800e138 <UART_SetConfig+0xb28>
 800e10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e110:	d212      	bcs.n	800e138 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e114:	b29b      	uxth	r3, r3
 800e116:	f023 030f 	bic.w	r3, r3, #15
 800e11a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11e:	085b      	lsrs	r3, r3, #1
 800e120:	b29b      	uxth	r3, r3
 800e122:	f003 0307 	and.w	r3, r3, #7
 800e126:	b29a      	uxth	r2, r3
 800e128:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e12a:	4313      	orrs	r3, r2
 800e12c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e134:	60da      	str	r2, [r3, #12]
 800e136:	e0bc      	b.n	800e2b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e138:	2301      	movs	r3, #1
 800e13a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e13e:	e0b8      	b.n	800e2b2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e140:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e144:	2b20      	cmp	r3, #32
 800e146:	dc4b      	bgt.n	800e1e0 <UART_SetConfig+0xbd0>
 800e148:	2b00      	cmp	r3, #0
 800e14a:	f2c0 8087 	blt.w	800e25c <UART_SetConfig+0xc4c>
 800e14e:	2b20      	cmp	r3, #32
 800e150:	f200 8084 	bhi.w	800e25c <UART_SetConfig+0xc4c>
 800e154:	a201      	add	r2, pc, #4	; (adr r2, 800e15c <UART_SetConfig+0xb4c>)
 800e156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e15a:	bf00      	nop
 800e15c:	0800e1e7 	.word	0x0800e1e7
 800e160:	0800e1ef 	.word	0x0800e1ef
 800e164:	0800e25d 	.word	0x0800e25d
 800e168:	0800e25d 	.word	0x0800e25d
 800e16c:	0800e1f7 	.word	0x0800e1f7
 800e170:	0800e25d 	.word	0x0800e25d
 800e174:	0800e25d 	.word	0x0800e25d
 800e178:	0800e25d 	.word	0x0800e25d
 800e17c:	0800e207 	.word	0x0800e207
 800e180:	0800e25d 	.word	0x0800e25d
 800e184:	0800e25d 	.word	0x0800e25d
 800e188:	0800e25d 	.word	0x0800e25d
 800e18c:	0800e25d 	.word	0x0800e25d
 800e190:	0800e25d 	.word	0x0800e25d
 800e194:	0800e25d 	.word	0x0800e25d
 800e198:	0800e25d 	.word	0x0800e25d
 800e19c:	0800e217 	.word	0x0800e217
 800e1a0:	0800e25d 	.word	0x0800e25d
 800e1a4:	0800e25d 	.word	0x0800e25d
 800e1a8:	0800e25d 	.word	0x0800e25d
 800e1ac:	0800e25d 	.word	0x0800e25d
 800e1b0:	0800e25d 	.word	0x0800e25d
 800e1b4:	0800e25d 	.word	0x0800e25d
 800e1b8:	0800e25d 	.word	0x0800e25d
 800e1bc:	0800e25d 	.word	0x0800e25d
 800e1c0:	0800e25d 	.word	0x0800e25d
 800e1c4:	0800e25d 	.word	0x0800e25d
 800e1c8:	0800e25d 	.word	0x0800e25d
 800e1cc:	0800e25d 	.word	0x0800e25d
 800e1d0:	0800e25d 	.word	0x0800e25d
 800e1d4:	0800e25d 	.word	0x0800e25d
 800e1d8:	0800e25d 	.word	0x0800e25d
 800e1dc:	0800e24f 	.word	0x0800e24f
 800e1e0:	2b40      	cmp	r3, #64	; 0x40
 800e1e2:	d037      	beq.n	800e254 <UART_SetConfig+0xc44>
 800e1e4:	e03a      	b.n	800e25c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1e6:	f7fb fcfd 	bl	8009be4 <HAL_RCC_GetPCLK1Freq>
 800e1ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1ec:	e03c      	b.n	800e268 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1ee:	f7fb fd0f 	bl	8009c10 <HAL_RCC_GetPCLK2Freq>
 800e1f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1f4:	e038      	b.n	800e268 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7fc fc2e 	bl	800aa5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e204:	e030      	b.n	800e268 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e206:	f107 0318 	add.w	r3, r7, #24
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fc fd7a 	bl	800ad04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e214:	e028      	b.n	800e268 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e216:	4b09      	ldr	r3, [pc, #36]	; (800e23c <UART_SetConfig+0xc2c>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f003 0320 	and.w	r3, r3, #32
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d012      	beq.n	800e248 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e222:	4b06      	ldr	r3, [pc, #24]	; (800e23c <UART_SetConfig+0xc2c>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	08db      	lsrs	r3, r3, #3
 800e228:	f003 0303 	and.w	r3, r3, #3
 800e22c:	4a04      	ldr	r2, [pc, #16]	; (800e240 <UART_SetConfig+0xc30>)
 800e22e:	fa22 f303 	lsr.w	r3, r2, r3
 800e232:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e234:	e018      	b.n	800e268 <UART_SetConfig+0xc58>
 800e236:	bf00      	nop
 800e238:	0800f558 	.word	0x0800f558
 800e23c:	58024400 	.word	0x58024400
 800e240:	03d09000 	.word	0x03d09000
 800e244:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e248:	4b24      	ldr	r3, [pc, #144]	; (800e2dc <UART_SetConfig+0xccc>)
 800e24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e24c:	e00c      	b.n	800e268 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e24e:	4b24      	ldr	r3, [pc, #144]	; (800e2e0 <UART_SetConfig+0xcd0>)
 800e250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e252:	e009      	b.n	800e268 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e25a:	e005      	b.n	800e268 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e25c:	2300      	movs	r3, #0
 800e25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e260:	2301      	movs	r3, #1
 800e262:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e266:	bf00      	nop
    }

    if (pclk != 0U)
 800e268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d021      	beq.n	800e2b2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e272:	4a1c      	ldr	r2, [pc, #112]	; (800e2e4 <UART_SetConfig+0xcd4>)
 800e274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e278:	461a      	mov	r2, r3
 800e27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e27c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	085b      	lsrs	r3, r3, #1
 800e286:	441a      	add	r2, r3
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e290:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e294:	2b0f      	cmp	r3, #15
 800e296:	d909      	bls.n	800e2ac <UART_SetConfig+0xc9c>
 800e298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e29e:	d205      	bcs.n	800e2ac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	60da      	str	r2, [r3, #12]
 800e2aa:	e002      	b.n	800e2b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	2201      	movs	r2, #1
 800e2be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e2ce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3748      	adds	r7, #72	; 0x48
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e2dc:	03d09000 	.word	0x03d09000
 800e2e0:	003d0900 	.word	0x003d0900
 800e2e4:	0800f558 	.word	0x0800f558

0800e2e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2f4:	f003 0301 	and.w	r3, r3, #1
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d00a      	beq.n	800e312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	430a      	orrs	r2, r1
 800e310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e316:	f003 0302 	and.w	r3, r3, #2
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00a      	beq.n	800e334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	430a      	orrs	r2, r1
 800e332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e338:	f003 0304 	and.w	r3, r3, #4
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d00a      	beq.n	800e356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	430a      	orrs	r2, r1
 800e354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e35a:	f003 0308 	and.w	r3, r3, #8
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d00a      	beq.n	800e378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	430a      	orrs	r2, r1
 800e376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e37c:	f003 0310 	and.w	r3, r3, #16
 800e380:	2b00      	cmp	r3, #0
 800e382:	d00a      	beq.n	800e39a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	430a      	orrs	r2, r1
 800e398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e39e:	f003 0320 	and.w	r3, r3, #32
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d00a      	beq.n	800e3bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	689b      	ldr	r3, [r3, #8]
 800e3ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	430a      	orrs	r2, r1
 800e3ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d01a      	beq.n	800e3fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	430a      	orrs	r2, r1
 800e3dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3e6:	d10a      	bne.n	800e3fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	430a      	orrs	r2, r1
 800e3fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00a      	beq.n	800e420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	430a      	orrs	r2, r1
 800e41e:	605a      	str	r2, [r3, #4]
  }
}
 800e420:	bf00      	nop
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b086      	sub	sp, #24
 800e430:	af02      	add	r7, sp, #8
 800e432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e43c:	f7f7 fb72 	bl	8005b24 <HAL_GetTick>
 800e440:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f003 0308 	and.w	r3, r3, #8
 800e44c:	2b08      	cmp	r3, #8
 800e44e:	d10e      	bne.n	800e46e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e454:	9300      	str	r3, [sp, #0]
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2200      	movs	r2, #0
 800e45a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 f82f 	bl	800e4c2 <UART_WaitOnFlagUntilTimeout>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	d001      	beq.n	800e46e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e46a:	2303      	movs	r3, #3
 800e46c:	e025      	b.n	800e4ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f003 0304 	and.w	r3, r3, #4
 800e478:	2b04      	cmp	r3, #4
 800e47a:	d10e      	bne.n	800e49a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e47c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e480:	9300      	str	r3, [sp, #0]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2200      	movs	r2, #0
 800e486:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f000 f819 	bl	800e4c2 <UART_WaitOnFlagUntilTimeout>
 800e490:	4603      	mov	r3, r0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d001      	beq.n	800e49a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e496:	2303      	movs	r3, #3
 800e498:	e00f      	b.n	800e4ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2220      	movs	r2, #32
 800e49e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2220      	movs	r2, #32
 800e4a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e4b8:	2300      	movs	r3, #0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b09c      	sub	sp, #112	; 0x70
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	60f8      	str	r0, [r7, #12]
 800e4ca:	60b9      	str	r1, [r7, #8]
 800e4cc:	603b      	str	r3, [r7, #0]
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e4d2:	e0a9      	b.n	800e628 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e4d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4da:	f000 80a5 	beq.w	800e628 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4de:	f7f7 fb21 	bl	8005b24 <HAL_GetTick>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	1ad3      	subs	r3, r2, r3
 800e4e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d302      	bcc.n	800e4f4 <UART_WaitOnFlagUntilTimeout+0x32>
 800e4ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d140      	bne.n	800e576 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4fc:	e853 3f00 	ldrex	r3, [r3]
 800e500:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e504:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e508:	667b      	str	r3, [r7, #100]	; 0x64
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	461a      	mov	r2, r3
 800e510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e512:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e514:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e516:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e518:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e51a:	e841 2300 	strex	r3, r2, [r1]
 800e51e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e522:	2b00      	cmp	r3, #0
 800e524:	d1e6      	bne.n	800e4f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	3308      	adds	r3, #8
 800e52c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e530:	e853 3f00 	ldrex	r3, [r3]
 800e534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e538:	f023 0301 	bic.w	r3, r3, #1
 800e53c:	663b      	str	r3, [r7, #96]	; 0x60
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	3308      	adds	r3, #8
 800e544:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e546:	64ba      	str	r2, [r7, #72]	; 0x48
 800e548:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e54a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e54c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e54e:	e841 2300 	strex	r3, r2, [r1]
 800e552:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e556:	2b00      	cmp	r3, #0
 800e558:	d1e5      	bne.n	800e526 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2220      	movs	r2, #32
 800e55e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2220      	movs	r2, #32
 800e566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2200      	movs	r2, #0
 800e56e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e572:	2303      	movs	r3, #3
 800e574:	e069      	b.n	800e64a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f003 0304 	and.w	r3, r3, #4
 800e580:	2b00      	cmp	r3, #0
 800e582:	d051      	beq.n	800e628 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	69db      	ldr	r3, [r3, #28]
 800e58a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e58e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e592:	d149      	bne.n	800e628 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e59c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a6:	e853 3f00 	ldrex	r3, [r3]
 800e5aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e5b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5bc:	637b      	str	r3, [r7, #52]	; 0x34
 800e5be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e5c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5c4:	e841 2300 	strex	r3, r2, [r1]
 800e5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d1e6      	bne.n	800e59e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3308      	adds	r3, #8
 800e5d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	e853 3f00 	ldrex	r3, [r3]
 800e5de:	613b      	str	r3, [r7, #16]
   return(result);
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	f023 0301 	bic.w	r3, r3, #1
 800e5e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e5f0:	623a      	str	r2, [r7, #32]
 800e5f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f4:	69f9      	ldr	r1, [r7, #28]
 800e5f6:	6a3a      	ldr	r2, [r7, #32]
 800e5f8:	e841 2300 	strex	r3, r2, [r1]
 800e5fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d1e5      	bne.n	800e5d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2220      	movs	r2, #32
 800e608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2220      	movs	r2, #32
 800e610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2220      	movs	r2, #32
 800e618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e624:	2303      	movs	r3, #3
 800e626:	e010      	b.n	800e64a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	69da      	ldr	r2, [r3, #28]
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	4013      	ands	r3, r2
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	429a      	cmp	r2, r3
 800e636:	bf0c      	ite	eq
 800e638:	2301      	moveq	r3, #1
 800e63a:	2300      	movne	r3, #0
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	461a      	mov	r2, r3
 800e640:	79fb      	ldrb	r3, [r7, #7]
 800e642:	429a      	cmp	r2, r3
 800e644:	f43f af46 	beq.w	800e4d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3770      	adds	r7, #112	; 0x70
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
	...

0800e654 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b096      	sub	sp, #88	; 0x58
 800e658:	af00      	add	r7, sp, #0
 800e65a:	60f8      	str	r0, [r7, #12]
 800e65c:	60b9      	str	r1, [r7, #8]
 800e65e:	4613      	mov	r3, r2
 800e660:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	68ba      	ldr	r2, [r7, #8]
 800e666:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	88fa      	ldrh	r2, [r7, #6]
 800e66c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2200      	movs	r2, #0
 800e674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2222      	movs	r2, #34	; 0x22
 800e67c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e684:	2b00      	cmp	r3, #0
 800e686:	d02c      	beq.n	800e6e2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e68c:	4a42      	ldr	r2, [pc, #264]	; (800e798 <UART_Start_Receive_DMA+0x144>)
 800e68e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e694:	4a41      	ldr	r2, [pc, #260]	; (800e79c <UART_Start_Receive_DMA+0x148>)
 800e696:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e69c:	4a40      	ldr	r2, [pc, #256]	; (800e7a0 <UART_Start_Receive_DMA+0x14c>)
 800e69e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	3324      	adds	r3, #36	; 0x24
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	88fb      	ldrh	r3, [r7, #6]
 800e6bc:	f7f7 fea8 	bl	8006410 <HAL_DMA_Start_IT>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d00d      	beq.n	800e6e2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2210      	movs	r2, #16
 800e6ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2220      	movs	r2, #32
 800e6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e055      	b.n	800e78e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	691b      	ldr	r3, [r3, #16]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d018      	beq.n	800e724 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6fa:	e853 3f00 	ldrex	r3, [r3]
 800e6fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e706:	657b      	str	r3, [r7, #84]	; 0x54
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	461a      	mov	r2, r3
 800e70e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e710:	64bb      	str	r3, [r7, #72]	; 0x48
 800e712:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e714:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e716:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e718:	e841 2300 	strex	r3, r2, [r1]
 800e71c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e720:	2b00      	cmp	r3, #0
 800e722:	d1e6      	bne.n	800e6f2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	3308      	adds	r3, #8
 800e72a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72e:	e853 3f00 	ldrex	r3, [r3]
 800e732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e736:	f043 0301 	orr.w	r3, r3, #1
 800e73a:	653b      	str	r3, [r7, #80]	; 0x50
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	3308      	adds	r3, #8
 800e742:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e744:	637a      	str	r2, [r7, #52]	; 0x34
 800e746:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e748:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e74a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e74c:	e841 2300 	strex	r3, r2, [r1]
 800e750:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e754:	2b00      	cmp	r3, #0
 800e756:	d1e5      	bne.n	800e724 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	3308      	adds	r3, #8
 800e75e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	e853 3f00 	ldrex	r3, [r3]
 800e766:	613b      	str	r3, [r7, #16]
   return(result);
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e76e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	3308      	adds	r3, #8
 800e776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e778:	623a      	str	r2, [r7, #32]
 800e77a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e77c:	69f9      	ldr	r1, [r7, #28]
 800e77e:	6a3a      	ldr	r2, [r7, #32]
 800e780:	e841 2300 	strex	r3, r2, [r1]
 800e784:	61bb      	str	r3, [r7, #24]
   return(result);
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d1e5      	bne.n	800e758 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e78c:	2300      	movs	r3, #0
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3758      	adds	r7, #88	; 0x58
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	0800e9a7 	.word	0x0800e9a7
 800e79c:	0800eac9 	.word	0x0800eac9
 800e7a0:	0800eb01 	.word	0x0800eb01

0800e7a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b08f      	sub	sp, #60	; 0x3c
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b2:	6a3b      	ldr	r3, [r7, #32]
 800e7b4:	e853 3f00 	ldrex	r3, [r3]
 800e7b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e7c0:	637b      	str	r3, [r7, #52]	; 0x34
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7d2:	e841 2300 	strex	r3, r2, [r1]
 800e7d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d1e6      	bne.n	800e7ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	3308      	adds	r3, #8
 800e7e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	e853 3f00 	ldrex	r3, [r3]
 800e7ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e7f4:	633b      	str	r3, [r7, #48]	; 0x30
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	3308      	adds	r3, #8
 800e7fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7fe:	61ba      	str	r2, [r7, #24]
 800e800:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e802:	6979      	ldr	r1, [r7, #20]
 800e804:	69ba      	ldr	r2, [r7, #24]
 800e806:	e841 2300 	strex	r3, r2, [r1]
 800e80a:	613b      	str	r3, [r7, #16]
   return(result);
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d1e5      	bne.n	800e7de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2220      	movs	r2, #32
 800e816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e81a:	bf00      	nop
 800e81c:	373c      	adds	r7, #60	; 0x3c
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr
	...

0800e828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e828:	b480      	push	{r7}
 800e82a:	b095      	sub	sp, #84	; 0x54
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e838:	e853 3f00 	ldrex	r3, [r3]
 800e83c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e844:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	461a      	mov	r2, r3
 800e84c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e84e:	643b      	str	r3, [r7, #64]	; 0x40
 800e850:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e852:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e854:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e856:	e841 2300 	strex	r3, r2, [r1]
 800e85a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d1e6      	bne.n	800e830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	3308      	adds	r3, #8
 800e868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e86a:	6a3b      	ldr	r3, [r7, #32]
 800e86c:	e853 3f00 	ldrex	r3, [r3]
 800e870:	61fb      	str	r3, [r7, #28]
   return(result);
 800e872:	69fa      	ldr	r2, [r7, #28]
 800e874:	4b1e      	ldr	r3, [pc, #120]	; (800e8f0 <UART_EndRxTransfer+0xc8>)
 800e876:	4013      	ands	r3, r2
 800e878:	64bb      	str	r3, [r7, #72]	; 0x48
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	3308      	adds	r3, #8
 800e880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e882:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e88a:	e841 2300 	strex	r3, r2, [r1]
 800e88e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	2b00      	cmp	r3, #0
 800e894:	d1e5      	bne.n	800e862 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d118      	bne.n	800e8d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	e853 3f00 	ldrex	r3, [r3]
 800e8aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	f023 0310 	bic.w	r3, r3, #16
 800e8b2:	647b      	str	r3, [r7, #68]	; 0x44
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8bc:	61bb      	str	r3, [r7, #24]
 800e8be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c0:	6979      	ldr	r1, [r7, #20]
 800e8c2:	69ba      	ldr	r2, [r7, #24]
 800e8c4:	e841 2300 	strex	r3, r2, [r1]
 800e8c8:	613b      	str	r3, [r7, #16]
   return(result);
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1e6      	bne.n	800e89e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2220      	movs	r2, #32
 800e8d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e8e4:	bf00      	nop
 800e8e6:	3754      	adds	r7, #84	; 0x54
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr
 800e8f0:	effffffe 	.word	0xeffffffe

0800e8f4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b090      	sub	sp, #64	; 0x40
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e900:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	69db      	ldr	r3, [r3, #28]
 800e906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e90a:	d037      	beq.n	800e97c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e90e:	2200      	movs	r2, #0
 800e910:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	3308      	adds	r3, #8
 800e91a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91e:	e853 3f00 	ldrex	r3, [r3]
 800e922:	623b      	str	r3, [r7, #32]
   return(result);
 800e924:	6a3b      	ldr	r3, [r7, #32]
 800e926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e92a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	3308      	adds	r3, #8
 800e932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e934:	633a      	str	r2, [r7, #48]	; 0x30
 800e936:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e93a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e93c:	e841 2300 	strex	r3, r2, [r1]
 800e940:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e944:	2b00      	cmp	r3, #0
 800e946:	d1e5      	bne.n	800e914 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	e853 3f00 	ldrex	r3, [r3]
 800e954:	60fb      	str	r3, [r7, #12]
   return(result);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e95c:	637b      	str	r3, [r7, #52]	; 0x34
 800e95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	461a      	mov	r2, r3
 800e964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e966:	61fb      	str	r3, [r7, #28]
 800e968:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e96a:	69b9      	ldr	r1, [r7, #24]
 800e96c:	69fa      	ldr	r2, [r7, #28]
 800e96e:	e841 2300 	strex	r3, r2, [r1]
 800e972:	617b      	str	r3, [r7, #20]
   return(result);
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d1e6      	bne.n	800e948 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e97a:	e002      	b.n	800e982 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e97c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e97e:	f7f5 fb61 	bl	8004044 <HAL_UART_TxCpltCallback>
}
 800e982:	bf00      	nop
 800e984:	3740      	adds	r7, #64	; 0x40
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b084      	sub	sp, #16
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e996:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f7fe fe0f 	bl	800d5bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e99e:	bf00      	nop
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b09c      	sub	sp, #112	; 0x70
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	69db      	ldr	r3, [r3, #28]
 800e9b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9bc:	d071      	beq.n	800eaa2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e9be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9ce:	e853 3f00 	ldrex	r3, [r3]
 800e9d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e9d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9da:	66bb      	str	r3, [r7, #104]	; 0x68
 800e9dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800e9e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e9ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9ec:	e841 2300 	strex	r3, r2, [r1]
 800e9f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e9f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d1e6      	bne.n	800e9c6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	3308      	adds	r3, #8
 800e9fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea02:	e853 3f00 	ldrex	r3, [r3]
 800ea06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ea08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea0a:	f023 0301 	bic.w	r3, r3, #1
 800ea0e:	667b      	str	r3, [r7, #100]	; 0x64
 800ea10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	3308      	adds	r3, #8
 800ea16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ea18:	647a      	str	r2, [r7, #68]	; 0x44
 800ea1a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea20:	e841 2300 	strex	r3, r2, [r1]
 800ea24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d1e5      	bne.n	800e9f8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	3308      	adds	r3, #8
 800ea32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea36:	e853 3f00 	ldrex	r3, [r3]
 800ea3a:	623b      	str	r3, [r7, #32]
   return(result);
 800ea3c:	6a3b      	ldr	r3, [r7, #32]
 800ea3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea42:	663b      	str	r3, [r7, #96]	; 0x60
 800ea44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	3308      	adds	r3, #8
 800ea4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea4c:	633a      	str	r2, [r7, #48]	; 0x30
 800ea4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea54:	e841 2300 	strex	r3, r2, [r1]
 800ea58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d1e5      	bne.n	800ea2c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ea60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea62:	2220      	movs	r2, #32
 800ea64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d118      	bne.n	800eaa2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	e853 3f00 	ldrex	r3, [r3]
 800ea7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f023 0310 	bic.w	r3, r3, #16
 800ea84:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea8e:	61fb      	str	r3, [r7, #28]
 800ea90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea92:	69b9      	ldr	r1, [r7, #24]
 800ea94:	69fa      	ldr	r2, [r7, #28]
 800ea96:	e841 2300 	strex	r3, r2, [r1]
 800ea9a:	617b      	str	r3, [r7, #20]
   return(result);
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d1e6      	bne.n	800ea70 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d107      	bne.n	800eaba <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eaaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eab0:	4619      	mov	r1, r3
 800eab2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eab4:	f7fe fda0 	bl	800d5f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eab8:	e002      	b.n	800eac0 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800eaba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eabc:	f7f5 fad4 	bl	8004068 <HAL_UART_RxCpltCallback>
}
 800eac0:	bf00      	nop
 800eac2:	3770      	adds	r7, #112	; 0x70
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d109      	bne.n	800eaf2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eae4:	085b      	lsrs	r3, r3, #1
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	4619      	mov	r1, r3
 800eaea:	68f8      	ldr	r0, [r7, #12]
 800eaec:	f7fe fd84 	bl	800d5f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eaf0:	e002      	b.n	800eaf8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800eaf2:	68f8      	ldr	r0, [r7, #12]
 800eaf4:	f7fe fd6c 	bl	800d5d0 <HAL_UART_RxHalfCpltCallback>
}
 800eaf8:	bf00      	nop
 800eafa:	3710      	adds	r7, #16
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b086      	sub	sp, #24
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb0c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb14:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb1c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb28:	2b80      	cmp	r3, #128	; 0x80
 800eb2a:	d109      	bne.n	800eb40 <UART_DMAError+0x40>
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	2b21      	cmp	r3, #33	; 0x21
 800eb30:	d106      	bne.n	800eb40 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	2200      	movs	r2, #0
 800eb36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800eb3a:	6978      	ldr	r0, [r7, #20]
 800eb3c:	f7ff fe32 	bl	800e7a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb4a:	2b40      	cmp	r3, #64	; 0x40
 800eb4c:	d109      	bne.n	800eb62 <UART_DMAError+0x62>
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2b22      	cmp	r3, #34	; 0x22
 800eb52:	d106      	bne.n	800eb62 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	2200      	movs	r2, #0
 800eb58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eb5c:	6978      	ldr	r0, [r7, #20]
 800eb5e:	f7ff fe63 	bl	800e828 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb68:	f043 0210 	orr.w	r2, r3, #16
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb72:	6978      	ldr	r0, [r7, #20]
 800eb74:	f7fe fd36 	bl	800d5e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb78:	bf00      	nop
 800eb7a:	3718      	adds	r7, #24
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b084      	sub	sp, #16
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f7fe fd20 	bl	800d5e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eba4:	bf00      	nop
 800eba6:	3710      	adds	r7, #16
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b088      	sub	sp, #32
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	e853 3f00 	ldrex	r3, [r3]
 800ebc0:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebc8:	61fb      	str	r3, [r7, #28]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	461a      	mov	r2, r3
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	61bb      	str	r3, [r7, #24]
 800ebd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebd6:	6979      	ldr	r1, [r7, #20]
 800ebd8:	69ba      	ldr	r2, [r7, #24]
 800ebda:	e841 2300 	strex	r3, r2, [r1]
 800ebde:	613b      	str	r3, [r7, #16]
   return(result);
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d1e6      	bne.n	800ebb4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2220      	movs	r2, #32
 800ebea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f7f5 fa25 	bl	8004044 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebfa:	bf00      	nop
 800ebfc:	3720      	adds	r7, #32
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}

0800ec02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ec02:	b480      	push	{r7}
 800ec04:	b083      	sub	sp, #12
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ec0a:	bf00      	nop
 800ec0c:	370c      	adds	r7, #12
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr

0800ec16 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ec16:	b480      	push	{r7}
 800ec18:	b083      	sub	sp, #12
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ec1e:	bf00      	nop
 800ec20:	370c      	adds	r7, #12
 800ec22:	46bd      	mov	sp, r7
 800ec24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec28:	4770      	bx	lr

0800ec2a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ec2a:	b480      	push	{r7}
 800ec2c:	b083      	sub	sp, #12
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ec32:	bf00      	nop
 800ec34:	370c      	adds	r7, #12
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr

0800ec3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ec3e:	b480      	push	{r7}
 800ec40:	b085      	sub	sp, #20
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d101      	bne.n	800ec54 <HAL_UARTEx_DisableFifoMode+0x16>
 800ec50:	2302      	movs	r3, #2
 800ec52:	e027      	b.n	800eca4 <HAL_UARTEx_DisableFifoMode+0x66>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2201      	movs	r2, #1
 800ec58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2224      	movs	r2, #36	; 0x24
 800ec60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f022 0201 	bic.w	r2, r2, #1
 800ec7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ec82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	68fa      	ldr	r2, [r7, #12]
 800ec90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2220      	movs	r2, #32
 800ec96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eca2:	2300      	movs	r3, #0
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3714      	adds	r7, #20
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d101      	bne.n	800ecc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ecc4:	2302      	movs	r3, #2
 800ecc6:	e02d      	b.n	800ed24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2201      	movs	r2, #1
 800eccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2224      	movs	r2, #36	; 0x24
 800ecd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f022 0201 	bic.w	r2, r2, #1
 800ecee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	689b      	ldr	r3, [r3, #8]
 800ecf6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	683a      	ldr	r2, [r7, #0]
 800ed00:	430a      	orrs	r2, r1
 800ed02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f000 f84f 	bl	800eda8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	68fa      	ldr	r2, [r7, #12]
 800ed10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2220      	movs	r2, #32
 800ed16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed22:	2300      	movs	r3, #0
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3710      	adds	r7, #16
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed3c:	2b01      	cmp	r3, #1
 800ed3e:	d101      	bne.n	800ed44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ed40:	2302      	movs	r3, #2
 800ed42:	e02d      	b.n	800eda0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2201      	movs	r2, #1
 800ed48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2224      	movs	r2, #36	; 0x24
 800ed50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f022 0201 	bic.w	r2, r2, #1
 800ed6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	689b      	ldr	r3, [r3, #8]
 800ed72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	430a      	orrs	r2, r1
 800ed7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f000 f811 	bl	800eda8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2220      	movs	r2, #32
 800ed92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed9e:	2300      	movs	r3, #0
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3710      	adds	r7, #16
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b085      	sub	sp, #20
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d108      	bne.n	800edca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800edc8:	e031      	b.n	800ee2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800edca:	2310      	movs	r3, #16
 800edcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800edce:	2310      	movs	r3, #16
 800edd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	689b      	ldr	r3, [r3, #8]
 800edd8:	0e5b      	lsrs	r3, r3, #25
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	f003 0307 	and.w	r3, r3, #7
 800ede0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	689b      	ldr	r3, [r3, #8]
 800ede8:	0f5b      	lsrs	r3, r3, #29
 800edea:	b2db      	uxtb	r3, r3
 800edec:	f003 0307 	and.w	r3, r3, #7
 800edf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800edf2:	7bbb      	ldrb	r3, [r7, #14]
 800edf4:	7b3a      	ldrb	r2, [r7, #12]
 800edf6:	4911      	ldr	r1, [pc, #68]	; (800ee3c <UARTEx_SetNbDataToProcess+0x94>)
 800edf8:	5c8a      	ldrb	r2, [r1, r2]
 800edfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800edfe:	7b3a      	ldrb	r2, [r7, #12]
 800ee00:	490f      	ldr	r1, [pc, #60]	; (800ee40 <UARTEx_SetNbDataToProcess+0x98>)
 800ee02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee04:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee10:	7bfb      	ldrb	r3, [r7, #15]
 800ee12:	7b7a      	ldrb	r2, [r7, #13]
 800ee14:	4909      	ldr	r1, [pc, #36]	; (800ee3c <UARTEx_SetNbDataToProcess+0x94>)
 800ee16:	5c8a      	ldrb	r2, [r1, r2]
 800ee18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ee1c:	7b7a      	ldrb	r2, [r7, #13]
 800ee1e:	4908      	ldr	r1, [pc, #32]	; (800ee40 <UARTEx_SetNbDataToProcess+0x98>)
 800ee20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee22:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee26:	b29a      	uxth	r2, r3
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ee2e:	bf00      	nop
 800ee30:	3714      	adds	r7, #20
 800ee32:	46bd      	mov	sp, r7
 800ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee38:	4770      	bx	lr
 800ee3a:	bf00      	nop
 800ee3c:	0800f570 	.word	0x0800f570
 800ee40:	0800f578 	.word	0x0800f578

0800ee44 <__cxa_pure_virtual>:
 800ee44:	b508      	push	{r3, lr}
 800ee46:	f000 f80d 	bl	800ee64 <_ZSt9terminatev>

0800ee4a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ee4a:	b508      	push	{r3, lr}
 800ee4c:	4780      	blx	r0
 800ee4e:	f000 f80e 	bl	800ee6e <abort>
	...

0800ee54 <_ZSt13get_terminatev>:
 800ee54:	4b02      	ldr	r3, [pc, #8]	; (800ee60 <_ZSt13get_terminatev+0xc>)
 800ee56:	6818      	ldr	r0, [r3, #0]
 800ee58:	f3bf 8f5b 	dmb	ish
 800ee5c:	4770      	bx	lr
 800ee5e:	bf00      	nop
 800ee60:	24000010 	.word	0x24000010

0800ee64 <_ZSt9terminatev>:
 800ee64:	b508      	push	{r3, lr}
 800ee66:	f7ff fff5 	bl	800ee54 <_ZSt13get_terminatev>
 800ee6a:	f7ff ffee 	bl	800ee4a <_ZN10__cxxabiv111__terminateEPFvvE>

0800ee6e <abort>:
 800ee6e:	b508      	push	{r3, lr}
 800ee70:	2006      	movs	r0, #6
 800ee72:	f000 f873 	bl	800ef5c <raise>
 800ee76:	2001      	movs	r0, #1
 800ee78:	f7f6 fcec 	bl	8005854 <_exit>

0800ee7c <__errno>:
 800ee7c:	4b01      	ldr	r3, [pc, #4]	; (800ee84 <__errno+0x8>)
 800ee7e:	6818      	ldr	r0, [r3, #0]
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	24000014 	.word	0x24000014

0800ee88 <__libc_init_array>:
 800ee88:	b570      	push	{r4, r5, r6, lr}
 800ee8a:	4d0d      	ldr	r5, [pc, #52]	; (800eec0 <__libc_init_array+0x38>)
 800ee8c:	4c0d      	ldr	r4, [pc, #52]	; (800eec4 <__libc_init_array+0x3c>)
 800ee8e:	1b64      	subs	r4, r4, r5
 800ee90:	10a4      	asrs	r4, r4, #2
 800ee92:	2600      	movs	r6, #0
 800ee94:	42a6      	cmp	r6, r4
 800ee96:	d109      	bne.n	800eeac <__libc_init_array+0x24>
 800ee98:	4d0b      	ldr	r5, [pc, #44]	; (800eec8 <__libc_init_array+0x40>)
 800ee9a:	4c0c      	ldr	r4, [pc, #48]	; (800eecc <__libc_init_array+0x44>)
 800ee9c:	f000 f9b0 	bl	800f200 <_init>
 800eea0:	1b64      	subs	r4, r4, r5
 800eea2:	10a4      	asrs	r4, r4, #2
 800eea4:	2600      	movs	r6, #0
 800eea6:	42a6      	cmp	r6, r4
 800eea8:	d105      	bne.n	800eeb6 <__libc_init_array+0x2e>
 800eeaa:	bd70      	pop	{r4, r5, r6, pc}
 800eeac:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeb0:	4798      	blx	r3
 800eeb2:	3601      	adds	r6, #1
 800eeb4:	e7ee      	b.n	800ee94 <__libc_init_array+0xc>
 800eeb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeba:	4798      	blx	r3
 800eebc:	3601      	adds	r6, #1
 800eebe:	e7f2      	b.n	800eea6 <__libc_init_array+0x1e>
 800eec0:	0800f588 	.word	0x0800f588
 800eec4:	0800f588 	.word	0x0800f588
 800eec8:	0800f588 	.word	0x0800f588
 800eecc:	0800f590 	.word	0x0800f590

0800eed0 <memcpy>:
 800eed0:	440a      	add	r2, r1
 800eed2:	4291      	cmp	r1, r2
 800eed4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800eed8:	d100      	bne.n	800eedc <memcpy+0xc>
 800eeda:	4770      	bx	lr
 800eedc:	b510      	push	{r4, lr}
 800eede:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eee6:	4291      	cmp	r1, r2
 800eee8:	d1f9      	bne.n	800eede <memcpy+0xe>
 800eeea:	bd10      	pop	{r4, pc}

0800eeec <memset>:
 800eeec:	4402      	add	r2, r0
 800eeee:	4603      	mov	r3, r0
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d100      	bne.n	800eef6 <memset+0xa>
 800eef4:	4770      	bx	lr
 800eef6:	f803 1b01 	strb.w	r1, [r3], #1
 800eefa:	e7f9      	b.n	800eef0 <memset+0x4>

0800eefc <realloc>:
 800eefc:	4b02      	ldr	r3, [pc, #8]	; (800ef08 <realloc+0xc>)
 800eefe:	460a      	mov	r2, r1
 800ef00:	4601      	mov	r1, r0
 800ef02:	6818      	ldr	r0, [r3, #0]
 800ef04:	f000 b8da 	b.w	800f0bc <_realloc_r>
 800ef08:	24000014 	.word	0x24000014

0800ef0c <_raise_r>:
 800ef0c:	291f      	cmp	r1, #31
 800ef0e:	b538      	push	{r3, r4, r5, lr}
 800ef10:	4604      	mov	r4, r0
 800ef12:	460d      	mov	r5, r1
 800ef14:	d904      	bls.n	800ef20 <_raise_r+0x14>
 800ef16:	2316      	movs	r3, #22
 800ef18:	6003      	str	r3, [r0, #0]
 800ef1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef1e:	bd38      	pop	{r3, r4, r5, pc}
 800ef20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef22:	b112      	cbz	r2, 800ef2a <_raise_r+0x1e>
 800ef24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef28:	b94b      	cbnz	r3, 800ef3e <_raise_r+0x32>
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	f000 f830 	bl	800ef90 <_getpid_r>
 800ef30:	462a      	mov	r2, r5
 800ef32:	4601      	mov	r1, r0
 800ef34:	4620      	mov	r0, r4
 800ef36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef3a:	f000 b817 	b.w	800ef6c <_kill_r>
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d00a      	beq.n	800ef58 <_raise_r+0x4c>
 800ef42:	1c59      	adds	r1, r3, #1
 800ef44:	d103      	bne.n	800ef4e <_raise_r+0x42>
 800ef46:	2316      	movs	r3, #22
 800ef48:	6003      	str	r3, [r0, #0]
 800ef4a:	2001      	movs	r0, #1
 800ef4c:	e7e7      	b.n	800ef1e <_raise_r+0x12>
 800ef4e:	2400      	movs	r4, #0
 800ef50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef54:	4628      	mov	r0, r5
 800ef56:	4798      	blx	r3
 800ef58:	2000      	movs	r0, #0
 800ef5a:	e7e0      	b.n	800ef1e <_raise_r+0x12>

0800ef5c <raise>:
 800ef5c:	4b02      	ldr	r3, [pc, #8]	; (800ef68 <raise+0xc>)
 800ef5e:	4601      	mov	r1, r0
 800ef60:	6818      	ldr	r0, [r3, #0]
 800ef62:	f7ff bfd3 	b.w	800ef0c <_raise_r>
 800ef66:	bf00      	nop
 800ef68:	24000014 	.word	0x24000014

0800ef6c <_kill_r>:
 800ef6c:	b538      	push	{r3, r4, r5, lr}
 800ef6e:	4d07      	ldr	r5, [pc, #28]	; (800ef8c <_kill_r+0x20>)
 800ef70:	2300      	movs	r3, #0
 800ef72:	4604      	mov	r4, r0
 800ef74:	4608      	mov	r0, r1
 800ef76:	4611      	mov	r1, r2
 800ef78:	602b      	str	r3, [r5, #0]
 800ef7a:	f7f6 fc5b 	bl	8005834 <_kill>
 800ef7e:	1c43      	adds	r3, r0, #1
 800ef80:	d102      	bne.n	800ef88 <_kill_r+0x1c>
 800ef82:	682b      	ldr	r3, [r5, #0]
 800ef84:	b103      	cbz	r3, 800ef88 <_kill_r+0x1c>
 800ef86:	6023      	str	r3, [r4, #0]
 800ef88:	bd38      	pop	{r3, r4, r5, pc}
 800ef8a:	bf00      	nop
 800ef8c:	24001cf8 	.word	0x24001cf8

0800ef90 <_getpid_r>:
 800ef90:	f7f6 bc48 	b.w	8005824 <_getpid>

0800ef94 <sbrk_aligned>:
 800ef94:	b570      	push	{r4, r5, r6, lr}
 800ef96:	4e0e      	ldr	r6, [pc, #56]	; (800efd0 <sbrk_aligned+0x3c>)
 800ef98:	460c      	mov	r4, r1
 800ef9a:	6831      	ldr	r1, [r6, #0]
 800ef9c:	4605      	mov	r5, r0
 800ef9e:	b911      	cbnz	r1, 800efa6 <sbrk_aligned+0x12>
 800efa0:	f000 f8bc 	bl	800f11c <_sbrk_r>
 800efa4:	6030      	str	r0, [r6, #0]
 800efa6:	4621      	mov	r1, r4
 800efa8:	4628      	mov	r0, r5
 800efaa:	f000 f8b7 	bl	800f11c <_sbrk_r>
 800efae:	1c43      	adds	r3, r0, #1
 800efb0:	d00a      	beq.n	800efc8 <sbrk_aligned+0x34>
 800efb2:	1cc4      	adds	r4, r0, #3
 800efb4:	f024 0403 	bic.w	r4, r4, #3
 800efb8:	42a0      	cmp	r0, r4
 800efba:	d007      	beq.n	800efcc <sbrk_aligned+0x38>
 800efbc:	1a21      	subs	r1, r4, r0
 800efbe:	4628      	mov	r0, r5
 800efc0:	f000 f8ac 	bl	800f11c <_sbrk_r>
 800efc4:	3001      	adds	r0, #1
 800efc6:	d101      	bne.n	800efcc <sbrk_aligned+0x38>
 800efc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800efcc:	4620      	mov	r0, r4
 800efce:	bd70      	pop	{r4, r5, r6, pc}
 800efd0:	24001cf4 	.word	0x24001cf4

0800efd4 <_malloc_r>:
 800efd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efd8:	1ccd      	adds	r5, r1, #3
 800efda:	f025 0503 	bic.w	r5, r5, #3
 800efde:	3508      	adds	r5, #8
 800efe0:	2d0c      	cmp	r5, #12
 800efe2:	bf38      	it	cc
 800efe4:	250c      	movcc	r5, #12
 800efe6:	2d00      	cmp	r5, #0
 800efe8:	4607      	mov	r7, r0
 800efea:	db01      	blt.n	800eff0 <_malloc_r+0x1c>
 800efec:	42a9      	cmp	r1, r5
 800efee:	d905      	bls.n	800effc <_malloc_r+0x28>
 800eff0:	230c      	movs	r3, #12
 800eff2:	603b      	str	r3, [r7, #0]
 800eff4:	2600      	movs	r6, #0
 800eff6:	4630      	mov	r0, r6
 800eff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800effc:	4e2e      	ldr	r6, [pc, #184]	; (800f0b8 <_malloc_r+0xe4>)
 800effe:	f000 f89d 	bl	800f13c <__malloc_lock>
 800f002:	6833      	ldr	r3, [r6, #0]
 800f004:	461c      	mov	r4, r3
 800f006:	bb34      	cbnz	r4, 800f056 <_malloc_r+0x82>
 800f008:	4629      	mov	r1, r5
 800f00a:	4638      	mov	r0, r7
 800f00c:	f7ff ffc2 	bl	800ef94 <sbrk_aligned>
 800f010:	1c43      	adds	r3, r0, #1
 800f012:	4604      	mov	r4, r0
 800f014:	d14d      	bne.n	800f0b2 <_malloc_r+0xde>
 800f016:	6834      	ldr	r4, [r6, #0]
 800f018:	4626      	mov	r6, r4
 800f01a:	2e00      	cmp	r6, #0
 800f01c:	d140      	bne.n	800f0a0 <_malloc_r+0xcc>
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	4631      	mov	r1, r6
 800f022:	4638      	mov	r0, r7
 800f024:	eb04 0803 	add.w	r8, r4, r3
 800f028:	f000 f878 	bl	800f11c <_sbrk_r>
 800f02c:	4580      	cmp	r8, r0
 800f02e:	d13a      	bne.n	800f0a6 <_malloc_r+0xd2>
 800f030:	6821      	ldr	r1, [r4, #0]
 800f032:	3503      	adds	r5, #3
 800f034:	1a6d      	subs	r5, r5, r1
 800f036:	f025 0503 	bic.w	r5, r5, #3
 800f03a:	3508      	adds	r5, #8
 800f03c:	2d0c      	cmp	r5, #12
 800f03e:	bf38      	it	cc
 800f040:	250c      	movcc	r5, #12
 800f042:	4629      	mov	r1, r5
 800f044:	4638      	mov	r0, r7
 800f046:	f7ff ffa5 	bl	800ef94 <sbrk_aligned>
 800f04a:	3001      	adds	r0, #1
 800f04c:	d02b      	beq.n	800f0a6 <_malloc_r+0xd2>
 800f04e:	6823      	ldr	r3, [r4, #0]
 800f050:	442b      	add	r3, r5
 800f052:	6023      	str	r3, [r4, #0]
 800f054:	e00e      	b.n	800f074 <_malloc_r+0xa0>
 800f056:	6822      	ldr	r2, [r4, #0]
 800f058:	1b52      	subs	r2, r2, r5
 800f05a:	d41e      	bmi.n	800f09a <_malloc_r+0xc6>
 800f05c:	2a0b      	cmp	r2, #11
 800f05e:	d916      	bls.n	800f08e <_malloc_r+0xba>
 800f060:	1961      	adds	r1, r4, r5
 800f062:	42a3      	cmp	r3, r4
 800f064:	6025      	str	r5, [r4, #0]
 800f066:	bf18      	it	ne
 800f068:	6059      	strne	r1, [r3, #4]
 800f06a:	6863      	ldr	r3, [r4, #4]
 800f06c:	bf08      	it	eq
 800f06e:	6031      	streq	r1, [r6, #0]
 800f070:	5162      	str	r2, [r4, r5]
 800f072:	604b      	str	r3, [r1, #4]
 800f074:	4638      	mov	r0, r7
 800f076:	f104 060b 	add.w	r6, r4, #11
 800f07a:	f000 f865 	bl	800f148 <__malloc_unlock>
 800f07e:	f026 0607 	bic.w	r6, r6, #7
 800f082:	1d23      	adds	r3, r4, #4
 800f084:	1af2      	subs	r2, r6, r3
 800f086:	d0b6      	beq.n	800eff6 <_malloc_r+0x22>
 800f088:	1b9b      	subs	r3, r3, r6
 800f08a:	50a3      	str	r3, [r4, r2]
 800f08c:	e7b3      	b.n	800eff6 <_malloc_r+0x22>
 800f08e:	6862      	ldr	r2, [r4, #4]
 800f090:	42a3      	cmp	r3, r4
 800f092:	bf0c      	ite	eq
 800f094:	6032      	streq	r2, [r6, #0]
 800f096:	605a      	strne	r2, [r3, #4]
 800f098:	e7ec      	b.n	800f074 <_malloc_r+0xa0>
 800f09a:	4623      	mov	r3, r4
 800f09c:	6864      	ldr	r4, [r4, #4]
 800f09e:	e7b2      	b.n	800f006 <_malloc_r+0x32>
 800f0a0:	4634      	mov	r4, r6
 800f0a2:	6876      	ldr	r6, [r6, #4]
 800f0a4:	e7b9      	b.n	800f01a <_malloc_r+0x46>
 800f0a6:	230c      	movs	r3, #12
 800f0a8:	603b      	str	r3, [r7, #0]
 800f0aa:	4638      	mov	r0, r7
 800f0ac:	f000 f84c 	bl	800f148 <__malloc_unlock>
 800f0b0:	e7a1      	b.n	800eff6 <_malloc_r+0x22>
 800f0b2:	6025      	str	r5, [r4, #0]
 800f0b4:	e7de      	b.n	800f074 <_malloc_r+0xa0>
 800f0b6:	bf00      	nop
 800f0b8:	24001cf0 	.word	0x24001cf0

0800f0bc <_realloc_r>:
 800f0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c0:	4680      	mov	r8, r0
 800f0c2:	4614      	mov	r4, r2
 800f0c4:	460e      	mov	r6, r1
 800f0c6:	b921      	cbnz	r1, 800f0d2 <_realloc_r+0x16>
 800f0c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0cc:	4611      	mov	r1, r2
 800f0ce:	f7ff bf81 	b.w	800efd4 <_malloc_r>
 800f0d2:	b92a      	cbnz	r2, 800f0e0 <_realloc_r+0x24>
 800f0d4:	f000 f83e 	bl	800f154 <_free_r>
 800f0d8:	4625      	mov	r5, r4
 800f0da:	4628      	mov	r0, r5
 800f0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0e0:	f000 f884 	bl	800f1ec <_malloc_usable_size_r>
 800f0e4:	4284      	cmp	r4, r0
 800f0e6:	4607      	mov	r7, r0
 800f0e8:	d802      	bhi.n	800f0f0 <_realloc_r+0x34>
 800f0ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f0ee:	d812      	bhi.n	800f116 <_realloc_r+0x5a>
 800f0f0:	4621      	mov	r1, r4
 800f0f2:	4640      	mov	r0, r8
 800f0f4:	f7ff ff6e 	bl	800efd4 <_malloc_r>
 800f0f8:	4605      	mov	r5, r0
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d0ed      	beq.n	800f0da <_realloc_r+0x1e>
 800f0fe:	42bc      	cmp	r4, r7
 800f100:	4622      	mov	r2, r4
 800f102:	4631      	mov	r1, r6
 800f104:	bf28      	it	cs
 800f106:	463a      	movcs	r2, r7
 800f108:	f7ff fee2 	bl	800eed0 <memcpy>
 800f10c:	4631      	mov	r1, r6
 800f10e:	4640      	mov	r0, r8
 800f110:	f000 f820 	bl	800f154 <_free_r>
 800f114:	e7e1      	b.n	800f0da <_realloc_r+0x1e>
 800f116:	4635      	mov	r5, r6
 800f118:	e7df      	b.n	800f0da <_realloc_r+0x1e>
	...

0800f11c <_sbrk_r>:
 800f11c:	b538      	push	{r3, r4, r5, lr}
 800f11e:	4d06      	ldr	r5, [pc, #24]	; (800f138 <_sbrk_r+0x1c>)
 800f120:	2300      	movs	r3, #0
 800f122:	4604      	mov	r4, r0
 800f124:	4608      	mov	r0, r1
 800f126:	602b      	str	r3, [r5, #0]
 800f128:	f7f6 fb9e 	bl	8005868 <_sbrk>
 800f12c:	1c43      	adds	r3, r0, #1
 800f12e:	d102      	bne.n	800f136 <_sbrk_r+0x1a>
 800f130:	682b      	ldr	r3, [r5, #0]
 800f132:	b103      	cbz	r3, 800f136 <_sbrk_r+0x1a>
 800f134:	6023      	str	r3, [r4, #0]
 800f136:	bd38      	pop	{r3, r4, r5, pc}
 800f138:	24001cf8 	.word	0x24001cf8

0800f13c <__malloc_lock>:
 800f13c:	4801      	ldr	r0, [pc, #4]	; (800f144 <__malloc_lock+0x8>)
 800f13e:	f000 b85d 	b.w	800f1fc <__retarget_lock_acquire_recursive>
 800f142:	bf00      	nop
 800f144:	24001cfc 	.word	0x24001cfc

0800f148 <__malloc_unlock>:
 800f148:	4801      	ldr	r0, [pc, #4]	; (800f150 <__malloc_unlock+0x8>)
 800f14a:	f000 b858 	b.w	800f1fe <__retarget_lock_release_recursive>
 800f14e:	bf00      	nop
 800f150:	24001cfc 	.word	0x24001cfc

0800f154 <_free_r>:
 800f154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f156:	2900      	cmp	r1, #0
 800f158:	d044      	beq.n	800f1e4 <_free_r+0x90>
 800f15a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f15e:	9001      	str	r0, [sp, #4]
 800f160:	2b00      	cmp	r3, #0
 800f162:	f1a1 0404 	sub.w	r4, r1, #4
 800f166:	bfb8      	it	lt
 800f168:	18e4      	addlt	r4, r4, r3
 800f16a:	f7ff ffe7 	bl	800f13c <__malloc_lock>
 800f16e:	4a1e      	ldr	r2, [pc, #120]	; (800f1e8 <_free_r+0x94>)
 800f170:	9801      	ldr	r0, [sp, #4]
 800f172:	6813      	ldr	r3, [r2, #0]
 800f174:	b933      	cbnz	r3, 800f184 <_free_r+0x30>
 800f176:	6063      	str	r3, [r4, #4]
 800f178:	6014      	str	r4, [r2, #0]
 800f17a:	b003      	add	sp, #12
 800f17c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f180:	f7ff bfe2 	b.w	800f148 <__malloc_unlock>
 800f184:	42a3      	cmp	r3, r4
 800f186:	d908      	bls.n	800f19a <_free_r+0x46>
 800f188:	6825      	ldr	r5, [r4, #0]
 800f18a:	1961      	adds	r1, r4, r5
 800f18c:	428b      	cmp	r3, r1
 800f18e:	bf01      	itttt	eq
 800f190:	6819      	ldreq	r1, [r3, #0]
 800f192:	685b      	ldreq	r3, [r3, #4]
 800f194:	1949      	addeq	r1, r1, r5
 800f196:	6021      	streq	r1, [r4, #0]
 800f198:	e7ed      	b.n	800f176 <_free_r+0x22>
 800f19a:	461a      	mov	r2, r3
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	b10b      	cbz	r3, 800f1a4 <_free_r+0x50>
 800f1a0:	42a3      	cmp	r3, r4
 800f1a2:	d9fa      	bls.n	800f19a <_free_r+0x46>
 800f1a4:	6811      	ldr	r1, [r2, #0]
 800f1a6:	1855      	adds	r5, r2, r1
 800f1a8:	42a5      	cmp	r5, r4
 800f1aa:	d10b      	bne.n	800f1c4 <_free_r+0x70>
 800f1ac:	6824      	ldr	r4, [r4, #0]
 800f1ae:	4421      	add	r1, r4
 800f1b0:	1854      	adds	r4, r2, r1
 800f1b2:	42a3      	cmp	r3, r4
 800f1b4:	6011      	str	r1, [r2, #0]
 800f1b6:	d1e0      	bne.n	800f17a <_free_r+0x26>
 800f1b8:	681c      	ldr	r4, [r3, #0]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	6053      	str	r3, [r2, #4]
 800f1be:	4421      	add	r1, r4
 800f1c0:	6011      	str	r1, [r2, #0]
 800f1c2:	e7da      	b.n	800f17a <_free_r+0x26>
 800f1c4:	d902      	bls.n	800f1cc <_free_r+0x78>
 800f1c6:	230c      	movs	r3, #12
 800f1c8:	6003      	str	r3, [r0, #0]
 800f1ca:	e7d6      	b.n	800f17a <_free_r+0x26>
 800f1cc:	6825      	ldr	r5, [r4, #0]
 800f1ce:	1961      	adds	r1, r4, r5
 800f1d0:	428b      	cmp	r3, r1
 800f1d2:	bf04      	itt	eq
 800f1d4:	6819      	ldreq	r1, [r3, #0]
 800f1d6:	685b      	ldreq	r3, [r3, #4]
 800f1d8:	6063      	str	r3, [r4, #4]
 800f1da:	bf04      	itt	eq
 800f1dc:	1949      	addeq	r1, r1, r5
 800f1de:	6021      	streq	r1, [r4, #0]
 800f1e0:	6054      	str	r4, [r2, #4]
 800f1e2:	e7ca      	b.n	800f17a <_free_r+0x26>
 800f1e4:	b003      	add	sp, #12
 800f1e6:	bd30      	pop	{r4, r5, pc}
 800f1e8:	24001cf0 	.word	0x24001cf0

0800f1ec <_malloc_usable_size_r>:
 800f1ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1f0:	1f18      	subs	r0, r3, #4
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	bfbc      	itt	lt
 800f1f6:	580b      	ldrlt	r3, [r1, r0]
 800f1f8:	18c0      	addlt	r0, r0, r3
 800f1fa:	4770      	bx	lr

0800f1fc <__retarget_lock_acquire_recursive>:
 800f1fc:	4770      	bx	lr

0800f1fe <__retarget_lock_release_recursive>:
 800f1fe:	4770      	bx	lr

0800f200 <_init>:
 800f200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f202:	bf00      	nop
 800f204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f206:	bc08      	pop	{r3}
 800f208:	469e      	mov	lr, r3
 800f20a:	4770      	bx	lr

0800f20c <_fini>:
 800f20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f20e:	bf00      	nop
 800f210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f212:	bc08      	pop	{r3}
 800f214:	469e      	mov	lr, r3
 800f216:	4770      	bx	lr
