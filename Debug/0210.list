
0210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef0c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800f1dc  0800f1dc  0001f1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f544  0800f544  0001f544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f54c  0800f54c  0001f54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f554  0800f554  0001f554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c88  24000078  0800f5d0  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001d00  0800f5d0  00021d00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001faad  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032a1  00000000  00000000  0003fb53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  00042df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c8  00000000  00000000  000442b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034db1  00000000  00000000  00045678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a633  00000000  00000000  0007a429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153ff4  00000000  00000000  00094a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e8a50  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d94  00000000  00000000  001e8aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f1c4 	.word	0x0800f1c4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f1c4 	.word	0x0800f1c4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PV1 = 0, PV2 = 0, PV3 = 0, PV4 = 0;
 8000684:	49b0      	ldr	r1, [pc, #704]	; (8000948 <main+0x2c8>)
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c1 2300 	strd	r2, r3, [r1]
 8000692:	49ae      	ldr	r1, [pc, #696]	; (800094c <main+0x2cc>)
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c1 2300 	strd	r2, r3, [r1]
 80006a0:	49ab      	ldr	r1, [pc, #684]	; (8000950 <main+0x2d0>)
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e9c1 2300 	strd	r2, r3, [r1]
 80006ae:	49a9      	ldr	r1, [pc, #676]	; (8000954 <main+0x2d4>)
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	f04f 0300 	mov.w	r3, #0
 80006b8:	e9c1 2300 	strd	r2, r3, [r1]
	SP1 = 0, SP2 = 0, SP3 = 0, SP4 = 0;
 80006bc:	49a6      	ldr	r1, [pc, #664]	; (8000958 <main+0x2d8>)
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
 80006ca:	49a4      	ldr	r1, [pc, #656]	; (800095c <main+0x2dc>)
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c1 2300 	strd	r2, r3, [r1]
 80006d8:	49a1      	ldr	r1, [pc, #644]	; (8000960 <main+0x2e0>)
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
 80006e6:	499f      	ldr	r1, [pc, #636]	; (8000964 <main+0x2e4>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]

	n = 0;
 80006f4:	4b9c      	ldr	r3, [pc, #624]	; (8000968 <main+0x2e8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	kkk = 0;
 80006fa:	4b9c      	ldr	r3, [pc, #624]	; (800096c <main+0x2ec>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
	count = 0;
 8000700:	4b9b      	ldr	r3, [pc, #620]	; (8000970 <main+0x2f0>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	error1 = PV1 - SP1;
 8000706:	4b90      	ldr	r3, [pc, #576]	; (8000948 <main+0x2c8>)
 8000708:	ed93 6b00 	vldr	d6, [r3]
 800070c:	4b92      	ldr	r3, [pc, #584]	; (8000958 <main+0x2d8>)
 800070e:	ed93 7b00 	vldr	d7, [r3]
 8000712:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000716:	4b97      	ldr	r3, [pc, #604]	; (8000974 <main+0x2f4>)
 8000718:	ed83 7b00 	vstr	d7, [r3]
	error2 = PV2 - SP2;
 800071c:	4b8b      	ldr	r3, [pc, #556]	; (800094c <main+0x2cc>)
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	4b8e      	ldr	r3, [pc, #568]	; (800095c <main+0x2dc>)
 8000724:	ed93 7b00 	vldr	d7, [r3]
 8000728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072c:	4b92      	ldr	r3, [pc, #584]	; (8000978 <main+0x2f8>)
 800072e:	ed83 7b00 	vstr	d7, [r3]
	error3 = PV3 - SP3;
 8000732:	4b87      	ldr	r3, [pc, #540]	; (8000950 <main+0x2d0>)
 8000734:	ed93 6b00 	vldr	d6, [r3]
 8000738:	4b89      	ldr	r3, [pc, #548]	; (8000960 <main+0x2e0>)
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000742:	4b8e      	ldr	r3, [pc, #568]	; (800097c <main+0x2fc>)
 8000744:	ed83 7b00 	vstr	d7, [r3]
	error4 = PV4 - SP4;
 8000748:	4b82      	ldr	r3, [pc, #520]	; (8000954 <main+0x2d4>)
 800074a:	ed93 6b00 	vldr	d6, [r3]
 800074e:	4b85      	ldr	r3, [pc, #532]	; (8000964 <main+0x2e4>)
 8000750:	ed93 7b00 	vldr	d7, [r3]
 8000754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000758:	4b89      	ldr	r3, [pc, #548]	; (8000980 <main+0x300>)
 800075a:	ed83 7b00 	vstr	d7, [r3]
	enc1 = 0, enc2 = 0, enc3 = 0, enc4 = 0;
 800075e:	4b89      	ldr	r3, [pc, #548]	; (8000984 <main+0x304>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	4b88      	ldr	r3, [pc, #544]	; (8000988 <main+0x308>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	4b88      	ldr	r3, [pc, #544]	; (800098c <main+0x30c>)
 800076c:	2200      	movs	r2, #0
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	4b87      	ldr	r3, [pc, #540]	; (8000990 <main+0x310>)
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]

	Kp1 = 1.314238; // blue
 8000776:	4987      	ldr	r1, [pc, #540]	; (8000994 <main+0x314>)
 8000778:	a36b      	add	r3, pc, #428	; (adr r3, 8000928 <main+0x2a8>)
 800077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 = 37.12271; // blue
 8000782:	4985      	ldr	r1, [pc, #532]	; (8000998 <main+0x318>)
 8000784:	a36a      	add	r3, pc, #424	; (adr r3, 8000930 <main+0x2b0>)
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 = 1.8217; // purple
 800078e:	4983      	ldr	r1, [pc, #524]	; (800099c <main+0x31c>)
 8000790:	a369      	add	r3, pc, #420	; (adr r3, 8000938 <main+0x2b8>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 = 48.293; // purple
 800079a:	4981      	ldr	r1, [pc, #516]	; (80009a0 <main+0x320>)
 800079c:	a368      	add	r3, pc, #416	; (adr r3, 8000940 <main+0x2c0>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	e9c1 2300 	strd	r2, r3, [r1]
	Kp3 = 1;
 80007a6:	497f      	ldr	r1, [pc, #508]	; (80009a4 <main+0x324>)
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	4b7e      	ldr	r3, [pc, #504]	; (80009a8 <main+0x328>)
 80007ae:	e9c1 2300 	strd	r2, r3, [r1]
	Ki3 = 30;
 80007b2:	497e      	ldr	r1, [pc, #504]	; (80009ac <main+0x32c>)
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	4b7d      	ldr	r3, [pc, #500]	; (80009b0 <main+0x330>)
 80007ba:	e9c1 2300 	strd	r2, r3, [r1]
	Kp4 = 1;
 80007be:	497d      	ldr	r1, [pc, #500]	; (80009b4 <main+0x334>)
 80007c0:	f04f 0200 	mov.w	r2, #0
 80007c4:	4b78      	ldr	r3, [pc, #480]	; (80009a8 <main+0x328>)
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
	Ki4 = 30;
 80007ca:	497b      	ldr	r1, [pc, #492]	; (80009b8 <main+0x338>)
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	4b77      	ldr	r3, [pc, #476]	; (80009b0 <main+0x330>)
 80007d2:	e9c1 2300 	strd	r2, r3, [r1]

	error_last1 = 0;
 80007d6:	4979      	ldr	r1, [pc, #484]	; (80009bc <main+0x33c>)
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c1 2300 	strd	r2, r3, [r1]
	error_last2 = 0;
 80007e4:	4976      	ldr	r1, [pc, #472]	; (80009c0 <main+0x340>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9c1 2300 	strd	r2, r3, [r1]
	error_last3 = 0;
 80007f2:	4974      	ldr	r1, [pc, #464]	; (80009c4 <main+0x344>)
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c1 2300 	strd	r2, r3, [r1]
	error_last4 = 0;
 8000800:	4971      	ldr	r1, [pc, #452]	; (80009c8 <main+0x348>)
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c1 2300 	strd	r2, r3, [r1]

	errorsum1 = 0;
 800080e:	496f      	ldr	r1, [pc, #444]	; (80009cc <main+0x34c>)
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum2 = 0;
 800081c:	496c      	ldr	r1, [pc, #432]	; (80009d0 <main+0x350>)
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum3 = 0;
 800082a:	496a      	ldr	r1, [pc, #424]	; (80009d4 <main+0x354>)
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum4 = 0;
 8000838:	4967      	ldr	r1, [pc, #412]	; (80009d8 <main+0x358>)
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2300 	strd	r2, r3, [r1]

	push_vel_x = 0;
 8000846:	4965      	ldr	r1, [pc, #404]	; (80009dc <main+0x35c>)
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_y = 0;
 8000854:	4962      	ldr	r1, [pc, #392]	; (80009e0 <main+0x360>)
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_z = 0;
 8000862:	4960      	ldr	r1, [pc, #384]	; (80009e4 <main+0x364>)
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e9c1 2300 	strd	r2, r3, [r1]

	lx = 23;
 8000870:	495d      	ldr	r1, [pc, #372]	; (80009e8 <main+0x368>)
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	4b5d      	ldr	r3, [pc, #372]	; (80009ec <main+0x36c>)
 8000878:	e9c1 2300 	strd	r2, r3, [r1]
	ly = 25;
 800087c:	495c      	ldr	r1, [pc, #368]	; (80009f0 <main+0x370>)
 800087e:	f04f 0200 	mov.w	r2, #0
 8000882:	4b5c      	ldr	r3, [pc, #368]	; (80009f4 <main+0x374>)
 8000884:	e9c1 2300 	strd	r2, r3, [r1]
	r = 10;
 8000888:	495b      	ldr	r1, [pc, #364]	; (80009f8 <main+0x378>)
 800088a:	f04f 0200 	mov.w	r2, #0
 800088e:	4b5b      	ldr	r3, [pc, #364]	; (80009fc <main+0x37c>)
 8000890:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000894:	f005 f8a2 	bl	80059dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000898:	f000 f8c4 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089c:	f000 fd94 	bl	80013c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a0:	f000 fd6a 	bl	8001378 <MX_DMA_Init>
  MX_TIM2_Init();
 80008a4:	f000 f9bc 	bl	8000c20 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008a8:	f000 fa08 	bl	8000cbc <MX_TIM3_Init>
  MX_TIM4_Init();
 80008ac:	f000 fa5c 	bl	8000d68 <MX_TIM4_Init>
  MX_TIM6_Init();
 80008b0:	f000 fb12 	bl	8000ed8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80008b4:	f000 fb50 	bl	8000f58 <MX_TIM7_Init>
  MX_TIM1_Init();
 80008b8:	f000 f922 	bl	8000b00 <MX_TIM1_Init>
  MX_TIM5_Init();
 80008bc:	f000 fab0 	bl	8000e20 <MX_TIM5_Init>
  MX_TIM8_Init();
 80008c0:	f000 fb80 	bl	8000fc4 <MX_TIM8_Init>
  MX_TIM15_Init();
 80008c4:	f000 fbd8 	bl	8001078 <MX_TIM15_Init>
  MX_TIM23_Init();
 80008c8:	f000 fc5e 	bl	8001188 <MX_TIM23_Init>
  MX_TIM24_Init();
 80008cc:	f000 fcb2 	bl	8001234 <MX_TIM24_Init>
  MX_USART3_UART_Init();
 80008d0:	f000 fd06 	bl	80012e0 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80008d4:	484a      	ldr	r0, [pc, #296]	; (8000a00 <main+0x380>)
 80008d6:	f00a fd07 	bl	800b2e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80008da:	2100      	movs	r1, #0
 80008dc:	4849      	ldr	r0, [pc, #292]	; (8000a04 <main+0x384>)
 80008de:	f00a fffd 	bl	800b8dc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 80008e2:	2100      	movs	r1, #0
 80008e4:	4848      	ldr	r0, [pc, #288]	; (8000a08 <main+0x388>)
 80008e6:	f00a fff9 	bl	800b8dc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80008ea:	2100      	movs	r1, #0
 80008ec:	4847      	ldr	r0, [pc, #284]	; (8000a0c <main+0x38c>)
 80008ee:	f00a fff5 	bl	800b8dc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80008f2:	2100      	movs	r1, #0
 80008f4:	4846      	ldr	r0, [pc, #280]	; (8000a10 <main+0x390>)
 80008f6:	f00a fff1 	bl	800b8dc <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80008fa:	2100      	movs	r1, #0
 80008fc:	4845      	ldr	r0, [pc, #276]	; (8000a14 <main+0x394>)
 80008fe:	f00a fdd1 	bl	800b4a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000902:	2100      	movs	r1, #0
 8000904:	4844      	ldr	r0, [pc, #272]	; (8000a18 <main+0x398>)
 8000906:	f00a fdcd 	bl	800b4a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800090a:	2100      	movs	r1, #0
 800090c:	4843      	ldr	r0, [pc, #268]	; (8000a1c <main+0x39c>)
 800090e:	f00a fdc9 	bl	800b4a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000912:	2100      	movs	r1, #0
 8000914:	4842      	ldr	r0, [pc, #264]	; (8000a20 <main+0x3a0>)
 8000916:	f00a fdc5 	bl	800b4a4 <HAL_TIM_PWM_Start>

  setup();
 800091a:	f003 fb99 	bl	8004050 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 800091e:	f003 fbb3 	bl	8004088 <loop>
 8000922:	e7fc      	b.n	800091e <main+0x29e>
 8000924:	f3af 8000 	nop.w
 8000928:	6cd29132 	.word	0x6cd29132
 800092c:	3ff5071e 	.word	0x3ff5071e
 8000930:	f6167232 	.word	0xf6167232
 8000934:	40428fb4 	.word	0x40428fb4
 8000938:	e631f8a1 	.word	0xe631f8a1
 800093c:	3ffd25ae 	.word	0x3ffd25ae
 8000940:	0624dd2f 	.word	0x0624dd2f
 8000944:	40482581 	.word	0x40482581
 8000948:	24000558 	.word	0x24000558
 800094c:	24000560 	.word	0x24000560
 8000950:	24000568 	.word	0x24000568
 8000954:	24000570 	.word	0x24000570
 8000958:	24000578 	.word	0x24000578
 800095c:	24000580 	.word	0x24000580
 8000960:	24000588 	.word	0x24000588
 8000964:	24000590 	.word	0x24000590
 8000968:	24000660 	.word	0x24000660
 800096c:	24000664 	.word	0x24000664
 8000970:	24000668 	.word	0x24000668
 8000974:	24000598 	.word	0x24000598
 8000978:	240005a0 	.word	0x240005a0
 800097c:	240005a8 	.word	0x240005a8
 8000980:	240005b0 	.word	0x240005b0
 8000984:	240005b8 	.word	0x240005b8
 8000988:	240005ba 	.word	0x240005ba
 800098c:	240005bc 	.word	0x240005bc
 8000990:	240005be 	.word	0x240005be
 8000994:	240005c0 	.word	0x240005c0
 8000998:	240005e0 	.word	0x240005e0
 800099c:	240005c8 	.word	0x240005c8
 80009a0:	240005e8 	.word	0x240005e8
 80009a4:	240005d0 	.word	0x240005d0
 80009a8:	3ff00000 	.word	0x3ff00000
 80009ac:	240005f0 	.word	0x240005f0
 80009b0:	403e0000 	.word	0x403e0000
 80009b4:	240005d8 	.word	0x240005d8
 80009b8:	240005f8 	.word	0x240005f8
 80009bc:	24000620 	.word	0x24000620
 80009c0:	24000628 	.word	0x24000628
 80009c4:	24000630 	.word	0x24000630
 80009c8:	24000638 	.word	0x24000638
 80009cc:	24000640 	.word	0x24000640
 80009d0:	24000648 	.word	0x24000648
 80009d4:	24000650 	.word	0x24000650
 80009d8:	24000658 	.word	0x24000658
 80009dc:	240006a0 	.word	0x240006a0
 80009e0:	240006a8 	.word	0x240006a8
 80009e4:	240006b0 	.word	0x240006b0
 80009e8:	24000670 	.word	0x24000670
 80009ec:	40370000 	.word	0x40370000
 80009f0:	24000678 	.word	0x24000678
 80009f4:	40390000 	.word	0x40390000
 80009f8:	24000680 	.word	0x24000680
 80009fc:	40240000 	.word	0x40240000
 8000a00:	240000e0 	.word	0x240000e0
 8000a04:	2400012c 	.word	0x2400012c
 8000a08:	240002a8 	.word	0x240002a8
 8000a0c:	24000340 	.word	0x24000340
 8000a10:	2400038c 	.word	0x2400038c
 8000a14:	24000178 	.word	0x24000178
 8000a18:	240001c4 	.word	0x240001c4
 8000a1c:	240002f4 	.word	0x240002f4
 8000a20:	24000094 	.word	0x24000094

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b09c      	sub	sp, #112	; 0x70
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	224c      	movs	r2, #76	; 0x4c
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f00e fa3c 	bl	800eeb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2220      	movs	r2, #32
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f00e fa36 	bl	800eeb0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a44:	2002      	movs	r0, #2
 8000a46:	f008 f967 	bl	8008d18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <SystemClock_Config+0xd8>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a2a      	ldr	r2, [pc, #168]	; (8000afc <SystemClock_Config+0xd8>)
 8000a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b28      	ldr	r3, [pc, #160]	; (8000afc <SystemClock_Config+0xd8>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a66:	bf00      	nop
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <SystemClock_Config+0xd8>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a74:	d1f8      	bne.n	8000a68 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a76:	2301      	movs	r3, #1
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a7a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a80:	2302      	movs	r3, #2
 8000a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a84:	2302      	movs	r3, #2
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a8c:	23a8      	movs	r3, #168	; 0xa8
 8000a8e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a94:	2304      	movs	r3, #4
 8000a96:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	4618      	mov	r0, r3
 8000aae:	f008 f96d 	bl	8008d8c <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ab8:	f001 fac2 	bl	8002040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	233f      	movs	r3, #63	; 0x3f
 8000abe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000acc:	2340      	movs	r3, #64	; 0x40
 8000ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ad0:	2340      	movs	r3, #64	; 0x40
 8000ad2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ada:	2340      	movs	r3, #64	; 0x40
 8000adc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f008 fd00 	bl	80094e8 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000aee:	f001 faa7 	bl	8002040 <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3770      	adds	r7, #112	; 0x70
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	58024800 	.word	0x58024800

08000b00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b098      	sub	sp, #96	; 0x60
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
 8000b22:	615a      	str	r2, [r3, #20]
 8000b24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2234      	movs	r2, #52	; 0x34
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f00e f9bf 	bl	800eeb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b32:	4b39      	ldr	r3, [pc, #228]	; (8000c18 <MX_TIM1_Init+0x118>)
 8000b34:	4a39      	ldr	r2, [pc, #228]	; (8000c1c <MX_TIM1_Init+0x11c>)
 8000b36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 274;
 8000b38:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <MX_TIM1_Init+0x118>)
 8000b3a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000b3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <MX_TIM1_Init+0x118>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b46:	4b34      	ldr	r3, [pc, #208]	; (8000c18 <MX_TIM1_Init+0x118>)
 8000b48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4e:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <MX_TIM1_Init+0x118>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b54:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <MX_TIM1_Init+0x118>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <MX_TIM1_Init+0x118>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b60:	482d      	ldr	r0, [pc, #180]	; (8000c18 <MX_TIM1_Init+0x118>)
 8000b62:	f00a fc47 	bl	800b3f4 <HAL_TIM_PWM_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000b6c:	f001 fa68 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b80:	4619      	mov	r1, r3
 8000b82:	4825      	ldr	r0, [pc, #148]	; (8000c18 <MX_TIM1_Init+0x118>)
 8000b84:	f00b fecc 	bl	800c920 <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b8e:	f001 fa57 	bl	8002040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b92:	2360      	movs	r3, #96	; 0x60
 8000b94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4818      	ldr	r0, [pc, #96]	; (8000c18 <MX_TIM1_Init+0x118>)
 8000bb8:	f00b f83e 	bl	800bc38 <HAL_TIM_PWM_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000bc2:	f001 fa3d 	bl	8002040 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000be8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <MX_TIM1_Init+0x118>)
 8000bfc:	f00b ff2c 	bl	800ca58 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000c06:	f001 fa1b 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c0a:	4803      	ldr	r0, [pc, #12]	; (8000c18 <MX_TIM1_Init+0x118>)
 8000c0c:	f004 fc0a 	bl	8005424 <HAL_TIM_MspPostInit>

}
 8000c10:	bf00      	nop
 8000c12:	3760      	adds	r7, #96	; 0x60
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	24000094 	.word	0x24000094
 8000c1c:	40010000 	.word	0x40010000

08000c20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c48:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000c4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c68:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c6a:	f00a fae5 	bl	800b238 <HAL_TIM_Base_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c74:	f001 f9e4 	bl	8002040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4619      	mov	r1, r3
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000c86:	f00b f8eb 	bl	800be60 <HAL_TIM_ConfigClockSource>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c90:	f001 f9d6 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_TIM2_Init+0x98>)
 8000ca2:	f00b fe3d 	bl	800c920 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cac:	f001 f9c8 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	240000e0 	.word	0x240000e0

08000cbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	; 0x30
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	2224      	movs	r2, #36	; 0x24
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f00e f8f0 	bl	800eeb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <MX_TIM3_Init+0xa4>)
 8000cdc:	4a21      	ldr	r2, [pc, #132]	; (8000d64 <MX_TIM3_Init+0xa8>)
 8000cde:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_TIM3_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <MX_TIM3_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_TIM3_Init+0xa4>)
 8000cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_TIM3_Init+0xa4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MX_TIM3_Init+0xa4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d00:	2303      	movs	r3, #3
 8000d02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <MX_TIM3_Init+0xa4>)
 8000d2c:	f00a fd30 	bl	800b790 <HAL_TIM_Encoder_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d36:	f001 f983 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d42:	463b      	mov	r3, r7
 8000d44:	4619      	mov	r1, r3
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <MX_TIM3_Init+0xa4>)
 8000d48:	f00b fdea 	bl	800c920 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d52:	f001 f975 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3730      	adds	r7, #48	; 0x30
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2400012c 	.word	0x2400012c
 8000d64:	40000400 	.word	0x40000400

08000d68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	615a      	str	r2, [r3, #20]
 8000d8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <MX_TIM4_Init+0xb0>)
 8000d8e:	4a23      	ldr	r2, [pc, #140]	; (8000e1c <MX_TIM4_Init+0xb4>)
 8000d90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 274;
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <MX_TIM4_Init+0xb0>)
 8000d94:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000d98:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <MX_TIM4_Init+0xb0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_TIM4_Init+0xb0>)
 8000da2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_TIM4_Init+0xb0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_TIM4_Init+0xb0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000db4:	4818      	ldr	r0, [pc, #96]	; (8000e18 <MX_TIM4_Init+0xb0>)
 8000db6:	f00a fb1d 	bl	800b3f4 <HAL_TIM_PWM_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000dc0:	f001 f93e 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4811      	ldr	r0, [pc, #68]	; (8000e18 <MX_TIM4_Init+0xb0>)
 8000dd4:	f00b fda4 	bl	800c920 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000dde:	f001 f92f 	bl	8002040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de2:	2360      	movs	r3, #96	; 0x60
 8000de4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	4619      	mov	r1, r3
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <MX_TIM4_Init+0xb0>)
 8000dfa:	f00a ff1d 	bl	800bc38 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000e04:	f001 f91c 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <MX_TIM4_Init+0xb0>)
 8000e0a:	f004 fb0b 	bl	8005424 <HAL_TIM_MspPostInit>

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	; 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	24000178 	.word	0x24000178
 8000e1c:	40000800 	.word	0x40000800

08000e20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
 8000e40:	615a      	str	r2, [r3, #20]
 8000e42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <MX_TIM5_Init+0xb0>)
 8000e46:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <MX_TIM5_Init+0xb4>)
 8000e48:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 274;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <MX_TIM5_Init+0xb0>)
 8000e4c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000e50:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_TIM5_Init+0xb0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <MX_TIM5_Init+0xb0>)
 8000e5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e5e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_TIM5_Init+0xb0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_TIM5_Init+0xb0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e6c:	4818      	ldr	r0, [pc, #96]	; (8000ed0 <MX_TIM5_Init+0xb0>)
 8000e6e:	f00a fac1 	bl	800b3f4 <HAL_TIM_PWM_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8000e78:	f001 f8e2 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4811      	ldr	r0, [pc, #68]	; (8000ed0 <MX_TIM5_Init+0xb0>)
 8000e8c:	f00b fd48 	bl	800c920 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8000e96:	f001 f8d3 	bl	8002040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9a:	2360      	movs	r3, #96	; 0x60
 8000e9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4807      	ldr	r0, [pc, #28]	; (8000ed0 <MX_TIM5_Init+0xb0>)
 8000eb2:	f00a fec1 	bl	800bc38 <HAL_TIM_PWM_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000ebc:	f001 f8c0 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <MX_TIM5_Init+0xb0>)
 8000ec2:	f004 faaf 	bl	8005424 <HAL_TIM_MspPostInit>

}
 8000ec6:	bf00      	nop
 8000ec8:	3728      	adds	r7, #40	; 0x28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	240001c4 	.word	0x240001c4
 8000ed4:	40000c00 	.word	0x40000c00

08000ed8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_TIM6_Init+0x78>)
 8000eea:	4a1a      	ldr	r2, [pc, #104]	; (8000f54 <MX_TIM6_Init+0x7c>)
 8000eec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_TIM6_Init+0x78>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_TIM6_Init+0x78>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_TIM6_Init+0x78>)
 8000efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f00:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_TIM6_Init+0x78>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f08:	4811      	ldr	r0, [pc, #68]	; (8000f50 <MX_TIM6_Init+0x78>)
 8000f0a:	f00a f995 	bl	800b238 <HAL_TIM_Base_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f14:	f001 f894 	bl	8002040 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f18:	2108      	movs	r1, #8
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <MX_TIM6_Init+0x78>)
 8000f1c:	f00a fbde 	bl	800b6dc <HAL_TIM_OnePulse_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000f26:	f001 f88b 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_TIM6_Init+0x78>)
 8000f38:	f00b fcf2 	bl	800c920 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000f42:	f001 f87d 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	24000210 	.word	0x24000210
 8000f54:	40001000 	.word	0x40001000

08000f58 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_TIM7_Init+0x64>)
 8000f6a:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <MX_TIM7_Init+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_TIM7_Init+0x64>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_TIM7_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_TIM7_Init+0x64>)
 8000f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f80:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_TIM7_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <MX_TIM7_Init+0x64>)
 8000f8a:	f00a f955 	bl	800b238 <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f94:	f001 f854 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_TIM7_Init+0x64>)
 8000fa6:	f00b fcbb 	bl	800c920 <HAL_TIMEx_MasterConfigSynchronization>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000fb0:	f001 f846 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2400025c 	.word	0x2400025c
 8000fc0:	40001400 	.word	0x40001400

08000fc4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2224      	movs	r2, #36	; 0x24
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f00d ff6c 	bl	800eeb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <MX_TIM8_Init+0xac>)
 8000fe4:	4a23      	ldr	r2, [pc, #140]	; (8001074 <MX_TIM8_Init+0xb0>)
 8000fe6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <MX_TIM8_Init+0xac>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b20      	ldr	r3, [pc, #128]	; (8001070 <MX_TIM8_Init+0xac>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_TIM8_Init+0xac>)
 8000ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_TIM8_Init+0xac>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_TIM8_Init+0xac>)
 8001004:	2200      	movs	r2, #0
 8001006:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_TIM8_Init+0xac>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800100e:	2303      	movs	r3, #3
 8001010:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001016:	2301      	movs	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001026:	2301      	movs	r3, #1
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4619      	mov	r1, r3
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_TIM8_Init+0xac>)
 800103a:	f00a fba9 	bl	800b790 <HAL_TIM_Encoder_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001044:	f000 fffc 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_TIM8_Init+0xac>)
 800105a:	f00b fc61 	bl	800c920 <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001064:	f000 ffec 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	3730      	adds	r7, #48	; 0x30
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	240002a8 	.word	0x240002a8
 8001074:	40010400 	.word	0x40010400

08001078 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b098      	sub	sp, #96	; 0x60
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2234      	movs	r2, #52	; 0x34
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f00d ff03 	bl	800eeb0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010aa:	4b35      	ldr	r3, [pc, #212]	; (8001180 <MX_TIM15_Init+0x108>)
 80010ac:	4a35      	ldr	r2, [pc, #212]	; (8001184 <MX_TIM15_Init+0x10c>)
 80010ae:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 274;
 80010b0:	4b33      	ldr	r3, [pc, #204]	; (8001180 <MX_TIM15_Init+0x108>)
 80010b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80010b6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	4b31      	ldr	r3, [pc, #196]	; (8001180 <MX_TIM15_Init+0x108>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80010be:	4b30      	ldr	r3, [pc, #192]	; (8001180 <MX_TIM15_Init+0x108>)
 80010c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010c4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <MX_TIM15_Init+0x108>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010cc:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <MX_TIM15_Init+0x108>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d2:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <MX_TIM15_Init+0x108>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80010d8:	4829      	ldr	r0, [pc, #164]	; (8001180 <MX_TIM15_Init+0x108>)
 80010da:	f00a f98b 	bl	800b3f4 <HAL_TIM_PWM_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 80010e4:	f000 ffac 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80010f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010f4:	4619      	mov	r1, r3
 80010f6:	4822      	ldr	r0, [pc, #136]	; (8001180 <MX_TIM15_Init+0x108>)
 80010f8:	f00b fc12 	bl	800c920 <HAL_TIMEx_MasterConfigSynchronization>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8001102:	f000 ff9d 	bl	8002040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001106:	2360      	movs	r3, #96	; 0x60
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110e:	2300      	movs	r3, #0
 8001110:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001112:	2300      	movs	r3, #0
 8001114:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001122:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001126:	2200      	movs	r2, #0
 8001128:	4619      	mov	r1, r3
 800112a:	4815      	ldr	r0, [pc, #84]	; (8001180 <MX_TIM15_Init+0x108>)
 800112c:	f00a fd84 	bl	800bc38 <HAL_TIM_PWM_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 8001136:	f000 ff83 	bl	8002040 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800114e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001152:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <MX_TIM15_Init+0x108>)
 8001162:	f00b fc79 	bl	800ca58 <HAL_TIMEx_ConfigBreakDeadTime>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 800116c:	f000 ff68 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <MX_TIM15_Init+0x108>)
 8001172:	f004 f957 	bl	8005424 <HAL_TIM_MspPostInit>

}
 8001176:	bf00      	nop
 8001178:	3760      	adds	r7, #96	; 0x60
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	240002f4 	.word	0x240002f4
 8001184:	40014000 	.word	0x40014000

08001188 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	; 0x30
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	2224      	movs	r2, #36	; 0x24
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f00d fe8a 	bl	800eeb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <MX_TIM23_Init+0xa4>)
 80011a8:	4a21      	ldr	r2, [pc, #132]	; (8001230 <MX_TIM23_Init+0xa8>)
 80011aa:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <MX_TIM23_Init+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_TIM23_Init+0xa4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 65535;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <MX_TIM23_Init+0xa4>)
 80011ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011be:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_TIM23_Init+0xa4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_TIM23_Init+0xa4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011cc:	2303      	movs	r3, #3
 80011ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011d4:	2301      	movs	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011e4:	2301      	movs	r3, #1
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4619      	mov	r1, r3
 80011f6:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_TIM23_Init+0xa4>)
 80011f8:	f00a faca 	bl	800b790 <HAL_TIM_Encoder_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8001202:	f000 ff1d 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800120e:	463b      	mov	r3, r7
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <MX_TIM23_Init+0xa4>)
 8001214:	f00b fb84 	bl	800c920 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 800121e:	f000 ff0f 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3730      	adds	r7, #48	; 0x30
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	24000340 	.word	0x24000340
 8001230:	4000e000 	.word	0x4000e000

08001234 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08c      	sub	sp, #48	; 0x30
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	2224      	movs	r2, #36	; 0x24
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f00d fe34 	bl	800eeb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	463b      	mov	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <MX_TIM24_Init+0xa4>)
 8001254:	4a21      	ldr	r2, [pc, #132]	; (80012dc <MX_TIM24_Init+0xa8>)
 8001256:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <MX_TIM24_Init+0xa4>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <MX_TIM24_Init+0xa4>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 65535;
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <MX_TIM24_Init+0xa4>)
 8001266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126a:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_TIM24_Init+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MX_TIM24_Init+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001278:	2303      	movs	r3, #3
 800127a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001280:	2301      	movs	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001290:	2301      	movs	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	480d      	ldr	r0, [pc, #52]	; (80012d8 <MX_TIM24_Init+0xa4>)
 80012a4:	f00a fa74 	bl	800b790 <HAL_TIM_Encoder_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 80012ae:	f000 fec7 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <MX_TIM24_Init+0xa4>)
 80012c0:	f00b fb2e 	bl	800c920 <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 80012ca:	f000 feb9 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3730      	adds	r7, #48	; 0x30
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2400038c 	.word	0x2400038c
 80012dc:	4000e400 	.word	0x4000e400

080012e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <MX_USART3_UART_Init+0x90>)
 80012e6:	4a23      	ldr	r2, [pc, #140]	; (8001374 <MX_USART3_UART_Init+0x94>)
 80012e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <MX_USART3_UART_Init+0x90>)
 80012ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_USART3_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_USART3_UART_Init+0x90>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_USART3_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_USART3_UART_Init+0x90>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_USART3_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_USART3_UART_Init+0x90>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <MX_USART3_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_USART3_UART_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_USART3_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001328:	4811      	ldr	r0, [pc, #68]	; (8001370 <MX_USART3_UART_Init+0x90>)
 800132a:	f00b fc53 	bl	800cbd4 <HAL_UART_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001334:	f000 fe84 	bl	8002040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001338:	2100      	movs	r1, #0
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_USART3_UART_Init+0x90>)
 800133c:	f00d fc9a 	bl	800ec74 <HAL_UARTEx_SetTxFifoThreshold>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001346:	f000 fe7b 	bl	8002040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134a:	2100      	movs	r1, #0
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <MX_USART3_UART_Init+0x90>)
 800134e:	f00d fccf 	bl	800ecf0 <HAL_UARTEx_SetRxFifoThreshold>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001358:	f000 fe72 	bl	8002040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	; (8001370 <MX_USART3_UART_Init+0x90>)
 800135e:	f00d fc50 	bl	800ec02 <HAL_UARTEx_DisableFifoMode>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001368:	f000 fe6a 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	240003d8 	.word	0x240003d8
 8001374:	40004800 	.word	0x40004800

08001378 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_DMA_Init+0x4c>)
 8001380:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001384:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <MX_DMA_Init+0x4c>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <MX_DMA_Init+0x4c>)
 8001390:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	200b      	movs	r0, #11
 80013a2:	f004 fc88 	bl	8005cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013a6:	200b      	movs	r0, #11
 80013a8:	f004 fc9f 	bl	8005cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	200c      	movs	r0, #12
 80013b2:	f004 fc80 	bl	8005cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013b6:	200c      	movs	r0, #12
 80013b8:	f004 fc97 	bl	8005cea <HAL_NVIC_EnableIRQ>

}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	58024400 	.word	0x58024400

080013c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	; 0x38
 80013cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013de:	4ba7      	ldr	r3, [pc, #668]	; (800167c <MX_GPIO_Init+0x2b4>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e4:	4aa5      	ldr	r2, [pc, #660]	; (800167c <MX_GPIO_Init+0x2b4>)
 80013e6:	f043 0310 	orr.w	r3, r3, #16
 80013ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ee:	4ba3      	ldr	r3, [pc, #652]	; (800167c <MX_GPIO_Init+0x2b4>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f4:	f003 0310 	and.w	r3, r3, #16
 80013f8:	623b      	str	r3, [r7, #32]
 80013fa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fc:	4b9f      	ldr	r3, [pc, #636]	; (800167c <MX_GPIO_Init+0x2b4>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001402:	4a9e      	ldr	r2, [pc, #632]	; (800167c <MX_GPIO_Init+0x2b4>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140c:	4b9b      	ldr	r3, [pc, #620]	; (800167c <MX_GPIO_Init+0x2b4>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800141a:	4b98      	ldr	r3, [pc, #608]	; (800167c <MX_GPIO_Init+0x2b4>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	4a96      	ldr	r2, [pc, #600]	; (800167c <MX_GPIO_Init+0x2b4>)
 8001422:	f043 0320 	orr.w	r3, r3, #32
 8001426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142a:	4b94      	ldr	r3, [pc, #592]	; (800167c <MX_GPIO_Init+0x2b4>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001438:	4b90      	ldr	r3, [pc, #576]	; (800167c <MX_GPIO_Init+0x2b4>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143e:	4a8f      	ldr	r2, [pc, #572]	; (800167c <MX_GPIO_Init+0x2b4>)
 8001440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001448:	4b8c      	ldr	r3, [pc, #560]	; (800167c <MX_GPIO_Init+0x2b4>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b89      	ldr	r3, [pc, #548]	; (800167c <MX_GPIO_Init+0x2b4>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	4a87      	ldr	r2, [pc, #540]	; (800167c <MX_GPIO_Init+0x2b4>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001466:	4b85      	ldr	r3, [pc, #532]	; (800167c <MX_GPIO_Init+0x2b4>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001474:	4b81      	ldr	r3, [pc, #516]	; (800167c <MX_GPIO_Init+0x2b4>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	4a80      	ldr	r2, [pc, #512]	; (800167c <MX_GPIO_Init+0x2b4>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001484:	4b7d      	ldr	r3, [pc, #500]	; (800167c <MX_GPIO_Init+0x2b4>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001492:	4b7a      	ldr	r3, [pc, #488]	; (800167c <MX_GPIO_Init+0x2b4>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001498:	4a78      	ldr	r2, [pc, #480]	; (800167c <MX_GPIO_Init+0x2b4>)
 800149a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800149e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a2:	4b76      	ldr	r3, [pc, #472]	; (800167c <MX_GPIO_Init+0x2b4>)
 80014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b0:	4b72      	ldr	r3, [pc, #456]	; (800167c <MX_GPIO_Init+0x2b4>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	4a71      	ldr	r2, [pc, #452]	; (800167c <MX_GPIO_Init+0x2b4>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c0:	4b6e      	ldr	r3, [pc, #440]	; (800167c <MX_GPIO_Init+0x2b4>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2104      	movs	r1, #4
 80014d2:	486b      	ldr	r0, [pc, #428]	; (8001680 <MX_GPIO_Init+0x2b8>)
 80014d4:	f007 fc06 	bl	8008ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f244 0105 	movw	r1, #16389	; 0x4005
 80014de:	4869      	ldr	r0, [pc, #420]	; (8001684 <MX_GPIO_Init+0x2bc>)
 80014e0:	f007 fc00 	bl	8008ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2103      	movs	r1, #3
 80014e8:	4867      	ldr	r0, [pc, #412]	; (8001688 <MX_GPIO_Init+0x2c0>)
 80014ea:	f007 fbfb 	bl	8008ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f241 4102 	movw	r1, #5122	; 0x1402
 80014f4:	4865      	ldr	r0, [pc, #404]	; (800168c <MX_GPIO_Init+0x2c4>)
 80014f6:	f007 fbf5 	bl	8008ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f240 4103 	movw	r1, #1027	; 0x403
 8001500:	4863      	ldr	r0, [pc, #396]	; (8001690 <MX_GPIO_Init+0x2c8>)
 8001502:	f007 fbef 	bl	8008ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	485e      	ldr	r0, [pc, #376]	; (8001694 <MX_GPIO_Init+0x2cc>)
 800151c:	f007 fa3a 	bl	8008994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001520:	2304      	movs	r3, #4
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	4852      	ldr	r0, [pc, #328]	; (8001680 <MX_GPIO_Init+0x2b8>)
 8001538:	f007 fa2c 	bl	8008994 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800153c:	2332      	movs	r3, #50	; 0x32
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800154c:	230b      	movs	r3, #11
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	484f      	ldr	r0, [pc, #316]	; (8001694 <MX_GPIO_Init+0x2cc>)
 8001558:	f007 fa1c 	bl	8008994 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800155c:	2386      	movs	r3, #134	; 0x86
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800156c:	230b      	movs	r3, #11
 800156e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001574:	4619      	mov	r1, r3
 8001576:	4848      	ldr	r0, [pc, #288]	; (8001698 <MX_GPIO_Init+0x2d0>)
 8001578:	f007 fa0c 	bl	8008994 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PB2 LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin;
 800157c:	f244 0305 	movw	r3, #16389	; 0x4005
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	483b      	ldr	r0, [pc, #236]	; (8001684 <MX_GPIO_Init+0x2bc>)
 8001596:	f007 f9fd 	bl	8008994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800159a:	2303      	movs	r3, #3
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ae:	4619      	mov	r1, r3
 80015b0:	4835      	ldr	r0, [pc, #212]	; (8001688 <MX_GPIO_Init+0x2c0>)
 80015b2:	f007 f9ef 	bl	8008994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin;
 80015b6:	f241 4302 	movw	r3, #5122	; 0x1402
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	482f      	ldr	r0, [pc, #188]	; (800168c <MX_GPIO_Init+0x2c4>)
 80015d0:	f007 f9e0 	bl	8008994 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e6:	230b      	movs	r3, #11
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ee:	4619      	mov	r1, r3
 80015f0:	4824      	ldr	r0, [pc, #144]	; (8001684 <MX_GPIO_Init+0x2bc>)
 80015f2:	f007 f9cf 	bl	8008994 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD0 PD1 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1;
 80015f6:	f240 4303 	movw	r3, #1027	; 0x403
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	4820      	ldr	r0, [pc, #128]	; (8001690 <MX_GPIO_Init+0x2c8>)
 8001610:	f007 f9c0 	bl	8008994 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001618:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	4817      	ldr	r0, [pc, #92]	; (8001688 <MX_GPIO_Init+0x2c0>)
 800162a:	f007 f9b3 	bl	8008994 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800162e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001640:	230a      	movs	r3, #10
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	4813      	ldr	r0, [pc, #76]	; (8001698 <MX_GPIO_Init+0x2d0>)
 800164c:	f007 f9a2 	bl	8008994 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001650:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001662:	230b      	movs	r3, #11
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	4806      	ldr	r0, [pc, #24]	; (8001688 <MX_GPIO_Init+0x2c0>)
 800166e:	f007 f991 	bl	8008994 <HAL_GPIO_Init>

}
 8001672:	bf00      	nop
 8001674:	3738      	adds	r7, #56	; 0x38
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	58024400 	.word	0x58024400
 8001680:	58021400 	.word	0x58021400
 8001684:	58020400 	.word	0x58020400
 8001688:	58021800 	.word	0x58021800
 800168c:	58021000 	.word	0x58021000
 8001690:	58020c00 	.word	0x58020c00
 8001694:	58020800 	.word	0x58020800
 8001698:	58020000 	.word	0x58020000
 800169c:	00000000 	.word	0x00000000

080016a0 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
}
}
PID ?�度*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b0:	f040 8486 	bne.w	8001fc0 <HAL_TIM_PeriodElapsedCallback+0x920>

		SP1 = 1/r * (get_vel_x - get_vel_y - (lx + ly) * get_vel_z); // fl
 80016b4:	4bc4      	ldr	r3, [pc, #784]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80016b6:	ed93 7b00 	vldr	d7, [r3]
 80016ba:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80016be:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016c2:	4bc2      	ldr	r3, [pc, #776]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016c4:	ed93 5b00 	vldr	d5, [r3]
 80016c8:	4bc1      	ldr	r3, [pc, #772]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016ca:	ed93 7b00 	vldr	d7, [r3]
 80016ce:	ee35 5b47 	vsub.f64	d5, d5, d7
 80016d2:	4bc0      	ldr	r3, [pc, #768]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80016d4:	ed93 4b00 	vldr	d4, [r3]
 80016d8:	4bbf      	ldr	r3, [pc, #764]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80016da:	ed93 7b00 	vldr	d7, [r3]
 80016de:	ee34 4b07 	vadd.f64	d4, d4, d7
 80016e2:	4bbe      	ldr	r3, [pc, #760]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80016e4:	ed93 7b00 	vldr	d7, [r3]
 80016e8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80016ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 80016f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80016f4:	4bba      	ldr	r3, [pc, #744]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80016f6:	ed83 7b00 	vstr	d7, [r3]
		SP2 = 1/r * (get_vel_x + get_vel_y + (lx + ly) * get_vel_z); // fr
 80016fa:	4bb3      	ldr	r3, [pc, #716]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80016fc:	ed93 7b00 	vldr	d7, [r3]
 8001700:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001704:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800170a:	ed93 5b00 	vldr	d5, [r3]
 800170e:	4bb0      	ldr	r3, [pc, #704]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001710:	ed93 7b00 	vldr	d7, [r3]
 8001714:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001718:	4bae      	ldr	r3, [pc, #696]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800171a:	ed93 4b00 	vldr	d4, [r3]
 800171e:	4bae      	ldr	r3, [pc, #696]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001720:	ed93 7b00 	vldr	d7, [r3]
 8001724:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001728:	4bac      	ldr	r3, [pc, #688]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800172a:	ed93 7b00 	vldr	d7, [r3]
 800172e:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001732:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001736:	ee26 7b07 	vmul.f64	d7, d6, d7
 800173a:	4baa      	ldr	r3, [pc, #680]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800173c:	ed83 7b00 	vstr	d7, [r3]
		SP3 = 1/r * (get_vel_x + get_vel_y - (lx + ly) * get_vel_z); // rl
 8001740:	4ba1      	ldr	r3, [pc, #644]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001742:	ed93 7b00 	vldr	d7, [r3]
 8001746:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800174a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800174e:	4b9f      	ldr	r3, [pc, #636]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001750:	ed93 5b00 	vldr	d5, [r3]
 8001754:	4b9e      	ldr	r3, [pc, #632]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001756:	ed93 7b00 	vldr	d7, [r3]
 800175a:	ee35 5b07 	vadd.f64	d5, d5, d7
 800175e:	4b9d      	ldr	r3, [pc, #628]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001760:	ed93 4b00 	vldr	d4, [r3]
 8001764:	4b9c      	ldr	r3, [pc, #624]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001766:	ed93 7b00 	vldr	d7, [r3]
 800176a:	ee34 4b07 	vadd.f64	d4, d4, d7
 800176e:	4b9b      	ldr	r3, [pc, #620]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001770:	ed93 7b00 	vldr	d7, [r3]
 8001774:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001778:	ee35 7b47 	vsub.f64	d7, d5, d7
 800177c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001780:	4b99      	ldr	r3, [pc, #612]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001782:	ed83 7b00 	vstr	d7, [r3]
		SP4 = 1/r * (get_vel_x - get_vel_y + (lx + ly) * get_vel_z); // rr
 8001786:	4b90      	ldr	r3, [pc, #576]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001788:	ed93 7b00 	vldr	d7, [r3]
 800178c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001790:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001794:	4b8d      	ldr	r3, [pc, #564]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001796:	ed93 5b00 	vldr	d5, [r3]
 800179a:	4b8d      	ldr	r3, [pc, #564]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800179c:	ed93 7b00 	vldr	d7, [r3]
 80017a0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80017a4:	4b8b      	ldr	r3, [pc, #556]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80017a6:	ed93 4b00 	vldr	d4, [r3]
 80017aa:	4b8b      	ldr	r3, [pc, #556]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80017ac:	ed93 7b00 	vldr	d7, [r3]
 80017b0:	ee34 4b07 	vadd.f64	d4, d4, d7
 80017b4:	4b89      	ldr	r3, [pc, #548]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80017b6:	ed93 7b00 	vldr	d7, [r3]
 80017ba:	ee24 7b07 	vmul.f64	d7, d4, d7
 80017be:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017c6:	4b89      	ldr	r3, [pc, #548]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017c8:	ed83 7b00 	vstr	d7, [r3]


		enc1 = __HAL_TIM_GetCounter(&htim3);
 80017cc:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	4b87      	ldr	r3, [pc, #540]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80017d6:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim8);
 80017d8:	4b87      	ldr	r3, [pc, #540]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	b21a      	sxth	r2, r3
 80017e0:	4b86      	ldr	r3, [pc, #536]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80017e2:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim23);
 80017e4:	4b86      	ldr	r3, [pc, #536]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	b21a      	sxth	r2, r3
 80017ec:	4b85      	ldr	r3, [pc, #532]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80017ee:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim24);
 80017f0:	4b85      	ldr	r3, [pc, #532]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	4b84      	ldr	r3, [pc, #528]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80017fa:	801a      	strh	r2, [r3, #0]

		n++;
 80017fc:	4b84      	ldr	r3, [pc, #528]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	4a83      	ldr	r2, [pc, #524]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001804:	6013      	str	r3, [r2, #0]

		PV1 = (double) enc1 / (4 * 512 * 36 * 0.001);
 8001806:	4b7b      	ldr	r3, [pc, #492]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001814:	ed9f 5b68 	vldr	d5, [pc, #416]	; 80019b8 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001818:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800181c:	4b7d      	ldr	r3, [pc, #500]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800181e:	ed83 7b00 	vstr	d7, [r3]
		PV2 = (double) enc2 / (4 * 512 * 36 * 0.001);
 8001822:	4b76      	ldr	r3, [pc, #472]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001830:	ed9f 5b61 	vldr	d5, [pc, #388]	; 80019b8 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001834:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001838:	4b77      	ldr	r3, [pc, #476]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800183a:	ed83 7b00 	vstr	d7, [r3]
		PV3 = (double) enc3 / (4 * 512 * 36 * 0.001);
 800183e:	4b71      	ldr	r3, [pc, #452]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800184c:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 80019b8 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001850:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001854:	4b71      	ldr	r3, [pc, #452]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001856:	ed83 7b00 	vstr	d7, [r3]
		PV4 = (double) enc4 / (4 * 512 * 36 * 0.001);
 800185a:	4b6c      	ldr	r3, [pc, #432]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800185c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001868:	ed9f 5b53 	vldr	d5, [pc, #332]	; 80019b8 <HAL_TIM_PeriodElapsedCallback+0x318>
 800186c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001870:	4b6b      	ldr	r3, [pc, #428]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001872:	ed83 7b00 	vstr	d7, [r3]

 		__HAL_TIM_SetCounter(&htim3, 0);
 8001876:	4b5e      	ldr	r3, [pc, #376]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim8, 0);
 800187e:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim23, 0);
 8001886:	4b5e      	ldr	r3, [pc, #376]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim24, 0);
 800188e:	4b5e      	ldr	r3, [pc, #376]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24

		error1 = SP1 - PV1;
 8001896:	4b52      	ldr	r3, [pc, #328]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001898:	ed93 6b00 	vldr	d6, [r3]
 800189c:	4b5d      	ldr	r3, [pc, #372]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800189e:	ed93 7b00 	vldr	d7, [r3]
 80018a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018a6:	4b5f      	ldr	r3, [pc, #380]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80018a8:	ed83 7b00 	vstr	d7, [r3]
		error2 = SP2 - PV2;
 80018ac:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80018ae:	ed93 6b00 	vldr	d6, [r3]
 80018b2:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80018b4:	ed93 7b00 	vldr	d7, [r3]
 80018b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018bc:	4b5a      	ldr	r3, [pc, #360]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80018be:	ed83 7b00 	vstr	d7, [r3]
		error3 = SP3 - PV3;
 80018c2:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80018c4:	ed93 6b00 	vldr	d6, [r3]
 80018c8:	4b54      	ldr	r3, [pc, #336]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018ca:	ed93 7b00 	vldr	d7, [r3]
 80018ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018d2:	4b56      	ldr	r3, [pc, #344]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80018d4:	ed83 7b00 	vstr	d7, [r3]
		error4 = SP4 - PV4;
 80018d8:	4b44      	ldr	r3, [pc, #272]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80018da:	ed93 6b00 	vldr	d6, [r3]
 80018de:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80018e0:	ed93 7b00 	vldr	d7, [r3]
 80018e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018e8:	4b51      	ldr	r3, [pc, #324]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80018ea:	ed83 7b00 	vstr	d7, [r3]

		errorsum1 += error1;
 80018ee:	4b51      	ldr	r3, [pc, #324]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80018f0:	ed93 6b00 	vldr	d6, [r3]
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80018f6:	ed93 7b00 	vldr	d7, [r3]
 80018fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018fe:	4b4d      	ldr	r3, [pc, #308]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001900:	ed83 7b00 	vstr	d7, [r3]
		errorsum2 += error2;
 8001904:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001906:	ed93 6b00 	vldr	d6, [r3]
 800190a:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800190c:	ed93 7b00 	vldr	d7, [r3]
 8001910:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001914:	4b48      	ldr	r3, [pc, #288]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001916:	ed83 7b00 	vstr	d7, [r3]
		errorsum3 += error3;
 800191a:	4b48      	ldr	r3, [pc, #288]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800191c:	ed93 6b00 	vldr	d6, [r3]
 8001920:	4b42      	ldr	r3, [pc, #264]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001922:	ed93 7b00 	vldr	d7, [r3]
 8001926:	ee36 7b07 	vadd.f64	d7, d6, d7
 800192a:	4b44      	ldr	r3, [pc, #272]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800192c:	ed83 7b00 	vstr	d7, [r3]
		errorsum4 += error4;
 8001930:	4b43      	ldr	r3, [pc, #268]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001932:	ed93 6b00 	vldr	d6, [r3]
 8001936:	4b3e      	ldr	r3, [pc, #248]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001938:	ed93 7b00 	vldr	d7, [r3]
 800193c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001940:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001942:	ed83 7b00 	vstr	d7, [r3]

		ut1 = Kp1 * error1 + Ki1 * errorsum1 * 0.001;
 8001946:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001948:	ed93 6b00 	vldr	d6, [r3]
 800194c:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800194e:	ed93 7b00 	vldr	d7, [r3]
 8001952:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001956:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001958:	ed93 5b00 	vldr	d5, [r3]
 800195c:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800195e:	ed93 7b00 	vldr	d7, [r3]
 8001962:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001966:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80019c0 <HAL_TIM_PeriodElapsedCallback+0x320>
 800196a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800196e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001972:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001974:	ed83 7b00 	vstr	d7, [r3]
		ut2 = Kp2 * error2 + Ki2 * errorsum2 * 0.001;
 8001978:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800197a:	ed93 6b00 	vldr	d6, [r3]
 800197e:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001980:	ed93 7b00 	vldr	d7, [r3]
 8001984:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001988:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 800198a:	ed93 5b00 	vldr	d5, [r3]
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001990:	ed93 7b00 	vldr	d7, [r3]
 8001994:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001998:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80019c0 <HAL_TIM_PeriodElapsedCallback+0x320>
 800199c:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019a4:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80019a6:	ed83 7b00 	vstr	d7, [r3]
		ut3 = Kp3 * error3 + Ki3 * errorsum3 * 0.001;
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80019ac:	ed93 6b00 	vldr	d6, [r3]
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80019b2:	ed93 7b00 	vldr	d7, [r3]
 80019b6:	e053      	b.n	8001a60 <HAL_TIM_PeriodElapsedCallback+0x3c0>
 80019b8:	8d4fdf3c 	.word	0x8d4fdf3c
 80019bc:	40526e97 	.word	0x40526e97
 80019c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80019c4:	3f50624d 	.word	0x3f50624d
 80019c8:	24000680 	.word	0x24000680
 80019cc:	24000688 	.word	0x24000688
 80019d0:	24000690 	.word	0x24000690
 80019d4:	24000670 	.word	0x24000670
 80019d8:	24000678 	.word	0x24000678
 80019dc:	24000698 	.word	0x24000698
 80019e0:	24000578 	.word	0x24000578
 80019e4:	24000580 	.word	0x24000580
 80019e8:	24000588 	.word	0x24000588
 80019ec:	24000590 	.word	0x24000590
 80019f0:	2400012c 	.word	0x2400012c
 80019f4:	240005b8 	.word	0x240005b8
 80019f8:	240002a8 	.word	0x240002a8
 80019fc:	240005ba 	.word	0x240005ba
 8001a00:	24000340 	.word	0x24000340
 8001a04:	240005bc 	.word	0x240005bc
 8001a08:	2400038c 	.word	0x2400038c
 8001a0c:	240005be 	.word	0x240005be
 8001a10:	24000660 	.word	0x24000660
 8001a14:	24000558 	.word	0x24000558
 8001a18:	24000560 	.word	0x24000560
 8001a1c:	24000568 	.word	0x24000568
 8001a20:	24000570 	.word	0x24000570
 8001a24:	24000598 	.word	0x24000598
 8001a28:	240005a0 	.word	0x240005a0
 8001a2c:	240005a8 	.word	0x240005a8
 8001a30:	240005b0 	.word	0x240005b0
 8001a34:	24000640 	.word	0x24000640
 8001a38:	24000648 	.word	0x24000648
 8001a3c:	24000650 	.word	0x24000650
 8001a40:	24000658 	.word	0x24000658
 8001a44:	240005c0 	.word	0x240005c0
 8001a48:	240005e0 	.word	0x240005e0
 8001a4c:	24000600 	.word	0x24000600
 8001a50:	240005c8 	.word	0x240005c8
 8001a54:	240005e8 	.word	0x240005e8
 8001a58:	24000608 	.word	0x24000608
 8001a5c:	240005d0 	.word	0x240005d0
 8001a60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a64:	4bb8      	ldr	r3, [pc, #736]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001a66:	ed93 5b00 	vldr	d5, [r3]
 8001a6a:	4bb8      	ldr	r3, [pc, #736]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001a6c:	ed93 7b00 	vldr	d7, [r3]
 8001a70:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001a74:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 8001d40 <HAL_TIM_PeriodElapsedCallback+0x6a0>
 8001a78:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a80:	4bb3      	ldr	r3, [pc, #716]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001a82:	ed83 7b00 	vstr	d7, [r3]
		ut4 = Kp4 * error4 + Ki4 * errorsum4 * 0.001;
 8001a86:	4bb3      	ldr	r3, [pc, #716]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001a88:	ed93 6b00 	vldr	d6, [r3]
 8001a8c:	4bb2      	ldr	r3, [pc, #712]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001a8e:	ed93 7b00 	vldr	d7, [r3]
 8001a92:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a96:	4bb1      	ldr	r3, [pc, #708]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001a98:	ed93 5b00 	vldr	d5, [r3]
 8001a9c:	4bb0      	ldr	r3, [pc, #704]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001a9e:	ed93 7b00 	vldr	d7, [r3]
 8001aa2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001aa6:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 8001d40 <HAL_TIM_PeriodElapsedCallback+0x6a0>
 8001aaa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001aae:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ab2:	4bac      	ldr	r3, [pc, #688]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001ab4:	ed83 7b00 	vstr	d7, [r3]

		if(ut1 > 1){
 8001ab8:	4bab      	ldr	r3, [pc, #684]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001aba:	ed93 7b00 	vldr	d7, [r3]
 8001abe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001ac2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	dd06      	ble.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x43a>
			ut1 = 1;
 8001acc:	49a6      	ldr	r1, [pc, #664]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	4ba6      	ldr	r3, [pc, #664]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001ad4:	e9c1 2300 	strd	r2, r3, [r1]
 8001ad8:	e00f      	b.n	8001afa <HAL_TIM_PeriodElapsedCallback+0x45a>
		}else if(ut1 < -1){
 8001ada:	4ba3      	ldr	r3, [pc, #652]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001adc:	ed93 7b00 	vldr	d7, [r3]
 8001ae0:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001ae4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aec:	d505      	bpl.n	8001afa <HAL_TIM_PeriodElapsedCallback+0x45a>
			ut1 = -1;
 8001aee:	499e      	ldr	r1, [pc, #632]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	4b9e      	ldr	r3, [pc, #632]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001af6:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut2 > 1){
 8001afa:	4b9e      	ldr	r3, [pc, #632]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001afc:	ed93 7b00 	vldr	d7, [r3]
 8001b00:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0c:	dd06      	ble.n	8001b1c <HAL_TIM_PeriodElapsedCallback+0x47c>
			ut2 = 1;
 8001b0e:	4999      	ldr	r1, [pc, #612]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b95      	ldr	r3, [pc, #596]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b16:	e9c1 2300 	strd	r2, r3, [r1]
 8001b1a:	e00f      	b.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0x49c>
		}else if(ut2 < -1){
 8001b1c:	4b95      	ldr	r3, [pc, #596]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001b1e:	ed93 7b00 	vldr	d7, [r3]
 8001b22:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b26:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2e:	d505      	bpl.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0x49c>
			ut2 = -1;
 8001b30:	4990      	ldr	r1, [pc, #576]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b8e      	ldr	r3, [pc, #568]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001b38:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut3 > 1){
 8001b3c:	4b84      	ldr	r3, [pc, #528]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001b3e:	ed93 7b00 	vldr	d7, [r3]
 8001b42:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	dd06      	ble.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x4be>
			ut3 = 1;
 8001b50:	497f      	ldr	r1, [pc, #508]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b85      	ldr	r3, [pc, #532]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b58:	e9c1 2300 	strd	r2, r3, [r1]
 8001b5c:	e00f      	b.n	8001b7e <HAL_TIM_PeriodElapsedCallback+0x4de>
		}else if(ut3 < -1){
 8001b5e:	4b7c      	ldr	r3, [pc, #496]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001b60:	ed93 7b00 	vldr	d7, [r3]
 8001b64:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b70:	d505      	bpl.n	8001b7e <HAL_TIM_PeriodElapsedCallback+0x4de>
			ut3 = -1;
 8001b72:	4977      	ldr	r1, [pc, #476]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	4b7d      	ldr	r3, [pc, #500]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001b7a:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut4 > 1){
 8001b7e:	4b79      	ldr	r3, [pc, #484]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001b80:	ed93 7b00 	vldr	d7, [r3]
 8001b84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b90:	dd06      	ble.n	8001ba0 <HAL_TIM_PeriodElapsedCallback+0x500>
			ut4 = 1;
 8001b92:	4974      	ldr	r1, [pc, #464]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	4b74      	ldr	r3, [pc, #464]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b9a:	e9c1 2300 	strd	r2, r3, [r1]
 8001b9e:	e00f      	b.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x520>
		}else if(ut4 < -1){
 8001ba0:	4b70      	ldr	r3, [pc, #448]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001ba2:	ed93 7b00 	vldr	d7, [r3]
 8001ba6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001baa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	d505      	bpl.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x520>
			ut4 = -1;
 8001bb4:	496b      	ldr	r1, [pc, #428]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001bbc:	e9c1 2300 	strd	r2, r3, [r1]
		}


		if(ut1 > 0){
 8001bc0:	4b69      	ldr	r3, [pc, #420]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001bc2:	ed93 7b00 	vldr	d7, [r3]
 8001bc6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bce:	dd0a      	ble.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0x546>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	4868      	ldr	r0, [pc, #416]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001bd6:	f007 f885 	bl	8008ce4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2104      	movs	r1, #4
 8001bde:	4867      	ldr	r0, [pc, #412]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001be0:	f007 f880 	bl	8008ce4 <HAL_GPIO_WritePin>
 8001be4:	e024      	b.n	8001c30 <HAL_TIM_PeriodElapsedCallback+0x590>
		}else if(ut1 < 0){
 8001be6:	4b60      	ldr	r3, [pc, #384]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001be8:	ed93 7b00 	vldr	d7, [r3]
 8001bec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	d50a      	bpl.n	8001c0c <HAL_TIM_PeriodElapsedCallback+0x56c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	485f      	ldr	r0, [pc, #380]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001bfc:	f007 f872 	bl	8008ce4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8001c00:	2201      	movs	r2, #1
 8001c02:	2104      	movs	r1, #4
 8001c04:	485d      	ldr	r0, [pc, #372]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c06:	f007 f86d 	bl	8008ce4 <HAL_GPIO_WritePin>
 8001c0a:	e011      	b.n	8001c30 <HAL_TIM_PeriodElapsedCallback+0x590>
		}else if(ut1 == 0){
 8001c0c:	4b56      	ldr	r3, [pc, #344]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001c0e:	ed93 7b00 	vldr	d7, [r3]
 8001c12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	d109      	bne.n	8001c30 <HAL_TIM_PeriodElapsedCallback+0x590>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2104      	movs	r1, #4
 8001c20:	4855      	ldr	r0, [pc, #340]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001c22:	f007 f85f 	bl	8008ce4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2104      	movs	r1, #4
 8001c2a:	4854      	ldr	r0, [pc, #336]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c2c:	f007 f85a 	bl	8008ce4 <HAL_GPIO_WritePin>
		}

		if(ut2 > 0){
 8001c30:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001c32:	ed93 7b00 	vldr	d7, [r3]
 8001c36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	dd0a      	ble.n	8001c56 <HAL_TIM_PeriodElapsedCallback+0x5b6>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001c40:	2201      	movs	r2, #1
 8001c42:	2101      	movs	r1, #1
 8001c44:	484e      	ldr	r0, [pc, #312]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c46:	f007 f84d 	bl	8008ce4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	484c      	ldr	r0, [pc, #304]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c50:	f007 f848 	bl	8008ce4 <HAL_GPIO_WritePin>
 8001c54:	e024      	b.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0x600>
		}else if(ut2 < 0){
 8001c56:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001c58:	ed93 7b00 	vldr	d7, [r3]
 8001c5c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c64:	d50a      	bpl.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0x5dc>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2101      	movs	r1, #1
 8001c6a:	4845      	ldr	r0, [pc, #276]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c6c:	f007 f83a 	bl	8008ce4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	2102      	movs	r1, #2
 8001c74:	4842      	ldr	r0, [pc, #264]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c76:	f007 f835 	bl	8008ce4 <HAL_GPIO_WritePin>
 8001c7a:	e011      	b.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0x600>
		}else if(ut2 == 0){
 8001c7c:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001c7e:	ed93 7b00 	vldr	d7, [r3]
 8001c82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	d109      	bne.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0x600>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2101      	movs	r1, #1
 8001c90:	483b      	ldr	r0, [pc, #236]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c92:	f007 f827 	bl	8008ce4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2102      	movs	r1, #2
 8001c9a:	4839      	ldr	r0, [pc, #228]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c9c:	f007 f822 	bl	8008ce4 <HAL_GPIO_WritePin>
		}

		if(ut3 > 0){
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001ca2:	ed93 7b00 	vldr	d7, [r3]
 8001ca6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	dd0a      	ble.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x626>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	4833      	ldr	r0, [pc, #204]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001cb6:	f007 f815 	bl	8008ce4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	4831      	ldr	r0, [pc, #196]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001cc0:	f007 f810 	bl	8008ce4 <HAL_GPIO_WritePin>
 8001cc4:	e024      	b.n	8001d10 <HAL_TIM_PeriodElapsedCallback+0x670>
		}else if(ut3 < 0){
 8001cc6:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001cc8:	ed93 7b00 	vldr	d7, [r3]
 8001ccc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	d50a      	bpl.n	8001cec <HAL_TIM_PeriodElapsedCallback+0x64c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2101      	movs	r1, #1
 8001cda:	482a      	ldr	r0, [pc, #168]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001cdc:	f007 f802 	bl	8008ce4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	4827      	ldr	r0, [pc, #156]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001ce6:	f006 fffd 	bl	8008ce4 <HAL_GPIO_WritePin>
 8001cea:	e011      	b.n	8001d10 <HAL_TIM_PeriodElapsedCallback+0x670>
		}else if(ut3 == 0){
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001cee:	ed93 7b00 	vldr	d7, [r3]
 8001cf2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	d109      	bne.n	8001d10 <HAL_TIM_PeriodElapsedCallback+0x670>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2101      	movs	r1, #1
 8001d00:	4820      	ldr	r0, [pc, #128]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001d02:	f006 ffef 	bl	8008ce4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2102      	movs	r1, #2
 8001d0a:	481e      	ldr	r0, [pc, #120]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001d0c:	f006 ffea 	bl	8008ce4 <HAL_GPIO_WritePin>
		}

		if(ut4 > 0){
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001d12:	ed93 7b00 	vldr	d7, [r3]
 8001d16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1e:	dd35      	ble.n	8001d8c <HAL_TIM_PeriodElapsedCallback+0x6ec>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001d20:	2201      	movs	r2, #1
 8001d22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d26:	4818      	ldr	r0, [pc, #96]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001d28:	f006 ffdc 	bl	8008ce4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,  GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d32:	4815      	ldr	r0, [pc, #84]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001d34:	f006 ffd6 	bl	8008ce4 <HAL_GPIO_WritePin>
 8001d38:	e051      	b.n	8001dde <HAL_TIM_PeriodElapsedCallback+0x73e>
 8001d3a:	bf00      	nop
 8001d3c:	f3af 8000 	nop.w
 8001d40:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d44:	3f50624d 	.word	0x3f50624d
 8001d48:	240005f0 	.word	0x240005f0
 8001d4c:	24000650 	.word	0x24000650
 8001d50:	24000610 	.word	0x24000610
 8001d54:	240005d8 	.word	0x240005d8
 8001d58:	240005b0 	.word	0x240005b0
 8001d5c:	240005f8 	.word	0x240005f8
 8001d60:	24000658 	.word	0x24000658
 8001d64:	24000618 	.word	0x24000618
 8001d68:	24000600 	.word	0x24000600
 8001d6c:	3ff00000 	.word	0x3ff00000
 8001d70:	bff00000 	.word	0xbff00000
 8001d74:	24000608 	.word	0x24000608
 8001d78:	58020400 	.word	0x58020400
 8001d7c:	58021400 	.word	0x58021400
 8001d80:	58020c00 	.word	0x58020c00
 8001d84:	58021800 	.word	0x58021800
 8001d88:	58021000 	.word	0x58021000
		}else if(ut4 < 0){
 8001d8c:	4b90      	ldr	r3, [pc, #576]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8001d8e:	ed93 7b00 	vldr	d7, [r3]
 8001d92:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9a:	d50c      	bpl.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x716>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001da2:	488c      	ldr	r0, [pc, #560]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x934>)
 8001da4:	f006 ff9e 	bl	8008ce4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dae:	4889      	ldr	r0, [pc, #548]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x934>)
 8001db0:	f006 ff98 	bl	8008ce4 <HAL_GPIO_WritePin>
 8001db4:	e013      	b.n	8001dde <HAL_TIM_PeriodElapsedCallback+0x73e>
		}else if(ut4 == 0){
 8001db6:	4b86      	ldr	r3, [pc, #536]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8001db8:	ed93 7b00 	vldr	d7, [r3]
 8001dbc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc4:	d10b      	bne.n	8001dde <HAL_TIM_PeriodElapsedCallback+0x73e>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dcc:	4881      	ldr	r0, [pc, #516]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x934>)
 8001dce:	f006 ff89 	bl	8008ce4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd8:	487e      	ldr	r0, [pc, #504]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x934>)
 8001dda:	f006 ff83 	bl	8008ce4 <HAL_GPIO_WritePin>
		}


		ut1 = fabs(ut1);
 8001dde:	4b7e      	ldr	r3, [pc, #504]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001de0:	ed93 7b00 	vldr	d7, [r3]
 8001de4:	eeb0 7bc7 	vabs.f64	d7, d7
 8001de8:	4b7b      	ldr	r3, [pc, #492]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001dea:	ed83 7b00 	vstr	d7, [r3]
		ut2 = fabs(ut2);
 8001dee:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8001df0:	ed93 7b00 	vldr	d7, [r3]
 8001df4:	eeb0 7bc7 	vabs.f64	d7, d7
 8001df8:	4b78      	ldr	r3, [pc, #480]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8001dfa:	ed83 7b00 	vstr	d7, [r3]
		ut3 = fabs(ut3);
 8001dfe:	4b78      	ldr	r3, [pc, #480]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8001e00:	ed93 7b00 	vldr	d7, [r3]
 8001e04:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e08:	4b75      	ldr	r3, [pc, #468]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8001e0a:	ed83 7b00 	vstr	d7, [r3]
		ut4 = fabs(ut4);
 8001e0e:	4b70      	ldr	r3, [pc, #448]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8001e10:	ed93 7b00 	vldr	d7, [r3]
 8001e14:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e18:	4b6d      	ldr	r3, [pc, #436]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8001e1a:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ut1 * 1000);
 8001e1e:	4b6e      	ldr	r3, [pc, #440]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001e20:	ed93 7b00 	vldr	d7, [r3]
 8001e24:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8001fc8 <HAL_TIM_PeriodElapsedCallback+0x928>
 8001e28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e2c:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e34:	ee17 2a90 	vmov	r2, s15
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ut2 * 1000);
 8001e3a:	4b68      	ldr	r3, [pc, #416]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8001e3c:	ed93 7b00 	vldr	d7, [r3]
 8001e40:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8001fc8 <HAL_TIM_PeriodElapsedCallback+0x928>
 8001e44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e48:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e50:	ee17 2a90 	vmov	r2, s15
 8001e54:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ut3 * 1000);
 8001e56:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8001e58:	ed93 7b00 	vldr	d7, [r3]
 8001e5c:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001fc8 <HAL_TIM_PeriodElapsedCallback+0x928>
 8001e60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e64:	4b61      	ldr	r3, [pc, #388]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e6c:	ee17 2a90 	vmov	r2, s15
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ut4 * 1000);
 8001e72:	4b57      	ldr	r3, [pc, #348]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8001e74:	ed93 7b00 	vldr	d7, [r3]
 8001e78:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8001fc8 <HAL_TIM_PeriodElapsedCallback+0x928>
 8001e7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e80:	4b5b      	ldr	r3, [pc, #364]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e88:	ee17 2a90 	vmov	r2, s15
 8001e8c:	635a      	str	r2, [r3, #52]	; 0x34

		error_last1 = error1;
 8001e8e:	4b59      	ldr	r3, [pc, #356]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	4958      	ldr	r1, [pc, #352]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8001e96:	e9c1 2300 	strd	r2, r3, [r1]
		error_last2 = error2;
 8001e9a:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	4957      	ldr	r1, [pc, #348]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8001ea2:	e9c1 2300 	strd	r2, r3, [r1]
		error_last3 = error3;
 8001ea6:	4b57      	ldr	r3, [pc, #348]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0x964>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	4956      	ldr	r1, [pc, #344]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8001eae:	e9c1 2300 	strd	r2, r3, [r1]
		error_last4 = error4;
 8001eb2:	4b56      	ldr	r3, [pc, #344]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	4955      	ldr	r1, [pc, #340]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8001eba:	e9c1 2300 	strd	r2, r3, [r1]

		push_vel_x = (PV1 + PV2 + PV3 + PV4) * r/4 ;
 8001ebe:	4b55      	ldr	r3, [pc, #340]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8001ec0:	ed93 6b00 	vldr	d6, [r3]
 8001ec4:	4b54      	ldr	r3, [pc, #336]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8001ec6:	ed93 7b00 	vldr	d7, [r3]
 8001eca:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ece:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8001ed0:	ed93 7b00 	vldr	d7, [r3]
 8001ed4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ed8:	4b51      	ldr	r3, [pc, #324]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001eda:	ed93 7b00 	vldr	d7, [r3]
 8001ede:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ee2:	4b50      	ldr	r3, [pc, #320]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001ee4:	ed93 7b00 	vldr	d7, [r3]
 8001ee8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001eec:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001ef0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ef4:	4b4c      	ldr	r3, [pc, #304]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001ef6:	ed83 7b00 	vstr	d7, [r3]
		push_vel_y = (-PV1 + PV2 + PV3 - PV4) * r/4 ;
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8001efc:	ed93 6b00 	vldr	d6, [r3]
 8001f00:	4b44      	ldr	r3, [pc, #272]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8001f02:	ed93 7b00 	vldr	d7, [r3]
 8001f06:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f0a:	4b44      	ldr	r3, [pc, #272]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8001f0c:	ed93 7b00 	vldr	d7, [r3]
 8001f10:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f14:	4b42      	ldr	r3, [pc, #264]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001f16:	ed93 7b00 	vldr	d7, [r3]
 8001f1a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f1e:	4b41      	ldr	r3, [pc, #260]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001f20:	ed93 7b00 	vldr	d7, [r3]
 8001f24:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f28:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001f2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f30:	4b3e      	ldr	r3, [pc, #248]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001f32:	ed83 7b00 	vstr	d7, [r3]
		push_vel_z = (-PV1 + PV2 - PV3 + PV4) * r/(4 * (lx + ly) );
 8001f36:	4b38      	ldr	r3, [pc, #224]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8001f38:	ed93 6b00 	vldr	d6, [r3]
 8001f3c:	4b35      	ldr	r3, [pc, #212]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8001f3e:	ed93 7b00 	vldr	d7, [r3]
 8001f42:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f46:	4b35      	ldr	r3, [pc, #212]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8001f48:	ed93 7b00 	vldr	d7, [r3]
 8001f4c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f50:	4b33      	ldr	r3, [pc, #204]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001f52:	ed93 7b00 	vldr	d7, [r3]
 8001f56:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f5a:	4b32      	ldr	r3, [pc, #200]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001f5c:	ed93 7b00 	vldr	d7, [r3]
 8001f60:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001f64:	4b32      	ldr	r3, [pc, #200]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001f66:	ed93 6b00 	vldr	d6, [r3]
 8001f6a:	4b32      	ldr	r3, [pc, #200]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001f6c:	ed93 7b00 	vldr	d7, [r3]
 8001f70:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f74:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001f78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f7c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f80:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001f82:	ed83 7b00 	vstr	d7, [r3]

		kkk += 1;
 8001f86:	4b2d      	ldr	r3, [pc, #180]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	4a2b      	ldr	r2, [pc, #172]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001f8e:	6013      	str	r3, [r2, #0]
		if(kkk == 10){
 8001f90:	4b2a      	ldr	r3, [pc, #168]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b0a      	cmp	r3, #10
 8001f96:	d113      	bne.n	8001fc0 <HAL_TIM_PeriodElapsedCallback+0x920>
			// change parameter to real velocity
			 publish_vel(push_vel_x, push_vel_y, push_vel_z);
 8001f98:	4b23      	ldr	r3, [pc, #140]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001f9a:	ed93 7b00 	vldr	d7, [r3]
 8001f9e:	4b23      	ldr	r3, [pc, #140]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001fa0:	ed93 6b00 	vldr	d6, [r3]
 8001fa4:	4b24      	ldr	r3, [pc, #144]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001fa6:	ed93 5b00 	vldr	d5, [r3]
 8001faa:	eeb0 2b45 	vmov.f64	d2, d5
 8001fae:	eeb0 1b46 	vmov.f64	d1, d6
 8001fb2:	eeb0 0b47 	vmov.f64	d0, d7
 8001fb6:	f002 f871 	bl	800409c <publish_vel>
//			publish_vel(get_vel_x, get_vel_y, get_vel_z);
			kkk = 0;
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	00000000 	.word	0x00000000
 8001fcc:	408f4000 	.word	0x408f4000
 8001fd0:	24000618 	.word	0x24000618
 8001fd4:	58021000 	.word	0x58021000
 8001fd8:	24000600 	.word	0x24000600
 8001fdc:	24000608 	.word	0x24000608
 8001fe0:	24000610 	.word	0x24000610
 8001fe4:	24000178 	.word	0x24000178
 8001fe8:	240001c4 	.word	0x240001c4
 8001fec:	240002f4 	.word	0x240002f4
 8001ff0:	24000094 	.word	0x24000094
 8001ff4:	24000598 	.word	0x24000598
 8001ff8:	24000620 	.word	0x24000620
 8001ffc:	240005a0 	.word	0x240005a0
 8002000:	24000628 	.word	0x24000628
 8002004:	240005a8 	.word	0x240005a8
 8002008:	24000630 	.word	0x24000630
 800200c:	240005b0 	.word	0x240005b0
 8002010:	24000638 	.word	0x24000638
 8002014:	24000558 	.word	0x24000558
 8002018:	24000560 	.word	0x24000560
 800201c:	24000568 	.word	0x24000568
 8002020:	24000570 	.word	0x24000570
 8002024:	24000680 	.word	0x24000680
 8002028:	240006a0 	.word	0x240006a0
 800202c:	240006a8 	.word	0x240006a8
 8002030:	24000670 	.word	0x24000670
 8002034:	24000678 	.word	0x24000678
 8002038:	240006b0 	.word	0x240006b0
 800203c:	24000664 	.word	0x24000664

08002040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002044:	b672      	cpsid	i
}
 8002046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002048:	e7fe      	b.n	8002048 <Error_Handler+0x8>

0800204a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	4a04      	ldr	r2, [pc, #16]	; (8002088 <_ZN3ros3MsgC1Ev+0x1c>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	0800f4f4 	.word	0x0800f4f4

0800208c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
      data()
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ffe8 	bl	800206c <_ZN3ros3MsgC1Ev>
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3304      	adds	r3, #4
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ffcf 	bl	800204a <_ZN3ros4TimeC1Ev>
    {
    }
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	0800f4dc 	.word	0x0800f4dc

080020bc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6859      	ldr	r1, [r3, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	b2ca      	uxtb	r2, r1
 80020d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	0a19      	lsrs	r1, r3, #8
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3301      	adds	r3, #1
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	4413      	add	r3, r2
 80020e6:	b2ca      	uxtb	r2, r1
 80020e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	0c19      	lsrs	r1, r3, #16
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3302      	adds	r3, #2
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	b2ca      	uxtb	r2, r1
 80020fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	0e19      	lsrs	r1, r3, #24
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3303      	adds	r3, #3
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	4413      	add	r3, r2
 800210a:	b2ca      	uxtb	r2, r1
 800210c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3304      	adds	r3, #4
 8002112:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6899      	ldr	r1, [r3, #8]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4413      	add	r3, r2
 800211e:	b2ca      	uxtb	r2, r1
 8002120:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0a19      	lsrs	r1, r3, #8
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3301      	adds	r3, #1
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	4413      	add	r3, r2
 8002130:	b2ca      	uxtb	r2, r1
 8002132:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	0c19      	lsrs	r1, r3, #16
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3302      	adds	r3, #2
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	4413      	add	r3, r2
 8002142:	b2ca      	uxtb	r2, r1
 8002144:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0e19      	lsrs	r1, r3, #24
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3303      	adds	r3, #3
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	4413      	add	r3, r2
 8002154:	b2ca      	uxtb	r2, r1
 8002156:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3304      	adds	r3, #4
 800215c:	60fb      	str	r3, [r7, #12]
      return offset;
 800215e:	68fb      	ldr	r3, [r7, #12]
    }
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	4413      	add	r3, r2
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3301      	adds	r3, #1
 8002190:	6839      	ldr	r1, [r7, #0]
 8002192:	440b      	add	r3, r1
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3302      	adds	r3, #2
 80021a6:	6839      	ldr	r1, [r7, #0]
 80021a8:	440b      	add	r3, r1
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3303      	adds	r3, #3
 80021bc:	6839      	ldr	r1, [r7, #0]
 80021be:	440b      	add	r3, r1
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	061b      	lsls	r3, r3, #24
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3304      	adds	r3, #4
 80021ce:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3301      	adds	r3, #1
 80021e6:	6839      	ldr	r1, [r7, #0]
 80021e8:	440b      	add	r3, r1
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3302      	adds	r3, #2
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	440b      	add	r3, r1
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	041b      	lsls	r3, r3, #16
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3303      	adds	r3, #3
 8002212:	6839      	ldr	r1, [r7, #0]
 8002214:	440b      	add	r3, r1
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	061b      	lsls	r3, r3, #24
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3304      	adds	r3, #4
 8002224:	60fb      	str	r3, [r7, #12]
     return offset;
 8002226:	68fb      	ldr	r3, [r7, #12]
    }
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	0800f1dc 	.word	0x0800f1dc

08002250 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	0800f1ec 	.word	0x0800f1ec

0800226c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fef8 	bl	800206c <_ZN3ros3MsgC1Ev>
 800227c:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	809a      	strh	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002292:	60da      	str	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a06      	ldr	r2, [pc, #24]	; (80022b0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	615a      	str	r2, [r3, #20]
    {
    }
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	0800f4c4 	.word	0x0800f4c4
 80022b0:	0800f210 	.word	0x0800f210

080022b4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	8899      	ldrh	r1, [r3, #4]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	b2ca      	uxtb	r2, r1
 80022ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	889b      	ldrh	r3, [r3, #4]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	b299      	uxth	r1, r3
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3301      	adds	r3, #1
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	b2ca      	uxtb	r2, r1
 80022e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	3302      	adds	r3, #2
 80022e8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f80e 	bl	8000310 <strlen>
 80022f4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	69b9      	ldr	r1, [r7, #24]
 80022fe:	4618      	mov	r0, r3
 8002300:	f001 fef0 	bl	80040e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	3304      	adds	r3, #4
 8002308:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	18d0      	adds	r0, r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4619      	mov	r1, r3
 8002318:	f00c fdbc 	bl	800ee94 <memcpy>
      offset += length_topic_name;
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4413      	add	r3, r2
 8002322:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fd fff1 	bl	8000310 <strlen>
 800232e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	4413      	add	r3, r2
 8002336:	6979      	ldr	r1, [r7, #20]
 8002338:	4618      	mov	r0, r3
 800233a:	f001 fed3 	bl	80040e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3304      	adds	r3, #4
 8002342:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	18d0      	adds	r0, r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4619      	mov	r1, r3
 8002352:	f00c fd9f 	bl	800ee94 <memcpy>
      offset += length_message_type;
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	4413      	add	r3, r2
 800235c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fd ffd4 	bl	8000310 <strlen>
 8002368:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	4413      	add	r3, r2
 8002370:	6939      	ldr	r1, [r7, #16]
 8002372:	4618      	mov	r0, r3
 8002374:	f001 feb6 	bl	80040e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	3304      	adds	r3, #4
 800237c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	18d0      	adds	r0, r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4619      	mov	r1, r3
 800238c:	f00c fd82 	bl	800ee94 <memcpy>
      offset += length_md5sum;
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4413      	add	r3, r2
 8002396:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800239e:	68f9      	ldr	r1, [r7, #12]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	b2ca      	uxtb	r2, r1
 80023a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	0a19      	lsrs	r1, r3, #8
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3301      	adds	r3, #1
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	b2ca      	uxtb	r2, r1
 80023b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	0c19      	lsrs	r1, r3, #16
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3302      	adds	r3, #2
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	b2ca      	uxtb	r2, r1
 80023c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	0e19      	lsrs	r1, r3, #24
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3303      	adds	r3, #3
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	4413      	add	r3, r2
 80023d6:	b2ca      	uxtb	r2, r1
 80023d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	61fb      	str	r3, [r7, #28]
      return offset;
 80023e0:	69fb      	ldr	r3, [r7, #28]
    }
 80023e2:	4618      	mov	r0, r3
 80023e4:	3720      	adds	r7, #32
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b08a      	sub	sp, #40	; 0x28
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b29a      	uxth	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	889b      	ldrh	r3, [r3, #4]
 800240a:	b21a      	sxth	r2, r3
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	3301      	adds	r3, #1
 8002410:	6839      	ldr	r1, [r7, #0]
 8002412:	440b      	add	r3, r1
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	b21b      	sxth	r3, r3
 800241a:	4313      	orrs	r3, r2
 800241c:	b21b      	sxth	r3, r3
 800241e:	b29a      	uxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	3302      	adds	r3, #2
 8002428:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	441a      	add	r2, r3
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f001 fe72 	bl	8004120 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	3304      	adds	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	4413      	add	r3, r2
 800244c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244e:	429a      	cmp	r2, r3
 8002450:	d20c      	bcs.n	800246c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	441a      	add	r2, r3
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	3b01      	subs	r3, #1
 800245c:	6839      	ldr	r1, [r7, #0]
 800245e:	440b      	add	r3, r1
 8002460:	7812      	ldrb	r2, [r2, #0]
 8002462:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	3301      	adds	r3, #1
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	e7ec      	b.n	8002446 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	4413      	add	r3, r2
 8002472:	3b01      	subs	r3, #1
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	4413      	add	r3, r2
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	3b01      	subs	r3, #1
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	441a      	add	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	4413      	add	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	441a      	add	r2, r3
 8002496:	f107 0310 	add.w	r3, r7, #16
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f001 fe3f 	bl	8004120 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	3304      	adds	r3, #4
 80024a6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	623b      	str	r3, [r7, #32]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	6a3a      	ldr	r2, [r7, #32]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d20c      	bcs.n	80024d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	441a      	add	r2, r3
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	6839      	ldr	r1, [r7, #0]
 80024c4:	440b      	add	r3, r1
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	3301      	adds	r3, #1
 80024ce:	623b      	str	r3, [r7, #32]
 80024d0:	e7ec      	b.n	80024ac <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4413      	add	r3, r2
 80024d8:	3b01      	subs	r3, #1
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	441a      	add	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	441a      	add	r2, r3
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f001 fe0c 	bl	8004120 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	3304      	adds	r3, #4
 800250c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	429a      	cmp	r2, r3
 800251c:	d20c      	bcs.n	8002538 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	441a      	add	r2, r3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	3b01      	subs	r3, #1
 8002528:	6839      	ldr	r1, [r7, #0]
 800252a:	440b      	add	r3, r1
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	3301      	adds	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e7ec      	b.n	8002512 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4413      	add	r3, r2
 800253e:	3b01      	subs	r3, #1
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	4413      	add	r3, r2
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	3b01      	subs	r3, #1
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	441a      	add	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4413      	add	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	6839      	ldr	r1, [r7, #0]
 8002566:	440a      	add	r2, r1
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	4313      	orrs	r3, r2
 800256c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	3301      	adds	r3, #1
 8002574:	6839      	ldr	r1, [r7, #0]
 8002576:	440b      	add	r3, r1
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	4313      	orrs	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	3302      	adds	r3, #2
 8002586:	6839      	ldr	r1, [r7, #0]
 8002588:	440b      	add	r3, r1
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	041b      	lsls	r3, r3, #16
 800258e:	4313      	orrs	r3, r2
 8002590:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	3303      	adds	r3, #3
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	440b      	add	r3, r1
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	061b      	lsls	r3, r3, #24
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	3304      	adds	r3, #4
 80025ae:	61bb      	str	r3, [r7, #24]
     return offset;
 80025b0:	69bb      	ldr	r3, [r7, #24]
    }
 80025b2:	4618      	mov	r0, r3
 80025b4:	3728      	adds	r7, #40	; 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	0800f214 	.word	0x0800f214

080025d8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	0800f230 	.word	0x0800f230

080025f4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fd34 	bl	800206c <_ZN3ros3MsgC1Ev>
 8002604:	4a06      	ldr	r2, [pc, #24]	; (8002620 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	711a      	strb	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002614:	609a      	str	r2, [r3, #8]
    {
    }
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	0800f4ac 	.word	0x0800f4ac
 8002624:	0800f210 	.word	0x0800f210

08002628 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	4413      	add	r3, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	7912      	ldrb	r2, [r2, #4]
 8002640:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3301      	adds	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd fe5f 	bl	8000310 <strlen>
 8002652:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	4413      	add	r3, r2
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	4618      	mov	r0, r3
 800265e:	f001 fd41 	bl	80040e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3304      	adds	r3, #4
 8002666:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	18d0      	adds	r0, r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	4619      	mov	r1, r3
 8002676:	f00c fc0d 	bl	800ee94 <memcpy>
      offset += length_msg;
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	4413      	add	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
      return offset;
 8002682:	68fb      	ldr	r3, [r7, #12]
    }
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	781a      	ldrb	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	3301      	adds	r3, #1
 80026aa:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	441a      	add	r2, r3
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 fd31 	bl	8004120 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	3304      	adds	r3, #4
 80026c2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4413      	add	r3, r2
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d20c      	bcs.n	80026ee <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	441a      	add	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3b01      	subs	r3, #1
 80026de:	6839      	ldr	r1, [r7, #0]
 80026e0:	440b      	add	r3, r1
 80026e2:	7812      	ldrb	r2, [r2, #0]
 80026e4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	3301      	adds	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	e7ec      	b.n	80026c8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4413      	add	r3, r2
 80026f4:	3b01      	subs	r3, #1
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	4413      	add	r3, r2
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	3b01      	subs	r3, #1
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	441a      	add	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4413      	add	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
     return offset;
 8002712:	693b      	ldr	r3, [r7, #16]
    }
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	0800f254 	.word	0x0800f254

08002738 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	0800f268 	.word	0x0800f268

08002754 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fc84 	bl	800206c <_ZN3ros3MsgC1Ev>
 8002764:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	619a      	str	r2, [r3, #24]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	61da      	str	r2, [r3, #28]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	0800f494 	.word	0x0800f494

0800279c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	b2ca      	uxtb	r2, r1
 80027b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	0a19      	lsrs	r1, r3, #8
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	3301      	adds	r3, #1
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	b2ca      	uxtb	r2, r1
 80027c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	0c19      	lsrs	r1, r3, #16
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	3302      	adds	r3, #2
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	b2ca      	uxtb	r2, r1
 80027da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	0e19      	lsrs	r1, r3, #24
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	3303      	adds	r3, #3
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	b2ca      	uxtb	r2, r1
 80027ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	3304      	adds	r3, #4
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80027f4:	2300      	movs	r3, #0
 80027f6:	623b      	str	r3, [r7, #32]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	6a3a      	ldr	r2, [r7, #32]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d22b      	bcs.n	800285a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002810:	6939      	ldr	r1, [r7, #16]
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	4413      	add	r3, r2
 8002818:	b2ca      	uxtb	r2, r1
 800281a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	0a19      	lsrs	r1, r3, #8
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	3301      	adds	r3, #1
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	4413      	add	r3, r2
 8002828:	b2ca      	uxtb	r2, r1
 800282a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	0c19      	lsrs	r1, r3, #16
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	3302      	adds	r3, #2
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	4413      	add	r3, r2
 8002838:	b2ca      	uxtb	r2, r1
 800283a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	0e19      	lsrs	r1, r3, #24
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	3303      	adds	r3, #3
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	4413      	add	r3, r2
 8002848:	b2ca      	uxtb	r2, r1
 800284a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	3304      	adds	r3, #4
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	3301      	adds	r3, #1
 8002856:	623b      	str	r3, [r7, #32]
 8002858:	e7ce      	b.n	80027f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6919      	ldr	r1, [r3, #16]
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	4413      	add	r3, r2
 8002864:	b2ca      	uxtb	r2, r1
 8002866:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	0a19      	lsrs	r1, r3, #8
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	3301      	adds	r3, #1
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	4413      	add	r3, r2
 8002876:	b2ca      	uxtb	r2, r1
 8002878:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	0c19      	lsrs	r1, r3, #16
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	3302      	adds	r3, #2
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	4413      	add	r3, r2
 8002888:	b2ca      	uxtb	r2, r1
 800288a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	0e19      	lsrs	r1, r3, #24
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	3303      	adds	r3, #3
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	4413      	add	r3, r2
 800289a:	b2ca      	uxtb	r2, r1
 800289c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	3304      	adds	r3, #4
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d22b      	bcs.n	800290a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80028c0:	68f9      	ldr	r1, [r7, #12]
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	b2ca      	uxtb	r2, r1
 80028ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	0a19      	lsrs	r1, r3, #8
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	3301      	adds	r3, #1
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	b2ca      	uxtb	r2, r1
 80028da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	0c19      	lsrs	r1, r3, #16
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	3302      	adds	r3, #2
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	b2ca      	uxtb	r2, r1
 80028ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	0e19      	lsrs	r1, r3, #24
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	3303      	adds	r3, #3
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	b2ca      	uxtb	r2, r1
 80028fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	3304      	adds	r3, #4
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3301      	adds	r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	e7ce      	b.n	80028a8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69d9      	ldr	r1, [r3, #28]
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	4413      	add	r3, r2
 8002914:	b2ca      	uxtb	r2, r1
 8002916:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	0a19      	lsrs	r1, r3, #8
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	3301      	adds	r3, #1
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	4413      	add	r3, r2
 8002926:	b2ca      	uxtb	r2, r1
 8002928:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	0c19      	lsrs	r1, r3, #16
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	3302      	adds	r3, #2
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	4413      	add	r3, r2
 8002938:	b2ca      	uxtb	r2, r1
 800293a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	0e19      	lsrs	r1, r3, #24
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	3303      	adds	r3, #3
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	4413      	add	r3, r2
 800294a:	b2ca      	uxtb	r2, r1
 800294c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	3304      	adds	r3, #4
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002954:	2300      	movs	r3, #0
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	429a      	cmp	r2, r3
 8002960:	d228      	bcs.n	80029b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fcce 	bl	8000310 <strlen>
 8002974:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	4413      	add	r3, r2
 800297c:	6979      	ldr	r1, [r7, #20]
 800297e:	4618      	mov	r0, r3
 8002980:	f001 fbb0 	bl	80040e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	3304      	adds	r3, #4
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	18d0      	adds	r0, r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4619      	mov	r1, r3
 80029a0:	f00c fa78 	bl	800ee94 <memcpy>
      offset += length_stringsi;
 80029a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	4413      	add	r3, r2
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	3301      	adds	r3, #1
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	e7d1      	b.n	8002958 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80029b6:	4618      	mov	r0, r3
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80029be:	b580      	push	{r7, lr}
 80029c0:	b08e      	sub	sp, #56	; 0x38
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80029cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80029d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d8:	3301      	adds	r3, #1
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	4413      	add	r3, r2
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	6a3a      	ldr	r2, [r7, #32]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80029e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ea:	3302      	adds	r3, #2
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	4413      	add	r3, r2
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	6a3a      	ldr	r2, [r7, #32]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80029fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fc:	3303      	adds	r3, #3
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	4413      	add	r3, r2
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	6a3a      	ldr	r2, [r7, #32]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0e:	3304      	adds	r3, #4
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	6a3a      	ldr	r2, [r7, #32]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d90a      	bls.n	8002a32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4619      	mov	r1, r3
 8002a26:	4610      	mov	r0, r2
 8002a28:	f00c fa4a 	bl	800eec0 <realloc>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a3a      	ldr	r2, [r7, #32]
 8002a36:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a38:	2300      	movs	r3, #0
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d236      	bcs.n	8002ab4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a4e:	6839      	ldr	r1, [r7, #0]
 8002a50:	440a      	add	r2, r1
 8002a52:	7812      	ldrb	r2, [r2, #0]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	6839      	ldr	r1, [r7, #0]
 8002a60:	440b      	add	r3, r1
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6e:	3302      	adds	r3, #2
 8002a70:	6839      	ldr	r1, [r7, #0]
 8002a72:	440b      	add	r3, r1
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a80:	3303      	adds	r3, #3
 8002a82:	6839      	ldr	r1, [r7, #0]
 8002a84:	440b      	add	r3, r1
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a96:	3304      	adds	r3, #4
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	3208      	adds	r2, #8
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	3301      	adds	r3, #1
 8002ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ab2:	e7c3      	b.n	8002a3c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	041b      	lsls	r3, r3, #16
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae4:	3303      	adds	r3, #3
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	4413      	add	r3, r2
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af6:	3304      	adds	r3, #4
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d90a      	bls.n	8002b1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699a      	ldr	r2, [r3, #24]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	f00c f9d6 	bl	800eec0 <realloc>
 8002b14:	4602      	mov	r2, r0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b20:	2300      	movs	r3, #0
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d236      	bcs.n	8002b9c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b36:	6839      	ldr	r1, [r7, #0]
 8002b38:	440a      	add	r2, r1
 8002b3a:	7812      	ldrb	r2, [r2, #0]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b44:	3301      	adds	r3, #1
 8002b46:	6839      	ldr	r1, [r7, #0]
 8002b48:	440b      	add	r3, r1
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b56:	3302      	adds	r3, #2
 8002b58:	6839      	ldr	r1, [r7, #0]
 8002b5a:	440b      	add	r3, r1
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b68:	3303      	adds	r3, #3
 8002b6a:	6839      	ldr	r1, [r7, #0]
 8002b6c:	440b      	add	r3, r1
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7e:	3304      	adds	r3, #4
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	3214      	adds	r2, #20
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	3301      	adds	r3, #1
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9a:	e7c3      	b.n	8002b24 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba8:	3301      	adds	r3, #1
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	4413      	add	r3, r2
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bba:	3302      	adds	r3, #2
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	3303      	adds	r3, #3
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	061b      	lsls	r3, r3, #24
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bde:	3304      	adds	r3, #4
 8002be0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d90a      	bls.n	8002c02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f00c f962 	bl	800eec0 <realloc>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d23f      	bcs.n	8002c96 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	441a      	add	r2, r3
 8002c1c:	f107 030c 	add.w	r3, r7, #12
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f001 fa7c 	bl	8004120 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
 8002c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d20c      	bcs.n	8002c58 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	441a      	add	r2, r3
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	3b01      	subs	r3, #1
 8002c48:	6839      	ldr	r1, [r7, #0]
 8002c4a:	440b      	add	r3, r1
 8002c4c:	7812      	ldrb	r2, [r2, #0]
 8002c4e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	3301      	adds	r3, #1
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
 8002c56:	e7ec      	b.n	8002c32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002c58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	441a      	add	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4413      	add	r3, r2
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	3220      	adds	r2, #32
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c90:	3301      	adds	r3, #1
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c94:	e7ba      	b.n	8002c0c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3738      	adds	r7, #56	; 0x38
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	0800f3b8 	.word	0x0800f3b8

08002cbc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	0800f28c 	.word	0x0800f28c

08002cd8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	611a      	str	r2, [r3, #16]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68d8      	ldr	r0, [r3, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6891      	ldr	r1, [r2, #8]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	4798      	blx	r3
 8002d24:	4603      	mov	r3, r0
  };
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
  }
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a42      	ldr	r2, [pc, #264]	; (8002e64 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d068      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a40      	ldr	r2, [pc, #256]	; (8002e68 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d061      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a3d      	ldr	r2, [pc, #244]	; (8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d05a      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a3b      	ldr	r2, [pc, #236]	; (8002e70 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d053      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a38      	ldr	r2, [pc, #224]	; (8002e74 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d04c      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a36      	ldr	r2, [pc, #216]	; (8002e78 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d045      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a33      	ldr	r2, [pc, #204]	; (8002e7c <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d03e      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a31      	ldr	r2, [pc, #196]	; (8002e80 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d037      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a2e      	ldr	r2, [pc, #184]	; (8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d030      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2c      	ldr	r2, [pc, #176]	; (8002e88 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d029      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a29      	ldr	r2, [pc, #164]	; (8002e8c <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d022      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a27      	ldr	r2, [pc, #156]	; (8002e90 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d01b      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a24      	ldr	r2, [pc, #144]	; (8002e94 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d014      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a22      	ldr	r2, [pc, #136]	; (8002e98 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00d      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d006      	beq.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d109      	bne.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e42:	e008      	b.n	8002e56 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40020010 	.word	0x40020010
 8002e68:	40020028 	.word	0x40020028
 8002e6c:	40020040 	.word	0x40020040
 8002e70:	40020058 	.word	0x40020058
 8002e74:	40020070 	.word	0x40020070
 8002e78:	40020088 	.word	0x40020088
 8002e7c:	400200a0 	.word	0x400200a0
 8002e80:	400200b8 	.word	0x400200b8
 8002e84:	40020410 	.word	0x40020410
 8002e88:	40020428 	.word	0x40020428
 8002e8c:	40020440 	.word	0x40020440
 8002e90:	40020458 	.word	0x40020458
 8002e94:	40020470 	.word	0x40020470
 8002e98:	40020488 	.word	0x40020488
 8002e9c:	400204a0 	.word	0x400204a0
 8002ea0:	400204b8 	.word	0x400204b8

08002ea4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	6093      	str	r3, [r2, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60d3      	str	r3, [r2, #12]
    }
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	240003d8 	.word	0x240003d8

08002ee4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f804 	bl	8002efa <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f009 ff42 	bl	800cd98 <HAL_UART_Receive_DMA>
    }
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_ZN13STM32Hardware4readEv>:

    int read(){
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f28:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ff09 	bl	8002d48 <_ZN13STM32Hardware10getRdmaIndEv>
 8002f36:	4603      	mov	r3, r0
 8002f38:	429c      	cmp	r4, r3
 8002f3a:	bf14      	ite	ne
 8002f3c:	2301      	movne	r3, #1
 8002f3e:	2300      	moveq	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d012      	beq.n	8002f6c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002f4c:	1c59      	adds	r1, r3, #1
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	791b      	ldrb	r3, [r3, #4]
 8002f5a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002f62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
    }
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd90      	pop	{r4, r7, pc}
	...

08002f78 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d108      	bne.n	8002f9e <_ZN13STM32Hardware5flushEv+0x26>
 8002f8c:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	f083 0301 	eor.w	r3, r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <_ZN13STM32Hardware5flushEv+0x26>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <_ZN13STM32Hardware5flushEv+0x28>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d049      	beq.n	8003038 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002fa4:	4b26      	ldr	r3, [pc, #152]	; (8003040 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d039      	beq.n	8003032 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d20c      	bcs.n	8002fec <_ZN13STM32Hardware5flushEv+0x74>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	e007      	b.n	8002ffc <_ZN13STM32Hardware5flushEv+0x84>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	89fa      	ldrh	r2, [r7, #14]
 8003014:	4619      	mov	r1, r3
 8003016:	f009 fe2d 	bl	800cc74 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	89fb      	ldrh	r3, [r7, #14]
 8003024:	4413      	add	r3, r2
 8003026:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003030:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8003032:	4b03      	ldr	r3, [pc, #12]	; (8003040 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
      }
    }
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	240006b8 	.word	0x240006b8

08003044 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
      int n = length;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800305a:	bfa8      	it	ge
 800305c:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8003060:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	4293      	cmp	r3, r2
 8003072:	bf28      	it	cs
 8003074:	4613      	movcs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	4618      	mov	r0, r3
 800308e:	f00b ff01 	bl	800ee94 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	4413      	add	r3, r2
 800309e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030a8:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d00b      	beq.n	80030ca <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f603 0008 	addw	r0, r3, #2056	; 0x808
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	18d1      	adds	r1, r2, r3
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	f00b fee5 	bl	800ee94 <memcpy>
      }

      flush();
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7ff ff54 	bl	8002f78 <_ZN13STM32Hardware5flushEv>
    }
 80030d0:	bf00      	nop
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	f002 fd02 	bl	8005ae8 <HAL_GetTick>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
      data(0)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe ffb6 	bl	800206c <_ZN3ros3MsgC1Ev>
 8003100:	4a07      	ldr	r2, [pc, #28]	; (8003120 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	0800f450 	.word	0x0800f450

08003124 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003138:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 800313c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003140:	6979      	ldr	r1, [r7, #20]
 8003142:	6838      	ldr	r0, [r7, #0]
 8003144:	4401      	add	r1, r0
 8003146:	b2d3      	uxtb	r3, r2
 8003148:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800314a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	0a02      	lsrs	r2, r0, #8
 8003158:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800315c:	0a0b      	lsrs	r3, r1, #8
 800315e:	6979      	ldr	r1, [r7, #20]
 8003160:	3101      	adds	r1, #1
 8003162:	6838      	ldr	r0, [r7, #0]
 8003164:	4401      	add	r1, r0
 8003166:	b2d3      	uxtb	r3, r2
 8003168:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800316a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	0c02      	lsrs	r2, r0, #16
 8003178:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800317c:	0c0b      	lsrs	r3, r1, #16
 800317e:	6979      	ldr	r1, [r7, #20]
 8003180:	3102      	adds	r1, #2
 8003182:	6838      	ldr	r0, [r7, #0]
 8003184:	4401      	add	r1, r0
 8003186:	b2d3      	uxtb	r3, r2
 8003188:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800318a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	0e02      	lsrs	r2, r0, #24
 8003198:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800319c:	0e0b      	lsrs	r3, r1, #24
 800319e:	6979      	ldr	r1, [r7, #20]
 80031a0:	3103      	adds	r1, #3
 80031a2:	6838      	ldr	r0, [r7, #0]
 80031a4:	4401      	add	r1, r0
 80031a6:	b2d3      	uxtb	r3, r2
 80031a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80031aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	000a      	movs	r2, r1
 80031b8:	2300      	movs	r3, #0
 80031ba:	6979      	ldr	r1, [r7, #20]
 80031bc:	3104      	adds	r1, #4
 80031be:	6838      	ldr	r0, [r7, #0]
 80031c0:	4401      	add	r1, r0
 80031c2:	b2d3      	uxtb	r3, r2
 80031c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80031c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	0a0a      	lsrs	r2, r1, #8
 80031d4:	2300      	movs	r3, #0
 80031d6:	6979      	ldr	r1, [r7, #20]
 80031d8:	3105      	adds	r1, #5
 80031da:	6838      	ldr	r0, [r7, #0]
 80031dc:	4401      	add	r1, r0
 80031de:	b2d3      	uxtb	r3, r2
 80031e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80031e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	0c0a      	lsrs	r2, r1, #16
 80031f0:	2300      	movs	r3, #0
 80031f2:	6979      	ldr	r1, [r7, #20]
 80031f4:	3106      	adds	r1, #6
 80031f6:	6838      	ldr	r0, [r7, #0]
 80031f8:	4401      	add	r1, r0
 80031fa:	b2d3      	uxtb	r3, r2
 80031fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 80031fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	0e0a      	lsrs	r2, r1, #24
 800320c:	2300      	movs	r3, #0
 800320e:	6979      	ldr	r1, [r7, #20]
 8003210:	3107      	adds	r1, #7
 8003212:	6838      	ldr	r0, [r7, #0]
 8003214:	4401      	add	r1, r0
 8003216:	b2d3      	uxtb	r3, r2
 8003218:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	3308      	adds	r3, #8
 800321e:	617b      	str	r3, [r7, #20]
      return offset;
 8003220:	697b      	ldr	r3, [r7, #20]
    }
 8003222:	4618      	mov	r0, r3
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800322e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003232:	b0a3      	sub	sp, #140	; 0x8c
 8003234:	af00      	add	r7, sp, #0
 8003236:	6778      	str	r0, [r7, #116]	; 0x74
 8003238:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800324c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003250:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003254:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003256:	4413      	add	r3, r2
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2200      	movs	r2, #0
 800325e:	461c      	mov	r4, r3
 8003260:	4615      	mov	r5, r2
 8003262:	ea40 0804 	orr.w	r8, r0, r4
 8003266:	ea41 0905 	orr.w	r9, r1, r5
 800326a:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800326e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800327a:	4413      	add	r3, r2
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2200      	movs	r2, #0
 8003282:	469a      	mov	sl, r3
 8003284:	4693      	mov	fp, r2
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003292:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003296:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800329a:	ea40 0402 	orr.w	r4, r0, r2
 800329e:	66bc      	str	r4, [r7, #104]	; 0x68
 80032a0:	430b      	orrs	r3, r1
 80032a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032a4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80032a8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80032ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032b4:	1c9a      	adds	r2, r3, #2
 80032b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032b8:	4413      	add	r3, r2
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2200      	movs	r2, #0
 80032c0:	663b      	str	r3, [r7, #96]	; 0x60
 80032c2:	667a      	str	r2, [r7, #100]	; 0x64
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032d0:	464c      	mov	r4, r9
 80032d2:	0423      	lsls	r3, r4, #16
 80032d4:	4644      	mov	r4, r8
 80032d6:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80032da:	4644      	mov	r4, r8
 80032dc:	0422      	lsls	r2, r4, #16
 80032de:	ea40 0402 	orr.w	r4, r0, r2
 80032e2:	65bc      	str	r4, [r7, #88]	; 0x58
 80032e4:	430b      	orrs	r3, r1
 80032e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032e8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80032ec:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80032f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032f8:	1cda      	adds	r2, r3, #3
 80032fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032fc:	4413      	add	r3, r2
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2200      	movs	r2, #0
 8003304:	653b      	str	r3, [r7, #80]	; 0x50
 8003306:	657a      	str	r2, [r7, #84]	; 0x54
 8003308:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800330c:	4623      	mov	r3, r4
 800330e:	0a1b      	lsrs	r3, r3, #8
 8003310:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003312:	4623      	mov	r3, r4
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	64bb      	str	r3, [r7, #72]	; 0x48
 8003318:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800331c:	4623      	mov	r3, r4
 800331e:	4303      	orrs	r3, r0
 8003320:	643b      	str	r3, [r7, #64]	; 0x40
 8003322:	462b      	mov	r3, r5
 8003324:	430b      	orrs	r3, r1
 8003326:	647b      	str	r3, [r7, #68]	; 0x44
 8003328:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800332c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003330:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003338:	1d1a      	adds	r2, r3, #4
 800333a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800333c:	4413      	add	r3, r2
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2200      	movs	r2, #0
 8003344:	63bb      	str	r3, [r7, #56]	; 0x38
 8003346:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003352:	0023      	movs	r3, r4
 8003354:	2200      	movs	r2, #0
 8003356:	ea40 0402 	orr.w	r4, r0, r2
 800335a:	633c      	str	r4, [r7, #48]	; 0x30
 800335c:	430b      	orrs	r3, r1
 800335e:	637b      	str	r3, [r7, #52]	; 0x34
 8003360:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003364:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003368:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800336c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003370:	1d5a      	adds	r2, r3, #5
 8003372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003374:	4413      	add	r3, r2
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2200      	movs	r2, #0
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
 800337e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800338a:	0223      	lsls	r3, r4, #8
 800338c:	2200      	movs	r2, #0
 800338e:	ea40 0402 	orr.w	r4, r0, r2
 8003392:	623c      	str	r4, [r7, #32]
 8003394:	430b      	orrs	r3, r1
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
 8003398:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800339c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80033a0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033a8:	3306      	adds	r3, #6
 80033aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80033ac:	4413      	add	r3, r2
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2200      	movs	r2, #0
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	61fa      	str	r2, [r7, #28]
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	69bc      	ldr	r4, [r7, #24]
 80033c2:	0423      	lsls	r3, r4, #16
 80033c4:	2200      	movs	r2, #0
 80033c6:	ea40 0402 	orr.w	r4, r0, r2
 80033ca:	613c      	str	r4, [r7, #16]
 80033cc:	430b      	orrs	r3, r1
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80033d4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80033d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033e0:	3307      	adds	r3, #7
 80033e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80033e4:	4413      	add	r3, r2
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2200      	movs	r2, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	60fa      	str	r2, [r7, #12]
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	68bc      	ldr	r4, [r7, #8]
 80033fa:	0623      	lsls	r3, r4, #24
 80033fc:	2200      	movs	r2, #0
 80033fe:	ea40 0402 	orr.w	r4, r0, r2
 8003402:	603c      	str	r4, [r7, #0]
 8003404:	430b      	orrs	r3, r1
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	e9d7 3400 	ldrd	r3, r4, [r7]
 800340c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003410:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003414:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003416:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 800341a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800341e:	3308      	adds	r3, #8
 8003420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8003428:	4618      	mov	r0, r3
 800342a:	378c      	adds	r7, #140	; 0x8c
 800342c:	46bd      	mov	sp, r7
 800342e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003432:	4770      	bx	lr

08003434 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <_ZN8std_msgs5Int647getTypeEv+0x18>)
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	0800f2b0 	.word	0x0800f2b0

08003450 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	0800f2c0 	.word	0x0800f2c0

0800346c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe fdf8 	bl	800206c <_ZN3ros3MsgC1Ev>
 800347c:	4a0e      	ldr	r2, [pc, #56]	; (80034b8 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	0800f438 	.word	0x0800f438

080034bc <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80034bc:	b480      	push	{r7}
 80034be:	b08b      	sub	sp, #44	; 0x2c
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80034d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80034d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034da:	6838      	ldr	r0, [r7, #0]
 80034dc:	4401      	add	r1, r0
 80034de:	b2d3      	uxtb	r3, r2
 80034e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80034e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	0a02      	lsrs	r2, r0, #8
 80034f0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80034f4:	0a0b      	lsrs	r3, r1, #8
 80034f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034f8:	3101      	adds	r1, #1
 80034fa:	6838      	ldr	r0, [r7, #0]
 80034fc:	4401      	add	r1, r0
 80034fe:	b2d3      	uxtb	r3, r2
 8003500:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003502:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	0c02      	lsrs	r2, r0, #16
 8003510:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003514:	0c0b      	lsrs	r3, r1, #16
 8003516:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003518:	3102      	adds	r1, #2
 800351a:	6838      	ldr	r0, [r7, #0]
 800351c:	4401      	add	r1, r0
 800351e:	b2d3      	uxtb	r3, r2
 8003520:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003522:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	0e02      	lsrs	r2, r0, #24
 8003530:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003534:	0e0b      	lsrs	r3, r1, #24
 8003536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003538:	3103      	adds	r1, #3
 800353a:	6838      	ldr	r0, [r7, #0]
 800353c:	4401      	add	r1, r0
 800353e:	b2d3      	uxtb	r3, r2
 8003540:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003542:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	000a      	movs	r2, r1
 8003550:	2300      	movs	r3, #0
 8003552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003554:	3104      	adds	r1, #4
 8003556:	6838      	ldr	r0, [r7, #0]
 8003558:	4401      	add	r1, r0
 800355a:	b2d3      	uxtb	r3, r2
 800355c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800355e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	0a0a      	lsrs	r2, r1, #8
 800356c:	2300      	movs	r3, #0
 800356e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003570:	3105      	adds	r1, #5
 8003572:	6838      	ldr	r0, [r7, #0]
 8003574:	4401      	add	r1, r0
 8003576:	b2d3      	uxtb	r3, r2
 8003578:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800357a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	0c0a      	lsrs	r2, r1, #16
 8003588:	2300      	movs	r3, #0
 800358a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800358c:	3106      	adds	r1, #6
 800358e:	6838      	ldr	r0, [r7, #0]
 8003590:	4401      	add	r1, r0
 8003592:	b2d3      	uxtb	r3, r2
 8003594:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003596:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	0e0a      	lsrs	r2, r1, #24
 80035a4:	2300      	movs	r3, #0
 80035a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a8:	3107      	adds	r1, #7
 80035aa:	6838      	ldr	r0, [r7, #0]
 80035ac:	4401      	add	r1, r0
 80035ae:	b2d3      	uxtb	r3, r2
 80035b0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	3308      	adds	r3, #8
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80035be:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80035c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035c8:	6838      	ldr	r0, [r7, #0]
 80035ca:	4401      	add	r1, r0
 80035cc:	b2d3      	uxtb	r3, r2
 80035ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80035d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	0a02      	lsrs	r2, r0, #8
 80035de:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80035e2:	0a0b      	lsrs	r3, r1, #8
 80035e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e6:	3101      	adds	r1, #1
 80035e8:	6838      	ldr	r0, [r7, #0]
 80035ea:	4401      	add	r1, r0
 80035ec:	b2d3      	uxtb	r3, r2
 80035ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80035f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	0c02      	lsrs	r2, r0, #16
 80035fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003602:	0c0b      	lsrs	r3, r1, #16
 8003604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003606:	3102      	adds	r1, #2
 8003608:	6838      	ldr	r0, [r7, #0]
 800360a:	4401      	add	r1, r0
 800360c:	b2d3      	uxtb	r3, r2
 800360e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003610:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	0e02      	lsrs	r2, r0, #24
 800361e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003622:	0e0b      	lsrs	r3, r1, #24
 8003624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003626:	3103      	adds	r1, #3
 8003628:	6838      	ldr	r0, [r7, #0]
 800362a:	4401      	add	r1, r0
 800362c:	b2d3      	uxtb	r3, r2
 800362e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003630:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	000a      	movs	r2, r1
 800363e:	2300      	movs	r3, #0
 8003640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003642:	3104      	adds	r1, #4
 8003644:	6838      	ldr	r0, [r7, #0]
 8003646:	4401      	add	r1, r0
 8003648:	b2d3      	uxtb	r3, r2
 800364a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800364c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	0a0a      	lsrs	r2, r1, #8
 800365a:	2300      	movs	r3, #0
 800365c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800365e:	3105      	adds	r1, #5
 8003660:	6838      	ldr	r0, [r7, #0]
 8003662:	4401      	add	r1, r0
 8003664:	b2d3      	uxtb	r3, r2
 8003666:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003668:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	0c0a      	lsrs	r2, r1, #16
 8003676:	2300      	movs	r3, #0
 8003678:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800367a:	3106      	adds	r1, #6
 800367c:	6838      	ldr	r0, [r7, #0]
 800367e:	4401      	add	r1, r0
 8003680:	b2d3      	uxtb	r3, r2
 8003682:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003684:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	0e0a      	lsrs	r2, r1, #24
 8003692:	2300      	movs	r3, #0
 8003694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003696:	3107      	adds	r1, #7
 8003698:	6838      	ldr	r0, [r7, #0]
 800369a:	4401      	add	r1, r0
 800369c:	b2d3      	uxtb	r3, r2
 800369e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	3308      	adds	r3, #8
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80036ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80036b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036b6:	6838      	ldr	r0, [r7, #0]
 80036b8:	4401      	add	r1, r0
 80036ba:	b2d3      	uxtb	r3, r2
 80036bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80036be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	0a02      	lsrs	r2, r0, #8
 80036cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80036d0:	0a0b      	lsrs	r3, r1, #8
 80036d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d4:	3101      	adds	r1, #1
 80036d6:	6838      	ldr	r0, [r7, #0]
 80036d8:	4401      	add	r1, r0
 80036da:	b2d3      	uxtb	r3, r2
 80036dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80036de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	0c02      	lsrs	r2, r0, #16
 80036ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036f0:	0c0b      	lsrs	r3, r1, #16
 80036f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f4:	3102      	adds	r1, #2
 80036f6:	6838      	ldr	r0, [r7, #0]
 80036f8:	4401      	add	r1, r0
 80036fa:	b2d3      	uxtb	r3, r2
 80036fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80036fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	0e02      	lsrs	r2, r0, #24
 800370c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003710:	0e0b      	lsrs	r3, r1, #24
 8003712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003714:	3103      	adds	r1, #3
 8003716:	6838      	ldr	r0, [r7, #0]
 8003718:	4401      	add	r1, r0
 800371a:	b2d3      	uxtb	r3, r2
 800371c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800371e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	000a      	movs	r2, r1
 800372c:	2300      	movs	r3, #0
 800372e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003730:	3104      	adds	r1, #4
 8003732:	6838      	ldr	r0, [r7, #0]
 8003734:	4401      	add	r1, r0
 8003736:	b2d3      	uxtb	r3, r2
 8003738:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800373a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	0a0a      	lsrs	r2, r1, #8
 8003748:	2300      	movs	r3, #0
 800374a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800374c:	3105      	adds	r1, #5
 800374e:	6838      	ldr	r0, [r7, #0]
 8003750:	4401      	add	r1, r0
 8003752:	b2d3      	uxtb	r3, r2
 8003754:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	0c0a      	lsrs	r2, r1, #16
 8003764:	2300      	movs	r3, #0
 8003766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003768:	3106      	adds	r1, #6
 800376a:	6838      	ldr	r0, [r7, #0]
 800376c:	4401      	add	r1, r0
 800376e:	b2d3      	uxtb	r3, r2
 8003770:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003772:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	0e0a      	lsrs	r2, r1, #24
 8003780:	2300      	movs	r3, #0
 8003782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003784:	3107      	adds	r1, #7
 8003786:	6838      	ldr	r0, [r7, #0]
 8003788:	4401      	add	r1, r0
 800378a:	b2d3      	uxtb	r3, r2
 800378c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	3308      	adds	r3, #8
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003796:	4618      	mov	r0, r3
 8003798:	372c      	adds	r7, #44	; 0x2c
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80037a2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80037a6:	b0eb      	sub	sp, #428	; 0x1ac
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80037ae:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037c4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037c8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80037cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037d0:	4413      	add	r3, r2
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2200      	movs	r2, #0
 80037d8:	461c      	mov	r4, r3
 80037da:	4615      	mov	r5, r2
 80037dc:	ea40 0804 	orr.w	r8, r0, r4
 80037e0:	ea41 0905 	orr.w	r9, r1, r5
 80037e4:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037e8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037f6:	4413      	add	r3, r2
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2200      	movs	r2, #0
 80037fe:	469a      	mov	sl, r3
 8003800:	4693      	mov	fp, r2
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800380e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003812:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003816:	ea40 0402 	orr.w	r4, r0, r2
 800381a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800381e:	430b      	orrs	r3, r1
 8003820:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003824:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003828:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800382c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003830:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003834:	1c9a      	adds	r2, r3, #2
 8003836:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800383a:	4413      	add	r3, r2
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2200      	movs	r2, #0
 8003842:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003846:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003856:	464c      	mov	r4, r9
 8003858:	0423      	lsls	r3, r4, #16
 800385a:	4644      	mov	r4, r8
 800385c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003860:	4644      	mov	r4, r8
 8003862:	0422      	lsls	r2, r4, #16
 8003864:	ea40 0402 	orr.w	r4, r0, r2
 8003868:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800386c:	430b      	orrs	r3, r1
 800386e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003872:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003876:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800387a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800387e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003882:	1cda      	adds	r2, r3, #3
 8003884:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003888:	4413      	add	r3, r2
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2200      	movs	r2, #0
 8003890:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003894:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003898:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800389c:	4623      	mov	r3, r4
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80038a4:	4623      	mov	r3, r4
 80038a6:	061b      	lsls	r3, r3, #24
 80038a8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80038ac:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80038b0:	4623      	mov	r3, r4
 80038b2:	4303      	orrs	r3, r0
 80038b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80038b8:	462b      	mov	r3, r5
 80038ba:	430b      	orrs	r3, r1
 80038bc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038c0:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80038c4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80038c8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80038cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038d0:	1d1a      	adds	r2, r3, #4
 80038d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038d6:	4413      	add	r3, r2
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2200      	movs	r2, #0
 80038de:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80038e2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80038f2:	0023      	movs	r3, r4
 80038f4:	2200      	movs	r2, #0
 80038f6:	ea40 0402 	orr.w	r4, r0, r2
 80038fa:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80038fe:	430b      	orrs	r3, r1
 8003900:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003904:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003908:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800390c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003910:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003914:	1d5a      	adds	r2, r3, #5
 8003916:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800391a:	4413      	add	r3, r2
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2200      	movs	r2, #0
 8003922:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003926:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003936:	0223      	lsls	r3, r4, #8
 8003938:	2200      	movs	r2, #0
 800393a:	ea40 0402 	orr.w	r4, r0, r2
 800393e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003942:	430b      	orrs	r3, r1
 8003944:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003948:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800394c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003950:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003954:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003958:	1d9a      	adds	r2, r3, #6
 800395a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800395e:	4413      	add	r3, r2
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2200      	movs	r2, #0
 8003966:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800396a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800397a:	0423      	lsls	r3, r4, #16
 800397c:	2200      	movs	r2, #0
 800397e:	ea40 0402 	orr.w	r4, r0, r2
 8003982:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003986:	430b      	orrs	r3, r1
 8003988:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800398c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003990:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003994:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003998:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800399c:	1dda      	adds	r2, r3, #7
 800399e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039a2:	4413      	add	r3, r2
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80039ae:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80039be:	0623      	lsls	r3, r4, #24
 80039c0:	2200      	movs	r2, #0
 80039c2:	ea40 0402 	orr.w	r4, r0, r2
 80039c6:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80039ca:	430b      	orrs	r3, r1
 80039cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80039d0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80039d4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80039d8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039dc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80039e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80039e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039e8:	3308      	adds	r3, #8
 80039ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80039fa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039fe:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003a02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a06:	4413      	add	r3, r2
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003a12:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003a16:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003a1a:	4623      	mov	r3, r4
 8003a1c:	4303      	orrs	r3, r0
 8003a1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a22:	462b      	mov	r3, r5
 8003a24:	430b      	orrs	r3, r1
 8003a26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a2a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003a2e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a32:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a36:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a40:	4413      	add	r3, r2
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a4c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003a5c:	464c      	mov	r4, r9
 8003a5e:	0223      	lsls	r3, r4, #8
 8003a60:	4644      	mov	r4, r8
 8003a62:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a66:	4644      	mov	r4, r8
 8003a68:	0222      	lsls	r2, r4, #8
 8003a6a:	ea40 0402 	orr.w	r4, r0, r2
 8003a6e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003a72:	430b      	orrs	r3, r1
 8003a74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a78:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003a7c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a80:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a88:	1c9a      	adds	r2, r3, #2
 8003a8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a8e:	4413      	add	r3, r2
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2200      	movs	r2, #0
 8003a96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003aaa:	464c      	mov	r4, r9
 8003aac:	0423      	lsls	r3, r4, #16
 8003aae:	4644      	mov	r4, r8
 8003ab0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003ab4:	4644      	mov	r4, r8
 8003ab6:	0422      	lsls	r2, r4, #16
 8003ab8:	ea40 0402 	orr.w	r4, r0, r2
 8003abc:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ac6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003aca:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ace:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ad2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ad6:	1cda      	adds	r2, r3, #3
 8003ad8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003adc:	4413      	add	r3, r2
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ae8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003aec:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003af0:	4623      	mov	r3, r4
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003af8:	4623      	mov	r3, r4
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b00:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003b04:	4623      	mov	r3, r4
 8003b06:	4303      	orrs	r3, r0
 8003b08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b14:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003b18:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b1c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b24:	1d1a      	adds	r2, r3, #4
 8003b26:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b2a:	4413      	add	r3, r2
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2200      	movs	r2, #0
 8003b32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b36:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003b46:	0023      	movs	r3, r4
 8003b48:	2200      	movs	r2, #0
 8003b4a:	ea40 0402 	orr.w	r4, r0, r2
 8003b4e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003b52:	430b      	orrs	r3, r1
 8003b54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b58:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003b5c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b60:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b68:	1d5a      	adds	r2, r3, #5
 8003b6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b6e:	4413      	add	r3, r2
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2200      	movs	r2, #0
 8003b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b7a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003b8a:	0223      	lsls	r3, r4, #8
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	ea40 0402 	orr.w	r4, r0, r2
 8003b92:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003b96:	430b      	orrs	r3, r1
 8003b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b9c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003ba0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003ba4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ba8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bac:	1d9a      	adds	r2, r3, #6
 8003bae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bb2:	4413      	add	r3, r2
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003bce:	0423      	lsls	r3, r4, #16
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	ea40 0402 	orr.w	r4, r0, r2
 8003bd6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003bda:	430b      	orrs	r3, r1
 8003bdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003be0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003be4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003be8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003bec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bf0:	1dda      	adds	r2, r3, #7
 8003bf2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bf6:	4413      	add	r3, r2
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003c12:	0623      	lsls	r3, r4, #24
 8003c14:	2200      	movs	r2, #0
 8003c16:	ea40 0402 	orr.w	r4, r0, r2
 8003c1a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c24:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003c28:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003c2c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c30:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003c34:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003c38:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c4e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c52:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003c56:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c5a:	4413      	add	r3, r2
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2200      	movs	r2, #0
 8003c62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c66:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c6a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003c6e:	4623      	mov	r3, r4
 8003c70:	4303      	orrs	r3, r0
 8003c72:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c74:	462b      	mov	r3, r5
 8003c76:	430b      	orrs	r3, r1
 8003c78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c7a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003c7e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c82:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c86:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c90:	4413      	add	r3, r2
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2200      	movs	r2, #0
 8003c98:	673b      	str	r3, [r7, #112]	; 0x70
 8003c9a:	677a      	str	r2, [r7, #116]	; 0x74
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ca8:	464c      	mov	r4, r9
 8003caa:	0223      	lsls	r3, r4, #8
 8003cac:	4644      	mov	r4, r8
 8003cae:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cb2:	4644      	mov	r4, r8
 8003cb4:	0222      	lsls	r2, r4, #8
 8003cb6:	ea40 0402 	orr.w	r4, r0, r2
 8003cba:	66bc      	str	r4, [r7, #104]	; 0x68
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cc0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003cc4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003cc8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ccc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cd0:	1c9a      	adds	r2, r3, #2
 8003cd2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cd6:	4413      	add	r3, r2
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2200      	movs	r2, #0
 8003cde:	663b      	str	r3, [r7, #96]	; 0x60
 8003ce0:	667a      	str	r2, [r7, #100]	; 0x64
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cee:	464c      	mov	r4, r9
 8003cf0:	0423      	lsls	r3, r4, #16
 8003cf2:	4644      	mov	r4, r8
 8003cf4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003cf8:	4644      	mov	r4, r8
 8003cfa:	0422      	lsls	r2, r4, #16
 8003cfc:	ea40 0402 	orr.w	r4, r0, r2
 8003d00:	65bc      	str	r4, [r7, #88]	; 0x58
 8003d02:	430b      	orrs	r3, r1
 8003d04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d06:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003d0a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d0e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d16:	1cda      	adds	r2, r3, #3
 8003d18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d1c:	4413      	add	r3, r2
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2200      	movs	r2, #0
 8003d24:	653b      	str	r3, [r7, #80]	; 0x50
 8003d26:	657a      	str	r2, [r7, #84]	; 0x54
 8003d28:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003d2c:	4623      	mov	r3, r4
 8003d2e:	0a1b      	lsrs	r3, r3, #8
 8003d30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d32:	4623      	mov	r3, r4
 8003d34:	061b      	lsls	r3, r3, #24
 8003d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d38:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003d3c:	4623      	mov	r3, r4
 8003d3e:	4303      	orrs	r3, r0
 8003d40:	643b      	str	r3, [r7, #64]	; 0x40
 8003d42:	462b      	mov	r3, r5
 8003d44:	430b      	orrs	r3, r1
 8003d46:	647b      	str	r3, [r7, #68]	; 0x44
 8003d48:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003d4c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003d50:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d58:	1d1a      	adds	r2, r3, #4
 8003d5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d5e:	4413      	add	r3, r2
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2200      	movs	r2, #0
 8003d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003d74:	0023      	movs	r3, r4
 8003d76:	2200      	movs	r2, #0
 8003d78:	ea40 0402 	orr.w	r4, r0, r2
 8003d7c:	633c      	str	r4, [r7, #48]	; 0x30
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
 8003d82:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003d86:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003d8a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d92:	1d5a      	adds	r2, r3, #5
 8003d94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d98:	4413      	add	r3, r2
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2200      	movs	r2, #0
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003dae:	0223      	lsls	r3, r4, #8
 8003db0:	2200      	movs	r2, #0
 8003db2:	ea40 0402 	orr.w	r4, r0, r2
 8003db6:	623c      	str	r4, [r7, #32]
 8003db8:	430b      	orrs	r3, r1
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003dc0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003dc4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003dc8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003dcc:	3306      	adds	r3, #6
 8003dce:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003dd2:	4413      	add	r3, r2
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2200      	movs	r2, #0
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	61fa      	str	r2, [r7, #28]
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	69bc      	ldr	r4, [r7, #24]
 8003de8:	0423      	lsls	r3, r4, #16
 8003dea:	2200      	movs	r2, #0
 8003dec:	ea40 0402 	orr.w	r4, r0, r2
 8003df0:	613c      	str	r4, [r7, #16]
 8003df2:	430b      	orrs	r3, r1
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003dfa:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003dfe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e02:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e06:	3307      	adds	r3, #7
 8003e08:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003e0c:	4413      	add	r3, r2
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2200      	movs	r2, #0
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	60fa      	str	r2, [r7, #12]
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	68bc      	ldr	r4, [r7, #8]
 8003e22:	0623      	lsls	r3, r4, #24
 8003e24:	2200      	movs	r2, #0
 8003e26:	ea40 0402 	orr.w	r4, r0, r2
 8003e2a:	603c      	str	r4, [r7, #0]
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e34:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003e38:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003e3c:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003e40:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003e44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e48:	3308      	adds	r3, #8
 8003e4a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003e4e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003e52:	4618      	mov	r0, r3
 8003e54:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003e5e:	4770      	bx	lr

08003e60 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	0800f2e4 	.word	0x0800f2e4

08003e7c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	0800f2fc 	.word	0x0800f2fc

08003e98 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe f8e2 	bl	800206c <_ZN3ros3MsgC1Ev>
 8003ea8:	4a08      	ldr	r2, [pc, #32]	; (8003ecc <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff fada 	bl	800346c <_ZN13geometry_msgs7Vector3C1Ev>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3328      	adds	r3, #40	; 0x28
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fad5 	bl	800346c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	0800f420 	.word	0x0800f420

08003ed0 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f103 0008 	add.w	r0, r3, #8
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	4413      	add	r3, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	f7ff fae6 	bl	80034bc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	4413      	add	r3, r2
 8003f04:	4619      	mov	r1, r3
 8003f06:	f7ff fad9 	bl	80034bc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
      return offset;
 8003f12:	68fb      	ldr	r3, [r7, #12]
    }
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f103 0008 	add.w	r0, r3, #8
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	4413      	add	r3, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	f7ff fc33 	bl	80037a2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4413      	add	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	4413      	add	r3, r2
 8003f50:	4619      	mov	r1, r3
 8003f52:	f7ff fc26 	bl	80037a2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003f56:	4602      	mov	r2, r0
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
     return offset;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
    }
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	4b03      	ldr	r3, [pc, #12]	; (8003f80 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	0800f320 	.word	0x0800f320

08003f84 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003f8e:	4618      	mov	r0, r3
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	0800f334 	.word	0x0800f334

08003fa0 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE>:
#include "geometry_msgs/Point.h"
#include "STM32Hardware.h"

geometry_msgs::Twist pub_out_msg;
void sub_vel_cb(const geometry_msgs::Twist &msg)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
   get_vel_x = msg.linear.x;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003fae:	490a      	ldr	r1, [pc, #40]	; (8003fd8 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8003fb0:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_y = msg.linear.y;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003fba:	4908      	ldr	r1, [pc, #32]	; (8003fdc <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8003fbc:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_z = msg.angular.z;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003fc6:	4906      	ldr	r1, [pc, #24]	; (8003fe0 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x40>)
 8003fc8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	24000688 	.word	0x24000688
 8003fdc:	24000690 	.word	0x24000690
 8003fe0:	24000698 	.word	0x24000698

08003fe4 <_Z8callbackRKN8std_msgs5Int64E>:

void callback(const std_msgs::Int64 &msg)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
   count = msg.data;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003ff2:	4b04      	ldr	r3, [pc, #16]	; (8004004 <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 8003ff4:	601a      	str	r2, [r3, #0]
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	24000668 	.word	0x24000668

08004008 <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
ros::Subscriber<std_msgs::Int64> sub("counting", callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8004010:	4805      	ldr	r0, [pc, #20]	; (8004028 <HAL_UART_TxCpltCallback+0x20>)
 8004012:	f000 f9ad 	bl	8004370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004016:	4603      	mov	r3, r0
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe ffad 	bl	8002f78 <_ZN13STM32Hardware5flushEv>
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	24000708 	.word	0x24000708

0800402c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8004034:	4805      	ldr	r0, [pc, #20]	; (800404c <HAL_UART_RxCpltCallback+0x20>)
 8004036:	f000 f99b 	bl	8004370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800403a:	4603      	mov	r3, r0
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe ff5c 	bl	8002efa <_ZN13STM32Hardware10reset_rbufEv>
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	24000708 	.word	0x24000708

08004050 <setup>:

void setup(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
    nh.initNode();
 8004054:	4808      	ldr	r0, [pc, #32]	; (8004078 <setup+0x28>)
 8004056:	f000 f997 	bl	8004388 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//    sub_vel = nh.subscribe("/cmd_vel", 1, sub_vel_cb);
//    pub_vel = nh.advertise<geometry_msgs::Twist>("/base_speed", 1);
    nh.subscribe(sub_vel);
 800405a:	4908      	ldr	r1, [pc, #32]	; (800407c <setup+0x2c>)
 800405c:	4806      	ldr	r0, [pc, #24]	; (8004078 <setup+0x28>)
 800405e:	f000 f9bc 	bl	80043da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(sub);
 8004062:	4907      	ldr	r1, [pc, #28]	; (8004080 <setup+0x30>)
 8004064:	4804      	ldr	r0, [pc, #16]	; (8004078 <setup+0x28>)
 8004066:	f000 f9e3 	bl	8004430 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
    nh.advertise(pub_vel);
 800406a:	4906      	ldr	r1, [pc, #24]	; (8004084 <setup+0x34>)
 800406c:	4802      	ldr	r0, [pc, #8]	; (8004078 <setup+0x28>)
 800406e:	f000 fa0a 	bl	8004486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	24000708 	.word	0x24000708
 800407c:	24001c48 	.word	0x24001c48
 8004080:	24001cc0 	.word	0x24001cc0
 8004084:	24001ca8 	.word	0x24001ca8

08004088 <loop>:
void loop(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
    nh.spinOnce();
 800408c:	4802      	ldr	r0, [pc, #8]	; (8004098 <loop+0x10>)
 800408e:	f000 fa2a 	bl	80044e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	24000708 	.word	0x24000708

0800409c <publish_vel>:

void publish_vel(double x, double y, double z)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	ed87 0b04 	vstr	d0, [r7, #16]
 80040a6:	ed87 1b02 	vstr	d1, [r7, #8]
 80040aa:	ed87 2b00 	vstr	d2, [r7]

	pub_out_msg.linear.x = x;
 80040ae:	490b      	ldr	r1, [pc, #44]	; (80040dc <publish_vel+0x40>)
 80040b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pub_out_msg.linear.y = y;
 80040b8:	4908      	ldr	r1, [pc, #32]	; (80040dc <publish_vel+0x40>)
 80040ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040be:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pub_out_msg.angular.z = z;
 80040c2:	4906      	ldr	r1, [pc, #24]	; (80040dc <publish_vel+0x40>)
 80040c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040c8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pub_vel.publish(&pub_out_msg);
 80040cc:	4903      	ldr	r1, [pc, #12]	; (80040dc <publish_vel+0x40>)
 80040ce:	4804      	ldr	r0, [pc, #16]	; (80040e0 <publish_vel+0x44>)
 80040d0:	f7fe fe19 	bl	8002d06 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80040d4:	bf00      	nop
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	240006c0 	.word	0x240006c0
 80040e0:	24001ca8 	.word	0x24001ca8

080040e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d80d      	bhi.n	8004114 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	fa22 f103 	lsr.w	r1, r2, r3
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	b2ca      	uxtb	r2, r1
 800410a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3301      	adds	r3, #1
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	e7ee      	b.n	80040f2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d811      	bhi.n	800415e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6839      	ldr	r1, [r7, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	440a      	add	r2, r1
 8004144:	7812      	ldrb	r2, [r2, #0]
 8004146:	4611      	mov	r1, r2
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	00d2      	lsls	r2, r2, #3
 800414c:	fa01 f202 	lsl.w	r2, r1, r2
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3301      	adds	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e7ea      	b.n	8004134 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800415e:	bf00      	nop
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4618      	mov	r0, r3
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	0800f480 	.word	0x0800f480

0800418c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff ffe8 	bl	800416c <_ZN3ros15NodeHandleBase_C1Ev>
 800419c:	4a47      	ldr	r2, [pc, #284]	; (80042bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3304      	adds	r3, #4
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fe fe7c 	bl	8002ea4 <_ZN13STM32HardwareC1Ev>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	f241 5314 	movw	r3, #5396	; 0x1514
 80041be:	4413      	add	r3, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe fac7 	bl	8002754 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b18      	cmp	r3, #24
 80041ce:	d80b      	bhi.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	2200      	movs	r2, #0
 80041de:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	3301      	adds	r3, #1
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	e7f0      	b.n	80041ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b18      	cmp	r3, #24
 80041f0:	d80a      	bhi.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80041fa:	2100      	movs	r1, #0
 80041fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	3301      	adds	r3, #1
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	e7f1      	b.n	80041ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004212:	d20b      	bcs.n	800422c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	441a      	add	r2, r3
 800421a:	f241 0324 	movw	r3, #4132	; 0x1024
 800421e:	4413      	add	r3, r2
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3301      	adds	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	e7ef      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800422c:	2300      	movs	r3, #0
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004236:	d20b      	bcs.n	8004250 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	441a      	add	r2, r3
 800423e:	f241 2324 	movw	r3, #4644	; 0x1224
 8004242:	4413      	add	r3, r2
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	3301      	adds	r3, #1
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	e7ef      	b.n	8004230 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004256:	461a      	mov	r2, r3
 8004258:	2300      	movs	r3, #0
 800425a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004264:	461a      	mov	r2, r3
 8004266:	2300      	movs	r3, #0
 8004268:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004272:	461a      	mov	r2, r3
 8004274:	2300      	movs	r3, #0
 8004276:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004280:	461a      	mov	r2, r3
 8004282:	2300      	movs	r3, #0
 8004284:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428e:	461a      	mov	r2, r3
 8004290:	2300      	movs	r3, #0
 8004292:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429c:	461a      	mov	r2, r3
 800429e:	2300      	movs	r3, #0
 80042a0:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042aa:	461a      	mov	r2, r3
 80042ac:	2300      	movs	r3, #0
 80042ae:	6213      	str	r3, [r2, #32]
  }
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	0800f40c 	.word	0x0800f40c

080042c0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	4a04      	ldr	r2, [pc, #16]	; (80042dc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	0800f468 	.word	0x0800f468

080042e0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff ffe5 	bl	80042c0 <_ZN3ros11Subscriber_C1Ev>
 80042f6:	4a0b      	ldr	r2, [pc, #44]	; (8004324 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3310      	adds	r3, #16
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fdc9 	bl	8003e98 <_ZN13geometry_msgs5TwistC1Ev>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	659a      	str	r2, [r3, #88]	; 0x58
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	609a      	str	r2, [r3, #8]
  };
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	0800f3f4 	.word	0x0800f3f4

08004328 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff ffc1 	bl	80042c0 <_ZN3ros11Subscriber_C1Ev>
 800433e:	4a0b      	ldr	r2, [pc, #44]	; (800436c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3310      	adds	r3, #16
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe fed1 	bl	80030f0 <_ZN8std_msgs5Int64C1Ev>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	621a      	str	r2, [r3, #32]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	609a      	str	r2, [r3, #8]
  };
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	0800f3dc 	.word	0x0800f3dc

08004370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3304      	adds	r3, #4
  }
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	4618      	mov	r0, r3
 8004396:	f7fe fda5 	bl	8002ee4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a0:	461a      	mov	r2, r3
 80043a2:	2300      	movs	r3, #0
 80043a4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ae:	461a      	mov	r2, r3
 80043b0:	2300      	movs	r3, #0
 80043b2:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043bc:	461a      	mov	r2, r3
 80043be:	2300      	movs	r3, #0
 80043c0:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ca:	461a      	mov	r2, r3
 80043cc:	2300      	movs	r3, #0
 80043ce:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b18      	cmp	r3, #24
 80043ec:	dc19      	bgt.n	8004422 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80043f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10d      	bne.n	800441a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80043fe:	6839      	ldr	r1, [r7, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	605a      	str	r2, [r3, #4]
        return true;
 8004416:	2301      	movs	r3, #1
 8004418:	e004      	b.n	8004424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3301      	adds	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	e7e2      	b.n	80043e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8004422:	2300      	movs	r3, #0
  }
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b18      	cmp	r3, #24
 8004442:	dc19      	bgt.n	8004478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800444c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10d      	bne.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004454:	6839      	ldr	r1, [r7, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800445e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	605a      	str	r2, [r3, #4]
        return true;
 800446c:	2301      	movs	r3, #1
 800446e:	e004      	b.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3301      	adds	r3, #1
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e7e2      	b.n	800443e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
    return false;
 8004478:	2300      	movs	r3, #0
  }
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b18      	cmp	r3, #24
 8004498:	dc1e      	bgt.n	80044d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d111      	bne.n	80044d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	60da      	str	r2, [r3, #12]
        return true;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e004      	b.n	80044da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3301      	adds	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	e7dd      	b.n	8004494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80044d8:	2300      	movs	r3, #0
  }
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fdf0 	bl	80030d8 <_ZN13STM32Hardware4timeEv>
 80044f8:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004500:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800450c:	4293      	cmp	r3, r2
 800450e:	d905      	bls.n	800451c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004522:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00e      	beq.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004530:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	429a      	cmp	r2, r3
 8004538:	d906      	bls.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004540:	461a      	mov	r2, r3
 8004542:	2300      	movs	r3, #0
 8004544:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d015      	beq.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	4618      	mov	r0, r3
 800455a:	f7fe fdbd 	bl	80030d8 <_ZN13STM32Hardware4timeEv>
 800455e:	4602      	mov	r2, r0
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	1ad2      	subs	r2, r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	429a      	cmp	r2, r3
 800456e:	bf8c      	ite	hi
 8004570:	2301      	movhi	r3, #1
 8004572:	2300      	movls	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 800457a:	f06f 0301 	mvn.w	r3, #1
 800457e:	e226      	b.n	80049ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe fcc9 	bl	8002f1c <_ZN13STM32Hardware4readEv>
 800458a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f2c0 81ff 	blt.w	8004992 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459a:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4413      	add	r3, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045a8:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045b6:	2b07      	cmp	r3, #7
 80045b8:	d12d      	bne.n	8004616 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c0:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80045cc:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	b2d1      	uxtb	r1, r2
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	441a      	add	r2, r3
 80045d8:	f241 0324 	movw	r3, #4132	; 0x1024
 80045dc:	4413      	add	r3, r2
 80045de:	460a      	mov	r2, r1
 80045e0:	701a      	strb	r2, [r3, #0]
        bytes_--;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e8:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80045ec:	3b01      	subs	r3, #1
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045f4:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fe:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1a0      	bne.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460c:	461a      	mov	r2, r3
 800460e:	2308      	movs	r3, #8
 8004610:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004614:	e798      	b.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800461c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004620:	2b00      	cmp	r3, #0
 8004622:	d130      	bne.n	8004686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2bff      	cmp	r3, #255	; 0xff
 8004628:	d112      	bne.n	8004650 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004630:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004634:	3301      	adds	r3, #1
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800463c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3314      	adds	r3, #20
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800464a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 800464e:	e77b      	b.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3304      	adds	r3, #4
 8004654:	4618      	mov	r0, r3
 8004656:	f7fe fd3f 	bl	80030d8 <_ZN13STM32Hardware4timeEv>
 800465a:	4602      	mov	r2, r0
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f241 3288 	movw	r2, #5000	; 0x1388
 8004664:	4293      	cmp	r3, r2
 8004666:	bf8c      	ite	hi
 8004668:	2301      	movhi	r3, #1
 800466a:	2300      	movls	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	f43f af6a 	beq.w	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 8004680:	f06f 0301 	mvn.w	r3, #1
 8004684:	e1a3      	b.n	80049ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004690:	2b01      	cmp	r3, #1
 8004692:	d121      	bne.n	80046d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2bfe      	cmp	r3, #254	; 0xfe
 8004698:	d10b      	bne.n	80046b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046a4:	3301      	adds	r3, #1
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046ac:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80046b0:	e74a      	b.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b8:	461a      	mov	r2, r3
 80046ba:	2300      	movs	r3, #0
 80046bc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c6:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f47f af3c 	bne.w	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f980 	bl	80049d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80046d6:	e737      	b.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046de:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d120      	bne.n	8004728 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ec:	461a      	mov	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fa:	461a      	mov	r2, r3
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004708:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800470c:	3301      	adds	r3, #1
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004714:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471e:	461a      	mov	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004726:	e70f      	b.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004732:	2b03      	cmp	r3, #3
 8004734:	d118      	bne.n	8004768 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473c:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	4413      	add	r3, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800474c:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004756:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800475a:	3301      	adds	r3, #1
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004762:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004766:	e6ef      	b.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004772:	2b04      	cmp	r3, #4
 8004774:	d11f      	bne.n	80047b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004780:	425a      	negs	r2, r3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	bf58      	it	pl
 8004788:	4253      	negpl	r3, r2
 800478a:	2bff      	cmp	r3, #255	; 0xff
 800478c:	d10b      	bne.n	80047a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004794:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004798:	3301      	adds	r3, #1
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047a0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047a4:	e6d0      	b.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ac:	461a      	mov	r2, r3
 80047ae:	2300      	movs	r3, #0
 80047b0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047b4:	e6c8      	b.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047bc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047c0:	2b05      	cmp	r3, #5
 80047c2:	d119      	bne.n	80047f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ca:	461a      	mov	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047dc:	3301      	adds	r3, #1
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047e4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ee:	461a      	mov	r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 80047f6:	e6a7      	b.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fe:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004802:	2b06      	cmp	r3, #6
 8004804:	d123      	bne.n	800484e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800480c:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	4413      	add	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800481c:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004826:	461a      	mov	r2, r3
 8004828:	2307      	movs	r3, #7
 800482a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004834:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004838:	2b00      	cmp	r3, #0
 800483a:	f47f ae85 	bne.w	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004844:	461a      	mov	r2, r3
 8004846:	2308      	movs	r3, #8
 8004848:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800484c:	e67c      	b.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004854:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004858:	2b08      	cmp	r3, #8
 800485a:	f47f ae75 	bne.w	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004864:	461a      	mov	r2, r3
 8004866:	2300      	movs	r3, #0
 8004868:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004872:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004876:	425a      	negs	r2, r3
 8004878:	b2db      	uxtb	r3, r3
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	bf58      	it	pl
 800487e:	4253      	negpl	r3, r2
 8004880:	2bff      	cmp	r3, #255	; 0xff
 8004882:	f47f ae61 	bne.w	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d116      	bne.n	80048c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f89e 	bl	80049d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8ba 	bl	8004a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a6:	461a      	mov	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b4:	461a      	mov	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 80048bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048c0:	e085      	b.n	80049ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048cc:	2b0a      	cmp	r3, #10
 80048ce:	d108      	bne.n	80048e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	f241 0324 	movw	r3, #4132	; 0x1024
 80048d6:	4413      	add	r3, r2
 80048d8:	4619      	mov	r1, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f97c 	bl	8004bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80048e0:	e632      	b.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048ec:	2b06      	cmp	r3, #6
 80048ee:	d112      	bne.n	8004916 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	f241 5314 	movw	r3, #5396	; 0x1514
 80048f6:	4413      	add	r3, r2
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	f241 0224 	movw	r2, #4132	; 0x1024
 80048fe:	440a      	add	r2, r1
 8004900:	4611      	mov	r1, r2
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe f85b 	bl	80029be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004914:	e618      	b.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004920:	2b0b      	cmp	r3, #11
 8004922:	d106      	bne.n	8004932 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004930:	e60a      	b.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004938:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800493c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f43f adfc 	beq.w	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004956:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800495a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004964:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004972:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800497c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	f241 0324 	movw	r3, #4132	; 0x1024
 800498a:	440b      	add	r3, r1
 800498c:	4619      	mov	r1, r3
 800498e:	4790      	blx	r2
    while (true)
 8004990:	e5da      	b.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8004992:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800499a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d014      	beq.n	80049cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d909      	bls.n	80049cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f80c 	bl	80049d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c4:	461a      	mov	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 80049cc:	2300      	movs	r3, #0
  }
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b086      	sub	sp, #24
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80049de:	f107 030c 	add.w	r3, r7, #12
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fd fb52 	bl	800208c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f107 020c 	add.w	r2, r7, #12
 80049f2:	210a      	movs	r1, #10
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	4798      	blx	r3
    rt_time = hardware_.time();
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fe fb6b 	bl	80030d8 <_ZN13STM32Hardware4timeEv>
 8004a02:	4602      	mov	r2, r0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0a:	615a      	str	r2, [r3, #20]
  }
 8004a0c:	bf00      	nop
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004a14:	b590      	push	{r4, r7, lr}
 8004a16:	b08b      	sub	sp, #44	; 0x2c
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004a1c:	f107 030c 	add.w	r3, r7, #12
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fd fc23 	bl	800226c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a26:	2300      	movs	r3, #0
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	2b18      	cmp	r3, #24
 8004a2e:	dc63      	bgt.n	8004af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d056      	beq.n	8004af0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	6859      	ldr	r1, [r3, #4]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4608      	mov	r0, r1
 8004a90:	4798      	blx	r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	6859      	ldr	r1, [r3, #4]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4608      	mov	r0, r1
 8004abe:	4798      	blx	r3
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ac8:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681c      	ldr	r4, [r3, #0]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe f925 	bl	8002d2e <_ZN3ros9Publisher15getEndpointTypeEv>
 8004ae4:	4601      	mov	r1, r0
 8004ae6:	f107 030c 	add.w	r3, r7, #12
 8004aea:	461a      	mov	r2, r3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	3301      	adds	r3, #1
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
 8004af6:	e798      	b.n	8004a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004af8:	2300      	movs	r3, #0
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	2b18      	cmp	r3, #24
 8004b00:	dc5f      	bgt.n	8004bc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b06:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d053      	beq.n	8004bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b16:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b38:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b44:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4608      	mov	r0, r1
 8004b54:	4798      	blx	r3
 8004b56:	4603      	mov	r3, r0
 8004b58:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	330c      	adds	r3, #12
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4608      	mov	r0, r1
 8004b7a:	4798      	blx	r3
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b84:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681c      	ldr	r4, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b90:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4608      	mov	r0, r1
 8004bac:	4798      	blx	r3
 8004bae:	4601      	mov	r1, r0
 8004bb0:	f107 030c 	add.w	r3, r7, #12
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc0:	e79c      	b.n	8004afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004bce:	bf00      	nop
 8004bd0:	372c      	adds	r7, #44	; 0x2c
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd90      	pop	{r4, r7, pc}
	...

08004bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fd fa50 	bl	800208c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe fa71 	bl	80030d8 <_ZN13STM32Hardware4timeEv>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004c04:	f107 0308 	add.w	r3, r7, #8
 8004c08:	6839      	ldr	r1, [r7, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fd faae 	bl	800216c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	4915      	ldr	r1, [pc, #84]	; (8004c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c16:	fba1 1303 	umull	r1, r3, r1, r3
 8004c1a:	099b      	lsrs	r3, r3, #6
 8004c1c:	4413      	add	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004c20:	6939      	ldr	r1, [r7, #16]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c26:	fba3 0302 	umull	r0, r3, r3, r2
 8004c2a:	099b      	lsrs	r3, r3, #6
 8004c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c30:	fb00 f303 	mul.w	r3, r0, r3
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	4a0e      	ldr	r2, [pc, #56]	; (8004c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004c38:	fb02 f303 	mul.w	r3, r2, r3
 8004c3c:	440b      	add	r3, r1
 8004c3e:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004c40:	f107 0308 	add.w	r3, r7, #8
 8004c44:	3304      	adds	r3, #4
 8004c46:	4619      	mov	r1, r3
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8bf 	bl	8004dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3304      	adds	r3, #4
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fe fa40 	bl	80030d8 <_ZN13STM32Hardware4timeEv>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c60:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004c64:	bf00      	nop
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	10624dd3 	.word	0x10624dd3
 8004c70:	000f4240 	.word	0x000f4240

08004c74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b63      	cmp	r3, #99	; 0x63
 8004c84:	dd0b      	ble.n	8004c9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8c:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004c90:	f083 0301 	eor.w	r3, r3, #1
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e090      	b.n	8004dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68f9      	ldr	r1, [r7, #12]
 8004ca6:	f241 2324 	movw	r3, #4644	; 0x1224
 8004caa:	440b      	add	r3, r1
 8004cac:	3307      	adds	r3, #7
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	4790      	blx	r2
 8004cb4:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cbc:	22ff      	movs	r2, #255	; 0xff
 8004cbe:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc8:	22fe      	movs	r2, #254	; 0xfe
 8004cca:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd8:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	0a1b      	lsrs	r3, r3, #8
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cec:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf6:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d00:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004d04:	4413      	add	r3, r2
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d12:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d20:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	b21b      	sxth	r3, r3
 8004d28:	121b      	asrs	r3, r3, #8
 8004d2a:	b21b      	sxth	r3, r3
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d34:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d3c:	2305      	movs	r3, #5
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	3306      	adds	r3, #6
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	dc0e      	bgt.n	8004d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	441a      	add	r2, r3
 8004d50:	f241 2324 	movw	r3, #4644	; 0x1224
 8004d54:	4413      	add	r3, r2
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	3301      	adds	r3, #1
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	e7eb      	b.n	8004d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	3307      	adds	r3, #7
 8004d6c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	425a      	negs	r2, r3
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	bf58      	it	pl
 8004d78:	4253      	negpl	r3, r2
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	1c59      	adds	r1, r3, #1
 8004d80:	6179      	str	r1, [r7, #20]
 8004d82:	43d2      	mvns	r2, r2
 8004d84:	b2d1      	uxtb	r1, r2
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	441a      	add	r2, r3
 8004d8a:	f241 2324 	movw	r3, #4644	; 0x1224
 8004d8e:	4413      	add	r3, r2
 8004d90:	460a      	mov	r2, r1
 8004d92:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d9a:	dc0b      	bgt.n	8004db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1d18      	adds	r0, r3, #4
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	f241 2324 	movw	r3, #4644	; 0x1224
 8004da6:	4413      	add	r3, r2
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4619      	mov	r1, r3
 8004dac:	f7fe f94a 	bl	8003044 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	e005      	b.n	8004dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004db4:	4904      	ldr	r1, [pc, #16]	; (8004dc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f84c 	bl	8004e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	0800f358 	.word	0x0800f358

08004dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe f97c 	bl	80030d8 <_ZN13STM32Hardware4timeEv>
 8004de0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4917      	ldr	r1, [pc, #92]	; (8004e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004dea:	fba1 1303 	umull	r1, r3, r1, r3
 8004dee:	099b      	lsrs	r3, r3, #6
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dfa:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	6859      	ldr	r1, [r3, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004e04:	fba3 0302 	umull	r0, r3, r3, r2
 8004e08:	099b      	lsrs	r3, r3, #6
 8004e0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e0e:	fb00 f303 	mul.w	r3, r0, r3
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	4a0d      	ldr	r2, [pc, #52]	; (8004e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004e16:	fb02 f303 	mul.w	r3, r2, r3
 8004e1a:	1aca      	subs	r2, r1, r3
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004e1e:	4413      	add	r3, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e26:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e2e:	4413      	add	r3, r2
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	f241 021c 	movw	r2, #4124	; 0x101c
 8004e36:	440a      	add	r2, r1
 8004e38:	4611      	mov	r1, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fb fbf2 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	10624dd3 	.word	0x10624dd3
 8004e4c:	000f4240 	.word	0x000f4240
 8004e50:	3b9aca00 	.word	0x3b9aca00

08004e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	2103      	movs	r1, #3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f804 	bl	8004e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004e68:	bf00      	nop
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004e7e:	f107 0314 	add.w	r3, r7, #20
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fd fbb6 	bl	80025f4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004e88:	7afb      	ldrb	r3, [r7, #11]
 8004e8a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f107 0214 	add.w	r2, r7, #20
 8004e9a:	2107      	movs	r1, #7
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	4798      	blx	r3
  }
 8004ea0:	bf00      	nop
 8004ea2:	3720      	adds	r7, #32
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <_Z41__static_initialization_and_destruction_0ii>:
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d11c      	bne.n	8004ef2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d117      	bne.n	8004ef2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist pub_out_msg;
 8004ec2:	480e      	ldr	r0, [pc, #56]	; (8004efc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004ec4:	f7fe ffe8 	bl	8003e98 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004ec8:	480d      	ldr	r0, [pc, #52]	; (8004f00 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004eca:	f7ff f95f 	bl	800418c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4a0c      	ldr	r2, [pc, #48]	; (8004f04 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004ed2:	490d      	ldr	r1, [pc, #52]	; (8004f08 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004ed4:	480d      	ldr	r0, [pc, #52]	; (8004f0c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004ed6:	f7ff fa03 	bl	80042e0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
 8004eda:	2300      	movs	r3, #0
 8004edc:	4a07      	ldr	r2, [pc, #28]	; (8004efc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004ede:	490c      	ldr	r1, [pc, #48]	; (8004f10 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004ee0:	480c      	ldr	r0, [pc, #48]	; (8004f14 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004ee2:	f7fd fef9 	bl	8002cd8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4a0b      	ldr	r2, [pc, #44]	; (8004f18 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004eea:	490c      	ldr	r1, [pc, #48]	; (8004f1c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004eec:	480c      	ldr	r0, [pc, #48]	; (8004f20 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004eee:	f7ff fa1b 	bl	8004328 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	240006c0 	.word	0x240006c0
 8004f00:	24000708 	.word	0x24000708
 8004f04:	08003fa1 	.word	0x08003fa1
 8004f08:	0800f394 	.word	0x0800f394
 8004f0c:	24001c48 	.word	0x24001c48
 8004f10:	0800f3a0 	.word	0x0800f3a0
 8004f14:	24001ca8 	.word	0x24001ca8
 8004f18:	08003fe5 	.word	0x08003fe5
 8004f1c:	0800f3ac 	.word	0x0800f3ac
 8004f20:	24001cc0 	.word	0x24001cc0

08004f24 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3310      	adds	r3, #16
 8004f32:	6839      	ldr	r1, [r7, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fe f97a 	bl	800322e <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	3210      	adds	r2, #16
 8004f42:	4610      	mov	r0, r2
 8004f44:	4798      	blx	r3
  }
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b082      	sub	sp, #8
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3310      	adds	r3, #16
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fe fa5e 	bl	8003434 <_ZN8std_msgs5Int647getTypeEv>
 8004f78:	4603      	mov	r3, r0
  }
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b082      	sub	sp, #8
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3310      	adds	r3, #16
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fe fa5e 	bl	8003450 <_ZN8std_msgs5Int646getMD5Ev>
 8004f94:	4603      	mov	r3, r0
  }
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3310      	adds	r3, #16
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe ffb4 	bl	8003f1c <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	3210      	adds	r2, #16
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4798      	blx	r3
  }
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3310      	adds	r3, #16
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fe ffbb 	bl	8003f68 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004ff2:	4603      	mov	r3, r0
  }
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3310      	adds	r3, #16
 8005008:	4618      	mov	r0, r3
 800500a:	f7fe ffbb 	bl	8003f84 <_ZN13geometry_msgs5Twist6getMD5Ev>
 800500e:	4603      	mov	r3, r0
  }
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
    return configured_;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005026:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <_GLOBAL__sub_I_pub_out_msg>:
 8005036:	b580      	push	{r7, lr}
 8005038:	af00      	add	r7, sp, #0
 800503a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800503e:	2001      	movs	r0, #1
 8005040:	f7ff ff32 	bl	8004ea8 <_Z41__static_initialization_and_destruction_0ii>
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800504e:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <HAL_MspInit+0x3c>)
 8005050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005054:	4a0b      	ldr	r2, [pc, #44]	; (8005084 <HAL_MspInit+0x3c>)
 8005056:	f043 0302 	orr.w	r3, r3, #2
 800505a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800505e:	4b09      	ldr	r3, [pc, #36]	; (8005084 <HAL_MspInit+0x3c>)
 8005060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	607b      	str	r3, [r7, #4]
 800506a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800506c:	2200      	movs	r2, #0
 800506e:	2100      	movs	r1, #0
 8005070:	2005      	movs	r0, #5
 8005072:	f000 fe20 	bl	8005cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005076:	2005      	movs	r0, #5
 8005078:	f000 fe37 	bl	8005cea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	58024400 	.word	0x58024400

08005088 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a2b      	ldr	r2, [pc, #172]	; (8005144 <HAL_TIM_PWM_MspInit+0xbc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d10f      	bne.n	80050ba <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800509a:	4b2b      	ldr	r3, [pc, #172]	; (8005148 <HAL_TIM_PWM_MspInit+0xc0>)
 800509c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050a0:	4a29      	ldr	r2, [pc, #164]	; (8005148 <HAL_TIM_PWM_MspInit+0xc0>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80050aa:	4b27      	ldr	r3, [pc, #156]	; (8005148 <HAL_TIM_PWM_MspInit+0xc0>)
 80050ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80050b8:	e03d      	b.n	8005136 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a23      	ldr	r2, [pc, #140]	; (800514c <HAL_TIM_PWM_MspInit+0xc4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10f      	bne.n	80050e4 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050c4:	4b20      	ldr	r3, [pc, #128]	; (8005148 <HAL_TIM_PWM_MspInit+0xc0>)
 80050c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050ca:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <HAL_TIM_PWM_MspInit+0xc0>)
 80050cc:	f043 0304 	orr.w	r3, r3, #4
 80050d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050d4:	4b1c      	ldr	r3, [pc, #112]	; (8005148 <HAL_TIM_PWM_MspInit+0xc0>)
 80050d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	693b      	ldr	r3, [r7, #16]
}
 80050e2:	e028      	b.n	8005136 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a19      	ldr	r2, [pc, #100]	; (8005150 <HAL_TIM_PWM_MspInit+0xc8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d10f      	bne.n	800510e <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80050ee:	4b16      	ldr	r3, [pc, #88]	; (8005148 <HAL_TIM_PWM_MspInit+0xc0>)
 80050f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050f4:	4a14      	ldr	r2, [pc, #80]	; (8005148 <HAL_TIM_PWM_MspInit+0xc0>)
 80050f6:	f043 0308 	orr.w	r3, r3, #8
 80050fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050fe:	4b12      	ldr	r3, [pc, #72]	; (8005148 <HAL_TIM_PWM_MspInit+0xc0>)
 8005100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	68fb      	ldr	r3, [r7, #12]
}
 800510c:	e013      	b.n	8005136 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM15)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a10      	ldr	r2, [pc, #64]	; (8005154 <HAL_TIM_PWM_MspInit+0xcc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d10e      	bne.n	8005136 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005118:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_TIM_PWM_MspInit+0xc0>)
 800511a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800511e:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <HAL_TIM_PWM_MspInit+0xc0>)
 8005120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005124:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <HAL_TIM_PWM_MspInit+0xc0>)
 800512a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800512e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005132:	60bb      	str	r3, [r7, #8]
 8005134:	68bb      	ldr	r3, [r7, #8]
}
 8005136:	bf00      	nop
 8005138:	371c      	adds	r7, #28
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40010000 	.word	0x40010000
 8005148:	58024400 	.word	0x58024400
 800514c:	40000800 	.word	0x40000800
 8005150:	40000c00 	.word	0x40000c00
 8005154:	40014000 	.word	0x40014000

08005158 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005168:	d117      	bne.n	800519a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800516a:	4b22      	ldr	r3, [pc, #136]	; (80051f4 <HAL_TIM_Base_MspInit+0x9c>)
 800516c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005170:	4a20      	ldr	r2, [pc, #128]	; (80051f4 <HAL_TIM_Base_MspInit+0x9c>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800517a:	4b1e      	ldr	r3, [pc, #120]	; (80051f4 <HAL_TIM_Base_MspInit+0x9c>)
 800517c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005188:	2200      	movs	r2, #0
 800518a:	2100      	movs	r1, #0
 800518c:	201c      	movs	r0, #28
 800518e:	f000 fd92 	bl	8005cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005192:	201c      	movs	r0, #28
 8005194:	f000 fda9 	bl	8005cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005198:	e028      	b.n	80051ec <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM6)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a16      	ldr	r2, [pc, #88]	; (80051f8 <HAL_TIM_Base_MspInit+0xa0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d10f      	bne.n	80051c4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80051a4:	4b13      	ldr	r3, [pc, #76]	; (80051f4 <HAL_TIM_Base_MspInit+0x9c>)
 80051a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051aa:	4a12      	ldr	r2, [pc, #72]	; (80051f4 <HAL_TIM_Base_MspInit+0x9c>)
 80051ac:	f043 0310 	orr.w	r3, r3, #16
 80051b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051b4:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <HAL_TIM_Base_MspInit+0x9c>)
 80051b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	693b      	ldr	r3, [r7, #16]
}
 80051c2:	e013      	b.n	80051ec <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM7)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a0c      	ldr	r2, [pc, #48]	; (80051fc <HAL_TIM_Base_MspInit+0xa4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d10e      	bne.n	80051ec <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80051ce:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_TIM_Base_MspInit+0x9c>)
 80051d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051d4:	4a07      	ldr	r2, [pc, #28]	; (80051f4 <HAL_TIM_Base_MspInit+0x9c>)
 80051d6:	f043 0320 	orr.w	r3, r3, #32
 80051da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051de:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <HAL_TIM_Base_MspInit+0x9c>)
 80051e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
}
 80051ec:	bf00      	nop
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	58024400 	.word	0x58024400
 80051f8:	40001000 	.word	0x40001000
 80051fc:	40001400 	.word	0x40001400

08005200 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b090      	sub	sp, #64	; 0x40
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005208:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	605a      	str	r2, [r3, #4]
 8005212:	609a      	str	r2, [r3, #8]
 8005214:	60da      	str	r2, [r3, #12]
 8005216:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a78      	ldr	r2, [pc, #480]	; (8005400 <HAL_TIM_Encoder_MspInit+0x200>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d14d      	bne.n	80052be <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005222:	4b78      	ldr	r3, [pc, #480]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 8005224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005228:	4a76      	ldr	r2, [pc, #472]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 800522a:	f043 0302 	orr.w	r3, r3, #2
 800522e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005232:	4b74      	ldr	r3, [pc, #464]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 8005234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	62bb      	str	r3, [r7, #40]	; 0x28
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005240:	4b70      	ldr	r3, [pc, #448]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 8005242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005246:	4a6f      	ldr	r2, [pc, #444]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005250:	4b6c      	ldr	r3, [pc, #432]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 8005252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800525e:	4b69      	ldr	r3, [pc, #420]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 8005260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005264:	4a67      	ldr	r2, [pc, #412]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 8005266:	f043 0302 	orr.w	r3, r3, #2
 800526a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800526e:	4b65      	ldr	r3, [pc, #404]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 8005270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	623b      	str	r3, [r7, #32]
 800527a:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800527c:	2340      	movs	r3, #64	; 0x40
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005280:	2302      	movs	r3, #2
 8005282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005284:	2300      	movs	r3, #0
 8005286:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005288:	2300      	movs	r3, #0
 800528a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800528c:	2302      	movs	r3, #2
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005294:	4619      	mov	r1, r3
 8005296:	485c      	ldr	r0, [pc, #368]	; (8005408 <HAL_TIM_Encoder_MspInit+0x208>)
 8005298:	f003 fb7c 	bl	8008994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800529c:	2320      	movs	r3, #32
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a0:	2302      	movs	r3, #2
 80052a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052a8:	2300      	movs	r3, #0
 80052aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052ac:	2302      	movs	r3, #2
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052b4:	4619      	mov	r1, r3
 80052b6:	4855      	ldr	r0, [pc, #340]	; (800540c <HAL_TIM_Encoder_MspInit+0x20c>)
 80052b8:	f003 fb6c 	bl	8008994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80052bc:	e09b      	b.n	80053f6 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a53      	ldr	r2, [pc, #332]	; (8005410 <HAL_TIM_Encoder_MspInit+0x210>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d12e      	bne.n	8005326 <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80052c8:	4b4e      	ldr	r3, [pc, #312]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 80052ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052ce:	4a4d      	ldr	r2, [pc, #308]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 80052d0:	f043 0302 	orr.w	r3, r3, #2
 80052d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80052d8:	4b4a      	ldr	r3, [pc, #296]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 80052da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	61fb      	str	r3, [r7, #28]
 80052e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052e6:	4b47      	ldr	r3, [pc, #284]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 80052e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052ec:	4a45      	ldr	r2, [pc, #276]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 80052ee:	f043 0304 	orr.w	r3, r3, #4
 80052f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052f6:	4b43      	ldr	r3, [pc, #268]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 80052f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005304:	23c0      	movs	r3, #192	; 0xc0
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005308:	2302      	movs	r3, #2
 800530a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530c:	2300      	movs	r3, #0
 800530e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005310:	2300      	movs	r3, #0
 8005312:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005314:	2303      	movs	r3, #3
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800531c:	4619      	mov	r1, r3
 800531e:	483d      	ldr	r0, [pc, #244]	; (8005414 <HAL_TIM_Encoder_MspInit+0x214>)
 8005320:	f003 fb38 	bl	8008994 <HAL_GPIO_Init>
}
 8005324:	e067      	b.n	80053f6 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM23)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a3b      	ldr	r2, [pc, #236]	; (8005418 <HAL_TIM_Encoder_MspInit+0x218>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d12e      	bne.n	800538e <HAL_TIM_Encoder_MspInit+0x18e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8005330:	4b34      	ldr	r3, [pc, #208]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 8005332:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005336:	4a33      	ldr	r2, [pc, #204]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 8005338:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800533c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005340:	4b30      	ldr	r3, [pc, #192]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 8005342:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800534e:	4b2d      	ldr	r3, [pc, #180]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 8005350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005354:	4a2b      	ldr	r2, [pc, #172]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 8005356:	f043 0320 	orr.w	r3, r3, #32
 800535a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800535e:	4b29      	ldr	r3, [pc, #164]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 8005360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800536c:	2303      	movs	r3, #3
 800536e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005370:	2302      	movs	r3, #2
 8005372:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005374:	2300      	movs	r3, #0
 8005376:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005378:	2300      	movs	r3, #0
 800537a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 800537c:	230d      	movs	r3, #13
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005384:	4619      	mov	r1, r3
 8005386:	4825      	ldr	r0, [pc, #148]	; (800541c <HAL_TIM_Encoder_MspInit+0x21c>)
 8005388:	f003 fb04 	bl	8008994 <HAL_GPIO_Init>
}
 800538c:	e033      	b.n	80053f6 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM24)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a23      	ldr	r2, [pc, #140]	; (8005420 <HAL_TIM_Encoder_MspInit+0x220>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d12e      	bne.n	80053f6 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8005398:	4b1a      	ldr	r3, [pc, #104]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 800539a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800539e:	4a19      	ldr	r2, [pc, #100]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 80053a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053a4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80053a8:	4b16      	ldr	r3, [pc, #88]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 80053aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80053ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80053b6:	4b13      	ldr	r3, [pc, #76]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 80053b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053bc:	4a11      	ldr	r2, [pc, #68]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 80053be:	f043 0320 	orr.w	r3, r3, #32
 80053c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053c6:	4b0f      	ldr	r3, [pc, #60]	; (8005404 <HAL_TIM_Encoder_MspInit+0x204>)
 80053c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80053d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053da:	2302      	movs	r3, #2
 80053dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e2:	2300      	movs	r3, #0
 80053e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 80053e6:	230e      	movs	r3, #14
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053ee:	4619      	mov	r1, r3
 80053f0:	480a      	ldr	r0, [pc, #40]	; (800541c <HAL_TIM_Encoder_MspInit+0x21c>)
 80053f2:	f003 facf 	bl	8008994 <HAL_GPIO_Init>
}
 80053f6:	bf00      	nop
 80053f8:	3740      	adds	r7, #64	; 0x40
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40000400 	.word	0x40000400
 8005404:	58024400 	.word	0x58024400
 8005408:	58020000 	.word	0x58020000
 800540c:	58020400 	.word	0x58020400
 8005410:	40010400 	.word	0x40010400
 8005414:	58020800 	.word	0x58020800
 8005418:	4000e000 	.word	0x4000e000
 800541c:	58021400 	.word	0x58021400
 8005420:	4000e400 	.word	0x4000e400

08005424 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08c      	sub	sp, #48	; 0x30
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800542c:	f107 031c 	add.w	r3, r7, #28
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	60da      	str	r2, [r3, #12]
 800543a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a4b      	ldr	r2, [pc, #300]	; (8005570 <HAL_TIM_MspPostInit+0x14c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d120      	bne.n	8005488 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005446:	4b4b      	ldr	r3, [pc, #300]	; (8005574 <HAL_TIM_MspPostInit+0x150>)
 8005448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800544c:	4a49      	ldr	r2, [pc, #292]	; (8005574 <HAL_TIM_MspPostInit+0x150>)
 800544e:	f043 0310 	orr.w	r3, r3, #16
 8005452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005456:	4b47      	ldr	r3, [pc, #284]	; (8005574 <HAL_TIM_MspPostInit+0x150>)
 8005458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800546a:	2302      	movs	r3, #2
 800546c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546e:	2300      	movs	r3, #0
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005472:	2300      	movs	r3, #0
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005476:	2301      	movs	r3, #1
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800547a:	f107 031c 	add.w	r3, r7, #28
 800547e:	4619      	mov	r1, r3
 8005480:	483d      	ldr	r0, [pc, #244]	; (8005578 <HAL_TIM_MspPostInit+0x154>)
 8005482:	f003 fa87 	bl	8008994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005486:	e06e      	b.n	8005566 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a3b      	ldr	r2, [pc, #236]	; (800557c <HAL_TIM_MspPostInit+0x158>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d120      	bne.n	80054d4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005492:	4b38      	ldr	r3, [pc, #224]	; (8005574 <HAL_TIM_MspPostInit+0x150>)
 8005494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005498:	4a36      	ldr	r2, [pc, #216]	; (8005574 <HAL_TIM_MspPostInit+0x150>)
 800549a:	f043 0308 	orr.w	r3, r3, #8
 800549e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054a2:	4b34      	ldr	r3, [pc, #208]	; (8005574 <HAL_TIM_MspPostInit+0x150>)
 80054a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80054b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b6:	2302      	movs	r3, #2
 80054b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054be:	2300      	movs	r3, #0
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80054c2:	2302      	movs	r3, #2
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054c6:	f107 031c 	add.w	r3, r7, #28
 80054ca:	4619      	mov	r1, r3
 80054cc:	482c      	ldr	r0, [pc, #176]	; (8005580 <HAL_TIM_MspPostInit+0x15c>)
 80054ce:	f003 fa61 	bl	8008994 <HAL_GPIO_Init>
}
 80054d2:	e048      	b.n	8005566 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a2a      	ldr	r2, [pc, #168]	; (8005584 <HAL_TIM_MspPostInit+0x160>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d11f      	bne.n	800551e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054de:	4b25      	ldr	r3, [pc, #148]	; (8005574 <HAL_TIM_MspPostInit+0x150>)
 80054e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054e4:	4a23      	ldr	r2, [pc, #140]	; (8005574 <HAL_TIM_MspPostInit+0x150>)
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054ee:	4b21      	ldr	r3, [pc, #132]	; (8005574 <HAL_TIM_MspPostInit+0x150>)
 80054f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80054fc:	2301      	movs	r3, #1
 80054fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005500:	2302      	movs	r3, #2
 8005502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005504:	2300      	movs	r3, #0
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005508:	2300      	movs	r3, #0
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800550c:	2302      	movs	r3, #2
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005510:	f107 031c 	add.w	r3, r7, #28
 8005514:	4619      	mov	r1, r3
 8005516:	481c      	ldr	r0, [pc, #112]	; (8005588 <HAL_TIM_MspPostInit+0x164>)
 8005518:	f003 fa3c 	bl	8008994 <HAL_GPIO_Init>
}
 800551c:	e023      	b.n	8005566 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1a      	ldr	r2, [pc, #104]	; (800558c <HAL_TIM_MspPostInit+0x168>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d11e      	bne.n	8005566 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005528:	4b12      	ldr	r3, [pc, #72]	; (8005574 <HAL_TIM_MspPostInit+0x150>)
 800552a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800552e:	4a11      	ldr	r2, [pc, #68]	; (8005574 <HAL_TIM_MspPostInit+0x150>)
 8005530:	f043 0310 	orr.w	r3, r3, #16
 8005534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005538:	4b0e      	ldr	r3, [pc, #56]	; (8005574 <HAL_TIM_MspPostInit+0x150>)
 800553a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005546:	2320      	movs	r3, #32
 8005548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800554a:	2302      	movs	r3, #2
 800554c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	2300      	movs	r3, #0
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005552:	2300      	movs	r3, #0
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005556:	2304      	movs	r3, #4
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800555a:	f107 031c 	add.w	r3, r7, #28
 800555e:	4619      	mov	r1, r3
 8005560:	4805      	ldr	r0, [pc, #20]	; (8005578 <HAL_TIM_MspPostInit+0x154>)
 8005562:	f003 fa17 	bl	8008994 <HAL_GPIO_Init>
}
 8005566:	bf00      	nop
 8005568:	3730      	adds	r7, #48	; 0x30
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	40010000 	.word	0x40010000
 8005574:	58024400 	.word	0x58024400
 8005578:	58021000 	.word	0x58021000
 800557c:	40000800 	.word	0x40000800
 8005580:	58020c00 	.word	0x58020c00
 8005584:	40000c00 	.word	0x40000c00
 8005588:	58020000 	.word	0x58020000
 800558c:	40014000 	.word	0x40014000

08005590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b0b6      	sub	sp, #216	; 0xd8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005598:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	605a      	str	r2, [r3, #4]
 80055a2:	609a      	str	r2, [r3, #8]
 80055a4:	60da      	str	r2, [r3, #12]
 80055a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80055a8:	f107 0310 	add.w	r3, r7, #16
 80055ac:	22b4      	movs	r2, #180	; 0xb4
 80055ae:	2100      	movs	r1, #0
 80055b0:	4618      	mov	r0, r3
 80055b2:	f009 fc7d 	bl	800eeb0 <memset>
  if(huart->Instance==USART3)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a57      	ldr	r2, [pc, #348]	; (8005718 <HAL_UART_MspInit+0x188>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	f040 80a7 	bne.w	8005710 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80055c2:	2302      	movs	r3, #2
 80055c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055cc:	f107 0310 	add.w	r3, r7, #16
 80055d0:	4618      	mov	r0, r3
 80055d2:	f004 fb15 	bl	8009c00 <HAL_RCCEx_PeriphCLKConfig>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80055dc:	f7fc fd30 	bl	8002040 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80055e0:	4b4e      	ldr	r3, [pc, #312]	; (800571c <HAL_UART_MspInit+0x18c>)
 80055e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055e6:	4a4d      	ldr	r2, [pc, #308]	; (800571c <HAL_UART_MspInit+0x18c>)
 80055e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80055f0:	4b4a      	ldr	r3, [pc, #296]	; (800571c <HAL_UART_MspInit+0x18c>)
 80055f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055fe:	4b47      	ldr	r3, [pc, #284]	; (800571c <HAL_UART_MspInit+0x18c>)
 8005600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005604:	4a45      	ldr	r2, [pc, #276]	; (800571c <HAL_UART_MspInit+0x18c>)
 8005606:	f043 0302 	orr.w	r3, r3, #2
 800560a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800560e:	4b43      	ldr	r3, [pc, #268]	; (800571c <HAL_UART_MspInit+0x18c>)
 8005610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800561c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005624:	2302      	movs	r3, #2
 8005626:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562a:	2300      	movs	r3, #0
 800562c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005630:	2300      	movs	r3, #0
 8005632:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005636:	2307      	movs	r3, #7
 8005638:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800563c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005640:	4619      	mov	r1, r3
 8005642:	4837      	ldr	r0, [pc, #220]	; (8005720 <HAL_UART_MspInit+0x190>)
 8005644:	f003 f9a6 	bl	8008994 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8005648:	4b36      	ldr	r3, [pc, #216]	; (8005724 <HAL_UART_MspInit+0x194>)
 800564a:	4a37      	ldr	r2, [pc, #220]	; (8005728 <HAL_UART_MspInit+0x198>)
 800564c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800564e:	4b35      	ldr	r3, [pc, #212]	; (8005724 <HAL_UART_MspInit+0x194>)
 8005650:	222d      	movs	r2, #45	; 0x2d
 8005652:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005654:	4b33      	ldr	r3, [pc, #204]	; (8005724 <HAL_UART_MspInit+0x194>)
 8005656:	2200      	movs	r2, #0
 8005658:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800565a:	4b32      	ldr	r3, [pc, #200]	; (8005724 <HAL_UART_MspInit+0x194>)
 800565c:	2200      	movs	r2, #0
 800565e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005660:	4b30      	ldr	r3, [pc, #192]	; (8005724 <HAL_UART_MspInit+0x194>)
 8005662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005666:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005668:	4b2e      	ldr	r3, [pc, #184]	; (8005724 <HAL_UART_MspInit+0x194>)
 800566a:	2200      	movs	r2, #0
 800566c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800566e:	4b2d      	ldr	r3, [pc, #180]	; (8005724 <HAL_UART_MspInit+0x194>)
 8005670:	2200      	movs	r2, #0
 8005672:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005674:	4b2b      	ldr	r3, [pc, #172]	; (8005724 <HAL_UART_MspInit+0x194>)
 8005676:	2200      	movs	r2, #0
 8005678:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800567a:	4b2a      	ldr	r3, [pc, #168]	; (8005724 <HAL_UART_MspInit+0x194>)
 800567c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005680:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005682:	4b28      	ldr	r3, [pc, #160]	; (8005724 <HAL_UART_MspInit+0x194>)
 8005684:	2200      	movs	r2, #0
 8005686:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005688:	4826      	ldr	r0, [pc, #152]	; (8005724 <HAL_UART_MspInit+0x194>)
 800568a:	f000 fb49 	bl	8005d20 <HAL_DMA_Init>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8005694:	f7fc fcd4 	bl	8002040 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a22      	ldr	r2, [pc, #136]	; (8005724 <HAL_UART_MspInit+0x194>)
 800569c:	67da      	str	r2, [r3, #124]	; 0x7c
 800569e:	4a21      	ldr	r2, [pc, #132]	; (8005724 <HAL_UART_MspInit+0x194>)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80056a4:	4b21      	ldr	r3, [pc, #132]	; (800572c <HAL_UART_MspInit+0x19c>)
 80056a6:	4a22      	ldr	r2, [pc, #136]	; (8005730 <HAL_UART_MspInit+0x1a0>)
 80056a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80056aa:	4b20      	ldr	r3, [pc, #128]	; (800572c <HAL_UART_MspInit+0x19c>)
 80056ac:	222e      	movs	r2, #46	; 0x2e
 80056ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056b0:	4b1e      	ldr	r3, [pc, #120]	; (800572c <HAL_UART_MspInit+0x19c>)
 80056b2:	2240      	movs	r2, #64	; 0x40
 80056b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056b6:	4b1d      	ldr	r3, [pc, #116]	; (800572c <HAL_UART_MspInit+0x19c>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056bc:	4b1b      	ldr	r3, [pc, #108]	; (800572c <HAL_UART_MspInit+0x19c>)
 80056be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056c2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056c4:	4b19      	ldr	r3, [pc, #100]	; (800572c <HAL_UART_MspInit+0x19c>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056ca:	4b18      	ldr	r3, [pc, #96]	; (800572c <HAL_UART_MspInit+0x19c>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80056d0:	4b16      	ldr	r3, [pc, #88]	; (800572c <HAL_UART_MspInit+0x19c>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80056d6:	4b15      	ldr	r3, [pc, #84]	; (800572c <HAL_UART_MspInit+0x19c>)
 80056d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056dc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056de:	4b13      	ldr	r3, [pc, #76]	; (800572c <HAL_UART_MspInit+0x19c>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80056e4:	4811      	ldr	r0, [pc, #68]	; (800572c <HAL_UART_MspInit+0x19c>)
 80056e6:	f000 fb1b 	bl	8005d20 <HAL_DMA_Init>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80056f0:	f7fc fca6 	bl	8002040 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a0d      	ldr	r2, [pc, #52]	; (800572c <HAL_UART_MspInit+0x19c>)
 80056f8:	679a      	str	r2, [r3, #120]	; 0x78
 80056fa:	4a0c      	ldr	r2, [pc, #48]	; (800572c <HAL_UART_MspInit+0x19c>)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005700:	2200      	movs	r2, #0
 8005702:	2100      	movs	r1, #0
 8005704:	2027      	movs	r0, #39	; 0x27
 8005706:	f000 fad6 	bl	8005cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800570a:	2027      	movs	r0, #39	; 0x27
 800570c:	f000 faed 	bl	8005cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005710:	bf00      	nop
 8005712:	37d8      	adds	r7, #216	; 0xd8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40004800 	.word	0x40004800
 800571c:	58024400 	.word	0x58024400
 8005720:	58020400 	.word	0x58020400
 8005724:	24000468 	.word	0x24000468
 8005728:	40020010 	.word	0x40020010
 800572c:	240004e0 	.word	0x240004e0
 8005730:	40020028 	.word	0x40020028

08005734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005738:	e7fe      	b.n	8005738 <NMI_Handler+0x4>

0800573a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800573a:	b480      	push	{r7}
 800573c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800573e:	e7fe      	b.n	800573e <HardFault_Handler+0x4>

08005740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005744:	e7fe      	b.n	8005744 <MemManage_Handler+0x4>

08005746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005746:	b480      	push	{r7}
 8005748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800574a:	e7fe      	b.n	800574a <BusFault_Handler+0x4>

0800574c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005750:	e7fe      	b.n	8005750 <UsageFault_Handler+0x4>

08005752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005752:	b480      	push	{r7}
 8005754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005756:	bf00      	nop
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005764:	bf00      	nop
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800576e:	b480      	push	{r7}
 8005770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005772:	bf00      	nop
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005780:	f000 f99e 	bl	8005ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005784:	bf00      	nop
 8005786:	bd80      	pop	{r7, pc}

08005788 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800578c:	bf00      	nop
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800579c:	4802      	ldr	r0, [pc, #8]	; (80057a8 <DMA1_Stream0_IRQHandler+0x10>)
 800579e:	f001 fde7 	bl	8007370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80057a2:	bf00      	nop
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	24000468 	.word	0x24000468

080057ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80057b0:	4802      	ldr	r0, [pc, #8]	; (80057bc <DMA1_Stream1_IRQHandler+0x10>)
 80057b2:	f001 fddd 	bl	8007370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80057b6:	bf00      	nop
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	240004e0 	.word	0x240004e0

080057c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80057c4:	4802      	ldr	r0, [pc, #8]	; (80057d0 <TIM2_IRQHandler+0x10>)
 80057c6:	f006 f917 	bl	800b9f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80057ca:	bf00      	nop
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	240000e0 	.word	0x240000e0

080057d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80057d8:	4802      	ldr	r0, [pc, #8]	; (80057e4 <USART3_IRQHandler+0x10>)
 80057da:	f007 fb33 	bl	800ce44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	240003d8 	.word	0x240003d8

080057e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
	return 1;
 80057ec:	2301      	movs	r3, #1
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <_kill>:

int _kill(int pid, int sig)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005802:	f009 fb1d 	bl	800ee40 <__errno>
 8005806:	4603      	mov	r3, r0
 8005808:	2216      	movs	r2, #22
 800580a:	601a      	str	r2, [r3, #0]
	return -1;
 800580c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <_exit>:

void _exit (int status)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005820:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff ffe7 	bl	80057f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800582a:	e7fe      	b.n	800582a <_exit+0x12>

0800582c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005834:	4a14      	ldr	r2, [pc, #80]	; (8005888 <_sbrk+0x5c>)
 8005836:	4b15      	ldr	r3, [pc, #84]	; (800588c <_sbrk+0x60>)
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005840:	4b13      	ldr	r3, [pc, #76]	; (8005890 <_sbrk+0x64>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005848:	4b11      	ldr	r3, [pc, #68]	; (8005890 <_sbrk+0x64>)
 800584a:	4a12      	ldr	r2, [pc, #72]	; (8005894 <_sbrk+0x68>)
 800584c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800584e:	4b10      	ldr	r3, [pc, #64]	; (8005890 <_sbrk+0x64>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4413      	add	r3, r2
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	429a      	cmp	r2, r3
 800585a:	d207      	bcs.n	800586c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800585c:	f009 faf0 	bl	800ee40 <__errno>
 8005860:	4603      	mov	r3, r0
 8005862:	220c      	movs	r2, #12
 8005864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800586a:	e009      	b.n	8005880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800586c:	4b08      	ldr	r3, [pc, #32]	; (8005890 <_sbrk+0x64>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005872:	4b07      	ldr	r3, [pc, #28]	; (8005890 <_sbrk+0x64>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4413      	add	r3, r2
 800587a:	4a05      	ldr	r2, [pc, #20]	; (8005890 <_sbrk+0x64>)
 800587c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800587e:	68fb      	ldr	r3, [r7, #12]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	24050000 	.word	0x24050000
 800588c:	00000400 	.word	0x00000400
 8005890:	24001ce8 	.word	0x24001ce8
 8005894:	24001d00 	.word	0x24001d00

08005898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800589c:	4b32      	ldr	r3, [pc, #200]	; (8005968 <SystemInit+0xd0>)
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a2:	4a31      	ldr	r2, [pc, #196]	; (8005968 <SystemInit+0xd0>)
 80058a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80058ac:	4b2f      	ldr	r3, [pc, #188]	; (800596c <SystemInit+0xd4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	2b06      	cmp	r3, #6
 80058b6:	d807      	bhi.n	80058c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80058b8:	4b2c      	ldr	r3, [pc, #176]	; (800596c <SystemInit+0xd4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f023 030f 	bic.w	r3, r3, #15
 80058c0:	4a2a      	ldr	r2, [pc, #168]	; (800596c <SystemInit+0xd4>)
 80058c2:	f043 0307 	orr.w	r3, r3, #7
 80058c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80058c8:	4b29      	ldr	r3, [pc, #164]	; (8005970 <SystemInit+0xd8>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a28      	ldr	r2, [pc, #160]	; (8005970 <SystemInit+0xd8>)
 80058ce:	f043 0301 	orr.w	r3, r3, #1
 80058d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80058d4:	4b26      	ldr	r3, [pc, #152]	; (8005970 <SystemInit+0xd8>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80058da:	4b25      	ldr	r3, [pc, #148]	; (8005970 <SystemInit+0xd8>)
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	4924      	ldr	r1, [pc, #144]	; (8005970 <SystemInit+0xd8>)
 80058e0:	4b24      	ldr	r3, [pc, #144]	; (8005974 <SystemInit+0xdc>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80058e6:	4b21      	ldr	r3, [pc, #132]	; (800596c <SystemInit+0xd4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80058f2:	4b1e      	ldr	r3, [pc, #120]	; (800596c <SystemInit+0xd4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f023 030f 	bic.w	r3, r3, #15
 80058fa:	4a1c      	ldr	r2, [pc, #112]	; (800596c <SystemInit+0xd4>)
 80058fc:	f043 0307 	orr.w	r3, r3, #7
 8005900:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005902:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <SystemInit+0xd8>)
 8005904:	2200      	movs	r2, #0
 8005906:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005908:	4b19      	ldr	r3, [pc, #100]	; (8005970 <SystemInit+0xd8>)
 800590a:	2200      	movs	r2, #0
 800590c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800590e:	4b18      	ldr	r3, [pc, #96]	; (8005970 <SystemInit+0xd8>)
 8005910:	2200      	movs	r2, #0
 8005912:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005914:	4b16      	ldr	r3, [pc, #88]	; (8005970 <SystemInit+0xd8>)
 8005916:	4a18      	ldr	r2, [pc, #96]	; (8005978 <SystemInit+0xe0>)
 8005918:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800591a:	4b15      	ldr	r3, [pc, #84]	; (8005970 <SystemInit+0xd8>)
 800591c:	4a17      	ldr	r2, [pc, #92]	; (800597c <SystemInit+0xe4>)
 800591e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005920:	4b13      	ldr	r3, [pc, #76]	; (8005970 <SystemInit+0xd8>)
 8005922:	4a17      	ldr	r2, [pc, #92]	; (8005980 <SystemInit+0xe8>)
 8005924:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005926:	4b12      	ldr	r3, [pc, #72]	; (8005970 <SystemInit+0xd8>)
 8005928:	2200      	movs	r2, #0
 800592a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800592c:	4b10      	ldr	r3, [pc, #64]	; (8005970 <SystemInit+0xd8>)
 800592e:	4a14      	ldr	r2, [pc, #80]	; (8005980 <SystemInit+0xe8>)
 8005930:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005932:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <SystemInit+0xd8>)
 8005934:	2200      	movs	r2, #0
 8005936:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005938:	4b0d      	ldr	r3, [pc, #52]	; (8005970 <SystemInit+0xd8>)
 800593a:	4a11      	ldr	r2, [pc, #68]	; (8005980 <SystemInit+0xe8>)
 800593c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800593e:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <SystemInit+0xd8>)
 8005940:	2200      	movs	r2, #0
 8005942:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005944:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <SystemInit+0xd8>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a09      	ldr	r2, [pc, #36]	; (8005970 <SystemInit+0xd8>)
 800594a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800594e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <SystemInit+0xd8>)
 8005952:	2200      	movs	r2, #0
 8005954:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005956:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <SystemInit+0xec>)
 8005958:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800595c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800595e:	bf00      	nop
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	e000ed00 	.word	0xe000ed00
 800596c:	52002000 	.word	0x52002000
 8005970:	58024400 	.word	0x58024400
 8005974:	eaf6ed7f 	.word	0xeaf6ed7f
 8005978:	02020200 	.word	0x02020200
 800597c:	01ff0000 	.word	0x01ff0000
 8005980:	01010280 	.word	0x01010280
 8005984:	52004000 	.word	0x52004000

08005988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80059c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800598c:	f7ff ff84 	bl	8005898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005990:	480c      	ldr	r0, [pc, #48]	; (80059c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005992:	490d      	ldr	r1, [pc, #52]	; (80059c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005994:	4a0d      	ldr	r2, [pc, #52]	; (80059cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005998:	e002      	b.n	80059a0 <LoopCopyDataInit>

0800599a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800599a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800599c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800599e:	3304      	adds	r3, #4

080059a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059a4:	d3f9      	bcc.n	800599a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059a6:	4a0a      	ldr	r2, [pc, #40]	; (80059d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80059a8:	4c0a      	ldr	r4, [pc, #40]	; (80059d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80059aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059ac:	e001      	b.n	80059b2 <LoopFillZerobss>

080059ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059b0:	3204      	adds	r2, #4

080059b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059b4:	d3fb      	bcc.n	80059ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80059b6:	f009 fa49 	bl	800ee4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059ba:	f7fa fe61 	bl	8000680 <main>
  bx  lr
 80059be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80059c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80059c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80059c8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80059cc:	0800f558 	.word	0x0800f558
  ldr r2, =_sbss
 80059d0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80059d4:	24001d00 	.word	0x24001d00

080059d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80059d8:	e7fe      	b.n	80059d8 <ADC3_IRQHandler>
	...

080059dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059e2:	2003      	movs	r0, #3
 80059e4:	f000 f95c 	bl	8005ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80059e8:	f003 ff34 	bl	8009854 <HAL_RCC_GetSysClockFreq>
 80059ec:	4602      	mov	r2, r0
 80059ee:	4b15      	ldr	r3, [pc, #84]	; (8005a44 <HAL_Init+0x68>)
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	0a1b      	lsrs	r3, r3, #8
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	4913      	ldr	r1, [pc, #76]	; (8005a48 <HAL_Init+0x6c>)
 80059fa:	5ccb      	ldrb	r3, [r1, r3]
 80059fc:	f003 031f 	and.w	r3, r3, #31
 8005a00:	fa22 f303 	lsr.w	r3, r2, r3
 8005a04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a06:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <HAL_Init+0x68>)
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	4a0e      	ldr	r2, [pc, #56]	; (8005a48 <HAL_Init+0x6c>)
 8005a10:	5cd3      	ldrb	r3, [r2, r3]
 8005a12:	f003 031f 	and.w	r3, r3, #31
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1c:	4a0b      	ldr	r2, [pc, #44]	; (8005a4c <HAL_Init+0x70>)
 8005a1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a20:	4a0b      	ldr	r2, [pc, #44]	; (8005a50 <HAL_Init+0x74>)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a26:	2000      	movs	r0, #0
 8005a28:	f000 f814 	bl	8005a54 <HAL_InitTick>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e002      	b.n	8005a3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005a36:	f7ff fb07 	bl	8005048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	58024400 	.word	0x58024400
 8005a48:	0800f504 	.word	0x0800f504
 8005a4c:	24000004 	.word	0x24000004
 8005a50:	24000000 	.word	0x24000000

08005a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005a5c:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <HAL_InitTick+0x60>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e021      	b.n	8005aac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005a68:	4b13      	ldr	r3, [pc, #76]	; (8005ab8 <HAL_InitTick+0x64>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	4b11      	ldr	r3, [pc, #68]	; (8005ab4 <HAL_InitTick+0x60>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	4619      	mov	r1, r3
 8005a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 f941 	bl	8005d06 <HAL_SYSTICK_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e00e      	b.n	8005aac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b0f      	cmp	r3, #15
 8005a92:	d80a      	bhi.n	8005aaa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a94:	2200      	movs	r2, #0
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a9c:	f000 f90b 	bl	8005cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005aa0:	4a06      	ldr	r2, [pc, #24]	; (8005abc <HAL_InitTick+0x68>)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	e000      	b.n	8005aac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	2400000c 	.word	0x2400000c
 8005ab8:	24000000 	.word	0x24000000
 8005abc:	24000008 	.word	0x24000008

08005ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <HAL_IncTick+0x20>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <HAL_IncTick+0x24>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4413      	add	r3, r2
 8005ad0:	4a04      	ldr	r2, [pc, #16]	; (8005ae4 <HAL_IncTick+0x24>)
 8005ad2:	6013      	str	r3, [r2, #0]
}
 8005ad4:	bf00      	nop
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	2400000c 	.word	0x2400000c
 8005ae4:	24001cec 	.word	0x24001cec

08005ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  return uwTick;
 8005aec:	4b03      	ldr	r3, [pc, #12]	; (8005afc <HAL_GetTick+0x14>)
 8005aee:	681b      	ldr	r3, [r3, #0]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	24001cec 	.word	0x24001cec

08005b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b10:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <__NVIC_SetPriorityGrouping+0x40>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b28:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <__NVIC_SetPriorityGrouping+0x44>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b2e:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <__NVIC_SetPriorityGrouping+0x40>)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	60d3      	str	r3, [r2, #12]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	e000ed00 	.word	0xe000ed00
 8005b44:	05fa0000 	.word	0x05fa0000

08005b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b4c:	4b04      	ldr	r3, [pc, #16]	; (8005b60 <__NVIC_GetPriorityGrouping+0x18>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	f003 0307 	and.w	r3, r3, #7
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	e000ed00 	.word	0xe000ed00

08005b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	db0b      	blt.n	8005b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	f003 021f 	and.w	r2, r3, #31
 8005b7c:	4907      	ldr	r1, [pc, #28]	; (8005b9c <__NVIC_EnableIRQ+0x38>)
 8005b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	2001      	movs	r0, #1
 8005b86:	fa00 f202 	lsl.w	r2, r0, r2
 8005b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	e000e100 	.word	0xe000e100

08005ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	6039      	str	r1, [r7, #0]
 8005baa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	db0a      	blt.n	8005bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	490c      	ldr	r1, [pc, #48]	; (8005bec <__NVIC_SetPriority+0x4c>)
 8005bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bbe:	0112      	lsls	r2, r2, #4
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bc8:	e00a      	b.n	8005be0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	4908      	ldr	r1, [pc, #32]	; (8005bf0 <__NVIC_SetPriority+0x50>)
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	3b04      	subs	r3, #4
 8005bd8:	0112      	lsls	r2, r2, #4
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	440b      	add	r3, r1
 8005bde:	761a      	strb	r2, [r3, #24]
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	e000e100 	.word	0xe000e100
 8005bf0:	e000ed00 	.word	0xe000ed00

08005bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b089      	sub	sp, #36	; 0x24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	f1c3 0307 	rsb	r3, r3, #7
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	bf28      	it	cs
 8005c12:	2304      	movcs	r3, #4
 8005c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	2b06      	cmp	r3, #6
 8005c1c:	d902      	bls.n	8005c24 <NVIC_EncodePriority+0x30>
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	3b03      	subs	r3, #3
 8005c22:	e000      	b.n	8005c26 <NVIC_EncodePriority+0x32>
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	43da      	mvns	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	401a      	ands	r2, r3
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	fa01 f303 	lsl.w	r3, r1, r3
 8005c46:	43d9      	mvns	r1, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c4c:	4313      	orrs	r3, r2
         );
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3724      	adds	r7, #36	; 0x24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c6c:	d301      	bcc.n	8005c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e00f      	b.n	8005c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c72:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <SysTick_Config+0x40>)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c7a:	210f      	movs	r1, #15
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c80:	f7ff ff8e 	bl	8005ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <SysTick_Config+0x40>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c8a:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <SysTick_Config+0x40>)
 8005c8c:	2207      	movs	r2, #7
 8005c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	e000e010 	.word	0xe000e010

08005ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff ff29 	bl	8005b00 <__NVIC_SetPriorityGrouping>
}
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
 8005cc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cc4:	f7ff ff40 	bl	8005b48 <__NVIC_GetPriorityGrouping>
 8005cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	6978      	ldr	r0, [r7, #20]
 8005cd0:	f7ff ff90 	bl	8005bf4 <NVIC_EncodePriority>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005cda:	4611      	mov	r1, r2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff ff5f 	bl	8005ba0 <__NVIC_SetPriority>
}
 8005ce2:	bf00      	nop
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b082      	sub	sp, #8
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff ff33 	bl	8005b64 <__NVIC_EnableIRQ>
}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b082      	sub	sp, #8
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff ffa4 	bl	8005c5c <SysTick_Config>
 8005d14:	4603      	mov	r3, r0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d28:	f7ff fede 	bl	8005ae8 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e314      	b.n	8006362 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a66      	ldr	r2, [pc, #408]	; (8005ed8 <HAL_DMA_Init+0x1b8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d04a      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a65      	ldr	r2, [pc, #404]	; (8005edc <HAL_DMA_Init+0x1bc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d045      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a63      	ldr	r2, [pc, #396]	; (8005ee0 <HAL_DMA_Init+0x1c0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d040      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a62      	ldr	r2, [pc, #392]	; (8005ee4 <HAL_DMA_Init+0x1c4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d03b      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a60      	ldr	r2, [pc, #384]	; (8005ee8 <HAL_DMA_Init+0x1c8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d036      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a5f      	ldr	r2, [pc, #380]	; (8005eec <HAL_DMA_Init+0x1cc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d031      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a5d      	ldr	r2, [pc, #372]	; (8005ef0 <HAL_DMA_Init+0x1d0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d02c      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a5c      	ldr	r2, [pc, #368]	; (8005ef4 <HAL_DMA_Init+0x1d4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d027      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a5a      	ldr	r2, [pc, #360]	; (8005ef8 <HAL_DMA_Init+0x1d8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d022      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a59      	ldr	r2, [pc, #356]	; (8005efc <HAL_DMA_Init+0x1dc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d01d      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a57      	ldr	r2, [pc, #348]	; (8005f00 <HAL_DMA_Init+0x1e0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d018      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a56      	ldr	r2, [pc, #344]	; (8005f04 <HAL_DMA_Init+0x1e4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d013      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a54      	ldr	r2, [pc, #336]	; (8005f08 <HAL_DMA_Init+0x1e8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00e      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a53      	ldr	r2, [pc, #332]	; (8005f0c <HAL_DMA_Init+0x1ec>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d009      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a51      	ldr	r2, [pc, #324]	; (8005f10 <HAL_DMA_Init+0x1f0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <HAL_DMA_Init+0xb8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a50      	ldr	r2, [pc, #320]	; (8005f14 <HAL_DMA_Init+0x1f4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d101      	bne.n	8005ddc <HAL_DMA_Init+0xbc>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <HAL_DMA_Init+0xbe>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 813c 	beq.w	800605c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a37      	ldr	r2, [pc, #220]	; (8005ed8 <HAL_DMA_Init+0x1b8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d04a      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a36      	ldr	r2, [pc, #216]	; (8005edc <HAL_DMA_Init+0x1bc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d045      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a34      	ldr	r2, [pc, #208]	; (8005ee0 <HAL_DMA_Init+0x1c0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d040      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a33      	ldr	r2, [pc, #204]	; (8005ee4 <HAL_DMA_Init+0x1c4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d03b      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a31      	ldr	r2, [pc, #196]	; (8005ee8 <HAL_DMA_Init+0x1c8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d036      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a30      	ldr	r2, [pc, #192]	; (8005eec <HAL_DMA_Init+0x1cc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d031      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2e      	ldr	r2, [pc, #184]	; (8005ef0 <HAL_DMA_Init+0x1d0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d02c      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a2d      	ldr	r2, [pc, #180]	; (8005ef4 <HAL_DMA_Init+0x1d4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d027      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a2b      	ldr	r2, [pc, #172]	; (8005ef8 <HAL_DMA_Init+0x1d8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d022      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a2a      	ldr	r2, [pc, #168]	; (8005efc <HAL_DMA_Init+0x1dc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d01d      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a28      	ldr	r2, [pc, #160]	; (8005f00 <HAL_DMA_Init+0x1e0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d018      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a27      	ldr	r2, [pc, #156]	; (8005f04 <HAL_DMA_Init+0x1e4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d013      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a25      	ldr	r2, [pc, #148]	; (8005f08 <HAL_DMA_Init+0x1e8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00e      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a24      	ldr	r2, [pc, #144]	; (8005f0c <HAL_DMA_Init+0x1ec>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d009      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a22      	ldr	r2, [pc, #136]	; (8005f10 <HAL_DMA_Init+0x1f0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_DMA_Init+0x174>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a21      	ldr	r2, [pc, #132]	; (8005f14 <HAL_DMA_Init+0x1f4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d108      	bne.n	8005ea6 <HAL_DMA_Init+0x186>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0201 	bic.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	e007      	b.n	8005eb6 <HAL_DMA_Init+0x196>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005eb6:	e02f      	b.n	8005f18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eb8:	f7ff fe16 	bl	8005ae8 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b05      	cmp	r3, #5
 8005ec4:	d928      	bls.n	8005f18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2203      	movs	r2, #3
 8005ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e244      	b.n	8006362 <HAL_DMA_Init+0x642>
 8005ed8:	40020010 	.word	0x40020010
 8005edc:	40020028 	.word	0x40020028
 8005ee0:	40020040 	.word	0x40020040
 8005ee4:	40020058 	.word	0x40020058
 8005ee8:	40020070 	.word	0x40020070
 8005eec:	40020088 	.word	0x40020088
 8005ef0:	400200a0 	.word	0x400200a0
 8005ef4:	400200b8 	.word	0x400200b8
 8005ef8:	40020410 	.word	0x40020410
 8005efc:	40020428 	.word	0x40020428
 8005f00:	40020440 	.word	0x40020440
 8005f04:	40020458 	.word	0x40020458
 8005f08:	40020470 	.word	0x40020470
 8005f0c:	40020488 	.word	0x40020488
 8005f10:	400204a0 	.word	0x400204a0
 8005f14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1c8      	bne.n	8005eb8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4b84      	ldr	r3, [pc, #528]	; (8006144 <HAL_DMA_Init+0x424>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d107      	bne.n	8005f7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	4313      	orrs	r3, r2
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2b28      	cmp	r3, #40	; 0x28
 8005f82:	d903      	bls.n	8005f8c <HAL_DMA_Init+0x26c>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2b2e      	cmp	r3, #46	; 0x2e
 8005f8a:	d91f      	bls.n	8005fcc <HAL_DMA_Init+0x2ac>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b3e      	cmp	r3, #62	; 0x3e
 8005f92:	d903      	bls.n	8005f9c <HAL_DMA_Init+0x27c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b42      	cmp	r3, #66	; 0x42
 8005f9a:	d917      	bls.n	8005fcc <HAL_DMA_Init+0x2ac>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b46      	cmp	r3, #70	; 0x46
 8005fa2:	d903      	bls.n	8005fac <HAL_DMA_Init+0x28c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b48      	cmp	r3, #72	; 0x48
 8005faa:	d90f      	bls.n	8005fcc <HAL_DMA_Init+0x2ac>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b4e      	cmp	r3, #78	; 0x4e
 8005fb2:	d903      	bls.n	8005fbc <HAL_DMA_Init+0x29c>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b52      	cmp	r3, #82	; 0x52
 8005fba:	d907      	bls.n	8005fcc <HAL_DMA_Init+0x2ac>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b73      	cmp	r3, #115	; 0x73
 8005fc2:	d905      	bls.n	8005fd0 <HAL_DMA_Init+0x2b0>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b77      	cmp	r3, #119	; 0x77
 8005fca:	d801      	bhi.n	8005fd0 <HAL_DMA_Init+0x2b0>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e000      	b.n	8005fd2 <HAL_DMA_Init+0x2b2>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fdc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f023 0307 	bic.w	r3, r3, #7
 8005ff4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	2b04      	cmp	r3, #4
 8006006:	d117      	bne.n	8006038 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00e      	beq.n	8006038 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f002 fb30 	bl	8008680 <DMA_CheckFifoParam>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d008      	beq.n	8006038 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2240      	movs	r2, #64	; 0x40
 800602a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e194      	b.n	8006362 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f002 fa6b 	bl	800851c <DMA_CalcBaseAndBitshift>
 8006046:	4603      	mov	r3, r0
 8006048:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	223f      	movs	r2, #63	; 0x3f
 8006054:	409a      	lsls	r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	609a      	str	r2, [r3, #8]
 800605a:	e0ca      	b.n	80061f2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a39      	ldr	r2, [pc, #228]	; (8006148 <HAL_DMA_Init+0x428>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d022      	beq.n	80060ac <HAL_DMA_Init+0x38c>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a38      	ldr	r2, [pc, #224]	; (800614c <HAL_DMA_Init+0x42c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d01d      	beq.n	80060ac <HAL_DMA_Init+0x38c>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a36      	ldr	r2, [pc, #216]	; (8006150 <HAL_DMA_Init+0x430>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d018      	beq.n	80060ac <HAL_DMA_Init+0x38c>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a35      	ldr	r2, [pc, #212]	; (8006154 <HAL_DMA_Init+0x434>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <HAL_DMA_Init+0x38c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a33      	ldr	r2, [pc, #204]	; (8006158 <HAL_DMA_Init+0x438>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_DMA_Init+0x38c>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a32      	ldr	r2, [pc, #200]	; (800615c <HAL_DMA_Init+0x43c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d009      	beq.n	80060ac <HAL_DMA_Init+0x38c>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a30      	ldr	r2, [pc, #192]	; (8006160 <HAL_DMA_Init+0x440>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_DMA_Init+0x38c>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a2f      	ldr	r2, [pc, #188]	; (8006164 <HAL_DMA_Init+0x444>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d101      	bne.n	80060b0 <HAL_DMA_Init+0x390>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <HAL_DMA_Init+0x392>
 80060b0:	2300      	movs	r3, #0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 8094 	beq.w	80061e0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a22      	ldr	r2, [pc, #136]	; (8006148 <HAL_DMA_Init+0x428>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d021      	beq.n	8006106 <HAL_DMA_Init+0x3e6>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a21      	ldr	r2, [pc, #132]	; (800614c <HAL_DMA_Init+0x42c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d01c      	beq.n	8006106 <HAL_DMA_Init+0x3e6>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1f      	ldr	r2, [pc, #124]	; (8006150 <HAL_DMA_Init+0x430>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d017      	beq.n	8006106 <HAL_DMA_Init+0x3e6>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a1e      	ldr	r2, [pc, #120]	; (8006154 <HAL_DMA_Init+0x434>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d012      	beq.n	8006106 <HAL_DMA_Init+0x3e6>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a1c      	ldr	r2, [pc, #112]	; (8006158 <HAL_DMA_Init+0x438>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00d      	beq.n	8006106 <HAL_DMA_Init+0x3e6>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a1b      	ldr	r2, [pc, #108]	; (800615c <HAL_DMA_Init+0x43c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d008      	beq.n	8006106 <HAL_DMA_Init+0x3e6>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a19      	ldr	r2, [pc, #100]	; (8006160 <HAL_DMA_Init+0x440>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d003      	beq.n	8006106 <HAL_DMA_Init+0x3e6>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a18      	ldr	r2, [pc, #96]	; (8006164 <HAL_DMA_Init+0x444>)
 8006104:	4293      	cmp	r3, r2
 8006106:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4b11      	ldr	r3, [pc, #68]	; (8006168 <HAL_DMA_Init+0x448>)
 8006124:	4013      	ands	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b40      	cmp	r3, #64	; 0x40
 800612e:	d01d      	beq.n	800616c <HAL_DMA_Init+0x44c>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	2b80      	cmp	r3, #128	; 0x80
 8006136:	d102      	bne.n	800613e <HAL_DMA_Init+0x41e>
 8006138:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800613c:	e017      	b.n	800616e <HAL_DMA_Init+0x44e>
 800613e:	2300      	movs	r3, #0
 8006140:	e015      	b.n	800616e <HAL_DMA_Init+0x44e>
 8006142:	bf00      	nop
 8006144:	fe10803f 	.word	0xfe10803f
 8006148:	58025408 	.word	0x58025408
 800614c:	5802541c 	.word	0x5802541c
 8006150:	58025430 	.word	0x58025430
 8006154:	58025444 	.word	0x58025444
 8006158:	58025458 	.word	0x58025458
 800615c:	5802546c 	.word	0x5802546c
 8006160:	58025480 	.word	0x58025480
 8006164:	58025494 	.word	0x58025494
 8006168:	fffe000f 	.word	0xfffe000f
 800616c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	68d2      	ldr	r2, [r2, #12]
 8006172:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006174:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800617c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006184:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800618c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006194:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800619c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	4b6e      	ldr	r3, [pc, #440]	; (800636c <HAL_DMA_Init+0x64c>)
 80061b4:	4413      	add	r3, r2
 80061b6:	4a6e      	ldr	r2, [pc, #440]	; (8006370 <HAL_DMA_Init+0x650>)
 80061b8:	fba2 2303 	umull	r2, r3, r2, r3
 80061bc:	091b      	lsrs	r3, r3, #4
 80061be:	009a      	lsls	r2, r3, #2
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f002 f9a9 	bl	800851c <DMA_CalcBaseAndBitshift>
 80061ca:	4603      	mov	r3, r0
 80061cc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d2:	f003 031f 	and.w	r3, r3, #31
 80061d6:	2201      	movs	r2, #1
 80061d8:	409a      	lsls	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	605a      	str	r2, [r3, #4]
 80061de:	e008      	b.n	80061f2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2240      	movs	r2, #64	; 0x40
 80061e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2203      	movs	r2, #3
 80061ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e0b7      	b.n	8006362 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a5f      	ldr	r2, [pc, #380]	; (8006374 <HAL_DMA_Init+0x654>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d072      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a5d      	ldr	r2, [pc, #372]	; (8006378 <HAL_DMA_Init+0x658>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d06d      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a5c      	ldr	r2, [pc, #368]	; (800637c <HAL_DMA_Init+0x65c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d068      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a5a      	ldr	r2, [pc, #360]	; (8006380 <HAL_DMA_Init+0x660>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d063      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a59      	ldr	r2, [pc, #356]	; (8006384 <HAL_DMA_Init+0x664>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d05e      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a57      	ldr	r2, [pc, #348]	; (8006388 <HAL_DMA_Init+0x668>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d059      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a56      	ldr	r2, [pc, #344]	; (800638c <HAL_DMA_Init+0x66c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d054      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a54      	ldr	r2, [pc, #336]	; (8006390 <HAL_DMA_Init+0x670>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d04f      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a53      	ldr	r2, [pc, #332]	; (8006394 <HAL_DMA_Init+0x674>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d04a      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a51      	ldr	r2, [pc, #324]	; (8006398 <HAL_DMA_Init+0x678>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d045      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a50      	ldr	r2, [pc, #320]	; (800639c <HAL_DMA_Init+0x67c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d040      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a4e      	ldr	r2, [pc, #312]	; (80063a0 <HAL_DMA_Init+0x680>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d03b      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a4d      	ldr	r2, [pc, #308]	; (80063a4 <HAL_DMA_Init+0x684>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d036      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a4b      	ldr	r2, [pc, #300]	; (80063a8 <HAL_DMA_Init+0x688>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d031      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a4a      	ldr	r2, [pc, #296]	; (80063ac <HAL_DMA_Init+0x68c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d02c      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a48      	ldr	r2, [pc, #288]	; (80063b0 <HAL_DMA_Init+0x690>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d027      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a47      	ldr	r2, [pc, #284]	; (80063b4 <HAL_DMA_Init+0x694>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d022      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a45      	ldr	r2, [pc, #276]	; (80063b8 <HAL_DMA_Init+0x698>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d01d      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a44      	ldr	r2, [pc, #272]	; (80063bc <HAL_DMA_Init+0x69c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d018      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a42      	ldr	r2, [pc, #264]	; (80063c0 <HAL_DMA_Init+0x6a0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a41      	ldr	r2, [pc, #260]	; (80063c4 <HAL_DMA_Init+0x6a4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a3f      	ldr	r2, [pc, #252]	; (80063c8 <HAL_DMA_Init+0x6a8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a3e      	ldr	r2, [pc, #248]	; (80063cc <HAL_DMA_Init+0x6ac>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_DMA_Init+0x5c2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a3c      	ldr	r2, [pc, #240]	; (80063d0 <HAL_DMA_Init+0x6b0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d101      	bne.n	80062e6 <HAL_DMA_Init+0x5c6>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <HAL_DMA_Init+0x5c8>
 80062e6:	2300      	movs	r3, #0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d032      	beq.n	8006352 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f002 fa43 	bl	8008778 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2b80      	cmp	r3, #128	; 0x80
 80062f8:	d102      	bne.n	8006300 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006314:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d010      	beq.n	8006340 <HAL_DMA_Init+0x620>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b08      	cmp	r3, #8
 8006324:	d80c      	bhi.n	8006340 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f002 fac0 	bl	80088ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800633c:	605a      	str	r2, [r3, #4]
 800633e:	e008      	b.n	8006352 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	a7fdabf8 	.word	0xa7fdabf8
 8006370:	cccccccd 	.word	0xcccccccd
 8006374:	40020010 	.word	0x40020010
 8006378:	40020028 	.word	0x40020028
 800637c:	40020040 	.word	0x40020040
 8006380:	40020058 	.word	0x40020058
 8006384:	40020070 	.word	0x40020070
 8006388:	40020088 	.word	0x40020088
 800638c:	400200a0 	.word	0x400200a0
 8006390:	400200b8 	.word	0x400200b8
 8006394:	40020410 	.word	0x40020410
 8006398:	40020428 	.word	0x40020428
 800639c:	40020440 	.word	0x40020440
 80063a0:	40020458 	.word	0x40020458
 80063a4:	40020470 	.word	0x40020470
 80063a8:	40020488 	.word	0x40020488
 80063ac:	400204a0 	.word	0x400204a0
 80063b0:	400204b8 	.word	0x400204b8
 80063b4:	58025408 	.word	0x58025408
 80063b8:	5802541c 	.word	0x5802541c
 80063bc:	58025430 	.word	0x58025430
 80063c0:	58025444 	.word	0x58025444
 80063c4:	58025458 	.word	0x58025458
 80063c8:	5802546c 	.word	0x5802546c
 80063cc:	58025480 	.word	0x58025480
 80063d0:	58025494 	.word	0x58025494

080063d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e226      	b.n	800683e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_DMA_Start_IT+0x2a>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e21f      	b.n	800683e <HAL_DMA_Start_IT+0x46a>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b01      	cmp	r3, #1
 8006410:	f040 820a 	bne.w	8006828 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a68      	ldr	r2, [pc, #416]	; (80065c8 <HAL_DMA_Start_IT+0x1f4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d04a      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a66      	ldr	r2, [pc, #408]	; (80065cc <HAL_DMA_Start_IT+0x1f8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d045      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a65      	ldr	r2, [pc, #404]	; (80065d0 <HAL_DMA_Start_IT+0x1fc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d040      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a63      	ldr	r2, [pc, #396]	; (80065d4 <HAL_DMA_Start_IT+0x200>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d03b      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a62      	ldr	r2, [pc, #392]	; (80065d8 <HAL_DMA_Start_IT+0x204>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d036      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a60      	ldr	r2, [pc, #384]	; (80065dc <HAL_DMA_Start_IT+0x208>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d031      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a5f      	ldr	r2, [pc, #380]	; (80065e0 <HAL_DMA_Start_IT+0x20c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d02c      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a5d      	ldr	r2, [pc, #372]	; (80065e4 <HAL_DMA_Start_IT+0x210>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d027      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a5c      	ldr	r2, [pc, #368]	; (80065e8 <HAL_DMA_Start_IT+0x214>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d022      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a5a      	ldr	r2, [pc, #360]	; (80065ec <HAL_DMA_Start_IT+0x218>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d01d      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a59      	ldr	r2, [pc, #356]	; (80065f0 <HAL_DMA_Start_IT+0x21c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d018      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a57      	ldr	r2, [pc, #348]	; (80065f4 <HAL_DMA_Start_IT+0x220>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d013      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a56      	ldr	r2, [pc, #344]	; (80065f8 <HAL_DMA_Start_IT+0x224>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00e      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a54      	ldr	r2, [pc, #336]	; (80065fc <HAL_DMA_Start_IT+0x228>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d009      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a53      	ldr	r2, [pc, #332]	; (8006600 <HAL_DMA_Start_IT+0x22c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d004      	beq.n	80064c2 <HAL_DMA_Start_IT+0xee>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a51      	ldr	r2, [pc, #324]	; (8006604 <HAL_DMA_Start_IT+0x230>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d108      	bne.n	80064d4 <HAL_DMA_Start_IT+0x100>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0201 	bic.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e007      	b.n	80064e4 <HAL_DMA_Start_IT+0x110>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0201 	bic.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f001 fe6a 	bl	80081c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a34      	ldr	r2, [pc, #208]	; (80065c8 <HAL_DMA_Start_IT+0x1f4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d04a      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a33      	ldr	r2, [pc, #204]	; (80065cc <HAL_DMA_Start_IT+0x1f8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d045      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a31      	ldr	r2, [pc, #196]	; (80065d0 <HAL_DMA_Start_IT+0x1fc>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d040      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a30      	ldr	r2, [pc, #192]	; (80065d4 <HAL_DMA_Start_IT+0x200>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d03b      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a2e      	ldr	r2, [pc, #184]	; (80065d8 <HAL_DMA_Start_IT+0x204>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d036      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a2d      	ldr	r2, [pc, #180]	; (80065dc <HAL_DMA_Start_IT+0x208>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d031      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a2b      	ldr	r2, [pc, #172]	; (80065e0 <HAL_DMA_Start_IT+0x20c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d02c      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2a      	ldr	r2, [pc, #168]	; (80065e4 <HAL_DMA_Start_IT+0x210>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d027      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a28      	ldr	r2, [pc, #160]	; (80065e8 <HAL_DMA_Start_IT+0x214>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d022      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a27      	ldr	r2, [pc, #156]	; (80065ec <HAL_DMA_Start_IT+0x218>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d01d      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a25      	ldr	r2, [pc, #148]	; (80065f0 <HAL_DMA_Start_IT+0x21c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d018      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a24      	ldr	r2, [pc, #144]	; (80065f4 <HAL_DMA_Start_IT+0x220>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a22      	ldr	r2, [pc, #136]	; (80065f8 <HAL_DMA_Start_IT+0x224>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00e      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a21      	ldr	r2, [pc, #132]	; (80065fc <HAL_DMA_Start_IT+0x228>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d009      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <HAL_DMA_Start_IT+0x22c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d004      	beq.n	8006590 <HAL_DMA_Start_IT+0x1bc>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1e      	ldr	r2, [pc, #120]	; (8006604 <HAL_DMA_Start_IT+0x230>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d101      	bne.n	8006594 <HAL_DMA_Start_IT+0x1c0>
 8006590:	2301      	movs	r3, #1
 8006592:	e000      	b.n	8006596 <HAL_DMA_Start_IT+0x1c2>
 8006594:	2300      	movs	r3, #0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d036      	beq.n	8006608 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f023 021e 	bic.w	r2, r3, #30
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0216 	orr.w	r2, r2, #22
 80065ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d03e      	beq.n	8006634 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0208 	orr.w	r2, r2, #8
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	e035      	b.n	8006634 <HAL_DMA_Start_IT+0x260>
 80065c8:	40020010 	.word	0x40020010
 80065cc:	40020028 	.word	0x40020028
 80065d0:	40020040 	.word	0x40020040
 80065d4:	40020058 	.word	0x40020058
 80065d8:	40020070 	.word	0x40020070
 80065dc:	40020088 	.word	0x40020088
 80065e0:	400200a0 	.word	0x400200a0
 80065e4:	400200b8 	.word	0x400200b8
 80065e8:	40020410 	.word	0x40020410
 80065ec:	40020428 	.word	0x40020428
 80065f0:	40020440 	.word	0x40020440
 80065f4:	40020458 	.word	0x40020458
 80065f8:	40020470 	.word	0x40020470
 80065fc:	40020488 	.word	0x40020488
 8006600:	400204a0 	.word	0x400204a0
 8006604:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f023 020e 	bic.w	r2, r3, #14
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 020a 	orr.w	r2, r2, #10
 800661a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d007      	beq.n	8006634 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0204 	orr.w	r2, r2, #4
 8006632:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a83      	ldr	r2, [pc, #524]	; (8006848 <HAL_DMA_Start_IT+0x474>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d072      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a82      	ldr	r2, [pc, #520]	; (800684c <HAL_DMA_Start_IT+0x478>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d06d      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a80      	ldr	r2, [pc, #512]	; (8006850 <HAL_DMA_Start_IT+0x47c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d068      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a7f      	ldr	r2, [pc, #508]	; (8006854 <HAL_DMA_Start_IT+0x480>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d063      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a7d      	ldr	r2, [pc, #500]	; (8006858 <HAL_DMA_Start_IT+0x484>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d05e      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a7c      	ldr	r2, [pc, #496]	; (800685c <HAL_DMA_Start_IT+0x488>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d059      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a7a      	ldr	r2, [pc, #488]	; (8006860 <HAL_DMA_Start_IT+0x48c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d054      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a79      	ldr	r2, [pc, #484]	; (8006864 <HAL_DMA_Start_IT+0x490>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d04f      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a77      	ldr	r2, [pc, #476]	; (8006868 <HAL_DMA_Start_IT+0x494>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d04a      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a76      	ldr	r2, [pc, #472]	; (800686c <HAL_DMA_Start_IT+0x498>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d045      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a74      	ldr	r2, [pc, #464]	; (8006870 <HAL_DMA_Start_IT+0x49c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d040      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a73      	ldr	r2, [pc, #460]	; (8006874 <HAL_DMA_Start_IT+0x4a0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d03b      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a71      	ldr	r2, [pc, #452]	; (8006878 <HAL_DMA_Start_IT+0x4a4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d036      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a70      	ldr	r2, [pc, #448]	; (800687c <HAL_DMA_Start_IT+0x4a8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d031      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a6e      	ldr	r2, [pc, #440]	; (8006880 <HAL_DMA_Start_IT+0x4ac>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d02c      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a6d      	ldr	r2, [pc, #436]	; (8006884 <HAL_DMA_Start_IT+0x4b0>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d027      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a6b      	ldr	r2, [pc, #428]	; (8006888 <HAL_DMA_Start_IT+0x4b4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d022      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a6a      	ldr	r2, [pc, #424]	; (800688c <HAL_DMA_Start_IT+0x4b8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d01d      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a68      	ldr	r2, [pc, #416]	; (8006890 <HAL_DMA_Start_IT+0x4bc>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d018      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a67      	ldr	r2, [pc, #412]	; (8006894 <HAL_DMA_Start_IT+0x4c0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d013      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a65      	ldr	r2, [pc, #404]	; (8006898 <HAL_DMA_Start_IT+0x4c4>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00e      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a64      	ldr	r2, [pc, #400]	; (800689c <HAL_DMA_Start_IT+0x4c8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d009      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a62      	ldr	r2, [pc, #392]	; (80068a0 <HAL_DMA_Start_IT+0x4cc>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <HAL_DMA_Start_IT+0x350>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a61      	ldr	r2, [pc, #388]	; (80068a4 <HAL_DMA_Start_IT+0x4d0>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d101      	bne.n	8006728 <HAL_DMA_Start_IT+0x354>
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <HAL_DMA_Start_IT+0x356>
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01a      	beq.n	8006764 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800674a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d007      	beq.n	8006764 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006762:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a37      	ldr	r2, [pc, #220]	; (8006848 <HAL_DMA_Start_IT+0x474>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d04a      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a36      	ldr	r2, [pc, #216]	; (800684c <HAL_DMA_Start_IT+0x478>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d045      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a34      	ldr	r2, [pc, #208]	; (8006850 <HAL_DMA_Start_IT+0x47c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d040      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a33      	ldr	r2, [pc, #204]	; (8006854 <HAL_DMA_Start_IT+0x480>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d03b      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a31      	ldr	r2, [pc, #196]	; (8006858 <HAL_DMA_Start_IT+0x484>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d036      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a30      	ldr	r2, [pc, #192]	; (800685c <HAL_DMA_Start_IT+0x488>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d031      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a2e      	ldr	r2, [pc, #184]	; (8006860 <HAL_DMA_Start_IT+0x48c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d02c      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a2d      	ldr	r2, [pc, #180]	; (8006864 <HAL_DMA_Start_IT+0x490>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d027      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a2b      	ldr	r2, [pc, #172]	; (8006868 <HAL_DMA_Start_IT+0x494>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d022      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a2a      	ldr	r2, [pc, #168]	; (800686c <HAL_DMA_Start_IT+0x498>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d01d      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a28      	ldr	r2, [pc, #160]	; (8006870 <HAL_DMA_Start_IT+0x49c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d018      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a27      	ldr	r2, [pc, #156]	; (8006874 <HAL_DMA_Start_IT+0x4a0>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d013      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a25      	ldr	r2, [pc, #148]	; (8006878 <HAL_DMA_Start_IT+0x4a4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00e      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a24      	ldr	r2, [pc, #144]	; (800687c <HAL_DMA_Start_IT+0x4a8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a22      	ldr	r2, [pc, #136]	; (8006880 <HAL_DMA_Start_IT+0x4ac>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d004      	beq.n	8006804 <HAL_DMA_Start_IT+0x430>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a21      	ldr	r2, [pc, #132]	; (8006884 <HAL_DMA_Start_IT+0x4b0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d108      	bne.n	8006816 <HAL_DMA_Start_IT+0x442>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	e012      	b.n	800683c <HAL_DMA_Start_IT+0x468>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0201 	orr.w	r2, r2, #1
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	e009      	b.n	800683c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800682e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800683c:	7dfb      	ldrb	r3, [r7, #23]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	40020010 	.word	0x40020010
 800684c:	40020028 	.word	0x40020028
 8006850:	40020040 	.word	0x40020040
 8006854:	40020058 	.word	0x40020058
 8006858:	40020070 	.word	0x40020070
 800685c:	40020088 	.word	0x40020088
 8006860:	400200a0 	.word	0x400200a0
 8006864:	400200b8 	.word	0x400200b8
 8006868:	40020410 	.word	0x40020410
 800686c:	40020428 	.word	0x40020428
 8006870:	40020440 	.word	0x40020440
 8006874:	40020458 	.word	0x40020458
 8006878:	40020470 	.word	0x40020470
 800687c:	40020488 	.word	0x40020488
 8006880:	400204a0 	.word	0x400204a0
 8006884:	400204b8 	.word	0x400204b8
 8006888:	58025408 	.word	0x58025408
 800688c:	5802541c 	.word	0x5802541c
 8006890:	58025430 	.word	0x58025430
 8006894:	58025444 	.word	0x58025444
 8006898:	58025458 	.word	0x58025458
 800689c:	5802546c 	.word	0x5802546c
 80068a0:	58025480 	.word	0x58025480
 80068a4:	58025494 	.word	0x58025494

080068a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80068b0:	f7ff f91a 	bl	8005ae8 <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e2dc      	b.n	8006e7a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d008      	beq.n	80068de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2280      	movs	r2, #128	; 0x80
 80068d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e2cd      	b.n	8006e7a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a76      	ldr	r2, [pc, #472]	; (8006abc <HAL_DMA_Abort+0x214>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d04a      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a74      	ldr	r2, [pc, #464]	; (8006ac0 <HAL_DMA_Abort+0x218>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d045      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a73      	ldr	r2, [pc, #460]	; (8006ac4 <HAL_DMA_Abort+0x21c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d040      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a71      	ldr	r2, [pc, #452]	; (8006ac8 <HAL_DMA_Abort+0x220>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d03b      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a70      	ldr	r2, [pc, #448]	; (8006acc <HAL_DMA_Abort+0x224>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d036      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a6e      	ldr	r2, [pc, #440]	; (8006ad0 <HAL_DMA_Abort+0x228>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d031      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a6d      	ldr	r2, [pc, #436]	; (8006ad4 <HAL_DMA_Abort+0x22c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d02c      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a6b      	ldr	r2, [pc, #428]	; (8006ad8 <HAL_DMA_Abort+0x230>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d027      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a6a      	ldr	r2, [pc, #424]	; (8006adc <HAL_DMA_Abort+0x234>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d022      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a68      	ldr	r2, [pc, #416]	; (8006ae0 <HAL_DMA_Abort+0x238>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d01d      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a67      	ldr	r2, [pc, #412]	; (8006ae4 <HAL_DMA_Abort+0x23c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d018      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a65      	ldr	r2, [pc, #404]	; (8006ae8 <HAL_DMA_Abort+0x240>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a64      	ldr	r2, [pc, #400]	; (8006aec <HAL_DMA_Abort+0x244>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00e      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a62      	ldr	r2, [pc, #392]	; (8006af0 <HAL_DMA_Abort+0x248>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d009      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a61      	ldr	r2, [pc, #388]	; (8006af4 <HAL_DMA_Abort+0x24c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d004      	beq.n	800697e <HAL_DMA_Abort+0xd6>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a5f      	ldr	r2, [pc, #380]	; (8006af8 <HAL_DMA_Abort+0x250>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d101      	bne.n	8006982 <HAL_DMA_Abort+0xda>
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <HAL_DMA_Abort+0xdc>
 8006982:	2300      	movs	r3, #0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d013      	beq.n	80069b0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 021e 	bic.w	r2, r2, #30
 8006996:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695a      	ldr	r2, [r3, #20]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069a6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e00a      	b.n	80069c6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 020e 	bic.w	r2, r2, #14
 80069be:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a3c      	ldr	r2, [pc, #240]	; (8006abc <HAL_DMA_Abort+0x214>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d072      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a3a      	ldr	r2, [pc, #232]	; (8006ac0 <HAL_DMA_Abort+0x218>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d06d      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a39      	ldr	r2, [pc, #228]	; (8006ac4 <HAL_DMA_Abort+0x21c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d068      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a37      	ldr	r2, [pc, #220]	; (8006ac8 <HAL_DMA_Abort+0x220>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d063      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a36      	ldr	r2, [pc, #216]	; (8006acc <HAL_DMA_Abort+0x224>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d05e      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a34      	ldr	r2, [pc, #208]	; (8006ad0 <HAL_DMA_Abort+0x228>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d059      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a33      	ldr	r2, [pc, #204]	; (8006ad4 <HAL_DMA_Abort+0x22c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d054      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a31      	ldr	r2, [pc, #196]	; (8006ad8 <HAL_DMA_Abort+0x230>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d04f      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a30      	ldr	r2, [pc, #192]	; (8006adc <HAL_DMA_Abort+0x234>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d04a      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a2e      	ldr	r2, [pc, #184]	; (8006ae0 <HAL_DMA_Abort+0x238>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d045      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a2d      	ldr	r2, [pc, #180]	; (8006ae4 <HAL_DMA_Abort+0x23c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d040      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a2b      	ldr	r2, [pc, #172]	; (8006ae8 <HAL_DMA_Abort+0x240>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d03b      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a2a      	ldr	r2, [pc, #168]	; (8006aec <HAL_DMA_Abort+0x244>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d036      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a28      	ldr	r2, [pc, #160]	; (8006af0 <HAL_DMA_Abort+0x248>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d031      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a27      	ldr	r2, [pc, #156]	; (8006af4 <HAL_DMA_Abort+0x24c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d02c      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a25      	ldr	r2, [pc, #148]	; (8006af8 <HAL_DMA_Abort+0x250>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d027      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a24      	ldr	r2, [pc, #144]	; (8006afc <HAL_DMA_Abort+0x254>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d022      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a22      	ldr	r2, [pc, #136]	; (8006b00 <HAL_DMA_Abort+0x258>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01d      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a21      	ldr	r2, [pc, #132]	; (8006b04 <HAL_DMA_Abort+0x25c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d018      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1f      	ldr	r2, [pc, #124]	; (8006b08 <HAL_DMA_Abort+0x260>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a1e      	ldr	r2, [pc, #120]	; (8006b0c <HAL_DMA_Abort+0x264>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1c      	ldr	r2, [pc, #112]	; (8006b10 <HAL_DMA_Abort+0x268>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <HAL_DMA_Abort+0x26c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_DMA_Abort+0x20e>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a19      	ldr	r2, [pc, #100]	; (8006b18 <HAL_DMA_Abort+0x270>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d132      	bne.n	8006b1c <HAL_DMA_Abort+0x274>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e031      	b.n	8006b1e <HAL_DMA_Abort+0x276>
 8006aba:	bf00      	nop
 8006abc:	40020010 	.word	0x40020010
 8006ac0:	40020028 	.word	0x40020028
 8006ac4:	40020040 	.word	0x40020040
 8006ac8:	40020058 	.word	0x40020058
 8006acc:	40020070 	.word	0x40020070
 8006ad0:	40020088 	.word	0x40020088
 8006ad4:	400200a0 	.word	0x400200a0
 8006ad8:	400200b8 	.word	0x400200b8
 8006adc:	40020410 	.word	0x40020410
 8006ae0:	40020428 	.word	0x40020428
 8006ae4:	40020440 	.word	0x40020440
 8006ae8:	40020458 	.word	0x40020458
 8006aec:	40020470 	.word	0x40020470
 8006af0:	40020488 	.word	0x40020488
 8006af4:	400204a0 	.word	0x400204a0
 8006af8:	400204b8 	.word	0x400204b8
 8006afc:	58025408 	.word	0x58025408
 8006b00:	5802541c 	.word	0x5802541c
 8006b04:	58025430 	.word	0x58025430
 8006b08:	58025444 	.word	0x58025444
 8006b0c:	58025458 	.word	0x58025458
 8006b10:	5802546c 	.word	0x5802546c
 8006b14:	58025480 	.word	0x58025480
 8006b18:	58025494 	.word	0x58025494
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d007      	beq.n	8006b32 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b30:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a6d      	ldr	r2, [pc, #436]	; (8006cec <HAL_DMA_Abort+0x444>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d04a      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a6b      	ldr	r2, [pc, #428]	; (8006cf0 <HAL_DMA_Abort+0x448>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d045      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a6a      	ldr	r2, [pc, #424]	; (8006cf4 <HAL_DMA_Abort+0x44c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d040      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a68      	ldr	r2, [pc, #416]	; (8006cf8 <HAL_DMA_Abort+0x450>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d03b      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a67      	ldr	r2, [pc, #412]	; (8006cfc <HAL_DMA_Abort+0x454>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d036      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a65      	ldr	r2, [pc, #404]	; (8006d00 <HAL_DMA_Abort+0x458>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d031      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a64      	ldr	r2, [pc, #400]	; (8006d04 <HAL_DMA_Abort+0x45c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d02c      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a62      	ldr	r2, [pc, #392]	; (8006d08 <HAL_DMA_Abort+0x460>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d027      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a61      	ldr	r2, [pc, #388]	; (8006d0c <HAL_DMA_Abort+0x464>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d022      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a5f      	ldr	r2, [pc, #380]	; (8006d10 <HAL_DMA_Abort+0x468>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d01d      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a5e      	ldr	r2, [pc, #376]	; (8006d14 <HAL_DMA_Abort+0x46c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d018      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a5c      	ldr	r2, [pc, #368]	; (8006d18 <HAL_DMA_Abort+0x470>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d013      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a5b      	ldr	r2, [pc, #364]	; (8006d1c <HAL_DMA_Abort+0x474>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00e      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a59      	ldr	r2, [pc, #356]	; (8006d20 <HAL_DMA_Abort+0x478>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d009      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a58      	ldr	r2, [pc, #352]	; (8006d24 <HAL_DMA_Abort+0x47c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d004      	beq.n	8006bd2 <HAL_DMA_Abort+0x32a>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a56      	ldr	r2, [pc, #344]	; (8006d28 <HAL_DMA_Abort+0x480>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d108      	bne.n	8006be4 <HAL_DMA_Abort+0x33c>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0201 	bic.w	r2, r2, #1
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	e007      	b.n	8006bf4 <HAL_DMA_Abort+0x34c>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0201 	bic.w	r2, r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006bf4:	e013      	b.n	8006c1e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bf6:	f7fe ff77 	bl	8005ae8 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b05      	cmp	r3, #5
 8006c02:	d90c      	bls.n	8006c1e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e12d      	b.n	8006e7a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e5      	bne.n	8006bf6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a2f      	ldr	r2, [pc, #188]	; (8006cec <HAL_DMA_Abort+0x444>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d04a      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a2d      	ldr	r2, [pc, #180]	; (8006cf0 <HAL_DMA_Abort+0x448>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d045      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a2c      	ldr	r2, [pc, #176]	; (8006cf4 <HAL_DMA_Abort+0x44c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d040      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a2a      	ldr	r2, [pc, #168]	; (8006cf8 <HAL_DMA_Abort+0x450>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d03b      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a29      	ldr	r2, [pc, #164]	; (8006cfc <HAL_DMA_Abort+0x454>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d036      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a27      	ldr	r2, [pc, #156]	; (8006d00 <HAL_DMA_Abort+0x458>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d031      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a26      	ldr	r2, [pc, #152]	; (8006d04 <HAL_DMA_Abort+0x45c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d02c      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a24      	ldr	r2, [pc, #144]	; (8006d08 <HAL_DMA_Abort+0x460>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d027      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a23      	ldr	r2, [pc, #140]	; (8006d0c <HAL_DMA_Abort+0x464>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d022      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a21      	ldr	r2, [pc, #132]	; (8006d10 <HAL_DMA_Abort+0x468>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d01d      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a20      	ldr	r2, [pc, #128]	; (8006d14 <HAL_DMA_Abort+0x46c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d018      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1e      	ldr	r2, [pc, #120]	; (8006d18 <HAL_DMA_Abort+0x470>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d013      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a1d      	ldr	r2, [pc, #116]	; (8006d1c <HAL_DMA_Abort+0x474>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d00e      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1b      	ldr	r2, [pc, #108]	; (8006d20 <HAL_DMA_Abort+0x478>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d009      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1a      	ldr	r2, [pc, #104]	; (8006d24 <HAL_DMA_Abort+0x47c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d004      	beq.n	8006cca <HAL_DMA_Abort+0x422>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a18      	ldr	r2, [pc, #96]	; (8006d28 <HAL_DMA_Abort+0x480>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d101      	bne.n	8006cce <HAL_DMA_Abort+0x426>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e000      	b.n	8006cd0 <HAL_DMA_Abort+0x428>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d02b      	beq.n	8006d2c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cde:	f003 031f 	and.w	r3, r3, #31
 8006ce2:	223f      	movs	r2, #63	; 0x3f
 8006ce4:	409a      	lsls	r2, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	609a      	str	r2, [r3, #8]
 8006cea:	e02a      	b.n	8006d42 <HAL_DMA_Abort+0x49a>
 8006cec:	40020010 	.word	0x40020010
 8006cf0:	40020028 	.word	0x40020028
 8006cf4:	40020040 	.word	0x40020040
 8006cf8:	40020058 	.word	0x40020058
 8006cfc:	40020070 	.word	0x40020070
 8006d00:	40020088 	.word	0x40020088
 8006d04:	400200a0 	.word	0x400200a0
 8006d08:	400200b8 	.word	0x400200b8
 8006d0c:	40020410 	.word	0x40020410
 8006d10:	40020428 	.word	0x40020428
 8006d14:	40020440 	.word	0x40020440
 8006d18:	40020458 	.word	0x40020458
 8006d1c:	40020470 	.word	0x40020470
 8006d20:	40020488 	.word	0x40020488
 8006d24:	400204a0 	.word	0x400204a0
 8006d28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d30:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d36:	f003 031f 	and.w	r3, r3, #31
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	409a      	lsls	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a4f      	ldr	r2, [pc, #316]	; (8006e84 <HAL_DMA_Abort+0x5dc>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d072      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a4d      	ldr	r2, [pc, #308]	; (8006e88 <HAL_DMA_Abort+0x5e0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d06d      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a4c      	ldr	r2, [pc, #304]	; (8006e8c <HAL_DMA_Abort+0x5e4>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d068      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a4a      	ldr	r2, [pc, #296]	; (8006e90 <HAL_DMA_Abort+0x5e8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d063      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a49      	ldr	r2, [pc, #292]	; (8006e94 <HAL_DMA_Abort+0x5ec>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d05e      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a47      	ldr	r2, [pc, #284]	; (8006e98 <HAL_DMA_Abort+0x5f0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d059      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a46      	ldr	r2, [pc, #280]	; (8006e9c <HAL_DMA_Abort+0x5f4>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d054      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a44      	ldr	r2, [pc, #272]	; (8006ea0 <HAL_DMA_Abort+0x5f8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d04f      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a43      	ldr	r2, [pc, #268]	; (8006ea4 <HAL_DMA_Abort+0x5fc>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d04a      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a41      	ldr	r2, [pc, #260]	; (8006ea8 <HAL_DMA_Abort+0x600>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d045      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a40      	ldr	r2, [pc, #256]	; (8006eac <HAL_DMA_Abort+0x604>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d040      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a3e      	ldr	r2, [pc, #248]	; (8006eb0 <HAL_DMA_Abort+0x608>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d03b      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a3d      	ldr	r2, [pc, #244]	; (8006eb4 <HAL_DMA_Abort+0x60c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d036      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a3b      	ldr	r2, [pc, #236]	; (8006eb8 <HAL_DMA_Abort+0x610>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d031      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a3a      	ldr	r2, [pc, #232]	; (8006ebc <HAL_DMA_Abort+0x614>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d02c      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a38      	ldr	r2, [pc, #224]	; (8006ec0 <HAL_DMA_Abort+0x618>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d027      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a37      	ldr	r2, [pc, #220]	; (8006ec4 <HAL_DMA_Abort+0x61c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d022      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a35      	ldr	r2, [pc, #212]	; (8006ec8 <HAL_DMA_Abort+0x620>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d01d      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a34      	ldr	r2, [pc, #208]	; (8006ecc <HAL_DMA_Abort+0x624>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d018      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a32      	ldr	r2, [pc, #200]	; (8006ed0 <HAL_DMA_Abort+0x628>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d013      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a31      	ldr	r2, [pc, #196]	; (8006ed4 <HAL_DMA_Abort+0x62c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00e      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a2f      	ldr	r2, [pc, #188]	; (8006ed8 <HAL_DMA_Abort+0x630>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d009      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a2e      	ldr	r2, [pc, #184]	; (8006edc <HAL_DMA_Abort+0x634>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d004      	beq.n	8006e32 <HAL_DMA_Abort+0x58a>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a2c      	ldr	r2, [pc, #176]	; (8006ee0 <HAL_DMA_Abort+0x638>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d101      	bne.n	8006e36 <HAL_DMA_Abort+0x58e>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e000      	b.n	8006e38 <HAL_DMA_Abort+0x590>
 8006e36:	2300      	movs	r3, #0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d015      	beq.n	8006e68 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e44:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00c      	beq.n	8006e68 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e5c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e66:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	40020010 	.word	0x40020010
 8006e88:	40020028 	.word	0x40020028
 8006e8c:	40020040 	.word	0x40020040
 8006e90:	40020058 	.word	0x40020058
 8006e94:	40020070 	.word	0x40020070
 8006e98:	40020088 	.word	0x40020088
 8006e9c:	400200a0 	.word	0x400200a0
 8006ea0:	400200b8 	.word	0x400200b8
 8006ea4:	40020410 	.word	0x40020410
 8006ea8:	40020428 	.word	0x40020428
 8006eac:	40020440 	.word	0x40020440
 8006eb0:	40020458 	.word	0x40020458
 8006eb4:	40020470 	.word	0x40020470
 8006eb8:	40020488 	.word	0x40020488
 8006ebc:	400204a0 	.word	0x400204a0
 8006ec0:	400204b8 	.word	0x400204b8
 8006ec4:	58025408 	.word	0x58025408
 8006ec8:	5802541c 	.word	0x5802541c
 8006ecc:	58025430 	.word	0x58025430
 8006ed0:	58025444 	.word	0x58025444
 8006ed4:	58025458 	.word	0x58025458
 8006ed8:	5802546c 	.word	0x5802546c
 8006edc:	58025480 	.word	0x58025480
 8006ee0:	58025494 	.word	0x58025494

08006ee4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e237      	b.n	8007366 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d004      	beq.n	8006f0c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2280      	movs	r2, #128	; 0x80
 8006f06:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e22c      	b.n	8007366 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a5c      	ldr	r2, [pc, #368]	; (8007084 <HAL_DMA_Abort_IT+0x1a0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d04a      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a5b      	ldr	r2, [pc, #364]	; (8007088 <HAL_DMA_Abort_IT+0x1a4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d045      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a59      	ldr	r2, [pc, #356]	; (800708c <HAL_DMA_Abort_IT+0x1a8>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d040      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a58      	ldr	r2, [pc, #352]	; (8007090 <HAL_DMA_Abort_IT+0x1ac>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d03b      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a56      	ldr	r2, [pc, #344]	; (8007094 <HAL_DMA_Abort_IT+0x1b0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d036      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a55      	ldr	r2, [pc, #340]	; (8007098 <HAL_DMA_Abort_IT+0x1b4>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d031      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a53      	ldr	r2, [pc, #332]	; (800709c <HAL_DMA_Abort_IT+0x1b8>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d02c      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a52      	ldr	r2, [pc, #328]	; (80070a0 <HAL_DMA_Abort_IT+0x1bc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d027      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a50      	ldr	r2, [pc, #320]	; (80070a4 <HAL_DMA_Abort_IT+0x1c0>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d022      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a4f      	ldr	r2, [pc, #316]	; (80070a8 <HAL_DMA_Abort_IT+0x1c4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d01d      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a4d      	ldr	r2, [pc, #308]	; (80070ac <HAL_DMA_Abort_IT+0x1c8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d018      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a4c      	ldr	r2, [pc, #304]	; (80070b0 <HAL_DMA_Abort_IT+0x1cc>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d013      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a4a      	ldr	r2, [pc, #296]	; (80070b4 <HAL_DMA_Abort_IT+0x1d0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00e      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a49      	ldr	r2, [pc, #292]	; (80070b8 <HAL_DMA_Abort_IT+0x1d4>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d009      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a47      	ldr	r2, [pc, #284]	; (80070bc <HAL_DMA_Abort_IT+0x1d8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d004      	beq.n	8006fac <HAL_DMA_Abort_IT+0xc8>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a46      	ldr	r2, [pc, #280]	; (80070c0 <HAL_DMA_Abort_IT+0x1dc>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d101      	bne.n	8006fb0 <HAL_DMA_Abort_IT+0xcc>
 8006fac:	2301      	movs	r3, #1
 8006fae:	e000      	b.n	8006fb2 <HAL_DMA_Abort_IT+0xce>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 8086 	beq.w	80070c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2204      	movs	r2, #4
 8006fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a2f      	ldr	r2, [pc, #188]	; (8007084 <HAL_DMA_Abort_IT+0x1a0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d04a      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a2e      	ldr	r2, [pc, #184]	; (8007088 <HAL_DMA_Abort_IT+0x1a4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d045      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a2c      	ldr	r2, [pc, #176]	; (800708c <HAL_DMA_Abort_IT+0x1a8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d040      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a2b      	ldr	r2, [pc, #172]	; (8007090 <HAL_DMA_Abort_IT+0x1ac>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d03b      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a29      	ldr	r2, [pc, #164]	; (8007094 <HAL_DMA_Abort_IT+0x1b0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d036      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a28      	ldr	r2, [pc, #160]	; (8007098 <HAL_DMA_Abort_IT+0x1b4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d031      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a26      	ldr	r2, [pc, #152]	; (800709c <HAL_DMA_Abort_IT+0x1b8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d02c      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a25      	ldr	r2, [pc, #148]	; (80070a0 <HAL_DMA_Abort_IT+0x1bc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d027      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a23      	ldr	r2, [pc, #140]	; (80070a4 <HAL_DMA_Abort_IT+0x1c0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d022      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a22      	ldr	r2, [pc, #136]	; (80070a8 <HAL_DMA_Abort_IT+0x1c4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d01d      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a20      	ldr	r2, [pc, #128]	; (80070ac <HAL_DMA_Abort_IT+0x1c8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d018      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1f      	ldr	r2, [pc, #124]	; (80070b0 <HAL_DMA_Abort_IT+0x1cc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d013      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1d      	ldr	r2, [pc, #116]	; (80070b4 <HAL_DMA_Abort_IT+0x1d0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00e      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1c      	ldr	r2, [pc, #112]	; (80070b8 <HAL_DMA_Abort_IT+0x1d4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d009      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1a      	ldr	r2, [pc, #104]	; (80070bc <HAL_DMA_Abort_IT+0x1d8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <HAL_DMA_Abort_IT+0x17c>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a19      	ldr	r2, [pc, #100]	; (80070c0 <HAL_DMA_Abort_IT+0x1dc>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d108      	bne.n	8007072 <HAL_DMA_Abort_IT+0x18e>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0201 	bic.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	e178      	b.n	8007364 <HAL_DMA_Abort_IT+0x480>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0201 	bic.w	r2, r2, #1
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	e16f      	b.n	8007364 <HAL_DMA_Abort_IT+0x480>
 8007084:	40020010 	.word	0x40020010
 8007088:	40020028 	.word	0x40020028
 800708c:	40020040 	.word	0x40020040
 8007090:	40020058 	.word	0x40020058
 8007094:	40020070 	.word	0x40020070
 8007098:	40020088 	.word	0x40020088
 800709c:	400200a0 	.word	0x400200a0
 80070a0:	400200b8 	.word	0x400200b8
 80070a4:	40020410 	.word	0x40020410
 80070a8:	40020428 	.word	0x40020428
 80070ac:	40020440 	.word	0x40020440
 80070b0:	40020458 	.word	0x40020458
 80070b4:	40020470 	.word	0x40020470
 80070b8:	40020488 	.word	0x40020488
 80070bc:	400204a0 	.word	0x400204a0
 80070c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 020e 	bic.w	r2, r2, #14
 80070d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a6c      	ldr	r2, [pc, #432]	; (800728c <HAL_DMA_Abort_IT+0x3a8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d04a      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a6b      	ldr	r2, [pc, #428]	; (8007290 <HAL_DMA_Abort_IT+0x3ac>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d045      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a69      	ldr	r2, [pc, #420]	; (8007294 <HAL_DMA_Abort_IT+0x3b0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d040      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a68      	ldr	r2, [pc, #416]	; (8007298 <HAL_DMA_Abort_IT+0x3b4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d03b      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a66      	ldr	r2, [pc, #408]	; (800729c <HAL_DMA_Abort_IT+0x3b8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d036      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a65      	ldr	r2, [pc, #404]	; (80072a0 <HAL_DMA_Abort_IT+0x3bc>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d031      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a63      	ldr	r2, [pc, #396]	; (80072a4 <HAL_DMA_Abort_IT+0x3c0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d02c      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a62      	ldr	r2, [pc, #392]	; (80072a8 <HAL_DMA_Abort_IT+0x3c4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d027      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a60      	ldr	r2, [pc, #384]	; (80072ac <HAL_DMA_Abort_IT+0x3c8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d022      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a5f      	ldr	r2, [pc, #380]	; (80072b0 <HAL_DMA_Abort_IT+0x3cc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d01d      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a5d      	ldr	r2, [pc, #372]	; (80072b4 <HAL_DMA_Abort_IT+0x3d0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d018      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a5c      	ldr	r2, [pc, #368]	; (80072b8 <HAL_DMA_Abort_IT+0x3d4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d013      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a5a      	ldr	r2, [pc, #360]	; (80072bc <HAL_DMA_Abort_IT+0x3d8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00e      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a59      	ldr	r2, [pc, #356]	; (80072c0 <HAL_DMA_Abort_IT+0x3dc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d009      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a57      	ldr	r2, [pc, #348]	; (80072c4 <HAL_DMA_Abort_IT+0x3e0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d004      	beq.n	8007174 <HAL_DMA_Abort_IT+0x290>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a56      	ldr	r2, [pc, #344]	; (80072c8 <HAL_DMA_Abort_IT+0x3e4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d108      	bne.n	8007186 <HAL_DMA_Abort_IT+0x2a2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 0201 	bic.w	r2, r2, #1
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	e007      	b.n	8007196 <HAL_DMA_Abort_IT+0x2b2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0201 	bic.w	r2, r2, #1
 8007194:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a3c      	ldr	r2, [pc, #240]	; (800728c <HAL_DMA_Abort_IT+0x3a8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d072      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a3a      	ldr	r2, [pc, #232]	; (8007290 <HAL_DMA_Abort_IT+0x3ac>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d06d      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a39      	ldr	r2, [pc, #228]	; (8007294 <HAL_DMA_Abort_IT+0x3b0>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d068      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a37      	ldr	r2, [pc, #220]	; (8007298 <HAL_DMA_Abort_IT+0x3b4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d063      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a36      	ldr	r2, [pc, #216]	; (800729c <HAL_DMA_Abort_IT+0x3b8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d05e      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a34      	ldr	r2, [pc, #208]	; (80072a0 <HAL_DMA_Abort_IT+0x3bc>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d059      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a33      	ldr	r2, [pc, #204]	; (80072a4 <HAL_DMA_Abort_IT+0x3c0>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d054      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a31      	ldr	r2, [pc, #196]	; (80072a8 <HAL_DMA_Abort_IT+0x3c4>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d04f      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a30      	ldr	r2, [pc, #192]	; (80072ac <HAL_DMA_Abort_IT+0x3c8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d04a      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a2e      	ldr	r2, [pc, #184]	; (80072b0 <HAL_DMA_Abort_IT+0x3cc>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d045      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a2d      	ldr	r2, [pc, #180]	; (80072b4 <HAL_DMA_Abort_IT+0x3d0>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d040      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a2b      	ldr	r2, [pc, #172]	; (80072b8 <HAL_DMA_Abort_IT+0x3d4>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d03b      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a2a      	ldr	r2, [pc, #168]	; (80072bc <HAL_DMA_Abort_IT+0x3d8>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d036      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a28      	ldr	r2, [pc, #160]	; (80072c0 <HAL_DMA_Abort_IT+0x3dc>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d031      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a27      	ldr	r2, [pc, #156]	; (80072c4 <HAL_DMA_Abort_IT+0x3e0>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d02c      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a25      	ldr	r2, [pc, #148]	; (80072c8 <HAL_DMA_Abort_IT+0x3e4>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d027      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a24      	ldr	r2, [pc, #144]	; (80072cc <HAL_DMA_Abort_IT+0x3e8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d022      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a22      	ldr	r2, [pc, #136]	; (80072d0 <HAL_DMA_Abort_IT+0x3ec>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01d      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a21      	ldr	r2, [pc, #132]	; (80072d4 <HAL_DMA_Abort_IT+0x3f0>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d018      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a1f      	ldr	r2, [pc, #124]	; (80072d8 <HAL_DMA_Abort_IT+0x3f4>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d013      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a1e      	ldr	r2, [pc, #120]	; (80072dc <HAL_DMA_Abort_IT+0x3f8>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d00e      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1c      	ldr	r2, [pc, #112]	; (80072e0 <HAL_DMA_Abort_IT+0x3fc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d009      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a1b      	ldr	r2, [pc, #108]	; (80072e4 <HAL_DMA_Abort_IT+0x400>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d004      	beq.n	8007286 <HAL_DMA_Abort_IT+0x3a2>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a19      	ldr	r2, [pc, #100]	; (80072e8 <HAL_DMA_Abort_IT+0x404>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d132      	bne.n	80072ec <HAL_DMA_Abort_IT+0x408>
 8007286:	2301      	movs	r3, #1
 8007288:	e031      	b.n	80072ee <HAL_DMA_Abort_IT+0x40a>
 800728a:	bf00      	nop
 800728c:	40020010 	.word	0x40020010
 8007290:	40020028 	.word	0x40020028
 8007294:	40020040 	.word	0x40020040
 8007298:	40020058 	.word	0x40020058
 800729c:	40020070 	.word	0x40020070
 80072a0:	40020088 	.word	0x40020088
 80072a4:	400200a0 	.word	0x400200a0
 80072a8:	400200b8 	.word	0x400200b8
 80072ac:	40020410 	.word	0x40020410
 80072b0:	40020428 	.word	0x40020428
 80072b4:	40020440 	.word	0x40020440
 80072b8:	40020458 	.word	0x40020458
 80072bc:	40020470 	.word	0x40020470
 80072c0:	40020488 	.word	0x40020488
 80072c4:	400204a0 	.word	0x400204a0
 80072c8:	400204b8 	.word	0x400204b8
 80072cc:	58025408 	.word	0x58025408
 80072d0:	5802541c 	.word	0x5802541c
 80072d4:	58025430 	.word	0x58025430
 80072d8:	58025444 	.word	0x58025444
 80072dc:	58025458 	.word	0x58025458
 80072e0:	5802546c 	.word	0x5802546c
 80072e4:	58025480 	.word	0x58025480
 80072e8:	58025494 	.word	0x58025494
 80072ec:	2300      	movs	r3, #0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d028      	beq.n	8007344 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007300:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007306:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800730c:	f003 031f 	and.w	r3, r3, #31
 8007310:	2201      	movs	r2, #1
 8007312:	409a      	lsls	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007320:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00c      	beq.n	8007344 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007338:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007342:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop

08007370 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08a      	sub	sp, #40	; 0x28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800737c:	4b67      	ldr	r3, [pc, #412]	; (800751c <HAL_DMA_IRQHandler+0x1ac>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a67      	ldr	r2, [pc, #412]	; (8007520 <HAL_DMA_IRQHandler+0x1b0>)
 8007382:	fba2 2303 	umull	r2, r3, r2, r3
 8007386:	0a9b      	lsrs	r3, r3, #10
 8007388:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007394:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a5f      	ldr	r2, [pc, #380]	; (8007524 <HAL_DMA_IRQHandler+0x1b4>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d04a      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a5d      	ldr	r2, [pc, #372]	; (8007528 <HAL_DMA_IRQHandler+0x1b8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d045      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a5c      	ldr	r2, [pc, #368]	; (800752c <HAL_DMA_IRQHandler+0x1bc>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d040      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a5a      	ldr	r2, [pc, #360]	; (8007530 <HAL_DMA_IRQHandler+0x1c0>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d03b      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a59      	ldr	r2, [pc, #356]	; (8007534 <HAL_DMA_IRQHandler+0x1c4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d036      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a57      	ldr	r2, [pc, #348]	; (8007538 <HAL_DMA_IRQHandler+0x1c8>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d031      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a56      	ldr	r2, [pc, #344]	; (800753c <HAL_DMA_IRQHandler+0x1cc>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d02c      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a54      	ldr	r2, [pc, #336]	; (8007540 <HAL_DMA_IRQHandler+0x1d0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d027      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a53      	ldr	r2, [pc, #332]	; (8007544 <HAL_DMA_IRQHandler+0x1d4>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d022      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a51      	ldr	r2, [pc, #324]	; (8007548 <HAL_DMA_IRQHandler+0x1d8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d01d      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a50      	ldr	r2, [pc, #320]	; (800754c <HAL_DMA_IRQHandler+0x1dc>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d018      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a4e      	ldr	r2, [pc, #312]	; (8007550 <HAL_DMA_IRQHandler+0x1e0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d013      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a4d      	ldr	r2, [pc, #308]	; (8007554 <HAL_DMA_IRQHandler+0x1e4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00e      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a4b      	ldr	r2, [pc, #300]	; (8007558 <HAL_DMA_IRQHandler+0x1e8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d009      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a4a      	ldr	r2, [pc, #296]	; (800755c <HAL_DMA_IRQHandler+0x1ec>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d004      	beq.n	8007442 <HAL_DMA_IRQHandler+0xd2>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a48      	ldr	r2, [pc, #288]	; (8007560 <HAL_DMA_IRQHandler+0x1f0>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d101      	bne.n	8007446 <HAL_DMA_IRQHandler+0xd6>
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <HAL_DMA_IRQHandler+0xd8>
 8007446:	2300      	movs	r3, #0
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 842b 	beq.w	8007ca4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007452:	f003 031f 	and.w	r3, r3, #31
 8007456:	2208      	movs	r2, #8
 8007458:	409a      	lsls	r2, r3
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	4013      	ands	r3, r2
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 80a2 	beq.w	80075a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a2e      	ldr	r2, [pc, #184]	; (8007524 <HAL_DMA_IRQHandler+0x1b4>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d04a      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a2d      	ldr	r2, [pc, #180]	; (8007528 <HAL_DMA_IRQHandler+0x1b8>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d045      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a2b      	ldr	r2, [pc, #172]	; (800752c <HAL_DMA_IRQHandler+0x1bc>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d040      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a2a      	ldr	r2, [pc, #168]	; (8007530 <HAL_DMA_IRQHandler+0x1c0>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d03b      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a28      	ldr	r2, [pc, #160]	; (8007534 <HAL_DMA_IRQHandler+0x1c4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d036      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a27      	ldr	r2, [pc, #156]	; (8007538 <HAL_DMA_IRQHandler+0x1c8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d031      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a25      	ldr	r2, [pc, #148]	; (800753c <HAL_DMA_IRQHandler+0x1cc>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d02c      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a24      	ldr	r2, [pc, #144]	; (8007540 <HAL_DMA_IRQHandler+0x1d0>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d027      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a22      	ldr	r2, [pc, #136]	; (8007544 <HAL_DMA_IRQHandler+0x1d4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d022      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a21      	ldr	r2, [pc, #132]	; (8007548 <HAL_DMA_IRQHandler+0x1d8>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d01d      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1f      	ldr	r2, [pc, #124]	; (800754c <HAL_DMA_IRQHandler+0x1dc>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d018      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1e      	ldr	r2, [pc, #120]	; (8007550 <HAL_DMA_IRQHandler+0x1e0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d013      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a1c      	ldr	r2, [pc, #112]	; (8007554 <HAL_DMA_IRQHandler+0x1e4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00e      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a1b      	ldr	r2, [pc, #108]	; (8007558 <HAL_DMA_IRQHandler+0x1e8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d009      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a19      	ldr	r2, [pc, #100]	; (800755c <HAL_DMA_IRQHandler+0x1ec>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d004      	beq.n	8007504 <HAL_DMA_IRQHandler+0x194>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a18      	ldr	r2, [pc, #96]	; (8007560 <HAL_DMA_IRQHandler+0x1f0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d12f      	bne.n	8007564 <HAL_DMA_IRQHandler+0x1f4>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	bf14      	ite	ne
 8007512:	2301      	movne	r3, #1
 8007514:	2300      	moveq	r3, #0
 8007516:	b2db      	uxtb	r3, r3
 8007518:	e02e      	b.n	8007578 <HAL_DMA_IRQHandler+0x208>
 800751a:	bf00      	nop
 800751c:	24000000 	.word	0x24000000
 8007520:	1b4e81b5 	.word	0x1b4e81b5
 8007524:	40020010 	.word	0x40020010
 8007528:	40020028 	.word	0x40020028
 800752c:	40020040 	.word	0x40020040
 8007530:	40020058 	.word	0x40020058
 8007534:	40020070 	.word	0x40020070
 8007538:	40020088 	.word	0x40020088
 800753c:	400200a0 	.word	0x400200a0
 8007540:	400200b8 	.word	0x400200b8
 8007544:	40020410 	.word	0x40020410
 8007548:	40020428 	.word	0x40020428
 800754c:	40020440 	.word	0x40020440
 8007550:	40020458 	.word	0x40020458
 8007554:	40020470 	.word	0x40020470
 8007558:	40020488 	.word	0x40020488
 800755c:	400204a0 	.word	0x400204a0
 8007560:	400204b8 	.word	0x400204b8
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	bf14      	ite	ne
 8007572:	2301      	movne	r3, #1
 8007574:	2300      	moveq	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d015      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0204 	bic.w	r2, r2, #4
 800758a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	2208      	movs	r2, #8
 8007596:	409a      	lsls	r2, r3
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a0:	f043 0201 	orr.w	r2, r3, #1
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	fa22 f303 	lsr.w	r3, r2, r3
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d06e      	beq.n	800769c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a69      	ldr	r2, [pc, #420]	; (8007768 <HAL_DMA_IRQHandler+0x3f8>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d04a      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a67      	ldr	r2, [pc, #412]	; (800776c <HAL_DMA_IRQHandler+0x3fc>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d045      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a66      	ldr	r2, [pc, #408]	; (8007770 <HAL_DMA_IRQHandler+0x400>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d040      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a64      	ldr	r2, [pc, #400]	; (8007774 <HAL_DMA_IRQHandler+0x404>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d03b      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a63      	ldr	r2, [pc, #396]	; (8007778 <HAL_DMA_IRQHandler+0x408>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d036      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a61      	ldr	r2, [pc, #388]	; (800777c <HAL_DMA_IRQHandler+0x40c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d031      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a60      	ldr	r2, [pc, #384]	; (8007780 <HAL_DMA_IRQHandler+0x410>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d02c      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a5e      	ldr	r2, [pc, #376]	; (8007784 <HAL_DMA_IRQHandler+0x414>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d027      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a5d      	ldr	r2, [pc, #372]	; (8007788 <HAL_DMA_IRQHandler+0x418>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d022      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a5b      	ldr	r2, [pc, #364]	; (800778c <HAL_DMA_IRQHandler+0x41c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d01d      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a5a      	ldr	r2, [pc, #360]	; (8007790 <HAL_DMA_IRQHandler+0x420>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d018      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a58      	ldr	r2, [pc, #352]	; (8007794 <HAL_DMA_IRQHandler+0x424>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d013      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a57      	ldr	r2, [pc, #348]	; (8007798 <HAL_DMA_IRQHandler+0x428>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00e      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a55      	ldr	r2, [pc, #340]	; (800779c <HAL_DMA_IRQHandler+0x42c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d009      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a54      	ldr	r2, [pc, #336]	; (80077a0 <HAL_DMA_IRQHandler+0x430>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_DMA_IRQHandler+0x2ee>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a52      	ldr	r2, [pc, #328]	; (80077a4 <HAL_DMA_IRQHandler+0x434>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d10a      	bne.n	8007674 <HAL_DMA_IRQHandler+0x304>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007668:	2b00      	cmp	r3, #0
 800766a:	bf14      	ite	ne
 800766c:	2301      	movne	r3, #1
 800766e:	2300      	moveq	r3, #0
 8007670:	b2db      	uxtb	r3, r3
 8007672:	e003      	b.n	800767c <HAL_DMA_IRQHandler+0x30c>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2300      	movs	r3, #0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00d      	beq.n	800769c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007684:	f003 031f 	and.w	r3, r3, #31
 8007688:	2201      	movs	r2, #1
 800768a:	409a      	lsls	r2, r3
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007694:	f043 0202 	orr.w	r2, r3, #2
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a0:	f003 031f 	and.w	r3, r3, #31
 80076a4:	2204      	movs	r2, #4
 80076a6:	409a      	lsls	r2, r3
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 808f 	beq.w	80077d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a2c      	ldr	r2, [pc, #176]	; (8007768 <HAL_DMA_IRQHandler+0x3f8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d04a      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a2a      	ldr	r2, [pc, #168]	; (800776c <HAL_DMA_IRQHandler+0x3fc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d045      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a29      	ldr	r2, [pc, #164]	; (8007770 <HAL_DMA_IRQHandler+0x400>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d040      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a27      	ldr	r2, [pc, #156]	; (8007774 <HAL_DMA_IRQHandler+0x404>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d03b      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a26      	ldr	r2, [pc, #152]	; (8007778 <HAL_DMA_IRQHandler+0x408>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d036      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a24      	ldr	r2, [pc, #144]	; (800777c <HAL_DMA_IRQHandler+0x40c>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d031      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a23      	ldr	r2, [pc, #140]	; (8007780 <HAL_DMA_IRQHandler+0x410>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d02c      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a21      	ldr	r2, [pc, #132]	; (8007784 <HAL_DMA_IRQHandler+0x414>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d027      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a20      	ldr	r2, [pc, #128]	; (8007788 <HAL_DMA_IRQHandler+0x418>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d022      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1e      	ldr	r2, [pc, #120]	; (800778c <HAL_DMA_IRQHandler+0x41c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d01d      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a1d      	ldr	r2, [pc, #116]	; (8007790 <HAL_DMA_IRQHandler+0x420>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d018      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a1b      	ldr	r2, [pc, #108]	; (8007794 <HAL_DMA_IRQHandler+0x424>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d013      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a1a      	ldr	r2, [pc, #104]	; (8007798 <HAL_DMA_IRQHandler+0x428>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d00e      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a18      	ldr	r2, [pc, #96]	; (800779c <HAL_DMA_IRQHandler+0x42c>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d009      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a17      	ldr	r2, [pc, #92]	; (80077a0 <HAL_DMA_IRQHandler+0x430>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d004      	beq.n	8007752 <HAL_DMA_IRQHandler+0x3e2>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a15      	ldr	r2, [pc, #84]	; (80077a4 <HAL_DMA_IRQHandler+0x434>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d12a      	bne.n	80077a8 <HAL_DMA_IRQHandler+0x438>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b00      	cmp	r3, #0
 800775e:	bf14      	ite	ne
 8007760:	2301      	movne	r3, #1
 8007762:	2300      	moveq	r3, #0
 8007764:	b2db      	uxtb	r3, r3
 8007766:	e023      	b.n	80077b0 <HAL_DMA_IRQHandler+0x440>
 8007768:	40020010 	.word	0x40020010
 800776c:	40020028 	.word	0x40020028
 8007770:	40020040 	.word	0x40020040
 8007774:	40020058 	.word	0x40020058
 8007778:	40020070 	.word	0x40020070
 800777c:	40020088 	.word	0x40020088
 8007780:	400200a0 	.word	0x400200a0
 8007784:	400200b8 	.word	0x400200b8
 8007788:	40020410 	.word	0x40020410
 800778c:	40020428 	.word	0x40020428
 8007790:	40020440 	.word	0x40020440
 8007794:	40020458 	.word	0x40020458
 8007798:	40020470 	.word	0x40020470
 800779c:	40020488 	.word	0x40020488
 80077a0:	400204a0 	.word	0x400204a0
 80077a4:	400204b8 	.word	0x400204b8
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2300      	movs	r3, #0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00d      	beq.n	80077d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b8:	f003 031f 	and.w	r3, r3, #31
 80077bc:	2204      	movs	r2, #4
 80077be:	409a      	lsls	r2, r3
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c8:	f043 0204 	orr.w	r2, r3, #4
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d4:	f003 031f 	and.w	r3, r3, #31
 80077d8:	2210      	movs	r2, #16
 80077da:	409a      	lsls	r2, r3
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	4013      	ands	r3, r2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 80a6 	beq.w	8007932 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a85      	ldr	r2, [pc, #532]	; (8007a00 <HAL_DMA_IRQHandler+0x690>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d04a      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a83      	ldr	r2, [pc, #524]	; (8007a04 <HAL_DMA_IRQHandler+0x694>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d045      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a82      	ldr	r2, [pc, #520]	; (8007a08 <HAL_DMA_IRQHandler+0x698>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d040      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a80      	ldr	r2, [pc, #512]	; (8007a0c <HAL_DMA_IRQHandler+0x69c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d03b      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a7f      	ldr	r2, [pc, #508]	; (8007a10 <HAL_DMA_IRQHandler+0x6a0>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d036      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a7d      	ldr	r2, [pc, #500]	; (8007a14 <HAL_DMA_IRQHandler+0x6a4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d031      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a7c      	ldr	r2, [pc, #496]	; (8007a18 <HAL_DMA_IRQHandler+0x6a8>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d02c      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a7a      	ldr	r2, [pc, #488]	; (8007a1c <HAL_DMA_IRQHandler+0x6ac>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d027      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a79      	ldr	r2, [pc, #484]	; (8007a20 <HAL_DMA_IRQHandler+0x6b0>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d022      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a77      	ldr	r2, [pc, #476]	; (8007a24 <HAL_DMA_IRQHandler+0x6b4>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d01d      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a76      	ldr	r2, [pc, #472]	; (8007a28 <HAL_DMA_IRQHandler+0x6b8>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d018      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a74      	ldr	r2, [pc, #464]	; (8007a2c <HAL_DMA_IRQHandler+0x6bc>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d013      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a73      	ldr	r2, [pc, #460]	; (8007a30 <HAL_DMA_IRQHandler+0x6c0>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00e      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a71      	ldr	r2, [pc, #452]	; (8007a34 <HAL_DMA_IRQHandler+0x6c4>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d009      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a70      	ldr	r2, [pc, #448]	; (8007a38 <HAL_DMA_IRQHandler+0x6c8>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d004      	beq.n	8007886 <HAL_DMA_IRQHandler+0x516>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a6e      	ldr	r2, [pc, #440]	; (8007a3c <HAL_DMA_IRQHandler+0x6cc>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d10a      	bne.n	800789c <HAL_DMA_IRQHandler+0x52c>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	2b00      	cmp	r3, #0
 8007892:	bf14      	ite	ne
 8007894:	2301      	movne	r3, #1
 8007896:	2300      	moveq	r3, #0
 8007898:	b2db      	uxtb	r3, r3
 800789a:	e009      	b.n	80078b0 <HAL_DMA_IRQHandler+0x540>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0304 	and.w	r3, r3, #4
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	bf14      	ite	ne
 80078aa:	2301      	movne	r3, #1
 80078ac:	2300      	moveq	r3, #0
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d03e      	beq.n	8007932 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	2210      	movs	r2, #16
 80078be:	409a      	lsls	r2, r3
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d018      	beq.n	8007904 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d108      	bne.n	80078f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d024      	beq.n	8007932 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
 80078f0:	e01f      	b.n	8007932 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d01b      	beq.n	8007932 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
 8007902:	e016      	b.n	8007932 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790e:	2b00      	cmp	r3, #0
 8007910:	d107      	bne.n	8007922 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0208 	bic.w	r2, r2, #8
 8007920:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007936:	f003 031f 	and.w	r3, r3, #31
 800793a:	2220      	movs	r2, #32
 800793c:	409a      	lsls	r2, r3
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	4013      	ands	r3, r2
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 8110 	beq.w	8007b68 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a2c      	ldr	r2, [pc, #176]	; (8007a00 <HAL_DMA_IRQHandler+0x690>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d04a      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a2b      	ldr	r2, [pc, #172]	; (8007a04 <HAL_DMA_IRQHandler+0x694>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d045      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a29      	ldr	r2, [pc, #164]	; (8007a08 <HAL_DMA_IRQHandler+0x698>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d040      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a28      	ldr	r2, [pc, #160]	; (8007a0c <HAL_DMA_IRQHandler+0x69c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d03b      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a26      	ldr	r2, [pc, #152]	; (8007a10 <HAL_DMA_IRQHandler+0x6a0>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d036      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a25      	ldr	r2, [pc, #148]	; (8007a14 <HAL_DMA_IRQHandler+0x6a4>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d031      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a23      	ldr	r2, [pc, #140]	; (8007a18 <HAL_DMA_IRQHandler+0x6a8>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d02c      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a22      	ldr	r2, [pc, #136]	; (8007a1c <HAL_DMA_IRQHandler+0x6ac>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d027      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a20      	ldr	r2, [pc, #128]	; (8007a20 <HAL_DMA_IRQHandler+0x6b0>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d022      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a1f      	ldr	r2, [pc, #124]	; (8007a24 <HAL_DMA_IRQHandler+0x6b4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d01d      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a1d      	ldr	r2, [pc, #116]	; (8007a28 <HAL_DMA_IRQHandler+0x6b8>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d018      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1c      	ldr	r2, [pc, #112]	; (8007a2c <HAL_DMA_IRQHandler+0x6bc>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d013      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1a      	ldr	r2, [pc, #104]	; (8007a30 <HAL_DMA_IRQHandler+0x6c0>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00e      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a19      	ldr	r2, [pc, #100]	; (8007a34 <HAL_DMA_IRQHandler+0x6c4>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d009      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a17      	ldr	r2, [pc, #92]	; (8007a38 <HAL_DMA_IRQHandler+0x6c8>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d004      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x678>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a16      	ldr	r2, [pc, #88]	; (8007a3c <HAL_DMA_IRQHandler+0x6cc>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d12b      	bne.n	8007a40 <HAL_DMA_IRQHandler+0x6d0>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0310 	and.w	r3, r3, #16
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	bf14      	ite	ne
 80079f6:	2301      	movne	r3, #1
 80079f8:	2300      	moveq	r3, #0
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	e02a      	b.n	8007a54 <HAL_DMA_IRQHandler+0x6e4>
 80079fe:	bf00      	nop
 8007a00:	40020010 	.word	0x40020010
 8007a04:	40020028 	.word	0x40020028
 8007a08:	40020040 	.word	0x40020040
 8007a0c:	40020058 	.word	0x40020058
 8007a10:	40020070 	.word	0x40020070
 8007a14:	40020088 	.word	0x40020088
 8007a18:	400200a0 	.word	0x400200a0
 8007a1c:	400200b8 	.word	0x400200b8
 8007a20:	40020410 	.word	0x40020410
 8007a24:	40020428 	.word	0x40020428
 8007a28:	40020440 	.word	0x40020440
 8007a2c:	40020458 	.word	0x40020458
 8007a30:	40020470 	.word	0x40020470
 8007a34:	40020488 	.word	0x40020488
 8007a38:	400204a0 	.word	0x400204a0
 8007a3c:	400204b8 	.word	0x400204b8
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bf14      	ite	ne
 8007a4e:	2301      	movne	r3, #1
 8007a50:	2300      	moveq	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8087 	beq.w	8007b68 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a5e:	f003 031f 	and.w	r3, r3, #31
 8007a62:	2220      	movs	r2, #32
 8007a64:	409a      	lsls	r2, r3
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d139      	bne.n	8007aea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0216 	bic.w	r2, r2, #22
 8007a84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	695a      	ldr	r2, [r3, #20]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d103      	bne.n	8007aa6 <HAL_DMA_IRQHandler+0x736>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d007      	beq.n	8007ab6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0208 	bic.w	r2, r2, #8
 8007ab4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aba:	f003 031f 	and.w	r3, r3, #31
 8007abe:	223f      	movs	r2, #63	; 0x3f
 8007ac0:	409a      	lsls	r2, r3
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 834a 	beq.w	8008174 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	4798      	blx	r3
          }
          return;
 8007ae8:	e344      	b.n	8008174 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d018      	beq.n	8007b2a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d108      	bne.n	8007b18 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d02c      	beq.n	8007b68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	4798      	blx	r3
 8007b16:	e027      	b.n	8007b68 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d023      	beq.n	8007b68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	4798      	blx	r3
 8007b28:	e01e      	b.n	8007b68 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10f      	bne.n	8007b58 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0210 	bic.w	r2, r2, #16
 8007b46:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8306 	beq.w	800817e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 8088 	beq.w	8007c90 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2204      	movs	r2, #4
 8007b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a7a      	ldr	r2, [pc, #488]	; (8007d78 <HAL_DMA_IRQHandler+0xa08>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d04a      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a79      	ldr	r2, [pc, #484]	; (8007d7c <HAL_DMA_IRQHandler+0xa0c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d045      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a77      	ldr	r2, [pc, #476]	; (8007d80 <HAL_DMA_IRQHandler+0xa10>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d040      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a76      	ldr	r2, [pc, #472]	; (8007d84 <HAL_DMA_IRQHandler+0xa14>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d03b      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a74      	ldr	r2, [pc, #464]	; (8007d88 <HAL_DMA_IRQHandler+0xa18>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d036      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a73      	ldr	r2, [pc, #460]	; (8007d8c <HAL_DMA_IRQHandler+0xa1c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d031      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a71      	ldr	r2, [pc, #452]	; (8007d90 <HAL_DMA_IRQHandler+0xa20>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d02c      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a70      	ldr	r2, [pc, #448]	; (8007d94 <HAL_DMA_IRQHandler+0xa24>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d027      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a6e      	ldr	r2, [pc, #440]	; (8007d98 <HAL_DMA_IRQHandler+0xa28>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d022      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a6d      	ldr	r2, [pc, #436]	; (8007d9c <HAL_DMA_IRQHandler+0xa2c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d01d      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a6b      	ldr	r2, [pc, #428]	; (8007da0 <HAL_DMA_IRQHandler+0xa30>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d018      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a6a      	ldr	r2, [pc, #424]	; (8007da4 <HAL_DMA_IRQHandler+0xa34>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d013      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a68      	ldr	r2, [pc, #416]	; (8007da8 <HAL_DMA_IRQHandler+0xa38>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00e      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a67      	ldr	r2, [pc, #412]	; (8007dac <HAL_DMA_IRQHandler+0xa3c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d009      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a65      	ldr	r2, [pc, #404]	; (8007db0 <HAL_DMA_IRQHandler+0xa40>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d004      	beq.n	8007c28 <HAL_DMA_IRQHandler+0x8b8>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a64      	ldr	r2, [pc, #400]	; (8007db4 <HAL_DMA_IRQHandler+0xa44>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d108      	bne.n	8007c3a <HAL_DMA_IRQHandler+0x8ca>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0201 	bic.w	r2, r2, #1
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	e007      	b.n	8007c4a <HAL_DMA_IRQHandler+0x8da>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0201 	bic.w	r2, r2, #1
 8007c48:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d307      	bcc.n	8007c66 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1f2      	bne.n	8007c4a <HAL_DMA_IRQHandler+0x8da>
 8007c64:	e000      	b.n	8007c68 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007c66:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d004      	beq.n	8007c80 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2203      	movs	r2, #3
 8007c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007c7e:	e003      	b.n	8007c88 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 8272 	beq.w	800817e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
 8007ca2:	e26c      	b.n	800817e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a43      	ldr	r2, [pc, #268]	; (8007db8 <HAL_DMA_IRQHandler+0xa48>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d022      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x984>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a42      	ldr	r2, [pc, #264]	; (8007dbc <HAL_DMA_IRQHandler+0xa4c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d01d      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x984>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a40      	ldr	r2, [pc, #256]	; (8007dc0 <HAL_DMA_IRQHandler+0xa50>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d018      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x984>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a3f      	ldr	r2, [pc, #252]	; (8007dc4 <HAL_DMA_IRQHandler+0xa54>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d013      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x984>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a3d      	ldr	r2, [pc, #244]	; (8007dc8 <HAL_DMA_IRQHandler+0xa58>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d00e      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x984>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a3c      	ldr	r2, [pc, #240]	; (8007dcc <HAL_DMA_IRQHandler+0xa5c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d009      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x984>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a3a      	ldr	r2, [pc, #232]	; (8007dd0 <HAL_DMA_IRQHandler+0xa60>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d004      	beq.n	8007cf4 <HAL_DMA_IRQHandler+0x984>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a39      	ldr	r2, [pc, #228]	; (8007dd4 <HAL_DMA_IRQHandler+0xa64>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d101      	bne.n	8007cf8 <HAL_DMA_IRQHandler+0x988>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e000      	b.n	8007cfa <HAL_DMA_IRQHandler+0x98a>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 823f 	beq.w	800817e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d0c:	f003 031f 	and.w	r3, r3, #31
 8007d10:	2204      	movs	r2, #4
 8007d12:	409a      	lsls	r2, r3
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	4013      	ands	r3, r2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 80cd 	beq.w	8007eb8 <HAL_DMA_IRQHandler+0xb48>
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 80c7 	beq.w	8007eb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d2e:	f003 031f 	and.w	r3, r3, #31
 8007d32:	2204      	movs	r2, #4
 8007d34:	409a      	lsls	r2, r3
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d049      	beq.n	8007dd8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d109      	bne.n	8007d62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 8210 	beq.w	8008178 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d60:	e20a      	b.n	8008178 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 8206 	beq.w	8008178 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d74:	e200      	b.n	8008178 <HAL_DMA_IRQHandler+0xe08>
 8007d76:	bf00      	nop
 8007d78:	40020010 	.word	0x40020010
 8007d7c:	40020028 	.word	0x40020028
 8007d80:	40020040 	.word	0x40020040
 8007d84:	40020058 	.word	0x40020058
 8007d88:	40020070 	.word	0x40020070
 8007d8c:	40020088 	.word	0x40020088
 8007d90:	400200a0 	.word	0x400200a0
 8007d94:	400200b8 	.word	0x400200b8
 8007d98:	40020410 	.word	0x40020410
 8007d9c:	40020428 	.word	0x40020428
 8007da0:	40020440 	.word	0x40020440
 8007da4:	40020458 	.word	0x40020458
 8007da8:	40020470 	.word	0x40020470
 8007dac:	40020488 	.word	0x40020488
 8007db0:	400204a0 	.word	0x400204a0
 8007db4:	400204b8 	.word	0x400204b8
 8007db8:	58025408 	.word	0x58025408
 8007dbc:	5802541c 	.word	0x5802541c
 8007dc0:	58025430 	.word	0x58025430
 8007dc4:	58025444 	.word	0x58025444
 8007dc8:	58025458 	.word	0x58025458
 8007dcc:	5802546c 	.word	0x5802546c
 8007dd0:	58025480 	.word	0x58025480
 8007dd4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d160      	bne.n	8007ea4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a7f      	ldr	r2, [pc, #508]	; (8007fe4 <HAL_DMA_IRQHandler+0xc74>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d04a      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a7d      	ldr	r2, [pc, #500]	; (8007fe8 <HAL_DMA_IRQHandler+0xc78>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d045      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a7c      	ldr	r2, [pc, #496]	; (8007fec <HAL_DMA_IRQHandler+0xc7c>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d040      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a7a      	ldr	r2, [pc, #488]	; (8007ff0 <HAL_DMA_IRQHandler+0xc80>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d03b      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a79      	ldr	r2, [pc, #484]	; (8007ff4 <HAL_DMA_IRQHandler+0xc84>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d036      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a77      	ldr	r2, [pc, #476]	; (8007ff8 <HAL_DMA_IRQHandler+0xc88>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d031      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a76      	ldr	r2, [pc, #472]	; (8007ffc <HAL_DMA_IRQHandler+0xc8c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d02c      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a74      	ldr	r2, [pc, #464]	; (8008000 <HAL_DMA_IRQHandler+0xc90>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d027      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a73      	ldr	r2, [pc, #460]	; (8008004 <HAL_DMA_IRQHandler+0xc94>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d022      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a71      	ldr	r2, [pc, #452]	; (8008008 <HAL_DMA_IRQHandler+0xc98>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d01d      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a70      	ldr	r2, [pc, #448]	; (800800c <HAL_DMA_IRQHandler+0xc9c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d018      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a6e      	ldr	r2, [pc, #440]	; (8008010 <HAL_DMA_IRQHandler+0xca0>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d013      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a6d      	ldr	r2, [pc, #436]	; (8008014 <HAL_DMA_IRQHandler+0xca4>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00e      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a6b      	ldr	r2, [pc, #428]	; (8008018 <HAL_DMA_IRQHandler+0xca8>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d009      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a6a      	ldr	r2, [pc, #424]	; (800801c <HAL_DMA_IRQHandler+0xcac>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d004      	beq.n	8007e82 <HAL_DMA_IRQHandler+0xb12>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a68      	ldr	r2, [pc, #416]	; (8008020 <HAL_DMA_IRQHandler+0xcb0>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d108      	bne.n	8007e94 <HAL_DMA_IRQHandler+0xb24>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 0208 	bic.w	r2, r2, #8
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	e007      	b.n	8007ea4 <HAL_DMA_IRQHandler+0xb34>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0204 	bic.w	r2, r2, #4
 8007ea2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 8165 	beq.w	8008178 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eb6:	e15f      	b.n	8008178 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ebc:	f003 031f 	and.w	r3, r3, #31
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	409a      	lsls	r2, r3
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 80c5 	beq.w	8008058 <HAL_DMA_IRQHandler+0xce8>
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 80bf 	beq.w	8008058 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ede:	f003 031f 	and.w	r3, r3, #31
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	409a      	lsls	r2, r3
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d018      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d109      	bne.n	8007f12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 813a 	beq.w	800817c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f10:	e134      	b.n	800817c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 8130 	beq.w	800817c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f24:	e12a      	b.n	800817c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	f003 0320 	and.w	r3, r3, #32
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f040 8089 	bne.w	8008044 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a2b      	ldr	r2, [pc, #172]	; (8007fe4 <HAL_DMA_IRQHandler+0xc74>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d04a      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a29      	ldr	r2, [pc, #164]	; (8007fe8 <HAL_DMA_IRQHandler+0xc78>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d045      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a28      	ldr	r2, [pc, #160]	; (8007fec <HAL_DMA_IRQHandler+0xc7c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d040      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a26      	ldr	r2, [pc, #152]	; (8007ff0 <HAL_DMA_IRQHandler+0xc80>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d03b      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a25      	ldr	r2, [pc, #148]	; (8007ff4 <HAL_DMA_IRQHandler+0xc84>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d036      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a23      	ldr	r2, [pc, #140]	; (8007ff8 <HAL_DMA_IRQHandler+0xc88>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d031      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a22      	ldr	r2, [pc, #136]	; (8007ffc <HAL_DMA_IRQHandler+0xc8c>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d02c      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a20      	ldr	r2, [pc, #128]	; (8008000 <HAL_DMA_IRQHandler+0xc90>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d027      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a1f      	ldr	r2, [pc, #124]	; (8008004 <HAL_DMA_IRQHandler+0xc94>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d022      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a1d      	ldr	r2, [pc, #116]	; (8008008 <HAL_DMA_IRQHandler+0xc98>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d01d      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a1c      	ldr	r2, [pc, #112]	; (800800c <HAL_DMA_IRQHandler+0xc9c>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d018      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a1a      	ldr	r2, [pc, #104]	; (8008010 <HAL_DMA_IRQHandler+0xca0>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d013      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a19      	ldr	r2, [pc, #100]	; (8008014 <HAL_DMA_IRQHandler+0xca4>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00e      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a17      	ldr	r2, [pc, #92]	; (8008018 <HAL_DMA_IRQHandler+0xca8>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d009      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a16      	ldr	r2, [pc, #88]	; (800801c <HAL_DMA_IRQHandler+0xcac>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d004      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0xc62>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a14      	ldr	r2, [pc, #80]	; (8008020 <HAL_DMA_IRQHandler+0xcb0>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d128      	bne.n	8008024 <HAL_DMA_IRQHandler+0xcb4>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0214 	bic.w	r2, r2, #20
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e027      	b.n	8008034 <HAL_DMA_IRQHandler+0xcc4>
 8007fe4:	40020010 	.word	0x40020010
 8007fe8:	40020028 	.word	0x40020028
 8007fec:	40020040 	.word	0x40020040
 8007ff0:	40020058 	.word	0x40020058
 8007ff4:	40020070 	.word	0x40020070
 8007ff8:	40020088 	.word	0x40020088
 8007ffc:	400200a0 	.word	0x400200a0
 8008000:	400200b8 	.word	0x400200b8
 8008004:	40020410 	.word	0x40020410
 8008008:	40020428 	.word	0x40020428
 800800c:	40020440 	.word	0x40020440
 8008010:	40020458 	.word	0x40020458
 8008014:	40020470 	.word	0x40020470
 8008018:	40020488 	.word	0x40020488
 800801c:	400204a0 	.word	0x400204a0
 8008020:	400204b8 	.word	0x400204b8
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 020a 	bic.w	r2, r2, #10
 8008032:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8097 	beq.w	800817c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008056:	e091      	b.n	800817c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805c:	f003 031f 	and.w	r3, r3, #31
 8008060:	2208      	movs	r2, #8
 8008062:	409a      	lsls	r2, r3
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	4013      	ands	r3, r2
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 8088 	beq.w	800817e <HAL_DMA_IRQHandler+0xe0e>
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8082 	beq.w	800817e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a41      	ldr	r2, [pc, #260]	; (8008184 <HAL_DMA_IRQHandler+0xe14>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d04a      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a3f      	ldr	r2, [pc, #252]	; (8008188 <HAL_DMA_IRQHandler+0xe18>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d045      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a3e      	ldr	r2, [pc, #248]	; (800818c <HAL_DMA_IRQHandler+0xe1c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d040      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a3c      	ldr	r2, [pc, #240]	; (8008190 <HAL_DMA_IRQHandler+0xe20>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d03b      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a3b      	ldr	r2, [pc, #236]	; (8008194 <HAL_DMA_IRQHandler+0xe24>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d036      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a39      	ldr	r2, [pc, #228]	; (8008198 <HAL_DMA_IRQHandler+0xe28>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d031      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a38      	ldr	r2, [pc, #224]	; (800819c <HAL_DMA_IRQHandler+0xe2c>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d02c      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a36      	ldr	r2, [pc, #216]	; (80081a0 <HAL_DMA_IRQHandler+0xe30>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d027      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a35      	ldr	r2, [pc, #212]	; (80081a4 <HAL_DMA_IRQHandler+0xe34>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d022      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a33      	ldr	r2, [pc, #204]	; (80081a8 <HAL_DMA_IRQHandler+0xe38>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d01d      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a32      	ldr	r2, [pc, #200]	; (80081ac <HAL_DMA_IRQHandler+0xe3c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d018      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a30      	ldr	r2, [pc, #192]	; (80081b0 <HAL_DMA_IRQHandler+0xe40>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d013      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a2f      	ldr	r2, [pc, #188]	; (80081b4 <HAL_DMA_IRQHandler+0xe44>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d00e      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a2d      	ldr	r2, [pc, #180]	; (80081b8 <HAL_DMA_IRQHandler+0xe48>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d009      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a2c      	ldr	r2, [pc, #176]	; (80081bc <HAL_DMA_IRQHandler+0xe4c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d004      	beq.n	800811a <HAL_DMA_IRQHandler+0xdaa>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a2a      	ldr	r2, [pc, #168]	; (80081c0 <HAL_DMA_IRQHandler+0xe50>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d108      	bne.n	800812c <HAL_DMA_IRQHandler+0xdbc>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 021c 	bic.w	r2, r2, #28
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	e007      	b.n	800813c <HAL_DMA_IRQHandler+0xdcc>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 020e 	bic.w	r2, r2, #14
 800813a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008140:	f003 031f 	and.w	r3, r3, #31
 8008144:	2201      	movs	r2, #1
 8008146:	409a      	lsls	r2, r3
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
 8008172:	e004      	b.n	800817e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008174:	bf00      	nop
 8008176:	e002      	b.n	800817e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008178:	bf00      	nop
 800817a:	e000      	b.n	800817e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800817c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800817e:	3728      	adds	r7, #40	; 0x28
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	40020010 	.word	0x40020010
 8008188:	40020028 	.word	0x40020028
 800818c:	40020040 	.word	0x40020040
 8008190:	40020058 	.word	0x40020058
 8008194:	40020070 	.word	0x40020070
 8008198:	40020088 	.word	0x40020088
 800819c:	400200a0 	.word	0x400200a0
 80081a0:	400200b8 	.word	0x400200b8
 80081a4:	40020410 	.word	0x40020410
 80081a8:	40020428 	.word	0x40020428
 80081ac:	40020440 	.word	0x40020440
 80081b0:	40020458 	.word	0x40020458
 80081b4:	40020470 	.word	0x40020470
 80081b8:	40020488 	.word	0x40020488
 80081bc:	400204a0 	.word	0x400204a0
 80081c0:	400204b8 	.word	0x400204b8

080081c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b087      	sub	sp, #28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a7f      	ldr	r2, [pc, #508]	; (80083e0 <DMA_SetConfig+0x21c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d072      	beq.n	80082ce <DMA_SetConfig+0x10a>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a7d      	ldr	r2, [pc, #500]	; (80083e4 <DMA_SetConfig+0x220>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d06d      	beq.n	80082ce <DMA_SetConfig+0x10a>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a7c      	ldr	r2, [pc, #496]	; (80083e8 <DMA_SetConfig+0x224>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d068      	beq.n	80082ce <DMA_SetConfig+0x10a>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a7a      	ldr	r2, [pc, #488]	; (80083ec <DMA_SetConfig+0x228>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d063      	beq.n	80082ce <DMA_SetConfig+0x10a>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a79      	ldr	r2, [pc, #484]	; (80083f0 <DMA_SetConfig+0x22c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d05e      	beq.n	80082ce <DMA_SetConfig+0x10a>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a77      	ldr	r2, [pc, #476]	; (80083f4 <DMA_SetConfig+0x230>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d059      	beq.n	80082ce <DMA_SetConfig+0x10a>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a76      	ldr	r2, [pc, #472]	; (80083f8 <DMA_SetConfig+0x234>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d054      	beq.n	80082ce <DMA_SetConfig+0x10a>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a74      	ldr	r2, [pc, #464]	; (80083fc <DMA_SetConfig+0x238>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d04f      	beq.n	80082ce <DMA_SetConfig+0x10a>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a73      	ldr	r2, [pc, #460]	; (8008400 <DMA_SetConfig+0x23c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d04a      	beq.n	80082ce <DMA_SetConfig+0x10a>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a71      	ldr	r2, [pc, #452]	; (8008404 <DMA_SetConfig+0x240>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d045      	beq.n	80082ce <DMA_SetConfig+0x10a>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a70      	ldr	r2, [pc, #448]	; (8008408 <DMA_SetConfig+0x244>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d040      	beq.n	80082ce <DMA_SetConfig+0x10a>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a6e      	ldr	r2, [pc, #440]	; (800840c <DMA_SetConfig+0x248>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d03b      	beq.n	80082ce <DMA_SetConfig+0x10a>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a6d      	ldr	r2, [pc, #436]	; (8008410 <DMA_SetConfig+0x24c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d036      	beq.n	80082ce <DMA_SetConfig+0x10a>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a6b      	ldr	r2, [pc, #428]	; (8008414 <DMA_SetConfig+0x250>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d031      	beq.n	80082ce <DMA_SetConfig+0x10a>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a6a      	ldr	r2, [pc, #424]	; (8008418 <DMA_SetConfig+0x254>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d02c      	beq.n	80082ce <DMA_SetConfig+0x10a>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a68      	ldr	r2, [pc, #416]	; (800841c <DMA_SetConfig+0x258>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d027      	beq.n	80082ce <DMA_SetConfig+0x10a>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a67      	ldr	r2, [pc, #412]	; (8008420 <DMA_SetConfig+0x25c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d022      	beq.n	80082ce <DMA_SetConfig+0x10a>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a65      	ldr	r2, [pc, #404]	; (8008424 <DMA_SetConfig+0x260>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d01d      	beq.n	80082ce <DMA_SetConfig+0x10a>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a64      	ldr	r2, [pc, #400]	; (8008428 <DMA_SetConfig+0x264>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d018      	beq.n	80082ce <DMA_SetConfig+0x10a>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a62      	ldr	r2, [pc, #392]	; (800842c <DMA_SetConfig+0x268>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d013      	beq.n	80082ce <DMA_SetConfig+0x10a>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a61      	ldr	r2, [pc, #388]	; (8008430 <DMA_SetConfig+0x26c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d00e      	beq.n	80082ce <DMA_SetConfig+0x10a>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a5f      	ldr	r2, [pc, #380]	; (8008434 <DMA_SetConfig+0x270>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d009      	beq.n	80082ce <DMA_SetConfig+0x10a>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a5e      	ldr	r2, [pc, #376]	; (8008438 <DMA_SetConfig+0x274>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d004      	beq.n	80082ce <DMA_SetConfig+0x10a>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a5c      	ldr	r2, [pc, #368]	; (800843c <DMA_SetConfig+0x278>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d101      	bne.n	80082d2 <DMA_SetConfig+0x10e>
 80082ce:	2301      	movs	r3, #1
 80082d0:	e000      	b.n	80082d4 <DMA_SetConfig+0x110>
 80082d2:	2300      	movs	r3, #0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00d      	beq.n	80082f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80082e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d004      	beq.n	80082f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80082f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a39      	ldr	r2, [pc, #228]	; (80083e0 <DMA_SetConfig+0x21c>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d04a      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a38      	ldr	r2, [pc, #224]	; (80083e4 <DMA_SetConfig+0x220>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d045      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a36      	ldr	r2, [pc, #216]	; (80083e8 <DMA_SetConfig+0x224>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d040      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a35      	ldr	r2, [pc, #212]	; (80083ec <DMA_SetConfig+0x228>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d03b      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a33      	ldr	r2, [pc, #204]	; (80083f0 <DMA_SetConfig+0x22c>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d036      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a32      	ldr	r2, [pc, #200]	; (80083f4 <DMA_SetConfig+0x230>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d031      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a30      	ldr	r2, [pc, #192]	; (80083f8 <DMA_SetConfig+0x234>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d02c      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a2f      	ldr	r2, [pc, #188]	; (80083fc <DMA_SetConfig+0x238>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d027      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a2d      	ldr	r2, [pc, #180]	; (8008400 <DMA_SetConfig+0x23c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d022      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a2c      	ldr	r2, [pc, #176]	; (8008404 <DMA_SetConfig+0x240>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d01d      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a2a      	ldr	r2, [pc, #168]	; (8008408 <DMA_SetConfig+0x244>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d018      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a29      	ldr	r2, [pc, #164]	; (800840c <DMA_SetConfig+0x248>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d013      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a27      	ldr	r2, [pc, #156]	; (8008410 <DMA_SetConfig+0x24c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d00e      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a26      	ldr	r2, [pc, #152]	; (8008414 <DMA_SetConfig+0x250>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d009      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a24      	ldr	r2, [pc, #144]	; (8008418 <DMA_SetConfig+0x254>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d004      	beq.n	8008394 <DMA_SetConfig+0x1d0>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a23      	ldr	r2, [pc, #140]	; (800841c <DMA_SetConfig+0x258>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d101      	bne.n	8008398 <DMA_SetConfig+0x1d4>
 8008394:	2301      	movs	r3, #1
 8008396:	e000      	b.n	800839a <DMA_SetConfig+0x1d6>
 8008398:	2300      	movs	r3, #0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d059      	beq.n	8008452 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a2:	f003 031f 	and.w	r3, r3, #31
 80083a6:	223f      	movs	r2, #63	; 0x3f
 80083a8:	409a      	lsls	r2, r3
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	2b40      	cmp	r3, #64	; 0x40
 80083cc:	d138      	bne.n	8008440 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80083de:	e086      	b.n	80084ee <DMA_SetConfig+0x32a>
 80083e0:	40020010 	.word	0x40020010
 80083e4:	40020028 	.word	0x40020028
 80083e8:	40020040 	.word	0x40020040
 80083ec:	40020058 	.word	0x40020058
 80083f0:	40020070 	.word	0x40020070
 80083f4:	40020088 	.word	0x40020088
 80083f8:	400200a0 	.word	0x400200a0
 80083fc:	400200b8 	.word	0x400200b8
 8008400:	40020410 	.word	0x40020410
 8008404:	40020428 	.word	0x40020428
 8008408:	40020440 	.word	0x40020440
 800840c:	40020458 	.word	0x40020458
 8008410:	40020470 	.word	0x40020470
 8008414:	40020488 	.word	0x40020488
 8008418:	400204a0 	.word	0x400204a0
 800841c:	400204b8 	.word	0x400204b8
 8008420:	58025408 	.word	0x58025408
 8008424:	5802541c 	.word	0x5802541c
 8008428:	58025430 	.word	0x58025430
 800842c:	58025444 	.word	0x58025444
 8008430:	58025458 	.word	0x58025458
 8008434:	5802546c 	.word	0x5802546c
 8008438:	58025480 	.word	0x58025480
 800843c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	60da      	str	r2, [r3, #12]
}
 8008450:	e04d      	b.n	80084ee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a29      	ldr	r2, [pc, #164]	; (80084fc <DMA_SetConfig+0x338>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d022      	beq.n	80084a2 <DMA_SetConfig+0x2de>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a27      	ldr	r2, [pc, #156]	; (8008500 <DMA_SetConfig+0x33c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d01d      	beq.n	80084a2 <DMA_SetConfig+0x2de>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a26      	ldr	r2, [pc, #152]	; (8008504 <DMA_SetConfig+0x340>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d018      	beq.n	80084a2 <DMA_SetConfig+0x2de>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a24      	ldr	r2, [pc, #144]	; (8008508 <DMA_SetConfig+0x344>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d013      	beq.n	80084a2 <DMA_SetConfig+0x2de>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a23      	ldr	r2, [pc, #140]	; (800850c <DMA_SetConfig+0x348>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d00e      	beq.n	80084a2 <DMA_SetConfig+0x2de>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a21      	ldr	r2, [pc, #132]	; (8008510 <DMA_SetConfig+0x34c>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d009      	beq.n	80084a2 <DMA_SetConfig+0x2de>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a20      	ldr	r2, [pc, #128]	; (8008514 <DMA_SetConfig+0x350>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d004      	beq.n	80084a2 <DMA_SetConfig+0x2de>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a1e      	ldr	r2, [pc, #120]	; (8008518 <DMA_SetConfig+0x354>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d101      	bne.n	80084a6 <DMA_SetConfig+0x2e2>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e000      	b.n	80084a8 <DMA_SetConfig+0x2e4>
 80084a6:	2300      	movs	r3, #0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d020      	beq.n	80084ee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b0:	f003 031f 	and.w	r3, r3, #31
 80084b4:	2201      	movs	r2, #1
 80084b6:	409a      	lsls	r2, r3
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	2b40      	cmp	r3, #64	; 0x40
 80084ca:	d108      	bne.n	80084de <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	60da      	str	r2, [r3, #12]
}
 80084dc:	e007      	b.n	80084ee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	60da      	str	r2, [r3, #12]
}
 80084ee:	bf00      	nop
 80084f0:	371c      	adds	r7, #28
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	58025408 	.word	0x58025408
 8008500:	5802541c 	.word	0x5802541c
 8008504:	58025430 	.word	0x58025430
 8008508:	58025444 	.word	0x58025444
 800850c:	58025458 	.word	0x58025458
 8008510:	5802546c 	.word	0x5802546c
 8008514:	58025480 	.word	0x58025480
 8008518:	58025494 	.word	0x58025494

0800851c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a42      	ldr	r2, [pc, #264]	; (8008634 <DMA_CalcBaseAndBitshift+0x118>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d04a      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a41      	ldr	r2, [pc, #260]	; (8008638 <DMA_CalcBaseAndBitshift+0x11c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d045      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a3f      	ldr	r2, [pc, #252]	; (800863c <DMA_CalcBaseAndBitshift+0x120>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d040      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a3e      	ldr	r2, [pc, #248]	; (8008640 <DMA_CalcBaseAndBitshift+0x124>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d03b      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a3c      	ldr	r2, [pc, #240]	; (8008644 <DMA_CalcBaseAndBitshift+0x128>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d036      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a3b      	ldr	r2, [pc, #236]	; (8008648 <DMA_CalcBaseAndBitshift+0x12c>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d031      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a39      	ldr	r2, [pc, #228]	; (800864c <DMA_CalcBaseAndBitshift+0x130>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d02c      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a38      	ldr	r2, [pc, #224]	; (8008650 <DMA_CalcBaseAndBitshift+0x134>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d027      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a36      	ldr	r2, [pc, #216]	; (8008654 <DMA_CalcBaseAndBitshift+0x138>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d022      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a35      	ldr	r2, [pc, #212]	; (8008658 <DMA_CalcBaseAndBitshift+0x13c>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d01d      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a33      	ldr	r2, [pc, #204]	; (800865c <DMA_CalcBaseAndBitshift+0x140>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d018      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a32      	ldr	r2, [pc, #200]	; (8008660 <DMA_CalcBaseAndBitshift+0x144>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d013      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a30      	ldr	r2, [pc, #192]	; (8008664 <DMA_CalcBaseAndBitshift+0x148>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d00e      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a2f      	ldr	r2, [pc, #188]	; (8008668 <DMA_CalcBaseAndBitshift+0x14c>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d009      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a2d      	ldr	r2, [pc, #180]	; (800866c <DMA_CalcBaseAndBitshift+0x150>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d004      	beq.n	80085c4 <DMA_CalcBaseAndBitshift+0xa8>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a2c      	ldr	r2, [pc, #176]	; (8008670 <DMA_CalcBaseAndBitshift+0x154>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d101      	bne.n	80085c8 <DMA_CalcBaseAndBitshift+0xac>
 80085c4:	2301      	movs	r3, #1
 80085c6:	e000      	b.n	80085ca <DMA_CalcBaseAndBitshift+0xae>
 80085c8:	2300      	movs	r3, #0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d024      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	3b10      	subs	r3, #16
 80085d6:	4a27      	ldr	r2, [pc, #156]	; (8008674 <DMA_CalcBaseAndBitshift+0x158>)
 80085d8:	fba2 2303 	umull	r2, r3, r2, r3
 80085dc:	091b      	lsrs	r3, r3, #4
 80085de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f003 0307 	and.w	r3, r3, #7
 80085e6:	4a24      	ldr	r2, [pc, #144]	; (8008678 <DMA_CalcBaseAndBitshift+0x15c>)
 80085e8:	5cd3      	ldrb	r3, [r2, r3]
 80085ea:	461a      	mov	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d908      	bls.n	8008608 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	4b1f      	ldr	r3, [pc, #124]	; (800867c <DMA_CalcBaseAndBitshift+0x160>)
 80085fe:	4013      	ands	r3, r2
 8008600:	1d1a      	adds	r2, r3, #4
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	659a      	str	r2, [r3, #88]	; 0x58
 8008606:	e00d      	b.n	8008624 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	4b1b      	ldr	r3, [pc, #108]	; (800867c <DMA_CalcBaseAndBitshift+0x160>)
 8008610:	4013      	ands	r3, r2
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	6593      	str	r3, [r2, #88]	; 0x58
 8008616:	e005      	b.n	8008624 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	40020010 	.word	0x40020010
 8008638:	40020028 	.word	0x40020028
 800863c:	40020040 	.word	0x40020040
 8008640:	40020058 	.word	0x40020058
 8008644:	40020070 	.word	0x40020070
 8008648:	40020088 	.word	0x40020088
 800864c:	400200a0 	.word	0x400200a0
 8008650:	400200b8 	.word	0x400200b8
 8008654:	40020410 	.word	0x40020410
 8008658:	40020428 	.word	0x40020428
 800865c:	40020440 	.word	0x40020440
 8008660:	40020458 	.word	0x40020458
 8008664:	40020470 	.word	0x40020470
 8008668:	40020488 	.word	0x40020488
 800866c:	400204a0 	.word	0x400204a0
 8008670:	400204b8 	.word	0x400204b8
 8008674:	aaaaaaab 	.word	0xaaaaaaab
 8008678:	0800f514 	.word	0x0800f514
 800867c:	fffffc00 	.word	0xfffffc00

08008680 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d120      	bne.n	80086d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008698:	2b03      	cmp	r3, #3
 800869a:	d858      	bhi.n	800874e <DMA_CheckFifoParam+0xce>
 800869c:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <DMA_CheckFifoParam+0x24>)
 800869e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a2:	bf00      	nop
 80086a4:	080086b5 	.word	0x080086b5
 80086a8:	080086c7 	.word	0x080086c7
 80086ac:	080086b5 	.word	0x080086b5
 80086b0:	0800874f 	.word	0x0800874f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d048      	beq.n	8008752 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086c4:	e045      	b.n	8008752 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086ce:	d142      	bne.n	8008756 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086d4:	e03f      	b.n	8008756 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086de:	d123      	bne.n	8008728 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d838      	bhi.n	800875a <DMA_CheckFifoParam+0xda>
 80086e8:	a201      	add	r2, pc, #4	; (adr r2, 80086f0 <DMA_CheckFifoParam+0x70>)
 80086ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ee:	bf00      	nop
 80086f0:	08008701 	.word	0x08008701
 80086f4:	08008707 	.word	0x08008707
 80086f8:	08008701 	.word	0x08008701
 80086fc:	08008719 	.word	0x08008719
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	73fb      	strb	r3, [r7, #15]
        break;
 8008704:	e030      	b.n	8008768 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d025      	beq.n	800875e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008716:	e022      	b.n	800875e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008720:	d11f      	bne.n	8008762 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008726:	e01c      	b.n	8008762 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872c:	2b02      	cmp	r3, #2
 800872e:	d902      	bls.n	8008736 <DMA_CheckFifoParam+0xb6>
 8008730:	2b03      	cmp	r3, #3
 8008732:	d003      	beq.n	800873c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008734:	e018      	b.n	8008768 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	73fb      	strb	r3, [r7, #15]
        break;
 800873a:	e015      	b.n	8008768 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00e      	beq.n	8008766 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	73fb      	strb	r3, [r7, #15]
    break;
 800874c:	e00b      	b.n	8008766 <DMA_CheckFifoParam+0xe6>
        break;
 800874e:	bf00      	nop
 8008750:	e00a      	b.n	8008768 <DMA_CheckFifoParam+0xe8>
        break;
 8008752:	bf00      	nop
 8008754:	e008      	b.n	8008768 <DMA_CheckFifoParam+0xe8>
        break;
 8008756:	bf00      	nop
 8008758:	e006      	b.n	8008768 <DMA_CheckFifoParam+0xe8>
        break;
 800875a:	bf00      	nop
 800875c:	e004      	b.n	8008768 <DMA_CheckFifoParam+0xe8>
        break;
 800875e:	bf00      	nop
 8008760:	e002      	b.n	8008768 <DMA_CheckFifoParam+0xe8>
        break;
 8008762:	bf00      	nop
 8008764:	e000      	b.n	8008768 <DMA_CheckFifoParam+0xe8>
    break;
 8008766:	bf00      	nop
    }
  }

  return status;
 8008768:	7bfb      	ldrb	r3, [r7, #15]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop

08008778 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a38      	ldr	r2, [pc, #224]	; (800886c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d022      	beq.n	80087d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a36      	ldr	r2, [pc, #216]	; (8008870 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d01d      	beq.n	80087d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a35      	ldr	r2, [pc, #212]	; (8008874 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d018      	beq.n	80087d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a33      	ldr	r2, [pc, #204]	; (8008878 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d013      	beq.n	80087d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a32      	ldr	r2, [pc, #200]	; (800887c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00e      	beq.n	80087d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a30      	ldr	r2, [pc, #192]	; (8008880 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d009      	beq.n	80087d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a2f      	ldr	r2, [pc, #188]	; (8008884 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d004      	beq.n	80087d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a2d      	ldr	r2, [pc, #180]	; (8008888 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d101      	bne.n	80087da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80087d6:	2301      	movs	r3, #1
 80087d8:	e000      	b.n	80087dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80087da:	2300      	movs	r3, #0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d01a      	beq.n	8008816 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	3b08      	subs	r3, #8
 80087e8:	4a28      	ldr	r2, [pc, #160]	; (800888c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80087ea:	fba2 2303 	umull	r2, r3, r2, r3
 80087ee:	091b      	lsrs	r3, r3, #4
 80087f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	4b26      	ldr	r3, [pc, #152]	; (8008890 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80087f6:	4413      	add	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	461a      	mov	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a24      	ldr	r2, [pc, #144]	; (8008894 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008804:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f003 031f 	and.w	r3, r3, #31
 800880c:	2201      	movs	r2, #1
 800880e:	409a      	lsls	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008814:	e024      	b.n	8008860 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	3b10      	subs	r3, #16
 800881e:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008820:	fba2 2303 	umull	r2, r3, r2, r3
 8008824:	091b      	lsrs	r3, r3, #4
 8008826:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	4a1c      	ldr	r2, [pc, #112]	; (800889c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d806      	bhi.n	800883e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	4a1b      	ldr	r2, [pc, #108]	; (80088a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d902      	bls.n	800883e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3308      	adds	r3, #8
 800883c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4b18      	ldr	r3, [pc, #96]	; (80088a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008842:	4413      	add	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	461a      	mov	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a16      	ldr	r2, [pc, #88]	; (80088a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008850:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f003 031f 	and.w	r3, r3, #31
 8008858:	2201      	movs	r2, #1
 800885a:	409a      	lsls	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008860:	bf00      	nop
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	58025408 	.word	0x58025408
 8008870:	5802541c 	.word	0x5802541c
 8008874:	58025430 	.word	0x58025430
 8008878:	58025444 	.word	0x58025444
 800887c:	58025458 	.word	0x58025458
 8008880:	5802546c 	.word	0x5802546c
 8008884:	58025480 	.word	0x58025480
 8008888:	58025494 	.word	0x58025494
 800888c:	cccccccd 	.word	0xcccccccd
 8008890:	16009600 	.word	0x16009600
 8008894:	58025880 	.word	0x58025880
 8008898:	aaaaaaab 	.word	0xaaaaaaab
 800889c:	400204b8 	.word	0x400204b8
 80088a0:	4002040f 	.word	0x4002040f
 80088a4:	10008200 	.word	0x10008200
 80088a8:	40020880 	.word	0x40020880

080088ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d04a      	beq.n	8008958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d847      	bhi.n	8008958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a25      	ldr	r2, [pc, #148]	; (8008964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d022      	beq.n	8008918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a24      	ldr	r2, [pc, #144]	; (8008968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d01d      	beq.n	8008918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a22      	ldr	r2, [pc, #136]	; (800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d018      	beq.n	8008918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a21      	ldr	r2, [pc, #132]	; (8008970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d013      	beq.n	8008918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a1f      	ldr	r2, [pc, #124]	; (8008974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d00e      	beq.n	8008918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a1e      	ldr	r2, [pc, #120]	; (8008978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d009      	beq.n	8008918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a1c      	ldr	r2, [pc, #112]	; (800897c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d004      	beq.n	8008918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a1b      	ldr	r2, [pc, #108]	; (8008980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d101      	bne.n	800891c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008918:	2301      	movs	r3, #1
 800891a:	e000      	b.n	800891e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800891c:	2300      	movs	r3, #0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	4b17      	ldr	r3, [pc, #92]	; (8008984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008926:	4413      	add	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	461a      	mov	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a15      	ldr	r2, [pc, #84]	; (8008988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008934:	671a      	str	r2, [r3, #112]	; 0x70
 8008936:	e009      	b.n	800894c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	4b14      	ldr	r3, [pc, #80]	; (800898c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800893c:	4413      	add	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	461a      	mov	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a11      	ldr	r2, [pc, #68]	; (8008990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800894a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3b01      	subs	r3, #1
 8008950:	2201      	movs	r2, #1
 8008952:	409a      	lsls	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008958:	bf00      	nop
 800895a:	3714      	adds	r7, #20
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr
 8008964:	58025408 	.word	0x58025408
 8008968:	5802541c 	.word	0x5802541c
 800896c:	58025430 	.word	0x58025430
 8008970:	58025444 	.word	0x58025444
 8008974:	58025458 	.word	0x58025458
 8008978:	5802546c 	.word	0x5802546c
 800897c:	58025480 	.word	0x58025480
 8008980:	58025494 	.word	0x58025494
 8008984:	1600963f 	.word	0x1600963f
 8008988:	58025940 	.word	0x58025940
 800898c:	1000823f 	.word	0x1000823f
 8008990:	40020940 	.word	0x40020940

08008994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008994:	b480      	push	{r7}
 8008996:	b089      	sub	sp, #36	; 0x24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800899e:	2300      	movs	r3, #0
 80089a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80089a2:	4b86      	ldr	r3, [pc, #536]	; (8008bbc <HAL_GPIO_Init+0x228>)
 80089a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089a6:	e18c      	b.n	8008cc2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	2101      	movs	r1, #1
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	fa01 f303 	lsl.w	r3, r1, r3
 80089b4:	4013      	ands	r3, r2
 80089b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 817e 	beq.w	8008cbc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f003 0303 	and.w	r3, r3, #3
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d005      	beq.n	80089d8 <HAL_GPIO_Init+0x44>
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f003 0303 	and.w	r3, r3, #3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d130      	bne.n	8008a3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	2203      	movs	r2, #3
 80089e4:	fa02 f303 	lsl.w	r3, r2, r3
 80089e8:	43db      	mvns	r3, r3
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	4013      	ands	r3, r2
 80089ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	68da      	ldr	r2, [r3, #12]
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	005b      	lsls	r3, r3, #1
 80089f8:	fa02 f303 	lsl.w	r3, r2, r3
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a0e:	2201      	movs	r2, #1
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	fa02 f303 	lsl.w	r3, r2, r3
 8008a16:	43db      	mvns	r3, r3
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	091b      	lsrs	r3, r3, #4
 8008a24:	f003 0201 	and.w	r2, r3, #1
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2e:	69ba      	ldr	r2, [r7, #24]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f003 0303 	and.w	r3, r3, #3
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d017      	beq.n	8008a76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	2203      	movs	r2, #3
 8008a52:	fa02 f303 	lsl.w	r3, r2, r3
 8008a56:	43db      	mvns	r3, r3
 8008a58:	69ba      	ldr	r2, [r7, #24]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	689a      	ldr	r2, [r3, #8]
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d123      	bne.n	8008aca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	08da      	lsrs	r2, r3, #3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	3208      	adds	r2, #8
 8008a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	220f      	movs	r2, #15
 8008a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9e:	43db      	mvns	r3, r3
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	691a      	ldr	r2, [r3, #16]
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	f003 0307 	and.w	r3, r3, #7
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab6:	69ba      	ldr	r2, [r7, #24]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	08da      	lsrs	r2, r3, #3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	3208      	adds	r2, #8
 8008ac4:	69b9      	ldr	r1, [r7, #24]
 8008ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	43db      	mvns	r3, r3
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f003 0203 	and.w	r2, r3, #3
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	005b      	lsls	r3, r3, #1
 8008aee:	fa02 f303 	lsl.w	r3, r2, r3
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 80d8 	beq.w	8008cbc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b0c:	4b2c      	ldr	r3, [pc, #176]	; (8008bc0 <HAL_GPIO_Init+0x22c>)
 8008b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b12:	4a2b      	ldr	r2, [pc, #172]	; (8008bc0 <HAL_GPIO_Init+0x22c>)
 8008b14:	f043 0302 	orr.w	r3, r3, #2
 8008b18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008b1c:	4b28      	ldr	r3, [pc, #160]	; (8008bc0 <HAL_GPIO_Init+0x22c>)
 8008b1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b2a:	4a26      	ldr	r2, [pc, #152]	; (8008bc4 <HAL_GPIO_Init+0x230>)
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	089b      	lsrs	r3, r3, #2
 8008b30:	3302      	adds	r3, #2
 8008b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	f003 0303 	and.w	r3, r3, #3
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	220f      	movs	r2, #15
 8008b42:	fa02 f303 	lsl.w	r3, r2, r3
 8008b46:	43db      	mvns	r3, r3
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a1d      	ldr	r2, [pc, #116]	; (8008bc8 <HAL_GPIO_Init+0x234>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d04a      	beq.n	8008bec <HAL_GPIO_Init+0x258>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a1c      	ldr	r2, [pc, #112]	; (8008bcc <HAL_GPIO_Init+0x238>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d02b      	beq.n	8008bb6 <HAL_GPIO_Init+0x222>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a1b      	ldr	r2, [pc, #108]	; (8008bd0 <HAL_GPIO_Init+0x23c>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d025      	beq.n	8008bb2 <HAL_GPIO_Init+0x21e>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a1a      	ldr	r2, [pc, #104]	; (8008bd4 <HAL_GPIO_Init+0x240>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d01f      	beq.n	8008bae <HAL_GPIO_Init+0x21a>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a19      	ldr	r2, [pc, #100]	; (8008bd8 <HAL_GPIO_Init+0x244>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d019      	beq.n	8008baa <HAL_GPIO_Init+0x216>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a18      	ldr	r2, [pc, #96]	; (8008bdc <HAL_GPIO_Init+0x248>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d013      	beq.n	8008ba6 <HAL_GPIO_Init+0x212>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a17      	ldr	r2, [pc, #92]	; (8008be0 <HAL_GPIO_Init+0x24c>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d00d      	beq.n	8008ba2 <HAL_GPIO_Init+0x20e>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a16      	ldr	r2, [pc, #88]	; (8008be4 <HAL_GPIO_Init+0x250>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d007      	beq.n	8008b9e <HAL_GPIO_Init+0x20a>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a15      	ldr	r2, [pc, #84]	; (8008be8 <HAL_GPIO_Init+0x254>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d101      	bne.n	8008b9a <HAL_GPIO_Init+0x206>
 8008b96:	2309      	movs	r3, #9
 8008b98:	e029      	b.n	8008bee <HAL_GPIO_Init+0x25a>
 8008b9a:	230a      	movs	r3, #10
 8008b9c:	e027      	b.n	8008bee <HAL_GPIO_Init+0x25a>
 8008b9e:	2307      	movs	r3, #7
 8008ba0:	e025      	b.n	8008bee <HAL_GPIO_Init+0x25a>
 8008ba2:	2306      	movs	r3, #6
 8008ba4:	e023      	b.n	8008bee <HAL_GPIO_Init+0x25a>
 8008ba6:	2305      	movs	r3, #5
 8008ba8:	e021      	b.n	8008bee <HAL_GPIO_Init+0x25a>
 8008baa:	2304      	movs	r3, #4
 8008bac:	e01f      	b.n	8008bee <HAL_GPIO_Init+0x25a>
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e01d      	b.n	8008bee <HAL_GPIO_Init+0x25a>
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	e01b      	b.n	8008bee <HAL_GPIO_Init+0x25a>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e019      	b.n	8008bee <HAL_GPIO_Init+0x25a>
 8008bba:	bf00      	nop
 8008bbc:	58000080 	.word	0x58000080
 8008bc0:	58024400 	.word	0x58024400
 8008bc4:	58000400 	.word	0x58000400
 8008bc8:	58020000 	.word	0x58020000
 8008bcc:	58020400 	.word	0x58020400
 8008bd0:	58020800 	.word	0x58020800
 8008bd4:	58020c00 	.word	0x58020c00
 8008bd8:	58021000 	.word	0x58021000
 8008bdc:	58021400 	.word	0x58021400
 8008be0:	58021800 	.word	0x58021800
 8008be4:	58021c00 	.word	0x58021c00
 8008be8:	58022400 	.word	0x58022400
 8008bec:	2300      	movs	r3, #0
 8008bee:	69fa      	ldr	r2, [r7, #28]
 8008bf0:	f002 0203 	and.w	r2, r2, #3
 8008bf4:	0092      	lsls	r2, r2, #2
 8008bf6:	4093      	lsls	r3, r2
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008bfe:	4938      	ldr	r1, [pc, #224]	; (8008ce0 <HAL_GPIO_Init+0x34c>)
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	089b      	lsrs	r3, r3, #2
 8008c04:	3302      	adds	r3, #2
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	43db      	mvns	r3, r3
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	43db      	mvns	r3, r3
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	4013      	ands	r3, r2
 8008c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008c58:	69ba      	ldr	r2, [r7, #24]
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	43db      	mvns	r3, r3
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	4013      	ands	r3, r2
 8008c76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d003      	beq.n	8008c8c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	43db      	mvns	r3, r3
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f47f ae6b 	bne.w	80089a8 <HAL_GPIO_Init+0x14>
  }
}
 8008cd2:	bf00      	nop
 8008cd4:	bf00      	nop
 8008cd6:	3724      	adds	r7, #36	; 0x24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	58000400 	.word	0x58000400

08008ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	807b      	strh	r3, [r7, #2]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008cf4:	787b      	ldrb	r3, [r7, #1]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008cfa:	887a      	ldrh	r2, [r7, #2]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008d00:	e003      	b.n	8008d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d02:	887b      	ldrh	r3, [r7, #2]
 8008d04:	041a      	lsls	r2, r3, #16
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	619a      	str	r2, [r3, #24]
}
 8008d0a:	bf00      	nop
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
	...

08008d18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d20:	4b19      	ldr	r3, [pc, #100]	; (8008d88 <HAL_PWREx_ConfigSupply+0x70>)
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d00a      	beq.n	8008d42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d2c:	4b16      	ldr	r3, [pc, #88]	; (8008d88 <HAL_PWREx_ConfigSupply+0x70>)
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f003 0307 	and.w	r3, r3, #7
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d001      	beq.n	8008d3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e01f      	b.n	8008d7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	e01d      	b.n	8008d7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d42:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <HAL_PWREx_ConfigSupply+0x70>)
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	f023 0207 	bic.w	r2, r3, #7
 8008d4a:	490f      	ldr	r1, [pc, #60]	; (8008d88 <HAL_PWREx_ConfigSupply+0x70>)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d52:	f7fc fec9 	bl	8005ae8 <HAL_GetTick>
 8008d56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d58:	e009      	b.n	8008d6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d5a:	f7fc fec5 	bl	8005ae8 <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d68:	d901      	bls.n	8008d6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e007      	b.n	8008d7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d6e:	4b06      	ldr	r3, [pc, #24]	; (8008d88 <HAL_PWREx_ConfigSupply+0x70>)
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d7a:	d1ee      	bne.n	8008d5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	58024800 	.word	0x58024800

08008d8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08c      	sub	sp, #48	; 0x30
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d101      	bne.n	8008d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e39d      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 8087 	beq.w	8008eba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dac:	4b88      	ldr	r3, [pc, #544]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008db6:	4b86      	ldr	r3, [pc, #536]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	2b10      	cmp	r3, #16
 8008dc0:	d007      	beq.n	8008dd2 <HAL_RCC_OscConfig+0x46>
 8008dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc4:	2b18      	cmp	r3, #24
 8008dc6:	d110      	bne.n	8008dea <HAL_RCC_OscConfig+0x5e>
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	f003 0303 	and.w	r3, r3, #3
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d10b      	bne.n	8008dea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dd2:	4b7f      	ldr	r3, [pc, #508]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d06c      	beq.n	8008eb8 <HAL_RCC_OscConfig+0x12c>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d168      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e377      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008df2:	d106      	bne.n	8008e02 <HAL_RCC_OscConfig+0x76>
 8008df4:	4b76      	ldr	r3, [pc, #472]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a75      	ldr	r2, [pc, #468]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dfe:	6013      	str	r3, [r2, #0]
 8008e00:	e02e      	b.n	8008e60 <HAL_RCC_OscConfig+0xd4>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10c      	bne.n	8008e24 <HAL_RCC_OscConfig+0x98>
 8008e0a:	4b71      	ldr	r3, [pc, #452]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a70      	ldr	r2, [pc, #448]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e14:	6013      	str	r3, [r2, #0]
 8008e16:	4b6e      	ldr	r3, [pc, #440]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a6d      	ldr	r2, [pc, #436]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e20:	6013      	str	r3, [r2, #0]
 8008e22:	e01d      	b.n	8008e60 <HAL_RCC_OscConfig+0xd4>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e2c:	d10c      	bne.n	8008e48 <HAL_RCC_OscConfig+0xbc>
 8008e2e:	4b68      	ldr	r3, [pc, #416]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a67      	ldr	r2, [pc, #412]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	4b65      	ldr	r3, [pc, #404]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a64      	ldr	r2, [pc, #400]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	e00b      	b.n	8008e60 <HAL_RCC_OscConfig+0xd4>
 8008e48:	4b61      	ldr	r3, [pc, #388]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a60      	ldr	r2, [pc, #384]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	4b5e      	ldr	r3, [pc, #376]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a5d      	ldr	r2, [pc, #372]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d013      	beq.n	8008e90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e68:	f7fc fe3e 	bl	8005ae8 <HAL_GetTick>
 8008e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e6e:	e008      	b.n	8008e82 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e70:	f7fc fe3a 	bl	8005ae8 <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	2b64      	cmp	r3, #100	; 0x64
 8008e7c:	d901      	bls.n	8008e82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e32b      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e82:	4b53      	ldr	r3, [pc, #332]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d0f0      	beq.n	8008e70 <HAL_RCC_OscConfig+0xe4>
 8008e8e:	e014      	b.n	8008eba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e90:	f7fc fe2a 	bl	8005ae8 <HAL_GetTick>
 8008e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e96:	e008      	b.n	8008eaa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e98:	f7fc fe26 	bl	8005ae8 <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	2b64      	cmp	r3, #100	; 0x64
 8008ea4:	d901      	bls.n	8008eaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e317      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008eaa:	4b49      	ldr	r3, [pc, #292]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1f0      	bne.n	8008e98 <HAL_RCC_OscConfig+0x10c>
 8008eb6:	e000      	b.n	8008eba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0302 	and.w	r3, r3, #2
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 808c 	beq.w	8008fe0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ec8:	4b41      	ldr	r3, [pc, #260]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ed0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ed2:	4b3f      	ldr	r3, [pc, #252]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d007      	beq.n	8008eee <HAL_RCC_OscConfig+0x162>
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	2b18      	cmp	r3, #24
 8008ee2:	d137      	bne.n	8008f54 <HAL_RCC_OscConfig+0x1c8>
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	f003 0303 	and.w	r3, r3, #3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d132      	bne.n	8008f54 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008eee:	4b38      	ldr	r3, [pc, #224]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0304 	and.w	r3, r3, #4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d005      	beq.n	8008f06 <HAL_RCC_OscConfig+0x17a>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e2e9      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f06:	4b32      	ldr	r3, [pc, #200]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f023 0219 	bic.w	r2, r3, #25
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	492f      	ldr	r1, [pc, #188]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f18:	f7fc fde6 	bl	8005ae8 <HAL_GetTick>
 8008f1c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f1e:	e008      	b.n	8008f32 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f20:	f7fc fde2 	bl	8005ae8 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e2d3      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f32:	4b27      	ldr	r3, [pc, #156]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0304 	and.w	r3, r3, #4
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0f0      	beq.n	8008f20 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f3e:	4b24      	ldr	r3, [pc, #144]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	061b      	lsls	r3, r3, #24
 8008f4c:	4920      	ldr	r1, [pc, #128]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f52:	e045      	b.n	8008fe0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d026      	beq.n	8008faa <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f5c:	4b1c      	ldr	r3, [pc, #112]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f023 0219 	bic.w	r2, r3, #25
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	4919      	ldr	r1, [pc, #100]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f6e:	f7fc fdbb 	bl	8005ae8 <HAL_GetTick>
 8008f72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f74:	e008      	b.n	8008f88 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f76:	f7fc fdb7 	bl	8005ae8 <HAL_GetTick>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d901      	bls.n	8008f88 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e2a8      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f88:	4b11      	ldr	r3, [pc, #68]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0f0      	beq.n	8008f76 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f94:	4b0e      	ldr	r3, [pc, #56]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	061b      	lsls	r3, r3, #24
 8008fa2:	490b      	ldr	r1, [pc, #44]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	604b      	str	r3, [r1, #4]
 8008fa8:	e01a      	b.n	8008fe0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008faa:	4b09      	ldr	r3, [pc, #36]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a08      	ldr	r2, [pc, #32]	; (8008fd0 <HAL_RCC_OscConfig+0x244>)
 8008fb0:	f023 0301 	bic.w	r3, r3, #1
 8008fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fb6:	f7fc fd97 	bl	8005ae8 <HAL_GetTick>
 8008fba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008fbc:	e00a      	b.n	8008fd4 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fbe:	f7fc fd93 	bl	8005ae8 <HAL_GetTick>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d903      	bls.n	8008fd4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e284      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
 8008fd0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008fd4:	4b96      	ldr	r3, [pc, #600]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1ee      	bne.n	8008fbe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0310 	and.w	r3, r3, #16
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d06a      	beq.n	80090c2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fec:	4b90      	ldr	r3, [pc, #576]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ff4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ff6:	4b8e      	ldr	r3, [pc, #568]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8008ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffa:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	2b08      	cmp	r3, #8
 8009000:	d007      	beq.n	8009012 <HAL_RCC_OscConfig+0x286>
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	2b18      	cmp	r3, #24
 8009006:	d11b      	bne.n	8009040 <HAL_RCC_OscConfig+0x2b4>
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	f003 0303 	and.w	r3, r3, #3
 800900e:	2b01      	cmp	r3, #1
 8009010:	d116      	bne.n	8009040 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009012:	4b87      	ldr	r3, [pc, #540]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800901a:	2b00      	cmp	r3, #0
 800901c:	d005      	beq.n	800902a <HAL_RCC_OscConfig+0x29e>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	2b80      	cmp	r3, #128	; 0x80
 8009024:	d001      	beq.n	800902a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e257      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800902a:	4b81      	ldr	r3, [pc, #516]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a1b      	ldr	r3, [r3, #32]
 8009036:	061b      	lsls	r3, r3, #24
 8009038:	497d      	ldr	r1, [pc, #500]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 800903a:	4313      	orrs	r3, r2
 800903c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800903e:	e040      	b.n	80090c2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d023      	beq.n	8009090 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009048:	4b79      	ldr	r3, [pc, #484]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a78      	ldr	r2, [pc, #480]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 800904e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009054:	f7fc fd48 	bl	8005ae8 <HAL_GetTick>
 8009058:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800905a:	e008      	b.n	800906e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800905c:	f7fc fd44 	bl	8005ae8 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	2b02      	cmp	r3, #2
 8009068:	d901      	bls.n	800906e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e235      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800906e:	4b70      	ldr	r3, [pc, #448]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009076:	2b00      	cmp	r3, #0
 8009078:	d0f0      	beq.n	800905c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800907a:	4b6d      	ldr	r3, [pc, #436]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	061b      	lsls	r3, r3, #24
 8009088:	4969      	ldr	r1, [pc, #420]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 800908a:	4313      	orrs	r3, r2
 800908c:	60cb      	str	r3, [r1, #12]
 800908e:	e018      	b.n	80090c2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009090:	4b67      	ldr	r3, [pc, #412]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a66      	ldr	r2, [pc, #408]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800909a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800909c:	f7fc fd24 	bl	8005ae8 <HAL_GetTick>
 80090a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090a2:	e008      	b.n	80090b6 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80090a4:	f7fc fd20 	bl	8005ae8 <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d901      	bls.n	80090b6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e211      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090b6:	4b5e      	ldr	r3, [pc, #376]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1f0      	bne.n	80090a4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0308 	and.w	r3, r3, #8
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d036      	beq.n	800913c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d019      	beq.n	800910a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090d6:	4b56      	ldr	r3, [pc, #344]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 80090d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090da:	4a55      	ldr	r2, [pc, #340]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 80090dc:	f043 0301 	orr.w	r3, r3, #1
 80090e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090e2:	f7fc fd01 	bl	8005ae8 <HAL_GetTick>
 80090e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090e8:	e008      	b.n	80090fc <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80090ea:	f7fc fcfd 	bl	8005ae8 <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d901      	bls.n	80090fc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e1ee      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090fc:	4b4c      	ldr	r3, [pc, #304]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 80090fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009100:	f003 0302 	and.w	r3, r3, #2
 8009104:	2b00      	cmp	r3, #0
 8009106:	d0f0      	beq.n	80090ea <HAL_RCC_OscConfig+0x35e>
 8009108:	e018      	b.n	800913c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800910a:	4b49      	ldr	r3, [pc, #292]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 800910c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800910e:	4a48      	ldr	r2, [pc, #288]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009110:	f023 0301 	bic.w	r3, r3, #1
 8009114:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009116:	f7fc fce7 	bl	8005ae8 <HAL_GetTick>
 800911a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800911c:	e008      	b.n	8009130 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800911e:	f7fc fce3 	bl	8005ae8 <HAL_GetTick>
 8009122:	4602      	mov	r2, r0
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	2b02      	cmp	r3, #2
 800912a:	d901      	bls.n	8009130 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e1d4      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009130:	4b3f      	ldr	r3, [pc, #252]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009134:	f003 0302 	and.w	r3, r3, #2
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1f0      	bne.n	800911e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0320 	and.w	r3, r3, #32
 8009144:	2b00      	cmp	r3, #0
 8009146:	d036      	beq.n	80091b6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d019      	beq.n	8009184 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009150:	4b37      	ldr	r3, [pc, #220]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a36      	ldr	r2, [pc, #216]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009156:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800915a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800915c:	f7fc fcc4 	bl	8005ae8 <HAL_GetTick>
 8009160:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009162:	e008      	b.n	8009176 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009164:	f7fc fcc0 	bl	8005ae8 <HAL_GetTick>
 8009168:	4602      	mov	r2, r0
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	2b02      	cmp	r3, #2
 8009170:	d901      	bls.n	8009176 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e1b1      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009176:	4b2e      	ldr	r3, [pc, #184]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d0f0      	beq.n	8009164 <HAL_RCC_OscConfig+0x3d8>
 8009182:	e018      	b.n	80091b6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009184:	4b2a      	ldr	r3, [pc, #168]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a29      	ldr	r2, [pc, #164]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 800918a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800918e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009190:	f7fc fcaa 	bl	8005ae8 <HAL_GetTick>
 8009194:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009196:	e008      	b.n	80091aa <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009198:	f7fc fca6 	bl	8005ae8 <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d901      	bls.n	80091aa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e197      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091aa:	4b21      	ldr	r3, [pc, #132]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1f0      	bne.n	8009198 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0304 	and.w	r3, r3, #4
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 8086 	beq.w	80092d0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80091c4:	4b1b      	ldr	r3, [pc, #108]	; (8009234 <HAL_RCC_OscConfig+0x4a8>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a1a      	ldr	r2, [pc, #104]	; (8009234 <HAL_RCC_OscConfig+0x4a8>)
 80091ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091d0:	f7fc fc8a 	bl	8005ae8 <HAL_GetTick>
 80091d4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091d6:	e008      	b.n	80091ea <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80091d8:	f7fc fc86 	bl	8005ae8 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	2b64      	cmp	r3, #100	; 0x64
 80091e4:	d901      	bls.n	80091ea <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e177      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091ea:	4b12      	ldr	r3, [pc, #72]	; (8009234 <HAL_RCC_OscConfig+0x4a8>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0f0      	beq.n	80091d8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d106      	bne.n	800920c <HAL_RCC_OscConfig+0x480>
 80091fe:	4b0c      	ldr	r3, [pc, #48]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009202:	4a0b      	ldr	r2, [pc, #44]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009204:	f043 0301 	orr.w	r3, r3, #1
 8009208:	6713      	str	r3, [r2, #112]	; 0x70
 800920a:	e032      	b.n	8009272 <HAL_RCC_OscConfig+0x4e6>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d111      	bne.n	8009238 <HAL_RCC_OscConfig+0x4ac>
 8009214:	4b06      	ldr	r3, [pc, #24]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009218:	4a05      	ldr	r2, [pc, #20]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 800921a:	f023 0301 	bic.w	r3, r3, #1
 800921e:	6713      	str	r3, [r2, #112]	; 0x70
 8009220:	4b03      	ldr	r3, [pc, #12]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009224:	4a02      	ldr	r2, [pc, #8]	; (8009230 <HAL_RCC_OscConfig+0x4a4>)
 8009226:	f023 0304 	bic.w	r3, r3, #4
 800922a:	6713      	str	r3, [r2, #112]	; 0x70
 800922c:	e021      	b.n	8009272 <HAL_RCC_OscConfig+0x4e6>
 800922e:	bf00      	nop
 8009230:	58024400 	.word	0x58024400
 8009234:	58024800 	.word	0x58024800
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	2b05      	cmp	r3, #5
 800923e:	d10c      	bne.n	800925a <HAL_RCC_OscConfig+0x4ce>
 8009240:	4b83      	ldr	r3, [pc, #524]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 8009242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009244:	4a82      	ldr	r2, [pc, #520]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 8009246:	f043 0304 	orr.w	r3, r3, #4
 800924a:	6713      	str	r3, [r2, #112]	; 0x70
 800924c:	4b80      	ldr	r3, [pc, #512]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 800924e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009250:	4a7f      	ldr	r2, [pc, #508]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 8009252:	f043 0301 	orr.w	r3, r3, #1
 8009256:	6713      	str	r3, [r2, #112]	; 0x70
 8009258:	e00b      	b.n	8009272 <HAL_RCC_OscConfig+0x4e6>
 800925a:	4b7d      	ldr	r3, [pc, #500]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 800925c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925e:	4a7c      	ldr	r2, [pc, #496]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 8009260:	f023 0301 	bic.w	r3, r3, #1
 8009264:	6713      	str	r3, [r2, #112]	; 0x70
 8009266:	4b7a      	ldr	r3, [pc, #488]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 8009268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926a:	4a79      	ldr	r2, [pc, #484]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 800926c:	f023 0304 	bic.w	r3, r3, #4
 8009270:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d015      	beq.n	80092a6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800927a:	f7fc fc35 	bl	8005ae8 <HAL_GetTick>
 800927e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009280:	e00a      	b.n	8009298 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009282:	f7fc fc31 	bl	8005ae8 <HAL_GetTick>
 8009286:	4602      	mov	r2, r0
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009290:	4293      	cmp	r3, r2
 8009292:	d901      	bls.n	8009298 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e120      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009298:	4b6d      	ldr	r3, [pc, #436]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 800929a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d0ee      	beq.n	8009282 <HAL_RCC_OscConfig+0x4f6>
 80092a4:	e014      	b.n	80092d0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092a6:	f7fc fc1f 	bl	8005ae8 <HAL_GetTick>
 80092aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092ac:	e00a      	b.n	80092c4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092ae:	f7fc fc1b 	bl	8005ae8 <HAL_GetTick>
 80092b2:	4602      	mov	r2, r0
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092bc:	4293      	cmp	r3, r2
 80092be:	d901      	bls.n	80092c4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e10a      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092c4:	4b62      	ldr	r3, [pc, #392]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80092c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c8:	f003 0302 	and.w	r3, r3, #2
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1ee      	bne.n	80092ae <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 80ff 	beq.w	80094d8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80092da:	4b5d      	ldr	r3, [pc, #372]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092e2:	2b18      	cmp	r3, #24
 80092e4:	f000 80ba 	beq.w	800945c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	f040 8095 	bne.w	800941c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092f2:	4b57      	ldr	r3, [pc, #348]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a56      	ldr	r2, [pc, #344]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80092f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092fe:	f7fc fbf3 	bl	8005ae8 <HAL_GetTick>
 8009302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009304:	e008      	b.n	8009318 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009306:	f7fc fbef 	bl	8005ae8 <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	2b02      	cmp	r3, #2
 8009312:	d901      	bls.n	8009318 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e0e0      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009318:	4b4d      	ldr	r3, [pc, #308]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1f0      	bne.n	8009306 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009324:	4b4a      	ldr	r3, [pc, #296]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 8009326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009328:	4b4a      	ldr	r3, [pc, #296]	; (8009454 <HAL_RCC_OscConfig+0x6c8>)
 800932a:	4013      	ands	r3, r2
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009334:	0112      	lsls	r2, r2, #4
 8009336:	430a      	orrs	r2, r1
 8009338:	4945      	ldr	r1, [pc, #276]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 800933a:	4313      	orrs	r3, r2
 800933c:	628b      	str	r3, [r1, #40]	; 0x28
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009342:	3b01      	subs	r3, #1
 8009344:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934c:	3b01      	subs	r3, #1
 800934e:	025b      	lsls	r3, r3, #9
 8009350:	b29b      	uxth	r3, r3
 8009352:	431a      	orrs	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009358:	3b01      	subs	r3, #1
 800935a:	041b      	lsls	r3, r3, #16
 800935c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009360:	431a      	orrs	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009366:	3b01      	subs	r3, #1
 8009368:	061b      	lsls	r3, r3, #24
 800936a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800936e:	4938      	ldr	r1, [pc, #224]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 8009370:	4313      	orrs	r3, r2
 8009372:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009374:	4b36      	ldr	r3, [pc, #216]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 8009376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009378:	4a35      	ldr	r2, [pc, #212]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 800937a:	f023 0301 	bic.w	r3, r3, #1
 800937e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009380:	4b33      	ldr	r3, [pc, #204]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 8009382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009384:	4b34      	ldr	r3, [pc, #208]	; (8009458 <HAL_RCC_OscConfig+0x6cc>)
 8009386:	4013      	ands	r3, r2
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800938c:	00d2      	lsls	r2, r2, #3
 800938e:	4930      	ldr	r1, [pc, #192]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 8009390:	4313      	orrs	r3, r2
 8009392:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009394:	4b2e      	ldr	r3, [pc, #184]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	f023 020c 	bic.w	r2, r3, #12
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a0:	492b      	ldr	r1, [pc, #172]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80093a6:	4b2a      	ldr	r3, [pc, #168]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80093a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093aa:	f023 0202 	bic.w	r2, r3, #2
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093b2:	4927      	ldr	r1, [pc, #156]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80093b4:	4313      	orrs	r3, r2
 80093b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80093b8:	4b25      	ldr	r3, [pc, #148]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80093ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093bc:	4a24      	ldr	r2, [pc, #144]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80093be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c4:	4b22      	ldr	r3, [pc, #136]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	4a21      	ldr	r2, [pc, #132]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80093ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80093d0:	4b1f      	ldr	r3, [pc, #124]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80093d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d4:	4a1e      	ldr	r2, [pc, #120]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80093d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80093dc:	4b1c      	ldr	r3, [pc, #112]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80093de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e0:	4a1b      	ldr	r2, [pc, #108]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80093e2:	f043 0301 	orr.w	r3, r3, #1
 80093e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093e8:	4b19      	ldr	r3, [pc, #100]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a18      	ldr	r2, [pc, #96]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 80093ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f4:	f7fc fb78 	bl	8005ae8 <HAL_GetTick>
 80093f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093fa:	e008      	b.n	800940e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093fc:	f7fc fb74 	bl	8005ae8 <HAL_GetTick>
 8009400:	4602      	mov	r2, r0
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	2b02      	cmp	r3, #2
 8009408:	d901      	bls.n	800940e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e065      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800940e:	4b10      	ldr	r3, [pc, #64]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0f0      	beq.n	80093fc <HAL_RCC_OscConfig+0x670>
 800941a:	e05d      	b.n	80094d8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800941c:	4b0c      	ldr	r3, [pc, #48]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a0b      	ldr	r2, [pc, #44]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 8009422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009428:	f7fc fb5e 	bl	8005ae8 <HAL_GetTick>
 800942c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800942e:	e008      	b.n	8009442 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009430:	f7fc fb5a 	bl	8005ae8 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b02      	cmp	r3, #2
 800943c:	d901      	bls.n	8009442 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e04b      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009442:	4b03      	ldr	r3, [pc, #12]	; (8009450 <HAL_RCC_OscConfig+0x6c4>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1f0      	bne.n	8009430 <HAL_RCC_OscConfig+0x6a4>
 800944e:	e043      	b.n	80094d8 <HAL_RCC_OscConfig+0x74c>
 8009450:	58024400 	.word	0x58024400
 8009454:	fffffc0c 	.word	0xfffffc0c
 8009458:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800945c:	4b21      	ldr	r3, [pc, #132]	; (80094e4 <HAL_RCC_OscConfig+0x758>)
 800945e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009460:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009462:	4b20      	ldr	r3, [pc, #128]	; (80094e4 <HAL_RCC_OscConfig+0x758>)
 8009464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009466:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946c:	2b01      	cmp	r3, #1
 800946e:	d031      	beq.n	80094d4 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f003 0203 	and.w	r2, r3, #3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800947a:	429a      	cmp	r2, r3
 800947c:	d12a      	bne.n	80094d4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	091b      	lsrs	r3, r3, #4
 8009482:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800948a:	429a      	cmp	r2, r3
 800948c:	d122      	bne.n	80094d4 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009498:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800949a:	429a      	cmp	r2, r3
 800949c:	d11a      	bne.n	80094d4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	0a5b      	lsrs	r3, r3, #9
 80094a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094aa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d111      	bne.n	80094d4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	0c1b      	lsrs	r3, r3, #16
 80094b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094be:	429a      	cmp	r2, r3
 80094c0:	d108      	bne.n	80094d4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	0e1b      	lsrs	r3, r3, #24
 80094c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d001      	beq.n	80094d8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e000      	b.n	80094da <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3730      	adds	r7, #48	; 0x30
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	58024400 	.word	0x58024400

080094e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e19c      	b.n	8009836 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80094fc:	4b8a      	ldr	r3, [pc, #552]	; (8009728 <HAL_RCC_ClockConfig+0x240>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 030f 	and.w	r3, r3, #15
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	429a      	cmp	r2, r3
 8009508:	d910      	bls.n	800952c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800950a:	4b87      	ldr	r3, [pc, #540]	; (8009728 <HAL_RCC_ClockConfig+0x240>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f023 020f 	bic.w	r2, r3, #15
 8009512:	4985      	ldr	r1, [pc, #532]	; (8009728 <HAL_RCC_ClockConfig+0x240>)
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	4313      	orrs	r3, r2
 8009518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800951a:	4b83      	ldr	r3, [pc, #524]	; (8009728 <HAL_RCC_ClockConfig+0x240>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 030f 	and.w	r3, r3, #15
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d001      	beq.n	800952c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e184      	b.n	8009836 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	d010      	beq.n	800955a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	691a      	ldr	r2, [r3, #16]
 800953c:	4b7b      	ldr	r3, [pc, #492]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009544:	429a      	cmp	r2, r3
 8009546:	d908      	bls.n	800955a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009548:	4b78      	ldr	r3, [pc, #480]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	4975      	ldr	r1, [pc, #468]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 8009556:	4313      	orrs	r3, r2
 8009558:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0308 	and.w	r3, r3, #8
 8009562:	2b00      	cmp	r3, #0
 8009564:	d010      	beq.n	8009588 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	695a      	ldr	r2, [r3, #20]
 800956a:	4b70      	ldr	r3, [pc, #448]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009572:	429a      	cmp	r2, r3
 8009574:	d908      	bls.n	8009588 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009576:	4b6d      	ldr	r3, [pc, #436]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	496a      	ldr	r1, [pc, #424]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 8009584:	4313      	orrs	r3, r2
 8009586:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0310 	and.w	r3, r3, #16
 8009590:	2b00      	cmp	r3, #0
 8009592:	d010      	beq.n	80095b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	699a      	ldr	r2, [r3, #24]
 8009598:	4b64      	ldr	r3, [pc, #400]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 800959a:	69db      	ldr	r3, [r3, #28]
 800959c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d908      	bls.n	80095b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095a4:	4b61      	ldr	r3, [pc, #388]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 80095a6:	69db      	ldr	r3, [r3, #28]
 80095a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	495e      	ldr	r1, [pc, #376]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 0320 	and.w	r3, r3, #32
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d010      	beq.n	80095e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	69da      	ldr	r2, [r3, #28]
 80095c6:	4b59      	ldr	r3, [pc, #356]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d908      	bls.n	80095e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80095d2:	4b56      	ldr	r3, [pc, #344]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	4953      	ldr	r1, [pc, #332]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d010      	beq.n	8009612 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	68da      	ldr	r2, [r3, #12]
 80095f4:	4b4d      	ldr	r3, [pc, #308]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	f003 030f 	and.w	r3, r3, #15
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d908      	bls.n	8009612 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009600:	4b4a      	ldr	r3, [pc, #296]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	f023 020f 	bic.w	r2, r3, #15
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	4947      	ldr	r1, [pc, #284]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 800960e:	4313      	orrs	r3, r2
 8009610:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	2b00      	cmp	r3, #0
 800961c:	d055      	beq.n	80096ca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800961e:	4b43      	ldr	r3, [pc, #268]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	4940      	ldr	r1, [pc, #256]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 800962c:	4313      	orrs	r3, r2
 800962e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	2b02      	cmp	r3, #2
 8009636:	d107      	bne.n	8009648 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009638:	4b3c      	ldr	r3, [pc, #240]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d121      	bne.n	8009688 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e0f6      	b.n	8009836 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	2b03      	cmp	r3, #3
 800964e:	d107      	bne.n	8009660 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009650:	4b36      	ldr	r3, [pc, #216]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d115      	bne.n	8009688 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e0ea      	b.n	8009836 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d107      	bne.n	8009678 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009668:	4b30      	ldr	r3, [pc, #192]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009670:	2b00      	cmp	r3, #0
 8009672:	d109      	bne.n	8009688 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e0de      	b.n	8009836 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009678:	4b2c      	ldr	r3, [pc, #176]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e0d6      	b.n	8009836 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009688:	4b28      	ldr	r3, [pc, #160]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	f023 0207 	bic.w	r2, r3, #7
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	4925      	ldr	r1, [pc, #148]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 8009696:	4313      	orrs	r3, r2
 8009698:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800969a:	f7fc fa25 	bl	8005ae8 <HAL_GetTick>
 800969e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096a0:	e00a      	b.n	80096b8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096a2:	f7fc fa21 	bl	8005ae8 <HAL_GetTick>
 80096a6:	4602      	mov	r2, r0
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d901      	bls.n	80096b8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e0be      	b.n	8009836 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096b8:	4b1c      	ldr	r3, [pc, #112]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	00db      	lsls	r3, r3, #3
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d1eb      	bne.n	80096a2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0302 	and.w	r3, r3, #2
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d010      	beq.n	80096f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	68da      	ldr	r2, [r3, #12]
 80096da:	4b14      	ldr	r3, [pc, #80]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	f003 030f 	and.w	r3, r3, #15
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d208      	bcs.n	80096f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096e6:	4b11      	ldr	r3, [pc, #68]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	f023 020f 	bic.w	r2, r3, #15
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	490e      	ldr	r1, [pc, #56]	; (800972c <HAL_RCC_ClockConfig+0x244>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80096f8:	4b0b      	ldr	r3, [pc, #44]	; (8009728 <HAL_RCC_ClockConfig+0x240>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 030f 	and.w	r3, r3, #15
 8009700:	683a      	ldr	r2, [r7, #0]
 8009702:	429a      	cmp	r2, r3
 8009704:	d214      	bcs.n	8009730 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009706:	4b08      	ldr	r3, [pc, #32]	; (8009728 <HAL_RCC_ClockConfig+0x240>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f023 020f 	bic.w	r2, r3, #15
 800970e:	4906      	ldr	r1, [pc, #24]	; (8009728 <HAL_RCC_ClockConfig+0x240>)
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	4313      	orrs	r3, r2
 8009714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009716:	4b04      	ldr	r3, [pc, #16]	; (8009728 <HAL_RCC_ClockConfig+0x240>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 030f 	and.w	r3, r3, #15
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	429a      	cmp	r2, r3
 8009722:	d005      	beq.n	8009730 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e086      	b.n	8009836 <HAL_RCC_ClockConfig+0x34e>
 8009728:	52002000 	.word	0x52002000
 800972c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	2b00      	cmp	r3, #0
 800973a:	d010      	beq.n	800975e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	691a      	ldr	r2, [r3, #16]
 8009740:	4b3f      	ldr	r3, [pc, #252]	; (8009840 <HAL_RCC_ClockConfig+0x358>)
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009748:	429a      	cmp	r2, r3
 800974a:	d208      	bcs.n	800975e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800974c:	4b3c      	ldr	r3, [pc, #240]	; (8009840 <HAL_RCC_ClockConfig+0x358>)
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	4939      	ldr	r1, [pc, #228]	; (8009840 <HAL_RCC_ClockConfig+0x358>)
 800975a:	4313      	orrs	r3, r2
 800975c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 0308 	and.w	r3, r3, #8
 8009766:	2b00      	cmp	r3, #0
 8009768:	d010      	beq.n	800978c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	695a      	ldr	r2, [r3, #20]
 800976e:	4b34      	ldr	r3, [pc, #208]	; (8009840 <HAL_RCC_ClockConfig+0x358>)
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009776:	429a      	cmp	r2, r3
 8009778:	d208      	bcs.n	800978c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800977a:	4b31      	ldr	r3, [pc, #196]	; (8009840 <HAL_RCC_ClockConfig+0x358>)
 800977c:	69db      	ldr	r3, [r3, #28]
 800977e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	492e      	ldr	r1, [pc, #184]	; (8009840 <HAL_RCC_ClockConfig+0x358>)
 8009788:	4313      	orrs	r3, r2
 800978a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 0310 	and.w	r3, r3, #16
 8009794:	2b00      	cmp	r3, #0
 8009796:	d010      	beq.n	80097ba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	699a      	ldr	r2, [r3, #24]
 800979c:	4b28      	ldr	r3, [pc, #160]	; (8009840 <HAL_RCC_ClockConfig+0x358>)
 800979e:	69db      	ldr	r3, [r3, #28]
 80097a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d208      	bcs.n	80097ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097a8:	4b25      	ldr	r3, [pc, #148]	; (8009840 <HAL_RCC_ClockConfig+0x358>)
 80097aa:	69db      	ldr	r3, [r3, #28]
 80097ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	4922      	ldr	r1, [pc, #136]	; (8009840 <HAL_RCC_ClockConfig+0x358>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 0320 	and.w	r3, r3, #32
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d010      	beq.n	80097e8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	69da      	ldr	r2, [r3, #28]
 80097ca:	4b1d      	ldr	r3, [pc, #116]	; (8009840 <HAL_RCC_ClockConfig+0x358>)
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d208      	bcs.n	80097e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80097d6:	4b1a      	ldr	r3, [pc, #104]	; (8009840 <HAL_RCC_ClockConfig+0x358>)
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	4917      	ldr	r1, [pc, #92]	; (8009840 <HAL_RCC_ClockConfig+0x358>)
 80097e4:	4313      	orrs	r3, r2
 80097e6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80097e8:	f000 f834 	bl	8009854 <HAL_RCC_GetSysClockFreq>
 80097ec:	4602      	mov	r2, r0
 80097ee:	4b14      	ldr	r3, [pc, #80]	; (8009840 <HAL_RCC_ClockConfig+0x358>)
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	0a1b      	lsrs	r3, r3, #8
 80097f4:	f003 030f 	and.w	r3, r3, #15
 80097f8:	4912      	ldr	r1, [pc, #72]	; (8009844 <HAL_RCC_ClockConfig+0x35c>)
 80097fa:	5ccb      	ldrb	r3, [r1, r3]
 80097fc:	f003 031f 	and.w	r3, r3, #31
 8009800:	fa22 f303 	lsr.w	r3, r2, r3
 8009804:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009806:	4b0e      	ldr	r3, [pc, #56]	; (8009840 <HAL_RCC_ClockConfig+0x358>)
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	f003 030f 	and.w	r3, r3, #15
 800980e:	4a0d      	ldr	r2, [pc, #52]	; (8009844 <HAL_RCC_ClockConfig+0x35c>)
 8009810:	5cd3      	ldrb	r3, [r2, r3]
 8009812:	f003 031f 	and.w	r3, r3, #31
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	fa22 f303 	lsr.w	r3, r2, r3
 800981c:	4a0a      	ldr	r2, [pc, #40]	; (8009848 <HAL_RCC_ClockConfig+0x360>)
 800981e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009820:	4a0a      	ldr	r2, [pc, #40]	; (800984c <HAL_RCC_ClockConfig+0x364>)
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009826:	4b0a      	ldr	r3, [pc, #40]	; (8009850 <HAL_RCC_ClockConfig+0x368>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4618      	mov	r0, r3
 800982c:	f7fc f912 	bl	8005a54 <HAL_InitTick>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	58024400 	.word	0x58024400
 8009844:	0800f504 	.word	0x0800f504
 8009848:	24000004 	.word	0x24000004
 800984c:	24000000 	.word	0x24000000
 8009850:	24000008 	.word	0x24000008

08009854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009854:	b480      	push	{r7}
 8009856:	b089      	sub	sp, #36	; 0x24
 8009858:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800985a:	4bb3      	ldr	r3, [pc, #716]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009862:	2b18      	cmp	r3, #24
 8009864:	f200 8155 	bhi.w	8009b12 <HAL_RCC_GetSysClockFreq+0x2be>
 8009868:	a201      	add	r2, pc, #4	; (adr r2, 8009870 <HAL_RCC_GetSysClockFreq+0x1c>)
 800986a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986e:	bf00      	nop
 8009870:	080098d5 	.word	0x080098d5
 8009874:	08009b13 	.word	0x08009b13
 8009878:	08009b13 	.word	0x08009b13
 800987c:	08009b13 	.word	0x08009b13
 8009880:	08009b13 	.word	0x08009b13
 8009884:	08009b13 	.word	0x08009b13
 8009888:	08009b13 	.word	0x08009b13
 800988c:	08009b13 	.word	0x08009b13
 8009890:	080098fb 	.word	0x080098fb
 8009894:	08009b13 	.word	0x08009b13
 8009898:	08009b13 	.word	0x08009b13
 800989c:	08009b13 	.word	0x08009b13
 80098a0:	08009b13 	.word	0x08009b13
 80098a4:	08009b13 	.word	0x08009b13
 80098a8:	08009b13 	.word	0x08009b13
 80098ac:	08009b13 	.word	0x08009b13
 80098b0:	08009901 	.word	0x08009901
 80098b4:	08009b13 	.word	0x08009b13
 80098b8:	08009b13 	.word	0x08009b13
 80098bc:	08009b13 	.word	0x08009b13
 80098c0:	08009b13 	.word	0x08009b13
 80098c4:	08009b13 	.word	0x08009b13
 80098c8:	08009b13 	.word	0x08009b13
 80098cc:	08009b13 	.word	0x08009b13
 80098d0:	08009907 	.word	0x08009907
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098d4:	4b94      	ldr	r3, [pc, #592]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0320 	and.w	r3, r3, #32
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d009      	beq.n	80098f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098e0:	4b91      	ldr	r3, [pc, #580]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	08db      	lsrs	r3, r3, #3
 80098e6:	f003 0303 	and.w	r3, r3, #3
 80098ea:	4a90      	ldr	r2, [pc, #576]	; (8009b2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098ec:	fa22 f303 	lsr.w	r3, r2, r3
 80098f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80098f2:	e111      	b.n	8009b18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80098f4:	4b8d      	ldr	r3, [pc, #564]	; (8009b2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098f6:	61bb      	str	r3, [r7, #24]
    break;
 80098f8:	e10e      	b.n	8009b18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80098fa:	4b8d      	ldr	r3, [pc, #564]	; (8009b30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80098fc:	61bb      	str	r3, [r7, #24]
    break;
 80098fe:	e10b      	b.n	8009b18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009900:	4b8c      	ldr	r3, [pc, #560]	; (8009b34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009902:	61bb      	str	r3, [r7, #24]
    break;
 8009904:	e108      	b.n	8009b18 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009906:	4b88      	ldr	r3, [pc, #544]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990a:	f003 0303 	and.w	r3, r3, #3
 800990e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009910:	4b85      	ldr	r3, [pc, #532]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009914:	091b      	lsrs	r3, r3, #4
 8009916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800991a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800991c:	4b82      	ldr	r3, [pc, #520]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800991e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009920:	f003 0301 	and.w	r3, r3, #1
 8009924:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009926:	4b80      	ldr	r3, [pc, #512]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800992a:	08db      	lsrs	r3, r3, #3
 800992c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	fb02 f303 	mul.w	r3, r2, r3
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 80e1 	beq.w	8009b0c <HAL_RCC_GetSysClockFreq+0x2b8>
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	2b02      	cmp	r3, #2
 800994e:	f000 8083 	beq.w	8009a58 <HAL_RCC_GetSysClockFreq+0x204>
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2b02      	cmp	r3, #2
 8009956:	f200 80a1 	bhi.w	8009a9c <HAL_RCC_GetSysClockFreq+0x248>
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <HAL_RCC_GetSysClockFreq+0x114>
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d056      	beq.n	8009a14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009966:	e099      	b.n	8009a9c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009968:	4b6f      	ldr	r3, [pc, #444]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0320 	and.w	r3, r3, #32
 8009970:	2b00      	cmp	r3, #0
 8009972:	d02d      	beq.n	80099d0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009974:	4b6c      	ldr	r3, [pc, #432]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	08db      	lsrs	r3, r3, #3
 800997a:	f003 0303 	and.w	r3, r3, #3
 800997e:	4a6b      	ldr	r2, [pc, #428]	; (8009b2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009980:	fa22 f303 	lsr.w	r3, r2, r3
 8009984:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	ee07 3a90 	vmov	s15, r3
 800998c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800999e:	4b62      	ldr	r3, [pc, #392]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a6:	ee07 3a90 	vmov	s15, r3
 80099aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80099b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80099ce:	e087      	b.n	8009ae0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	ee07 3a90 	vmov	s15, r3
 80099d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099da:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009b3c <HAL_RCC_GetSysClockFreq+0x2e8>
 80099de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099e2:	4b51      	ldr	r3, [pc, #324]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ea:	ee07 3a90 	vmov	s15, r3
 80099ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80099f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a12:	e065      	b.n	8009ae0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	ee07 3a90 	vmov	s15, r3
 8009a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a1e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009b40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a26:	4b40      	ldr	r3, [pc, #256]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a2e:	ee07 3a90 	vmov	s15, r3
 8009a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a3a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a56:	e043      	b.n	8009ae0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	ee07 3a90 	vmov	s15, r3
 8009a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a62:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009b44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a6a:	4b2f      	ldr	r3, [pc, #188]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a72:	ee07 3a90 	vmov	s15, r3
 8009a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a7e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a9a:	e021      	b.n	8009ae0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	ee07 3a90 	vmov	s15, r3
 8009aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009b40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aae:	4b1e      	ldr	r3, [pc, #120]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab6:	ee07 3a90 	vmov	s15, r3
 8009aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ac2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ade:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009ae0:	4b11      	ldr	r3, [pc, #68]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae4:	0a5b      	lsrs	r3, r3, #9
 8009ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aea:	3301      	adds	r3, #1
 8009aec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	ee07 3a90 	vmov	s15, r3
 8009af4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009af8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b04:	ee17 3a90 	vmov	r3, s15
 8009b08:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009b0a:	e005      	b.n	8009b18 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	61bb      	str	r3, [r7, #24]
    break;
 8009b10:	e002      	b.n	8009b18 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009b12:	4b07      	ldr	r3, [pc, #28]	; (8009b30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b14:	61bb      	str	r3, [r7, #24]
    break;
 8009b16:	bf00      	nop
  }

  return sysclockfreq;
 8009b18:	69bb      	ldr	r3, [r7, #24]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3724      	adds	r7, #36	; 0x24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	58024400 	.word	0x58024400
 8009b2c:	03d09000 	.word	0x03d09000
 8009b30:	003d0900 	.word	0x003d0900
 8009b34:	007a1200 	.word	0x007a1200
 8009b38:	46000000 	.word	0x46000000
 8009b3c:	4c742400 	.word	0x4c742400
 8009b40:	4a742400 	.word	0x4a742400
 8009b44:	4af42400 	.word	0x4af42400

08009b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b4e:	f7ff fe81 	bl	8009854 <HAL_RCC_GetSysClockFreq>
 8009b52:	4602      	mov	r2, r0
 8009b54:	4b10      	ldr	r3, [pc, #64]	; (8009b98 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	0a1b      	lsrs	r3, r3, #8
 8009b5a:	f003 030f 	and.w	r3, r3, #15
 8009b5e:	490f      	ldr	r1, [pc, #60]	; (8009b9c <HAL_RCC_GetHCLKFreq+0x54>)
 8009b60:	5ccb      	ldrb	r3, [r1, r3]
 8009b62:	f003 031f 	and.w	r3, r3, #31
 8009b66:	fa22 f303 	lsr.w	r3, r2, r3
 8009b6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b6c:	4b0a      	ldr	r3, [pc, #40]	; (8009b98 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	f003 030f 	and.w	r3, r3, #15
 8009b74:	4a09      	ldr	r2, [pc, #36]	; (8009b9c <HAL_RCC_GetHCLKFreq+0x54>)
 8009b76:	5cd3      	ldrb	r3, [r2, r3]
 8009b78:	f003 031f 	and.w	r3, r3, #31
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b82:	4a07      	ldr	r2, [pc, #28]	; (8009ba0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b86:	4a07      	ldr	r2, [pc, #28]	; (8009ba4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009b8c:	4b04      	ldr	r3, [pc, #16]	; (8009ba0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	58024400 	.word	0x58024400
 8009b9c:	0800f504 	.word	0x0800f504
 8009ba0:	24000004 	.word	0x24000004
 8009ba4:	24000000 	.word	0x24000000

08009ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009bac:	f7ff ffcc 	bl	8009b48 <HAL_RCC_GetHCLKFreq>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	4b06      	ldr	r3, [pc, #24]	; (8009bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	091b      	lsrs	r3, r3, #4
 8009bb8:	f003 0307 	and.w	r3, r3, #7
 8009bbc:	4904      	ldr	r1, [pc, #16]	; (8009bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009bbe:	5ccb      	ldrb	r3, [r1, r3]
 8009bc0:	f003 031f 	and.w	r3, r3, #31
 8009bc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	58024400 	.word	0x58024400
 8009bd0:	0800f504 	.word	0x0800f504

08009bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009bd8:	f7ff ffb6 	bl	8009b48 <HAL_RCC_GetHCLKFreq>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009be0:	69db      	ldr	r3, [r3, #28]
 8009be2:	0a1b      	lsrs	r3, r3, #8
 8009be4:	f003 0307 	and.w	r3, r3, #7
 8009be8:	4904      	ldr	r1, [pc, #16]	; (8009bfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8009bea:	5ccb      	ldrb	r3, [r1, r3]
 8009bec:	f003 031f 	and.w	r3, r3, #31
 8009bf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	58024400 	.word	0x58024400
 8009bfc:	0800f504 	.word	0x0800f504

08009c00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009c08:	2300      	movs	r3, #0
 8009c0a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d03f      	beq.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c24:	d02a      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009c26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c2a:	d824      	bhi.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c30:	d018      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c36:	d81e      	bhi.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c40:	d007      	beq.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009c42:	e018      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c44:	4ba4      	ldr	r3, [pc, #656]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c48:	4aa3      	ldr	r2, [pc, #652]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009c50:	e015      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	3304      	adds	r3, #4
 8009c56:	2102      	movs	r1, #2
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f001 f989 	bl	800af70 <RCCEx_PLL2_Config>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009c62:	e00c      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3324      	adds	r3, #36	; 0x24
 8009c68:	2102      	movs	r1, #2
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f001 fa32 	bl	800b0d4 <RCCEx_PLL3_Config>
 8009c70:	4603      	mov	r3, r0
 8009c72:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009c74:	e003      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	75fb      	strb	r3, [r7, #23]
      break;
 8009c7a:	e000      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d109      	bne.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009c84:	4b94      	ldr	r3, [pc, #592]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c90:	4991      	ldr	r1, [pc, #580]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	650b      	str	r3, [r1, #80]	; 0x50
 8009c96:	e001      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c98:	7dfb      	ldrb	r3, [r7, #23]
 8009c9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d03d      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	d826      	bhi.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009cb0:	a201      	add	r2, pc, #4	; (adr r2, 8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb6:	bf00      	nop
 8009cb8:	08009ccd 	.word	0x08009ccd
 8009cbc:	08009cdb 	.word	0x08009cdb
 8009cc0:	08009ced 	.word	0x08009ced
 8009cc4:	08009d05 	.word	0x08009d05
 8009cc8:	08009d05 	.word	0x08009d05
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ccc:	4b82      	ldr	r3, [pc, #520]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd0:	4a81      	ldr	r2, [pc, #516]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cd8:	e015      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	3304      	adds	r3, #4
 8009cde:	2100      	movs	r1, #0
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f001 f945 	bl	800af70 <RCCEx_PLL2_Config>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cea:	e00c      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	3324      	adds	r3, #36	; 0x24
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f001 f9ee 	bl	800b0d4 <RCCEx_PLL3_Config>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cfc:	e003      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	75fb      	strb	r3, [r7, #23]
      break;
 8009d02:	e000      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d109      	bne.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d0c:	4b72      	ldr	r3, [pc, #456]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d10:	f023 0207 	bic.w	r2, r3, #7
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d18:	496f      	ldr	r1, [pc, #444]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	650b      	str	r3, [r1, #80]	; 0x50
 8009d1e:	e001      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
 8009d22:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d051      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d36:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009d3a:	d036      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009d3c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009d40:	d830      	bhi.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d46:	d032      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009d48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d4c:	d82a      	bhi.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d52:	d02e      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009d54:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d58:	d824      	bhi.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d5e:	d018      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d64:	d81e      	bhi.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d003      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009d6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d6e:	d007      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009d70:	e018      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d72:	4b59      	ldr	r3, [pc, #356]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d76:	4a58      	ldr	r2, [pc, #352]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d7e:	e019      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	3304      	adds	r3, #4
 8009d84:	2100      	movs	r1, #0
 8009d86:	4618      	mov	r0, r3
 8009d88:	f001 f8f2 	bl	800af70 <RCCEx_PLL2_Config>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009d90:	e010      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	3324      	adds	r3, #36	; 0x24
 8009d96:	2100      	movs	r1, #0
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f001 f99b 	bl	800b0d4 <RCCEx_PLL3_Config>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009da2:	e007      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	75fb      	strb	r3, [r7, #23]
      break;
 8009da8:	e004      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009daa:	bf00      	nop
 8009dac:	e002      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009dae:	bf00      	nop
 8009db0:	e000      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009db4:	7dfb      	ldrb	r3, [r7, #23]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10a      	bne.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009dba:	4b47      	ldr	r3, [pc, #284]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dbe:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009dc8:	4943      	ldr	r1, [pc, #268]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	658b      	str	r3, [r1, #88]	; 0x58
 8009dce:	e001      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
 8009dd2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d051      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009de6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009dea:	d036      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009dec:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009df0:	d830      	bhi.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009df2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009df6:	d032      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009df8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009dfc:	d82a      	bhi.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009dfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e02:	d02e      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009e04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e08:	d824      	bhi.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e0e:	d018      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e14:	d81e      	bhi.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009e1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e1e:	d007      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009e20:	e018      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e22:	4b2d      	ldr	r3, [pc, #180]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e26:	4a2c      	ldr	r2, [pc, #176]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e2e:	e019      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	3304      	adds	r3, #4
 8009e34:	2100      	movs	r1, #0
 8009e36:	4618      	mov	r0, r3
 8009e38:	f001 f89a 	bl	800af70 <RCCEx_PLL2_Config>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009e40:	e010      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	3324      	adds	r3, #36	; 0x24
 8009e46:	2100      	movs	r1, #0
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f001 f943 	bl	800b0d4 <RCCEx_PLL3_Config>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e52:	e007      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	75fb      	strb	r3, [r7, #23]
      break;
 8009e58:	e004      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009e5a:	bf00      	nop
 8009e5c:	e002      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009e5e:	bf00      	nop
 8009e60:	e000      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e64:	7dfb      	ldrb	r3, [r7, #23]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10a      	bne.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009e6a:	4b1b      	ldr	r3, [pc, #108]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e6e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e78:	4917      	ldr	r1, [pc, #92]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	658b      	str	r3, [r1, #88]	; 0x58
 8009e7e:	e001      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e80:	7dfb      	ldrb	r3, [r7, #23]
 8009e82:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d035      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e94:	2b30      	cmp	r3, #48	; 0x30
 8009e96:	d01c      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009e98:	2b30      	cmp	r3, #48	; 0x30
 8009e9a:	d817      	bhi.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009e9c:	2b20      	cmp	r3, #32
 8009e9e:	d00c      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009ea0:	2b20      	cmp	r3, #32
 8009ea2:	d813      	bhi.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d019      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009ea8:	2b10      	cmp	r3, #16
 8009eaa:	d10f      	bne.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eac:	4b0a      	ldr	r3, [pc, #40]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb0:	4a09      	ldr	r2, [pc, #36]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009eb8:	e011      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	2102      	movs	r1, #2
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f001 f855 	bl	800af70 <RCCEx_PLL2_Config>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009eca:	e008      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	75fb      	strb	r3, [r7, #23]
      break;
 8009ed0:	e005      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009ed2:	bf00      	nop
 8009ed4:	e003      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009ed6:	bf00      	nop
 8009ed8:	58024400 	.word	0x58024400
      break;
 8009edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ede:	7dfb      	ldrb	r3, [r7, #23]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d109      	bne.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009ee4:	4ba3      	ldr	r3, [pc, #652]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ee8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ef0:	49a0      	ldr	r1, [pc, #640]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009ef6:	e001      	b.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ef8:	7dfb      	ldrb	r3, [r7, #23]
 8009efa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d047      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f10:	d030      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009f12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f16:	d82a      	bhi.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f1c:	d02c      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009f1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f22:	d824      	bhi.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f28:	d018      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f2e:	d81e      	bhi.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d003      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f38:	d007      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009f3a:	e018      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f3c:	4b8d      	ldr	r3, [pc, #564]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f40:	4a8c      	ldr	r2, [pc, #560]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009f48:	e017      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	2100      	movs	r1, #0
 8009f50:	4618      	mov	r0, r3
 8009f52:	f001 f80d 	bl	800af70 <RCCEx_PLL2_Config>
 8009f56:	4603      	mov	r3, r0
 8009f58:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009f5a:	e00e      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3324      	adds	r3, #36	; 0x24
 8009f60:	2100      	movs	r1, #0
 8009f62:	4618      	mov	r0, r3
 8009f64:	f001 f8b6 	bl	800b0d4 <RCCEx_PLL3_Config>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009f6c:	e005      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	75fb      	strb	r3, [r7, #23]
      break;
 8009f72:	e002      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009f74:	bf00      	nop
 8009f76:	e000      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d109      	bne.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009f80:	4b7c      	ldr	r3, [pc, #496]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f84:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f8c:	4979      	ldr	r1, [pc, #484]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	650b      	str	r3, [r1, #80]	; 0x50
 8009f92:	e001      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f94:	7dfb      	ldrb	r3, [r7, #23]
 8009f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d049      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fac:	d02e      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009fae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fb2:	d828      	bhi.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009fb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fb8:	d02a      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009fba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fbe:	d822      	bhi.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009fc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009fc4:	d026      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009fc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009fca:	d81c      	bhi.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fd0:	d010      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009fd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fd6:	d816      	bhi.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d01d      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fe0:	d111      	bne.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f000 ffc1 	bl	800af70 <RCCEx_PLL2_Config>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009ff2:	e012      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3324      	adds	r3, #36	; 0x24
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f001 f86a 	bl	800b0d4 <RCCEx_PLL3_Config>
 800a000:	4603      	mov	r3, r0
 800a002:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a004:	e009      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	75fb      	strb	r3, [r7, #23]
      break;
 800a00a:	e006      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a00c:	bf00      	nop
 800a00e:	e004      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a010:	bf00      	nop
 800a012:	e002      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a014:	bf00      	nop
 800a016:	e000      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d109      	bne.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a020:	4b54      	ldr	r3, [pc, #336]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a024:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a02c:	4951      	ldr	r1, [pc, #324]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a02e:	4313      	orrs	r3, r2
 800a030:	650b      	str	r3, [r1, #80]	; 0x50
 800a032:	e001      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a034:	7dfb      	ldrb	r3, [r7, #23]
 800a036:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d04b      	beq.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a04a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a04e:	d02e      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a054:	d828      	bhi.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a05a:	d02a      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a05c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a060:	d822      	bhi.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a062:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a066:	d026      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a068:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a06c:	d81c      	bhi.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a06e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a072:	d010      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a078:	d816      	bhi.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d01d      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a07e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a082:	d111      	bne.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3304      	adds	r3, #4
 800a088:	2101      	movs	r1, #1
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 ff70 	bl	800af70 <RCCEx_PLL2_Config>
 800a090:	4603      	mov	r3, r0
 800a092:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a094:	e012      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3324      	adds	r3, #36	; 0x24
 800a09a:	2101      	movs	r1, #1
 800a09c:	4618      	mov	r0, r3
 800a09e:	f001 f819 	bl	800b0d4 <RCCEx_PLL3_Config>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a0a6:	e009      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ac:	e006      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0ae:	bf00      	nop
 800a0b0:	e004      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0b2:	bf00      	nop
 800a0b4:	e002      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0b6:	bf00      	nop
 800a0b8:	e000      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10a      	bne.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a0c2:	4b2c      	ldr	r3, [pc, #176]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a0d0:	4928      	ldr	r1, [pc, #160]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	658b      	str	r3, [r1, #88]	; 0x58
 800a0d6:	e001      	b.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
 800a0da:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d02f      	beq.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0f0:	d00e      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a0f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0f6:	d814      	bhi.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d015      	beq.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a0fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a100:	d10f      	bne.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a102:	4b1c      	ldr	r3, [pc, #112]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a106:	4a1b      	ldr	r2, [pc, #108]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a10c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a10e:	e00c      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3304      	adds	r3, #4
 800a114:	2101      	movs	r1, #1
 800a116:	4618      	mov	r0, r3
 800a118:	f000 ff2a 	bl	800af70 <RCCEx_PLL2_Config>
 800a11c:	4603      	mov	r3, r0
 800a11e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a120:	e003      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	75fb      	strb	r3, [r7, #23]
      break;
 800a126:	e000      	b.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a12a:	7dfb      	ldrb	r3, [r7, #23]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d109      	bne.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a130:	4b10      	ldr	r3, [pc, #64]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a134:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a13c:	490d      	ldr	r1, [pc, #52]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	650b      	str	r3, [r1, #80]	; 0x50
 800a142:	e001      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a144:	7dfb      	ldrb	r3, [r7, #23]
 800a146:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a150:	2b00      	cmp	r3, #0
 800a152:	d034      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d81d      	bhi.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a15c:	a201      	add	r2, pc, #4	; (adr r2, 800a164 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a162:	bf00      	nop
 800a164:	0800a19f 	.word	0x0800a19f
 800a168:	0800a179 	.word	0x0800a179
 800a16c:	0800a187 	.word	0x0800a187
 800a170:	0800a19f 	.word	0x0800a19f
 800a174:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a178:	4bb1      	ldr	r3, [pc, #708]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	4ab0      	ldr	r2, [pc, #704]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a17e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a182:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a184:	e00c      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	3304      	adds	r3, #4
 800a18a:	2102      	movs	r1, #2
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 feef 	bl	800af70 <RCCEx_PLL2_Config>
 800a192:	4603      	mov	r3, r0
 800a194:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a196:	e003      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	75fb      	strb	r3, [r7, #23]
      break;
 800a19c:	e000      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a19e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1a0:	7dfb      	ldrb	r3, [r7, #23]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d109      	bne.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a1a6:	4ba6      	ldr	r3, [pc, #664]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1aa:	f023 0203 	bic.w	r2, r3, #3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b2:	49a3      	ldr	r1, [pc, #652]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a1b8:	e001      	b.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f000 8086 	beq.w	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1cc:	4b9d      	ldr	r3, [pc, #628]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a9c      	ldr	r2, [pc, #624]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a1d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a1d8:	f7fb fc86 	bl	8005ae8 <HAL_GetTick>
 800a1dc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1de:	e009      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1e0:	f7fb fc82 	bl	8005ae8 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	2b64      	cmp	r3, #100	; 0x64
 800a1ec:	d902      	bls.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	75fb      	strb	r3, [r7, #23]
        break;
 800a1f2:	e005      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1f4:	4b93      	ldr	r3, [pc, #588]	; (800a444 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d0ef      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a200:	7dfb      	ldrb	r3, [r7, #23]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d166      	bne.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a206:	4b8e      	ldr	r3, [pc, #568]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a208:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a210:	4053      	eors	r3, r2
 800a212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a216:	2b00      	cmp	r3, #0
 800a218:	d013      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a21a:	4b89      	ldr	r3, [pc, #548]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a21e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a222:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a224:	4b86      	ldr	r3, [pc, #536]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a228:	4a85      	ldr	r2, [pc, #532]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a22a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a22e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a230:	4b83      	ldr	r3, [pc, #524]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a234:	4a82      	ldr	r2, [pc, #520]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a23a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a23c:	4a80      	ldr	r2, [pc, #512]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a24c:	d115      	bne.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a24e:	f7fb fc4b 	bl	8005ae8 <HAL_GetTick>
 800a252:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a254:	e00b      	b.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a256:	f7fb fc47 	bl	8005ae8 <HAL_GetTick>
 800a25a:	4602      	mov	r2, r0
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	f241 3288 	movw	r2, #5000	; 0x1388
 800a264:	4293      	cmp	r3, r2
 800a266:	d902      	bls.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a268:	2303      	movs	r3, #3
 800a26a:	75fb      	strb	r3, [r7, #23]
            break;
 800a26c:	e005      	b.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a26e:	4b74      	ldr	r3, [pc, #464]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a272:	f003 0302 	and.w	r3, r3, #2
 800a276:	2b00      	cmp	r3, #0
 800a278:	d0ed      	beq.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a27a:	7dfb      	ldrb	r3, [r7, #23]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d126      	bne.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a28a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a28e:	d10d      	bne.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a290:	4b6b      	ldr	r3, [pc, #428]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a29e:	0919      	lsrs	r1, r3, #4
 800a2a0:	4b69      	ldr	r3, [pc, #420]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a2a2:	400b      	ands	r3, r1
 800a2a4:	4966      	ldr	r1, [pc, #408]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	610b      	str	r3, [r1, #16]
 800a2aa:	e005      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a2ac:	4b64      	ldr	r3, [pc, #400]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	4a63      	ldr	r2, [pc, #396]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a2b6:	6113      	str	r3, [r2, #16]
 800a2b8:	4b61      	ldr	r3, [pc, #388]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2c6:	495e      	ldr	r1, [pc, #376]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	670b      	str	r3, [r1, #112]	; 0x70
 800a2cc:	e004      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a2ce:	7dfb      	ldrb	r3, [r7, #23]
 800a2d0:	75bb      	strb	r3, [r7, #22]
 800a2d2:	e001      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d4:	7dfb      	ldrb	r3, [r7, #23]
 800a2d6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0301 	and.w	r3, r3, #1
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d07e      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2e8:	2b28      	cmp	r3, #40	; 0x28
 800a2ea:	d867      	bhi.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a2ec:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f2:	bf00      	nop
 800a2f4:	0800a3c3 	.word	0x0800a3c3
 800a2f8:	0800a3bd 	.word	0x0800a3bd
 800a2fc:	0800a3bd 	.word	0x0800a3bd
 800a300:	0800a3bd 	.word	0x0800a3bd
 800a304:	0800a3bd 	.word	0x0800a3bd
 800a308:	0800a3bd 	.word	0x0800a3bd
 800a30c:	0800a3bd 	.word	0x0800a3bd
 800a310:	0800a3bd 	.word	0x0800a3bd
 800a314:	0800a399 	.word	0x0800a399
 800a318:	0800a3bd 	.word	0x0800a3bd
 800a31c:	0800a3bd 	.word	0x0800a3bd
 800a320:	0800a3bd 	.word	0x0800a3bd
 800a324:	0800a3bd 	.word	0x0800a3bd
 800a328:	0800a3bd 	.word	0x0800a3bd
 800a32c:	0800a3bd 	.word	0x0800a3bd
 800a330:	0800a3bd 	.word	0x0800a3bd
 800a334:	0800a3ab 	.word	0x0800a3ab
 800a338:	0800a3bd 	.word	0x0800a3bd
 800a33c:	0800a3bd 	.word	0x0800a3bd
 800a340:	0800a3bd 	.word	0x0800a3bd
 800a344:	0800a3bd 	.word	0x0800a3bd
 800a348:	0800a3bd 	.word	0x0800a3bd
 800a34c:	0800a3bd 	.word	0x0800a3bd
 800a350:	0800a3bd 	.word	0x0800a3bd
 800a354:	0800a3c3 	.word	0x0800a3c3
 800a358:	0800a3bd 	.word	0x0800a3bd
 800a35c:	0800a3bd 	.word	0x0800a3bd
 800a360:	0800a3bd 	.word	0x0800a3bd
 800a364:	0800a3bd 	.word	0x0800a3bd
 800a368:	0800a3bd 	.word	0x0800a3bd
 800a36c:	0800a3bd 	.word	0x0800a3bd
 800a370:	0800a3bd 	.word	0x0800a3bd
 800a374:	0800a3c3 	.word	0x0800a3c3
 800a378:	0800a3bd 	.word	0x0800a3bd
 800a37c:	0800a3bd 	.word	0x0800a3bd
 800a380:	0800a3bd 	.word	0x0800a3bd
 800a384:	0800a3bd 	.word	0x0800a3bd
 800a388:	0800a3bd 	.word	0x0800a3bd
 800a38c:	0800a3bd 	.word	0x0800a3bd
 800a390:	0800a3bd 	.word	0x0800a3bd
 800a394:	0800a3c3 	.word	0x0800a3c3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	3304      	adds	r3, #4
 800a39c:	2101      	movs	r1, #1
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f000 fde6 	bl	800af70 <RCCEx_PLL2_Config>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a3a8:	e00c      	b.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	3324      	adds	r3, #36	; 0x24
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 fe8f 	bl	800b0d4 <RCCEx_PLL3_Config>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a3ba:	e003      	b.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	75fb      	strb	r3, [r7, #23]
      break;
 800a3c0:	e000      	b.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a3c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3c4:	7dfb      	ldrb	r3, [r7, #23]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d109      	bne.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a3ca:	4b1d      	ldr	r3, [pc, #116]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3d6:	491a      	ldr	r1, [pc, #104]	; (800a440 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	654b      	str	r3, [r1, #84]	; 0x54
 800a3dc:	e001      	b.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 0302 	and.w	r3, r3, #2
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d03e      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f2:	2b05      	cmp	r3, #5
 800a3f4:	d820      	bhi.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a3f6:	a201      	add	r2, pc, #4	; (adr r2, 800a3fc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fc:	0800a44d 	.word	0x0800a44d
 800a400:	0800a415 	.word	0x0800a415
 800a404:	0800a427 	.word	0x0800a427
 800a408:	0800a44d 	.word	0x0800a44d
 800a40c:	0800a44d 	.word	0x0800a44d
 800a410:	0800a44d 	.word	0x0800a44d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	3304      	adds	r3, #4
 800a418:	2101      	movs	r1, #1
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 fda8 	bl	800af70 <RCCEx_PLL2_Config>
 800a420:	4603      	mov	r3, r0
 800a422:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a424:	e013      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	3324      	adds	r3, #36	; 0x24
 800a42a:	2101      	movs	r1, #1
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 fe51 	bl	800b0d4 <RCCEx_PLL3_Config>
 800a432:	4603      	mov	r3, r0
 800a434:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a436:	e00a      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	75fb      	strb	r3, [r7, #23]
      break;
 800a43c:	e007      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a43e:	bf00      	nop
 800a440:	58024400 	.word	0x58024400
 800a444:	58024800 	.word	0x58024800
 800a448:	00ffffcf 	.word	0x00ffffcf
      break;
 800a44c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a44e:	7dfb      	ldrb	r3, [r7, #23]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d109      	bne.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a454:	4b9f      	ldr	r3, [pc, #636]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a458:	f023 0207 	bic.w	r2, r3, #7
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a460:	499c      	ldr	r1, [pc, #624]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a462:	4313      	orrs	r3, r2
 800a464:	654b      	str	r3, [r1, #84]	; 0x54
 800a466:	e001      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 0304 	and.w	r3, r3, #4
 800a474:	2b00      	cmp	r3, #0
 800a476:	d039      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a47e:	2b05      	cmp	r3, #5
 800a480:	d820      	bhi.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a482:	a201      	add	r2, pc, #4	; (adr r2, 800a488 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a488:	0800a4cb 	.word	0x0800a4cb
 800a48c:	0800a4a1 	.word	0x0800a4a1
 800a490:	0800a4b3 	.word	0x0800a4b3
 800a494:	0800a4cb 	.word	0x0800a4cb
 800a498:	0800a4cb 	.word	0x0800a4cb
 800a49c:	0800a4cb 	.word	0x0800a4cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	2101      	movs	r1, #1
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 fd62 	bl	800af70 <RCCEx_PLL2_Config>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a4b0:	e00c      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3324      	adds	r3, #36	; 0x24
 800a4b6:	2101      	movs	r1, #1
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f000 fe0b 	bl	800b0d4 <RCCEx_PLL3_Config>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a4c2:	e003      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a4c8:	e000      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a4ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10a      	bne.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a4d2:	4b80      	ldr	r3, [pc, #512]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a4d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4d6:	f023 0207 	bic.w	r2, r3, #7
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4e0:	497c      	ldr	r1, [pc, #496]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	658b      	str	r3, [r1, #88]	; 0x58
 800a4e6:	e001      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0320 	and.w	r3, r3, #32
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d04b      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a502:	d02e      	beq.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a508:	d828      	bhi.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a50a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a50e:	d02a      	beq.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a514:	d822      	bhi.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a516:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a51a:	d026      	beq.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a51c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a520:	d81c      	bhi.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a526:	d010      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a52c:	d816      	bhi.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d01d      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a536:	d111      	bne.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	3304      	adds	r3, #4
 800a53c:	2100      	movs	r1, #0
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 fd16 	bl	800af70 <RCCEx_PLL2_Config>
 800a544:	4603      	mov	r3, r0
 800a546:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a548:	e012      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	3324      	adds	r3, #36	; 0x24
 800a54e:	2102      	movs	r1, #2
 800a550:	4618      	mov	r0, r3
 800a552:	f000 fdbf 	bl	800b0d4 <RCCEx_PLL3_Config>
 800a556:	4603      	mov	r3, r0
 800a558:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a55a:	e009      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	75fb      	strb	r3, [r7, #23]
      break;
 800a560:	e006      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a562:	bf00      	nop
 800a564:	e004      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a566:	bf00      	nop
 800a568:	e002      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a56a:	bf00      	nop
 800a56c:	e000      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a56e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a570:	7dfb      	ldrb	r3, [r7, #23]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d10a      	bne.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a576:	4b57      	ldr	r3, [pc, #348]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a57a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a584:	4953      	ldr	r1, [pc, #332]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a586:	4313      	orrs	r3, r2
 800a588:	654b      	str	r3, [r1, #84]	; 0x54
 800a58a:	e001      	b.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a58c:	7dfb      	ldrb	r3, [r7, #23]
 800a58e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d04b      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a5a6:	d02e      	beq.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a5a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a5ac:	d828      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a5ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5b2:	d02a      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a5b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5b8:	d822      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a5ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5be:	d026      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a5c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5c4:	d81c      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a5c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5ca:	d010      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a5cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5d0:	d816      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d01d      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a5d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5da:	d111      	bne.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3304      	adds	r3, #4
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 fcc4 	bl	800af70 <RCCEx_PLL2_Config>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a5ec:	e012      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3324      	adds	r3, #36	; 0x24
 800a5f2:	2102      	movs	r1, #2
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f000 fd6d 	bl	800b0d4 <RCCEx_PLL3_Config>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a5fe:	e009      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	75fb      	strb	r3, [r7, #23]
      break;
 800a604:	e006      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a606:	bf00      	nop
 800a608:	e004      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a60a:	bf00      	nop
 800a60c:	e002      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a60e:	bf00      	nop
 800a610:	e000      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a612:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10a      	bne.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a61a:	4b2e      	ldr	r3, [pc, #184]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a61e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a628:	492a      	ldr	r1, [pc, #168]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a62a:	4313      	orrs	r3, r2
 800a62c:	658b      	str	r3, [r1, #88]	; 0x58
 800a62e:	e001      	b.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a630:	7dfb      	ldrb	r3, [r7, #23]
 800a632:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d04d      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a646:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a64a:	d02e      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a64c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a650:	d828      	bhi.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a656:	d02a      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a65c:	d822      	bhi.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a65e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a662:	d026      	beq.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a664:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a668:	d81c      	bhi.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a66a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a66e:	d010      	beq.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a674:	d816      	bhi.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a676:	2b00      	cmp	r3, #0
 800a678:	d01d      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a67a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a67e:	d111      	bne.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	3304      	adds	r3, #4
 800a684:	2100      	movs	r1, #0
 800a686:	4618      	mov	r0, r3
 800a688:	f000 fc72 	bl	800af70 <RCCEx_PLL2_Config>
 800a68c:	4603      	mov	r3, r0
 800a68e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a690:	e012      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	3324      	adds	r3, #36	; 0x24
 800a696:	2102      	movs	r1, #2
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 fd1b 	bl	800b0d4 <RCCEx_PLL3_Config>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a6a2:	e009      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a6a8:	e006      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6aa:	bf00      	nop
 800a6ac:	e004      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6ae:	bf00      	nop
 800a6b0:	e002      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6b2:	bf00      	nop
 800a6b4:	e000      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6b8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10c      	bne.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a6be:	4b05      	ldr	r3, [pc, #20]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6cc:	4901      	ldr	r1, [pc, #4]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	658b      	str	r3, [r1, #88]	; 0x58
 800a6d2:	e003      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a6d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
 800a6da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 0308 	and.w	r3, r3, #8
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d018      	beq.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6f0:	d10a      	bne.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	3324      	adds	r3, #36	; 0x24
 800a6f6:	2102      	movs	r1, #2
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 fceb 	bl	800b0d4 <RCCEx_PLL3_Config>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a708:	4b8a      	ldr	r3, [pc, #552]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a70a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a70c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a714:	4987      	ldr	r1, [pc, #540]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a716:	4313      	orrs	r3, r2
 800a718:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0310 	and.w	r3, r3, #16
 800a722:	2b00      	cmp	r3, #0
 800a724:	d01a      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a72c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a730:	d10a      	bne.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	3324      	adds	r3, #36	; 0x24
 800a736:	2102      	movs	r1, #2
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 fccb 	bl	800b0d4 <RCCEx_PLL3_Config>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a748:	4b7a      	ldr	r3, [pc, #488]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a74a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a74c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a756:	4977      	ldr	r1, [pc, #476]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d034      	beq.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a76e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a772:	d01d      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a778:	d817      	bhi.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d003      	beq.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a77e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a782:	d009      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a784:	e011      	b.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	3304      	adds	r3, #4
 800a78a:	2100      	movs	r1, #0
 800a78c:	4618      	mov	r0, r3
 800a78e:	f000 fbef 	bl	800af70 <RCCEx_PLL2_Config>
 800a792:	4603      	mov	r3, r0
 800a794:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a796:	e00c      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3324      	adds	r3, #36	; 0x24
 800a79c:	2102      	movs	r1, #2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 fc98 	bl	800b0d4 <RCCEx_PLL3_Config>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a7a8:	e003      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a7ae:	e000      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a7b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7b2:	7dfb      	ldrb	r3, [r7, #23]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10a      	bne.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a7b8:	4b5e      	ldr	r3, [pc, #376]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7c6:	495b      	ldr	r1, [pc, #364]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	658b      	str	r3, [r1, #88]	; 0x58
 800a7cc:	e001      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
 800a7d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d033      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7e8:	d01c      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a7ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7ee:	d816      	bhi.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a7f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7f4:	d003      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a7f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7fa:	d007      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a7fc:	e00f      	b.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7fe:	4b4d      	ldr	r3, [pc, #308]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a802:	4a4c      	ldr	r2, [pc, #304]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a808:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a80a:	e00c      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	3324      	adds	r3, #36	; 0x24
 800a810:	2101      	movs	r1, #1
 800a812:	4618      	mov	r0, r3
 800a814:	f000 fc5e 	bl	800b0d4 <RCCEx_PLL3_Config>
 800a818:	4603      	mov	r3, r0
 800a81a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a81c:	e003      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	75fb      	strb	r3, [r7, #23]
      break;
 800a822:	e000      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a824:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a826:	7dfb      	ldrb	r3, [r7, #23]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10a      	bne.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a82c:	4b41      	ldr	r3, [pc, #260]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a82e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a830:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a83a:	493e      	ldr	r1, [pc, #248]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a83c:	4313      	orrs	r3, r2
 800a83e:	654b      	str	r3, [r1, #84]	; 0x54
 800a840:	e001      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a842:	7dfb      	ldrb	r3, [r7, #23]
 800a844:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d029      	beq.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a856:	2b00      	cmp	r3, #0
 800a858:	d003      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a85a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a85e:	d007      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a860:	e00f      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a862:	4b34      	ldr	r3, [pc, #208]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a866:	4a33      	ldr	r2, [pc, #204]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a86c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a86e:	e00b      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	3304      	adds	r3, #4
 800a874:	2102      	movs	r1, #2
 800a876:	4618      	mov	r0, r3
 800a878:	f000 fb7a 	bl	800af70 <RCCEx_PLL2_Config>
 800a87c:	4603      	mov	r3, r0
 800a87e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a880:	e002      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	75fb      	strb	r3, [r7, #23]
      break;
 800a886:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a888:	7dfb      	ldrb	r3, [r7, #23]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d109      	bne.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a88e:	4b29      	ldr	r3, [pc, #164]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a892:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a89a:	4926      	ldr	r1, [pc, #152]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a89c:	4313      	orrs	r3, r2
 800a89e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a8a0:	e001      	b.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a2:	7dfb      	ldrb	r3, [r7, #23]
 800a8a4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00a      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	3324      	adds	r3, #36	; 0x24
 800a8b6:	2102      	movs	r1, #2
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 fc0b 	bl	800b0d4 <RCCEx_PLL3_Config>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d033      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8dc:	d017      	beq.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a8de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8e2:	d811      	bhi.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a8e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8e8:	d013      	beq.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a8ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ee:	d80b      	bhi.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d010      	beq.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a8f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8f8:	d106      	bne.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8fa:	4b0e      	ldr	r3, [pc, #56]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fe:	4a0d      	ldr	r2, [pc, #52]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a904:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a906:	e007      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	75fb      	strb	r3, [r7, #23]
      break;
 800a90c:	e004      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a90e:	bf00      	nop
 800a910:	e002      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a912:	bf00      	nop
 800a914:	e000      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a916:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a918:	7dfb      	ldrb	r3, [r7, #23]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10c      	bne.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a91e:	4b05      	ldr	r3, [pc, #20]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a922:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a92a:	4902      	ldr	r1, [pc, #8]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a92c:	4313      	orrs	r3, r2
 800a92e:	654b      	str	r3, [r1, #84]	; 0x54
 800a930:	e004      	b.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a932:	bf00      	nop
 800a934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a938:	7dfb      	ldrb	r3, [r7, #23]
 800a93a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a944:	2b00      	cmp	r3, #0
 800a946:	d008      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a948:	4b29      	ldr	r3, [pc, #164]	; (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a94a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a94c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a954:	4926      	ldr	r1, [pc, #152]	; (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a956:	4313      	orrs	r3, r2
 800a958:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a962:	2b00      	cmp	r3, #0
 800a964:	d008      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a966:	4b22      	ldr	r3, [pc, #136]	; (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a96a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a972:	491f      	ldr	r1, [pc, #124]	; (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a974:	4313      	orrs	r3, r2
 800a976:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00d      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a984:	4b1a      	ldr	r3, [pc, #104]	; (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	4a19      	ldr	r2, [pc, #100]	; (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a98a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a98e:	6113      	str	r3, [r2, #16]
 800a990:	4b17      	ldr	r3, [pc, #92]	; (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a992:	691a      	ldr	r2, [r3, #16]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a99a:	4915      	ldr	r1, [pc, #84]	; (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a99c:	4313      	orrs	r3, r2
 800a99e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	da08      	bge.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a9a8:	4b11      	ldr	r3, [pc, #68]	; (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9b4:	490e      	ldr	r1, [pc, #56]	; (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d009      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a9c6:	4b0a      	ldr	r3, [pc, #40]	; (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9d4:	4906      	ldr	r1, [pc, #24]	; (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a9da:	7dbb      	ldrb	r3, [r7, #22]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	e000      	b.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	58024400 	.word	0x58024400

0800a9f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a9f8:	f7ff f8a6 	bl	8009b48 <HAL_RCC_GetHCLKFreq>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	4b06      	ldr	r3, [pc, #24]	; (800aa18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aa00:	6a1b      	ldr	r3, [r3, #32]
 800aa02:	091b      	lsrs	r3, r3, #4
 800aa04:	f003 0307 	and.w	r3, r3, #7
 800aa08:	4904      	ldr	r1, [pc, #16]	; (800aa1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aa0a:	5ccb      	ldrb	r3, [r1, r3]
 800aa0c:	f003 031f 	and.w	r3, r3, #31
 800aa10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	58024400 	.word	0x58024400
 800aa1c:	0800f504 	.word	0x0800f504

0800aa20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b089      	sub	sp, #36	; 0x24
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa28:	4ba1      	ldr	r3, [pc, #644]	; (800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2c:	f003 0303 	and.w	r3, r3, #3
 800aa30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800aa32:	4b9f      	ldr	r3, [pc, #636]	; (800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa36:	0b1b      	lsrs	r3, r3, #12
 800aa38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa3e:	4b9c      	ldr	r3, [pc, #624]	; (800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa42:	091b      	lsrs	r3, r3, #4
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800aa4a:	4b99      	ldr	r3, [pc, #612]	; (800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa4e:	08db      	lsrs	r3, r3, #3
 800aa50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	fb02 f303 	mul.w	r3, r2, r3
 800aa5a:	ee07 3a90 	vmov	s15, r3
 800aa5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f000 8111 	beq.w	800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	f000 8083 	beq.w	800ab7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	f200 80a1 	bhi.w	800abc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d003      	beq.n	800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d056      	beq.n	800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa8a:	e099      	b.n	800abc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa8c:	4b88      	ldr	r3, [pc, #544]	; (800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 0320 	and.w	r3, r3, #32
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d02d      	beq.n	800aaf4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa98:	4b85      	ldr	r3, [pc, #532]	; (800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	08db      	lsrs	r3, r3, #3
 800aa9e:	f003 0303 	and.w	r3, r3, #3
 800aaa2:	4a84      	ldr	r2, [pc, #528]	; (800acb4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aaa4:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	ee07 3a90 	vmov	s15, r3
 800aab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	ee07 3a90 	vmov	s15, r3
 800aaba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aabe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aac2:	4b7b      	ldr	r3, [pc, #492]	; (800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaca:	ee07 3a90 	vmov	s15, r3
 800aace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aad6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800acb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aaf2:	e087      	b.n	800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	ee07 3a90 	vmov	s15, r3
 800aafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aafe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800acbc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ab02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab06:	4b6a      	ldr	r3, [pc, #424]	; (800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800acb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab36:	e065      	b.n	800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	ee07 3a90 	vmov	s15, r3
 800ab3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab4a:	4b59      	ldr	r3, [pc, #356]	; (800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800acb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab7a:	e043      	b.n	800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab8e:	4b48      	ldr	r3, [pc, #288]	; (800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab96:	ee07 3a90 	vmov	s15, r3
 800ab9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aba2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800acb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abbe:	e021      	b.n	800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	ee07 3a90 	vmov	s15, r3
 800abc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800acc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abd2:	4b37      	ldr	r3, [pc, #220]	; (800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abda:	ee07 3a90 	vmov	s15, r3
 800abde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abe2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abe6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800acb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ac04:	4b2a      	ldr	r3, [pc, #168]	; (800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac08:	0a5b      	lsrs	r3, r3, #9
 800ac0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac0e:	ee07 3a90 	vmov	s15, r3
 800ac12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac2a:	ee17 2a90 	vmov	r2, s15
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ac32:	4b1f      	ldr	r3, [pc, #124]	; (800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac36:	0c1b      	lsrs	r3, r3, #16
 800ac38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac3c:	ee07 3a90 	vmov	s15, r3
 800ac40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac48:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac58:	ee17 2a90 	vmov	r2, s15
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ac60:	4b13      	ldr	r3, [pc, #76]	; (800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac64:	0e1b      	lsrs	r3, r3, #24
 800ac66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac6a:	ee07 3a90 	vmov	s15, r3
 800ac6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac86:	ee17 2a90 	vmov	r2, s15
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac8e:	e008      	b.n	800aca2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	609a      	str	r2, [r3, #8]
}
 800aca2:	bf00      	nop
 800aca4:	3724      	adds	r7, #36	; 0x24
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	58024400 	.word	0x58024400
 800acb4:	03d09000 	.word	0x03d09000
 800acb8:	46000000 	.word	0x46000000
 800acbc:	4c742400 	.word	0x4c742400
 800acc0:	4a742400 	.word	0x4a742400
 800acc4:	4af42400 	.word	0x4af42400

0800acc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800acc8:	b480      	push	{r7}
 800acca:	b089      	sub	sp, #36	; 0x24
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acd0:	4ba1      	ldr	r3, [pc, #644]	; (800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd4:	f003 0303 	and.w	r3, r3, #3
 800acd8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800acda:	4b9f      	ldr	r3, [pc, #636]	; (800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acde:	0d1b      	lsrs	r3, r3, #20
 800ace0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ace4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ace6:	4b9c      	ldr	r3, [pc, #624]	; (800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acea:	0a1b      	lsrs	r3, r3, #8
 800acec:	f003 0301 	and.w	r3, r3, #1
 800acf0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800acf2:	4b99      	ldr	r3, [pc, #612]	; (800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf6:	08db      	lsrs	r3, r3, #3
 800acf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	fb02 f303 	mul.w	r3, r2, r3
 800ad02:	ee07 3a90 	vmov	s15, r3
 800ad06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f000 8111 	beq.w	800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	2b02      	cmp	r3, #2
 800ad1a:	f000 8083 	beq.w	800ae24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	f200 80a1 	bhi.w	800ae68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d003      	beq.n	800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d056      	beq.n	800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad32:	e099      	b.n	800ae68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad34:	4b88      	ldr	r3, [pc, #544]	; (800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0320 	and.w	r3, r3, #32
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d02d      	beq.n	800ad9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad40:	4b85      	ldr	r3, [pc, #532]	; (800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	08db      	lsrs	r3, r3, #3
 800ad46:	f003 0303 	and.w	r3, r3, #3
 800ad4a:	4a84      	ldr	r2, [pc, #528]	; (800af5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad50:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	ee07 3a90 	vmov	s15, r3
 800ad58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	ee07 3a90 	vmov	s15, r3
 800ad62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad6a:	4b7b      	ldr	r3, [pc, #492]	; (800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad72:	ee07 3a90 	vmov	s15, r3
 800ad76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800af60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ad9a:	e087      	b.n	800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800af64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800adaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adae:	4b6a      	ldr	r3, [pc, #424]	; (800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb6:	ee07 3a90 	vmov	s15, r3
 800adba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800adc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800af60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800add2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800add6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adde:	e065      	b.n	800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	ee07 3a90 	vmov	s15, r3
 800ade6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adf2:	4b59      	ldr	r3, [pc, #356]	; (800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae06:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae22:	e043      	b.n	800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	ee07 3a90 	vmov	s15, r3
 800ae2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae36:	4b48      	ldr	r3, [pc, #288]	; (800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae3e:	ee07 3a90 	vmov	s15, r3
 800ae42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae46:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800af60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae66:	e021      	b.n	800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	ee07 3a90 	vmov	s15, r3
 800ae6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800af68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae7a:	4b37      	ldr	r3, [pc, #220]	; (800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae82:	ee07 3a90 	vmov	s15, r3
 800ae86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800af60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aea6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aeaa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800aeac:	4b2a      	ldr	r3, [pc, #168]	; (800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb0:	0a5b      	lsrs	r3, r3, #9
 800aeb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeb6:	ee07 3a90 	vmov	s15, r3
 800aeba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aec6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aeca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aed2:	ee17 2a90 	vmov	r2, s15
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800aeda:	4b1f      	ldr	r3, [pc, #124]	; (800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aede:	0c1b      	lsrs	r3, r3, #16
 800aee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aee4:	ee07 3a90 	vmov	s15, r3
 800aee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aef0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aef4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aefc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af00:	ee17 2a90 	vmov	r2, s15
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800af08:	4b13      	ldr	r3, [pc, #76]	; (800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0c:	0e1b      	lsrs	r3, r3, #24
 800af0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af12:	ee07 3a90 	vmov	s15, r3
 800af16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af22:	edd7 6a07 	vldr	s13, [r7, #28]
 800af26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af2e:	ee17 2a90 	vmov	r2, s15
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af36:	e008      	b.n	800af4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	609a      	str	r2, [r3, #8]
}
 800af4a:	bf00      	nop
 800af4c:	3724      	adds	r7, #36	; 0x24
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	58024400 	.word	0x58024400
 800af5c:	03d09000 	.word	0x03d09000
 800af60:	46000000 	.word	0x46000000
 800af64:	4c742400 	.word	0x4c742400
 800af68:	4a742400 	.word	0x4a742400
 800af6c:	4af42400 	.word	0x4af42400

0800af70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af7e:	4b53      	ldr	r3, [pc, #332]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800af80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af82:	f003 0303 	and.w	r3, r3, #3
 800af86:	2b03      	cmp	r3, #3
 800af88:	d101      	bne.n	800af8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e099      	b.n	800b0c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800af8e:	4b4f      	ldr	r3, [pc, #316]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a4e      	ldr	r2, [pc, #312]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800af94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800af98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af9a:	f7fa fda5 	bl	8005ae8 <HAL_GetTick>
 800af9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800afa0:	e008      	b.n	800afb4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800afa2:	f7fa fda1 	bl	8005ae8 <HAL_GetTick>
 800afa6:	4602      	mov	r2, r0
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	2b02      	cmp	r3, #2
 800afae:	d901      	bls.n	800afb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800afb0:	2303      	movs	r3, #3
 800afb2:	e086      	b.n	800b0c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800afb4:	4b45      	ldr	r3, [pc, #276]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1f0      	bne.n	800afa2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800afc0:	4b42      	ldr	r3, [pc, #264]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800afc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	031b      	lsls	r3, r3, #12
 800afce:	493f      	ldr	r1, [pc, #252]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800afd0:	4313      	orrs	r3, r2
 800afd2:	628b      	str	r3, [r1, #40]	; 0x28
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	3b01      	subs	r3, #1
 800afda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	025b      	lsls	r3, r3, #9
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	431a      	orrs	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	3b01      	subs	r3, #1
 800aff0:	041b      	lsls	r3, r3, #16
 800aff2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aff6:	431a      	orrs	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	3b01      	subs	r3, #1
 800affe:	061b      	lsls	r3, r3, #24
 800b000:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b004:	4931      	ldr	r1, [pc, #196]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b006:	4313      	orrs	r3, r2
 800b008:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b00a:	4b30      	ldr	r3, [pc, #192]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	695b      	ldr	r3, [r3, #20]
 800b016:	492d      	ldr	r1, [pc, #180]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b018:	4313      	orrs	r3, r2
 800b01a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b01c:	4b2b      	ldr	r3, [pc, #172]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b020:	f023 0220 	bic.w	r2, r3, #32
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	4928      	ldr	r1, [pc, #160]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b02a:	4313      	orrs	r3, r2
 800b02c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b02e:	4b27      	ldr	r3, [pc, #156]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b032:	4a26      	ldr	r2, [pc, #152]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b034:	f023 0310 	bic.w	r3, r3, #16
 800b038:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b03a:	4b24      	ldr	r3, [pc, #144]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b03c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b03e:	4b24      	ldr	r3, [pc, #144]	; (800b0d0 <RCCEx_PLL2_Config+0x160>)
 800b040:	4013      	ands	r3, r2
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	69d2      	ldr	r2, [r2, #28]
 800b046:	00d2      	lsls	r2, r2, #3
 800b048:	4920      	ldr	r1, [pc, #128]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b04a:	4313      	orrs	r3, r2
 800b04c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b04e:	4b1f      	ldr	r3, [pc, #124]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b052:	4a1e      	ldr	r2, [pc, #120]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b054:	f043 0310 	orr.w	r3, r3, #16
 800b058:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d106      	bne.n	800b06e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b060:	4b1a      	ldr	r3, [pc, #104]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b064:	4a19      	ldr	r2, [pc, #100]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b066:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b06a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b06c:	e00f      	b.n	800b08e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d106      	bne.n	800b082 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b074:	4b15      	ldr	r3, [pc, #84]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b078:	4a14      	ldr	r2, [pc, #80]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b07a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b07e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b080:	e005      	b.n	800b08e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b082:	4b12      	ldr	r3, [pc, #72]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b086:	4a11      	ldr	r2, [pc, #68]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b088:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b08c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b08e:	4b0f      	ldr	r3, [pc, #60]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a0e      	ldr	r2, [pc, #56]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b094:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b09a:	f7fa fd25 	bl	8005ae8 <HAL_GetTick>
 800b09e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b0a0:	e008      	b.n	800b0b4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b0a2:	f7fa fd21 	bl	8005ae8 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d901      	bls.n	800b0b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e006      	b.n	800b0c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b0b4:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <RCCEx_PLL2_Config+0x15c>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d0f0      	beq.n	800b0a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	58024400 	.word	0x58024400
 800b0d0:	ffff0007 	.word	0xffff0007

0800b0d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b0e2:	4b53      	ldr	r3, [pc, #332]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e6:	f003 0303 	and.w	r3, r3, #3
 800b0ea:	2b03      	cmp	r3, #3
 800b0ec:	d101      	bne.n	800b0f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e099      	b.n	800b226 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b0f2:	4b4f      	ldr	r3, [pc, #316]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a4e      	ldr	r2, [pc, #312]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b0f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0fe:	f7fa fcf3 	bl	8005ae8 <HAL_GetTick>
 800b102:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b104:	e008      	b.n	800b118 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b106:	f7fa fcef 	bl	8005ae8 <HAL_GetTick>
 800b10a:	4602      	mov	r2, r0
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	2b02      	cmp	r3, #2
 800b112:	d901      	bls.n	800b118 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b114:	2303      	movs	r3, #3
 800b116:	e086      	b.n	800b226 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b118:	4b45      	ldr	r3, [pc, #276]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1f0      	bne.n	800b106 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b124:	4b42      	ldr	r3, [pc, #264]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b128:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	051b      	lsls	r3, r3, #20
 800b132:	493f      	ldr	r1, [pc, #252]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b134:	4313      	orrs	r3, r2
 800b136:	628b      	str	r3, [r1, #40]	; 0x28
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	3b01      	subs	r3, #1
 800b13e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	3b01      	subs	r3, #1
 800b148:	025b      	lsls	r3, r3, #9
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	431a      	orrs	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	3b01      	subs	r3, #1
 800b154:	041b      	lsls	r3, r3, #16
 800b156:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b15a:	431a      	orrs	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	3b01      	subs	r3, #1
 800b162:	061b      	lsls	r3, r3, #24
 800b164:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b168:	4931      	ldr	r1, [pc, #196]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b16a:	4313      	orrs	r3, r2
 800b16c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b16e:	4b30      	ldr	r3, [pc, #192]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b172:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	695b      	ldr	r3, [r3, #20]
 800b17a:	492d      	ldr	r1, [pc, #180]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b17c:	4313      	orrs	r3, r2
 800b17e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b180:	4b2b      	ldr	r3, [pc, #172]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b184:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	4928      	ldr	r1, [pc, #160]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b18e:	4313      	orrs	r3, r2
 800b190:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b192:	4b27      	ldr	r3, [pc, #156]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b196:	4a26      	ldr	r2, [pc, #152]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b19c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b19e:	4b24      	ldr	r3, [pc, #144]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b1a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1a2:	4b24      	ldr	r3, [pc, #144]	; (800b234 <RCCEx_PLL3_Config+0x160>)
 800b1a4:	4013      	ands	r3, r2
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	69d2      	ldr	r2, [r2, #28]
 800b1aa:	00d2      	lsls	r2, r2, #3
 800b1ac:	4920      	ldr	r1, [pc, #128]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b1b2:	4b1f      	ldr	r3, [pc, #124]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b6:	4a1e      	ldr	r2, [pc, #120]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b1b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d106      	bne.n	800b1d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b1c4:	4b1a      	ldr	r3, [pc, #104]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c8:	4a19      	ldr	r2, [pc, #100]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b1ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b1ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b1d0:	e00f      	b.n	800b1f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d106      	bne.n	800b1e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b1d8:	4b15      	ldr	r3, [pc, #84]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1dc:	4a14      	ldr	r2, [pc, #80]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b1de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b1e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b1e4:	e005      	b.n	800b1f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b1e6:	4b12      	ldr	r3, [pc, #72]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ea:	4a11      	ldr	r2, [pc, #68]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b1ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b1f2:	4b0f      	ldr	r3, [pc, #60]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a0e      	ldr	r2, [pc, #56]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b1f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1fe:	f7fa fc73 	bl	8005ae8 <HAL_GetTick>
 800b202:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b204:	e008      	b.n	800b218 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b206:	f7fa fc6f 	bl	8005ae8 <HAL_GetTick>
 800b20a:	4602      	mov	r2, r0
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	2b02      	cmp	r3, #2
 800b212:	d901      	bls.n	800b218 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b214:	2303      	movs	r3, #3
 800b216:	e006      	b.n	800b226 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b218:	4b05      	ldr	r3, [pc, #20]	; (800b230 <RCCEx_PLL3_Config+0x15c>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b220:	2b00      	cmp	r3, #0
 800b222:	d0f0      	beq.n	800b206 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b224:	7bfb      	ldrb	r3, [r7, #15]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	58024400 	.word	0x58024400
 800b234:	ffff0007 	.word	0xffff0007

0800b238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d101      	bne.n	800b24a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b246:	2301      	movs	r3, #1
 800b248:	e049      	b.n	800b2de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b250:	b2db      	uxtb	r3, r3
 800b252:	2b00      	cmp	r3, #0
 800b254:	d106      	bne.n	800b264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f7f9 ff7a 	bl	8005158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2202      	movs	r2, #2
 800b268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3304      	adds	r3, #4
 800b274:	4619      	mov	r1, r3
 800b276:	4610      	mov	r0, r2
 800b278:	f000 ff12 	bl	800c0a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
	...

0800b2e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d001      	beq.n	800b300 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e05e      	b.n	800b3be <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2202      	movs	r2, #2
 800b304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68da      	ldr	r2, [r3, #12]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f042 0201 	orr.w	r2, r2, #1
 800b316:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a2b      	ldr	r2, [pc, #172]	; (800b3cc <HAL_TIM_Base_Start_IT+0xe4>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d02c      	beq.n	800b37c <HAL_TIM_Base_Start_IT+0x94>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b32a:	d027      	beq.n	800b37c <HAL_TIM_Base_Start_IT+0x94>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a27      	ldr	r2, [pc, #156]	; (800b3d0 <HAL_TIM_Base_Start_IT+0xe8>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d022      	beq.n	800b37c <HAL_TIM_Base_Start_IT+0x94>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a26      	ldr	r2, [pc, #152]	; (800b3d4 <HAL_TIM_Base_Start_IT+0xec>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d01d      	beq.n	800b37c <HAL_TIM_Base_Start_IT+0x94>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a24      	ldr	r2, [pc, #144]	; (800b3d8 <HAL_TIM_Base_Start_IT+0xf0>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d018      	beq.n	800b37c <HAL_TIM_Base_Start_IT+0x94>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a23      	ldr	r2, [pc, #140]	; (800b3dc <HAL_TIM_Base_Start_IT+0xf4>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d013      	beq.n	800b37c <HAL_TIM_Base_Start_IT+0x94>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a21      	ldr	r2, [pc, #132]	; (800b3e0 <HAL_TIM_Base_Start_IT+0xf8>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d00e      	beq.n	800b37c <HAL_TIM_Base_Start_IT+0x94>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a20      	ldr	r2, [pc, #128]	; (800b3e4 <HAL_TIM_Base_Start_IT+0xfc>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d009      	beq.n	800b37c <HAL_TIM_Base_Start_IT+0x94>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a1e      	ldr	r2, [pc, #120]	; (800b3e8 <HAL_TIM_Base_Start_IT+0x100>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d004      	beq.n	800b37c <HAL_TIM_Base_Start_IT+0x94>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a1d      	ldr	r2, [pc, #116]	; (800b3ec <HAL_TIM_Base_Start_IT+0x104>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d115      	bne.n	800b3a8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	689a      	ldr	r2, [r3, #8]
 800b382:	4b1b      	ldr	r3, [pc, #108]	; (800b3f0 <HAL_TIM_Base_Start_IT+0x108>)
 800b384:	4013      	ands	r3, r2
 800b386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2b06      	cmp	r3, #6
 800b38c:	d015      	beq.n	800b3ba <HAL_TIM_Base_Start_IT+0xd2>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b394:	d011      	beq.n	800b3ba <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f042 0201 	orr.w	r2, r2, #1
 800b3a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3a6:	e008      	b.n	800b3ba <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f042 0201 	orr.w	r2, r2, #1
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	e000      	b.n	800b3bc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	40010000 	.word	0x40010000
 800b3d0:	40000400 	.word	0x40000400
 800b3d4:	40000800 	.word	0x40000800
 800b3d8:	40000c00 	.word	0x40000c00
 800b3dc:	40010400 	.word	0x40010400
 800b3e0:	40001800 	.word	0x40001800
 800b3e4:	40014000 	.word	0x40014000
 800b3e8:	4000e000 	.word	0x4000e000
 800b3ec:	4000e400 	.word	0x4000e400
 800b3f0:	00010007 	.word	0x00010007

0800b3f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d101      	bne.n	800b406 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b402:	2301      	movs	r3, #1
 800b404:	e049      	b.n	800b49a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d106      	bne.n	800b420 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7f9 fe34 	bl	8005088 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2202      	movs	r2, #2
 800b424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	3304      	adds	r3, #4
 800b430:	4619      	mov	r1, r3
 800b432:	4610      	mov	r0, r2
 800b434:	f000 fe34 	bl	800c0a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
	...

0800b4a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d109      	bne.n	800b4c8 <HAL_TIM_PWM_Start+0x24>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	bf14      	ite	ne
 800b4c0:	2301      	movne	r3, #1
 800b4c2:	2300      	moveq	r3, #0
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	e03c      	b.n	800b542 <HAL_TIM_PWM_Start+0x9e>
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	2b04      	cmp	r3, #4
 800b4cc:	d109      	bne.n	800b4e2 <HAL_TIM_PWM_Start+0x3e>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	bf14      	ite	ne
 800b4da:	2301      	movne	r3, #1
 800b4dc:	2300      	moveq	r3, #0
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	e02f      	b.n	800b542 <HAL_TIM_PWM_Start+0x9e>
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	2b08      	cmp	r3, #8
 800b4e6:	d109      	bne.n	800b4fc <HAL_TIM_PWM_Start+0x58>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	bf14      	ite	ne
 800b4f4:	2301      	movne	r3, #1
 800b4f6:	2300      	moveq	r3, #0
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	e022      	b.n	800b542 <HAL_TIM_PWM_Start+0x9e>
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	2b0c      	cmp	r3, #12
 800b500:	d109      	bne.n	800b516 <HAL_TIM_PWM_Start+0x72>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	bf14      	ite	ne
 800b50e:	2301      	movne	r3, #1
 800b510:	2300      	moveq	r3, #0
 800b512:	b2db      	uxtb	r3, r3
 800b514:	e015      	b.n	800b542 <HAL_TIM_PWM_Start+0x9e>
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	2b10      	cmp	r3, #16
 800b51a:	d109      	bne.n	800b530 <HAL_TIM_PWM_Start+0x8c>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b522:	b2db      	uxtb	r3, r3
 800b524:	2b01      	cmp	r3, #1
 800b526:	bf14      	ite	ne
 800b528:	2301      	movne	r3, #1
 800b52a:	2300      	moveq	r3, #0
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	e008      	b.n	800b542 <HAL_TIM_PWM_Start+0x9e>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b536:	b2db      	uxtb	r3, r3
 800b538:	2b01      	cmp	r3, #1
 800b53a:	bf14      	ite	ne
 800b53c:	2301      	movne	r3, #1
 800b53e:	2300      	moveq	r3, #0
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	d001      	beq.n	800b54a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	e0ab      	b.n	800b6a2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d104      	bne.n	800b55a <HAL_TIM_PWM_Start+0xb6>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2202      	movs	r2, #2
 800b554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b558:	e023      	b.n	800b5a2 <HAL_TIM_PWM_Start+0xfe>
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	2b04      	cmp	r3, #4
 800b55e:	d104      	bne.n	800b56a <HAL_TIM_PWM_Start+0xc6>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2202      	movs	r2, #2
 800b564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b568:	e01b      	b.n	800b5a2 <HAL_TIM_PWM_Start+0xfe>
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2b08      	cmp	r3, #8
 800b56e:	d104      	bne.n	800b57a <HAL_TIM_PWM_Start+0xd6>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2202      	movs	r2, #2
 800b574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b578:	e013      	b.n	800b5a2 <HAL_TIM_PWM_Start+0xfe>
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	2b0c      	cmp	r3, #12
 800b57e:	d104      	bne.n	800b58a <HAL_TIM_PWM_Start+0xe6>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2202      	movs	r2, #2
 800b584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b588:	e00b      	b.n	800b5a2 <HAL_TIM_PWM_Start+0xfe>
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	2b10      	cmp	r3, #16
 800b58e:	d104      	bne.n	800b59a <HAL_TIM_PWM_Start+0xf6>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2202      	movs	r2, #2
 800b594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b598:	e003      	b.n	800b5a2 <HAL_TIM_PWM_Start+0xfe>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2202      	movs	r2, #2
 800b59e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f001 f992 	bl	800c8d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a3d      	ldr	r2, [pc, #244]	; (800b6ac <HAL_TIM_PWM_Start+0x208>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d013      	beq.n	800b5e2 <HAL_TIM_PWM_Start+0x13e>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a3c      	ldr	r2, [pc, #240]	; (800b6b0 <HAL_TIM_PWM_Start+0x20c>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d00e      	beq.n	800b5e2 <HAL_TIM_PWM_Start+0x13e>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a3a      	ldr	r2, [pc, #232]	; (800b6b4 <HAL_TIM_PWM_Start+0x210>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d009      	beq.n	800b5e2 <HAL_TIM_PWM_Start+0x13e>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a39      	ldr	r2, [pc, #228]	; (800b6b8 <HAL_TIM_PWM_Start+0x214>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d004      	beq.n	800b5e2 <HAL_TIM_PWM_Start+0x13e>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a37      	ldr	r2, [pc, #220]	; (800b6bc <HAL_TIM_PWM_Start+0x218>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d101      	bne.n	800b5e6 <HAL_TIM_PWM_Start+0x142>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e000      	b.n	800b5e8 <HAL_TIM_PWM_Start+0x144>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d007      	beq.n	800b5fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a2a      	ldr	r2, [pc, #168]	; (800b6ac <HAL_TIM_PWM_Start+0x208>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d02c      	beq.n	800b660 <HAL_TIM_PWM_Start+0x1bc>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b60e:	d027      	beq.n	800b660 <HAL_TIM_PWM_Start+0x1bc>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a2a      	ldr	r2, [pc, #168]	; (800b6c0 <HAL_TIM_PWM_Start+0x21c>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d022      	beq.n	800b660 <HAL_TIM_PWM_Start+0x1bc>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a29      	ldr	r2, [pc, #164]	; (800b6c4 <HAL_TIM_PWM_Start+0x220>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d01d      	beq.n	800b660 <HAL_TIM_PWM_Start+0x1bc>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a27      	ldr	r2, [pc, #156]	; (800b6c8 <HAL_TIM_PWM_Start+0x224>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d018      	beq.n	800b660 <HAL_TIM_PWM_Start+0x1bc>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a1f      	ldr	r2, [pc, #124]	; (800b6b0 <HAL_TIM_PWM_Start+0x20c>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d013      	beq.n	800b660 <HAL_TIM_PWM_Start+0x1bc>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a23      	ldr	r2, [pc, #140]	; (800b6cc <HAL_TIM_PWM_Start+0x228>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d00e      	beq.n	800b660 <HAL_TIM_PWM_Start+0x1bc>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a1b      	ldr	r2, [pc, #108]	; (800b6b4 <HAL_TIM_PWM_Start+0x210>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d009      	beq.n	800b660 <HAL_TIM_PWM_Start+0x1bc>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a1f      	ldr	r2, [pc, #124]	; (800b6d0 <HAL_TIM_PWM_Start+0x22c>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d004      	beq.n	800b660 <HAL_TIM_PWM_Start+0x1bc>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a1e      	ldr	r2, [pc, #120]	; (800b6d4 <HAL_TIM_PWM_Start+0x230>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d115      	bne.n	800b68c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	689a      	ldr	r2, [r3, #8]
 800b666:	4b1c      	ldr	r3, [pc, #112]	; (800b6d8 <HAL_TIM_PWM_Start+0x234>)
 800b668:	4013      	ands	r3, r2
 800b66a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2b06      	cmp	r3, #6
 800b670:	d015      	beq.n	800b69e <HAL_TIM_PWM_Start+0x1fa>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b678:	d011      	beq.n	800b69e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f042 0201 	orr.w	r2, r2, #1
 800b688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b68a:	e008      	b.n	800b69e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f042 0201 	orr.w	r2, r2, #1
 800b69a:	601a      	str	r2, [r3, #0]
 800b69c:	e000      	b.n	800b6a0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b69e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	40010000 	.word	0x40010000
 800b6b0:	40010400 	.word	0x40010400
 800b6b4:	40014000 	.word	0x40014000
 800b6b8:	40014400 	.word	0x40014400
 800b6bc:	40014800 	.word	0x40014800
 800b6c0:	40000400 	.word	0x40000400
 800b6c4:	40000800 	.word	0x40000800
 800b6c8:	40000c00 	.word	0x40000c00
 800b6cc:	40001800 	.word	0x40001800
 800b6d0:	4000e000 	.word	0x4000e000
 800b6d4:	4000e400 	.word	0x4000e400
 800b6d8:	00010007 	.word	0x00010007

0800b6dc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d101      	bne.n	800b6f0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e041      	b.n	800b774 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d106      	bne.n	800b70a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 f839 	bl	800b77c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2202      	movs	r2, #2
 800b70e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	3304      	adds	r3, #4
 800b71a:	4619      	mov	r1, r3
 800b71c:	4610      	mov	r0, r2
 800b71e:	f000 fcbf 	bl	800c0a0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f022 0208 	bic.w	r2, r2, #8
 800b730:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	6819      	ldr	r1, [r3, #0]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	683a      	ldr	r2, [r7, #0]
 800b73e:	430a      	orrs	r2, r1
 800b740:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2201      	movs	r2, #1
 800b756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2201      	movs	r2, #1
 800b766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2201      	movs	r2, #1
 800b76e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b784:	bf00      	nop
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d101      	bne.n	800b7a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e08f      	b.n	800b8c4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d106      	bne.n	800b7be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7f9 fd21 	bl	8005200 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2202      	movs	r2, #2
 800b7c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	6899      	ldr	r1, [r3, #8]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	4b3e      	ldr	r3, [pc, #248]	; (800b8cc <HAL_TIM_Encoder_Init+0x13c>)
 800b7d2:	400b      	ands	r3, r1
 800b7d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	f000 fc5d 	bl	800c0a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	699b      	ldr	r3, [r3, #24]
 800b7f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6a1b      	ldr	r3, [r3, #32]
 800b7fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	4313      	orrs	r3, r2
 800b806:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b808:	693a      	ldr	r2, [r7, #16]
 800b80a:	4b31      	ldr	r3, [pc, #196]	; (800b8d0 <HAL_TIM_Encoder_Init+0x140>)
 800b80c:	4013      	ands	r3, r2
 800b80e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	689a      	ldr	r2, [r3, #8]
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	021b      	lsls	r3, r3, #8
 800b81a:	4313      	orrs	r3, r2
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	4313      	orrs	r3, r2
 800b820:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b822:	693a      	ldr	r2, [r7, #16]
 800b824:	4b2b      	ldr	r3, [pc, #172]	; (800b8d4 <HAL_TIM_Encoder_Init+0x144>)
 800b826:	4013      	ands	r3, r2
 800b828:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b82a:	693a      	ldr	r2, [r7, #16]
 800b82c:	4b2a      	ldr	r3, [pc, #168]	; (800b8d8 <HAL_TIM_Encoder_Init+0x148>)
 800b82e:	4013      	ands	r3, r2
 800b830:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	68da      	ldr	r2, [r3, #12]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	69db      	ldr	r3, [r3, #28]
 800b83a:	021b      	lsls	r3, r3, #8
 800b83c:	4313      	orrs	r3, r2
 800b83e:	693a      	ldr	r2, [r7, #16]
 800b840:	4313      	orrs	r3, r2
 800b842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	011a      	lsls	r2, r3, #4
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	031b      	lsls	r3, r3, #12
 800b850:	4313      	orrs	r3, r2
 800b852:	693a      	ldr	r2, [r7, #16]
 800b854:	4313      	orrs	r3, r2
 800b856:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b85e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b866:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	695b      	ldr	r3, [r3, #20]
 800b870:	011b      	lsls	r3, r3, #4
 800b872:	4313      	orrs	r3, r2
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	4313      	orrs	r3, r2
 800b878:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3718      	adds	r7, #24
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	fffebff8 	.word	0xfffebff8
 800b8d0:	fffffcfc 	.word	0xfffffcfc
 800b8d4:	fffff3f3 	.word	0xfffff3f3
 800b8d8:	ffff0f0f 	.word	0xffff0f0f

0800b8dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b8f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b904:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d110      	bne.n	800b92e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d102      	bne.n	800b918 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b912:	7b7b      	ldrb	r3, [r7, #13]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d001      	beq.n	800b91c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	e069      	b.n	800b9f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2202      	movs	r2, #2
 800b920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2202      	movs	r2, #2
 800b928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b92c:	e031      	b.n	800b992 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b04      	cmp	r3, #4
 800b932:	d110      	bne.n	800b956 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b934:	7bbb      	ldrb	r3, [r7, #14]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d102      	bne.n	800b940 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b93a:	7b3b      	ldrb	r3, [r7, #12]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d001      	beq.n	800b944 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	e055      	b.n	800b9f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2202      	movs	r2, #2
 800b948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2202      	movs	r2, #2
 800b950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b954:	e01d      	b.n	800b992 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b956:	7bfb      	ldrb	r3, [r7, #15]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d108      	bne.n	800b96e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b95c:	7bbb      	ldrb	r3, [r7, #14]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d105      	bne.n	800b96e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b962:	7b7b      	ldrb	r3, [r7, #13]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d102      	bne.n	800b96e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b968:	7b3b      	ldrb	r3, [r7, #12]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d001      	beq.n	800b972 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	e03e      	b.n	800b9f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2202      	movs	r2, #2
 800b976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2202      	movs	r2, #2
 800b97e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2202      	movs	r2, #2
 800b986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2202      	movs	r2, #2
 800b98e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <HAL_TIM_Encoder_Start+0xc4>
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	2b04      	cmp	r3, #4
 800b99c:	d008      	beq.n	800b9b0 <HAL_TIM_Encoder_Start+0xd4>
 800b99e:	e00f      	b.n	800b9c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f000 ff93 	bl	800c8d4 <TIM_CCxChannelCmd>
      break;
 800b9ae:	e016      	b.n	800b9de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	2104      	movs	r1, #4
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f000 ff8b 	bl	800c8d4 <TIM_CCxChannelCmd>
      break;
 800b9be:	e00e      	b.n	800b9de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f000 ff83 	bl	800c8d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	2104      	movs	r1, #4
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f000 ff7c 	bl	800c8d4 <TIM_CCxChannelCmd>
      break;
 800b9dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f042 0201 	orr.w	r2, r2, #1
 800b9ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	f003 0302 	and.w	r3, r3, #2
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d122      	bne.n	800ba54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	f003 0302 	and.w	r3, r3, #2
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d11b      	bne.n	800ba54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f06f 0202 	mvn.w	r2, #2
 800ba24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	f003 0303 	and.w	r3, r3, #3
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fb12 	bl	800c064 <HAL_TIM_IC_CaptureCallback>
 800ba40:	e005      	b.n	800ba4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fb04 	bl	800c050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fb15 	bl	800c078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	f003 0304 	and.w	r3, r3, #4
 800ba5e:	2b04      	cmp	r3, #4
 800ba60:	d122      	bne.n	800baa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	f003 0304 	and.w	r3, r3, #4
 800ba6c:	2b04      	cmp	r3, #4
 800ba6e:	d11b      	bne.n	800baa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f06f 0204 	mvn.w	r2, #4
 800ba78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2202      	movs	r2, #2
 800ba7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	699b      	ldr	r3, [r3, #24]
 800ba86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d003      	beq.n	800ba96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 fae8 	bl	800c064 <HAL_TIM_IC_CaptureCallback>
 800ba94:	e005      	b.n	800baa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 fada 	bl	800c050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 faeb 	bl	800c078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	f003 0308 	and.w	r3, r3, #8
 800bab2:	2b08      	cmp	r3, #8
 800bab4:	d122      	bne.n	800bafc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	f003 0308 	and.w	r3, r3, #8
 800bac0:	2b08      	cmp	r3, #8
 800bac2:	d11b      	bne.n	800bafc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f06f 0208 	mvn.w	r2, #8
 800bacc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2204      	movs	r2, #4
 800bad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	69db      	ldr	r3, [r3, #28]
 800bada:	f003 0303 	and.w	r3, r3, #3
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d003      	beq.n	800baea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fabe 	bl	800c064 <HAL_TIM_IC_CaptureCallback>
 800bae8:	e005      	b.n	800baf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fab0 	bl	800c050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fac1 	bl	800c078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	f003 0310 	and.w	r3, r3, #16
 800bb06:	2b10      	cmp	r3, #16
 800bb08:	d122      	bne.n	800bb50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	f003 0310 	and.w	r3, r3, #16
 800bb14:	2b10      	cmp	r3, #16
 800bb16:	d11b      	bne.n	800bb50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f06f 0210 	mvn.w	r2, #16
 800bb20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2208      	movs	r2, #8
 800bb26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	69db      	ldr	r3, [r3, #28]
 800bb2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d003      	beq.n	800bb3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 fa94 	bl	800c064 <HAL_TIM_IC_CaptureCallback>
 800bb3c:	e005      	b.n	800bb4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 fa86 	bl	800c050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 fa97 	bl	800c078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	f003 0301 	and.w	r3, r3, #1
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d10e      	bne.n	800bb7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	f003 0301 	and.w	r3, r3, #1
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d107      	bne.n	800bb7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f06f 0201 	mvn.w	r2, #1
 800bb74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7f5 fd92 	bl	80016a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb86:	2b80      	cmp	r3, #128	; 0x80
 800bb88:	d10e      	bne.n	800bba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb94:	2b80      	cmp	r3, #128	; 0x80
 800bb96:	d107      	bne.n	800bba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f001 f802 	bl	800cbac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbb6:	d10e      	bne.n	800bbd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbc2:	2b80      	cmp	r3, #128	; 0x80
 800bbc4:	d107      	bne.n	800bbd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bbce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fff5 	bl	800cbc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe0:	2b40      	cmp	r3, #64	; 0x40
 800bbe2:	d10e      	bne.n	800bc02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	68db      	ldr	r3, [r3, #12]
 800bbea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbee:	2b40      	cmp	r3, #64	; 0x40
 800bbf0:	d107      	bne.n	800bc02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bbfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 fa45 	bl	800c08c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	f003 0320 	and.w	r3, r3, #32
 800bc0c:	2b20      	cmp	r3, #32
 800bc0e:	d10e      	bne.n	800bc2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68db      	ldr	r3, [r3, #12]
 800bc16:	f003 0320 	and.w	r3, r3, #32
 800bc1a:	2b20      	cmp	r3, #32
 800bc1c:	d107      	bne.n	800bc2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f06f 0220 	mvn.w	r2, #32
 800bc26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 ffb5 	bl	800cb98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc2e:	bf00      	nop
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
	...

0800bc38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d101      	bne.n	800bc56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bc52:	2302      	movs	r3, #2
 800bc54:	e0ff      	b.n	800be56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b14      	cmp	r3, #20
 800bc62:	f200 80f0 	bhi.w	800be46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bc66:	a201      	add	r2, pc, #4	; (adr r2, 800bc6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6c:	0800bcc1 	.word	0x0800bcc1
 800bc70:	0800be47 	.word	0x0800be47
 800bc74:	0800be47 	.word	0x0800be47
 800bc78:	0800be47 	.word	0x0800be47
 800bc7c:	0800bd01 	.word	0x0800bd01
 800bc80:	0800be47 	.word	0x0800be47
 800bc84:	0800be47 	.word	0x0800be47
 800bc88:	0800be47 	.word	0x0800be47
 800bc8c:	0800bd43 	.word	0x0800bd43
 800bc90:	0800be47 	.word	0x0800be47
 800bc94:	0800be47 	.word	0x0800be47
 800bc98:	0800be47 	.word	0x0800be47
 800bc9c:	0800bd83 	.word	0x0800bd83
 800bca0:	0800be47 	.word	0x0800be47
 800bca4:	0800be47 	.word	0x0800be47
 800bca8:	0800be47 	.word	0x0800be47
 800bcac:	0800bdc5 	.word	0x0800bdc5
 800bcb0:	0800be47 	.word	0x0800be47
 800bcb4:	0800be47 	.word	0x0800be47
 800bcb8:	0800be47 	.word	0x0800be47
 800bcbc:	0800be05 	.word	0x0800be05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	68b9      	ldr	r1, [r7, #8]
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f000 fa90 	bl	800c1ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	699a      	ldr	r2, [r3, #24]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f042 0208 	orr.w	r2, r2, #8
 800bcda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	699a      	ldr	r2, [r3, #24]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f022 0204 	bic.w	r2, r2, #4
 800bcea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	6999      	ldr	r1, [r3, #24]
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	691a      	ldr	r2, [r3, #16]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	430a      	orrs	r2, r1
 800bcfc:	619a      	str	r2, [r3, #24]
      break;
 800bcfe:	e0a5      	b.n	800be4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	68b9      	ldr	r1, [r7, #8]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 fb00 	bl	800c30c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	699a      	ldr	r2, [r3, #24]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	699a      	ldr	r2, [r3, #24]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6999      	ldr	r1, [r3, #24]
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	021a      	lsls	r2, r3, #8
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	430a      	orrs	r2, r1
 800bd3e:	619a      	str	r2, [r3, #24]
      break;
 800bd40:	e084      	b.n	800be4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68b9      	ldr	r1, [r7, #8]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 fb69 	bl	800c420 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	69da      	ldr	r2, [r3, #28]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f042 0208 	orr.w	r2, r2, #8
 800bd5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	69da      	ldr	r2, [r3, #28]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f022 0204 	bic.w	r2, r2, #4
 800bd6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	69d9      	ldr	r1, [r3, #28]
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	691a      	ldr	r2, [r3, #16]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	430a      	orrs	r2, r1
 800bd7e:	61da      	str	r2, [r3, #28]
      break;
 800bd80:	e064      	b.n	800be4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	68b9      	ldr	r1, [r7, #8]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 fbd1 	bl	800c530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	69da      	ldr	r2, [r3, #28]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	69da      	ldr	r2, [r3, #28]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	69d9      	ldr	r1, [r3, #28]
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	021a      	lsls	r2, r3, #8
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	430a      	orrs	r2, r1
 800bdc0:	61da      	str	r2, [r3, #28]
      break;
 800bdc2:	e043      	b.n	800be4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	68b9      	ldr	r1, [r7, #8]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f000 fc1a 	bl	800c604 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f042 0208 	orr.w	r2, r2, #8
 800bdde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f022 0204 	bic.w	r2, r2, #4
 800bdee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	691a      	ldr	r2, [r3, #16]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	430a      	orrs	r2, r1
 800be00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be02:	e023      	b.n	800be4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68b9      	ldr	r1, [r7, #8]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 fc5e 	bl	800c6cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	021a      	lsls	r2, r3, #8
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	430a      	orrs	r2, r1
 800be42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be44:	e002      	b.n	800be4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	75fb      	strb	r3, [r7, #23]
      break;
 800be4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be54:	7dfb      	ldrb	r3, [r7, #23]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3718      	adds	r7, #24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop

0800be60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be6a:	2300      	movs	r3, #0
 800be6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be74:	2b01      	cmp	r3, #1
 800be76:	d101      	bne.n	800be7c <HAL_TIM_ConfigClockSource+0x1c>
 800be78:	2302      	movs	r3, #2
 800be7a:	e0dc      	b.n	800c036 <HAL_TIM_ConfigClockSource+0x1d6>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2201      	movs	r2, #1
 800be80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2202      	movs	r2, #2
 800be88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	4b6a      	ldr	r3, [pc, #424]	; (800c040 <HAL_TIM_ConfigClockSource+0x1e0>)
 800be98:	4013      	ands	r3, r2
 800be9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bea2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68ba      	ldr	r2, [r7, #8]
 800beaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a64      	ldr	r2, [pc, #400]	; (800c044 <HAL_TIM_ConfigClockSource+0x1e4>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	f000 80a9 	beq.w	800c00a <HAL_TIM_ConfigClockSource+0x1aa>
 800beb8:	4a62      	ldr	r2, [pc, #392]	; (800c044 <HAL_TIM_ConfigClockSource+0x1e4>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	f200 80ae 	bhi.w	800c01c <HAL_TIM_ConfigClockSource+0x1bc>
 800bec0:	4a61      	ldr	r2, [pc, #388]	; (800c048 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	f000 80a1 	beq.w	800c00a <HAL_TIM_ConfigClockSource+0x1aa>
 800bec8:	4a5f      	ldr	r2, [pc, #380]	; (800c048 <HAL_TIM_ConfigClockSource+0x1e8>)
 800beca:	4293      	cmp	r3, r2
 800becc:	f200 80a6 	bhi.w	800c01c <HAL_TIM_ConfigClockSource+0x1bc>
 800bed0:	4a5e      	ldr	r2, [pc, #376]	; (800c04c <HAL_TIM_ConfigClockSource+0x1ec>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	f000 8099 	beq.w	800c00a <HAL_TIM_ConfigClockSource+0x1aa>
 800bed8:	4a5c      	ldr	r2, [pc, #368]	; (800c04c <HAL_TIM_ConfigClockSource+0x1ec>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	f200 809e 	bhi.w	800c01c <HAL_TIM_ConfigClockSource+0x1bc>
 800bee0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bee4:	f000 8091 	beq.w	800c00a <HAL_TIM_ConfigClockSource+0x1aa>
 800bee8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800beec:	f200 8096 	bhi.w	800c01c <HAL_TIM_ConfigClockSource+0x1bc>
 800bef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bef4:	f000 8089 	beq.w	800c00a <HAL_TIM_ConfigClockSource+0x1aa>
 800bef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800befc:	f200 808e 	bhi.w	800c01c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf04:	d03e      	beq.n	800bf84 <HAL_TIM_ConfigClockSource+0x124>
 800bf06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf0a:	f200 8087 	bhi.w	800c01c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf12:	f000 8086 	beq.w	800c022 <HAL_TIM_ConfigClockSource+0x1c2>
 800bf16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf1a:	d87f      	bhi.n	800c01c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf1c:	2b70      	cmp	r3, #112	; 0x70
 800bf1e:	d01a      	beq.n	800bf56 <HAL_TIM_ConfigClockSource+0xf6>
 800bf20:	2b70      	cmp	r3, #112	; 0x70
 800bf22:	d87b      	bhi.n	800c01c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf24:	2b60      	cmp	r3, #96	; 0x60
 800bf26:	d050      	beq.n	800bfca <HAL_TIM_ConfigClockSource+0x16a>
 800bf28:	2b60      	cmp	r3, #96	; 0x60
 800bf2a:	d877      	bhi.n	800c01c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf2c:	2b50      	cmp	r3, #80	; 0x50
 800bf2e:	d03c      	beq.n	800bfaa <HAL_TIM_ConfigClockSource+0x14a>
 800bf30:	2b50      	cmp	r3, #80	; 0x50
 800bf32:	d873      	bhi.n	800c01c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf34:	2b40      	cmp	r3, #64	; 0x40
 800bf36:	d058      	beq.n	800bfea <HAL_TIM_ConfigClockSource+0x18a>
 800bf38:	2b40      	cmp	r3, #64	; 0x40
 800bf3a:	d86f      	bhi.n	800c01c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf3c:	2b30      	cmp	r3, #48	; 0x30
 800bf3e:	d064      	beq.n	800c00a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf40:	2b30      	cmp	r3, #48	; 0x30
 800bf42:	d86b      	bhi.n	800c01c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf44:	2b20      	cmp	r3, #32
 800bf46:	d060      	beq.n	800c00a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf48:	2b20      	cmp	r3, #32
 800bf4a:	d867      	bhi.n	800c01c <HAL_TIM_ConfigClockSource+0x1bc>
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d05c      	beq.n	800c00a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf50:	2b10      	cmp	r3, #16
 800bf52:	d05a      	beq.n	800c00a <HAL_TIM_ConfigClockSource+0x1aa>
 800bf54:	e062      	b.n	800c01c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6818      	ldr	r0, [r3, #0]
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	6899      	ldr	r1, [r3, #8]
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	685a      	ldr	r2, [r3, #4]
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	f000 fc95 	bl	800c894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bf78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	609a      	str	r2, [r3, #8]
      break;
 800bf82:	e04f      	b.n	800c024 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6818      	ldr	r0, [r3, #0]
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	6899      	ldr	r1, [r3, #8]
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	685a      	ldr	r2, [r3, #4]
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	f000 fc7e 	bl	800c894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	689a      	ldr	r2, [r3, #8]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfa6:	609a      	str	r2, [r3, #8]
      break;
 800bfa8:	e03c      	b.n	800c024 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6818      	ldr	r0, [r3, #0]
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	6859      	ldr	r1, [r3, #4]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	f000 fbee 	bl	800c798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2150      	movs	r1, #80	; 0x50
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f000 fc48 	bl	800c858 <TIM_ITRx_SetConfig>
      break;
 800bfc8:	e02c      	b.n	800c024 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6818      	ldr	r0, [r3, #0]
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	6859      	ldr	r1, [r3, #4]
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	f000 fc0d 	bl	800c7f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2160      	movs	r1, #96	; 0x60
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 fc38 	bl	800c858 <TIM_ITRx_SetConfig>
      break;
 800bfe8:	e01c      	b.n	800c024 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6818      	ldr	r0, [r3, #0]
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	6859      	ldr	r1, [r3, #4]
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	461a      	mov	r2, r3
 800bff8:	f000 fbce 	bl	800c798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2140      	movs	r1, #64	; 0x40
 800c002:	4618      	mov	r0, r3
 800c004:	f000 fc28 	bl	800c858 <TIM_ITRx_SetConfig>
      break;
 800c008:	e00c      	b.n	800c024 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4619      	mov	r1, r3
 800c014:	4610      	mov	r0, r2
 800c016:	f000 fc1f 	bl	800c858 <TIM_ITRx_SetConfig>
      break;
 800c01a:	e003      	b.n	800c024 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c01c:	2301      	movs	r3, #1
 800c01e:	73fb      	strb	r3, [r7, #15]
      break;
 800c020:	e000      	b.n	800c024 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c022:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2201      	movs	r2, #1
 800c028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c034:	7bfb      	ldrb	r3, [r7, #15]
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	ffceff88 	.word	0xffceff88
 800c044:	00100040 	.word	0x00100040
 800c048:	00100030 	.word	0x00100030
 800c04c:	00100020 	.word	0x00100020

0800c050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c06c:	bf00      	nop
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a44      	ldr	r2, [pc, #272]	; (800c1c4 <TIM_Base_SetConfig+0x124>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d013      	beq.n	800c0e0 <TIM_Base_SetConfig+0x40>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0be:	d00f      	beq.n	800c0e0 <TIM_Base_SetConfig+0x40>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4a41      	ldr	r2, [pc, #260]	; (800c1c8 <TIM_Base_SetConfig+0x128>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d00b      	beq.n	800c0e0 <TIM_Base_SetConfig+0x40>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4a40      	ldr	r2, [pc, #256]	; (800c1cc <TIM_Base_SetConfig+0x12c>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d007      	beq.n	800c0e0 <TIM_Base_SetConfig+0x40>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4a3f      	ldr	r2, [pc, #252]	; (800c1d0 <TIM_Base_SetConfig+0x130>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d003      	beq.n	800c0e0 <TIM_Base_SetConfig+0x40>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4a3e      	ldr	r2, [pc, #248]	; (800c1d4 <TIM_Base_SetConfig+0x134>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d108      	bne.n	800c0f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	4a33      	ldr	r2, [pc, #204]	; (800c1c4 <TIM_Base_SetConfig+0x124>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d027      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c100:	d023      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4a30      	ldr	r2, [pc, #192]	; (800c1c8 <TIM_Base_SetConfig+0x128>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d01f      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	4a2f      	ldr	r2, [pc, #188]	; (800c1cc <TIM_Base_SetConfig+0x12c>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d01b      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	4a2e      	ldr	r2, [pc, #184]	; (800c1d0 <TIM_Base_SetConfig+0x130>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d017      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4a2d      	ldr	r2, [pc, #180]	; (800c1d4 <TIM_Base_SetConfig+0x134>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d013      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4a2c      	ldr	r2, [pc, #176]	; (800c1d8 <TIM_Base_SetConfig+0x138>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d00f      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4a2b      	ldr	r2, [pc, #172]	; (800c1dc <TIM_Base_SetConfig+0x13c>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d00b      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4a2a      	ldr	r2, [pc, #168]	; (800c1e0 <TIM_Base_SetConfig+0x140>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d007      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a29      	ldr	r2, [pc, #164]	; (800c1e4 <TIM_Base_SetConfig+0x144>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d003      	beq.n	800c14a <TIM_Base_SetConfig+0xaa>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	4a28      	ldr	r2, [pc, #160]	; (800c1e8 <TIM_Base_SetConfig+0x148>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d108      	bne.n	800c15c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	4313      	orrs	r3, r2
 800c15a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	695b      	ldr	r3, [r3, #20]
 800c166:	4313      	orrs	r3, r2
 800c168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	689a      	ldr	r2, [r3, #8]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4a10      	ldr	r2, [pc, #64]	; (800c1c4 <TIM_Base_SetConfig+0x124>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d00f      	beq.n	800c1a8 <TIM_Base_SetConfig+0x108>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a12      	ldr	r2, [pc, #72]	; (800c1d4 <TIM_Base_SetConfig+0x134>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d00b      	beq.n	800c1a8 <TIM_Base_SetConfig+0x108>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a11      	ldr	r2, [pc, #68]	; (800c1d8 <TIM_Base_SetConfig+0x138>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d007      	beq.n	800c1a8 <TIM_Base_SetConfig+0x108>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a10      	ldr	r2, [pc, #64]	; (800c1dc <TIM_Base_SetConfig+0x13c>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d003      	beq.n	800c1a8 <TIM_Base_SetConfig+0x108>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a0f      	ldr	r2, [pc, #60]	; (800c1e0 <TIM_Base_SetConfig+0x140>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d103      	bne.n	800c1b0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	691a      	ldr	r2, [r3, #16]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	615a      	str	r2, [r3, #20]
}
 800c1b6:	bf00      	nop
 800c1b8:	3714      	adds	r7, #20
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop
 800c1c4:	40010000 	.word	0x40010000
 800c1c8:	40000400 	.word	0x40000400
 800c1cc:	40000800 	.word	0x40000800
 800c1d0:	40000c00 	.word	0x40000c00
 800c1d4:	40010400 	.word	0x40010400
 800c1d8:	40014000 	.word	0x40014000
 800c1dc:	40014400 	.word	0x40014400
 800c1e0:	40014800 	.word	0x40014800
 800c1e4:	4000e000 	.word	0x4000e000
 800c1e8:	4000e400 	.word	0x4000e400

0800c1ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b087      	sub	sp, #28
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	f023 0201 	bic.w	r2, r3, #1
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	699b      	ldr	r3, [r3, #24]
 800c212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	4b37      	ldr	r3, [pc, #220]	; (800c2f4 <TIM_OC1_SetConfig+0x108>)
 800c218:	4013      	ands	r3, r2
 800c21a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f023 0303 	bic.w	r3, r3, #3
 800c222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	4313      	orrs	r3, r2
 800c22c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	f023 0302 	bic.w	r3, r3, #2
 800c234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	697a      	ldr	r2, [r7, #20]
 800c23c:	4313      	orrs	r3, r2
 800c23e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a2d      	ldr	r2, [pc, #180]	; (800c2f8 <TIM_OC1_SetConfig+0x10c>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d00f      	beq.n	800c268 <TIM_OC1_SetConfig+0x7c>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4a2c      	ldr	r2, [pc, #176]	; (800c2fc <TIM_OC1_SetConfig+0x110>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d00b      	beq.n	800c268 <TIM_OC1_SetConfig+0x7c>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a2b      	ldr	r2, [pc, #172]	; (800c300 <TIM_OC1_SetConfig+0x114>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d007      	beq.n	800c268 <TIM_OC1_SetConfig+0x7c>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a2a      	ldr	r2, [pc, #168]	; (800c304 <TIM_OC1_SetConfig+0x118>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d003      	beq.n	800c268 <TIM_OC1_SetConfig+0x7c>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a29      	ldr	r2, [pc, #164]	; (800c308 <TIM_OC1_SetConfig+0x11c>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d10c      	bne.n	800c282 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	f023 0308 	bic.w	r3, r3, #8
 800c26e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	697a      	ldr	r2, [r7, #20]
 800c276:	4313      	orrs	r3, r2
 800c278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	f023 0304 	bic.w	r3, r3, #4
 800c280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a1c      	ldr	r2, [pc, #112]	; (800c2f8 <TIM_OC1_SetConfig+0x10c>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d00f      	beq.n	800c2aa <TIM_OC1_SetConfig+0xbe>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a1b      	ldr	r2, [pc, #108]	; (800c2fc <TIM_OC1_SetConfig+0x110>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d00b      	beq.n	800c2aa <TIM_OC1_SetConfig+0xbe>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a1a      	ldr	r2, [pc, #104]	; (800c300 <TIM_OC1_SetConfig+0x114>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d007      	beq.n	800c2aa <TIM_OC1_SetConfig+0xbe>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a19      	ldr	r2, [pc, #100]	; (800c304 <TIM_OC1_SetConfig+0x118>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d003      	beq.n	800c2aa <TIM_OC1_SetConfig+0xbe>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a18      	ldr	r2, [pc, #96]	; (800c308 <TIM_OC1_SetConfig+0x11c>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d111      	bne.n	800c2ce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c2b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	695b      	ldr	r3, [r3, #20]
 800c2be:	693a      	ldr	r2, [r7, #16]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	699b      	ldr	r3, [r3, #24]
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	685a      	ldr	r2, [r3, #4]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	621a      	str	r2, [r3, #32]
}
 800c2e8:	bf00      	nop
 800c2ea:	371c      	adds	r7, #28
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr
 800c2f4:	fffeff8f 	.word	0xfffeff8f
 800c2f8:	40010000 	.word	0x40010000
 800c2fc:	40010400 	.word	0x40010400
 800c300:	40014000 	.word	0x40014000
 800c304:	40014400 	.word	0x40014400
 800c308:	40014800 	.word	0x40014800

0800c30c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b087      	sub	sp, #28
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a1b      	ldr	r3, [r3, #32]
 800c31a:	f023 0210 	bic.w	r2, r3, #16
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6a1b      	ldr	r3, [r3, #32]
 800c326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	699b      	ldr	r3, [r3, #24]
 800c332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	4b34      	ldr	r3, [pc, #208]	; (800c408 <TIM_OC2_SetConfig+0xfc>)
 800c338:	4013      	ands	r3, r2
 800c33a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	021b      	lsls	r3, r3, #8
 800c34a:	68fa      	ldr	r2, [r7, #12]
 800c34c:	4313      	orrs	r3, r2
 800c34e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	f023 0320 	bic.w	r3, r3, #32
 800c356:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	011b      	lsls	r3, r3, #4
 800c35e:	697a      	ldr	r2, [r7, #20]
 800c360:	4313      	orrs	r3, r2
 800c362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4a29      	ldr	r2, [pc, #164]	; (800c40c <TIM_OC2_SetConfig+0x100>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d003      	beq.n	800c374 <TIM_OC2_SetConfig+0x68>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a28      	ldr	r2, [pc, #160]	; (800c410 <TIM_OC2_SetConfig+0x104>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d10d      	bne.n	800c390 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c37a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	011b      	lsls	r3, r3, #4
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	4313      	orrs	r3, r2
 800c386:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c38e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a1e      	ldr	r2, [pc, #120]	; (800c40c <TIM_OC2_SetConfig+0x100>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d00f      	beq.n	800c3b8 <TIM_OC2_SetConfig+0xac>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a1d      	ldr	r2, [pc, #116]	; (800c410 <TIM_OC2_SetConfig+0x104>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d00b      	beq.n	800c3b8 <TIM_OC2_SetConfig+0xac>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a1c      	ldr	r2, [pc, #112]	; (800c414 <TIM_OC2_SetConfig+0x108>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d007      	beq.n	800c3b8 <TIM_OC2_SetConfig+0xac>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a1b      	ldr	r2, [pc, #108]	; (800c418 <TIM_OC2_SetConfig+0x10c>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d003      	beq.n	800c3b8 <TIM_OC2_SetConfig+0xac>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	4a1a      	ldr	r2, [pc, #104]	; (800c41c <TIM_OC2_SetConfig+0x110>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d113      	bne.n	800c3e0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c3be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	695b      	ldr	r3, [r3, #20]
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	693a      	ldr	r2, [r7, #16]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	699b      	ldr	r3, [r3, #24]
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	693a      	ldr	r2, [r7, #16]
 800c3e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	685a      	ldr	r2, [r3, #4]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	621a      	str	r2, [r3, #32]
}
 800c3fa:	bf00      	nop
 800c3fc:	371c      	adds	r7, #28
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	feff8fff 	.word	0xfeff8fff
 800c40c:	40010000 	.word	0x40010000
 800c410:	40010400 	.word	0x40010400
 800c414:	40014000 	.word	0x40014000
 800c418:	40014400 	.word	0x40014400
 800c41c:	40014800 	.word	0x40014800

0800c420 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c420:	b480      	push	{r7}
 800c422:	b087      	sub	sp, #28
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a1b      	ldr	r3, [r3, #32]
 800c42e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6a1b      	ldr	r3, [r3, #32]
 800c43a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	69db      	ldr	r3, [r3, #28]
 800c446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	4b33      	ldr	r3, [pc, #204]	; (800c518 <TIM_OC3_SetConfig+0xf8>)
 800c44c:	4013      	ands	r3, r2
 800c44e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f023 0303 	bic.w	r3, r3, #3
 800c456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	4313      	orrs	r3, r2
 800c460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	021b      	lsls	r3, r3, #8
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	4313      	orrs	r3, r2
 800c474:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a28      	ldr	r2, [pc, #160]	; (800c51c <TIM_OC3_SetConfig+0xfc>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d003      	beq.n	800c486 <TIM_OC3_SetConfig+0x66>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a27      	ldr	r2, [pc, #156]	; (800c520 <TIM_OC3_SetConfig+0x100>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d10d      	bne.n	800c4a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c48c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	021b      	lsls	r3, r3, #8
 800c494:	697a      	ldr	r2, [r7, #20]
 800c496:	4313      	orrs	r3, r2
 800c498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c4a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a1d      	ldr	r2, [pc, #116]	; (800c51c <TIM_OC3_SetConfig+0xfc>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d00f      	beq.n	800c4ca <TIM_OC3_SetConfig+0xaa>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a1c      	ldr	r2, [pc, #112]	; (800c520 <TIM_OC3_SetConfig+0x100>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d00b      	beq.n	800c4ca <TIM_OC3_SetConfig+0xaa>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a1b      	ldr	r2, [pc, #108]	; (800c524 <TIM_OC3_SetConfig+0x104>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d007      	beq.n	800c4ca <TIM_OC3_SetConfig+0xaa>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a1a      	ldr	r2, [pc, #104]	; (800c528 <TIM_OC3_SetConfig+0x108>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d003      	beq.n	800c4ca <TIM_OC3_SetConfig+0xaa>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a19      	ldr	r2, [pc, #100]	; (800c52c <TIM_OC3_SetConfig+0x10c>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d113      	bne.n	800c4f2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c4d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	695b      	ldr	r3, [r3, #20]
 800c4de:	011b      	lsls	r3, r3, #4
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	011b      	lsls	r3, r3, #4
 800c4ec:	693a      	ldr	r2, [r7, #16]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	693a      	ldr	r2, [r7, #16]
 800c4f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	697a      	ldr	r2, [r7, #20]
 800c50a:	621a      	str	r2, [r3, #32]
}
 800c50c:	bf00      	nop
 800c50e:	371c      	adds	r7, #28
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr
 800c518:	fffeff8f 	.word	0xfffeff8f
 800c51c:	40010000 	.word	0x40010000
 800c520:	40010400 	.word	0x40010400
 800c524:	40014000 	.word	0x40014000
 800c528:	40014400 	.word	0x40014400
 800c52c:	40014800 	.word	0x40014800

0800c530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a1b      	ldr	r3, [r3, #32]
 800c53e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a1b      	ldr	r3, [r3, #32]
 800c54a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	69db      	ldr	r3, [r3, #28]
 800c556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	4b24      	ldr	r3, [pc, #144]	; (800c5ec <TIM_OC4_SetConfig+0xbc>)
 800c55c:	4013      	ands	r3, r2
 800c55e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	021b      	lsls	r3, r3, #8
 800c56e:	68fa      	ldr	r2, [r7, #12]
 800c570:	4313      	orrs	r3, r2
 800c572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c57a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	031b      	lsls	r3, r3, #12
 800c582:	693a      	ldr	r2, [r7, #16]
 800c584:	4313      	orrs	r3, r2
 800c586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4a19      	ldr	r2, [pc, #100]	; (800c5f0 <TIM_OC4_SetConfig+0xc0>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d00f      	beq.n	800c5b0 <TIM_OC4_SetConfig+0x80>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a18      	ldr	r2, [pc, #96]	; (800c5f4 <TIM_OC4_SetConfig+0xc4>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d00b      	beq.n	800c5b0 <TIM_OC4_SetConfig+0x80>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a17      	ldr	r2, [pc, #92]	; (800c5f8 <TIM_OC4_SetConfig+0xc8>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d007      	beq.n	800c5b0 <TIM_OC4_SetConfig+0x80>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a16      	ldr	r2, [pc, #88]	; (800c5fc <TIM_OC4_SetConfig+0xcc>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d003      	beq.n	800c5b0 <TIM_OC4_SetConfig+0x80>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4a15      	ldr	r2, [pc, #84]	; (800c600 <TIM_OC4_SetConfig+0xd0>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d109      	bne.n	800c5c4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c5b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	695b      	ldr	r3, [r3, #20]
 800c5bc:	019b      	lsls	r3, r3, #6
 800c5be:	697a      	ldr	r2, [r7, #20]
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	697a      	ldr	r2, [r7, #20]
 800c5c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	685a      	ldr	r2, [r3, #4]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	693a      	ldr	r2, [r7, #16]
 800c5dc:	621a      	str	r2, [r3, #32]
}
 800c5de:	bf00      	nop
 800c5e0:	371c      	adds	r7, #28
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop
 800c5ec:	feff8fff 	.word	0xfeff8fff
 800c5f0:	40010000 	.word	0x40010000
 800c5f4:	40010400 	.word	0x40010400
 800c5f8:	40014000 	.word	0x40014000
 800c5fc:	40014400 	.word	0x40014400
 800c600:	40014800 	.word	0x40014800

0800c604 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c604:	b480      	push	{r7}
 800c606:	b087      	sub	sp, #28
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c62c:	68fa      	ldr	r2, [r7, #12]
 800c62e:	4b21      	ldr	r3, [pc, #132]	; (800c6b4 <TIM_OC5_SetConfig+0xb0>)
 800c630:	4013      	ands	r3, r2
 800c632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c644:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	041b      	lsls	r3, r3, #16
 800c64c:	693a      	ldr	r2, [r7, #16]
 800c64e:	4313      	orrs	r3, r2
 800c650:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4a18      	ldr	r2, [pc, #96]	; (800c6b8 <TIM_OC5_SetConfig+0xb4>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d00f      	beq.n	800c67a <TIM_OC5_SetConfig+0x76>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4a17      	ldr	r2, [pc, #92]	; (800c6bc <TIM_OC5_SetConfig+0xb8>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d00b      	beq.n	800c67a <TIM_OC5_SetConfig+0x76>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a16      	ldr	r2, [pc, #88]	; (800c6c0 <TIM_OC5_SetConfig+0xbc>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d007      	beq.n	800c67a <TIM_OC5_SetConfig+0x76>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a15      	ldr	r2, [pc, #84]	; (800c6c4 <TIM_OC5_SetConfig+0xc0>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d003      	beq.n	800c67a <TIM_OC5_SetConfig+0x76>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4a14      	ldr	r2, [pc, #80]	; (800c6c8 <TIM_OC5_SetConfig+0xc4>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d109      	bne.n	800c68e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c680:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	695b      	ldr	r3, [r3, #20]
 800c686:	021b      	lsls	r3, r3, #8
 800c688:	697a      	ldr	r2, [r7, #20]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	697a      	ldr	r2, [r7, #20]
 800c692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	68fa      	ldr	r2, [r7, #12]
 800c698:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	693a      	ldr	r2, [r7, #16]
 800c6a6:	621a      	str	r2, [r3, #32]
}
 800c6a8:	bf00      	nop
 800c6aa:	371c      	adds	r7, #28
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr
 800c6b4:	fffeff8f 	.word	0xfffeff8f
 800c6b8:	40010000 	.word	0x40010000
 800c6bc:	40010400 	.word	0x40010400
 800c6c0:	40014000 	.word	0x40014000
 800c6c4:	40014400 	.word	0x40014400
 800c6c8:	40014800 	.word	0x40014800

0800c6cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b087      	sub	sp, #28
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6a1b      	ldr	r3, [r3, #32]
 800c6e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	4b22      	ldr	r3, [pc, #136]	; (800c780 <TIM_OC6_SetConfig+0xb4>)
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	021b      	lsls	r3, r3, #8
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	4313      	orrs	r3, r2
 800c706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c70e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	051b      	lsls	r3, r3, #20
 800c716:	693a      	ldr	r2, [r7, #16]
 800c718:	4313      	orrs	r3, r2
 800c71a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4a19      	ldr	r2, [pc, #100]	; (800c784 <TIM_OC6_SetConfig+0xb8>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d00f      	beq.n	800c744 <TIM_OC6_SetConfig+0x78>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4a18      	ldr	r2, [pc, #96]	; (800c788 <TIM_OC6_SetConfig+0xbc>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d00b      	beq.n	800c744 <TIM_OC6_SetConfig+0x78>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4a17      	ldr	r2, [pc, #92]	; (800c78c <TIM_OC6_SetConfig+0xc0>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d007      	beq.n	800c744 <TIM_OC6_SetConfig+0x78>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4a16      	ldr	r2, [pc, #88]	; (800c790 <TIM_OC6_SetConfig+0xc4>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d003      	beq.n	800c744 <TIM_OC6_SetConfig+0x78>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4a15      	ldr	r2, [pc, #84]	; (800c794 <TIM_OC6_SetConfig+0xc8>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d109      	bne.n	800c758 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c74a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	695b      	ldr	r3, [r3, #20]
 800c750:	029b      	lsls	r3, r3, #10
 800c752:	697a      	ldr	r2, [r7, #20]
 800c754:	4313      	orrs	r3, r2
 800c756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	697a      	ldr	r2, [r7, #20]
 800c75c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	693a      	ldr	r2, [r7, #16]
 800c770:	621a      	str	r2, [r3, #32]
}
 800c772:	bf00      	nop
 800c774:	371c      	adds	r7, #28
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop
 800c780:	feff8fff 	.word	0xfeff8fff
 800c784:	40010000 	.word	0x40010000
 800c788:	40010400 	.word	0x40010400
 800c78c:	40014000 	.word	0x40014000
 800c790:	40014400 	.word	0x40014400
 800c794:	40014800 	.word	0x40014800

0800c798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c798:	b480      	push	{r7}
 800c79a:	b087      	sub	sp, #28
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6a1b      	ldr	r3, [r3, #32]
 800c7a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	6a1b      	ldr	r3, [r3, #32]
 800c7ae:	f023 0201 	bic.w	r2, r3, #1
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	699b      	ldr	r3, [r3, #24]
 800c7ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	011b      	lsls	r3, r3, #4
 800c7c8:	693a      	ldr	r2, [r7, #16]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	f023 030a 	bic.w	r3, r3, #10
 800c7d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c7d6:	697a      	ldr	r2, [r7, #20]
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	693a      	ldr	r2, [r7, #16]
 800c7e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	697a      	ldr	r2, [r7, #20]
 800c7e8:	621a      	str	r2, [r3, #32]
}
 800c7ea:	bf00      	nop
 800c7ec:	371c      	adds	r7, #28
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f4:	4770      	bx	lr

0800c7f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7f6:	b480      	push	{r7}
 800c7f8:	b087      	sub	sp, #28
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	60f8      	str	r0, [r7, #12]
 800c7fe:	60b9      	str	r1, [r7, #8]
 800c800:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6a1b      	ldr	r3, [r3, #32]
 800c806:	f023 0210 	bic.w	r2, r3, #16
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	699b      	ldr	r3, [r3, #24]
 800c812:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6a1b      	ldr	r3, [r3, #32]
 800c818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c820:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	031b      	lsls	r3, r3, #12
 800c826:	697a      	ldr	r2, [r7, #20]
 800c828:	4313      	orrs	r3, r2
 800c82a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c832:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	011b      	lsls	r3, r3, #4
 800c838:	693a      	ldr	r2, [r7, #16]
 800c83a:	4313      	orrs	r3, r2
 800c83c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	697a      	ldr	r2, [r7, #20]
 800c842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	693a      	ldr	r2, [r7, #16]
 800c848:	621a      	str	r2, [r3, #32]
}
 800c84a:	bf00      	nop
 800c84c:	371c      	adds	r7, #28
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr
	...

0800c858 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	689b      	ldr	r3, [r3, #8]
 800c866:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	4b09      	ldr	r3, [pc, #36]	; (800c890 <TIM_ITRx_SetConfig+0x38>)
 800c86c:	4013      	ands	r3, r2
 800c86e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c870:	683a      	ldr	r2, [r7, #0]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	4313      	orrs	r3, r2
 800c876:	f043 0307 	orr.w	r3, r3, #7
 800c87a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	609a      	str	r2, [r3, #8]
}
 800c882:	bf00      	nop
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	ffcfff8f 	.word	0xffcfff8f

0800c894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c894:	b480      	push	{r7}
 800c896:	b087      	sub	sp, #28
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
 800c8a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c8ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	021a      	lsls	r2, r3, #8
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	431a      	orrs	r2, r3
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	697a      	ldr	r2, [r7, #20]
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	697a      	ldr	r2, [r7, #20]
 800c8c6:	609a      	str	r2, [r3, #8]
}
 800c8c8:	bf00      	nop
 800c8ca:	371c      	adds	r7, #28
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b087      	sub	sp, #28
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	f003 031f 	and.w	r3, r3, #31
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6a1a      	ldr	r2, [r3, #32]
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	43db      	mvns	r3, r3
 800c8f6:	401a      	ands	r2, r3
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6a1a      	ldr	r2, [r3, #32]
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	f003 031f 	and.w	r3, r3, #31
 800c906:	6879      	ldr	r1, [r7, #4]
 800c908:	fa01 f303 	lsl.w	r3, r1, r3
 800c90c:	431a      	orrs	r2, r3
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	621a      	str	r2, [r3, #32]
}
 800c912:	bf00      	nop
 800c914:	371c      	adds	r7, #28
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
	...

0800c920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c920:	b480      	push	{r7}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c930:	2b01      	cmp	r3, #1
 800c932:	d101      	bne.n	800c938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c934:	2302      	movs	r3, #2
 800c936:	e077      	b.n	800ca28 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2202      	movs	r2, #2
 800c944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a35      	ldr	r2, [pc, #212]	; (800ca34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d004      	beq.n	800c96c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a34      	ldr	r2, [pc, #208]	; (800ca38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d108      	bne.n	800c97e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c972:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	4313      	orrs	r3, r2
 800c97c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c984:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	68fa      	ldr	r2, [r7, #12]
 800c98c:	4313      	orrs	r3, r2
 800c98e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a25      	ldr	r2, [pc, #148]	; (800ca34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d02c      	beq.n	800c9fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9aa:	d027      	beq.n	800c9fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a22      	ldr	r2, [pc, #136]	; (800ca3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d022      	beq.n	800c9fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a21      	ldr	r2, [pc, #132]	; (800ca40 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d01d      	beq.n	800c9fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a1f      	ldr	r2, [pc, #124]	; (800ca44 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d018      	beq.n	800c9fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a1a      	ldr	r2, [pc, #104]	; (800ca38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d013      	beq.n	800c9fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a1b      	ldr	r2, [pc, #108]	; (800ca48 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d00e      	beq.n	800c9fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a1a      	ldr	r2, [pc, #104]	; (800ca4c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d009      	beq.n	800c9fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a18      	ldr	r2, [pc, #96]	; (800ca50 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d004      	beq.n	800c9fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a17      	ldr	r2, [pc, #92]	; (800ca54 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d10c      	bne.n	800ca16 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	68ba      	ldr	r2, [r7, #8]
 800ca14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3714      	adds	r7, #20
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr
 800ca34:	40010000 	.word	0x40010000
 800ca38:	40010400 	.word	0x40010400
 800ca3c:	40000400 	.word	0x40000400
 800ca40:	40000800 	.word	0x40000800
 800ca44:	40000c00 	.word	0x40000c00
 800ca48:	40001800 	.word	0x40001800
 800ca4c:	40014000 	.word	0x40014000
 800ca50:	4000e000 	.word	0x4000e000
 800ca54:	4000e400 	.word	0x4000e400

0800ca58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ca62:	2300      	movs	r3, #0
 800ca64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d101      	bne.n	800ca74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ca70:	2302      	movs	r3, #2
 800ca72:	e087      	b.n	800cb84 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	4313      	orrs	r3, r2
 800ca88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	4313      	orrs	r3, r2
 800ca96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	4313      	orrs	r3, r2
 800caa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4313      	orrs	r3, r2
 800cab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	691b      	ldr	r3, [r3, #16]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	695b      	ldr	r3, [r3, #20]
 800cacc:	4313      	orrs	r3, r2
 800cace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cada:	4313      	orrs	r3, r2
 800cadc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	699b      	ldr	r3, [r3, #24]
 800cae8:	041b      	lsls	r3, r3, #16
 800caea:	4313      	orrs	r3, r2
 800caec:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a27      	ldr	r2, [pc, #156]	; (800cb90 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d004      	beq.n	800cb02 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a25      	ldr	r2, [pc, #148]	; (800cb94 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d106      	bne.n	800cb10 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	69db      	ldr	r3, [r3, #28]
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a1e      	ldr	r2, [pc, #120]	; (800cb90 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d004      	beq.n	800cb24 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4a1d      	ldr	r2, [pc, #116]	; (800cb94 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d126      	bne.n	800cb72 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb2e:	051b      	lsls	r3, r3, #20
 800cb30:	4313      	orrs	r3, r2
 800cb32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	6a1b      	ldr	r3, [r3, #32]
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a0e      	ldr	r2, [pc, #56]	; (800cb90 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d004      	beq.n	800cb64 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a0d      	ldr	r2, [pc, #52]	; (800cb94 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d106      	bne.n	800cb72 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	68fa      	ldr	r2, [r7, #12]
 800cb78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3714      	adds	r7, #20
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr
 800cb90:	40010000 	.word	0x40010000
 800cb94:	40010400 	.word	0x40010400

0800cb98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cba0:	bf00      	nop
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cbb4:	bf00      	nop
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cbc8:	bf00      	nop
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d101      	bne.n	800cbe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	e042      	b.n	800cc6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d106      	bne.n	800cbfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7f8 fcc9 	bl	8005590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2224      	movs	r2, #36	; 0x24
 800cc02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f022 0201 	bic.w	r2, r2, #1
 800cc14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fcdc 	bl	800d5d4 <UART_SetConfig>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d101      	bne.n	800cc26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	e022      	b.n	800cc6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d002      	beq.n	800cc34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f001 fb3c 	bl	800e2ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	685a      	ldr	r2, [r3, #4]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cc42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	689a      	ldr	r2, [r3, #8]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f042 0201 	orr.w	r2, r2, #1
 800cc62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f001 fbc3 	bl	800e3f0 <UART_CheckIdleState>
 800cc6a:	4603      	mov	r3, r0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b08a      	sub	sp, #40	; 0x28
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	4613      	mov	r3, r2
 800cc80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc88:	2b20      	cmp	r3, #32
 800cc8a:	d17a      	bne.n	800cd82 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d002      	beq.n	800cc98 <HAL_UART_Transmit_DMA+0x24>
 800cc92:	88fb      	ldrh	r3, [r7, #6]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d101      	bne.n	800cc9c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e073      	b.n	800cd84 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d101      	bne.n	800ccaa <HAL_UART_Transmit_DMA+0x36>
 800cca6:	2302      	movs	r3, #2
 800cca8:	e06c      	b.n	800cd84 <HAL_UART_Transmit_DMA+0x110>
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2201      	movs	r2, #1
 800ccae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	88fa      	ldrh	r2, [r7, #6]
 800ccbc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	88fa      	ldrh	r2, [r7, #6]
 800ccc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2221      	movs	r2, #33	; 0x21
 800ccd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d02c      	beq.n	800cd3a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cce4:	4a29      	ldr	r2, [pc, #164]	; (800cd8c <HAL_UART_Transmit_DMA+0x118>)
 800cce6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccec:	4a28      	ldr	r2, [pc, #160]	; (800cd90 <HAL_UART_Transmit_DMA+0x11c>)
 800ccee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccf4:	4a27      	ldr	r2, [pc, #156]	; (800cd94 <HAL_UART_Transmit_DMA+0x120>)
 800ccf6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd08:	4619      	mov	r1, r3
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	3328      	adds	r3, #40	; 0x28
 800cd10:	461a      	mov	r2, r3
 800cd12:	88fb      	ldrh	r3, [r7, #6]
 800cd14:	f7f9 fb5e 	bl	80063d4 <HAL_DMA_Start_IT>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00d      	beq.n	800cd3a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2210      	movs	r2, #16
 800cd22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2220      	movs	r2, #32
 800cd32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800cd36:	2301      	movs	r3, #1
 800cd38:	e024      	b.n	800cd84 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2240      	movs	r2, #64	; 0x40
 800cd40:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2200      	movs	r2, #0
 800cd46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	3308      	adds	r3, #8
 800cd50:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	e853 3f00 	ldrex	r3, [r3]
 800cd58:	613b      	str	r3, [r7, #16]
   return(result);
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd60:	627b      	str	r3, [r7, #36]	; 0x24
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	3308      	adds	r3, #8
 800cd68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd6a:	623a      	str	r2, [r7, #32]
 800cd6c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6e:	69f9      	ldr	r1, [r7, #28]
 800cd70:	6a3a      	ldr	r2, [r7, #32]
 800cd72:	e841 2300 	strex	r3, r2, [r1]
 800cd76:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd78:	69bb      	ldr	r3, [r7, #24]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d1e5      	bne.n	800cd4a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	e000      	b.n	800cd84 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800cd82:	2302      	movs	r3, #2
  }
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3728      	adds	r7, #40	; 0x28
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	0800e8b9 	.word	0x0800e8b9
 800cd90:	0800e94f 	.word	0x0800e94f
 800cd94:	0800eac5 	.word	0x0800eac5

0800cd98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b08a      	sub	sp, #40	; 0x28
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	4613      	mov	r3, r2
 800cda4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdac:	2b20      	cmp	r3, #32
 800cdae:	d142      	bne.n	800ce36 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d002      	beq.n	800cdbc <HAL_UART_Receive_DMA+0x24>
 800cdb6:	88fb      	ldrh	r3, [r7, #6]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d101      	bne.n	800cdc0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	e03b      	b.n	800ce38 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d101      	bne.n	800cdce <HAL_UART_Receive_DMA+0x36>
 800cdca:	2302      	movs	r3, #2
 800cdcc:	e034      	b.n	800ce38 <HAL_UART_Receive_DMA+0xa0>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a17      	ldr	r2, [pc, #92]	; (800ce40 <HAL_UART_Receive_DMA+0xa8>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d01f      	beq.n	800ce26 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d018      	beq.n	800ce26 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	e853 3f00 	ldrex	r3, [r3]
 800ce00:	613b      	str	r3, [r7, #16]
   return(result);
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce08:	627b      	str	r3, [r7, #36]	; 0x24
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	461a      	mov	r2, r3
 800ce10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce12:	623b      	str	r3, [r7, #32]
 800ce14:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce16:	69f9      	ldr	r1, [r7, #28]
 800ce18:	6a3a      	ldr	r2, [r7, #32]
 800ce1a:	e841 2300 	strex	r3, r2, [r1]
 800ce1e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d1e6      	bne.n	800cdf4 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ce26:	88fb      	ldrh	r3, [r7, #6]
 800ce28:	461a      	mov	r2, r3
 800ce2a:	68b9      	ldr	r1, [r7, #8]
 800ce2c:	68f8      	ldr	r0, [r7, #12]
 800ce2e:	f001 fbf3 	bl	800e618 <UART_Start_Receive_DMA>
 800ce32:	4603      	mov	r3, r0
 800ce34:	e000      	b.n	800ce38 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ce36:	2302      	movs	r3, #2
  }
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3728      	adds	r7, #40	; 0x28
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	58000c00 	.word	0x58000c00

0800ce44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b0ba      	sub	sp, #232	; 0xe8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	69db      	ldr	r3, [r3, #28]
 800ce52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ce6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ce6e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ce72:	4013      	ands	r3, r2
 800ce74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ce78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d11b      	bne.n	800ceb8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ce80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce84:	f003 0320 	and.w	r3, r3, #32
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d015      	beq.n	800ceb8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ce8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce90:	f003 0320 	and.w	r3, r3, #32
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d105      	bne.n	800cea4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d009      	beq.n	800ceb8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f000 835a 	beq.w	800d562 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	4798      	blx	r3
      }
      return;
 800ceb6:	e354      	b.n	800d562 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ceb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f000 811f 	beq.w	800d100 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cec2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cec6:	4b8b      	ldr	r3, [pc, #556]	; (800d0f4 <HAL_UART_IRQHandler+0x2b0>)
 800cec8:	4013      	ands	r3, r2
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d106      	bne.n	800cedc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cece:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ced2:	4b89      	ldr	r3, [pc, #548]	; (800d0f8 <HAL_UART_IRQHandler+0x2b4>)
 800ced4:	4013      	ands	r3, r2
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f000 8112 	beq.w	800d100 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cedc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cee0:	f003 0301 	and.w	r3, r3, #1
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d011      	beq.n	800cf0c <HAL_UART_IRQHandler+0xc8>
 800cee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ceec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00b      	beq.n	800cf0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	2201      	movs	r2, #1
 800cefa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf02:	f043 0201 	orr.w	r2, r3, #1
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf10:	f003 0302 	and.w	r3, r3, #2
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d011      	beq.n	800cf3c <HAL_UART_IRQHandler+0xf8>
 800cf18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d00b      	beq.n	800cf3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2202      	movs	r2, #2
 800cf2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf32:	f043 0204 	orr.w	r2, r3, #4
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf40:	f003 0304 	and.w	r3, r3, #4
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d011      	beq.n	800cf6c <HAL_UART_IRQHandler+0x128>
 800cf48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf4c:	f003 0301 	and.w	r3, r3, #1
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d00b      	beq.n	800cf6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2204      	movs	r2, #4
 800cf5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf62:	f043 0202 	orr.w	r2, r3, #2
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cf6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf70:	f003 0308 	and.w	r3, r3, #8
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d017      	beq.n	800cfa8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf7c:	f003 0320 	and.w	r3, r3, #32
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d105      	bne.n	800cf90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cf84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf88:	4b5a      	ldr	r3, [pc, #360]	; (800d0f4 <HAL_UART_IRQHandler+0x2b0>)
 800cf8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00b      	beq.n	800cfa8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2208      	movs	r2, #8
 800cf96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf9e:	f043 0208 	orr.w	r2, r3, #8
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cfa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d012      	beq.n	800cfda <HAL_UART_IRQHandler+0x196>
 800cfb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00c      	beq.n	800cfda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfd0:	f043 0220 	orr.w	r2, r3, #32
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f000 82c0 	beq.w	800d566 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cfe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfea:	f003 0320 	and.w	r3, r3, #32
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d013      	beq.n	800d01a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cff6:	f003 0320 	and.w	r3, r3, #32
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d105      	bne.n	800d00a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d006:	2b00      	cmp	r3, #0
 800d008:	d007      	beq.n	800d01a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d003      	beq.n	800d01a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d020:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	689b      	ldr	r3, [r3, #8]
 800d02a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d02e:	2b40      	cmp	r3, #64	; 0x40
 800d030:	d005      	beq.n	800d03e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d036:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d04f      	beq.n	800d0de <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f001 fbd4 	bl	800e7ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d04e:	2b40      	cmp	r3, #64	; 0x40
 800d050:	d141      	bne.n	800d0d6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	3308      	adds	r3, #8
 800d058:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d05c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d060:	e853 3f00 	ldrex	r3, [r3]
 800d064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d068:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d06c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	3308      	adds	r3, #8
 800d07a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d07e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d082:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d086:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d08a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d08e:	e841 2300 	strex	r3, r2, [r1]
 800d092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d1d9      	bne.n	800d052 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d013      	beq.n	800d0ce <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0aa:	4a14      	ldr	r2, [pc, #80]	; (800d0fc <HAL_UART_IRQHandler+0x2b8>)
 800d0ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7f9 ff16 	bl	8006ee4 <HAL_DMA_Abort_IT>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d017      	beq.n	800d0ee <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0cc:	e00f      	b.n	800d0ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 fa6a 	bl	800d5a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0d4:	e00b      	b.n	800d0ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 fa66 	bl	800d5a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0dc:	e007      	b.n	800d0ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 fa62 	bl	800d5a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d0ec:	e23b      	b.n	800d566 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0ee:	bf00      	nop
    return;
 800d0f0:	e239      	b.n	800d566 <HAL_UART_IRQHandler+0x722>
 800d0f2:	bf00      	nop
 800d0f4:	10000001 	.word	0x10000001
 800d0f8:	04000120 	.word	0x04000120
 800d0fc:	0800eb45 	.word	0x0800eb45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d104:	2b01      	cmp	r3, #1
 800d106:	f040 81ce 	bne.w	800d4a6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d10e:	f003 0310 	and.w	r3, r3, #16
 800d112:	2b00      	cmp	r3, #0
 800d114:	f000 81c7 	beq.w	800d4a6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d11c:	f003 0310 	and.w	r3, r3, #16
 800d120:	2b00      	cmp	r3, #0
 800d122:	f000 81c0 	beq.w	800d4a6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	2210      	movs	r2, #16
 800d12c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d138:	2b40      	cmp	r3, #64	; 0x40
 800d13a:	f040 813b 	bne.w	800d3b4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a8b      	ldr	r2, [pc, #556]	; (800d374 <HAL_UART_IRQHandler+0x530>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d059      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a89      	ldr	r2, [pc, #548]	; (800d378 <HAL_UART_IRQHandler+0x534>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d053      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a87      	ldr	r2, [pc, #540]	; (800d37c <HAL_UART_IRQHandler+0x538>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d04d      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a85      	ldr	r2, [pc, #532]	; (800d380 <HAL_UART_IRQHandler+0x53c>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d047      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a83      	ldr	r2, [pc, #524]	; (800d384 <HAL_UART_IRQHandler+0x540>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d041      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a81      	ldr	r2, [pc, #516]	; (800d388 <HAL_UART_IRQHandler+0x544>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d03b      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a7f      	ldr	r2, [pc, #508]	; (800d38c <HAL_UART_IRQHandler+0x548>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d035      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a7d      	ldr	r2, [pc, #500]	; (800d390 <HAL_UART_IRQHandler+0x54c>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d02f      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a7b      	ldr	r2, [pc, #492]	; (800d394 <HAL_UART_IRQHandler+0x550>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d029      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a79      	ldr	r2, [pc, #484]	; (800d398 <HAL_UART_IRQHandler+0x554>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d023      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a77      	ldr	r2, [pc, #476]	; (800d39c <HAL_UART_IRQHandler+0x558>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d01d      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a75      	ldr	r2, [pc, #468]	; (800d3a0 <HAL_UART_IRQHandler+0x55c>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d017      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a73      	ldr	r2, [pc, #460]	; (800d3a4 <HAL_UART_IRQHandler+0x560>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d011      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a71      	ldr	r2, [pc, #452]	; (800d3a8 <HAL_UART_IRQHandler+0x564>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d00b      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a6f      	ldr	r2, [pc, #444]	; (800d3ac <HAL_UART_IRQHandler+0x568>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d005      	beq.n	800d1fe <HAL_UART_IRQHandler+0x3ba>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a6d      	ldr	r2, [pc, #436]	; (800d3b0 <HAL_UART_IRQHandler+0x56c>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d105      	bne.n	800d20a <HAL_UART_IRQHandler+0x3c6>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	b29b      	uxth	r3, r3
 800d208:	e004      	b.n	800d214 <HAL_UART_IRQHandler+0x3d0>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	b29b      	uxth	r3, r3
 800d214:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d218:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	f000 81a4 	beq.w	800d56a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d228:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d22c:	429a      	cmp	r2, r3
 800d22e:	f080 819c 	bcs.w	800d56a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d238:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d240:	69db      	ldr	r3, [r3, #28]
 800d242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d246:	f000 8086 	beq.w	800d356 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d252:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d256:	e853 3f00 	ldrex	r3, [r3]
 800d25a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d25e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d266:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	461a      	mov	r2, r3
 800d270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d274:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d278:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d280:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d284:	e841 2300 	strex	r3, r2, [r1]
 800d288:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d28c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1da      	bne.n	800d24a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	3308      	adds	r3, #8
 800d29a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d29c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d29e:	e853 3f00 	ldrex	r3, [r3]
 800d2a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d2a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2a6:	f023 0301 	bic.w	r3, r3, #1
 800d2aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	3308      	adds	r3, #8
 800d2b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d2b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d2bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d2c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d2c4:	e841 2300 	strex	r3, r2, [r1]
 800d2c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d2ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d1e1      	bne.n	800d294 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	3308      	adds	r3, #8
 800d2d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2da:	e853 3f00 	ldrex	r3, [r3]
 800d2de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d2e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	3308      	adds	r3, #8
 800d2f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d2f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d2f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d2fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d2fc:	e841 2300 	strex	r3, r2, [r1]
 800d300:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1e3      	bne.n	800d2d0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2220      	movs	r2, #32
 800d30c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d31e:	e853 3f00 	ldrex	r3, [r3]
 800d322:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d326:	f023 0310 	bic.w	r3, r3, #16
 800d32a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	461a      	mov	r2, r3
 800d334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d338:	65bb      	str	r3, [r7, #88]	; 0x58
 800d33a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d33e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d340:	e841 2300 	strex	r3, r2, [r1]
 800d344:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d1e4      	bne.n	800d316 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d350:	4618      	mov	r0, r3
 800d352:	f7f9 faa9 	bl	80068a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d362:	b29b      	uxth	r3, r3
 800d364:	1ad3      	subs	r3, r2, r3
 800d366:	b29b      	uxth	r3, r3
 800d368:	4619      	mov	r1, r3
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 f926 	bl	800d5bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d370:	e0fb      	b.n	800d56a <HAL_UART_IRQHandler+0x726>
 800d372:	bf00      	nop
 800d374:	40020010 	.word	0x40020010
 800d378:	40020028 	.word	0x40020028
 800d37c:	40020040 	.word	0x40020040
 800d380:	40020058 	.word	0x40020058
 800d384:	40020070 	.word	0x40020070
 800d388:	40020088 	.word	0x40020088
 800d38c:	400200a0 	.word	0x400200a0
 800d390:	400200b8 	.word	0x400200b8
 800d394:	40020410 	.word	0x40020410
 800d398:	40020428 	.word	0x40020428
 800d39c:	40020440 	.word	0x40020440
 800d3a0:	40020458 	.word	0x40020458
 800d3a4:	40020470 	.word	0x40020470
 800d3a8:	40020488 	.word	0x40020488
 800d3ac:	400204a0 	.word	0x400204a0
 800d3b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	1ad3      	subs	r3, r2, r3
 800d3c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f000 80cc 	beq.w	800d56e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d3d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f000 80c7 	beq.w	800d56e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e8:	e853 3f00 	ldrex	r3, [r3]
 800d3ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d3f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d402:	647b      	str	r3, [r7, #68]	; 0x44
 800d404:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d406:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d40a:	e841 2300 	strex	r3, r2, [r1]
 800d40e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d412:	2b00      	cmp	r3, #0
 800d414:	d1e4      	bne.n	800d3e0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3308      	adds	r3, #8
 800d41c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d420:	e853 3f00 	ldrex	r3, [r3]
 800d424:	623b      	str	r3, [r7, #32]
   return(result);
 800d426:	6a3a      	ldr	r2, [r7, #32]
 800d428:	4b54      	ldr	r3, [pc, #336]	; (800d57c <HAL_UART_IRQHandler+0x738>)
 800d42a:	4013      	ands	r3, r2
 800d42c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	3308      	adds	r3, #8
 800d436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d43a:	633a      	str	r2, [r7, #48]	; 0x30
 800d43c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d442:	e841 2300 	strex	r3, r2, [r1]
 800d446:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1e3      	bne.n	800d416 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2220      	movs	r2, #32
 800d452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2200      	movs	r2, #0
 800d45a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	e853 3f00 	ldrex	r3, [r3]
 800d46e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f023 0310 	bic.w	r3, r3, #16
 800d476:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	461a      	mov	r2, r3
 800d480:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d484:	61fb      	str	r3, [r7, #28]
 800d486:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d488:	69b9      	ldr	r1, [r7, #24]
 800d48a:	69fa      	ldr	r2, [r7, #28]
 800d48c:	e841 2300 	strex	r3, r2, [r1]
 800d490:	617b      	str	r3, [r7, #20]
   return(result);
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d1e4      	bne.n	800d462 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d498:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d49c:	4619      	mov	r1, r3
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 f88c 	bl	800d5bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d4a4:	e063      	b.n	800d56e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d00e      	beq.n	800d4d0 <HAL_UART_IRQHandler+0x68c>
 800d4b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d008      	beq.n	800d4d0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d4c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f001 fb7c 	bl	800ebc6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4ce:	e051      	b.n	800d574 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d4d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d014      	beq.n	800d506 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d4dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d105      	bne.n	800d4f4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d4e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d008      	beq.n	800d506 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d03a      	beq.n	800d572 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	4798      	blx	r3
    }
    return;
 800d504:	e035      	b.n	800d572 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d50a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d009      	beq.n	800d526 <HAL_UART_IRQHandler+0x6e2>
 800d512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d003      	beq.n	800d526 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f001 fb26 	bl	800eb70 <UART_EndTransmit_IT>
    return;
 800d524:	e026      	b.n	800d574 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d52a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d009      	beq.n	800d546 <HAL_UART_IRQHandler+0x702>
 800d532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d536:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d003      	beq.n	800d546 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f001 fb55 	bl	800ebee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d544:	e016      	b.n	800d574 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d54a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d010      	beq.n	800d574 <HAL_UART_IRQHandler+0x730>
 800d552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d556:	2b00      	cmp	r3, #0
 800d558:	da0c      	bge.n	800d574 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f001 fb3d 	bl	800ebda <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d560:	e008      	b.n	800d574 <HAL_UART_IRQHandler+0x730>
      return;
 800d562:	bf00      	nop
 800d564:	e006      	b.n	800d574 <HAL_UART_IRQHandler+0x730>
    return;
 800d566:	bf00      	nop
 800d568:	e004      	b.n	800d574 <HAL_UART_IRQHandler+0x730>
      return;
 800d56a:	bf00      	nop
 800d56c:	e002      	b.n	800d574 <HAL_UART_IRQHandler+0x730>
      return;
 800d56e:	bf00      	nop
 800d570:	e000      	b.n	800d574 <HAL_UART_IRQHandler+0x730>
    return;
 800d572:	bf00      	nop
  }
}
 800d574:	37e8      	adds	r7, #232	; 0xe8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	effffffe 	.word	0xeffffffe

0800d580 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d580:	b480      	push	{r7}
 800d582:	b083      	sub	sp, #12
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d588:	bf00      	nop
 800d58a:	370c      	adds	r7, #12
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d59c:	bf00      	nop
 800d59e:	370c      	adds	r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d5c8:	bf00      	nop
 800d5ca:	370c      	adds	r7, #12
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d5d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d5d8:	b092      	sub	sp, #72	; 0x48
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	689a      	ldr	r2, [r3, #8]
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	691b      	ldr	r3, [r3, #16]
 800d5ec:	431a      	orrs	r2, r3
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	695b      	ldr	r3, [r3, #20]
 800d5f2:	431a      	orrs	r2, r3
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	69db      	ldr	r3, [r3, #28]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	4bbe      	ldr	r3, [pc, #760]	; (800d8fc <UART_SetConfig+0x328>)
 800d604:	4013      	ands	r3, r2
 800d606:	697a      	ldr	r2, [r7, #20]
 800d608:	6812      	ldr	r2, [r2, #0]
 800d60a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d60c:	430b      	orrs	r3, r1
 800d60e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	68da      	ldr	r2, [r3, #12]
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	430a      	orrs	r2, r1
 800d624:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	699b      	ldr	r3, [r3, #24]
 800d62a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4ab3      	ldr	r2, [pc, #716]	; (800d900 <UART_SetConfig+0x32c>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d004      	beq.n	800d640 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	6a1b      	ldr	r3, [r3, #32]
 800d63a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d63c:	4313      	orrs	r3, r2
 800d63e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	689a      	ldr	r2, [r3, #8]
 800d646:	4baf      	ldr	r3, [pc, #700]	; (800d904 <UART_SetConfig+0x330>)
 800d648:	4013      	ands	r3, r2
 800d64a:	697a      	ldr	r2, [r7, #20]
 800d64c:	6812      	ldr	r2, [r2, #0]
 800d64e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d650:	430b      	orrs	r3, r1
 800d652:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65a:	f023 010f 	bic.w	r1, r3, #15
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	430a      	orrs	r2, r1
 800d668:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	4aa6      	ldr	r2, [pc, #664]	; (800d908 <UART_SetConfig+0x334>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d177      	bne.n	800d764 <UART_SetConfig+0x190>
 800d674:	4ba5      	ldr	r3, [pc, #660]	; (800d90c <UART_SetConfig+0x338>)
 800d676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d678:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d67c:	2b28      	cmp	r3, #40	; 0x28
 800d67e:	d86d      	bhi.n	800d75c <UART_SetConfig+0x188>
 800d680:	a201      	add	r2, pc, #4	; (adr r2, 800d688 <UART_SetConfig+0xb4>)
 800d682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d686:	bf00      	nop
 800d688:	0800d72d 	.word	0x0800d72d
 800d68c:	0800d75d 	.word	0x0800d75d
 800d690:	0800d75d 	.word	0x0800d75d
 800d694:	0800d75d 	.word	0x0800d75d
 800d698:	0800d75d 	.word	0x0800d75d
 800d69c:	0800d75d 	.word	0x0800d75d
 800d6a0:	0800d75d 	.word	0x0800d75d
 800d6a4:	0800d75d 	.word	0x0800d75d
 800d6a8:	0800d735 	.word	0x0800d735
 800d6ac:	0800d75d 	.word	0x0800d75d
 800d6b0:	0800d75d 	.word	0x0800d75d
 800d6b4:	0800d75d 	.word	0x0800d75d
 800d6b8:	0800d75d 	.word	0x0800d75d
 800d6bc:	0800d75d 	.word	0x0800d75d
 800d6c0:	0800d75d 	.word	0x0800d75d
 800d6c4:	0800d75d 	.word	0x0800d75d
 800d6c8:	0800d73d 	.word	0x0800d73d
 800d6cc:	0800d75d 	.word	0x0800d75d
 800d6d0:	0800d75d 	.word	0x0800d75d
 800d6d4:	0800d75d 	.word	0x0800d75d
 800d6d8:	0800d75d 	.word	0x0800d75d
 800d6dc:	0800d75d 	.word	0x0800d75d
 800d6e0:	0800d75d 	.word	0x0800d75d
 800d6e4:	0800d75d 	.word	0x0800d75d
 800d6e8:	0800d745 	.word	0x0800d745
 800d6ec:	0800d75d 	.word	0x0800d75d
 800d6f0:	0800d75d 	.word	0x0800d75d
 800d6f4:	0800d75d 	.word	0x0800d75d
 800d6f8:	0800d75d 	.word	0x0800d75d
 800d6fc:	0800d75d 	.word	0x0800d75d
 800d700:	0800d75d 	.word	0x0800d75d
 800d704:	0800d75d 	.word	0x0800d75d
 800d708:	0800d74d 	.word	0x0800d74d
 800d70c:	0800d75d 	.word	0x0800d75d
 800d710:	0800d75d 	.word	0x0800d75d
 800d714:	0800d75d 	.word	0x0800d75d
 800d718:	0800d75d 	.word	0x0800d75d
 800d71c:	0800d75d 	.word	0x0800d75d
 800d720:	0800d75d 	.word	0x0800d75d
 800d724:	0800d75d 	.word	0x0800d75d
 800d728:	0800d755 	.word	0x0800d755
 800d72c:	2301      	movs	r3, #1
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d732:	e326      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d734:	2304      	movs	r3, #4
 800d736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73a:	e322      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d73c:	2308      	movs	r3, #8
 800d73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d742:	e31e      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d744:	2310      	movs	r3, #16
 800d746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d74a:	e31a      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d74c:	2320      	movs	r3, #32
 800d74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d752:	e316      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d754:	2340      	movs	r3, #64	; 0x40
 800d756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d75a:	e312      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d75c:	2380      	movs	r3, #128	; 0x80
 800d75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d762:	e30e      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4a69      	ldr	r2, [pc, #420]	; (800d910 <UART_SetConfig+0x33c>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d130      	bne.n	800d7d0 <UART_SetConfig+0x1fc>
 800d76e:	4b67      	ldr	r3, [pc, #412]	; (800d90c <UART_SetConfig+0x338>)
 800d770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d772:	f003 0307 	and.w	r3, r3, #7
 800d776:	2b05      	cmp	r3, #5
 800d778:	d826      	bhi.n	800d7c8 <UART_SetConfig+0x1f4>
 800d77a:	a201      	add	r2, pc, #4	; (adr r2, 800d780 <UART_SetConfig+0x1ac>)
 800d77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d780:	0800d799 	.word	0x0800d799
 800d784:	0800d7a1 	.word	0x0800d7a1
 800d788:	0800d7a9 	.word	0x0800d7a9
 800d78c:	0800d7b1 	.word	0x0800d7b1
 800d790:	0800d7b9 	.word	0x0800d7b9
 800d794:	0800d7c1 	.word	0x0800d7c1
 800d798:	2300      	movs	r3, #0
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79e:	e2f0      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d7a0:	2304      	movs	r3, #4
 800d7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a6:	e2ec      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d7a8:	2308      	movs	r3, #8
 800d7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ae:	e2e8      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d7b0:	2310      	movs	r3, #16
 800d7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7b6:	e2e4      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d7b8:	2320      	movs	r3, #32
 800d7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7be:	e2e0      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d7c0:	2340      	movs	r3, #64	; 0x40
 800d7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7c6:	e2dc      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d7c8:	2380      	movs	r3, #128	; 0x80
 800d7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ce:	e2d8      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a4f      	ldr	r2, [pc, #316]	; (800d914 <UART_SetConfig+0x340>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d130      	bne.n	800d83c <UART_SetConfig+0x268>
 800d7da:	4b4c      	ldr	r3, [pc, #304]	; (800d90c <UART_SetConfig+0x338>)
 800d7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7de:	f003 0307 	and.w	r3, r3, #7
 800d7e2:	2b05      	cmp	r3, #5
 800d7e4:	d826      	bhi.n	800d834 <UART_SetConfig+0x260>
 800d7e6:	a201      	add	r2, pc, #4	; (adr r2, 800d7ec <UART_SetConfig+0x218>)
 800d7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ec:	0800d805 	.word	0x0800d805
 800d7f0:	0800d80d 	.word	0x0800d80d
 800d7f4:	0800d815 	.word	0x0800d815
 800d7f8:	0800d81d 	.word	0x0800d81d
 800d7fc:	0800d825 	.word	0x0800d825
 800d800:	0800d82d 	.word	0x0800d82d
 800d804:	2300      	movs	r3, #0
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80a:	e2ba      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d80c:	2304      	movs	r3, #4
 800d80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d812:	e2b6      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d814:	2308      	movs	r3, #8
 800d816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d81a:	e2b2      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d81c:	2310      	movs	r3, #16
 800d81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d822:	e2ae      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d824:	2320      	movs	r3, #32
 800d826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d82a:	e2aa      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d82c:	2340      	movs	r3, #64	; 0x40
 800d82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d832:	e2a6      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d834:	2380      	movs	r3, #128	; 0x80
 800d836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d83a:	e2a2      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a35      	ldr	r2, [pc, #212]	; (800d918 <UART_SetConfig+0x344>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d130      	bne.n	800d8a8 <UART_SetConfig+0x2d4>
 800d846:	4b31      	ldr	r3, [pc, #196]	; (800d90c <UART_SetConfig+0x338>)
 800d848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d84a:	f003 0307 	and.w	r3, r3, #7
 800d84e:	2b05      	cmp	r3, #5
 800d850:	d826      	bhi.n	800d8a0 <UART_SetConfig+0x2cc>
 800d852:	a201      	add	r2, pc, #4	; (adr r2, 800d858 <UART_SetConfig+0x284>)
 800d854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d858:	0800d871 	.word	0x0800d871
 800d85c:	0800d879 	.word	0x0800d879
 800d860:	0800d881 	.word	0x0800d881
 800d864:	0800d889 	.word	0x0800d889
 800d868:	0800d891 	.word	0x0800d891
 800d86c:	0800d899 	.word	0x0800d899
 800d870:	2300      	movs	r3, #0
 800d872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d876:	e284      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d878:	2304      	movs	r3, #4
 800d87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d87e:	e280      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d880:	2308      	movs	r3, #8
 800d882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d886:	e27c      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d888:	2310      	movs	r3, #16
 800d88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d88e:	e278      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d890:	2320      	movs	r3, #32
 800d892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d896:	e274      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d898:	2340      	movs	r3, #64	; 0x40
 800d89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d89e:	e270      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d8a0:	2380      	movs	r3, #128	; 0x80
 800d8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8a6:	e26c      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a1b      	ldr	r2, [pc, #108]	; (800d91c <UART_SetConfig+0x348>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d142      	bne.n	800d938 <UART_SetConfig+0x364>
 800d8b2:	4b16      	ldr	r3, [pc, #88]	; (800d90c <UART_SetConfig+0x338>)
 800d8b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8b6:	f003 0307 	and.w	r3, r3, #7
 800d8ba:	2b05      	cmp	r3, #5
 800d8bc:	d838      	bhi.n	800d930 <UART_SetConfig+0x35c>
 800d8be:	a201      	add	r2, pc, #4	; (adr r2, 800d8c4 <UART_SetConfig+0x2f0>)
 800d8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8c4:	0800d8dd 	.word	0x0800d8dd
 800d8c8:	0800d8e5 	.word	0x0800d8e5
 800d8cc:	0800d8ed 	.word	0x0800d8ed
 800d8d0:	0800d8f5 	.word	0x0800d8f5
 800d8d4:	0800d921 	.word	0x0800d921
 800d8d8:	0800d929 	.word	0x0800d929
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8e2:	e24e      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d8e4:	2304      	movs	r3, #4
 800d8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ea:	e24a      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d8ec:	2308      	movs	r3, #8
 800d8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8f2:	e246      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d8f4:	2310      	movs	r3, #16
 800d8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8fa:	e242      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d8fc:	cfff69f3 	.word	0xcfff69f3
 800d900:	58000c00 	.word	0x58000c00
 800d904:	11fff4ff 	.word	0x11fff4ff
 800d908:	40011000 	.word	0x40011000
 800d90c:	58024400 	.word	0x58024400
 800d910:	40004400 	.word	0x40004400
 800d914:	40004800 	.word	0x40004800
 800d918:	40004c00 	.word	0x40004c00
 800d91c:	40005000 	.word	0x40005000
 800d920:	2320      	movs	r3, #32
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d926:	e22c      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d928:	2340      	movs	r3, #64	; 0x40
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92e:	e228      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d930:	2380      	movs	r3, #128	; 0x80
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d936:	e224      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4ab1      	ldr	r2, [pc, #708]	; (800dc04 <UART_SetConfig+0x630>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d176      	bne.n	800da30 <UART_SetConfig+0x45c>
 800d942:	4bb1      	ldr	r3, [pc, #708]	; (800dc08 <UART_SetConfig+0x634>)
 800d944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d946:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d94a:	2b28      	cmp	r3, #40	; 0x28
 800d94c:	d86c      	bhi.n	800da28 <UART_SetConfig+0x454>
 800d94e:	a201      	add	r2, pc, #4	; (adr r2, 800d954 <UART_SetConfig+0x380>)
 800d950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d954:	0800d9f9 	.word	0x0800d9f9
 800d958:	0800da29 	.word	0x0800da29
 800d95c:	0800da29 	.word	0x0800da29
 800d960:	0800da29 	.word	0x0800da29
 800d964:	0800da29 	.word	0x0800da29
 800d968:	0800da29 	.word	0x0800da29
 800d96c:	0800da29 	.word	0x0800da29
 800d970:	0800da29 	.word	0x0800da29
 800d974:	0800da01 	.word	0x0800da01
 800d978:	0800da29 	.word	0x0800da29
 800d97c:	0800da29 	.word	0x0800da29
 800d980:	0800da29 	.word	0x0800da29
 800d984:	0800da29 	.word	0x0800da29
 800d988:	0800da29 	.word	0x0800da29
 800d98c:	0800da29 	.word	0x0800da29
 800d990:	0800da29 	.word	0x0800da29
 800d994:	0800da09 	.word	0x0800da09
 800d998:	0800da29 	.word	0x0800da29
 800d99c:	0800da29 	.word	0x0800da29
 800d9a0:	0800da29 	.word	0x0800da29
 800d9a4:	0800da29 	.word	0x0800da29
 800d9a8:	0800da29 	.word	0x0800da29
 800d9ac:	0800da29 	.word	0x0800da29
 800d9b0:	0800da29 	.word	0x0800da29
 800d9b4:	0800da11 	.word	0x0800da11
 800d9b8:	0800da29 	.word	0x0800da29
 800d9bc:	0800da29 	.word	0x0800da29
 800d9c0:	0800da29 	.word	0x0800da29
 800d9c4:	0800da29 	.word	0x0800da29
 800d9c8:	0800da29 	.word	0x0800da29
 800d9cc:	0800da29 	.word	0x0800da29
 800d9d0:	0800da29 	.word	0x0800da29
 800d9d4:	0800da19 	.word	0x0800da19
 800d9d8:	0800da29 	.word	0x0800da29
 800d9dc:	0800da29 	.word	0x0800da29
 800d9e0:	0800da29 	.word	0x0800da29
 800d9e4:	0800da29 	.word	0x0800da29
 800d9e8:	0800da29 	.word	0x0800da29
 800d9ec:	0800da29 	.word	0x0800da29
 800d9f0:	0800da29 	.word	0x0800da29
 800d9f4:	0800da21 	.word	0x0800da21
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fe:	e1c0      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800da00:	2304      	movs	r3, #4
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da06:	e1bc      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800da08:	2308      	movs	r3, #8
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0e:	e1b8      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800da10:	2310      	movs	r3, #16
 800da12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da16:	e1b4      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800da18:	2320      	movs	r3, #32
 800da1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da1e:	e1b0      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800da20:	2340      	movs	r3, #64	; 0x40
 800da22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da26:	e1ac      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800da28:	2380      	movs	r3, #128	; 0x80
 800da2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da2e:	e1a8      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a75      	ldr	r2, [pc, #468]	; (800dc0c <UART_SetConfig+0x638>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d130      	bne.n	800da9c <UART_SetConfig+0x4c8>
 800da3a:	4b73      	ldr	r3, [pc, #460]	; (800dc08 <UART_SetConfig+0x634>)
 800da3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da3e:	f003 0307 	and.w	r3, r3, #7
 800da42:	2b05      	cmp	r3, #5
 800da44:	d826      	bhi.n	800da94 <UART_SetConfig+0x4c0>
 800da46:	a201      	add	r2, pc, #4	; (adr r2, 800da4c <UART_SetConfig+0x478>)
 800da48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4c:	0800da65 	.word	0x0800da65
 800da50:	0800da6d 	.word	0x0800da6d
 800da54:	0800da75 	.word	0x0800da75
 800da58:	0800da7d 	.word	0x0800da7d
 800da5c:	0800da85 	.word	0x0800da85
 800da60:	0800da8d 	.word	0x0800da8d
 800da64:	2300      	movs	r3, #0
 800da66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6a:	e18a      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800da6c:	2304      	movs	r3, #4
 800da6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da72:	e186      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800da74:	2308      	movs	r3, #8
 800da76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7a:	e182      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800da7c:	2310      	movs	r3, #16
 800da7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da82:	e17e      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800da84:	2320      	movs	r3, #32
 800da86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8a:	e17a      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800da8c:	2340      	movs	r3, #64	; 0x40
 800da8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da92:	e176      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800da94:	2380      	movs	r3, #128	; 0x80
 800da96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da9a:	e172      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a5b      	ldr	r2, [pc, #364]	; (800dc10 <UART_SetConfig+0x63c>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d130      	bne.n	800db08 <UART_SetConfig+0x534>
 800daa6:	4b58      	ldr	r3, [pc, #352]	; (800dc08 <UART_SetConfig+0x634>)
 800daa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daaa:	f003 0307 	and.w	r3, r3, #7
 800daae:	2b05      	cmp	r3, #5
 800dab0:	d826      	bhi.n	800db00 <UART_SetConfig+0x52c>
 800dab2:	a201      	add	r2, pc, #4	; (adr r2, 800dab8 <UART_SetConfig+0x4e4>)
 800dab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab8:	0800dad1 	.word	0x0800dad1
 800dabc:	0800dad9 	.word	0x0800dad9
 800dac0:	0800dae1 	.word	0x0800dae1
 800dac4:	0800dae9 	.word	0x0800dae9
 800dac8:	0800daf1 	.word	0x0800daf1
 800dacc:	0800daf9 	.word	0x0800daf9
 800dad0:	2300      	movs	r3, #0
 800dad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad6:	e154      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dad8:	2304      	movs	r3, #4
 800dada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dade:	e150      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dae0:	2308      	movs	r3, #8
 800dae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dae6:	e14c      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dae8:	2310      	movs	r3, #16
 800daea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daee:	e148      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800daf0:	2320      	movs	r3, #32
 800daf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf6:	e144      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800daf8:	2340      	movs	r3, #64	; 0x40
 800dafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafe:	e140      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800db00:	2380      	movs	r3, #128	; 0x80
 800db02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db06:	e13c      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a41      	ldr	r2, [pc, #260]	; (800dc14 <UART_SetConfig+0x640>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	f040 8082 	bne.w	800dc18 <UART_SetConfig+0x644>
 800db14:	4b3c      	ldr	r3, [pc, #240]	; (800dc08 <UART_SetConfig+0x634>)
 800db16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db1c:	2b28      	cmp	r3, #40	; 0x28
 800db1e:	d86d      	bhi.n	800dbfc <UART_SetConfig+0x628>
 800db20:	a201      	add	r2, pc, #4	; (adr r2, 800db28 <UART_SetConfig+0x554>)
 800db22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db26:	bf00      	nop
 800db28:	0800dbcd 	.word	0x0800dbcd
 800db2c:	0800dbfd 	.word	0x0800dbfd
 800db30:	0800dbfd 	.word	0x0800dbfd
 800db34:	0800dbfd 	.word	0x0800dbfd
 800db38:	0800dbfd 	.word	0x0800dbfd
 800db3c:	0800dbfd 	.word	0x0800dbfd
 800db40:	0800dbfd 	.word	0x0800dbfd
 800db44:	0800dbfd 	.word	0x0800dbfd
 800db48:	0800dbd5 	.word	0x0800dbd5
 800db4c:	0800dbfd 	.word	0x0800dbfd
 800db50:	0800dbfd 	.word	0x0800dbfd
 800db54:	0800dbfd 	.word	0x0800dbfd
 800db58:	0800dbfd 	.word	0x0800dbfd
 800db5c:	0800dbfd 	.word	0x0800dbfd
 800db60:	0800dbfd 	.word	0x0800dbfd
 800db64:	0800dbfd 	.word	0x0800dbfd
 800db68:	0800dbdd 	.word	0x0800dbdd
 800db6c:	0800dbfd 	.word	0x0800dbfd
 800db70:	0800dbfd 	.word	0x0800dbfd
 800db74:	0800dbfd 	.word	0x0800dbfd
 800db78:	0800dbfd 	.word	0x0800dbfd
 800db7c:	0800dbfd 	.word	0x0800dbfd
 800db80:	0800dbfd 	.word	0x0800dbfd
 800db84:	0800dbfd 	.word	0x0800dbfd
 800db88:	0800dbe5 	.word	0x0800dbe5
 800db8c:	0800dbfd 	.word	0x0800dbfd
 800db90:	0800dbfd 	.word	0x0800dbfd
 800db94:	0800dbfd 	.word	0x0800dbfd
 800db98:	0800dbfd 	.word	0x0800dbfd
 800db9c:	0800dbfd 	.word	0x0800dbfd
 800dba0:	0800dbfd 	.word	0x0800dbfd
 800dba4:	0800dbfd 	.word	0x0800dbfd
 800dba8:	0800dbed 	.word	0x0800dbed
 800dbac:	0800dbfd 	.word	0x0800dbfd
 800dbb0:	0800dbfd 	.word	0x0800dbfd
 800dbb4:	0800dbfd 	.word	0x0800dbfd
 800dbb8:	0800dbfd 	.word	0x0800dbfd
 800dbbc:	0800dbfd 	.word	0x0800dbfd
 800dbc0:	0800dbfd 	.word	0x0800dbfd
 800dbc4:	0800dbfd 	.word	0x0800dbfd
 800dbc8:	0800dbf5 	.word	0x0800dbf5
 800dbcc:	2301      	movs	r3, #1
 800dbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbd2:	e0d6      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dbd4:	2304      	movs	r3, #4
 800dbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbda:	e0d2      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dbdc:	2308      	movs	r3, #8
 800dbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe2:	e0ce      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dbe4:	2310      	movs	r3, #16
 800dbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbea:	e0ca      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dbec:	2320      	movs	r3, #32
 800dbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf2:	e0c6      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dbf4:	2340      	movs	r3, #64	; 0x40
 800dbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfa:	e0c2      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dbfc:	2380      	movs	r3, #128	; 0x80
 800dbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc02:	e0be      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dc04:	40011400 	.word	0x40011400
 800dc08:	58024400 	.word	0x58024400
 800dc0c:	40007800 	.word	0x40007800
 800dc10:	40007c00 	.word	0x40007c00
 800dc14:	40011800 	.word	0x40011800
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4aad      	ldr	r2, [pc, #692]	; (800ded4 <UART_SetConfig+0x900>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d176      	bne.n	800dd10 <UART_SetConfig+0x73c>
 800dc22:	4bad      	ldr	r3, [pc, #692]	; (800ded8 <UART_SetConfig+0x904>)
 800dc24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc2a:	2b28      	cmp	r3, #40	; 0x28
 800dc2c:	d86c      	bhi.n	800dd08 <UART_SetConfig+0x734>
 800dc2e:	a201      	add	r2, pc, #4	; (adr r2, 800dc34 <UART_SetConfig+0x660>)
 800dc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc34:	0800dcd9 	.word	0x0800dcd9
 800dc38:	0800dd09 	.word	0x0800dd09
 800dc3c:	0800dd09 	.word	0x0800dd09
 800dc40:	0800dd09 	.word	0x0800dd09
 800dc44:	0800dd09 	.word	0x0800dd09
 800dc48:	0800dd09 	.word	0x0800dd09
 800dc4c:	0800dd09 	.word	0x0800dd09
 800dc50:	0800dd09 	.word	0x0800dd09
 800dc54:	0800dce1 	.word	0x0800dce1
 800dc58:	0800dd09 	.word	0x0800dd09
 800dc5c:	0800dd09 	.word	0x0800dd09
 800dc60:	0800dd09 	.word	0x0800dd09
 800dc64:	0800dd09 	.word	0x0800dd09
 800dc68:	0800dd09 	.word	0x0800dd09
 800dc6c:	0800dd09 	.word	0x0800dd09
 800dc70:	0800dd09 	.word	0x0800dd09
 800dc74:	0800dce9 	.word	0x0800dce9
 800dc78:	0800dd09 	.word	0x0800dd09
 800dc7c:	0800dd09 	.word	0x0800dd09
 800dc80:	0800dd09 	.word	0x0800dd09
 800dc84:	0800dd09 	.word	0x0800dd09
 800dc88:	0800dd09 	.word	0x0800dd09
 800dc8c:	0800dd09 	.word	0x0800dd09
 800dc90:	0800dd09 	.word	0x0800dd09
 800dc94:	0800dcf1 	.word	0x0800dcf1
 800dc98:	0800dd09 	.word	0x0800dd09
 800dc9c:	0800dd09 	.word	0x0800dd09
 800dca0:	0800dd09 	.word	0x0800dd09
 800dca4:	0800dd09 	.word	0x0800dd09
 800dca8:	0800dd09 	.word	0x0800dd09
 800dcac:	0800dd09 	.word	0x0800dd09
 800dcb0:	0800dd09 	.word	0x0800dd09
 800dcb4:	0800dcf9 	.word	0x0800dcf9
 800dcb8:	0800dd09 	.word	0x0800dd09
 800dcbc:	0800dd09 	.word	0x0800dd09
 800dcc0:	0800dd09 	.word	0x0800dd09
 800dcc4:	0800dd09 	.word	0x0800dd09
 800dcc8:	0800dd09 	.word	0x0800dd09
 800dccc:	0800dd09 	.word	0x0800dd09
 800dcd0:	0800dd09 	.word	0x0800dd09
 800dcd4:	0800dd01 	.word	0x0800dd01
 800dcd8:	2301      	movs	r3, #1
 800dcda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcde:	e050      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dce0:	2304      	movs	r3, #4
 800dce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce6:	e04c      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dce8:	2308      	movs	r3, #8
 800dcea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcee:	e048      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dcf0:	2310      	movs	r3, #16
 800dcf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcf6:	e044      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dcf8:	2320      	movs	r3, #32
 800dcfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfe:	e040      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dd00:	2340      	movs	r3, #64	; 0x40
 800dd02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd06:	e03c      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dd08:	2380      	movs	r3, #128	; 0x80
 800dd0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd0e:	e038      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a71      	ldr	r2, [pc, #452]	; (800dedc <UART_SetConfig+0x908>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d130      	bne.n	800dd7c <UART_SetConfig+0x7a8>
 800dd1a:	4b6f      	ldr	r3, [pc, #444]	; (800ded8 <UART_SetConfig+0x904>)
 800dd1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd1e:	f003 0307 	and.w	r3, r3, #7
 800dd22:	2b05      	cmp	r3, #5
 800dd24:	d826      	bhi.n	800dd74 <UART_SetConfig+0x7a0>
 800dd26:	a201      	add	r2, pc, #4	; (adr r2, 800dd2c <UART_SetConfig+0x758>)
 800dd28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd2c:	0800dd45 	.word	0x0800dd45
 800dd30:	0800dd4d 	.word	0x0800dd4d
 800dd34:	0800dd55 	.word	0x0800dd55
 800dd38:	0800dd5d 	.word	0x0800dd5d
 800dd3c:	0800dd65 	.word	0x0800dd65
 800dd40:	0800dd6d 	.word	0x0800dd6d
 800dd44:	2302      	movs	r3, #2
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4a:	e01a      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dd4c:	2304      	movs	r3, #4
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd52:	e016      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dd54:	2308      	movs	r3, #8
 800dd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5a:	e012      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dd5c:	2310      	movs	r3, #16
 800dd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd62:	e00e      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dd64:	2320      	movs	r3, #32
 800dd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6a:	e00a      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dd6c:	2340      	movs	r3, #64	; 0x40
 800dd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd72:	e006      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dd74:	2380      	movs	r3, #128	; 0x80
 800dd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd7a:	e002      	b.n	800dd82 <UART_SetConfig+0x7ae>
 800dd7c:	2380      	movs	r3, #128	; 0x80
 800dd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a55      	ldr	r2, [pc, #340]	; (800dedc <UART_SetConfig+0x908>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	f040 80f8 	bne.w	800df7e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dd8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dd92:	2b20      	cmp	r3, #32
 800dd94:	dc46      	bgt.n	800de24 <UART_SetConfig+0x850>
 800dd96:	2b02      	cmp	r3, #2
 800dd98:	db75      	blt.n	800de86 <UART_SetConfig+0x8b2>
 800dd9a:	3b02      	subs	r3, #2
 800dd9c:	2b1e      	cmp	r3, #30
 800dd9e:	d872      	bhi.n	800de86 <UART_SetConfig+0x8b2>
 800dda0:	a201      	add	r2, pc, #4	; (adr r2, 800dda8 <UART_SetConfig+0x7d4>)
 800dda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda6:	bf00      	nop
 800dda8:	0800de2b 	.word	0x0800de2b
 800ddac:	0800de87 	.word	0x0800de87
 800ddb0:	0800de33 	.word	0x0800de33
 800ddb4:	0800de87 	.word	0x0800de87
 800ddb8:	0800de87 	.word	0x0800de87
 800ddbc:	0800de87 	.word	0x0800de87
 800ddc0:	0800de43 	.word	0x0800de43
 800ddc4:	0800de87 	.word	0x0800de87
 800ddc8:	0800de87 	.word	0x0800de87
 800ddcc:	0800de87 	.word	0x0800de87
 800ddd0:	0800de87 	.word	0x0800de87
 800ddd4:	0800de87 	.word	0x0800de87
 800ddd8:	0800de87 	.word	0x0800de87
 800dddc:	0800de87 	.word	0x0800de87
 800dde0:	0800de53 	.word	0x0800de53
 800dde4:	0800de87 	.word	0x0800de87
 800dde8:	0800de87 	.word	0x0800de87
 800ddec:	0800de87 	.word	0x0800de87
 800ddf0:	0800de87 	.word	0x0800de87
 800ddf4:	0800de87 	.word	0x0800de87
 800ddf8:	0800de87 	.word	0x0800de87
 800ddfc:	0800de87 	.word	0x0800de87
 800de00:	0800de87 	.word	0x0800de87
 800de04:	0800de87 	.word	0x0800de87
 800de08:	0800de87 	.word	0x0800de87
 800de0c:	0800de87 	.word	0x0800de87
 800de10:	0800de87 	.word	0x0800de87
 800de14:	0800de87 	.word	0x0800de87
 800de18:	0800de87 	.word	0x0800de87
 800de1c:	0800de87 	.word	0x0800de87
 800de20:	0800de79 	.word	0x0800de79
 800de24:	2b40      	cmp	r3, #64	; 0x40
 800de26:	d02a      	beq.n	800de7e <UART_SetConfig+0x8aa>
 800de28:	e02d      	b.n	800de86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800de2a:	f7fc fde3 	bl	800a9f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800de2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de30:	e02f      	b.n	800de92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de36:	4618      	mov	r0, r3
 800de38:	f7fc fdf2 	bl	800aa20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de40:	e027      	b.n	800de92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de42:	f107 0318 	add.w	r3, r7, #24
 800de46:	4618      	mov	r0, r3
 800de48:	f7fc ff3e 	bl	800acc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de4c:	69fb      	ldr	r3, [r7, #28]
 800de4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de50:	e01f      	b.n	800de92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de52:	4b21      	ldr	r3, [pc, #132]	; (800ded8 <UART_SetConfig+0x904>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f003 0320 	and.w	r3, r3, #32
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d009      	beq.n	800de72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de5e:	4b1e      	ldr	r3, [pc, #120]	; (800ded8 <UART_SetConfig+0x904>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	08db      	lsrs	r3, r3, #3
 800de64:	f003 0303 	and.w	r3, r3, #3
 800de68:	4a1d      	ldr	r2, [pc, #116]	; (800dee0 <UART_SetConfig+0x90c>)
 800de6a:	fa22 f303 	lsr.w	r3, r2, r3
 800de6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de70:	e00f      	b.n	800de92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800de72:	4b1b      	ldr	r3, [pc, #108]	; (800dee0 <UART_SetConfig+0x90c>)
 800de74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de76:	e00c      	b.n	800de92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de78:	4b1a      	ldr	r3, [pc, #104]	; (800dee4 <UART_SetConfig+0x910>)
 800de7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de7c:	e009      	b.n	800de92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de84:	e005      	b.n	800de92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800de86:	2300      	movs	r3, #0
 800de88:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800de8a:	2301      	movs	r3, #1
 800de8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800de90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800de92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de94:	2b00      	cmp	r3, #0
 800de96:	f000 81ee 	beq.w	800e276 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9e:	4a12      	ldr	r2, [pc, #72]	; (800dee8 <UART_SetConfig+0x914>)
 800dea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dea4:	461a      	mov	r2, r3
 800dea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dea8:	fbb3 f3f2 	udiv	r3, r3, r2
 800deac:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	685a      	ldr	r2, [r3, #4]
 800deb2:	4613      	mov	r3, r2
 800deb4:	005b      	lsls	r3, r3, #1
 800deb6:	4413      	add	r3, r2
 800deb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deba:	429a      	cmp	r2, r3
 800debc:	d305      	bcc.n	800deca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d910      	bls.n	800deec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800deca:	2301      	movs	r3, #1
 800decc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ded0:	e1d1      	b.n	800e276 <UART_SetConfig+0xca2>
 800ded2:	bf00      	nop
 800ded4:	40011c00 	.word	0x40011c00
 800ded8:	58024400 	.word	0x58024400
 800dedc:	58000c00 	.word	0x58000c00
 800dee0:	03d09000 	.word	0x03d09000
 800dee4:	003d0900 	.word	0x003d0900
 800dee8:	0800f51c 	.word	0x0800f51c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800deec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deee:	2200      	movs	r2, #0
 800def0:	60bb      	str	r3, [r7, #8]
 800def2:	60fa      	str	r2, [r7, #12]
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def8:	4ac0      	ldr	r2, [pc, #768]	; (800e1fc <UART_SetConfig+0xc28>)
 800defa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800defe:	b29b      	uxth	r3, r3
 800df00:	2200      	movs	r2, #0
 800df02:	603b      	str	r3, [r7, #0]
 800df04:	607a      	str	r2, [r7, #4]
 800df06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800df0e:	f7f2 fa07 	bl	8000320 <__aeabi_uldivmod>
 800df12:	4602      	mov	r2, r0
 800df14:	460b      	mov	r3, r1
 800df16:	4610      	mov	r0, r2
 800df18:	4619      	mov	r1, r3
 800df1a:	f04f 0200 	mov.w	r2, #0
 800df1e:	f04f 0300 	mov.w	r3, #0
 800df22:	020b      	lsls	r3, r1, #8
 800df24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800df28:	0202      	lsls	r2, r0, #8
 800df2a:	6979      	ldr	r1, [r7, #20]
 800df2c:	6849      	ldr	r1, [r1, #4]
 800df2e:	0849      	lsrs	r1, r1, #1
 800df30:	2000      	movs	r0, #0
 800df32:	460c      	mov	r4, r1
 800df34:	4605      	mov	r5, r0
 800df36:	eb12 0804 	adds.w	r8, r2, r4
 800df3a:	eb43 0905 	adc.w	r9, r3, r5
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	2200      	movs	r2, #0
 800df44:	469a      	mov	sl, r3
 800df46:	4693      	mov	fp, r2
 800df48:	4652      	mov	r2, sl
 800df4a:	465b      	mov	r3, fp
 800df4c:	4640      	mov	r0, r8
 800df4e:	4649      	mov	r1, r9
 800df50:	f7f2 f9e6 	bl	8000320 <__aeabi_uldivmod>
 800df54:	4602      	mov	r2, r0
 800df56:	460b      	mov	r3, r1
 800df58:	4613      	mov	r3, r2
 800df5a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800df5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df62:	d308      	bcc.n	800df76 <UART_SetConfig+0x9a2>
 800df64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df6a:	d204      	bcs.n	800df76 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df72:	60da      	str	r2, [r3, #12]
 800df74:	e17f      	b.n	800e276 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800df76:	2301      	movs	r3, #1
 800df78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800df7c:	e17b      	b.n	800e276 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	69db      	ldr	r3, [r3, #28]
 800df82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df86:	f040 80bd 	bne.w	800e104 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800df8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800df8e:	2b20      	cmp	r3, #32
 800df90:	dc48      	bgt.n	800e024 <UART_SetConfig+0xa50>
 800df92:	2b00      	cmp	r3, #0
 800df94:	db7b      	blt.n	800e08e <UART_SetConfig+0xaba>
 800df96:	2b20      	cmp	r3, #32
 800df98:	d879      	bhi.n	800e08e <UART_SetConfig+0xaba>
 800df9a:	a201      	add	r2, pc, #4	; (adr r2, 800dfa0 <UART_SetConfig+0x9cc>)
 800df9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa0:	0800e02b 	.word	0x0800e02b
 800dfa4:	0800e033 	.word	0x0800e033
 800dfa8:	0800e08f 	.word	0x0800e08f
 800dfac:	0800e08f 	.word	0x0800e08f
 800dfb0:	0800e03b 	.word	0x0800e03b
 800dfb4:	0800e08f 	.word	0x0800e08f
 800dfb8:	0800e08f 	.word	0x0800e08f
 800dfbc:	0800e08f 	.word	0x0800e08f
 800dfc0:	0800e04b 	.word	0x0800e04b
 800dfc4:	0800e08f 	.word	0x0800e08f
 800dfc8:	0800e08f 	.word	0x0800e08f
 800dfcc:	0800e08f 	.word	0x0800e08f
 800dfd0:	0800e08f 	.word	0x0800e08f
 800dfd4:	0800e08f 	.word	0x0800e08f
 800dfd8:	0800e08f 	.word	0x0800e08f
 800dfdc:	0800e08f 	.word	0x0800e08f
 800dfe0:	0800e05b 	.word	0x0800e05b
 800dfe4:	0800e08f 	.word	0x0800e08f
 800dfe8:	0800e08f 	.word	0x0800e08f
 800dfec:	0800e08f 	.word	0x0800e08f
 800dff0:	0800e08f 	.word	0x0800e08f
 800dff4:	0800e08f 	.word	0x0800e08f
 800dff8:	0800e08f 	.word	0x0800e08f
 800dffc:	0800e08f 	.word	0x0800e08f
 800e000:	0800e08f 	.word	0x0800e08f
 800e004:	0800e08f 	.word	0x0800e08f
 800e008:	0800e08f 	.word	0x0800e08f
 800e00c:	0800e08f 	.word	0x0800e08f
 800e010:	0800e08f 	.word	0x0800e08f
 800e014:	0800e08f 	.word	0x0800e08f
 800e018:	0800e08f 	.word	0x0800e08f
 800e01c:	0800e08f 	.word	0x0800e08f
 800e020:	0800e081 	.word	0x0800e081
 800e024:	2b40      	cmp	r3, #64	; 0x40
 800e026:	d02e      	beq.n	800e086 <UART_SetConfig+0xab2>
 800e028:	e031      	b.n	800e08e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e02a:	f7fb fdbd 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800e02e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e030:	e033      	b.n	800e09a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e032:	f7fb fdcf 	bl	8009bd4 <HAL_RCC_GetPCLK2Freq>
 800e036:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e038:	e02f      	b.n	800e09a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e03a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e03e:	4618      	mov	r0, r3
 800e040:	f7fc fcee 	bl	800aa20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e048:	e027      	b.n	800e09a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e04a:	f107 0318 	add.w	r3, r7, #24
 800e04e:	4618      	mov	r0, r3
 800e050:	f7fc fe3a 	bl	800acc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e058:	e01f      	b.n	800e09a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e05a:	4b69      	ldr	r3, [pc, #420]	; (800e200 <UART_SetConfig+0xc2c>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f003 0320 	and.w	r3, r3, #32
 800e062:	2b00      	cmp	r3, #0
 800e064:	d009      	beq.n	800e07a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e066:	4b66      	ldr	r3, [pc, #408]	; (800e200 <UART_SetConfig+0xc2c>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	08db      	lsrs	r3, r3, #3
 800e06c:	f003 0303 	and.w	r3, r3, #3
 800e070:	4a64      	ldr	r2, [pc, #400]	; (800e204 <UART_SetConfig+0xc30>)
 800e072:	fa22 f303 	lsr.w	r3, r2, r3
 800e076:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e078:	e00f      	b.n	800e09a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e07a:	4b62      	ldr	r3, [pc, #392]	; (800e204 <UART_SetConfig+0xc30>)
 800e07c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e07e:	e00c      	b.n	800e09a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e080:	4b61      	ldr	r3, [pc, #388]	; (800e208 <UART_SetConfig+0xc34>)
 800e082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e084:	e009      	b.n	800e09a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e08c:	e005      	b.n	800e09a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e08e:	2300      	movs	r3, #0
 800e090:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e092:	2301      	movs	r3, #1
 800e094:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e098:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f000 80ea 	beq.w	800e276 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a6:	4a55      	ldr	r2, [pc, #340]	; (800e1fc <UART_SetConfig+0xc28>)
 800e0a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0b4:	005a      	lsls	r2, r3, #1
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	085b      	lsrs	r3, r3, #1
 800e0bc:	441a      	add	r2, r3
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ca:	2b0f      	cmp	r3, #15
 800e0cc:	d916      	bls.n	800e0fc <UART_SetConfig+0xb28>
 800e0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0d4:	d212      	bcs.n	800e0fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	f023 030f 	bic.w	r3, r3, #15
 800e0de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e2:	085b      	lsrs	r3, r3, #1
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	f003 0307 	and.w	r3, r3, #7
 800e0ea:	b29a      	uxth	r2, r3
 800e0ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e0f8:	60da      	str	r2, [r3, #12]
 800e0fa:	e0bc      	b.n	800e276 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e102:	e0b8      	b.n	800e276 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e104:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e108:	2b20      	cmp	r3, #32
 800e10a:	dc4b      	bgt.n	800e1a4 <UART_SetConfig+0xbd0>
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f2c0 8087 	blt.w	800e220 <UART_SetConfig+0xc4c>
 800e112:	2b20      	cmp	r3, #32
 800e114:	f200 8084 	bhi.w	800e220 <UART_SetConfig+0xc4c>
 800e118:	a201      	add	r2, pc, #4	; (adr r2, 800e120 <UART_SetConfig+0xb4c>)
 800e11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11e:	bf00      	nop
 800e120:	0800e1ab 	.word	0x0800e1ab
 800e124:	0800e1b3 	.word	0x0800e1b3
 800e128:	0800e221 	.word	0x0800e221
 800e12c:	0800e221 	.word	0x0800e221
 800e130:	0800e1bb 	.word	0x0800e1bb
 800e134:	0800e221 	.word	0x0800e221
 800e138:	0800e221 	.word	0x0800e221
 800e13c:	0800e221 	.word	0x0800e221
 800e140:	0800e1cb 	.word	0x0800e1cb
 800e144:	0800e221 	.word	0x0800e221
 800e148:	0800e221 	.word	0x0800e221
 800e14c:	0800e221 	.word	0x0800e221
 800e150:	0800e221 	.word	0x0800e221
 800e154:	0800e221 	.word	0x0800e221
 800e158:	0800e221 	.word	0x0800e221
 800e15c:	0800e221 	.word	0x0800e221
 800e160:	0800e1db 	.word	0x0800e1db
 800e164:	0800e221 	.word	0x0800e221
 800e168:	0800e221 	.word	0x0800e221
 800e16c:	0800e221 	.word	0x0800e221
 800e170:	0800e221 	.word	0x0800e221
 800e174:	0800e221 	.word	0x0800e221
 800e178:	0800e221 	.word	0x0800e221
 800e17c:	0800e221 	.word	0x0800e221
 800e180:	0800e221 	.word	0x0800e221
 800e184:	0800e221 	.word	0x0800e221
 800e188:	0800e221 	.word	0x0800e221
 800e18c:	0800e221 	.word	0x0800e221
 800e190:	0800e221 	.word	0x0800e221
 800e194:	0800e221 	.word	0x0800e221
 800e198:	0800e221 	.word	0x0800e221
 800e19c:	0800e221 	.word	0x0800e221
 800e1a0:	0800e213 	.word	0x0800e213
 800e1a4:	2b40      	cmp	r3, #64	; 0x40
 800e1a6:	d037      	beq.n	800e218 <UART_SetConfig+0xc44>
 800e1a8:	e03a      	b.n	800e220 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1aa:	f7fb fcfd 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800e1ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1b0:	e03c      	b.n	800e22c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1b2:	f7fb fd0f 	bl	8009bd4 <HAL_RCC_GetPCLK2Freq>
 800e1b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1b8:	e038      	b.n	800e22c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7fc fc2e 	bl	800aa20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1c8:	e030      	b.n	800e22c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1ca:	f107 0318 	add.w	r3, r7, #24
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fc fd7a 	bl	800acc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1d4:	69fb      	ldr	r3, [r7, #28]
 800e1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1d8:	e028      	b.n	800e22c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1da:	4b09      	ldr	r3, [pc, #36]	; (800e200 <UART_SetConfig+0xc2c>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f003 0320 	and.w	r3, r3, #32
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d012      	beq.n	800e20c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1e6:	4b06      	ldr	r3, [pc, #24]	; (800e200 <UART_SetConfig+0xc2c>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	08db      	lsrs	r3, r3, #3
 800e1ec:	f003 0303 	and.w	r3, r3, #3
 800e1f0:	4a04      	ldr	r2, [pc, #16]	; (800e204 <UART_SetConfig+0xc30>)
 800e1f2:	fa22 f303 	lsr.w	r3, r2, r3
 800e1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1f8:	e018      	b.n	800e22c <UART_SetConfig+0xc58>
 800e1fa:	bf00      	nop
 800e1fc:	0800f51c 	.word	0x0800f51c
 800e200:	58024400 	.word	0x58024400
 800e204:	03d09000 	.word	0x03d09000
 800e208:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e20c:	4b24      	ldr	r3, [pc, #144]	; (800e2a0 <UART_SetConfig+0xccc>)
 800e20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e210:	e00c      	b.n	800e22c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e212:	4b24      	ldr	r3, [pc, #144]	; (800e2a4 <UART_SetConfig+0xcd0>)
 800e214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e216:	e009      	b.n	800e22c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e218:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e21c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e21e:	e005      	b.n	800e22c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e220:	2300      	movs	r3, #0
 800e222:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e224:	2301      	movs	r3, #1
 800e226:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e22a:	bf00      	nop
    }

    if (pclk != 0U)
 800e22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d021      	beq.n	800e276 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e236:	4a1c      	ldr	r2, [pc, #112]	; (800e2a8 <UART_SetConfig+0xcd4>)
 800e238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e23c:	461a      	mov	r2, r3
 800e23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e240:	fbb3 f2f2 	udiv	r2, r3, r2
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	085b      	lsrs	r3, r3, #1
 800e24a:	441a      	add	r2, r3
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	fbb2 f3f3 	udiv	r3, r2, r3
 800e254:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e258:	2b0f      	cmp	r3, #15
 800e25a:	d909      	bls.n	800e270 <UART_SetConfig+0xc9c>
 800e25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e262:	d205      	bcs.n	800e270 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e266:	b29a      	uxth	r2, r3
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	60da      	str	r2, [r3, #12]
 800e26e:	e002      	b.n	800e276 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e270:	2301      	movs	r3, #1
 800e272:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	2201      	movs	r2, #1
 800e27a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	2201      	movs	r2, #1
 800e282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	2200      	movs	r2, #0
 800e28a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	2200      	movs	r2, #0
 800e290:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e292:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e296:	4618      	mov	r0, r3
 800e298:	3748      	adds	r7, #72	; 0x48
 800e29a:	46bd      	mov	sp, r7
 800e29c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e2a0:	03d09000 	.word	0x03d09000
 800e2a4:	003d0900 	.word	0x003d0900
 800e2a8:	0800f51c 	.word	0x0800f51c

0800e2ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b083      	sub	sp, #12
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2b8:	f003 0301 	and.w	r3, r3, #1
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00a      	beq.n	800e2d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	430a      	orrs	r2, r1
 800e2d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2da:	f003 0302 	and.w	r3, r3, #2
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00a      	beq.n	800e2f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	430a      	orrs	r2, r1
 800e2f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2fc:	f003 0304 	and.w	r3, r3, #4
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00a      	beq.n	800e31a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	430a      	orrs	r2, r1
 800e318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e31e:	f003 0308 	and.w	r3, r3, #8
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00a      	beq.n	800e33c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	685b      	ldr	r3, [r3, #4]
 800e32c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	430a      	orrs	r2, r1
 800e33a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e340:	f003 0310 	and.w	r3, r3, #16
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00a      	beq.n	800e35e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	430a      	orrs	r2, r1
 800e35c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e362:	f003 0320 	and.w	r3, r3, #32
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00a      	beq.n	800e380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	689b      	ldr	r3, [r3, #8]
 800e370:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	430a      	orrs	r2, r1
 800e37e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d01a      	beq.n	800e3c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	430a      	orrs	r2, r1
 800e3a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3aa:	d10a      	bne.n	800e3c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	430a      	orrs	r2, r1
 800e3c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00a      	beq.n	800e3e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	430a      	orrs	r2, r1
 800e3e2:	605a      	str	r2, [r3, #4]
  }
}
 800e3e4:	bf00      	nop
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b086      	sub	sp, #24
 800e3f4:	af02      	add	r7, sp, #8
 800e3f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e400:	f7f7 fb72 	bl	8005ae8 <HAL_GetTick>
 800e404:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f003 0308 	and.w	r3, r3, #8
 800e410:	2b08      	cmp	r3, #8
 800e412:	d10e      	bne.n	800e432 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2200      	movs	r2, #0
 800e41e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 f82f 	bl	800e486 <UART_WaitOnFlagUntilTimeout>
 800e428:	4603      	mov	r3, r0
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d001      	beq.n	800e432 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e42e:	2303      	movs	r3, #3
 800e430:	e025      	b.n	800e47e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f003 0304 	and.w	r3, r3, #4
 800e43c:	2b04      	cmp	r3, #4
 800e43e:	d10e      	bne.n	800e45e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e444:	9300      	str	r3, [sp, #0]
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2200      	movs	r2, #0
 800e44a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f000 f819 	bl	800e486 <UART_WaitOnFlagUntilTimeout>
 800e454:	4603      	mov	r3, r0
 800e456:	2b00      	cmp	r3, #0
 800e458:	d001      	beq.n	800e45e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e45a:	2303      	movs	r3, #3
 800e45c:	e00f      	b.n	800e47e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2220      	movs	r2, #32
 800e462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2220      	movs	r2, #32
 800e46a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2200      	movs	r2, #0
 800e472:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2200      	movs	r2, #0
 800e478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e47c:	2300      	movs	r3, #0
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3710      	adds	r7, #16
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}

0800e486 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e486:	b580      	push	{r7, lr}
 800e488:	b09c      	sub	sp, #112	; 0x70
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	60f8      	str	r0, [r7, #12]
 800e48e:	60b9      	str	r1, [r7, #8]
 800e490:	603b      	str	r3, [r7, #0]
 800e492:	4613      	mov	r3, r2
 800e494:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e496:	e0a9      	b.n	800e5ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e49a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e49e:	f000 80a5 	beq.w	800e5ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4a2:	f7f7 fb21 	bl	8005ae8 <HAL_GetTick>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	1ad3      	subs	r3, r2, r3
 800e4ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d302      	bcc.n	800e4b8 <UART_WaitOnFlagUntilTimeout+0x32>
 800e4b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d140      	bne.n	800e53a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4c0:	e853 3f00 	ldrex	r3, [r3]
 800e4c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e4c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e4cc:	667b      	str	r3, [r7, #100]	; 0x64
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e4dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e4de:	e841 2300 	strex	r3, r2, [r1]
 800e4e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e4e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d1e6      	bne.n	800e4b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	3308      	adds	r3, #8
 800e4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4f4:	e853 3f00 	ldrex	r3, [r3]
 800e4f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fc:	f023 0301 	bic.w	r3, r3, #1
 800e500:	663b      	str	r3, [r7, #96]	; 0x60
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3308      	adds	r3, #8
 800e508:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e50a:	64ba      	str	r2, [r7, #72]	; 0x48
 800e50c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e50e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e512:	e841 2300 	strex	r3, r2, [r1]
 800e516:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d1e5      	bne.n	800e4ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2220      	movs	r2, #32
 800e522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2220      	movs	r2, #32
 800e52a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2200      	movs	r2, #0
 800e532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e536:	2303      	movs	r3, #3
 800e538:	e069      	b.n	800e60e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f003 0304 	and.w	r3, r3, #4
 800e544:	2b00      	cmp	r3, #0
 800e546:	d051      	beq.n	800e5ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	69db      	ldr	r3, [r3, #28]
 800e54e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e556:	d149      	bne.n	800e5ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e560:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56a:	e853 3f00 	ldrex	r3, [r3]
 800e56e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e572:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e576:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	461a      	mov	r2, r3
 800e57e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e580:	637b      	str	r3, [r7, #52]	; 0x34
 800e582:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e588:	e841 2300 	strex	r3, r2, [r1]
 800e58c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e590:	2b00      	cmp	r3, #0
 800e592:	d1e6      	bne.n	800e562 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	3308      	adds	r3, #8
 800e59a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	e853 3f00 	ldrex	r3, [r3]
 800e5a2:	613b      	str	r3, [r7, #16]
   return(result);
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	f023 0301 	bic.w	r3, r3, #1
 800e5aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	3308      	adds	r3, #8
 800e5b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e5b4:	623a      	str	r2, [r7, #32]
 800e5b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b8:	69f9      	ldr	r1, [r7, #28]
 800e5ba:	6a3a      	ldr	r2, [r7, #32]
 800e5bc:	e841 2300 	strex	r3, r2, [r1]
 800e5c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d1e5      	bne.n	800e594 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2220      	movs	r2, #32
 800e5cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2220      	movs	r2, #32
 800e5d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2220      	movs	r2, #32
 800e5dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e5e8:	2303      	movs	r3, #3
 800e5ea:	e010      	b.n	800e60e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	69da      	ldr	r2, [r3, #28]
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	4013      	ands	r3, r2
 800e5f6:	68ba      	ldr	r2, [r7, #8]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	bf0c      	ite	eq
 800e5fc:	2301      	moveq	r3, #1
 800e5fe:	2300      	movne	r3, #0
 800e600:	b2db      	uxtb	r3, r3
 800e602:	461a      	mov	r2, r3
 800e604:	79fb      	ldrb	r3, [r7, #7]
 800e606:	429a      	cmp	r2, r3
 800e608:	f43f af46 	beq.w	800e498 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e60c:	2300      	movs	r3, #0
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3770      	adds	r7, #112	; 0x70
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
	...

0800e618 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b096      	sub	sp, #88	; 0x58
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	4613      	mov	r3, r2
 800e624:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	88fa      	ldrh	r2, [r7, #6]
 800e630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2200      	movs	r2, #0
 800e638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2222      	movs	r2, #34	; 0x22
 800e640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d02c      	beq.n	800e6a6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e650:	4a42      	ldr	r2, [pc, #264]	; (800e75c <UART_Start_Receive_DMA+0x144>)
 800e652:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e658:	4a41      	ldr	r2, [pc, #260]	; (800e760 <UART_Start_Receive_DMA+0x148>)
 800e65a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e660:	4a40      	ldr	r2, [pc, #256]	; (800e764 <UART_Start_Receive_DMA+0x14c>)
 800e662:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e668:	2200      	movs	r2, #0
 800e66a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	3324      	adds	r3, #36	; 0x24
 800e676:	4619      	mov	r1, r3
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e67c:	461a      	mov	r2, r3
 800e67e:	88fb      	ldrh	r3, [r7, #6]
 800e680:	f7f7 fea8 	bl	80063d4 <HAL_DMA_Start_IT>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d00d      	beq.n	800e6a6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2210      	movs	r2, #16
 800e68e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2200      	movs	r2, #0
 800e696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2220      	movs	r2, #32
 800e69e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e055      	b.n	800e752 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	691b      	ldr	r3, [r3, #16]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d018      	beq.n	800e6e8 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6be:	e853 3f00 	ldrex	r3, [r3]
 800e6c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6ca:	657b      	str	r3, [r7, #84]	; 0x54
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6d6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6dc:	e841 2300 	strex	r3, r2, [r1]
 800e6e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e6e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d1e6      	bne.n	800e6b6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	3308      	adds	r3, #8
 800e6ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f2:	e853 3f00 	ldrex	r3, [r3]
 800e6f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	f043 0301 	orr.w	r3, r3, #1
 800e6fe:	653b      	str	r3, [r7, #80]	; 0x50
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	3308      	adds	r3, #8
 800e706:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e708:	637a      	str	r2, [r7, #52]	; 0x34
 800e70a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e70c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e70e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e710:	e841 2300 	strex	r3, r2, [r1]
 800e714:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d1e5      	bne.n	800e6e8 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	3308      	adds	r3, #8
 800e722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	e853 3f00 	ldrex	r3, [r3]
 800e72a:	613b      	str	r3, [r7, #16]
   return(result);
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e732:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	3308      	adds	r3, #8
 800e73a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e73c:	623a      	str	r2, [r7, #32]
 800e73e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e740:	69f9      	ldr	r1, [r7, #28]
 800e742:	6a3a      	ldr	r2, [r7, #32]
 800e744:	e841 2300 	strex	r3, r2, [r1]
 800e748:	61bb      	str	r3, [r7, #24]
   return(result);
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d1e5      	bne.n	800e71c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e750:	2300      	movs	r3, #0
}
 800e752:	4618      	mov	r0, r3
 800e754:	3758      	adds	r7, #88	; 0x58
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	0800e96b 	.word	0x0800e96b
 800e760:	0800ea8d 	.word	0x0800ea8d
 800e764:	0800eac5 	.word	0x0800eac5

0800e768 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e768:	b480      	push	{r7}
 800e76a:	b08f      	sub	sp, #60	; 0x3c
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e776:	6a3b      	ldr	r3, [r7, #32]
 800e778:	e853 3f00 	ldrex	r3, [r3]
 800e77c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e784:	637b      	str	r3, [r7, #52]	; 0x34
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	461a      	mov	r2, r3
 800e78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e78e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e790:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e796:	e841 2300 	strex	r3, r2, [r1]
 800e79a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d1e6      	bne.n	800e770 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	3308      	adds	r3, #8
 800e7a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	e853 3f00 	ldrex	r3, [r3]
 800e7b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e7b8:	633b      	str	r3, [r7, #48]	; 0x30
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	3308      	adds	r3, #8
 800e7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7c2:	61ba      	str	r2, [r7, #24]
 800e7c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7c6:	6979      	ldr	r1, [r7, #20]
 800e7c8:	69ba      	ldr	r2, [r7, #24]
 800e7ca:	e841 2300 	strex	r3, r2, [r1]
 800e7ce:	613b      	str	r3, [r7, #16]
   return(result);
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d1e5      	bne.n	800e7a2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2220      	movs	r2, #32
 800e7da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e7de:	bf00      	nop
 800e7e0:	373c      	adds	r7, #60	; 0x3c
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e8:	4770      	bx	lr
	...

0800e7ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b095      	sub	sp, #84	; 0x54
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7fc:	e853 3f00 	ldrex	r3, [r3]
 800e800:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e808:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	461a      	mov	r2, r3
 800e810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e812:	643b      	str	r3, [r7, #64]	; 0x40
 800e814:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e816:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e818:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e81a:	e841 2300 	strex	r3, r2, [r1]
 800e81e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1e6      	bne.n	800e7f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	3308      	adds	r3, #8
 800e82c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e82e:	6a3b      	ldr	r3, [r7, #32]
 800e830:	e853 3f00 	ldrex	r3, [r3]
 800e834:	61fb      	str	r3, [r7, #28]
   return(result);
 800e836:	69fa      	ldr	r2, [r7, #28]
 800e838:	4b1e      	ldr	r3, [pc, #120]	; (800e8b4 <UART_EndRxTransfer+0xc8>)
 800e83a:	4013      	ands	r3, r2
 800e83c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	3308      	adds	r3, #8
 800e844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e846:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e848:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e84a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e84c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e84e:	e841 2300 	strex	r3, r2, [r1]
 800e852:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e856:	2b00      	cmp	r3, #0
 800e858:	d1e5      	bne.n	800e826 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d118      	bne.n	800e894 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	e853 3f00 	ldrex	r3, [r3]
 800e86e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	f023 0310 	bic.w	r3, r3, #16
 800e876:	647b      	str	r3, [r7, #68]	; 0x44
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	461a      	mov	r2, r3
 800e87e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e880:	61bb      	str	r3, [r7, #24]
 800e882:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e884:	6979      	ldr	r1, [r7, #20]
 800e886:	69ba      	ldr	r2, [r7, #24]
 800e888:	e841 2300 	strex	r3, r2, [r1]
 800e88c:	613b      	str	r3, [r7, #16]
   return(result);
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1e6      	bne.n	800e862 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2220      	movs	r2, #32
 800e898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e8a8:	bf00      	nop
 800e8aa:	3754      	adds	r7, #84	; 0x54
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr
 800e8b4:	effffffe 	.word	0xeffffffe

0800e8b8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b090      	sub	sp, #64	; 0x40
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	69db      	ldr	r3, [r3, #28]
 800e8ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8ce:	d037      	beq.n	800e940 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	3308      	adds	r3, #8
 800e8de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e2:	e853 3f00 	ldrex	r3, [r3]
 800e8e6:	623b      	str	r3, [r7, #32]
   return(result);
 800e8e8:	6a3b      	ldr	r3, [r7, #32]
 800e8ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	3308      	adds	r3, #8
 800e8f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8f8:	633a      	str	r2, [r7, #48]	; 0x30
 800e8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e900:	e841 2300 	strex	r3, r2, [r1]
 800e904:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1e5      	bne.n	800e8d8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	e853 3f00 	ldrex	r3, [r3]
 800e918:	60fb      	str	r3, [r7, #12]
   return(result);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e920:	637b      	str	r3, [r7, #52]	; 0x34
 800e922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	461a      	mov	r2, r3
 800e928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e92a:	61fb      	str	r3, [r7, #28]
 800e92c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e92e:	69b9      	ldr	r1, [r7, #24]
 800e930:	69fa      	ldr	r2, [r7, #28]
 800e932:	e841 2300 	strex	r3, r2, [r1]
 800e936:	617b      	str	r3, [r7, #20]
   return(result);
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d1e6      	bne.n	800e90c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e93e:	e002      	b.n	800e946 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e940:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e942:	f7f5 fb61 	bl	8004008 <HAL_UART_TxCpltCallback>
}
 800e946:	bf00      	nop
 800e948:	3740      	adds	r7, #64	; 0x40
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b084      	sub	sp, #16
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e95a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f7fe fe0f 	bl	800d580 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e962:	bf00      	nop
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b09c      	sub	sp, #112	; 0x70
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e976:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	69db      	ldr	r3, [r3, #28]
 800e97c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e980:	d071      	beq.n	800ea66 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e984:	2200      	movs	r2, #0
 800e986:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e98a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e992:	e853 3f00 	ldrex	r3, [r3]
 800e996:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e99a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e99e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e9a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800e9aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e9ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9b0:	e841 2300 	strex	r3, r2, [r1]
 800e9b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d1e6      	bne.n	800e98a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	3308      	adds	r3, #8
 800e9c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c6:	e853 3f00 	ldrex	r3, [r3]
 800e9ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ce:	f023 0301 	bic.w	r3, r3, #1
 800e9d2:	667b      	str	r3, [r7, #100]	; 0x64
 800e9d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	3308      	adds	r3, #8
 800e9da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e9dc:	647a      	str	r2, [r7, #68]	; 0x44
 800e9de:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9e4:	e841 2300 	strex	r3, r2, [r1]
 800e9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d1e5      	bne.n	800e9bc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	3308      	adds	r3, #8
 800e9f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fa:	e853 3f00 	ldrex	r3, [r3]
 800e9fe:	623b      	str	r3, [r7, #32]
   return(result);
 800ea00:	6a3b      	ldr	r3, [r7, #32]
 800ea02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea06:	663b      	str	r3, [r7, #96]	; 0x60
 800ea08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	3308      	adds	r3, #8
 800ea0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea10:	633a      	str	r2, [r7, #48]	; 0x30
 800ea12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea18:	e841 2300 	strex	r3, r2, [r1]
 800ea1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d1e5      	bne.n	800e9f0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ea24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea26:	2220      	movs	r2, #32
 800ea28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d118      	bne.n	800ea66 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	e853 3f00 	ldrex	r3, [r3]
 800ea40:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f023 0310 	bic.w	r3, r3, #16
 800ea48:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea52:	61fb      	str	r3, [r7, #28]
 800ea54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea56:	69b9      	ldr	r1, [r7, #24]
 800ea58:	69fa      	ldr	r2, [r7, #28]
 800ea5a:	e841 2300 	strex	r3, r2, [r1]
 800ea5e:	617b      	str	r3, [r7, #20]
   return(result);
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1e6      	bne.n	800ea34 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea6a:	2b01      	cmp	r3, #1
 800ea6c:	d107      	bne.n	800ea7e <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ea74:	4619      	mov	r1, r3
 800ea76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ea78:	f7fe fda0 	bl	800d5bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ea7c:	e002      	b.n	800ea84 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ea7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ea80:	f7f5 fad4 	bl	800402c <HAL_UART_RxCpltCallback>
}
 800ea84:	bf00      	nop
 800ea86:	3770      	adds	r7, #112	; 0x70
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea98:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d109      	bne.n	800eab6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eaa8:	085b      	lsrs	r3, r3, #1
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	4619      	mov	r1, r3
 800eaae:	68f8      	ldr	r0, [r7, #12]
 800eab0:	f7fe fd84 	bl	800d5bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eab4:	e002      	b.n	800eabc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f7fe fd6c 	bl	800d594 <HAL_UART_RxHalfCpltCallback>
}
 800eabc:	bf00      	nop
 800eabe:	3710      	adds	r7, #16
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ead8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eae0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	689b      	ldr	r3, [r3, #8]
 800eae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaec:	2b80      	cmp	r3, #128	; 0x80
 800eaee:	d109      	bne.n	800eb04 <UART_DMAError+0x40>
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	2b21      	cmp	r3, #33	; 0x21
 800eaf4:	d106      	bne.n	800eb04 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800eafe:	6978      	ldr	r0, [r7, #20]
 800eb00:	f7ff fe32 	bl	800e768 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	689b      	ldr	r3, [r3, #8]
 800eb0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb0e:	2b40      	cmp	r3, #64	; 0x40
 800eb10:	d109      	bne.n	800eb26 <UART_DMAError+0x62>
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2b22      	cmp	r3, #34	; 0x22
 800eb16:	d106      	bne.n	800eb26 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eb20:	6978      	ldr	r0, [r7, #20]
 800eb22:	f7ff fe63 	bl	800e7ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb2c:	f043 0210 	orr.w	r2, r3, #16
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb36:	6978      	ldr	r0, [r7, #20]
 800eb38:	f7fe fd36 	bl	800d5a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb3c:	bf00      	nop
 800eb3e:	3718      	adds	r7, #24
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2200      	movs	r2, #0
 800eb56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb62:	68f8      	ldr	r0, [r7, #12]
 800eb64:	f7fe fd20 	bl	800d5a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb68:	bf00      	nop
 800eb6a:	3710      	adds	r7, #16
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b088      	sub	sp, #32
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	e853 3f00 	ldrex	r3, [r3]
 800eb84:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb8c:	61fb      	str	r3, [r7, #28]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	461a      	mov	r2, r3
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	61bb      	str	r3, [r7, #24]
 800eb98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb9a:	6979      	ldr	r1, [r7, #20]
 800eb9c:	69ba      	ldr	r2, [r7, #24]
 800eb9e:	e841 2300 	strex	r3, r2, [r1]
 800eba2:	613b      	str	r3, [r7, #16]
   return(result);
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d1e6      	bne.n	800eb78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2220      	movs	r2, #32
 800ebae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f7f5 fa25 	bl	8004008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebbe:	bf00      	nop
 800ebc0:	3720      	adds	r7, #32
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}

0800ebc6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ebc6:	b480      	push	{r7}
 800ebc8:	b083      	sub	sp, #12
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ebce:	bf00      	nop
 800ebd0:	370c      	adds	r7, #12
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd8:	4770      	bx	lr

0800ebda <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ebda:	b480      	push	{r7}
 800ebdc:	b083      	sub	sp, #12
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ebe2:	bf00      	nop
 800ebe4:	370c      	adds	r7, #12
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr

0800ebee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ebee:	b480      	push	{r7}
 800ebf0:	b083      	sub	sp, #12
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ebf6:	bf00      	nop
 800ebf8:	370c      	adds	r7, #12
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec00:	4770      	bx	lr

0800ec02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ec02:	b480      	push	{r7}
 800ec04:	b085      	sub	sp, #20
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d101      	bne.n	800ec18 <HAL_UARTEx_DisableFifoMode+0x16>
 800ec14:	2302      	movs	r3, #2
 800ec16:	e027      	b.n	800ec68 <HAL_UARTEx_DisableFifoMode+0x66>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2224      	movs	r2, #36	; 0x24
 800ec24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f022 0201 	bic.w	r2, r2, #1
 800ec3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ec46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	68fa      	ldr	r2, [r7, #12]
 800ec54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2220      	movs	r2, #32
 800ec5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2200      	movs	r2, #0
 800ec62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec66:	2300      	movs	r3, #0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3714      	adds	r7, #20
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d101      	bne.n	800ec8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ec88:	2302      	movs	r3, #2
 800ec8a:	e02d      	b.n	800ece8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2201      	movs	r2, #1
 800ec90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2224      	movs	r2, #36	; 0x24
 800ec98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f022 0201 	bic.w	r2, r2, #1
 800ecb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	689b      	ldr	r3, [r3, #8]
 800ecba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	683a      	ldr	r2, [r7, #0]
 800ecc4:	430a      	orrs	r2, r1
 800ecc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f000 f84f 	bl	800ed6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	68fa      	ldr	r2, [r7, #12]
 800ecd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2220      	movs	r2, #32
 800ecda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2200      	movs	r2, #0
 800ece2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ece6:	2300      	movs	r3, #0
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3710      	adds	r7, #16
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d101      	bne.n	800ed08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ed04:	2302      	movs	r3, #2
 800ed06:	e02d      	b.n	800ed64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2224      	movs	r2, #36	; 0x24
 800ed14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f022 0201 	bic.w	r2, r2, #1
 800ed2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	689b      	ldr	r3, [r3, #8]
 800ed36:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	683a      	ldr	r2, [r7, #0]
 800ed40:	430a      	orrs	r2, r1
 800ed42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f000 f811 	bl	800ed6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2220      	movs	r2, #32
 800ed56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed62:	2300      	movs	r3, #0
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3710      	adds	r7, #16
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b085      	sub	sp, #20
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d108      	bne.n	800ed8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2201      	movs	r2, #1
 800ed80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2201      	movs	r2, #1
 800ed88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ed8c:	e031      	b.n	800edf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ed8e:	2310      	movs	r3, #16
 800ed90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ed92:	2310      	movs	r3, #16
 800ed94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	689b      	ldr	r3, [r3, #8]
 800ed9c:	0e5b      	lsrs	r3, r3, #25
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	f003 0307 	and.w	r3, r3, #7
 800eda4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	0f5b      	lsrs	r3, r3, #29
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	f003 0307 	and.w	r3, r3, #7
 800edb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800edb6:	7bbb      	ldrb	r3, [r7, #14]
 800edb8:	7b3a      	ldrb	r2, [r7, #12]
 800edba:	4911      	ldr	r1, [pc, #68]	; (800ee00 <UARTEx_SetNbDataToProcess+0x94>)
 800edbc:	5c8a      	ldrb	r2, [r1, r2]
 800edbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800edc2:	7b3a      	ldrb	r2, [r7, #12]
 800edc4:	490f      	ldr	r1, [pc, #60]	; (800ee04 <UARTEx_SetNbDataToProcess+0x98>)
 800edc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800edc8:	fb93 f3f2 	sdiv	r3, r3, r2
 800edcc:	b29a      	uxth	r2, r3
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800edd4:	7bfb      	ldrb	r3, [r7, #15]
 800edd6:	7b7a      	ldrb	r2, [r7, #13]
 800edd8:	4909      	ldr	r1, [pc, #36]	; (800ee00 <UARTEx_SetNbDataToProcess+0x94>)
 800edda:	5c8a      	ldrb	r2, [r1, r2]
 800eddc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ede0:	7b7a      	ldrb	r2, [r7, #13]
 800ede2:	4908      	ldr	r1, [pc, #32]	; (800ee04 <UARTEx_SetNbDataToProcess+0x98>)
 800ede4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ede6:	fb93 f3f2 	sdiv	r3, r3, r2
 800edea:	b29a      	uxth	r2, r3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800edf2:	bf00      	nop
 800edf4:	3714      	adds	r7, #20
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr
 800edfe:	bf00      	nop
 800ee00:	0800f534 	.word	0x0800f534
 800ee04:	0800f53c 	.word	0x0800f53c

0800ee08 <__cxa_pure_virtual>:
 800ee08:	b508      	push	{r3, lr}
 800ee0a:	f000 f80d 	bl	800ee28 <_ZSt9terminatev>

0800ee0e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ee0e:	b508      	push	{r3, lr}
 800ee10:	4780      	blx	r0
 800ee12:	f000 f80e 	bl	800ee32 <abort>
	...

0800ee18 <_ZSt13get_terminatev>:
 800ee18:	4b02      	ldr	r3, [pc, #8]	; (800ee24 <_ZSt13get_terminatev+0xc>)
 800ee1a:	6818      	ldr	r0, [r3, #0]
 800ee1c:	f3bf 8f5b 	dmb	ish
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop
 800ee24:	24000010 	.word	0x24000010

0800ee28 <_ZSt9terminatev>:
 800ee28:	b508      	push	{r3, lr}
 800ee2a:	f7ff fff5 	bl	800ee18 <_ZSt13get_terminatev>
 800ee2e:	f7ff ffee 	bl	800ee0e <_ZN10__cxxabiv111__terminateEPFvvE>

0800ee32 <abort>:
 800ee32:	b508      	push	{r3, lr}
 800ee34:	2006      	movs	r0, #6
 800ee36:	f000 f873 	bl	800ef20 <raise>
 800ee3a:	2001      	movs	r0, #1
 800ee3c:	f7f6 fcec 	bl	8005818 <_exit>

0800ee40 <__errno>:
 800ee40:	4b01      	ldr	r3, [pc, #4]	; (800ee48 <__errno+0x8>)
 800ee42:	6818      	ldr	r0, [r3, #0]
 800ee44:	4770      	bx	lr
 800ee46:	bf00      	nop
 800ee48:	24000014 	.word	0x24000014

0800ee4c <__libc_init_array>:
 800ee4c:	b570      	push	{r4, r5, r6, lr}
 800ee4e:	4d0d      	ldr	r5, [pc, #52]	; (800ee84 <__libc_init_array+0x38>)
 800ee50:	4c0d      	ldr	r4, [pc, #52]	; (800ee88 <__libc_init_array+0x3c>)
 800ee52:	1b64      	subs	r4, r4, r5
 800ee54:	10a4      	asrs	r4, r4, #2
 800ee56:	2600      	movs	r6, #0
 800ee58:	42a6      	cmp	r6, r4
 800ee5a:	d109      	bne.n	800ee70 <__libc_init_array+0x24>
 800ee5c:	4d0b      	ldr	r5, [pc, #44]	; (800ee8c <__libc_init_array+0x40>)
 800ee5e:	4c0c      	ldr	r4, [pc, #48]	; (800ee90 <__libc_init_array+0x44>)
 800ee60:	f000 f9b0 	bl	800f1c4 <_init>
 800ee64:	1b64      	subs	r4, r4, r5
 800ee66:	10a4      	asrs	r4, r4, #2
 800ee68:	2600      	movs	r6, #0
 800ee6a:	42a6      	cmp	r6, r4
 800ee6c:	d105      	bne.n	800ee7a <__libc_init_array+0x2e>
 800ee6e:	bd70      	pop	{r4, r5, r6, pc}
 800ee70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee74:	4798      	blx	r3
 800ee76:	3601      	adds	r6, #1
 800ee78:	e7ee      	b.n	800ee58 <__libc_init_array+0xc>
 800ee7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee7e:	4798      	blx	r3
 800ee80:	3601      	adds	r6, #1
 800ee82:	e7f2      	b.n	800ee6a <__libc_init_array+0x1e>
 800ee84:	0800f54c 	.word	0x0800f54c
 800ee88:	0800f54c 	.word	0x0800f54c
 800ee8c:	0800f54c 	.word	0x0800f54c
 800ee90:	0800f554 	.word	0x0800f554

0800ee94 <memcpy>:
 800ee94:	440a      	add	r2, r1
 800ee96:	4291      	cmp	r1, r2
 800ee98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ee9c:	d100      	bne.n	800eea0 <memcpy+0xc>
 800ee9e:	4770      	bx	lr
 800eea0:	b510      	push	{r4, lr}
 800eea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eeaa:	4291      	cmp	r1, r2
 800eeac:	d1f9      	bne.n	800eea2 <memcpy+0xe>
 800eeae:	bd10      	pop	{r4, pc}

0800eeb0 <memset>:
 800eeb0:	4402      	add	r2, r0
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d100      	bne.n	800eeba <memset+0xa>
 800eeb8:	4770      	bx	lr
 800eeba:	f803 1b01 	strb.w	r1, [r3], #1
 800eebe:	e7f9      	b.n	800eeb4 <memset+0x4>

0800eec0 <realloc>:
 800eec0:	4b02      	ldr	r3, [pc, #8]	; (800eecc <realloc+0xc>)
 800eec2:	460a      	mov	r2, r1
 800eec4:	4601      	mov	r1, r0
 800eec6:	6818      	ldr	r0, [r3, #0]
 800eec8:	f000 b8da 	b.w	800f080 <_realloc_r>
 800eecc:	24000014 	.word	0x24000014

0800eed0 <_raise_r>:
 800eed0:	291f      	cmp	r1, #31
 800eed2:	b538      	push	{r3, r4, r5, lr}
 800eed4:	4604      	mov	r4, r0
 800eed6:	460d      	mov	r5, r1
 800eed8:	d904      	bls.n	800eee4 <_raise_r+0x14>
 800eeda:	2316      	movs	r3, #22
 800eedc:	6003      	str	r3, [r0, #0]
 800eede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eee2:	bd38      	pop	{r3, r4, r5, pc}
 800eee4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eee6:	b112      	cbz	r2, 800eeee <_raise_r+0x1e>
 800eee8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eeec:	b94b      	cbnz	r3, 800ef02 <_raise_r+0x32>
 800eeee:	4620      	mov	r0, r4
 800eef0:	f000 f830 	bl	800ef54 <_getpid_r>
 800eef4:	462a      	mov	r2, r5
 800eef6:	4601      	mov	r1, r0
 800eef8:	4620      	mov	r0, r4
 800eefa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eefe:	f000 b817 	b.w	800ef30 <_kill_r>
 800ef02:	2b01      	cmp	r3, #1
 800ef04:	d00a      	beq.n	800ef1c <_raise_r+0x4c>
 800ef06:	1c59      	adds	r1, r3, #1
 800ef08:	d103      	bne.n	800ef12 <_raise_r+0x42>
 800ef0a:	2316      	movs	r3, #22
 800ef0c:	6003      	str	r3, [r0, #0]
 800ef0e:	2001      	movs	r0, #1
 800ef10:	e7e7      	b.n	800eee2 <_raise_r+0x12>
 800ef12:	2400      	movs	r4, #0
 800ef14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef18:	4628      	mov	r0, r5
 800ef1a:	4798      	blx	r3
 800ef1c:	2000      	movs	r0, #0
 800ef1e:	e7e0      	b.n	800eee2 <_raise_r+0x12>

0800ef20 <raise>:
 800ef20:	4b02      	ldr	r3, [pc, #8]	; (800ef2c <raise+0xc>)
 800ef22:	4601      	mov	r1, r0
 800ef24:	6818      	ldr	r0, [r3, #0]
 800ef26:	f7ff bfd3 	b.w	800eed0 <_raise_r>
 800ef2a:	bf00      	nop
 800ef2c:	24000014 	.word	0x24000014

0800ef30 <_kill_r>:
 800ef30:	b538      	push	{r3, r4, r5, lr}
 800ef32:	4d07      	ldr	r5, [pc, #28]	; (800ef50 <_kill_r+0x20>)
 800ef34:	2300      	movs	r3, #0
 800ef36:	4604      	mov	r4, r0
 800ef38:	4608      	mov	r0, r1
 800ef3a:	4611      	mov	r1, r2
 800ef3c:	602b      	str	r3, [r5, #0]
 800ef3e:	f7f6 fc5b 	bl	80057f8 <_kill>
 800ef42:	1c43      	adds	r3, r0, #1
 800ef44:	d102      	bne.n	800ef4c <_kill_r+0x1c>
 800ef46:	682b      	ldr	r3, [r5, #0]
 800ef48:	b103      	cbz	r3, 800ef4c <_kill_r+0x1c>
 800ef4a:	6023      	str	r3, [r4, #0]
 800ef4c:	bd38      	pop	{r3, r4, r5, pc}
 800ef4e:	bf00      	nop
 800ef50:	24001cf8 	.word	0x24001cf8

0800ef54 <_getpid_r>:
 800ef54:	f7f6 bc48 	b.w	80057e8 <_getpid>

0800ef58 <sbrk_aligned>:
 800ef58:	b570      	push	{r4, r5, r6, lr}
 800ef5a:	4e0e      	ldr	r6, [pc, #56]	; (800ef94 <sbrk_aligned+0x3c>)
 800ef5c:	460c      	mov	r4, r1
 800ef5e:	6831      	ldr	r1, [r6, #0]
 800ef60:	4605      	mov	r5, r0
 800ef62:	b911      	cbnz	r1, 800ef6a <sbrk_aligned+0x12>
 800ef64:	f000 f8bc 	bl	800f0e0 <_sbrk_r>
 800ef68:	6030      	str	r0, [r6, #0]
 800ef6a:	4621      	mov	r1, r4
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	f000 f8b7 	bl	800f0e0 <_sbrk_r>
 800ef72:	1c43      	adds	r3, r0, #1
 800ef74:	d00a      	beq.n	800ef8c <sbrk_aligned+0x34>
 800ef76:	1cc4      	adds	r4, r0, #3
 800ef78:	f024 0403 	bic.w	r4, r4, #3
 800ef7c:	42a0      	cmp	r0, r4
 800ef7e:	d007      	beq.n	800ef90 <sbrk_aligned+0x38>
 800ef80:	1a21      	subs	r1, r4, r0
 800ef82:	4628      	mov	r0, r5
 800ef84:	f000 f8ac 	bl	800f0e0 <_sbrk_r>
 800ef88:	3001      	adds	r0, #1
 800ef8a:	d101      	bne.n	800ef90 <sbrk_aligned+0x38>
 800ef8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ef90:	4620      	mov	r0, r4
 800ef92:	bd70      	pop	{r4, r5, r6, pc}
 800ef94:	24001cf4 	.word	0x24001cf4

0800ef98 <_malloc_r>:
 800ef98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef9c:	1ccd      	adds	r5, r1, #3
 800ef9e:	f025 0503 	bic.w	r5, r5, #3
 800efa2:	3508      	adds	r5, #8
 800efa4:	2d0c      	cmp	r5, #12
 800efa6:	bf38      	it	cc
 800efa8:	250c      	movcc	r5, #12
 800efaa:	2d00      	cmp	r5, #0
 800efac:	4607      	mov	r7, r0
 800efae:	db01      	blt.n	800efb4 <_malloc_r+0x1c>
 800efb0:	42a9      	cmp	r1, r5
 800efb2:	d905      	bls.n	800efc0 <_malloc_r+0x28>
 800efb4:	230c      	movs	r3, #12
 800efb6:	603b      	str	r3, [r7, #0]
 800efb8:	2600      	movs	r6, #0
 800efba:	4630      	mov	r0, r6
 800efbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc0:	4e2e      	ldr	r6, [pc, #184]	; (800f07c <_malloc_r+0xe4>)
 800efc2:	f000 f89d 	bl	800f100 <__malloc_lock>
 800efc6:	6833      	ldr	r3, [r6, #0]
 800efc8:	461c      	mov	r4, r3
 800efca:	bb34      	cbnz	r4, 800f01a <_malloc_r+0x82>
 800efcc:	4629      	mov	r1, r5
 800efce:	4638      	mov	r0, r7
 800efd0:	f7ff ffc2 	bl	800ef58 <sbrk_aligned>
 800efd4:	1c43      	adds	r3, r0, #1
 800efd6:	4604      	mov	r4, r0
 800efd8:	d14d      	bne.n	800f076 <_malloc_r+0xde>
 800efda:	6834      	ldr	r4, [r6, #0]
 800efdc:	4626      	mov	r6, r4
 800efde:	2e00      	cmp	r6, #0
 800efe0:	d140      	bne.n	800f064 <_malloc_r+0xcc>
 800efe2:	6823      	ldr	r3, [r4, #0]
 800efe4:	4631      	mov	r1, r6
 800efe6:	4638      	mov	r0, r7
 800efe8:	eb04 0803 	add.w	r8, r4, r3
 800efec:	f000 f878 	bl	800f0e0 <_sbrk_r>
 800eff0:	4580      	cmp	r8, r0
 800eff2:	d13a      	bne.n	800f06a <_malloc_r+0xd2>
 800eff4:	6821      	ldr	r1, [r4, #0]
 800eff6:	3503      	adds	r5, #3
 800eff8:	1a6d      	subs	r5, r5, r1
 800effa:	f025 0503 	bic.w	r5, r5, #3
 800effe:	3508      	adds	r5, #8
 800f000:	2d0c      	cmp	r5, #12
 800f002:	bf38      	it	cc
 800f004:	250c      	movcc	r5, #12
 800f006:	4629      	mov	r1, r5
 800f008:	4638      	mov	r0, r7
 800f00a:	f7ff ffa5 	bl	800ef58 <sbrk_aligned>
 800f00e:	3001      	adds	r0, #1
 800f010:	d02b      	beq.n	800f06a <_malloc_r+0xd2>
 800f012:	6823      	ldr	r3, [r4, #0]
 800f014:	442b      	add	r3, r5
 800f016:	6023      	str	r3, [r4, #0]
 800f018:	e00e      	b.n	800f038 <_malloc_r+0xa0>
 800f01a:	6822      	ldr	r2, [r4, #0]
 800f01c:	1b52      	subs	r2, r2, r5
 800f01e:	d41e      	bmi.n	800f05e <_malloc_r+0xc6>
 800f020:	2a0b      	cmp	r2, #11
 800f022:	d916      	bls.n	800f052 <_malloc_r+0xba>
 800f024:	1961      	adds	r1, r4, r5
 800f026:	42a3      	cmp	r3, r4
 800f028:	6025      	str	r5, [r4, #0]
 800f02a:	bf18      	it	ne
 800f02c:	6059      	strne	r1, [r3, #4]
 800f02e:	6863      	ldr	r3, [r4, #4]
 800f030:	bf08      	it	eq
 800f032:	6031      	streq	r1, [r6, #0]
 800f034:	5162      	str	r2, [r4, r5]
 800f036:	604b      	str	r3, [r1, #4]
 800f038:	4638      	mov	r0, r7
 800f03a:	f104 060b 	add.w	r6, r4, #11
 800f03e:	f000 f865 	bl	800f10c <__malloc_unlock>
 800f042:	f026 0607 	bic.w	r6, r6, #7
 800f046:	1d23      	adds	r3, r4, #4
 800f048:	1af2      	subs	r2, r6, r3
 800f04a:	d0b6      	beq.n	800efba <_malloc_r+0x22>
 800f04c:	1b9b      	subs	r3, r3, r6
 800f04e:	50a3      	str	r3, [r4, r2]
 800f050:	e7b3      	b.n	800efba <_malloc_r+0x22>
 800f052:	6862      	ldr	r2, [r4, #4]
 800f054:	42a3      	cmp	r3, r4
 800f056:	bf0c      	ite	eq
 800f058:	6032      	streq	r2, [r6, #0]
 800f05a:	605a      	strne	r2, [r3, #4]
 800f05c:	e7ec      	b.n	800f038 <_malloc_r+0xa0>
 800f05e:	4623      	mov	r3, r4
 800f060:	6864      	ldr	r4, [r4, #4]
 800f062:	e7b2      	b.n	800efca <_malloc_r+0x32>
 800f064:	4634      	mov	r4, r6
 800f066:	6876      	ldr	r6, [r6, #4]
 800f068:	e7b9      	b.n	800efde <_malloc_r+0x46>
 800f06a:	230c      	movs	r3, #12
 800f06c:	603b      	str	r3, [r7, #0]
 800f06e:	4638      	mov	r0, r7
 800f070:	f000 f84c 	bl	800f10c <__malloc_unlock>
 800f074:	e7a1      	b.n	800efba <_malloc_r+0x22>
 800f076:	6025      	str	r5, [r4, #0]
 800f078:	e7de      	b.n	800f038 <_malloc_r+0xa0>
 800f07a:	bf00      	nop
 800f07c:	24001cf0 	.word	0x24001cf0

0800f080 <_realloc_r>:
 800f080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f084:	4680      	mov	r8, r0
 800f086:	4614      	mov	r4, r2
 800f088:	460e      	mov	r6, r1
 800f08a:	b921      	cbnz	r1, 800f096 <_realloc_r+0x16>
 800f08c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f090:	4611      	mov	r1, r2
 800f092:	f7ff bf81 	b.w	800ef98 <_malloc_r>
 800f096:	b92a      	cbnz	r2, 800f0a4 <_realloc_r+0x24>
 800f098:	f000 f83e 	bl	800f118 <_free_r>
 800f09c:	4625      	mov	r5, r4
 800f09e:	4628      	mov	r0, r5
 800f0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a4:	f000 f884 	bl	800f1b0 <_malloc_usable_size_r>
 800f0a8:	4284      	cmp	r4, r0
 800f0aa:	4607      	mov	r7, r0
 800f0ac:	d802      	bhi.n	800f0b4 <_realloc_r+0x34>
 800f0ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f0b2:	d812      	bhi.n	800f0da <_realloc_r+0x5a>
 800f0b4:	4621      	mov	r1, r4
 800f0b6:	4640      	mov	r0, r8
 800f0b8:	f7ff ff6e 	bl	800ef98 <_malloc_r>
 800f0bc:	4605      	mov	r5, r0
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	d0ed      	beq.n	800f09e <_realloc_r+0x1e>
 800f0c2:	42bc      	cmp	r4, r7
 800f0c4:	4622      	mov	r2, r4
 800f0c6:	4631      	mov	r1, r6
 800f0c8:	bf28      	it	cs
 800f0ca:	463a      	movcs	r2, r7
 800f0cc:	f7ff fee2 	bl	800ee94 <memcpy>
 800f0d0:	4631      	mov	r1, r6
 800f0d2:	4640      	mov	r0, r8
 800f0d4:	f000 f820 	bl	800f118 <_free_r>
 800f0d8:	e7e1      	b.n	800f09e <_realloc_r+0x1e>
 800f0da:	4635      	mov	r5, r6
 800f0dc:	e7df      	b.n	800f09e <_realloc_r+0x1e>
	...

0800f0e0 <_sbrk_r>:
 800f0e0:	b538      	push	{r3, r4, r5, lr}
 800f0e2:	4d06      	ldr	r5, [pc, #24]	; (800f0fc <_sbrk_r+0x1c>)
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	4608      	mov	r0, r1
 800f0ea:	602b      	str	r3, [r5, #0]
 800f0ec:	f7f6 fb9e 	bl	800582c <_sbrk>
 800f0f0:	1c43      	adds	r3, r0, #1
 800f0f2:	d102      	bne.n	800f0fa <_sbrk_r+0x1a>
 800f0f4:	682b      	ldr	r3, [r5, #0]
 800f0f6:	b103      	cbz	r3, 800f0fa <_sbrk_r+0x1a>
 800f0f8:	6023      	str	r3, [r4, #0]
 800f0fa:	bd38      	pop	{r3, r4, r5, pc}
 800f0fc:	24001cf8 	.word	0x24001cf8

0800f100 <__malloc_lock>:
 800f100:	4801      	ldr	r0, [pc, #4]	; (800f108 <__malloc_lock+0x8>)
 800f102:	f000 b85d 	b.w	800f1c0 <__retarget_lock_acquire_recursive>
 800f106:	bf00      	nop
 800f108:	24001cfc 	.word	0x24001cfc

0800f10c <__malloc_unlock>:
 800f10c:	4801      	ldr	r0, [pc, #4]	; (800f114 <__malloc_unlock+0x8>)
 800f10e:	f000 b858 	b.w	800f1c2 <__retarget_lock_release_recursive>
 800f112:	bf00      	nop
 800f114:	24001cfc 	.word	0x24001cfc

0800f118 <_free_r>:
 800f118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f11a:	2900      	cmp	r1, #0
 800f11c:	d044      	beq.n	800f1a8 <_free_r+0x90>
 800f11e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f122:	9001      	str	r0, [sp, #4]
 800f124:	2b00      	cmp	r3, #0
 800f126:	f1a1 0404 	sub.w	r4, r1, #4
 800f12a:	bfb8      	it	lt
 800f12c:	18e4      	addlt	r4, r4, r3
 800f12e:	f7ff ffe7 	bl	800f100 <__malloc_lock>
 800f132:	4a1e      	ldr	r2, [pc, #120]	; (800f1ac <_free_r+0x94>)
 800f134:	9801      	ldr	r0, [sp, #4]
 800f136:	6813      	ldr	r3, [r2, #0]
 800f138:	b933      	cbnz	r3, 800f148 <_free_r+0x30>
 800f13a:	6063      	str	r3, [r4, #4]
 800f13c:	6014      	str	r4, [r2, #0]
 800f13e:	b003      	add	sp, #12
 800f140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f144:	f7ff bfe2 	b.w	800f10c <__malloc_unlock>
 800f148:	42a3      	cmp	r3, r4
 800f14a:	d908      	bls.n	800f15e <_free_r+0x46>
 800f14c:	6825      	ldr	r5, [r4, #0]
 800f14e:	1961      	adds	r1, r4, r5
 800f150:	428b      	cmp	r3, r1
 800f152:	bf01      	itttt	eq
 800f154:	6819      	ldreq	r1, [r3, #0]
 800f156:	685b      	ldreq	r3, [r3, #4]
 800f158:	1949      	addeq	r1, r1, r5
 800f15a:	6021      	streq	r1, [r4, #0]
 800f15c:	e7ed      	b.n	800f13a <_free_r+0x22>
 800f15e:	461a      	mov	r2, r3
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	b10b      	cbz	r3, 800f168 <_free_r+0x50>
 800f164:	42a3      	cmp	r3, r4
 800f166:	d9fa      	bls.n	800f15e <_free_r+0x46>
 800f168:	6811      	ldr	r1, [r2, #0]
 800f16a:	1855      	adds	r5, r2, r1
 800f16c:	42a5      	cmp	r5, r4
 800f16e:	d10b      	bne.n	800f188 <_free_r+0x70>
 800f170:	6824      	ldr	r4, [r4, #0]
 800f172:	4421      	add	r1, r4
 800f174:	1854      	adds	r4, r2, r1
 800f176:	42a3      	cmp	r3, r4
 800f178:	6011      	str	r1, [r2, #0]
 800f17a:	d1e0      	bne.n	800f13e <_free_r+0x26>
 800f17c:	681c      	ldr	r4, [r3, #0]
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	6053      	str	r3, [r2, #4]
 800f182:	4421      	add	r1, r4
 800f184:	6011      	str	r1, [r2, #0]
 800f186:	e7da      	b.n	800f13e <_free_r+0x26>
 800f188:	d902      	bls.n	800f190 <_free_r+0x78>
 800f18a:	230c      	movs	r3, #12
 800f18c:	6003      	str	r3, [r0, #0]
 800f18e:	e7d6      	b.n	800f13e <_free_r+0x26>
 800f190:	6825      	ldr	r5, [r4, #0]
 800f192:	1961      	adds	r1, r4, r5
 800f194:	428b      	cmp	r3, r1
 800f196:	bf04      	itt	eq
 800f198:	6819      	ldreq	r1, [r3, #0]
 800f19a:	685b      	ldreq	r3, [r3, #4]
 800f19c:	6063      	str	r3, [r4, #4]
 800f19e:	bf04      	itt	eq
 800f1a0:	1949      	addeq	r1, r1, r5
 800f1a2:	6021      	streq	r1, [r4, #0]
 800f1a4:	6054      	str	r4, [r2, #4]
 800f1a6:	e7ca      	b.n	800f13e <_free_r+0x26>
 800f1a8:	b003      	add	sp, #12
 800f1aa:	bd30      	pop	{r4, r5, pc}
 800f1ac:	24001cf0 	.word	0x24001cf0

0800f1b0 <_malloc_usable_size_r>:
 800f1b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1b4:	1f18      	subs	r0, r3, #4
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	bfbc      	itt	lt
 800f1ba:	580b      	ldrlt	r3, [r1, r0]
 800f1bc:	18c0      	addlt	r0, r0, r3
 800f1be:	4770      	bx	lr

0800f1c0 <__retarget_lock_acquire_recursive>:
 800f1c0:	4770      	bx	lr

0800f1c2 <__retarget_lock_release_recursive>:
 800f1c2:	4770      	bx	lr

0800f1c4 <_init>:
 800f1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c6:	bf00      	nop
 800f1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ca:	bc08      	pop	{r3}
 800f1cc:	469e      	mov	lr, r3
 800f1ce:	4770      	bx	lr

0800f1d0 <_fini>:
 800f1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d2:	bf00      	nop
 800f1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1d6:	bc08      	pop	{r3}
 800f1d8:	469e      	mov	lr, r3
 800f1da:	4770      	bx	lr
