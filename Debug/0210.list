
0210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee8c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800f15c  0800f15c  0001f15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f4c4  0800f4c4  0001f4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f4cc  0800f4cc  0001f4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f4d4  0800f4d4  0001f4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f4d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c88  24000078  0800f550  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001d00  0800f550  00021d00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fa63  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032a1  00000000  00000000  0003fb09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b0  00000000  00000000  00042db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c0  00000000  00000000  00044260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034db1  00000000  00000000  00045620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a5f6  00000000  00000000  0007a3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153ff4  00000000  00000000  000949c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e89bb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d6c  00000000  00000000  001e8a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f144 	.word	0x0800f144

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f144 	.word	0x0800f144

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PV1 = 0, PV2 = 0, PV3 = 0, PV4 = 0;
 8000684:	49a6      	ldr	r1, [pc, #664]	; (8000920 <main+0x2a0>)
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c1 2300 	strd	r2, r3, [r1]
 8000692:	49a4      	ldr	r1, [pc, #656]	; (8000924 <main+0x2a4>)
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c1 2300 	strd	r2, r3, [r1]
 80006a0:	49a1      	ldr	r1, [pc, #644]	; (8000928 <main+0x2a8>)
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e9c1 2300 	strd	r2, r3, [r1]
 80006ae:	499f      	ldr	r1, [pc, #636]	; (800092c <main+0x2ac>)
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	f04f 0300 	mov.w	r3, #0
 80006b8:	e9c1 2300 	strd	r2, r3, [r1]
	SP1 = 0, SP2 = 0, SP3 = 0, SP4 = 0;
 80006bc:	499c      	ldr	r1, [pc, #624]	; (8000930 <main+0x2b0>)
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
 80006ca:	499a      	ldr	r1, [pc, #616]	; (8000934 <main+0x2b4>)
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c1 2300 	strd	r2, r3, [r1]
 80006d8:	4997      	ldr	r1, [pc, #604]	; (8000938 <main+0x2b8>)
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
 80006e6:	4995      	ldr	r1, [pc, #596]	; (800093c <main+0x2bc>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]

	n = 0;
 80006f4:	4b92      	ldr	r3, [pc, #584]	; (8000940 <main+0x2c0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	kkk = 0;
 80006fa:	4b92      	ldr	r3, [pc, #584]	; (8000944 <main+0x2c4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
	count = 0;
 8000700:	4b91      	ldr	r3, [pc, #580]	; (8000948 <main+0x2c8>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	error1 = PV1 - SP1;
 8000706:	4b86      	ldr	r3, [pc, #536]	; (8000920 <main+0x2a0>)
 8000708:	ed93 6b00 	vldr	d6, [r3]
 800070c:	4b88      	ldr	r3, [pc, #544]	; (8000930 <main+0x2b0>)
 800070e:	ed93 7b00 	vldr	d7, [r3]
 8000712:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000716:	4b8d      	ldr	r3, [pc, #564]	; (800094c <main+0x2cc>)
 8000718:	ed83 7b00 	vstr	d7, [r3]
	error2 = PV2 - SP2;
 800071c:	4b81      	ldr	r3, [pc, #516]	; (8000924 <main+0x2a4>)
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	4b84      	ldr	r3, [pc, #528]	; (8000934 <main+0x2b4>)
 8000724:	ed93 7b00 	vldr	d7, [r3]
 8000728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072c:	4b88      	ldr	r3, [pc, #544]	; (8000950 <main+0x2d0>)
 800072e:	ed83 7b00 	vstr	d7, [r3]
	error3 = PV3 - SP3;
 8000732:	4b7d      	ldr	r3, [pc, #500]	; (8000928 <main+0x2a8>)
 8000734:	ed93 6b00 	vldr	d6, [r3]
 8000738:	4b7f      	ldr	r3, [pc, #508]	; (8000938 <main+0x2b8>)
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000742:	4b84      	ldr	r3, [pc, #528]	; (8000954 <main+0x2d4>)
 8000744:	ed83 7b00 	vstr	d7, [r3]
	error4 = PV4 - SP4;
 8000748:	4b78      	ldr	r3, [pc, #480]	; (800092c <main+0x2ac>)
 800074a:	ed93 6b00 	vldr	d6, [r3]
 800074e:	4b7b      	ldr	r3, [pc, #492]	; (800093c <main+0x2bc>)
 8000750:	ed93 7b00 	vldr	d7, [r3]
 8000754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000758:	4b7f      	ldr	r3, [pc, #508]	; (8000958 <main+0x2d8>)
 800075a:	ed83 7b00 	vstr	d7, [r3]
	enc1 = 0, enc2 = 0, enc3 = 0, enc4 = 0;
 800075e:	4b7f      	ldr	r3, [pc, #508]	; (800095c <main+0x2dc>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	4b7e      	ldr	r3, [pc, #504]	; (8000960 <main+0x2e0>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	4b7e      	ldr	r3, [pc, #504]	; (8000964 <main+0x2e4>)
 800076c:	2200      	movs	r2, #0
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	4b7d      	ldr	r3, [pc, #500]	; (8000968 <main+0x2e8>)
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]

	Kp1 = 1.314238; // blue
 8000776:	497d      	ldr	r1, [pc, #500]	; (800096c <main+0x2ec>)
 8000778:	a361      	add	r3, pc, #388	; (adr r3, 8000900 <main+0x280>)
 800077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 = 37.12271; // blue
 8000782:	497b      	ldr	r1, [pc, #492]	; (8000970 <main+0x2f0>)
 8000784:	a360      	add	r3, pc, #384	; (adr r3, 8000908 <main+0x288>)
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 = 1.8217; // purple
 800078e:	4979      	ldr	r1, [pc, #484]	; (8000974 <main+0x2f4>)
 8000790:	a35f      	add	r3, pc, #380	; (adr r3, 8000910 <main+0x290>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 = 48.293; // purple
 800079a:	4977      	ldr	r1, [pc, #476]	; (8000978 <main+0x2f8>)
 800079c:	a35e      	add	r3, pc, #376	; (adr r3, 8000918 <main+0x298>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	e9c1 2300 	strd	r2, r3, [r1]
	Kp3 = 1;
 80007a6:	4975      	ldr	r1, [pc, #468]	; (800097c <main+0x2fc>)
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	4b74      	ldr	r3, [pc, #464]	; (8000980 <main+0x300>)
 80007ae:	e9c1 2300 	strd	r2, r3, [r1]
	Ki3 = 30;
 80007b2:	4974      	ldr	r1, [pc, #464]	; (8000984 <main+0x304>)
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	4b73      	ldr	r3, [pc, #460]	; (8000988 <main+0x308>)
 80007ba:	e9c1 2300 	strd	r2, r3, [r1]
	Kp4 = 1;
 80007be:	4973      	ldr	r1, [pc, #460]	; (800098c <main+0x30c>)
 80007c0:	f04f 0200 	mov.w	r2, #0
 80007c4:	4b6e      	ldr	r3, [pc, #440]	; (8000980 <main+0x300>)
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
	Ki4 = 30;
 80007ca:	4971      	ldr	r1, [pc, #452]	; (8000990 <main+0x310>)
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	4b6d      	ldr	r3, [pc, #436]	; (8000988 <main+0x308>)
 80007d2:	e9c1 2300 	strd	r2, r3, [r1]

	error_last1 = 0;
 80007d6:	496f      	ldr	r1, [pc, #444]	; (8000994 <main+0x314>)
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c1 2300 	strd	r2, r3, [r1]
	error_last2 = 0;
 80007e4:	496c      	ldr	r1, [pc, #432]	; (8000998 <main+0x318>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9c1 2300 	strd	r2, r3, [r1]
	error_last3 = 0;
 80007f2:	496a      	ldr	r1, [pc, #424]	; (800099c <main+0x31c>)
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c1 2300 	strd	r2, r3, [r1]
	error_last4 = 0;
 8000800:	4967      	ldr	r1, [pc, #412]	; (80009a0 <main+0x320>)
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c1 2300 	strd	r2, r3, [r1]

	errorsum1 = 0;
 800080e:	4965      	ldr	r1, [pc, #404]	; (80009a4 <main+0x324>)
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum2 = 0;
 800081c:	4962      	ldr	r1, [pc, #392]	; (80009a8 <main+0x328>)
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum3 = 0;
 800082a:	4960      	ldr	r1, [pc, #384]	; (80009ac <main+0x32c>)
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum4 = 0;
 8000838:	495d      	ldr	r1, [pc, #372]	; (80009b0 <main+0x330>)
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2300 	strd	r2, r3, [r1]

	push_vel_x = 0;
 8000846:	495b      	ldr	r1, [pc, #364]	; (80009b4 <main+0x334>)
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_y = 0;
 8000854:	4958      	ldr	r1, [pc, #352]	; (80009b8 <main+0x338>)
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_z = 0;
 8000862:	4956      	ldr	r1, [pc, #344]	; (80009bc <main+0x33c>)
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000870:	f005 f874 	bl	800595c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000874:	f000 f8b6 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000878:	f000 fd86 	bl	8001388 <MX_GPIO_Init>
  MX_DMA_Init();
 800087c:	f000 fd5c 	bl	8001338 <MX_DMA_Init>
  MX_TIM2_Init();
 8000880:	f000 f9ae 	bl	8000be0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000884:	f000 f9fa 	bl	8000c7c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000888:	f000 fa4e 	bl	8000d28 <MX_TIM4_Init>
  MX_TIM6_Init();
 800088c:	f000 fb04 	bl	8000e98 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000890:	f000 fb42 	bl	8000f18 <MX_TIM7_Init>
  MX_TIM1_Init();
 8000894:	f000 f914 	bl	8000ac0 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000898:	f000 faa2 	bl	8000de0 <MX_TIM5_Init>
  MX_TIM8_Init();
 800089c:	f000 fb72 	bl	8000f84 <MX_TIM8_Init>
  MX_TIM15_Init();
 80008a0:	f000 fbca 	bl	8001038 <MX_TIM15_Init>
  MX_TIM23_Init();
 80008a4:	f000 fc50 	bl	8001148 <MX_TIM23_Init>
  MX_TIM24_Init();
 80008a8:	f000 fca4 	bl	80011f4 <MX_TIM24_Init>
  MX_USART3_UART_Init();
 80008ac:	f000 fcf8 	bl	80012a0 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80008b0:	4843      	ldr	r0, [pc, #268]	; (80009c0 <main+0x340>)
 80008b2:	f00a fcd9 	bl	800b268 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80008b6:	2100      	movs	r1, #0
 80008b8:	4842      	ldr	r0, [pc, #264]	; (80009c4 <main+0x344>)
 80008ba:	f00a ffcf 	bl	800b85c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 80008be:	2100      	movs	r1, #0
 80008c0:	4841      	ldr	r0, [pc, #260]	; (80009c8 <main+0x348>)
 80008c2:	f00a ffcb 	bl	800b85c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80008c6:	2100      	movs	r1, #0
 80008c8:	4840      	ldr	r0, [pc, #256]	; (80009cc <main+0x34c>)
 80008ca:	f00a ffc7 	bl	800b85c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80008ce:	2100      	movs	r1, #0
 80008d0:	483f      	ldr	r0, [pc, #252]	; (80009d0 <main+0x350>)
 80008d2:	f00a ffc3 	bl	800b85c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80008d6:	2100      	movs	r1, #0
 80008d8:	483e      	ldr	r0, [pc, #248]	; (80009d4 <main+0x354>)
 80008da:	f00a fda3 	bl	800b424 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80008de:	2100      	movs	r1, #0
 80008e0:	483d      	ldr	r0, [pc, #244]	; (80009d8 <main+0x358>)
 80008e2:	f00a fd9f 	bl	800b424 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80008e6:	2100      	movs	r1, #0
 80008e8:	483c      	ldr	r0, [pc, #240]	; (80009dc <main+0x35c>)
 80008ea:	f00a fd9b 	bl	800b424 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008ee:	2100      	movs	r1, #0
 80008f0:	483b      	ldr	r0, [pc, #236]	; (80009e0 <main+0x360>)
 80008f2:	f00a fd97 	bl	800b424 <HAL_TIM_PWM_Start>

  setup();
 80008f6:	f003 fba1 	bl	800403c <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80008fa:	f003 fbb5 	bl	8004068 <loop>
 80008fe:	e7fc      	b.n	80008fa <main+0x27a>
 8000900:	6cd29132 	.word	0x6cd29132
 8000904:	3ff5071e 	.word	0x3ff5071e
 8000908:	f6167232 	.word	0xf6167232
 800090c:	40428fb4 	.word	0x40428fb4
 8000910:	e631f8a1 	.word	0xe631f8a1
 8000914:	3ffd25ae 	.word	0x3ffd25ae
 8000918:	0624dd2f 	.word	0x0624dd2f
 800091c:	40482581 	.word	0x40482581
 8000920:	24000558 	.word	0x24000558
 8000924:	24000560 	.word	0x24000560
 8000928:	24000568 	.word	0x24000568
 800092c:	24000570 	.word	0x24000570
 8000930:	24000578 	.word	0x24000578
 8000934:	24000580 	.word	0x24000580
 8000938:	24000588 	.word	0x24000588
 800093c:	24000590 	.word	0x24000590
 8000940:	24000660 	.word	0x24000660
 8000944:	24000664 	.word	0x24000664
 8000948:	24000668 	.word	0x24000668
 800094c:	24000598 	.word	0x24000598
 8000950:	240005a0 	.word	0x240005a0
 8000954:	240005a8 	.word	0x240005a8
 8000958:	240005b0 	.word	0x240005b0
 800095c:	240005b8 	.word	0x240005b8
 8000960:	240005ba 	.word	0x240005ba
 8000964:	240005bc 	.word	0x240005bc
 8000968:	240005be 	.word	0x240005be
 800096c:	240005c0 	.word	0x240005c0
 8000970:	240005e0 	.word	0x240005e0
 8000974:	240005c8 	.word	0x240005c8
 8000978:	240005e8 	.word	0x240005e8
 800097c:	240005d0 	.word	0x240005d0
 8000980:	3ff00000 	.word	0x3ff00000
 8000984:	240005f0 	.word	0x240005f0
 8000988:	403e0000 	.word	0x403e0000
 800098c:	240005d8 	.word	0x240005d8
 8000990:	240005f8 	.word	0x240005f8
 8000994:	24000620 	.word	0x24000620
 8000998:	24000628 	.word	0x24000628
 800099c:	24000630 	.word	0x24000630
 80009a0:	24000638 	.word	0x24000638
 80009a4:	24000640 	.word	0x24000640
 80009a8:	24000648 	.word	0x24000648
 80009ac:	24000650 	.word	0x24000650
 80009b0:	24000658 	.word	0x24000658
 80009b4:	240006a0 	.word	0x240006a0
 80009b8:	240006a8 	.word	0x240006a8
 80009bc:	240006b0 	.word	0x240006b0
 80009c0:	240000e0 	.word	0x240000e0
 80009c4:	2400012c 	.word	0x2400012c
 80009c8:	240002a8 	.word	0x240002a8
 80009cc:	24000340 	.word	0x24000340
 80009d0:	2400038c 	.word	0x2400038c
 80009d4:	24000178 	.word	0x24000178
 80009d8:	240001c4 	.word	0x240001c4
 80009dc:	240002f4 	.word	0x240002f4
 80009e0:	24000094 	.word	0x24000094

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b09c      	sub	sp, #112	; 0x70
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	224c      	movs	r2, #76	; 0x4c
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f00e fa1c 	bl	800ee30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2220      	movs	r2, #32
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f00e fa16 	bl	800ee30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a04:	2002      	movs	r0, #2
 8000a06:	f008 f947 	bl	8008c98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <SystemClock_Config+0xd8>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	4a2a      	ldr	r2, [pc, #168]	; (8000abc <SystemClock_Config+0xd8>)
 8000a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a18:	6193      	str	r3, [r2, #24]
 8000a1a:	4b28      	ldr	r3, [pc, #160]	; (8000abc <SystemClock_Config+0xd8>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a26:	bf00      	nop
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <SystemClock_Config+0xd8>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a34:	d1f8      	bne.n	8000a28 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a36:	2301      	movs	r3, #1
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a3a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a40:	2302      	movs	r3, #2
 8000a42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a44:	2302      	movs	r3, #2
 8000a46:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a4c:	23a8      	movs	r3, #168	; 0xa8
 8000a4e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f008 f94d 	bl	8008d0c <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a78:	f001 fad8 	bl	800202c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7c:	233f      	movs	r3, #63	; 0x3f
 8000a7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a80:	2303      	movs	r3, #3
 8000a82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a8c:	2340      	movs	r3, #64	; 0x40
 8000a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a90:	2340      	movs	r3, #64	; 0x40
 8000a92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a9a:	2340      	movs	r3, #64	; 0x40
 8000a9c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 fce0 	bl	8009468 <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000aae:	f001 fabd 	bl	800202c <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3770      	adds	r7, #112	; 0x70
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	58024800 	.word	0x58024800

08000ac0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b098      	sub	sp, #96	; 0x60
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2234      	movs	r2, #52	; 0x34
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00e f99f 	bl	800ee30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af2:	4b39      	ldr	r3, [pc, #228]	; (8000bd8 <MX_TIM1_Init+0x118>)
 8000af4:	4a39      	ldr	r2, [pc, #228]	; (8000bdc <MX_TIM1_Init+0x11c>)
 8000af6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 274;
 8000af8:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <MX_TIM1_Init+0x118>)
 8000afa:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000afe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b35      	ldr	r3, [pc, #212]	; (8000bd8 <MX_TIM1_Init+0x118>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b06:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <MX_TIM1_Init+0x118>)
 8000b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <MX_TIM1_Init+0x118>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b14:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <MX_TIM1_Init+0x118>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <MX_TIM1_Init+0x118>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b20:	482d      	ldr	r0, [pc, #180]	; (8000bd8 <MX_TIM1_Init+0x118>)
 8000b22:	f00a fc27 	bl	800b374 <HAL_TIM_PWM_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000b2c:	f001 fa7e 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b40:	4619      	mov	r1, r3
 8000b42:	4825      	ldr	r0, [pc, #148]	; (8000bd8 <MX_TIM1_Init+0x118>)
 8000b44:	f00b feac 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b4e:	f001 fa6d 	bl	800202c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b52:	2360      	movs	r3, #96	; 0x60
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b72:	2200      	movs	r2, #0
 8000b74:	4619      	mov	r1, r3
 8000b76:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <MX_TIM1_Init+0x118>)
 8000b78:	f00b f81e 	bl	800bbb8 <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000b82:	f001 fa53 	bl	800202c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_TIM1_Init+0x118>)
 8000bbc:	f00b ff0c 	bl	800c9d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000bc6:	f001 fa31 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <MX_TIM1_Init+0x118>)
 8000bcc:	f004 fbea 	bl	80053a4 <HAL_TIM_MspPostInit>

}
 8000bd0:	bf00      	nop
 8000bd2:	3760      	adds	r7, #96	; 0x60
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	24000094 	.word	0x24000094
 8000bdc:	40010000 	.word	0x40010000

08000be0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_TIM2_Init+0x98>)
 8000c00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MX_TIM2_Init+0x98>)
 8000c08:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000c0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_TIM2_Init+0x98>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_TIM2_Init+0x98>)
 8000c16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_TIM2_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_TIM2_Init+0x98>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c28:	4813      	ldr	r0, [pc, #76]	; (8000c78 <MX_TIM2_Init+0x98>)
 8000c2a:	f00a fac5 	bl	800b1b8 <HAL_TIM_Base_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c34:	f001 f9fa 	bl	800202c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <MX_TIM2_Init+0x98>)
 8000c46:	f00b f8cb 	bl	800bde0 <HAL_TIM_ConfigClockSource>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c50:	f001 f9ec 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_TIM2_Init+0x98>)
 8000c62:	f00b fe1d 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c6c:	f001 f9de 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	240000e0 	.word	0x240000e0

08000c7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2224      	movs	r2, #36	; 0x24
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00e f8d0 	bl	800ee30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	463b      	mov	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000c9c:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <MX_TIM3_Init+0xa8>)
 8000c9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000cec:	f00a fd10 	bl	800b710 <HAL_TIM_Encoder_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000cf6:	f001 f999 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000d08:	f00b fdca 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d12:	f001 f98b 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3730      	adds	r7, #48	; 0x30
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2400012c 	.word	0x2400012c
 8000d24:	40000400 	.word	0x40000400

08000d28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <MX_TIM4_Init+0xb0>)
 8000d4e:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <MX_TIM4_Init+0xb4>)
 8000d50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 274;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <MX_TIM4_Init+0xb0>)
 8000d54:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000d58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_TIM4_Init+0xb0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_TIM4_Init+0xb0>)
 8000d62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <MX_TIM4_Init+0xb0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_TIM4_Init+0xb0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d74:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <MX_TIM4_Init+0xb0>)
 8000d76:	f00a fafd 	bl	800b374 <HAL_TIM_PWM_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000d80:	f001 f954 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <MX_TIM4_Init+0xb0>)
 8000d94:	f00b fd84 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000d9e:	f001 f945 	bl	800202c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da2:	2360      	movs	r3, #96	; 0x60
 8000da4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db2:	463b      	mov	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <MX_TIM4_Init+0xb0>)
 8000dba:	f00a fefd 	bl	800bbb8 <HAL_TIM_PWM_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000dc4:	f001 f932 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dc8:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <MX_TIM4_Init+0xb0>)
 8000dca:	f004 faeb 	bl	80053a4 <HAL_TIM_MspPostInit>

}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	; 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	24000178 	.word	0x24000178
 8000ddc:	40000800 	.word	0x40000800

08000de0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <MX_TIM5_Init+0xb0>)
 8000e06:	4a23      	ldr	r2, [pc, #140]	; (8000e94 <MX_TIM5_Init+0xb4>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 274;
 8000e0a:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <MX_TIM5_Init+0xb0>)
 8000e0c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000e10:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <MX_TIM5_Init+0xb0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <MX_TIM5_Init+0xb0>)
 8000e1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e1e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <MX_TIM5_Init+0xb0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_TIM5_Init+0xb0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e2c:	4818      	ldr	r0, [pc, #96]	; (8000e90 <MX_TIM5_Init+0xb0>)
 8000e2e:	f00a faa1 	bl	800b374 <HAL_TIM_PWM_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8000e38:	f001 f8f8 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4811      	ldr	r0, [pc, #68]	; (8000e90 <MX_TIM5_Init+0xb0>)
 8000e4c:	f00b fd28 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8000e56:	f001 f8e9 	bl	800202c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5a:	2360      	movs	r3, #96	; 0x60
 8000e5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4807      	ldr	r0, [pc, #28]	; (8000e90 <MX_TIM5_Init+0xb0>)
 8000e72:	f00a fea1 	bl	800bbb8 <HAL_TIM_PWM_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000e7c:	f001 f8d6 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <MX_TIM5_Init+0xb0>)
 8000e82:	f004 fa8f 	bl	80053a4 <HAL_TIM_MspPostInit>

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	240001c4 	.word	0x240001c4
 8000e94:	40000c00 	.word	0x40000c00

08000e98 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_TIM6_Init+0x78>)
 8000eaa:	4a1a      	ldr	r2, [pc, #104]	; (8000f14 <MX_TIM6_Init+0x7c>)
 8000eac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_TIM6_Init+0x78>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_TIM6_Init+0x78>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_TIM6_Init+0x78>)
 8000ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_TIM6_Init+0x78>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ec8:	4811      	ldr	r0, [pc, #68]	; (8000f10 <MX_TIM6_Init+0x78>)
 8000eca:	f00a f975 	bl	800b1b8 <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ed4:	f001 f8aa 	bl	800202c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ed8:	2108      	movs	r1, #8
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_TIM6_Init+0x78>)
 8000edc:	f00a fbbe 	bl	800b65c <HAL_TIM_OnePulse_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000ee6:	f001 f8a1 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <MX_TIM6_Init+0x78>)
 8000ef8:	f00b fcd2 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000f02:	f001 f893 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	24000210 	.word	0x24000210
 8000f14:	40001000 	.word	0x40001000

08000f18 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_TIM7_Init+0x64>)
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <MX_TIM7_Init+0x68>)
 8000f2c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_TIM7_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_TIM7_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <MX_TIM7_Init+0x64>)
 8000f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f40:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_TIM7_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <MX_TIM7_Init+0x64>)
 8000f4a:	f00a f935 	bl	800b1b8 <HAL_TIM_Base_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f54:	f001 f86a 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_TIM7_Init+0x64>)
 8000f66:	f00b fc9b 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f70:	f001 f85c 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2400025c 	.word	0x2400025c
 8000f80:	40001400 	.word	0x40001400

08000f84 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2224      	movs	r2, #36	; 0x24
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00d ff4c 	bl	800ee30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fa2:	4b23      	ldr	r3, [pc, #140]	; (8001030 <MX_TIM8_Init+0xac>)
 8000fa4:	4a23      	ldr	r2, [pc, #140]	; (8001034 <MX_TIM8_Init+0xb0>)
 8000fa6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <MX_TIM8_Init+0xac>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <MX_TIM8_Init+0xac>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <MX_TIM8_Init+0xac>)
 8000fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MX_TIM8_Init+0xac>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_TIM8_Init+0xac>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_TIM8_Init+0xac>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_TIM8_Init+0xac>)
 8000ffa:	f00a fb89 	bl	800b710 <HAL_TIM_Encoder_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001004:	f001 f812 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_TIM8_Init+0xac>)
 800101a:	f00b fc41 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001024:	f001 f802 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	3730      	adds	r7, #48	; 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	240002a8 	.word	0x240002a8
 8001034:	40010400 	.word	0x40010400

08001038 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b098      	sub	sp, #96	; 0x60
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2234      	movs	r2, #52	; 0x34
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f00d fee3 	bl	800ee30 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <MX_TIM15_Init+0x108>)
 800106c:	4a35      	ldr	r2, [pc, #212]	; (8001144 <MX_TIM15_Init+0x10c>)
 800106e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 274;
 8001070:	4b33      	ldr	r3, [pc, #204]	; (8001140 <MX_TIM15_Init+0x108>)
 8001072:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001076:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b31      	ldr	r3, [pc, #196]	; (8001140 <MX_TIM15_Init+0x108>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800107e:	4b30      	ldr	r3, [pc, #192]	; (8001140 <MX_TIM15_Init+0x108>)
 8001080:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001084:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001086:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <MX_TIM15_Init+0x108>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800108c:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <MX_TIM15_Init+0x108>)
 800108e:	2200      	movs	r2, #0
 8001090:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <MX_TIM15_Init+0x108>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001098:	4829      	ldr	r0, [pc, #164]	; (8001140 <MX_TIM15_Init+0x108>)
 800109a:	f00a f96b 	bl	800b374 <HAL_TIM_PWM_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 80010a4:	f000 ffc2 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80010b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010b4:	4619      	mov	r1, r3
 80010b6:	4822      	ldr	r0, [pc, #136]	; (8001140 <MX_TIM15_Init+0x108>)
 80010b8:	f00b fbf2 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 80010c2:	f000 ffb3 	bl	800202c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c6:	2360      	movs	r3, #96	; 0x60
 80010c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010d2:	2300      	movs	r3, #0
 80010d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010e6:	2200      	movs	r2, #0
 80010e8:	4619      	mov	r1, r3
 80010ea:	4815      	ldr	r0, [pc, #84]	; (8001140 <MX_TIM15_Init+0x108>)
 80010ec:	f00a fd64 	bl	800bbb8 <HAL_TIM_PWM_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 80010f6:	f000 ff99 	bl	800202c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800110e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001112:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <MX_TIM15_Init+0x108>)
 8001122:	f00b fc59 	bl	800c9d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 800112c:	f000 ff7e 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <MX_TIM15_Init+0x108>)
 8001132:	f004 f937 	bl	80053a4 <HAL_TIM_MspPostInit>

}
 8001136:	bf00      	nop
 8001138:	3760      	adds	r7, #96	; 0x60
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	240002f4 	.word	0x240002f4
 8001144:	40014000 	.word	0x40014000

08001148 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08c      	sub	sp, #48	; 0x30
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2224      	movs	r2, #36	; 0x24
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f00d fe6a 	bl	800ee30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <MX_TIM23_Init+0xa4>)
 8001168:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <MX_TIM23_Init+0xa8>)
 800116a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_TIM23_Init+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001172:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <MX_TIM23_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 65535;
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_TIM23_Init+0xa4>)
 800117a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117e:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_TIM23_Init+0xa4>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_TIM23_Init+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800118c:	2303      	movs	r3, #3
 800118e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001194:	2301      	movs	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011a4:	2301      	movs	r3, #1
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4619      	mov	r1, r3
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <MX_TIM23_Init+0xa4>)
 80011b8:	f00a faaa 	bl	800b710 <HAL_TIM_Encoder_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 80011c2:	f000 ff33 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_TIM23_Init+0xa4>)
 80011d4:	f00b fb64 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 80011de:	f000 ff25 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	3730      	adds	r7, #48	; 0x30
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	24000340 	.word	0x24000340
 80011f0:	4000e000 	.word	0x4000e000

080011f4 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08c      	sub	sp, #48	; 0x30
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	2224      	movs	r2, #36	; 0x24
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00d fe14 	bl	800ee30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <MX_TIM24_Init+0xa4>)
 8001214:	4a21      	ldr	r2, [pc, #132]	; (800129c <MX_TIM24_Init+0xa8>)
 8001216:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_TIM24_Init+0xa4>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MX_TIM24_Init+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 65535;
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_TIM24_Init+0xa4>)
 8001226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122a:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_TIM24_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_TIM24_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001238:	2303      	movs	r3, #3
 800123a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001240:	2301      	movs	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001250:	2301      	movs	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	480d      	ldr	r0, [pc, #52]	; (8001298 <MX_TIM24_Init+0xa4>)
 8001264:	f00a fa54 	bl	800b710 <HAL_TIM_Encoder_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 800126e:	f000 fedd 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_TIM24_Init+0xa4>)
 8001280:	f00b fb0e 	bl	800c8a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 800128a:	f000 fecf 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3730      	adds	r7, #48	; 0x30
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2400038c 	.word	0x2400038c
 800129c:	4000e400 	.word	0x4000e400

080012a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012a6:	4a23      	ldr	r2, [pc, #140]	; (8001334 <MX_USART3_UART_Init+0x94>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012e8:	4811      	ldr	r0, [pc, #68]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012ea:	f00b fc33 	bl	800cb54 <HAL_UART_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012f4:	f000 fe9a 	bl	800202c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f8:	2100      	movs	r1, #0
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012fc:	f00d fc7a 	bl	800ebf4 <HAL_UARTEx_SetTxFifoThreshold>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001306:	f000 fe91 	bl	800202c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130a:	2100      	movs	r1, #0
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <MX_USART3_UART_Init+0x90>)
 800130e:	f00d fcaf 	bl	800ec70 <HAL_UARTEx_SetRxFifoThreshold>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001318:	f000 fe88 	bl	800202c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_USART3_UART_Init+0x90>)
 800131e:	f00d fc30 	bl	800eb82 <HAL_UARTEx_DisableFifoMode>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001328:	f000 fe80 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	240003d8 	.word	0x240003d8
 8001334:	40004800 	.word	0x40004800

08001338 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_DMA_Init+0x4c>)
 8001340:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001344:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <MX_DMA_Init+0x4c>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <MX_DMA_Init+0x4c>)
 8001350:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	200b      	movs	r0, #11
 8001362:	f004 fc68 	bl	8005c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001366:	200b      	movs	r0, #11
 8001368:	f004 fc7f 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	200c      	movs	r0, #12
 8001372:	f004 fc60 	bl	8005c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001376:	200c      	movs	r0, #12
 8001378:	f004 fc77 	bl	8005c6a <HAL_NVIC_EnableIRQ>

}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	58024400 	.word	0x58024400

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800139e:	4bb1      	ldr	r3, [pc, #708]	; (8001664 <MX_GPIO_Init+0x2dc>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a4:	4aaf      	ldr	r2, [pc, #700]	; (8001664 <MX_GPIO_Init+0x2dc>)
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ae:	4bad      	ldr	r3, [pc, #692]	; (8001664 <MX_GPIO_Init+0x2dc>)
 80013b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	623b      	str	r3, [r7, #32]
 80013ba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013bc:	4ba9      	ldr	r3, [pc, #676]	; (8001664 <MX_GPIO_Init+0x2dc>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c2:	4aa8      	ldr	r2, [pc, #672]	; (8001664 <MX_GPIO_Init+0x2dc>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013cc:	4ba5      	ldr	r3, [pc, #660]	; (8001664 <MX_GPIO_Init+0x2dc>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013da:	4ba2      	ldr	r3, [pc, #648]	; (8001664 <MX_GPIO_Init+0x2dc>)
 80013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e0:	4aa0      	ldr	r2, [pc, #640]	; (8001664 <MX_GPIO_Init+0x2dc>)
 80013e2:	f043 0320 	orr.w	r3, r3, #32
 80013e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ea:	4b9e      	ldr	r3, [pc, #632]	; (8001664 <MX_GPIO_Init+0x2dc>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f8:	4b9a      	ldr	r3, [pc, #616]	; (8001664 <MX_GPIO_Init+0x2dc>)
 80013fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fe:	4a99      	ldr	r2, [pc, #612]	; (8001664 <MX_GPIO_Init+0x2dc>)
 8001400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001404:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001408:	4b96      	ldr	r3, [pc, #600]	; (8001664 <MX_GPIO_Init+0x2dc>)
 800140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b93      	ldr	r3, [pc, #588]	; (8001664 <MX_GPIO_Init+0x2dc>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141c:	4a91      	ldr	r2, [pc, #580]	; (8001664 <MX_GPIO_Init+0x2dc>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001426:	4b8f      	ldr	r3, [pc, #572]	; (8001664 <MX_GPIO_Init+0x2dc>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001434:	4b8b      	ldr	r3, [pc, #556]	; (8001664 <MX_GPIO_Init+0x2dc>)
 8001436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143a:	4a8a      	ldr	r2, [pc, #552]	; (8001664 <MX_GPIO_Init+0x2dc>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001444:	4b87      	ldr	r3, [pc, #540]	; (8001664 <MX_GPIO_Init+0x2dc>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001452:	4b84      	ldr	r3, [pc, #528]	; (8001664 <MX_GPIO_Init+0x2dc>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	4a82      	ldr	r2, [pc, #520]	; (8001664 <MX_GPIO_Init+0x2dc>)
 800145a:	f043 0308 	orr.w	r3, r3, #8
 800145e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001462:	4b80      	ldr	r3, [pc, #512]	; (8001664 <MX_GPIO_Init+0x2dc>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001470:	4b7c      	ldr	r3, [pc, #496]	; (8001664 <MX_GPIO_Init+0x2dc>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001476:	4a7b      	ldr	r2, [pc, #492]	; (8001664 <MX_GPIO_Init+0x2dc>)
 8001478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800147c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001480:	4b78      	ldr	r3, [pc, #480]	; (8001664 <MX_GPIO_Init+0x2dc>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	f244 0101 	movw	r1, #16385	; 0x4001
 8001494:	4874      	ldr	r0, [pc, #464]	; (8001668 <MX_GPIO_Init+0x2e0>)
 8001496:	f007 fbe5 	bl	8008c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80014a0:	4872      	ldr	r0, [pc, #456]	; (800166c <MX_GPIO_Init+0x2e4>)
 80014a2:	f007 fbdf 	bl	8008c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2178      	movs	r1, #120	; 0x78
 80014aa:	4871      	ldr	r0, [pc, #452]	; (8001670 <MX_GPIO_Init+0x2e8>)
 80014ac:	f007 fbda 	bl	8008c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b6:	486f      	ldr	r0, [pc, #444]	; (8001674 <MX_GPIO_Init+0x2ec>)
 80014b8:	f007 fbd4 	bl	8008c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c2:	486d      	ldr	r0, [pc, #436]	; (8001678 <MX_GPIO_Init+0x2f0>)
 80014c4:	f007 fbce 	bl	8008c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2102      	movs	r1, #2
 80014cc:	486b      	ldr	r0, [pc, #428]	; (800167c <MX_GPIO_Init+0x2f4>)
 80014ce:	f007 fbc9 	bl	8008c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d8:	2300      	movs	r3, #0
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	4619      	mov	r1, r3
 80014e6:	4863      	ldr	r0, [pc, #396]	; (8001674 <MX_GPIO_Init+0x2ec>)
 80014e8:	f007 fa14 	bl	8008914 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014ec:	2332      	movs	r3, #50	; 0x32
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014fc:	230b      	movs	r3, #11
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001504:	4619      	mov	r1, r3
 8001506:	485b      	ldr	r0, [pc, #364]	; (8001674 <MX_GPIO_Init+0x2ec>)
 8001508:	f007 fa04 	bl	8008914 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800150c:	2386      	movs	r3, #134	; 0x86
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800151c:	230b      	movs	r3, #11
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	4619      	mov	r1, r3
 8001526:	4854      	ldr	r0, [pc, #336]	; (8001678 <MX_GPIO_Init+0x2f0>)
 8001528:	f007 f9f4 	bl	8008914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800152c:	f244 0301 	movw	r3, #16385	; 0x4001
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001542:	4619      	mov	r1, r3
 8001544:	4848      	ldr	r0, [pc, #288]	; (8001668 <MX_GPIO_Init+0x2e0>)
 8001546:	f007 f9e5 	bl	8008914 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800154a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800155c:	230b      	movs	r3, #11
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	4840      	ldr	r0, [pc, #256]	; (8001668 <MX_GPIO_Init+0x2e0>)
 8001568:	f007 f9d4 	bl	8008914 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD14 PD15 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_14|GPIO_PIN_15;
 800156c:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	4839      	ldr	r0, [pc, #228]	; (800166c <MX_GPIO_Init+0x2e4>)
 8001586:	f007 f9c5 	bl	8008914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800158a:	2378      	movs	r3, #120	; 0x78
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	4833      	ldr	r0, [pc, #204]	; (8001670 <MX_GPIO_Init+0x2e8>)
 80015a2:	f007 f9b7 	bl	8008914 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	482d      	ldr	r0, [pc, #180]	; (8001670 <MX_GPIO_Init+0x2e8>)
 80015bc:	f007 f9aa 	bl	8008914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	4826      	ldr	r0, [pc, #152]	; (8001674 <MX_GPIO_Init+0x2ec>)
 80015da:	f007 f99b 	bl	8008914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	4820      	ldr	r0, [pc, #128]	; (8001678 <MX_GPIO_Init+0x2f0>)
 80015f8:	f007 f98c 	bl	8008914 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80015fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800160e:	230a      	movs	r3, #10
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	4817      	ldr	r0, [pc, #92]	; (8001678 <MX_GPIO_Init+0x2f0>)
 800161a:	f007 f97b 	bl	8008914 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800161e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001630:	230b      	movs	r3, #11
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <MX_GPIO_Init+0x2e8>)
 800163c:	f007 f96a 	bl	8008914 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001640:	2302      	movs	r3, #2
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	4809      	ldr	r0, [pc, #36]	; (800167c <MX_GPIO_Init+0x2f4>)
 8001658:	f007 f95c 	bl	8008914 <HAL_GPIO_Init>

}
 800165c:	bf00      	nop
 800165e:	3738      	adds	r7, #56	; 0x38
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	58024400 	.word	0x58024400
 8001668:	58020400 	.word	0x58020400
 800166c:	58020c00 	.word	0x58020c00
 8001670:	58021800 	.word	0x58021800
 8001674:	58020800 	.word	0x58020800
 8001678:	58020000 	.word	0x58020000
 800167c:	58021000 	.word	0x58021000

08001680 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
}
}
PID ?�度*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001690:	f040 8488 	bne.w	8001fa4 <HAL_TIM_PeriodElapsedCallback+0x924>

		SP1 = 1/r * (get_vel_x - get_vel_y - (lx + ly) * get_vel_z); // fl
 8001694:	4bc4      	ldr	r3, [pc, #784]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001696:	ed93 7b00 	vldr	d7, [r3]
 800169a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800169e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016a2:	4bc2      	ldr	r3, [pc, #776]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016a4:	ed93 5b00 	vldr	d5, [r3]
 80016a8:	4bc1      	ldr	r3, [pc, #772]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016aa:	ed93 7b00 	vldr	d7, [r3]
 80016ae:	ee35 5b47 	vsub.f64	d5, d5, d7
 80016b2:	4bc0      	ldr	r3, [pc, #768]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80016b4:	ed93 4b00 	vldr	d4, [r3]
 80016b8:	4bbf      	ldr	r3, [pc, #764]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80016ba:	ed93 7b00 	vldr	d7, [r3]
 80016be:	ee34 4b07 	vadd.f64	d4, d4, d7
 80016c2:	4bbe      	ldr	r3, [pc, #760]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80016c4:	ed93 7b00 	vldr	d7, [r3]
 80016c8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80016cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80016d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80016d4:	4bba      	ldr	r3, [pc, #744]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80016d6:	ed83 7b00 	vstr	d7, [r3]
		SP2 = 1/r * (get_vel_x + get_vel_y + (lx + ly) * get_vel_z); // fr
 80016da:	4bb3      	ldr	r3, [pc, #716]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80016dc:	ed93 7b00 	vldr	d7, [r3]
 80016e0:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80016e4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016e8:	4bb0      	ldr	r3, [pc, #704]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016ea:	ed93 5b00 	vldr	d5, [r3]
 80016ee:	4bb0      	ldr	r3, [pc, #704]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016f0:	ed93 7b00 	vldr	d7, [r3]
 80016f4:	ee35 5b07 	vadd.f64	d5, d5, d7
 80016f8:	4bae      	ldr	r3, [pc, #696]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80016fa:	ed93 4b00 	vldr	d4, [r3]
 80016fe:	4bae      	ldr	r3, [pc, #696]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001700:	ed93 7b00 	vldr	d7, [r3]
 8001704:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001708:	4bac      	ldr	r3, [pc, #688]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800170a:	ed93 7b00 	vldr	d7, [r3]
 800170e:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001712:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001716:	ee26 7b07 	vmul.f64	d7, d6, d7
 800171a:	4baa      	ldr	r3, [pc, #680]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800171c:	ed83 7b00 	vstr	d7, [r3]
		SP3 = 1/r * (get_vel_x + get_vel_y - (lx + ly) * get_vel_z); // rl
 8001720:	4ba1      	ldr	r3, [pc, #644]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001722:	ed93 7b00 	vldr	d7, [r3]
 8001726:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800172a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800172e:	4b9f      	ldr	r3, [pc, #636]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001730:	ed93 5b00 	vldr	d5, [r3]
 8001734:	4b9e      	ldr	r3, [pc, #632]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001736:	ed93 7b00 	vldr	d7, [r3]
 800173a:	ee35 5b07 	vadd.f64	d5, d5, d7
 800173e:	4b9d      	ldr	r3, [pc, #628]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001740:	ed93 4b00 	vldr	d4, [r3]
 8001744:	4b9c      	ldr	r3, [pc, #624]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001746:	ed93 7b00 	vldr	d7, [r3]
 800174a:	ee34 4b07 	vadd.f64	d4, d4, d7
 800174e:	4b9b      	ldr	r3, [pc, #620]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001750:	ed93 7b00 	vldr	d7, [r3]
 8001754:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001758:	ee35 7b47 	vsub.f64	d7, d5, d7
 800175c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001760:	4b99      	ldr	r3, [pc, #612]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001762:	ed83 7b00 	vstr	d7, [r3]
		SP4 = 1/r * (get_vel_x - get_vel_y + (lx + ly) * get_vel_z); // rr
 8001766:	4b90      	ldr	r3, [pc, #576]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001768:	ed93 7b00 	vldr	d7, [r3]
 800176c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001770:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001774:	4b8d      	ldr	r3, [pc, #564]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001776:	ed93 5b00 	vldr	d5, [r3]
 800177a:	4b8d      	ldr	r3, [pc, #564]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800177c:	ed93 7b00 	vldr	d7, [r3]
 8001780:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001784:	4b8b      	ldr	r3, [pc, #556]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001786:	ed93 4b00 	vldr	d4, [r3]
 800178a:	4b8b      	ldr	r3, [pc, #556]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800178c:	ed93 7b00 	vldr	d7, [r3]
 8001790:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001794:	4b89      	ldr	r3, [pc, #548]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001796:	ed93 7b00 	vldr	d7, [r3]
 800179a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800179e:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017a6:	4b89      	ldr	r3, [pc, #548]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017a8:	ed83 7b00 	vstr	d7, [r3]


		enc1 = __HAL_TIM_GetCounter(&htim3);
 80017ac:	4b88      	ldr	r3, [pc, #544]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	4b87      	ldr	r3, [pc, #540]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80017b6:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim8);
 80017b8:	4b87      	ldr	r3, [pc, #540]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	b21a      	sxth	r2, r3
 80017c0:	4b86      	ldr	r3, [pc, #536]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80017c2:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim23);
 80017c4:	4b86      	ldr	r3, [pc, #536]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	b21a      	sxth	r2, r3
 80017cc:	4b85      	ldr	r3, [pc, #532]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80017ce:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim24);
 80017d0:	4b85      	ldr	r3, [pc, #532]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	b21a      	sxth	r2, r3
 80017d8:	4b84      	ldr	r3, [pc, #528]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80017da:	801a      	strh	r2, [r3, #0]

		n++;
 80017dc:	4b84      	ldr	r3, [pc, #528]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	4a83      	ldr	r2, [pc, #524]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80017e4:	6013      	str	r3, [r2, #0]

		PV1 = (double) enc1 / (4 * 512 * 36 * 0.001);
 80017e6:	4b7b      	ldr	r3, [pc, #492]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80017e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80017f4:	ed9f 5b68 	vldr	d5, [pc, #416]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x318>
 80017f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017fc:	4b7d      	ldr	r3, [pc, #500]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80017fe:	ed83 7b00 	vstr	d7, [r3]
		PV2 = (double) enc2 / (4 * 512 * 36 * 0.001);
 8001802:	4b76      	ldr	r3, [pc, #472]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001810:	ed9f 5b61 	vldr	d5, [pc, #388]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001814:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001818:	4b77      	ldr	r3, [pc, #476]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800181a:	ed83 7b00 	vstr	d7, [r3]
		PV3 = (double) enc3 / (4 * 512 * 36 * 0.001);
 800181e:	4b71      	ldr	r3, [pc, #452]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800182c:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001830:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001834:	4b71      	ldr	r3, [pc, #452]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001836:	ed83 7b00 	vstr	d7, [r3]
		PV4 = (double) enc4 / (4 * 512 * 36 * 0.001);
 800183a:	4b6c      	ldr	r3, [pc, #432]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800183c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001848:	ed9f 5b53 	vldr	d5, [pc, #332]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x318>
 800184c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001850:	4b6b      	ldr	r3, [pc, #428]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001852:	ed83 7b00 	vstr	d7, [r3]

 		__HAL_TIM_SetCounter(&htim3, 0);
 8001856:	4b5e      	ldr	r3, [pc, #376]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim8, 0);
 800185e:	4b5e      	ldr	r3, [pc, #376]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim23, 0);
 8001866:	4b5e      	ldr	r3, [pc, #376]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim24, 0);
 800186e:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	625a      	str	r2, [r3, #36]	; 0x24

		error1 = SP1 - PV1;
 8001876:	4b52      	ldr	r3, [pc, #328]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001878:	ed93 6b00 	vldr	d6, [r3]
 800187c:	4b5d      	ldr	r3, [pc, #372]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800187e:	ed93 7b00 	vldr	d7, [r3]
 8001882:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001886:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001888:	ed83 7b00 	vstr	d7, [r3]
		error2 = SP2 - PV2;
 800188c:	4b4d      	ldr	r3, [pc, #308]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800188e:	ed93 6b00 	vldr	d6, [r3]
 8001892:	4b59      	ldr	r3, [pc, #356]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001894:	ed93 7b00 	vldr	d7, [r3]
 8001898:	ee36 7b47 	vsub.f64	d7, d6, d7
 800189c:	4b5a      	ldr	r3, [pc, #360]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800189e:	ed83 7b00 	vstr	d7, [r3]
		error3 = SP3 - PV3;
 80018a2:	4b49      	ldr	r3, [pc, #292]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80018a4:	ed93 6b00 	vldr	d6, [r3]
 80018a8:	4b54      	ldr	r3, [pc, #336]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018aa:	ed93 7b00 	vldr	d7, [r3]
 80018ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018b2:	4b56      	ldr	r3, [pc, #344]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80018b4:	ed83 7b00 	vstr	d7, [r3]
		error4 = SP4 - PV4;
 80018b8:	4b44      	ldr	r3, [pc, #272]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80018ba:	ed93 6b00 	vldr	d6, [r3]
 80018be:	4b50      	ldr	r3, [pc, #320]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80018c0:	ed93 7b00 	vldr	d7, [r3]
 80018c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018c8:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80018ca:	ed83 7b00 	vstr	d7, [r3]

		errorsum1 += error1;
 80018ce:	4b51      	ldr	r3, [pc, #324]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80018d0:	ed93 6b00 	vldr	d6, [r3]
 80018d4:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80018d6:	ed93 7b00 	vldr	d7, [r3]
 80018da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018de:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80018e0:	ed83 7b00 	vstr	d7, [r3]
		errorsum2 += error2;
 80018e4:	4b4c      	ldr	r3, [pc, #304]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80018e6:	ed93 6b00 	vldr	d6, [r3]
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80018ec:	ed93 7b00 	vldr	d7, [r3]
 80018f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018f4:	4b48      	ldr	r3, [pc, #288]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80018f6:	ed83 7b00 	vstr	d7, [r3]
		errorsum3 += error3;
 80018fa:	4b48      	ldr	r3, [pc, #288]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80018fc:	ed93 6b00 	vldr	d6, [r3]
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001902:	ed93 7b00 	vldr	d7, [r3]
 8001906:	ee36 7b07 	vadd.f64	d7, d6, d7
 800190a:	4b44      	ldr	r3, [pc, #272]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800190c:	ed83 7b00 	vstr	d7, [r3]
		errorsum4 += error4;
 8001910:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001912:	ed93 6b00 	vldr	d6, [r3]
 8001916:	4b3e      	ldr	r3, [pc, #248]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001918:	ed93 7b00 	vldr	d7, [r3]
 800191c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001920:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001922:	ed83 7b00 	vstr	d7, [r3]

		ut1 = Kp1 * error1 + Ki1 * errorsum1 * 0.001;
 8001926:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001928:	ed93 6b00 	vldr	d6, [r3]
 800192c:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800192e:	ed93 7b00 	vldr	d7, [r3]
 8001932:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001936:	4b3c      	ldr	r3, [pc, #240]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001938:	ed93 5b00 	vldr	d5, [r3]
 800193c:	4b35      	ldr	r3, [pc, #212]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800193e:	ed93 7b00 	vldr	d7, [r3]
 8001942:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001946:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80019a0 <HAL_TIM_PeriodElapsedCallback+0x320>
 800194a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800194e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001952:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001954:	ed83 7b00 	vstr	d7, [r3]
		ut2 = Kp2 * error2 + Ki2 * errorsum2 * 0.001;
 8001958:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800195a:	ed93 6b00 	vldr	d6, [r3]
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001960:	ed93 7b00 	vldr	d7, [r3]
 8001964:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001968:	4b32      	ldr	r3, [pc, #200]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 800196a:	ed93 5b00 	vldr	d5, [r3]
 800196e:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001970:	ed93 7b00 	vldr	d7, [r3]
 8001974:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001978:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80019a0 <HAL_TIM_PeriodElapsedCallback+0x320>
 800197c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001980:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001984:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001986:	ed83 7b00 	vstr	d7, [r3]
		ut3 = Kp3 * error3 + Ki3 * errorsum3 * 0.001;
 800198a:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 800198c:	ed93 6b00 	vldr	d6, [r3]
 8001990:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001992:	ed93 7b00 	vldr	d7, [r3]
 8001996:	e053      	b.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x3c0>
 8001998:	8d4fdf3c 	.word	0x8d4fdf3c
 800199c:	40526e97 	.word	0x40526e97
 80019a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80019a4:	3f50624d 	.word	0x3f50624d
 80019a8:	24000680 	.word	0x24000680
 80019ac:	24000688 	.word	0x24000688
 80019b0:	24000690 	.word	0x24000690
 80019b4:	24000670 	.word	0x24000670
 80019b8:	24000678 	.word	0x24000678
 80019bc:	24000698 	.word	0x24000698
 80019c0:	24000578 	.word	0x24000578
 80019c4:	24000580 	.word	0x24000580
 80019c8:	24000588 	.word	0x24000588
 80019cc:	24000590 	.word	0x24000590
 80019d0:	2400012c 	.word	0x2400012c
 80019d4:	240005b8 	.word	0x240005b8
 80019d8:	240002a8 	.word	0x240002a8
 80019dc:	240005ba 	.word	0x240005ba
 80019e0:	24000340 	.word	0x24000340
 80019e4:	240005bc 	.word	0x240005bc
 80019e8:	2400038c 	.word	0x2400038c
 80019ec:	240005be 	.word	0x240005be
 80019f0:	24000660 	.word	0x24000660
 80019f4:	24000558 	.word	0x24000558
 80019f8:	24000560 	.word	0x24000560
 80019fc:	24000568 	.word	0x24000568
 8001a00:	24000570 	.word	0x24000570
 8001a04:	24000598 	.word	0x24000598
 8001a08:	240005a0 	.word	0x240005a0
 8001a0c:	240005a8 	.word	0x240005a8
 8001a10:	240005b0 	.word	0x240005b0
 8001a14:	24000640 	.word	0x24000640
 8001a18:	24000648 	.word	0x24000648
 8001a1c:	24000650 	.word	0x24000650
 8001a20:	24000658 	.word	0x24000658
 8001a24:	240005c0 	.word	0x240005c0
 8001a28:	240005e0 	.word	0x240005e0
 8001a2c:	24000600 	.word	0x24000600
 8001a30:	240005c8 	.word	0x240005c8
 8001a34:	240005e8 	.word	0x240005e8
 8001a38:	24000608 	.word	0x24000608
 8001a3c:	240005d0 	.word	0x240005d0
 8001a40:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a44:	4bba      	ldr	r3, [pc, #744]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001a46:	ed93 5b00 	vldr	d5, [r3]
 8001a4a:	4bba      	ldr	r3, [pc, #744]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001a4c:	ed93 7b00 	vldr	d7, [r3]
 8001a50:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001a54:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8001d28 <HAL_TIM_PeriodElapsedCallback+0x6a8>
 8001a58:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a60:	4bb5      	ldr	r3, [pc, #724]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001a62:	ed83 7b00 	vstr	d7, [r3]
		ut4 = Kp4 * error4 + Ki4 * errorsum4 * 0.001;
 8001a66:	4bb5      	ldr	r3, [pc, #724]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001a68:	ed93 6b00 	vldr	d6, [r3]
 8001a6c:	4bb4      	ldr	r3, [pc, #720]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001a6e:	ed93 7b00 	vldr	d7, [r3]
 8001a72:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a76:	4bb3      	ldr	r3, [pc, #716]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001a78:	ed93 5b00 	vldr	d5, [r3]
 8001a7c:	4bb2      	ldr	r3, [pc, #712]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001a7e:	ed93 7b00 	vldr	d7, [r3]
 8001a82:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001a86:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8001d28 <HAL_TIM_PeriodElapsedCallback+0x6a8>
 8001a8a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a8e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a92:	4bae      	ldr	r3, [pc, #696]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001a94:	ed83 7b00 	vstr	d7, [r3]

		if(ut1 > 1){
 8001a98:	4bad      	ldr	r3, [pc, #692]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001a9a:	ed93 7b00 	vldr	d7, [r3]
 8001a9e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001aa2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	dd06      	ble.n	8001aba <HAL_TIM_PeriodElapsedCallback+0x43a>
			ut1 = 1;
 8001aac:	49a8      	ldr	r1, [pc, #672]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	4ba8      	ldr	r3, [pc, #672]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001ab4:	e9c1 2300 	strd	r2, r3, [r1]
 8001ab8:	e00f      	b.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x45a>
		}else if(ut1 < -1){
 8001aba:	4ba5      	ldr	r3, [pc, #660]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001abc:	ed93 7b00 	vldr	d7, [r3]
 8001ac0:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001ac4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001acc:	d505      	bpl.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x45a>
			ut1 = -1;
 8001ace:	49a0      	ldr	r1, [pc, #640]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	4ba0      	ldr	r3, [pc, #640]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001ad6:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut2 > 1){
 8001ada:	4ba0      	ldr	r3, [pc, #640]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001adc:	ed93 7b00 	vldr	d7, [r3]
 8001ae0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001ae4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aec:	dd06      	ble.n	8001afc <HAL_TIM_PeriodElapsedCallback+0x47c>
			ut2 = 1;
 8001aee:	499b      	ldr	r1, [pc, #620]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	4b97      	ldr	r3, [pc, #604]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001af6:	e9c1 2300 	strd	r2, r3, [r1]
 8001afa:	e00f      	b.n	8001b1c <HAL_TIM_PeriodElapsedCallback+0x49c>
		}else if(ut2 < -1){
 8001afc:	4b97      	ldr	r3, [pc, #604]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001afe:	ed93 7b00 	vldr	d7, [r3]
 8001b02:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b06:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0e:	d505      	bpl.n	8001b1c <HAL_TIM_PeriodElapsedCallback+0x49c>
			ut2 = -1;
 8001b10:	4992      	ldr	r1, [pc, #584]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b90      	ldr	r3, [pc, #576]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001b18:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut3 > 1){
 8001b1c:	4b86      	ldr	r3, [pc, #536]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b1e:	ed93 7b00 	vldr	d7, [r3]
 8001b22:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b26:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2e:	dd06      	ble.n	8001b3e <HAL_TIM_PeriodElapsedCallback+0x4be>
			ut3 = 1;
 8001b30:	4981      	ldr	r1, [pc, #516]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b87      	ldr	r3, [pc, #540]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001b38:	e9c1 2300 	strd	r2, r3, [r1]
 8001b3c:	e00f      	b.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x4de>
		}else if(ut3 < -1){
 8001b3e:	4b7e      	ldr	r3, [pc, #504]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b40:	ed93 7b00 	vldr	d7, [r3]
 8001b44:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b48:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	d505      	bpl.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x4de>
			ut3 = -1;
 8001b52:	4979      	ldr	r1, [pc, #484]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b7f      	ldr	r3, [pc, #508]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001b5a:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut4 > 1){
 8001b5e:	4b7b      	ldr	r3, [pc, #492]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b60:	ed93 7b00 	vldr	d7, [r3]
 8001b64:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b70:	dd06      	ble.n	8001b80 <HAL_TIM_PeriodElapsedCallback+0x500>
			ut4 = 1;
 8001b72:	4976      	ldr	r1, [pc, #472]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001b7a:	e9c1 2300 	strd	r2, r3, [r1]
 8001b7e:	e00f      	b.n	8001ba0 <HAL_TIM_PeriodElapsedCallback+0x520>
		}else if(ut4 < -1){
 8001b80:	4b72      	ldr	r3, [pc, #456]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b82:	ed93 7b00 	vldr	d7, [r3]
 8001b86:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	d505      	bpl.n	8001ba0 <HAL_TIM_PeriodElapsedCallback+0x520>
			ut4 = -1;
 8001b94:	496d      	ldr	r1, [pc, #436]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4b6f      	ldr	r3, [pc, #444]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001b9c:	e9c1 2300 	strd	r2, r3, [r1]
		}


		if(ut1 > 0){
 8001ba0:	4b6b      	ldr	r3, [pc, #428]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001ba2:	ed93 7b00 	vldr	d7, [r3]
 8001ba6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	dd0a      	ble.n	8001bc6 <HAL_TIM_PeriodElapsedCallback+0x546>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	486a      	ldr	r0, [pc, #424]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001bb6:	f007 f855 	bl	8008c64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2140      	movs	r1, #64	; 0x40
 8001bbe:	4868      	ldr	r0, [pc, #416]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001bc0:	f007 f850 	bl	8008c64 <HAL_GPIO_WritePin>
 8001bc4:	e024      	b.n	8001c10 <HAL_TIM_PeriodElapsedCallback+0x590>
		}else if(ut1 < 0){
 8001bc6:	4b62      	ldr	r3, [pc, #392]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001bc8:	ed93 7b00 	vldr	d7, [r3]
 8001bcc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d50a      	bpl.n	8001bec <HAL_TIM_PeriodElapsedCallback+0x56c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2120      	movs	r1, #32
 8001bda:	4861      	ldr	r0, [pc, #388]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001bdc:	f007 f842 	bl	8008c64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001be0:	2201      	movs	r2, #1
 8001be2:	2140      	movs	r1, #64	; 0x40
 8001be4:	485e      	ldr	r0, [pc, #376]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001be6:	f007 f83d 	bl	8008c64 <HAL_GPIO_WritePin>
 8001bea:	e011      	b.n	8001c10 <HAL_TIM_PeriodElapsedCallback+0x590>
		}else if(ut1 == 0){
 8001bec:	4b58      	ldr	r3, [pc, #352]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001bee:	ed93 7b00 	vldr	d7, [r3]
 8001bf2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	d109      	bne.n	8001c10 <HAL_TIM_PeriodElapsedCallback+0x590>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2120      	movs	r1, #32
 8001c00:	4857      	ldr	r0, [pc, #348]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c02:	f007 f82f 	bl	8008c64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2140      	movs	r1, #64	; 0x40
 8001c0a:	4855      	ldr	r0, [pc, #340]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c0c:	f007 f82a 	bl	8008c64 <HAL_GPIO_WritePin>
		}

		if(ut2 > 0){
 8001c10:	4b52      	ldr	r3, [pc, #328]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c12:	ed93 7b00 	vldr	d7, [r3]
 8001c16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	dd0a      	ble.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x5b6>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 8001c20:	2201      	movs	r2, #1
 8001c22:	2110      	movs	r1, #16
 8001c24:	484e      	ldr	r0, [pc, #312]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c26:	f007 f81d 	bl	8008c64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2108      	movs	r1, #8
 8001c2e:	484c      	ldr	r0, [pc, #304]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c30:	f007 f818 	bl	8008c64 <HAL_GPIO_WritePin>
 8001c34:	e024      	b.n	8001c80 <HAL_TIM_PeriodElapsedCallback+0x600>
		}else if(ut2 < 0){
 8001c36:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c38:	ed93 7b00 	vldr	d7, [r3]
 8001c3c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c44:	d50a      	bpl.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0x5dc>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2110      	movs	r1, #16
 8001c4a:	4845      	ldr	r0, [pc, #276]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c4c:	f007 f80a 	bl	8008c64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);
 8001c50:	2201      	movs	r2, #1
 8001c52:	2108      	movs	r1, #8
 8001c54:	4842      	ldr	r0, [pc, #264]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c56:	f007 f805 	bl	8008c64 <HAL_GPIO_WritePin>
 8001c5a:	e011      	b.n	8001c80 <HAL_TIM_PeriodElapsedCallback+0x600>
		}else if(ut2 == 0){
 8001c5c:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c5e:	ed93 7b00 	vldr	d7, [r3]
 8001c62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	d109      	bne.n	8001c80 <HAL_TIM_PeriodElapsedCallback+0x600>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2110      	movs	r1, #16
 8001c70:	483b      	ldr	r0, [pc, #236]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c72:	f006 fff7 	bl	8008c64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2108      	movs	r1, #8
 8001c7a:	4839      	ldr	r0, [pc, #228]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c7c:	f006 fff2 	bl	8008c64 <HAL_GPIO_WritePin>
		}

		if(ut3 > 0){
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001c82:	ed93 7b00 	vldr	d7, [r3]
 8001c86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8e:	dd0c      	ble.n	8001caa <HAL_TIM_PeriodElapsedCallback+0x62a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001c90:	2201      	movs	r2, #1
 8001c92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c96:	4833      	ldr	r0, [pc, #204]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001c98:	f006 ffe4 	bl	8008c64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca2:	4830      	ldr	r0, [pc, #192]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001ca4:	f006 ffde 	bl	8008c64 <HAL_GPIO_WritePin>
 8001ca8:	e028      	b.n	8001cfc <HAL_TIM_PeriodElapsedCallback+0x67c>
		}else if(ut3 < 0){
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001cac:	ed93 7b00 	vldr	d7, [r3]
 8001cb0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb8:	d50c      	bpl.n	8001cd4 <HAL_TIM_PeriodElapsedCallback+0x654>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cc0:	4828      	ldr	r0, [pc, #160]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001cc2:	f006 ffcf 	bl	8008c64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ccc:	4825      	ldr	r0, [pc, #148]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001cce:	f006 ffc9 	bl	8008c64 <HAL_GPIO_WritePin>
 8001cd2:	e013      	b.n	8001cfc <HAL_TIM_PeriodElapsedCallback+0x67c>
		}else if(ut3 == 0){
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001cd6:	ed93 7b00 	vldr	d7, [r3]
 8001cda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce2:	d10b      	bne.n	8001cfc <HAL_TIM_PeriodElapsedCallback+0x67c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cea:	481e      	ldr	r0, [pc, #120]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001cec:	f006 ffba 	bl	8008c64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf6:	481b      	ldr	r0, [pc, #108]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001cf8:	f006 ffb4 	bl	8008c64 <HAL_GPIO_WritePin>
		}

		if(ut4 > 0){
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001cfe:	ed93 7b00 	vldr	d7, [r3]
 8001d02:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0a:	dd31      	ble.n	8001d70 <HAL_TIM_PeriodElapsedCallback+0x6f0>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d12:	4815      	ldr	r0, [pc, #84]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001d14:	f006 ffa6 	bl	8008c64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d1e:	4813      	ldr	r0, [pc, #76]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001d20:	f006 ffa0 	bl	8008c64 <HAL_GPIO_WritePin>
 8001d24:	e04d      	b.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x742>
 8001d26:	bf00      	nop
 8001d28:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d2c:	3f50624d 	.word	0x3f50624d
 8001d30:	240005f0 	.word	0x240005f0
 8001d34:	24000650 	.word	0x24000650
 8001d38:	24000610 	.word	0x24000610
 8001d3c:	240005d8 	.word	0x240005d8
 8001d40:	240005b0 	.word	0x240005b0
 8001d44:	240005f8 	.word	0x240005f8
 8001d48:	24000658 	.word	0x24000658
 8001d4c:	24000618 	.word	0x24000618
 8001d50:	24000600 	.word	0x24000600
 8001d54:	3ff00000 	.word	0x3ff00000
 8001d58:	bff00000 	.word	0xbff00000
 8001d5c:	24000608 	.word	0x24000608
 8001d60:	58021800 	.word	0x58021800
 8001d64:	58020c00 	.word	0x58020c00
 8001d68:	58020000 	.word	0x58020000
 8001d6c:	58020800 	.word	0x58020800
		}else if(ut4 < 0){
 8001d70:	4b91      	ldr	r3, [pc, #580]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001d72:	ed93 7b00 	vldr	d7, [r3]
 8001d76:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7e:	d50c      	bpl.n	8001d9a <HAL_TIM_PeriodElapsedCallback+0x71a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d86:	488d      	ldr	r0, [pc, #564]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8001d88:	f006 ff6c 	bl	8008c64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d92:	488b      	ldr	r0, [pc, #556]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8001d94:	f006 ff66 	bl	8008c64 <HAL_GPIO_WritePin>
 8001d98:	e013      	b.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x742>
		}else if(ut4 == 0){
 8001d9a:	4b87      	ldr	r3, [pc, #540]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001d9c:	ed93 7b00 	vldr	d7, [r3]
 8001da0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da8:	d10b      	bne.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x742>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001daa:	2200      	movs	r2, #0
 8001dac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db0:	4882      	ldr	r0, [pc, #520]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8001db2:	f006 ff57 	bl	8008c64 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dbc:	4880      	ldr	r0, [pc, #512]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8001dbe:	f006 ff51 	bl	8008c64 <HAL_GPIO_WritePin>
		}


		ut1 = fabs(ut1);
 8001dc2:	4b80      	ldr	r3, [pc, #512]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001dc4:	ed93 7b00 	vldr	d7, [r3]
 8001dc8:	eeb0 7bc7 	vabs.f64	d7, d7
 8001dcc:	4b7d      	ldr	r3, [pc, #500]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001dce:	ed83 7b00 	vstr	d7, [r3]
		ut2 = fabs(ut2);
 8001dd2:	4b7d      	ldr	r3, [pc, #500]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001dd4:	ed93 7b00 	vldr	d7, [r3]
 8001dd8:	eeb0 7bc7 	vabs.f64	d7, d7
 8001ddc:	4b7a      	ldr	r3, [pc, #488]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001dde:	ed83 7b00 	vstr	d7, [r3]
		ut3 = fabs(ut3);
 8001de2:	4b7a      	ldr	r3, [pc, #488]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001de4:	ed93 7b00 	vldr	d7, [r3]
 8001de8:	eeb0 7bc7 	vabs.f64	d7, d7
 8001dec:	4b77      	ldr	r3, [pc, #476]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001dee:	ed83 7b00 	vstr	d7, [r3]
		ut4 = fabs(ut4);
 8001df2:	4b71      	ldr	r3, [pc, #452]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001df4:	ed93 7b00 	vldr	d7, [r3]
 8001df8:	eeb0 7bc7 	vabs.f64	d7, d7
 8001dfc:	4b6e      	ldr	r3, [pc, #440]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001dfe:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ut1 * 1000);
 8001e02:	4b70      	ldr	r3, [pc, #448]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001e04:	ed93 7b00 	vldr	d7, [r3]
 8001e08:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001fb0 <HAL_TIM_PeriodElapsedCallback+0x930>
 8001e0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e10:	4b6f      	ldr	r3, [pc, #444]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e18:	ee17 2a90 	vmov	r2, s15
 8001e1c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ut2 * 1000);
 8001e1e:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001e20:	ed93 7b00 	vldr	d7, [r3]
 8001e24:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8001fb0 <HAL_TIM_PeriodElapsedCallback+0x930>
 8001e28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e2c:	4b69      	ldr	r3, [pc, #420]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e34:	ee17 2a90 	vmov	r2, s15
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ut3 * 1000);
 8001e3a:	4b64      	ldr	r3, [pc, #400]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001e3c:	ed93 7b00 	vldr	d7, [r3]
 8001e40:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8001fb0 <HAL_TIM_PeriodElapsedCallback+0x930>
 8001e44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e48:	4b63      	ldr	r3, [pc, #396]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e50:	ee17 2a90 	vmov	r2, s15
 8001e54:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ut4 * 1000);
 8001e56:	4b58      	ldr	r3, [pc, #352]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001e58:	ed93 7b00 	vldr	d7, [r3]
 8001e5c:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8001fb0 <HAL_TIM_PeriodElapsedCallback+0x930>
 8001e60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e64:	4b5d      	ldr	r3, [pc, #372]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e6c:	ee17 2a90 	vmov	r2, s15
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34

		error_last1 = error1;
 8001e72:	4b5b      	ldr	r3, [pc, #364]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	495a      	ldr	r1, [pc, #360]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x964>)
 8001e7a:	e9c1 2300 	strd	r2, r3, [r1]
		error_last2 = error2;
 8001e7e:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	4959      	ldr	r1, [pc, #356]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8001e86:	e9c1 2300 	strd	r2, r3, [r1]
		error_last3 = error3;
 8001e8a:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	4958      	ldr	r1, [pc, #352]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8001e92:	e9c1 2300 	strd	r2, r3, [r1]
		error_last4 = error4;
 8001e96:	4b58      	ldr	r3, [pc, #352]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8001e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9c:	4957      	ldr	r1, [pc, #348]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8001e9e:	e9c1 2300 	strd	r2, r3, [r1]

		push_vel_x = (PV1 + PV2 + PV3 + PV4) * r/4 ;
 8001ea2:	4b57      	ldr	r3, [pc, #348]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001ea4:	ed93 6b00 	vldr	d6, [r3]
 8001ea8:	4b56      	ldr	r3, [pc, #344]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001eaa:	ed93 7b00 	vldr	d7, [r3]
 8001eae:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001eb2:	4b55      	ldr	r3, [pc, #340]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001eb4:	ed93 7b00 	vldr	d7, [r3]
 8001eb8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ebc:	4b53      	ldr	r3, [pc, #332]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001ebe:	ed93 7b00 	vldr	d7, [r3]
 8001ec2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ec6:	4b52      	ldr	r3, [pc, #328]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001ec8:	ed93 7b00 	vldr	d7, [r3]
 8001ecc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ed0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001ed4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ed8:	4b4e      	ldr	r3, [pc, #312]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001eda:	ed83 7b00 	vstr	d7, [r3]
		push_vel_y = (-PV1 + PV2 + PV3 - PV4) * r/4 ;
 8001ede:	4b49      	ldr	r3, [pc, #292]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001ee0:	ed93 6b00 	vldr	d6, [r3]
 8001ee4:	4b46      	ldr	r3, [pc, #280]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001ee6:	ed93 7b00 	vldr	d7, [r3]
 8001eea:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001eee:	4b46      	ldr	r3, [pc, #280]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001ef0:	ed93 7b00 	vldr	d7, [r3]
 8001ef4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ef8:	4b44      	ldr	r3, [pc, #272]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001efa:	ed93 7b00 	vldr	d7, [r3]
 8001efe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f02:	4b43      	ldr	r3, [pc, #268]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001f04:	ed93 7b00 	vldr	d7, [r3]
 8001f08:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f0c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001f10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f14:	4b40      	ldr	r3, [pc, #256]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001f16:	ed83 7b00 	vstr	d7, [r3]
		push_vel_z = (-PV1 + PV2 - PV3 + PV4) * r/(4 * (lx + ly) );
 8001f1a:	4b3a      	ldr	r3, [pc, #232]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001f1c:	ed93 6b00 	vldr	d6, [r3]
 8001f20:	4b37      	ldr	r3, [pc, #220]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001f22:	ed93 7b00 	vldr	d7, [r3]
 8001f26:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f2a:	4b37      	ldr	r3, [pc, #220]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001f2c:	ed93 7b00 	vldr	d7, [r3]
 8001f30:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f34:	4b35      	ldr	r3, [pc, #212]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001f36:	ed93 7b00 	vldr	d7, [r3]
 8001f3a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f3e:	4b34      	ldr	r3, [pc, #208]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001f40:	ed93 7b00 	vldr	d7, [r3]
 8001f44:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001f48:	4b34      	ldr	r3, [pc, #208]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001f4a:	ed93 6b00 	vldr	d6, [r3]
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001f50:	ed93 7b00 	vldr	d7, [r3]
 8001f54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f58:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001f5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f60:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f64:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001f66:	ed83 7b00 	vstr	d7, [r3]

		kkk += 1;
 8001f6a:	4b2f      	ldr	r3, [pc, #188]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4a2d      	ldr	r2, [pc, #180]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001f72:	6013      	str	r3, [r2, #0]
		if(kkk == 10){
 8001f74:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b0a      	cmp	r3, #10
 8001f7a:	d113      	bne.n	8001fa4 <HAL_TIM_PeriodElapsedCallback+0x924>
			// TODO change parameter to real velocity
			 publish_vel(push_vel_x, push_vel_y, push_vel_z);
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001f7e:	ed93 7b00 	vldr	d7, [r3]
 8001f82:	4b25      	ldr	r3, [pc, #148]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001f84:	ed93 6b00 	vldr	d6, [r3]
 8001f88:	4b26      	ldr	r3, [pc, #152]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001f8a:	ed93 5b00 	vldr	d5, [r3]
 8001f8e:	eeb0 2b45 	vmov.f64	d2, d5
 8001f92:	eeb0 1b46 	vmov.f64	d1, d6
 8001f96:	eeb0 0b47 	vmov.f64	d0, d7
 8001f9a:	f002 f86f 	bl	800407c <publish_vel>
			kkk = 0;
 8001f9e:	4b22      	ldr	r3, [pc, #136]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	f3af 8000 	nop.w
 8001fb0:	00000000 	.word	0x00000000
 8001fb4:	408f4000 	.word	0x408f4000
 8001fb8:	24000618 	.word	0x24000618
 8001fbc:	58020000 	.word	0x58020000
 8001fc0:	58020800 	.word	0x58020800
 8001fc4:	24000600 	.word	0x24000600
 8001fc8:	24000608 	.word	0x24000608
 8001fcc:	24000610 	.word	0x24000610
 8001fd0:	24000178 	.word	0x24000178
 8001fd4:	240001c4 	.word	0x240001c4
 8001fd8:	240002f4 	.word	0x240002f4
 8001fdc:	24000094 	.word	0x24000094
 8001fe0:	24000598 	.word	0x24000598
 8001fe4:	24000620 	.word	0x24000620
 8001fe8:	240005a0 	.word	0x240005a0
 8001fec:	24000628 	.word	0x24000628
 8001ff0:	240005a8 	.word	0x240005a8
 8001ff4:	24000630 	.word	0x24000630
 8001ff8:	240005b0 	.word	0x240005b0
 8001ffc:	24000638 	.word	0x24000638
 8002000:	24000558 	.word	0x24000558
 8002004:	24000560 	.word	0x24000560
 8002008:	24000568 	.word	0x24000568
 800200c:	24000570 	.word	0x24000570
 8002010:	24000680 	.word	0x24000680
 8002014:	240006a0 	.word	0x240006a0
 8002018:	240006a8 	.word	0x240006a8
 800201c:	24000670 	.word	0x24000670
 8002020:	24000678 	.word	0x24000678
 8002024:	240006b0 	.word	0x240006b0
 8002028:	24000664 	.word	0x24000664

0800202c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002030:	b672      	cpsid	i
}
 8002032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002034:	e7fe      	b.n	8002034 <Error_Handler+0x8>

08002036 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	4a04      	ldr	r2, [pc, #16]	; (8002074 <_ZN3ros3MsgC1Ev+0x1c>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	0800f474 	.word	0x0800f474

08002078 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
      data()
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ffe8 	bl	8002058 <_ZN3ros3MsgC1Ev>
 8002088:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3304      	adds	r3, #4
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ffcf 	bl	8002036 <_ZN3ros4TimeC1Ev>
    {
    }
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	0800f45c 	.word	0x0800f45c

080020a8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6859      	ldr	r1, [r3, #4]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	b2ca      	uxtb	r2, r1
 80020c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	0a19      	lsrs	r1, r3, #8
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3301      	adds	r3, #1
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	b2ca      	uxtb	r2, r1
 80020d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	0c19      	lsrs	r1, r3, #16
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3302      	adds	r3, #2
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	b2ca      	uxtb	r2, r1
 80020e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	0e19      	lsrs	r1, r3, #24
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3303      	adds	r3, #3
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	b2ca      	uxtb	r2, r1
 80020f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3304      	adds	r3, #4
 80020fe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6899      	ldr	r1, [r3, #8]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	4413      	add	r3, r2
 800210a:	b2ca      	uxtb	r2, r1
 800210c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	0a19      	lsrs	r1, r3, #8
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3301      	adds	r3, #1
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	4413      	add	r3, r2
 800211c:	b2ca      	uxtb	r2, r1
 800211e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	0c19      	lsrs	r1, r3, #16
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3302      	adds	r3, #2
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	4413      	add	r3, r2
 800212e:	b2ca      	uxtb	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	0e19      	lsrs	r1, r3, #24
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3303      	adds	r3, #3
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	4413      	add	r3, r2
 8002140:	b2ca      	uxtb	r2, r1
 8002142:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3304      	adds	r3, #4
 8002148:	60fb      	str	r3, [r7, #12]
      return offset;
 800214a:	68fb      	ldr	r3, [r7, #12]
    }
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3301      	adds	r3, #1
 800217c:	6839      	ldr	r1, [r7, #0]
 800217e:	440b      	add	r3, r1
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3302      	adds	r3, #2
 8002192:	6839      	ldr	r1, [r7, #0]
 8002194:	440b      	add	r3, r1
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	041b      	lsls	r3, r3, #16
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3303      	adds	r3, #3
 80021a8:	6839      	ldr	r1, [r7, #0]
 80021aa:	440b      	add	r3, r1
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	061b      	lsls	r3, r3, #24
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3304      	adds	r3, #4
 80021ba:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3301      	adds	r3, #1
 80021d2:	6839      	ldr	r1, [r7, #0]
 80021d4:	440b      	add	r3, r1
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3302      	adds	r3, #2
 80021e8:	6839      	ldr	r1, [r7, #0]
 80021ea:	440b      	add	r3, r1
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	041b      	lsls	r3, r3, #16
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3303      	adds	r3, #3
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	440b      	add	r3, r1
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	061b      	lsls	r3, r3, #24
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3304      	adds	r3, #4
 8002210:	60fb      	str	r3, [r7, #12]
     return offset;
 8002212:	68fb      	ldr	r3, [r7, #12]
    }
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	0800f15c 	.word	0x0800f15c

0800223c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	0800f16c 	.word	0x0800f16c

08002258 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fef8 	bl	8002058 <_ZN3ros3MsgC1Ev>
 8002268:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	809a      	strh	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a06      	ldr	r2, [pc, #24]	; (800229c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002284:	611a      	str	r2, [r3, #16]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
    {
    }
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	0800f444 	.word	0x0800f444
 800229c:	0800f190 	.word	0x0800f190

080022a0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	8899      	ldrh	r1, [r3, #4]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	b2ca      	uxtb	r2, r1
 80022ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	889b      	ldrh	r3, [r3, #4]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	b299      	uxth	r1, r3
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	3301      	adds	r3, #1
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	b2ca      	uxtb	r2, r1
 80022ce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	3302      	adds	r3, #2
 80022d4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f818 	bl	8000310 <strlen>
 80022e0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	69b9      	ldr	r1, [r7, #24]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 feea 	bl	80040c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	3304      	adds	r3, #4
 80022f4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	18d0      	adds	r0, r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4619      	mov	r1, r3
 8002304:	f00c fd86 	bl	800ee14 <memcpy>
      offset += length_topic_name;
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	4413      	add	r3, r2
 800230e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fd fffb 	bl	8000310 <strlen>
 800231a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	4413      	add	r3, r2
 8002322:	6979      	ldr	r1, [r7, #20]
 8002324:	4618      	mov	r0, r3
 8002326:	f001 fecd 	bl	80040c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	18d0      	adds	r0, r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4619      	mov	r1, r3
 800233e:	f00c fd69 	bl	800ee14 <memcpy>
      offset += length_message_type;
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	4413      	add	r3, r2
 8002348:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fd ffde 	bl	8000310 <strlen>
 8002354:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	4413      	add	r3, r2
 800235c:	6939      	ldr	r1, [r7, #16]
 800235e:	4618      	mov	r0, r3
 8002360:	f001 feb0 	bl	80040c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	3304      	adds	r3, #4
 8002368:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	18d0      	adds	r0, r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4619      	mov	r1, r3
 8002378:	f00c fd4c 	bl	800ee14 <memcpy>
      offset += length_md5sum;
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800238a:	68f9      	ldr	r1, [r7, #12]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	4413      	add	r3, r2
 8002392:	b2ca      	uxtb	r2, r1
 8002394:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	0a19      	lsrs	r1, r3, #8
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3301      	adds	r3, #1
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	b2ca      	uxtb	r2, r1
 80023a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	0c19      	lsrs	r1, r3, #16
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3302      	adds	r3, #2
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	4413      	add	r3, r2
 80023b2:	b2ca      	uxtb	r2, r1
 80023b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	0e19      	lsrs	r1, r3, #24
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3303      	adds	r3, #3
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	4413      	add	r3, r2
 80023c2:	b2ca      	uxtb	r2, r1
 80023c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	61fb      	str	r3, [r7, #28]
      return offset;
 80023cc:	69fb      	ldr	r3, [r7, #28]
    }
 80023ce:	4618      	mov	r0, r3
 80023d0:	3720      	adds	r7, #32
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b08a      	sub	sp, #40	; 0x28
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	889b      	ldrh	r3, [r3, #4]
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	3301      	adds	r3, #1
 80023fc:	6839      	ldr	r1, [r7, #0]
 80023fe:	440b      	add	r3, r1
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	b21b      	sxth	r3, r3
 8002406:	4313      	orrs	r3, r2
 8002408:	b21b      	sxth	r3, r3
 800240a:	b29a      	uxth	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	3302      	adds	r3, #2
 8002414:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	441a      	add	r2, r3
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f001 fe6c 	bl	8004100 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	3304      	adds	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	4413      	add	r3, r2
 8002438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243a:	429a      	cmp	r2, r3
 800243c:	d20c      	bcs.n	8002458 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	441a      	add	r2, r3
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	3b01      	subs	r3, #1
 8002448:	6839      	ldr	r1, [r7, #0]
 800244a:	440b      	add	r3, r1
 800244c:	7812      	ldrb	r2, [r2, #0]
 800244e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	3301      	adds	r3, #1
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
 8002456:	e7ec      	b.n	8002432 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	4413      	add	r3, r2
 800245e:	3b01      	subs	r3, #1
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	4413      	add	r3, r2
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	3b01      	subs	r3, #1
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	441a      	add	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	4413      	add	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	441a      	add	r2, r3
 8002482:	f107 0310 	add.w	r3, r7, #16
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f001 fe39 	bl	8004100 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	3304      	adds	r3, #4
 8002492:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	623b      	str	r3, [r7, #32]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4413      	add	r3, r2
 800249e:	6a3a      	ldr	r2, [r7, #32]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d20c      	bcs.n	80024be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	441a      	add	r2, r3
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	6839      	ldr	r1, [r7, #0]
 80024b0:	440b      	add	r3, r1
 80024b2:	7812      	ldrb	r2, [r2, #0]
 80024b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	3301      	adds	r3, #1
 80024ba:	623b      	str	r3, [r7, #32]
 80024bc:	e7ec      	b.n	8002498 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	4413      	add	r3, r2
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	441a      	add	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	441a      	add	r2, r3
 80024e8:	f107 030c 	add.w	r3, r7, #12
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f001 fe06 	bl	8004100 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	3304      	adds	r3, #4
 80024f8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	429a      	cmp	r2, r3
 8002508:	d20c      	bcs.n	8002524 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	441a      	add	r2, r3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	3b01      	subs	r3, #1
 8002514:	6839      	ldr	r1, [r7, #0]
 8002516:	440b      	add	r3, r1
 8002518:	7812      	ldrb	r2, [r2, #0]
 800251a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	3301      	adds	r3, #1
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e7ec      	b.n	80024fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4413      	add	r3, r2
 800252a:	3b01      	subs	r3, #1
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	4413      	add	r3, r2
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	3b01      	subs	r3, #1
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	441a      	add	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4413      	add	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	6839      	ldr	r1, [r7, #0]
 8002552:	440a      	add	r2, r1
 8002554:	7812      	ldrb	r2, [r2, #0]
 8002556:	4313      	orrs	r3, r2
 8002558:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	3301      	adds	r3, #1
 8002560:	6839      	ldr	r1, [r7, #0]
 8002562:	440b      	add	r3, r1
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	4313      	orrs	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	3302      	adds	r3, #2
 8002572:	6839      	ldr	r1, [r7, #0]
 8002574:	440b      	add	r3, r1
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	4313      	orrs	r3, r2
 800257c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	3303      	adds	r3, #3
 8002584:	6839      	ldr	r1, [r7, #0]
 8002586:	440b      	add	r3, r1
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	061b      	lsls	r3, r3, #24
 800258c:	4313      	orrs	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	3304      	adds	r3, #4
 800259a:	61bb      	str	r3, [r7, #24]
     return offset;
 800259c:	69bb      	ldr	r3, [r7, #24]
    }
 800259e:	4618      	mov	r0, r3
 80025a0:	3728      	adds	r7, #40	; 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	0800f194 	.word	0x0800f194

080025c4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	0800f1b0 	.word	0x0800f1b0

080025e0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fd34 	bl	8002058 <_ZN3ros3MsgC1Ev>
 80025f0:	4a06      	ldr	r2, [pc, #24]	; (800260c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	711a      	strb	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002600:	609a      	str	r2, [r3, #8]
    {
    }
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	0800f42c 	.word	0x0800f42c
 8002610:	0800f190 	.word	0x0800f190

08002614 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	4413      	add	r3, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	7912      	ldrb	r2, [r2, #4]
 800262c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3301      	adds	r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fd fe69 	bl	8000310 <strlen>
 800263e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	4413      	add	r3, r2
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	4618      	mov	r0, r3
 800264a:	f001 fd3b 	bl	80040c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3304      	adds	r3, #4
 8002652:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	18d0      	adds	r0, r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4619      	mov	r1, r3
 8002662:	f00c fbd7 	bl	800ee14 <memcpy>
      offset += length_msg;
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4413      	add	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
      return offset;
 800266e:	68fb      	ldr	r3, [r7, #12]
    }
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	4413      	add	r3, r2
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	3301      	adds	r3, #1
 8002696:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	441a      	add	r2, r3
 800269e:	f107 030c 	add.w	r3, r7, #12
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f001 fd2b 	bl	8004100 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	3304      	adds	r3, #4
 80026ae:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4413      	add	r3, r2
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d20c      	bcs.n	80026da <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	441a      	add	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	6839      	ldr	r1, [r7, #0]
 80026cc:	440b      	add	r3, r1
 80026ce:	7812      	ldrb	r2, [r2, #0]
 80026d0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3301      	adds	r3, #1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	e7ec      	b.n	80026b4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	3b01      	subs	r3, #1
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	4413      	add	r3, r2
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	441a      	add	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4413      	add	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
     return offset;
 80026fe:	693b      	ldr	r3, [r7, #16]
    }
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	0800f1d4 	.word	0x0800f1d4

08002724 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	0800f1e8 	.word	0x0800f1e8

08002740 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fc84 	bl	8002058 <_ZN3ros3MsgC1Ev>
 8002750:	4a0c      	ldr	r2, [pc, #48]	; (8002784 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	611a      	str	r2, [r3, #16]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	619a      	str	r2, [r3, #24]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	61da      	str	r2, [r3, #28]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	0800f414 	.word	0x0800f414

08002788 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	b2ca      	uxtb	r2, r1
 80027a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	0a19      	lsrs	r1, r3, #8
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	3301      	adds	r3, #1
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	4413      	add	r3, r2
 80027b2:	b2ca      	uxtb	r2, r1
 80027b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	0c19      	lsrs	r1, r3, #16
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	3302      	adds	r3, #2
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	4413      	add	r3, r2
 80027c4:	b2ca      	uxtb	r2, r1
 80027c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0e19      	lsrs	r1, r3, #24
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	3303      	adds	r3, #3
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	4413      	add	r3, r2
 80027d6:	b2ca      	uxtb	r2, r1
 80027d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	3304      	adds	r3, #4
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80027e0:	2300      	movs	r3, #0
 80027e2:	623b      	str	r3, [r7, #32]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	6a3a      	ldr	r2, [r7, #32]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d22b      	bcs.n	8002846 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80027fc:	6939      	ldr	r1, [r7, #16]
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	4413      	add	r3, r2
 8002804:	b2ca      	uxtb	r2, r1
 8002806:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	0a19      	lsrs	r1, r3, #8
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	3301      	adds	r3, #1
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	4413      	add	r3, r2
 8002814:	b2ca      	uxtb	r2, r1
 8002816:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	0c19      	lsrs	r1, r3, #16
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	3302      	adds	r3, #2
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	4413      	add	r3, r2
 8002824:	b2ca      	uxtb	r2, r1
 8002826:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	0e19      	lsrs	r1, r3, #24
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	3303      	adds	r3, #3
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	4413      	add	r3, r2
 8002834:	b2ca      	uxtb	r2, r1
 8002836:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	3304      	adds	r3, #4
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	3301      	adds	r3, #1
 8002842:	623b      	str	r3, [r7, #32]
 8002844:	e7ce      	b.n	80027e4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6919      	ldr	r1, [r3, #16]
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	4413      	add	r3, r2
 8002850:	b2ca      	uxtb	r2, r1
 8002852:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	0a19      	lsrs	r1, r3, #8
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	3301      	adds	r3, #1
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4413      	add	r3, r2
 8002862:	b2ca      	uxtb	r2, r1
 8002864:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	0c19      	lsrs	r1, r3, #16
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	3302      	adds	r3, #2
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	4413      	add	r3, r2
 8002874:	b2ca      	uxtb	r2, r1
 8002876:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	0e19      	lsrs	r1, r3, #24
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	3303      	adds	r3, #3
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	4413      	add	r3, r2
 8002886:	b2ca      	uxtb	r2, r1
 8002888:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	3304      	adds	r3, #4
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	429a      	cmp	r2, r3
 800289c:	d22b      	bcs.n	80028f6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80028ac:	68f9      	ldr	r1, [r7, #12]
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	b2ca      	uxtb	r2, r1
 80028b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	0a19      	lsrs	r1, r3, #8
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	3301      	adds	r3, #1
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	b2ca      	uxtb	r2, r1
 80028c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	0c19      	lsrs	r1, r3, #16
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	3302      	adds	r3, #2
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	b2ca      	uxtb	r2, r1
 80028d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	0e19      	lsrs	r1, r3, #24
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	3303      	adds	r3, #3
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	b2ca      	uxtb	r2, r1
 80028e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	3304      	adds	r3, #4
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3301      	adds	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	e7ce      	b.n	8002894 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69d9      	ldr	r1, [r3, #28]
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	b2ca      	uxtb	r2, r1
 8002902:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	0a19      	lsrs	r1, r3, #8
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	3301      	adds	r3, #1
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	4413      	add	r3, r2
 8002912:	b2ca      	uxtb	r2, r1
 8002914:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	0c19      	lsrs	r1, r3, #16
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	3302      	adds	r3, #2
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	4413      	add	r3, r2
 8002924:	b2ca      	uxtb	r2, r1
 8002926:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	0e19      	lsrs	r1, r3, #24
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	3303      	adds	r3, #3
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	4413      	add	r3, r2
 8002936:	b2ca      	uxtb	r2, r1
 8002938:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	3304      	adds	r3, #4
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	429a      	cmp	r2, r3
 800294c:	d228      	bcs.n	80029a0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fcd8 	bl	8000310 <strlen>
 8002960:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	4413      	add	r3, r2
 8002968:	6979      	ldr	r1, [r7, #20]
 800296a:	4618      	mov	r0, r3
 800296c:	f001 fbaa 	bl	80040c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	3304      	adds	r3, #4
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	18d0      	adds	r0, r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4619      	mov	r1, r3
 800298c:	f00c fa42 	bl	800ee14 <memcpy>
      offset += length_stringsi;
 8002990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	4413      	add	r3, r2
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	3301      	adds	r3, #1
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	e7d1      	b.n	8002944 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80029a2:	4618      	mov	r0, r3
 80029a4:	3728      	adds	r7, #40	; 0x28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b08e      	sub	sp, #56	; 0x38
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80029b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	4413      	add	r3, r2
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80029c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c4:	3301      	adds	r3, #1
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	4413      	add	r3, r2
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	6a3a      	ldr	r2, [r7, #32]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80029d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d6:	3302      	adds	r3, #2
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	6a3a      	ldr	r2, [r7, #32]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80029e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e8:	3303      	adds	r3, #3
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	061b      	lsls	r3, r3, #24
 80029f2:	6a3a      	ldr	r2, [r7, #32]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80029f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fa:	3304      	adds	r3, #4
 80029fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	6a3a      	ldr	r2, [r7, #32]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d90a      	bls.n	8002a1e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f00c fa14 	bl	800ee40 <realloc>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a3a      	ldr	r2, [r7, #32]
 8002a22:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a24:	2300      	movs	r3, #0
 8002a26:	633b      	str	r3, [r7, #48]	; 0x30
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d236      	bcs.n	8002aa0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a3a:	6839      	ldr	r1, [r7, #0]
 8002a3c:	440a      	add	r2, r1
 8002a3e:	7812      	ldrb	r2, [r2, #0]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a48:	3301      	adds	r3, #1
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	440b      	add	r3, r1
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	6839      	ldr	r1, [r7, #0]
 8002a5e:	440b      	add	r3, r1
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	041b      	lsls	r3, r3, #16
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6c:	3303      	adds	r3, #3
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	440b      	add	r3, r1
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a82:	3304      	adds	r3, #4
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	3208      	adds	r2, #8
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9e:	e7c3      	b.n	8002a28 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aac:	3301      	adds	r3, #1
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abe:	3302      	adds	r3, #2
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	041b      	lsls	r3, r3, #16
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad0:	3303      	adds	r3, #3
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	061b      	lsls	r3, r3, #24
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d90a      	bls.n	8002b06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699a      	ldr	r2, [r3, #24]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f00c f9a0 	bl	800ee40 <realloc>
 8002b00:	4602      	mov	r2, r0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d236      	bcs.n	8002b88 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b22:	6839      	ldr	r1, [r7, #0]
 8002b24:	440a      	add	r2, r1
 8002b26:	7812      	ldrb	r2, [r2, #0]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	3301      	adds	r3, #1
 8002b32:	6839      	ldr	r1, [r7, #0]
 8002b34:	440b      	add	r3, r1
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b42:	3302      	adds	r3, #2
 8002b44:	6839      	ldr	r1, [r7, #0]
 8002b46:	440b      	add	r3, r1
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	041b      	lsls	r3, r3, #16
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b54:	3303      	adds	r3, #3
 8002b56:	6839      	ldr	r1, [r7, #0]
 8002b58:	440b      	add	r3, r1
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	3214      	adds	r2, #20
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	3301      	adds	r3, #1
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b86:	e7c3      	b.n	8002b10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b94:	3301      	adds	r3, #1
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	4413      	add	r3, r2
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	021b      	lsls	r3, r3, #8
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	041b      	lsls	r3, r3, #16
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb8:	3303      	adds	r3, #3
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bca:	3304      	adds	r3, #4
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d90a      	bls.n	8002bee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4619      	mov	r1, r3
 8002be2:	4610      	mov	r0, r2
 8002be4:	f00c f92c 	bl	800ee40 <realloc>
 8002be8:	4602      	mov	r2, r0
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d23f      	bcs.n	8002c82 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	441a      	add	r2, r3
 8002c08:	f107 030c 	add.w	r3, r7, #12
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 fa76 	bl	8004100 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c16:	3304      	adds	r3, #4
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d20c      	bcs.n	8002c44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	441a      	add	r2, r3
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	3b01      	subs	r3, #1
 8002c34:	6839      	ldr	r1, [r7, #0]
 8002c36:	440b      	add	r3, r1
 8002c38:	7812      	ldrb	r2, [r2, #0]
 8002c3a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	3301      	adds	r3, #1
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
 8002c42:	e7ec      	b.n	8002c1e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002c44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4413      	add	r3, r2
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c56:	3b01      	subs	r3, #1
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	441a      	add	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4413      	add	r3, r2
 8002c66:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	3220      	adds	r2, #32
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c80:	e7ba      	b.n	8002bf8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002c84:	4618      	mov	r0, r3
 8002c86:	3738      	adds	r7, #56	; 0x38
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	0800f338 	.word	0x0800f338

08002ca8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	0800f20c 	.word	0x0800f20c

08002cc4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	611a      	str	r2, [r3, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68d8      	ldr	r0, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6891      	ldr	r1, [r2, #8]
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	4798      	blx	r3
 8002d10:	4603      	mov	r3, r0
  };
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
  }
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a42      	ldr	r2, [pc, #264]	; (8002e50 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d068      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a40      	ldr	r2, [pc, #256]	; (8002e54 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d061      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a3d      	ldr	r2, [pc, #244]	; (8002e58 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d05a      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a3b      	ldr	r2, [pc, #236]	; (8002e5c <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d053      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a38      	ldr	r2, [pc, #224]	; (8002e60 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d04c      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a36      	ldr	r2, [pc, #216]	; (8002e64 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d045      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a33      	ldr	r2, [pc, #204]	; (8002e68 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d03e      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a31      	ldr	r2, [pc, #196]	; (8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d037      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a2e      	ldr	r2, [pc, #184]	; (8002e70 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d030      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2c      	ldr	r2, [pc, #176]	; (8002e74 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d029      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a29      	ldr	r2, [pc, #164]	; (8002e78 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d022      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d01b      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a24      	ldr	r2, [pc, #144]	; (8002e80 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d014      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00d      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1f      	ldr	r2, [pc, #124]	; (8002e88 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d006      	beq.n	8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1d      	ldr	r2, [pc, #116]	; (8002e8c <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d109      	bne.n	8002e30 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e2e:	e008      	b.n	8002e42 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40020010 	.word	0x40020010
 8002e54:	40020028 	.word	0x40020028
 8002e58:	40020040 	.word	0x40020040
 8002e5c:	40020058 	.word	0x40020058
 8002e60:	40020070 	.word	0x40020070
 8002e64:	40020088 	.word	0x40020088
 8002e68:	400200a0 	.word	0x400200a0
 8002e6c:	400200b8 	.word	0x400200b8
 8002e70:	40020410 	.word	0x40020410
 8002e74:	40020428 	.word	0x40020428
 8002e78:	40020440 	.word	0x40020440
 8002e7c:	40020458 	.word	0x40020458
 8002e80:	40020470 	.word	0x40020470
 8002e84:	40020488 	.word	0x40020488
 8002e88:	400204a0 	.word	0x400204a0
 8002e8c:	400204b8 	.word	0x400204b8

08002e90 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a0c      	ldr	r2, [pc, #48]	; (8002ecc <_ZN13STM32HardwareC1Ev+0x3c>)
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eac:	461a      	mov	r2, r3
 8002eae:	2300      	movs	r3, #0
 8002eb0:	6093      	str	r3, [r2, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60d3      	str	r3, [r2, #12]
    }
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	240003d8 	.word	0x240003d8

08002ed0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f804 	bl	8002ee6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002efa:	4619      	mov	r1, r3
 8002efc:	f009 ff0c 	bl	800cd18 <HAL_UART_Receive_DMA>
    }
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f14:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ff09 	bl	8002d34 <_ZN13STM32Hardware10getRdmaIndEv>
 8002f22:	4603      	mov	r3, r0
 8002f24:	429c      	cmp	r4, r3
 8002f26:	bf14      	ite	ne
 8002f28:	2301      	movne	r3, #1
 8002f2a:	2300      	moveq	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d012      	beq.n	8002f58 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002f38:	1c59      	adds	r1, r3, #1
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	791b      	ldrb	r3, [r3, #4]
 8002f46:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002f4e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002f58:	68fb      	ldr	r3, [r7, #12]
    }
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd90      	pop	{r4, r7, pc}
	...

08002f64 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d108      	bne.n	8002f8a <_ZN13STM32Hardware5flushEv+0x26>
 8002f78:	4b2c      	ldr	r3, [pc, #176]	; (800302c <_ZN13STM32Hardware5flushEv+0xc8>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	f083 0301 	eor.w	r3, r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <_ZN13STM32Hardware5flushEv+0x26>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <_ZN13STM32Hardware5flushEv+0x28>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d049      	beq.n	8003024 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002f90:	4b26      	ldr	r3, [pc, #152]	; (800302c <_ZN13STM32Hardware5flushEv+0xc8>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d039      	beq.n	800301e <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d20c      	bcs.n	8002fd8 <_ZN13STM32Hardware5flushEv+0x74>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	e007      	b.n	8002fe8 <_ZN13STM32Hardware5flushEv+0x84>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	89fa      	ldrh	r2, [r7, #14]
 8003000:	4619      	mov	r1, r3
 8003002:	f009 fdf7 	bl	800cbf4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	89fb      	ldrh	r3, [r7, #14]
 8003010:	4413      	add	r3, r2
 8003012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800301c:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 800301e:	4b03      	ldr	r3, [pc, #12]	; (800302c <_ZN13STM32Hardware5flushEv+0xc8>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
      }
    }
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	240006b8 	.word	0x240006b8

08003030 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
      int n = length;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003046:	bfa8      	it	ge
 8003048:	f44f 6300 	movge.w	r3, #2048	; 0x800
 800304c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	4293      	cmp	r3, r2
 800305e:	bf28      	it	cs
 8003060:	4613      	movcs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	4618      	mov	r0, r3
 800307a:	f00b fecb 	bl	800ee14 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	4413      	add	r3, r2
 800308a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003094:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	429a      	cmp	r2, r3
 800309c:	d00b      	beq.n	80030b6 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f603 0008 	addw	r0, r3, #2056	; 0x808
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	18d1      	adds	r1, r2, r3
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	f00b feaf 	bl	800ee14 <memcpy>
      }

      flush();
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7ff ff54 	bl	8002f64 <_ZN13STM32Hardware5flushEv>
    }
 80030bc:	bf00      	nop
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	f002 fccc 	bl	8005a68 <HAL_GetTick>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
      data(0)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe ffb6 	bl	8002058 <_ZN3ros3MsgC1Ev>
 80030ec:	4a07      	ldr	r2, [pc, #28]	; (800310c <_ZN8std_msgs5Int64C1Ev+0x30>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	0800f3d0 	.word	0x0800f3d0

08003110 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003124:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003128:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800312c:	6979      	ldr	r1, [r7, #20]
 800312e:	6838      	ldr	r0, [r7, #0]
 8003130:	4401      	add	r1, r0
 8003132:	b2d3      	uxtb	r3, r2
 8003134:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003136:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	0a02      	lsrs	r2, r0, #8
 8003144:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003148:	0a0b      	lsrs	r3, r1, #8
 800314a:	6979      	ldr	r1, [r7, #20]
 800314c:	3101      	adds	r1, #1
 800314e:	6838      	ldr	r0, [r7, #0]
 8003150:	4401      	add	r1, r0
 8003152:	b2d3      	uxtb	r3, r2
 8003154:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8003156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	0c02      	lsrs	r2, r0, #16
 8003164:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003168:	0c0b      	lsrs	r3, r1, #16
 800316a:	6979      	ldr	r1, [r7, #20]
 800316c:	3102      	adds	r1, #2
 800316e:	6838      	ldr	r0, [r7, #0]
 8003170:	4401      	add	r1, r0
 8003172:	b2d3      	uxtb	r3, r2
 8003174:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003176:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	0e02      	lsrs	r2, r0, #24
 8003184:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003188:	0e0b      	lsrs	r3, r1, #24
 800318a:	6979      	ldr	r1, [r7, #20]
 800318c:	3103      	adds	r1, #3
 800318e:	6838      	ldr	r0, [r7, #0]
 8003190:	4401      	add	r1, r0
 8003192:	b2d3      	uxtb	r3, r2
 8003194:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8003196:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	000a      	movs	r2, r1
 80031a4:	2300      	movs	r3, #0
 80031a6:	6979      	ldr	r1, [r7, #20]
 80031a8:	3104      	adds	r1, #4
 80031aa:	6838      	ldr	r0, [r7, #0]
 80031ac:	4401      	add	r1, r0
 80031ae:	b2d3      	uxtb	r3, r2
 80031b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80031b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	0a0a      	lsrs	r2, r1, #8
 80031c0:	2300      	movs	r3, #0
 80031c2:	6979      	ldr	r1, [r7, #20]
 80031c4:	3105      	adds	r1, #5
 80031c6:	6838      	ldr	r0, [r7, #0]
 80031c8:	4401      	add	r1, r0
 80031ca:	b2d3      	uxtb	r3, r2
 80031cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80031ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	0c0a      	lsrs	r2, r1, #16
 80031dc:	2300      	movs	r3, #0
 80031de:	6979      	ldr	r1, [r7, #20]
 80031e0:	3106      	adds	r1, #6
 80031e2:	6838      	ldr	r0, [r7, #0]
 80031e4:	4401      	add	r1, r0
 80031e6:	b2d3      	uxtb	r3, r2
 80031e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 80031ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	0e0a      	lsrs	r2, r1, #24
 80031f8:	2300      	movs	r3, #0
 80031fa:	6979      	ldr	r1, [r7, #20]
 80031fc:	3107      	adds	r1, #7
 80031fe:	6838      	ldr	r0, [r7, #0]
 8003200:	4401      	add	r1, r0
 8003202:	b2d3      	uxtb	r3, r2
 8003204:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	3308      	adds	r3, #8
 800320a:	617b      	str	r3, [r7, #20]
      return offset;
 800320c:	697b      	ldr	r3, [r7, #20]
    }
 800320e:	4618      	mov	r0, r3
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800321a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800321e:	b0a3      	sub	sp, #140	; 0x8c
 8003220:	af00      	add	r7, sp, #0
 8003222:	6778      	str	r0, [r7, #116]	; 0x74
 8003224:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003238:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800323c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003242:	4413      	add	r3, r2
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2200      	movs	r2, #0
 800324a:	461c      	mov	r4, r3
 800324c:	4615      	mov	r5, r2
 800324e:	ea40 0804 	orr.w	r8, r0, r4
 8003252:	ea41 0905 	orr.w	r9, r1, r5
 8003256:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800325a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800325e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003266:	4413      	add	r3, r2
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2200      	movs	r2, #0
 800326e:	469a      	mov	sl, r3
 8003270:	4693      	mov	fp, r2
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800327e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003282:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003286:	ea40 0402 	orr.w	r4, r0, r2
 800328a:	66bc      	str	r4, [r7, #104]	; 0x68
 800328c:	430b      	orrs	r3, r1
 800328e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003290:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003294:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003298:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800329c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032a0:	1c9a      	adds	r2, r3, #2
 80032a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a4:	4413      	add	r3, r2
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2200      	movs	r2, #0
 80032ac:	663b      	str	r3, [r7, #96]	; 0x60
 80032ae:	667a      	str	r2, [r7, #100]	; 0x64
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032bc:	464c      	mov	r4, r9
 80032be:	0423      	lsls	r3, r4, #16
 80032c0:	4644      	mov	r4, r8
 80032c2:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80032c6:	4644      	mov	r4, r8
 80032c8:	0422      	lsls	r2, r4, #16
 80032ca:	ea40 0402 	orr.w	r4, r0, r2
 80032ce:	65bc      	str	r4, [r7, #88]	; 0x58
 80032d0:	430b      	orrs	r3, r1
 80032d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032d4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80032d8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80032dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032e4:	1cda      	adds	r2, r3, #3
 80032e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e8:	4413      	add	r3, r2
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2200      	movs	r2, #0
 80032f0:	653b      	str	r3, [r7, #80]	; 0x50
 80032f2:	657a      	str	r2, [r7, #84]	; 0x54
 80032f4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80032f8:	4623      	mov	r3, r4
 80032fa:	0a1b      	lsrs	r3, r3, #8
 80032fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032fe:	4623      	mov	r3, r4
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	64bb      	str	r3, [r7, #72]	; 0x48
 8003304:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003308:	4623      	mov	r3, r4
 800330a:	4303      	orrs	r3, r0
 800330c:	643b      	str	r3, [r7, #64]	; 0x40
 800330e:	462b      	mov	r3, r5
 8003310:	430b      	orrs	r3, r1
 8003312:	647b      	str	r3, [r7, #68]	; 0x44
 8003314:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003318:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800331c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003324:	1d1a      	adds	r2, r3, #4
 8003326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003328:	4413      	add	r3, r2
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2200      	movs	r2, #0
 8003330:	63bb      	str	r3, [r7, #56]	; 0x38
 8003332:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800333e:	0023      	movs	r3, r4
 8003340:	2200      	movs	r2, #0
 8003342:	ea40 0402 	orr.w	r4, r0, r2
 8003346:	633c      	str	r4, [r7, #48]	; 0x30
 8003348:	430b      	orrs	r3, r1
 800334a:	637b      	str	r3, [r7, #52]	; 0x34
 800334c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003350:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003354:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003358:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800335c:	1d5a      	adds	r2, r3, #5
 800335e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003360:	4413      	add	r3, r2
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2200      	movs	r2, #0
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
 800336a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003376:	0223      	lsls	r3, r4, #8
 8003378:	2200      	movs	r2, #0
 800337a:	ea40 0402 	orr.w	r4, r0, r2
 800337e:	623c      	str	r4, [r7, #32]
 8003380:	430b      	orrs	r3, r1
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
 8003384:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003388:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800338c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003394:	3306      	adds	r3, #6
 8003396:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003398:	4413      	add	r3, r2
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2200      	movs	r2, #0
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	61fa      	str	r2, [r7, #28]
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	69bc      	ldr	r4, [r7, #24]
 80033ae:	0423      	lsls	r3, r4, #16
 80033b0:	2200      	movs	r2, #0
 80033b2:	ea40 0402 	orr.w	r4, r0, r2
 80033b6:	613c      	str	r4, [r7, #16]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80033c0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80033c4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033cc:	3307      	adds	r3, #7
 80033ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80033d0:	4413      	add	r3, r2
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2200      	movs	r2, #0
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	60fa      	str	r2, [r7, #12]
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	68bc      	ldr	r4, [r7, #8]
 80033e6:	0623      	lsls	r3, r4, #24
 80033e8:	2200      	movs	r2, #0
 80033ea:	ea40 0402 	orr.w	r4, r0, r2
 80033ee:	603c      	str	r4, [r7, #0]
 80033f0:	430b      	orrs	r3, r1
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80033f8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 80033fc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003400:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003402:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003406:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800340a:	3308      	adds	r3, #8
 800340c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003410:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8003414:	4618      	mov	r0, r3
 8003416:	378c      	adds	r7, #140	; 0x8c
 8003418:	46bd      	mov	sp, r7
 800341a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800341e:	4770      	bx	lr

08003420 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 800342a:	4618      	mov	r0, r3
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	0800f230 	.word	0x0800f230

0800343c <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	0800f240 	.word	0x0800f240

08003458 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe fdf8 	bl	8002058 <_ZN3ros3MsgC1Ev>
 8003468:	4a0e      	ldr	r2, [pc, #56]	; (80034a4 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	0800f3b8 	.word	0x0800f3b8

080034a8 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80034a8:	b480      	push	{r7}
 80034aa:	b08b      	sub	sp, #44	; 0x2c
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80034bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80034c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c6:	6838      	ldr	r0, [r7, #0]
 80034c8:	4401      	add	r1, r0
 80034ca:	b2d3      	uxtb	r3, r2
 80034cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80034ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	0a02      	lsrs	r2, r0, #8
 80034dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80034e0:	0a0b      	lsrs	r3, r1, #8
 80034e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e4:	3101      	adds	r1, #1
 80034e6:	6838      	ldr	r0, [r7, #0]
 80034e8:	4401      	add	r1, r0
 80034ea:	b2d3      	uxtb	r3, r2
 80034ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80034ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	0c02      	lsrs	r2, r0, #16
 80034fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003500:	0c0b      	lsrs	r3, r1, #16
 8003502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003504:	3102      	adds	r1, #2
 8003506:	6838      	ldr	r0, [r7, #0]
 8003508:	4401      	add	r1, r0
 800350a:	b2d3      	uxtb	r3, r2
 800350c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800350e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	0e02      	lsrs	r2, r0, #24
 800351c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003520:	0e0b      	lsrs	r3, r1, #24
 8003522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003524:	3103      	adds	r1, #3
 8003526:	6838      	ldr	r0, [r7, #0]
 8003528:	4401      	add	r1, r0
 800352a:	b2d3      	uxtb	r3, r2
 800352c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800352e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	000a      	movs	r2, r1
 800353c:	2300      	movs	r3, #0
 800353e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003540:	3104      	adds	r1, #4
 8003542:	6838      	ldr	r0, [r7, #0]
 8003544:	4401      	add	r1, r0
 8003546:	b2d3      	uxtb	r3, r2
 8003548:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800354a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	0a0a      	lsrs	r2, r1, #8
 8003558:	2300      	movs	r3, #0
 800355a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800355c:	3105      	adds	r1, #5
 800355e:	6838      	ldr	r0, [r7, #0]
 8003560:	4401      	add	r1, r0
 8003562:	b2d3      	uxtb	r3, r2
 8003564:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003566:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	0c0a      	lsrs	r2, r1, #16
 8003574:	2300      	movs	r3, #0
 8003576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003578:	3106      	adds	r1, #6
 800357a:	6838      	ldr	r0, [r7, #0]
 800357c:	4401      	add	r1, r0
 800357e:	b2d3      	uxtb	r3, r2
 8003580:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003582:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	0e0a      	lsrs	r2, r1, #24
 8003590:	2300      	movs	r3, #0
 8003592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003594:	3107      	adds	r1, #7
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	4401      	add	r1, r0
 800359a:	b2d3      	uxtb	r3, r2
 800359c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	3308      	adds	r3, #8
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80035aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80035ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035b4:	6838      	ldr	r0, [r7, #0]
 80035b6:	4401      	add	r1, r0
 80035b8:	b2d3      	uxtb	r3, r2
 80035ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80035bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	0a02      	lsrs	r2, r0, #8
 80035ca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80035ce:	0a0b      	lsrs	r3, r1, #8
 80035d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035d2:	3101      	adds	r1, #1
 80035d4:	6838      	ldr	r0, [r7, #0]
 80035d6:	4401      	add	r1, r0
 80035d8:	b2d3      	uxtb	r3, r2
 80035da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80035dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	0c02      	lsrs	r2, r0, #16
 80035ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035ee:	0c0b      	lsrs	r3, r1, #16
 80035f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035f2:	3102      	adds	r1, #2
 80035f4:	6838      	ldr	r0, [r7, #0]
 80035f6:	4401      	add	r1, r0
 80035f8:	b2d3      	uxtb	r3, r2
 80035fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80035fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	0e02      	lsrs	r2, r0, #24
 800360a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800360e:	0e0b      	lsrs	r3, r1, #24
 8003610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003612:	3103      	adds	r1, #3
 8003614:	6838      	ldr	r0, [r7, #0]
 8003616:	4401      	add	r1, r0
 8003618:	b2d3      	uxtb	r3, r2
 800361a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800361c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	000a      	movs	r2, r1
 800362a:	2300      	movs	r3, #0
 800362c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800362e:	3104      	adds	r1, #4
 8003630:	6838      	ldr	r0, [r7, #0]
 8003632:	4401      	add	r1, r0
 8003634:	b2d3      	uxtb	r3, r2
 8003636:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003638:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	0a0a      	lsrs	r2, r1, #8
 8003646:	2300      	movs	r3, #0
 8003648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800364a:	3105      	adds	r1, #5
 800364c:	6838      	ldr	r0, [r7, #0]
 800364e:	4401      	add	r1, r0
 8003650:	b2d3      	uxtb	r3, r2
 8003652:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003654:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	0c0a      	lsrs	r2, r1, #16
 8003662:	2300      	movs	r3, #0
 8003664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003666:	3106      	adds	r1, #6
 8003668:	6838      	ldr	r0, [r7, #0]
 800366a:	4401      	add	r1, r0
 800366c:	b2d3      	uxtb	r3, r2
 800366e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003670:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	0e0a      	lsrs	r2, r1, #24
 800367e:	2300      	movs	r3, #0
 8003680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003682:	3107      	adds	r1, #7
 8003684:	6838      	ldr	r0, [r7, #0]
 8003686:	4401      	add	r1, r0
 8003688:	b2d3      	uxtb	r3, r2
 800368a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	3308      	adds	r3, #8
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003698:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800369c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036a2:	6838      	ldr	r0, [r7, #0]
 80036a4:	4401      	add	r1, r0
 80036a6:	b2d3      	uxtb	r3, r2
 80036a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80036aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	0a02      	lsrs	r2, r0, #8
 80036b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80036bc:	0a0b      	lsrs	r3, r1, #8
 80036be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036c0:	3101      	adds	r1, #1
 80036c2:	6838      	ldr	r0, [r7, #0]
 80036c4:	4401      	add	r1, r0
 80036c6:	b2d3      	uxtb	r3, r2
 80036c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80036ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	0c02      	lsrs	r2, r0, #16
 80036d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036dc:	0c0b      	lsrs	r3, r1, #16
 80036de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e0:	3102      	adds	r1, #2
 80036e2:	6838      	ldr	r0, [r7, #0]
 80036e4:	4401      	add	r1, r0
 80036e6:	b2d3      	uxtb	r3, r2
 80036e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80036ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	0e02      	lsrs	r2, r0, #24
 80036f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80036fc:	0e0b      	lsrs	r3, r1, #24
 80036fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003700:	3103      	adds	r1, #3
 8003702:	6838      	ldr	r0, [r7, #0]
 8003704:	4401      	add	r1, r0
 8003706:	b2d3      	uxtb	r3, r2
 8003708:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800370a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	000a      	movs	r2, r1
 8003718:	2300      	movs	r3, #0
 800371a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800371c:	3104      	adds	r1, #4
 800371e:	6838      	ldr	r0, [r7, #0]
 8003720:	4401      	add	r1, r0
 8003722:	b2d3      	uxtb	r3, r2
 8003724:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	0a0a      	lsrs	r2, r1, #8
 8003734:	2300      	movs	r3, #0
 8003736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003738:	3105      	adds	r1, #5
 800373a:	6838      	ldr	r0, [r7, #0]
 800373c:	4401      	add	r1, r0
 800373e:	b2d3      	uxtb	r3, r2
 8003740:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003742:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	0c0a      	lsrs	r2, r1, #16
 8003750:	2300      	movs	r3, #0
 8003752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003754:	3106      	adds	r1, #6
 8003756:	6838      	ldr	r0, [r7, #0]
 8003758:	4401      	add	r1, r0
 800375a:	b2d3      	uxtb	r3, r2
 800375c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800375e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	0e0a      	lsrs	r2, r1, #24
 800376c:	2300      	movs	r3, #0
 800376e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003770:	3107      	adds	r1, #7
 8003772:	6838      	ldr	r0, [r7, #0]
 8003774:	4401      	add	r1, r0
 8003776:	b2d3      	uxtb	r3, r2
 8003778:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	3308      	adds	r3, #8
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003782:	4618      	mov	r0, r3
 8003784:	372c      	adds	r7, #44	; 0x2c
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800378e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003792:	b0eb      	sub	sp, #428	; 0x1ac
 8003794:	af00      	add	r7, sp, #0
 8003796:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800379a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037b4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80037b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037bc:	4413      	add	r3, r2
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2200      	movs	r2, #0
 80037c4:	461c      	mov	r4, r3
 80037c6:	4615      	mov	r5, r2
 80037c8:	ea40 0804 	orr.w	r8, r0, r4
 80037cc:	ea41 0905 	orr.w	r9, r1, r5
 80037d0:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037d4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037e2:	4413      	add	r3, r2
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2200      	movs	r2, #0
 80037ea:	469a      	mov	sl, r3
 80037ec:	4693      	mov	fp, r2
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80037fa:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80037fe:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003802:	ea40 0402 	orr.w	r4, r0, r2
 8003806:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800380a:	430b      	orrs	r3, r1
 800380c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003810:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003814:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003818:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800381c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003820:	1c9a      	adds	r2, r3, #2
 8003822:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003826:	4413      	add	r3, r2
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2200      	movs	r2, #0
 800382e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003832:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003842:	464c      	mov	r4, r9
 8003844:	0423      	lsls	r3, r4, #16
 8003846:	4644      	mov	r4, r8
 8003848:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800384c:	4644      	mov	r4, r8
 800384e:	0422      	lsls	r2, r4, #16
 8003850:	ea40 0402 	orr.w	r4, r0, r2
 8003854:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8003858:	430b      	orrs	r3, r1
 800385a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800385e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003862:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003866:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800386a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800386e:	1cda      	adds	r2, r3, #3
 8003870:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003874:	4413      	add	r3, r2
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2200      	movs	r2, #0
 800387c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003880:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003884:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003888:	4623      	mov	r3, r4
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003890:	4623      	mov	r3, r4
 8003892:	061b      	lsls	r3, r3, #24
 8003894:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003898:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800389c:	4623      	mov	r3, r4
 800389e:	4303      	orrs	r3, r0
 80038a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80038a4:	462b      	mov	r3, r5
 80038a6:	430b      	orrs	r3, r1
 80038a8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038ac:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80038b0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80038b4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80038b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038bc:	1d1a      	adds	r2, r3, #4
 80038be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038c2:	4413      	add	r3, r2
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2200      	movs	r2, #0
 80038ca:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80038ce:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80038de:	0023      	movs	r3, r4
 80038e0:	2200      	movs	r2, #0
 80038e2:	ea40 0402 	orr.w	r4, r0, r2
 80038e6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80038ea:	430b      	orrs	r3, r1
 80038ec:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80038f0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80038f4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80038f8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80038fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003900:	1d5a      	adds	r2, r3, #5
 8003902:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003906:	4413      	add	r3, r2
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2200      	movs	r2, #0
 800390e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003912:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003922:	0223      	lsls	r3, r4, #8
 8003924:	2200      	movs	r2, #0
 8003926:	ea40 0402 	orr.w	r4, r0, r2
 800392a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800392e:	430b      	orrs	r3, r1
 8003930:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003934:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003938:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800393c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003940:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003944:	1d9a      	adds	r2, r3, #6
 8003946:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800394a:	4413      	add	r3, r2
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2200      	movs	r2, #0
 8003952:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003956:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8003966:	0423      	lsls	r3, r4, #16
 8003968:	2200      	movs	r2, #0
 800396a:	ea40 0402 	orr.w	r4, r0, r2
 800396e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003972:	430b      	orrs	r3, r1
 8003974:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003978:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800397c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003980:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003984:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003988:	1dda      	adds	r2, r3, #7
 800398a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800398e:	4413      	add	r3, r2
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2200      	movs	r2, #0
 8003996:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800399a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80039aa:	0623      	lsls	r3, r4, #24
 80039ac:	2200      	movs	r2, #0
 80039ae:	ea40 0402 	orr.w	r4, r0, r2
 80039b2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80039b6:	430b      	orrs	r3, r1
 80039b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80039bc:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80039c0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80039c4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039c8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80039cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80039d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039d4:	3308      	adds	r3, #8
 80039d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80039e6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039ea:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80039ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039f2:	4413      	add	r3, r2
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2200      	movs	r2, #0
 80039fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80039fe:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003a02:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003a06:	4623      	mov	r3, r4
 8003a08:	4303      	orrs	r3, r0
 8003a0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a0e:	462b      	mov	r3, r5
 8003a10:	430b      	orrs	r3, r1
 8003a12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a16:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003a1a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a1e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a2c:	4413      	add	r3, r2
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a38:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003a48:	464c      	mov	r4, r9
 8003a4a:	0223      	lsls	r3, r4, #8
 8003a4c:	4644      	mov	r4, r8
 8003a4e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a52:	4644      	mov	r4, r8
 8003a54:	0222      	lsls	r2, r4, #8
 8003a56:	ea40 0402 	orr.w	r4, r0, r2
 8003a5a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a64:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003a68:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a6c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a7a:	4413      	add	r3, r2
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003a96:	464c      	mov	r4, r9
 8003a98:	0423      	lsls	r3, r4, #16
 8003a9a:	4644      	mov	r4, r8
 8003a9c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003aa0:	4644      	mov	r4, r8
 8003aa2:	0422      	lsls	r2, r4, #16
 8003aa4:	ea40 0402 	orr.w	r4, r0, r2
 8003aa8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003aac:	430b      	orrs	r3, r1
 8003aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ab2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003ab6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003aba:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003abe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ac2:	1cda      	adds	r2, r3, #3
 8003ac4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ac8:	4413      	add	r3, r2
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ad4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ad8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003adc:	4623      	mov	r3, r4
 8003ade:	0a1b      	lsrs	r3, r3, #8
 8003ae0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003ae4:	4623      	mov	r3, r4
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aec:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003af0:	4623      	mov	r3, r4
 8003af2:	4303      	orrs	r3, r0
 8003af4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003af8:	462b      	mov	r3, r5
 8003afa:	430b      	orrs	r3, r1
 8003afc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b00:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003b04:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b08:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b0c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b10:	1d1a      	adds	r2, r3, #4
 8003b12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b16:	4413      	add	r3, r2
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b22:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003b32:	0023      	movs	r3, r4
 8003b34:	2200      	movs	r2, #0
 8003b36:	ea40 0402 	orr.w	r4, r0, r2
 8003b3a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b44:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003b48:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b4c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b50:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b54:	1d5a      	adds	r2, r3, #5
 8003b56:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b5a:	4413      	add	r3, r2
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b66:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003b76:	0223      	lsls	r3, r4, #8
 8003b78:	2200      	movs	r2, #0
 8003b7a:	ea40 0402 	orr.w	r4, r0, r2
 8003b7e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003b82:	430b      	orrs	r3, r1
 8003b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b88:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003b8c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b90:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b94:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b98:	1d9a      	adds	r2, r3, #6
 8003b9a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b9e:	4413      	add	r3, r2
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003baa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003bba:	0423      	lsls	r3, r4, #16
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	ea40 0402 	orr.w	r4, r0, r2
 8003bc2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003bc6:	430b      	orrs	r3, r1
 8003bc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bcc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003bd0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003bd4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003bd8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bdc:	1dda      	adds	r2, r3, #7
 8003bde:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003be2:	4413      	add	r3, r2
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2200      	movs	r2, #0
 8003bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003bfe:	0623      	lsls	r3, r4, #24
 8003c00:	2200      	movs	r2, #0
 8003c02:	ea40 0402 	orr.w	r4, r0, r2
 8003c06:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c10:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003c14:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003c18:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c1c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003c20:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003c24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c28:	3308      	adds	r3, #8
 8003c2a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c3a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c3e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003c42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c46:	4413      	add	r3, r2
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c52:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c56:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	4303      	orrs	r3, r0
 8003c5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c60:	462b      	mov	r3, r5
 8003c62:	430b      	orrs	r3, r1
 8003c64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c66:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003c6a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c6e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c72:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c7c:	4413      	add	r3, r2
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2200      	movs	r2, #0
 8003c84:	673b      	str	r3, [r7, #112]	; 0x70
 8003c86:	677a      	str	r2, [r7, #116]	; 0x74
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c94:	464c      	mov	r4, r9
 8003c96:	0223      	lsls	r3, r4, #8
 8003c98:	4644      	mov	r4, r8
 8003c9a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c9e:	4644      	mov	r4, r8
 8003ca0:	0222      	lsls	r2, r4, #8
 8003ca2:	ea40 0402 	orr.w	r4, r0, r2
 8003ca6:	66bc      	str	r4, [r7, #104]	; 0x68
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cac:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003cb0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003cb4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003cb8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cbc:	1c9a      	adds	r2, r3, #2
 8003cbe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cc2:	4413      	add	r3, r2
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2200      	movs	r2, #0
 8003cca:	663b      	str	r3, [r7, #96]	; 0x60
 8003ccc:	667a      	str	r2, [r7, #100]	; 0x64
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cda:	464c      	mov	r4, r9
 8003cdc:	0423      	lsls	r3, r4, #16
 8003cde:	4644      	mov	r4, r8
 8003ce0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003ce4:	4644      	mov	r4, r8
 8003ce6:	0422      	lsls	r2, r4, #16
 8003ce8:	ea40 0402 	orr.w	r4, r0, r2
 8003cec:	65bc      	str	r4, [r7, #88]	; 0x58
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cf2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003cf6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003cfa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003cfe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d02:	1cda      	adds	r2, r3, #3
 8003d04:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d08:	4413      	add	r3, r2
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2200      	movs	r2, #0
 8003d10:	653b      	str	r3, [r7, #80]	; 0x50
 8003d12:	657a      	str	r2, [r7, #84]	; 0x54
 8003d14:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003d18:	4623      	mov	r3, r4
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d1e:	4623      	mov	r3, r4
 8003d20:	061b      	lsls	r3, r3, #24
 8003d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d24:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003d28:	4623      	mov	r3, r4
 8003d2a:	4303      	orrs	r3, r0
 8003d2c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d2e:	462b      	mov	r3, r5
 8003d30:	430b      	orrs	r3, r1
 8003d32:	647b      	str	r3, [r7, #68]	; 0x44
 8003d34:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003d38:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003d3c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d44:	1d1a      	adds	r2, r3, #4
 8003d46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d4a:	4413      	add	r3, r2
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2200      	movs	r2, #0
 8003d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003d60:	0023      	movs	r3, r4
 8003d62:	2200      	movs	r2, #0
 8003d64:	ea40 0402 	orr.w	r4, r0, r2
 8003d68:	633c      	str	r4, [r7, #48]	; 0x30
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d6e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003d72:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003d76:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d7a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d7e:	1d5a      	adds	r2, r3, #5
 8003d80:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d84:	4413      	add	r3, r2
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003d9a:	0223      	lsls	r3, r4, #8
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	ea40 0402 	orr.w	r4, r0, r2
 8003da2:	623c      	str	r4, [r7, #32]
 8003da4:	430b      	orrs	r3, r1
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
 8003da8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003dac:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003db0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003db4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003db8:	3306      	adds	r3, #6
 8003dba:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003dbe:	4413      	add	r3, r2
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	61fa      	str	r2, [r7, #28]
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	69bc      	ldr	r4, [r7, #24]
 8003dd4:	0423      	lsls	r3, r4, #16
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	ea40 0402 	orr.w	r4, r0, r2
 8003ddc:	613c      	str	r4, [r7, #16]
 8003dde:	430b      	orrs	r3, r1
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003de6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003dea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003dee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003df2:	3307      	adds	r3, #7
 8003df4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003df8:	4413      	add	r3, r2
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2200      	movs	r2, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	60fa      	str	r2, [r7, #12]
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	68bc      	ldr	r4, [r7, #8]
 8003e0e:	0623      	lsls	r3, r4, #24
 8003e10:	2200      	movs	r2, #0
 8003e12:	ea40 0402 	orr.w	r4, r0, r2
 8003e16:	603c      	str	r4, [r7, #0]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	607b      	str	r3, [r7, #4]
 8003e1c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e20:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003e24:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003e28:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003e2c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003e30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e34:	3308      	adds	r3, #8
 8003e36:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003e3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003e44:	46bd      	mov	sp, r7
 8003e46:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003e4a:	4770      	bx	lr

08003e4c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	0800f264 	.word	0x0800f264

08003e68 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	0800f27c 	.word	0x0800f27c

08003e84 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe f8e2 	bl	8002058 <_ZN3ros3MsgC1Ev>
 8003e94:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fada 	bl	8003458 <_ZN13geometry_msgs7Vector3C1Ev>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3328      	adds	r3, #40	; 0x28
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff fad5 	bl	8003458 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	0800f3a0 	.word	0x0800f3a0

08003ebc <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f103 0008 	add.w	r0, r3, #8
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	f7ff fae6 	bl	80034a8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003edc:	4602      	mov	r2, r0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	4413      	add	r3, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f7ff fad9 	bl	80034a8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
      return offset;
 8003efe:	68fb      	ldr	r3, [r7, #12]
    }
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f103 0008 	add.w	r0, r3, #8
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	4413      	add	r3, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	f7ff fc33 	bl	800378e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f7ff fc26 	bl	800378e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003f42:	4602      	mov	r2, r0
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
     return offset;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
    }
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	0800f2a0 	.word	0x0800f2a0

08003f70 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	0800f2b4 	.word	0x0800f2b4

08003f8c <_Z10sub_vel_cbRKN13geometry_msgs5TwistE>:
#include "geometry_msgs/Point.h"
#include "STM32Hardware.h"

geometry_msgs::Twist pub_out_msg;
void sub_vel_cb(const geometry_msgs::Twist &msg)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
   get_vel_x = msg.linear.x;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003f9a:	490a      	ldr	r1, [pc, #40]	; (8003fc4 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8003f9c:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_y = msg.linear.y;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003fa6:	4908      	ldr	r1, [pc, #32]	; (8003fc8 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8003fa8:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_z = msg.angular.z;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003fb2:	4906      	ldr	r1, [pc, #24]	; (8003fcc <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x40>)
 8003fb4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	24000688 	.word	0x24000688
 8003fc8:	24000690 	.word	0x24000690
 8003fcc:	24000698 	.word	0x24000698

08003fd0 <_Z8callbackRKN8std_msgs5Int64E>:

void callback(const std_msgs::Int64 &msg)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
   count = msg.data;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003fde:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 8003fe0:	601a      	str	r2, [r3, #0]
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	24000668 	.word	0x24000668

08003ff4 <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
ros::Subscriber<std_msgs::Int64> sub("counting", callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003ffc:	4805      	ldr	r0, [pc, #20]	; (8004014 <HAL_UART_TxCpltCallback+0x20>)
 8003ffe:	f000 f9a7 	bl	8004350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004002:	4603      	mov	r3, r0
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe ffad 	bl	8002f64 <_ZN13STM32Hardware5flushEv>
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	24000708 	.word	0x24000708

08004018 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8004020:	4805      	ldr	r0, [pc, #20]	; (8004038 <HAL_UART_RxCpltCallback+0x20>)
 8004022:	f000 f995 	bl	8004350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004026:	4603      	mov	r3, r0
 8004028:	4618      	mov	r0, r3
 800402a:	f7fe ff5c 	bl	8002ee6 <_ZN13STM32Hardware10reset_rbufEv>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	24000708 	.word	0x24000708

0800403c <setup>:

void setup(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
    nh.initNode();
 8004040:	4806      	ldr	r0, [pc, #24]	; (800405c <setup+0x20>)
 8004042:	f000 f991 	bl	8004368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//    sub_vel = nh.subscribe("/cmd_vel", 1, sub_vel_cb);
//    pub_vel = nh.advertise<geometry_msgs::Twist>("/base_speed", 1);
    nh.subscribe(sub_vel);
 8004046:	4906      	ldr	r1, [pc, #24]	; (8004060 <setup+0x24>)
 8004048:	4804      	ldr	r0, [pc, #16]	; (800405c <setup+0x20>)
 800404a:	f000 f9b6 	bl	80043ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(sub);
 800404e:	4905      	ldr	r1, [pc, #20]	; (8004064 <setup+0x28>)
 8004050:	4802      	ldr	r0, [pc, #8]	; (800405c <setup+0x20>)
 8004052:	f000 f9dd 	bl	8004410 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	24000708 	.word	0x24000708
 8004060:	24001c48 	.word	0x24001c48
 8004064:	24001cc0 	.word	0x24001cc0

08004068 <loop>:
void loop(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
    nh.spinOnce();
 800406c:	4802      	ldr	r0, [pc, #8]	; (8004078 <loop+0x10>)
 800406e:	f000 f9fa 	bl	8004466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	24000708 	.word	0x24000708

0800407c <publish_vel>:

void publish_vel(double x, double y, double z)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	ed87 0b04 	vstr	d0, [r7, #16]
 8004086:	ed87 1b02 	vstr	d1, [r7, #8]
 800408a:	ed87 2b00 	vstr	d2, [r7]

	pub_out_msg.linear.x = x;
 800408e:	490b      	ldr	r1, [pc, #44]	; (80040bc <publish_vel+0x40>)
 8004090:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004094:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pub_out_msg.linear.y = y;
 8004098:	4908      	ldr	r1, [pc, #32]	; (80040bc <publish_vel+0x40>)
 800409a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800409e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pub_out_msg.angular.z = z;
 80040a2:	4906      	ldr	r1, [pc, #24]	; (80040bc <publish_vel+0x40>)
 80040a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040a8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pub_vel.publish(&pub_out_msg);
 80040ac:	4903      	ldr	r1, [pc, #12]	; (80040bc <publish_vel+0x40>)
 80040ae:	4804      	ldr	r0, [pc, #16]	; (80040c0 <publish_vel+0x44>)
 80040b0:	f7fe fe1f 	bl	8002cf2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80040b4:	bf00      	nop
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	240006c0 	.word	0x240006c0
 80040c0:	24001ca8 	.word	0x24001ca8

080040c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d80d      	bhi.n	80040f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	fa22 f103 	lsr.w	r1, r2, r3
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	b2ca      	uxtb	r2, r1
 80040ea:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3301      	adds	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e7ee      	b.n	80040d2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80040f4:	bf00      	nop
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b03      	cmp	r3, #3
 8004118:	d811      	bhi.n	800413e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6839      	ldr	r1, [r7, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	440a      	add	r2, r1
 8004124:	7812      	ldrb	r2, [r2, #0]
 8004126:	4611      	mov	r1, r2
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	00d2      	lsls	r2, r2, #3
 800412c:	fa01 f202 	lsl.w	r2, r1, r2
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3301      	adds	r3, #1
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	e7ea      	b.n	8004114 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	4a04      	ldr	r2, [pc, #16]	; (8004168 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	0800f400 	.word	0x0800f400

0800416c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff ffe8 	bl	800414c <_ZN3ros15NodeHandleBase_C1Ev>
 800417c:	4a47      	ldr	r2, [pc, #284]	; (800429c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe fe82 	bl	8002e90 <_ZN13STM32HardwareC1Ev>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	f241 5314 	movw	r3, #5396	; 0x1514
 800419e:	4413      	add	r3, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe facd 	bl	8002740 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b18      	cmp	r3, #24
 80041ae:	d80b      	bhi.n	80041c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	2200      	movs	r2, #0
 80041be:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	3301      	adds	r3, #1
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e7f0      	b.n	80041aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80041c8:	2300      	movs	r3, #0
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b18      	cmp	r3, #24
 80041d0:	d80a      	bhi.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80041da:	2100      	movs	r1, #0
 80041dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	3301      	adds	r3, #1
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	e7f1      	b.n	80041cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f2:	d20b      	bcs.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	441a      	add	r2, r3
 80041fa:	f241 0324 	movw	r3, #4132	; 0x1024
 80041fe:	4413      	add	r3, r2
 8004200:	2200      	movs	r2, #0
 8004202:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3301      	adds	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	e7ef      	b.n	80041ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800420c:	2300      	movs	r3, #0
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004216:	d20b      	bcs.n	8004230 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	441a      	add	r2, r3
 800421e:	f241 2324 	movw	r3, #4644	; 0x1224
 8004222:	4413      	add	r3, r2
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	3301      	adds	r3, #1
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	e7ef      	b.n	8004210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004236:	461a      	mov	r2, r3
 8004238:	2300      	movs	r3, #0
 800423a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004244:	461a      	mov	r2, r3
 8004246:	2300      	movs	r3, #0
 8004248:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004252:	461a      	mov	r2, r3
 8004254:	2300      	movs	r3, #0
 8004256:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004260:	461a      	mov	r2, r3
 8004262:	2300      	movs	r3, #0
 8004264:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426e:	461a      	mov	r2, r3
 8004270:	2300      	movs	r3, #0
 8004272:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800427c:	461a      	mov	r2, r3
 800427e:	2300      	movs	r3, #0
 8004280:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428a:	461a      	mov	r2, r3
 800428c:	2300      	movs	r3, #0
 800428e:	6213      	str	r3, [r2, #32]
  }
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	0800f38c 	.word	0x0800f38c

080042a0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	4a04      	ldr	r2, [pc, #16]	; (80042bc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	0800f3e8 	.word	0x0800f3e8

080042c0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff ffe5 	bl	80042a0 <_ZN3ros11Subscriber_C1Ev>
 80042d6:	4a0b      	ldr	r2, [pc, #44]	; (8004304 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3310      	adds	r3, #16
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fdcf 	bl	8003e84 <_ZN13geometry_msgs5TwistC1Ev>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	659a      	str	r2, [r3, #88]	; 0x58
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	609a      	str	r2, [r3, #8]
  };
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	0800f374 	.word	0x0800f374

08004308 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ffc1 	bl	80042a0 <_ZN3ros11Subscriber_C1Ev>
 800431e:	4a0b      	ldr	r2, [pc, #44]	; (800434c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3310      	adds	r3, #16
 8004328:	4618      	mov	r0, r3
 800432a:	f7fe fed7 	bl	80030dc <_ZN8std_msgs5Int64C1Ev>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	621a      	str	r2, [r3, #32]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	609a      	str	r2, [r3, #8]
  };
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	0800f35c 	.word	0x0800f35c

08004350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3304      	adds	r3, #4
  }
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3304      	adds	r3, #4
 8004374:	4618      	mov	r0, r3
 8004376:	f7fe fdab 	bl	8002ed0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004380:	461a      	mov	r2, r3
 8004382:	2300      	movs	r3, #0
 8004384:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800438e:	461a      	mov	r2, r3
 8004390:	2300      	movs	r3, #0
 8004392:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439c:	461a      	mov	r2, r3
 800439e:	2300      	movs	r3, #0
 80043a0:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043aa:	461a      	mov	r2, r3
 80043ac:	2300      	movs	r3, #0
 80043ae:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80043ba:	b480      	push	{r7}
 80043bc:	b085      	sub	sp, #20
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b18      	cmp	r3, #24
 80043cc:	dc19      	bgt.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80043d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10d      	bne.n	80043fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80043de:	6839      	ldr	r1, [r7, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80043e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	605a      	str	r2, [r3, #4]
        return true;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e004      	b.n	8004404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3301      	adds	r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	e7e2      	b.n	80043c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8004402:	2300      	movs	r3, #0
  }
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b18      	cmp	r3, #24
 8004422:	dc19      	bgt.n	8004458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800442c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10d      	bne.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800443e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	605a      	str	r2, [r3, #4]
        return true;
 800444c:	2301      	movs	r3, #1
 800444e:	e004      	b.n	800445a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3301      	adds	r3, #1
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e7e2      	b.n	800441e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
    return false;
 8004458:	2300      	movs	r3, #0
  }
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3304      	adds	r3, #4
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe fe26 	bl	80030c4 <_ZN13STM32Hardware4timeEv>
 8004478:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004480:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800448c:	4293      	cmp	r3, r2
 800448e:	d905      	bls.n	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00e      	beq.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b0:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d906      	bls.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c0:	461a      	mov	r2, r3
 80044c2:	2300      	movs	r3, #0
 80044c4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d015      	beq.n	8004500 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fe fdf3 	bl	80030c4 <_ZN13STM32Hardware4timeEv>
 80044de:	4602      	mov	r2, r0
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	1ad2      	subs	r2, r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	bf8c      	ite	hi
 80044f0:	2301      	movhi	r3, #1
 80044f2:	2300      	movls	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80044fa:	f06f 0301 	mvn.w	r3, #1
 80044fe:	e226      	b.n	800494e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	4618      	mov	r0, r3
 8004506:	f7fe fcff 	bl	8002f08 <_ZN13STM32Hardware4readEv>
 800450a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	f2c0 81ff 	blt.w	8004912 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800451a:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4413      	add	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004528:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004532:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004536:	2b07      	cmp	r3, #7
 8004538:	d12d      	bne.n	8004596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004540:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800454c:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	b2d1      	uxtb	r1, r2
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	441a      	add	r2, r3
 8004558:	f241 0324 	movw	r3, #4132	; 0x1024
 800455c:	4413      	add	r3, r2
 800455e:	460a      	mov	r2, r1
 8004560:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004568:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800456c:	3b01      	subs	r3, #1
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004574:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800457e:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1a0      	bne.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800458c:	461a      	mov	r2, r3
 800458e:	2308      	movs	r3, #8
 8004590:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004594:	e798      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d130      	bne.n	8004606 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2bff      	cmp	r3, #255	; 0xff
 80045a8:	d112      	bne.n	80045d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045b4:	3301      	adds	r3, #1
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045bc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3314      	adds	r3, #20
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045ca:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 80045ce:	e77b      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe fd75 	bl	80030c4 <_ZN13STM32Hardware4timeEv>
 80045da:	4602      	mov	r2, r0
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	bf8c      	ite	hi
 80045e8:	2301      	movhi	r3, #1
 80045ea:	2300      	movls	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f43f af6a 	beq.w	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 8004600:	f06f 0301 	mvn.w	r3, #1
 8004604:	e1a3      	b.n	800494e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004610:	2b01      	cmp	r3, #1
 8004612:	d121      	bne.n	8004658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2bfe      	cmp	r3, #254	; 0xfe
 8004618:	d10b      	bne.n	8004632 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004620:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004624:	3301      	adds	r3, #1
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800462c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004630:	e74a      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004638:	461a      	mov	r2, r3
 800463a:	2300      	movs	r3, #0
 800463c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004646:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800464a:	2b00      	cmp	r3, #0
 800464c:	f47f af3c 	bne.w	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f980 	bl	8004956 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004656:	e737      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004662:	2b02      	cmp	r3, #2
 8004664:	d120      	bne.n	80046a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466c:	461a      	mov	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800467a:	461a      	mov	r2, r3
 800467c:	2300      	movs	r3, #0
 800467e:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004688:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800468c:	3301      	adds	r3, #1
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004694:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469e:	461a      	mov	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 80046a6:	e70f      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ae:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d118      	bne.n	80046e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046bc:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	4413      	add	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046cc:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046da:	3301      	adds	r3, #1
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046e2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80046e6:	e6ef      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ee:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d11f      	bne.n	8004736 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004700:	425a      	negs	r2, r3
 8004702:	b2db      	uxtb	r3, r3
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	bf58      	it	pl
 8004708:	4253      	negpl	r3, r2
 800470a:	2bff      	cmp	r3, #255	; 0xff
 800470c:	d10b      	bne.n	8004726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004714:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004718:	3301      	adds	r3, #1
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004720:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004724:	e6d0      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472c:	461a      	mov	r2, r3
 800472e:	2300      	movs	r3, #0
 8004730:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004734:	e6c8      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004740:	2b05      	cmp	r3, #5
 8004742:	d119      	bne.n	8004778 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474a:	461a      	mov	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004758:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800475c:	3301      	adds	r3, #1
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004764:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476e:	461a      	mov	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004776:	e6a7      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004782:	2b06      	cmp	r3, #6
 8004784:	d123      	bne.n	80047ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478c:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	4413      	add	r3, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800479c:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a6:	461a      	mov	r2, r3
 80047a8:	2307      	movs	r3, #7
 80047aa:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b4:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f47f ae85 	bne.w	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c4:	461a      	mov	r2, r3
 80047c6:	2308      	movs	r3, #8
 80047c8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047cc:	e67c      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047d8:	2b08      	cmp	r3, #8
 80047da:	f47f ae75 	bne.w	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e4:	461a      	mov	r2, r3
 80047e6:	2300      	movs	r3, #0
 80047e8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80047f6:	425a      	negs	r2, r3
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	bf58      	it	pl
 80047fe:	4253      	negpl	r3, r2
 8004800:	2bff      	cmp	r3, #255	; 0xff
 8004802:	f47f ae61 	bne.w	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800480c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d116      	bne.n	8004842 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f89e 	bl	8004956 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f8ba 	bl	8004994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004826:	461a      	mov	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004834:	461a      	mov	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 800483c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004840:	e085      	b.n	800494e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004848:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800484c:	2b0a      	cmp	r3, #10
 800484e:	d108      	bne.n	8004862 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	f241 0324 	movw	r3, #4132	; 0x1024
 8004856:	4413      	add	r3, r2
 8004858:	4619      	mov	r1, r3
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f97c 	bl	8004b58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004860:	e632      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004868:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800486c:	2b06      	cmp	r3, #6
 800486e:	d112      	bne.n	8004896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	f241 5314 	movw	r3, #5396	; 0x1514
 8004876:	4413      	add	r3, r2
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	f241 0224 	movw	r2, #4132	; 0x1024
 800487e:	440a      	add	r2, r1
 8004880:	4611      	mov	r1, r2
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe f891 	bl	80029aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004894:	e618      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800489c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048a0:	2b0b      	cmp	r3, #11
 80048a2:	d106      	bne.n	80048b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80048b0:	e60a      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048bc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80048c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f43f adfc 	beq.w	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048da:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80048e4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ee:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048f2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80048fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	f241 0324 	movw	r3, #4132	; 0x1024
 800490a:	440b      	add	r3, r1
 800490c:	4619      	mov	r1, r3
 800490e:	4790      	blx	r2
    while (true)
 8004910:	e5da      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8004912:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800491e:	2b00      	cmp	r3, #0
 8004920:	d014      	beq.n	800494c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004928:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004934:	4293      	cmp	r3, r2
 8004936:	d909      	bls.n	800494c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f80c 	bl	8004956 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004944:	461a      	mov	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 800494c:	2300      	movs	r3, #0
  }
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004956:	b580      	push	{r7, lr}
 8004958:	b086      	sub	sp, #24
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800495e:	f107 030c 	add.w	r3, r7, #12
 8004962:	4618      	mov	r0, r3
 8004964:	f7fd fb88 	bl	8002078 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f107 020c 	add.w	r2, r7, #12
 8004972:	210a      	movs	r1, #10
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	4798      	blx	r3
    rt_time = hardware_.time();
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3304      	adds	r3, #4
 800497c:	4618      	mov	r0, r3
 800497e:	f7fe fba1 	bl	80030c4 <_ZN13STM32Hardware4timeEv>
 8004982:	4602      	mov	r2, r0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	615a      	str	r2, [r3, #20]
  }
 800498c:	bf00      	nop
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004994:	b590      	push	{r4, r7, lr}
 8004996:	b08b      	sub	sp, #44	; 0x2c
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800499c:	f107 030c 	add.w	r3, r7, #12
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fd fc59 	bl	8002258 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	2b18      	cmp	r3, #24
 80049ae:	dc63      	bgt.n	8004a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d056      	beq.n	8004a70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4608      	mov	r0, r1
 8004a10:	4798      	blx	r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	6859      	ldr	r1, [r3, #4]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	330c      	adds	r3, #12
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4798      	blx	r3
 8004a40:	4603      	mov	r3, r0
 8004a42:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a48:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681c      	ldr	r4, [r3, #0]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe f95b 	bl	8002d1a <_ZN3ros9Publisher15getEndpointTypeEv>
 8004a64:	4601      	mov	r1, r0
 8004a66:	f107 030c 	add.w	r3, r7, #12
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	3301      	adds	r3, #1
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
 8004a76:	e798      	b.n	80049aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004a78:	2300      	movs	r3, #0
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	2b18      	cmp	r3, #24
 8004a80:	dc5f      	bgt.n	8004b42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a86:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d053      	beq.n	8004b3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a96:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004abc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3308      	adds	r3, #8
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4608      	mov	r0, r1
 8004ad4:	4798      	blx	r3
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ade:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004ae2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4608      	mov	r0, r1
 8004afa:	4798      	blx	r3
 8004afc:	4603      	mov	r3, r0
 8004afe:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b04:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681c      	ldr	r4, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b10:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3304      	adds	r3, #4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4608      	mov	r0, r1
 8004b2c:	4798      	blx	r3
 8004b2e:	4601      	mov	r1, r0
 8004b30:	f107 030c 	add.w	r3, r7, #12
 8004b34:	461a      	mov	r2, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b40:	e79c      	b.n	8004a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004b4e:	bf00      	nop
 8004b50:	372c      	adds	r7, #44	; 0x2c
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd90      	pop	{r4, r7, pc}
	...

08004b58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004b62:	f107 0308 	add.w	r3, r7, #8
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fd fa86 	bl	8002078 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe faa7 	bl	80030c4 <_ZN13STM32Hardware4timeEv>
 8004b76:	4602      	mov	r2, r0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004b84:	f107 0308 	add.w	r3, r7, #8
 8004b88:	6839      	ldr	r1, [r7, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fd fae4 	bl	8002158 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	4915      	ldr	r1, [pc, #84]	; (8004bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004b96:	fba1 1303 	umull	r1, r3, r1, r3
 8004b9a:	099b      	lsrs	r3, r3, #6
 8004b9c:	4413      	add	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004ba0:	6939      	ldr	r1, [r7, #16]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4b11      	ldr	r3, [pc, #68]	; (8004bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004ba6:	fba3 0302 	umull	r0, r3, r3, r2
 8004baa:	099b      	lsrs	r3, r3, #6
 8004bac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bb0:	fb00 f303 	mul.w	r3, r0, r3
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004bb8:	fb02 f303 	mul.w	r3, r2, r3
 8004bbc:	440b      	add	r3, r1
 8004bbe:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004bc0:	f107 0308 	add.w	r3, r7, #8
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f8bf 	bl	8004d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fe fa76 	bl	80030c4 <_ZN13STM32Hardware4timeEv>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004be4:	bf00      	nop
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	10624dd3 	.word	0x10624dd3
 8004bf0:	000f4240 	.word	0x000f4240

08004bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b63      	cmp	r3, #99	; 0x63
 8004c04:	dd0b      	ble.n	8004c1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c0c:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004c10:	f083 0301 	eor.w	r3, r3, #1
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e090      	b.n	8004d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68f9      	ldr	r1, [r7, #12]
 8004c26:	f241 2324 	movw	r3, #4644	; 0x1224
 8004c2a:	440b      	add	r3, r1
 8004c2c:	3307      	adds	r3, #7
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	4790      	blx	r2
 8004c34:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3c:	22ff      	movs	r2, #255	; 0xff
 8004c3e:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c48:	22fe      	movs	r2, #254	; 0xfe
 8004c4a:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c58:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	0a1b      	lsrs	r3, r3, #8
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c6c:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c76:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c80:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004c84:	4413      	add	r3, r2
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c92:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	b21b      	sxth	r3, r3
 8004ca8:	121b      	asrs	r3, r3, #8
 8004caa:	b21b      	sxth	r3, r3
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb4:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004cbc:	2305      	movs	r3, #5
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	3306      	adds	r3, #6
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	dc0e      	bgt.n	8004ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	441a      	add	r2, r3
 8004cd0:	f241 2324 	movw	r3, #4644	; 0x1224
 8004cd4:	4413      	add	r3, r2
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	e7eb      	b.n	8004cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3307      	adds	r3, #7
 8004cec:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	425a      	negs	r2, r3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	bf58      	it	pl
 8004cf8:	4253      	negpl	r3, r2
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	1c59      	adds	r1, r3, #1
 8004d00:	6179      	str	r1, [r7, #20]
 8004d02:	43d2      	mvns	r2, r2
 8004d04:	b2d1      	uxtb	r1, r2
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	441a      	add	r2, r3
 8004d0a:	f241 2324 	movw	r3, #4644	; 0x1224
 8004d0e:	4413      	add	r3, r2
 8004d10:	460a      	mov	r2, r1
 8004d12:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d1a:	dc0b      	bgt.n	8004d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	1d18      	adds	r0, r3, #4
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	f241 2324 	movw	r3, #4644	; 0x1224
 8004d26:	4413      	add	r3, r2
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	f7fe f980 	bl	8003030 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	e005      	b.n	8004d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004d34:	4904      	ldr	r1, [pc, #16]	; (8004d48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f84c 	bl	8004dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004d40:	4618      	mov	r0, r3
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	0800f2d8 	.word	0x0800f2d8

08004d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fe f9b2 	bl	80030c4 <_ZN13STM32Hardware4timeEv>
 8004d60:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4917      	ldr	r1, [pc, #92]	; (8004dc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004d6a:	fba1 1303 	umull	r1, r3, r1, r3
 8004d6e:	099b      	lsrs	r3, r3, #6
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	3b01      	subs	r3, #1
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d7a:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	6859      	ldr	r1, [r3, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004d84:	fba3 0302 	umull	r0, r3, r3, r2
 8004d88:	099b      	lsrs	r3, r3, #6
 8004d8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d8e:	fb00 f303 	mul.w	r3, r0, r3
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	1aca      	subs	r2, r1, r3
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004d9e:	4413      	add	r3, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004da6:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	f241 0318 	movw	r3, #4120	; 0x1018
 8004dae:	4413      	add	r3, r2
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	f241 021c 	movw	r2, #4124	; 0x101c
 8004db6:	440a      	add	r2, r1
 8004db8:	4611      	mov	r1, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fb fc32 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004dc0:	bf00      	nop
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	10624dd3 	.word	0x10624dd3
 8004dcc:	000f4240 	.word	0x000f4240
 8004dd0:	3b9aca00 	.word	0x3b9aca00

08004dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	2103      	movs	r1, #3
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f804 	bl	8004df0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004dfe:	f107 0314 	add.w	r3, r7, #20
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fd fbec 	bl	80025e0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004e08:	7afb      	ldrb	r3, [r7, #11]
 8004e0a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f107 0214 	add.w	r2, r7, #20
 8004e1a:	2107      	movs	r1, #7
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	4798      	blx	r3
  }
 8004e20:	bf00      	nop
 8004e22:	3720      	adds	r7, #32
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <_Z41__static_initialization_and_destruction_0ii>:
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d11c      	bne.n	8004e72 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d117      	bne.n	8004e72 <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist pub_out_msg;
 8004e42:	480e      	ldr	r0, [pc, #56]	; (8004e7c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004e44:	f7ff f81e 	bl	8003e84 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004e48:	480d      	ldr	r0, [pc, #52]	; (8004e80 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004e4a:	f7ff f98f 	bl	800416c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
 8004e4e:	2301      	movs	r3, #1
 8004e50:	4a0c      	ldr	r2, [pc, #48]	; (8004e84 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004e52:	490d      	ldr	r1, [pc, #52]	; (8004e88 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004e54:	480d      	ldr	r0, [pc, #52]	; (8004e8c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004e56:	f7ff fa33 	bl	80042c0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	4a07      	ldr	r2, [pc, #28]	; (8004e7c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004e5e:	490c      	ldr	r1, [pc, #48]	; (8004e90 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004e60:	480c      	ldr	r0, [pc, #48]	; (8004e94 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004e62:	f7fd ff2f 	bl	8002cc4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8004e66:	2301      	movs	r3, #1
 8004e68:	4a0b      	ldr	r2, [pc, #44]	; (8004e98 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004e6a:	490c      	ldr	r1, [pc, #48]	; (8004e9c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004e6c:	480c      	ldr	r0, [pc, #48]	; (8004ea0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004e6e:	f7ff fa4b 	bl	8004308 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	240006c0 	.word	0x240006c0
 8004e80:	24000708 	.word	0x24000708
 8004e84:	08003f8d 	.word	0x08003f8d
 8004e88:	0800f314 	.word	0x0800f314
 8004e8c:	24001c48 	.word	0x24001c48
 8004e90:	0800f320 	.word	0x0800f320
 8004e94:	24001ca8 	.word	0x24001ca8
 8004e98:	08003fd1 	.word	0x08003fd1
 8004e9c:	0800f32c 	.word	0x0800f32c
 8004ea0:	24001cc0 	.word	0x24001cc0

08004ea4 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3310      	adds	r3, #16
 8004eb2:	6839      	ldr	r1, [r7, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fe f9b0 	bl	800321a <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	3210      	adds	r2, #16
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	4798      	blx	r3
  }
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3310      	adds	r3, #16
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe fa94 	bl	8003420 <_ZN8std_msgs5Int647getTypeEv>
 8004ef8:	4603      	mov	r3, r0
  }
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3310      	adds	r3, #16
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe fa94 	bl	800343c <_ZN8std_msgs5Int646getMD5Ev>
 8004f14:	4603      	mov	r3, r0
  }
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b082      	sub	sp, #8
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3310      	adds	r3, #16
 8004f2c:	6839      	ldr	r1, [r7, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe ffea 	bl	8003f08 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	3210      	adds	r2, #16
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4798      	blx	r3
  }
 8004f40:	bf00      	nop
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3310      	adds	r3, #16
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fe fff1 	bl	8003f54 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004f72:	4603      	mov	r3, r0
  }
 8004f74:	4618      	mov	r0, r3
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3310      	adds	r3, #16
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fe fff1 	bl	8003f70 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004f8e:	4603      	mov	r3, r0
  }
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
    return configured_;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa6:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <_GLOBAL__sub_I_pub_out_msg>:
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	f7ff ff32 	bl	8004e28 <_Z41__static_initialization_and_destruction_0ii>
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fce:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <HAL_MspInit+0x3c>)
 8004fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fd4:	4a0b      	ldr	r2, [pc, #44]	; (8005004 <HAL_MspInit+0x3c>)
 8004fd6:	f043 0302 	orr.w	r3, r3, #2
 8004fda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004fde:	4b09      	ldr	r3, [pc, #36]	; (8005004 <HAL_MspInit+0x3c>)
 8004fe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	607b      	str	r3, [r7, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004fec:	2200      	movs	r2, #0
 8004fee:	2100      	movs	r1, #0
 8004ff0:	2005      	movs	r0, #5
 8004ff2:	f000 fe20 	bl	8005c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004ff6:	2005      	movs	r0, #5
 8004ff8:	f000 fe37 	bl	8005c6a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	58024400 	.word	0x58024400

08005008 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a2b      	ldr	r2, [pc, #172]	; (80050c4 <HAL_TIM_PWM_MspInit+0xbc>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d10f      	bne.n	800503a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800501a:	4b2b      	ldr	r3, [pc, #172]	; (80050c8 <HAL_TIM_PWM_MspInit+0xc0>)
 800501c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005020:	4a29      	ldr	r2, [pc, #164]	; (80050c8 <HAL_TIM_PWM_MspInit+0xc0>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800502a:	4b27      	ldr	r3, [pc, #156]	; (80050c8 <HAL_TIM_PWM_MspInit+0xc0>)
 800502c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8005038:	e03d      	b.n	80050b6 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a23      	ldr	r2, [pc, #140]	; (80050cc <HAL_TIM_PWM_MspInit+0xc4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d10f      	bne.n	8005064 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005044:	4b20      	ldr	r3, [pc, #128]	; (80050c8 <HAL_TIM_PWM_MspInit+0xc0>)
 8005046:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800504a:	4a1f      	ldr	r2, [pc, #124]	; (80050c8 <HAL_TIM_PWM_MspInit+0xc0>)
 800504c:	f043 0304 	orr.w	r3, r3, #4
 8005050:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005054:	4b1c      	ldr	r3, [pc, #112]	; (80050c8 <HAL_TIM_PWM_MspInit+0xc0>)
 8005056:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	693b      	ldr	r3, [r7, #16]
}
 8005062:	e028      	b.n	80050b6 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a19      	ldr	r2, [pc, #100]	; (80050d0 <HAL_TIM_PWM_MspInit+0xc8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d10f      	bne.n	800508e <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800506e:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <HAL_TIM_PWM_MspInit+0xc0>)
 8005070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005074:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <HAL_TIM_PWM_MspInit+0xc0>)
 8005076:	f043 0308 	orr.w	r3, r3, #8
 800507a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800507e:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <HAL_TIM_PWM_MspInit+0xc0>)
 8005080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]
}
 800508c:	e013      	b.n	80050b6 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM15)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a10      	ldr	r2, [pc, #64]	; (80050d4 <HAL_TIM_PWM_MspInit+0xcc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d10e      	bne.n	80050b6 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005098:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <HAL_TIM_PWM_MspInit+0xc0>)
 800509a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800509e:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <HAL_TIM_PWM_MspInit+0xc0>)
 80050a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80050a8:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <HAL_TIM_PWM_MspInit+0xc0>)
 80050aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	68bb      	ldr	r3, [r7, #8]
}
 80050b6:	bf00      	nop
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000
 80050c8:	58024400 	.word	0x58024400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	40000c00 	.word	0x40000c00
 80050d4:	40014000 	.word	0x40014000

080050d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e8:	d117      	bne.n	800511a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050ea:	4b22      	ldr	r3, [pc, #136]	; (8005174 <HAL_TIM_Base_MspInit+0x9c>)
 80050ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050f0:	4a20      	ldr	r2, [pc, #128]	; (8005174 <HAL_TIM_Base_MspInit+0x9c>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050fa:	4b1e      	ldr	r3, [pc, #120]	; (8005174 <HAL_TIM_Base_MspInit+0x9c>)
 80050fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005108:	2200      	movs	r2, #0
 800510a:	2100      	movs	r1, #0
 800510c:	201c      	movs	r0, #28
 800510e:	f000 fd92 	bl	8005c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005112:	201c      	movs	r0, #28
 8005114:	f000 fda9 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005118:	e028      	b.n	800516c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM6)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a16      	ldr	r2, [pc, #88]	; (8005178 <HAL_TIM_Base_MspInit+0xa0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d10f      	bne.n	8005144 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005124:	4b13      	ldr	r3, [pc, #76]	; (8005174 <HAL_TIM_Base_MspInit+0x9c>)
 8005126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800512a:	4a12      	ldr	r2, [pc, #72]	; (8005174 <HAL_TIM_Base_MspInit+0x9c>)
 800512c:	f043 0310 	orr.w	r3, r3, #16
 8005130:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005134:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <HAL_TIM_Base_MspInit+0x9c>)
 8005136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800513a:	f003 0310 	and.w	r3, r3, #16
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	693b      	ldr	r3, [r7, #16]
}
 8005142:	e013      	b.n	800516c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM7)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a0c      	ldr	r2, [pc, #48]	; (800517c <HAL_TIM_Base_MspInit+0xa4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d10e      	bne.n	800516c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800514e:	4b09      	ldr	r3, [pc, #36]	; (8005174 <HAL_TIM_Base_MspInit+0x9c>)
 8005150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005154:	4a07      	ldr	r2, [pc, #28]	; (8005174 <HAL_TIM_Base_MspInit+0x9c>)
 8005156:	f043 0320 	orr.w	r3, r3, #32
 800515a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800515e:	4b05      	ldr	r3, [pc, #20]	; (8005174 <HAL_TIM_Base_MspInit+0x9c>)
 8005160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	68fb      	ldr	r3, [r7, #12]
}
 800516c:	bf00      	nop
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	58024400 	.word	0x58024400
 8005178:	40001000 	.word	0x40001000
 800517c:	40001400 	.word	0x40001400

08005180 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b090      	sub	sp, #64	; 0x40
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005188:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	605a      	str	r2, [r3, #4]
 8005192:	609a      	str	r2, [r3, #8]
 8005194:	60da      	str	r2, [r3, #12]
 8005196:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a78      	ldr	r2, [pc, #480]	; (8005380 <HAL_TIM_Encoder_MspInit+0x200>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d14d      	bne.n	800523e <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051a2:	4b78      	ldr	r3, [pc, #480]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80051a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051a8:	4a76      	ldr	r2, [pc, #472]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80051aa:	f043 0302 	orr.w	r3, r3, #2
 80051ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051b2:	4b74      	ldr	r3, [pc, #464]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80051b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051c0:	4b70      	ldr	r3, [pc, #448]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80051c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051c6:	4a6f      	ldr	r2, [pc, #444]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051d0:	4b6c      	ldr	r3, [pc, #432]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80051d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051de:	4b69      	ldr	r3, [pc, #420]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80051e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051e4:	4a67      	ldr	r2, [pc, #412]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80051e6:	f043 0302 	orr.w	r3, r3, #2
 80051ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051ee:	4b65      	ldr	r3, [pc, #404]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80051f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	623b      	str	r3, [r7, #32]
 80051fa:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80051fc:	2340      	movs	r3, #64	; 0x40
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005200:	2302      	movs	r3, #2
 8005202:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005204:	2300      	movs	r3, #0
 8005206:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005208:	2300      	movs	r3, #0
 800520a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800520c:	2302      	movs	r3, #2
 800520e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005210:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005214:	4619      	mov	r1, r3
 8005216:	485c      	ldr	r0, [pc, #368]	; (8005388 <HAL_TIM_Encoder_MspInit+0x208>)
 8005218:	f003 fb7c 	bl	8008914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800521c:	2320      	movs	r3, #32
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005220:	2302      	movs	r3, #2
 8005222:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005224:	2300      	movs	r3, #0
 8005226:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005228:	2300      	movs	r3, #0
 800522a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800522c:	2302      	movs	r3, #2
 800522e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005234:	4619      	mov	r1, r3
 8005236:	4855      	ldr	r0, [pc, #340]	; (800538c <HAL_TIM_Encoder_MspInit+0x20c>)
 8005238:	f003 fb6c 	bl	8008914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 800523c:	e09b      	b.n	8005376 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a53      	ldr	r2, [pc, #332]	; (8005390 <HAL_TIM_Encoder_MspInit+0x210>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d12e      	bne.n	80052a6 <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005248:	4b4e      	ldr	r3, [pc, #312]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 800524a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800524e:	4a4d      	ldr	r2, [pc, #308]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005258:	4b4a      	ldr	r3, [pc, #296]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 800525a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	61fb      	str	r3, [r7, #28]
 8005264:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005266:	4b47      	ldr	r3, [pc, #284]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 8005268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800526c:	4a45      	ldr	r2, [pc, #276]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 800526e:	f043 0304 	orr.w	r3, r3, #4
 8005272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005276:	4b43      	ldr	r3, [pc, #268]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 8005278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005284:	23c0      	movs	r3, #192	; 0xc0
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005288:	2302      	movs	r3, #2
 800528a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528c:	2300      	movs	r3, #0
 800528e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005290:	2300      	movs	r3, #0
 8005292:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005294:	2303      	movs	r3, #3
 8005296:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800529c:	4619      	mov	r1, r3
 800529e:	483d      	ldr	r0, [pc, #244]	; (8005394 <HAL_TIM_Encoder_MspInit+0x214>)
 80052a0:	f003 fb38 	bl	8008914 <HAL_GPIO_Init>
}
 80052a4:	e067      	b.n	8005376 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM23)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a3b      	ldr	r2, [pc, #236]	; (8005398 <HAL_TIM_Encoder_MspInit+0x218>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d12e      	bne.n	800530e <HAL_TIM_Encoder_MspInit+0x18e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80052b0:	4b34      	ldr	r3, [pc, #208]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80052b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80052b6:	4a33      	ldr	r2, [pc, #204]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80052b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052bc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80052c0:	4b30      	ldr	r3, [pc, #192]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80052c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80052c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80052ce:	4b2d      	ldr	r3, [pc, #180]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80052d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052d4:	4a2b      	ldr	r2, [pc, #172]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80052d6:	f043 0320 	orr.w	r3, r3, #32
 80052da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052de:	4b29      	ldr	r3, [pc, #164]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 80052e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	613b      	str	r3, [r7, #16]
 80052ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80052ec:	2303      	movs	r3, #3
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f0:	2302      	movs	r3, #2
 80052f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f4:	2300      	movs	r3, #0
 80052f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052f8:	2300      	movs	r3, #0
 80052fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80052fc:	230d      	movs	r3, #13
 80052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005300:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005304:	4619      	mov	r1, r3
 8005306:	4825      	ldr	r0, [pc, #148]	; (800539c <HAL_TIM_Encoder_MspInit+0x21c>)
 8005308:	f003 fb04 	bl	8008914 <HAL_GPIO_Init>
}
 800530c:	e033      	b.n	8005376 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM24)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a23      	ldr	r2, [pc, #140]	; (80053a0 <HAL_TIM_Encoder_MspInit+0x220>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d12e      	bne.n	8005376 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8005318:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 800531a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800531e:	4a19      	ldr	r2, [pc, #100]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 8005320:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005324:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005328:	4b16      	ldr	r3, [pc, #88]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 800532a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800532e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 8005338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800533c:	4a11      	ldr	r2, [pc, #68]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 800533e:	f043 0320 	orr.w	r3, r3, #32
 8005342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005346:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <HAL_TIM_Encoder_MspInit+0x204>)
 8005348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005354:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535a:	2302      	movs	r3, #2
 800535c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535e:	2300      	movs	r3, #0
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005362:	2300      	movs	r3, #0
 8005364:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8005366:	230e      	movs	r3, #14
 8005368:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800536a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800536e:	4619      	mov	r1, r3
 8005370:	480a      	ldr	r0, [pc, #40]	; (800539c <HAL_TIM_Encoder_MspInit+0x21c>)
 8005372:	f003 facf 	bl	8008914 <HAL_GPIO_Init>
}
 8005376:	bf00      	nop
 8005378:	3740      	adds	r7, #64	; 0x40
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40000400 	.word	0x40000400
 8005384:	58024400 	.word	0x58024400
 8005388:	58020000 	.word	0x58020000
 800538c:	58020400 	.word	0x58020400
 8005390:	40010400 	.word	0x40010400
 8005394:	58020800 	.word	0x58020800
 8005398:	4000e000 	.word	0x4000e000
 800539c:	58021400 	.word	0x58021400
 80053a0:	4000e400 	.word	0x4000e400

080053a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08c      	sub	sp, #48	; 0x30
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ac:	f107 031c 	add.w	r3, r7, #28
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	605a      	str	r2, [r3, #4]
 80053b6:	609a      	str	r2, [r3, #8]
 80053b8:	60da      	str	r2, [r3, #12]
 80053ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a4b      	ldr	r2, [pc, #300]	; (80054f0 <HAL_TIM_MspPostInit+0x14c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d120      	bne.n	8005408 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80053c6:	4b4b      	ldr	r3, [pc, #300]	; (80054f4 <HAL_TIM_MspPostInit+0x150>)
 80053c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053cc:	4a49      	ldr	r2, [pc, #292]	; (80054f4 <HAL_TIM_MspPostInit+0x150>)
 80053ce:	f043 0310 	orr.w	r3, r3, #16
 80053d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053d6:	4b47      	ldr	r3, [pc, #284]	; (80054f4 <HAL_TIM_MspPostInit+0x150>)
 80053d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	61bb      	str	r3, [r7, #24]
 80053e2:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ea:	2302      	movs	r3, #2
 80053ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f2:	2300      	movs	r3, #0
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80053f6:	2301      	movs	r3, #1
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80053fa:	f107 031c 	add.w	r3, r7, #28
 80053fe:	4619      	mov	r1, r3
 8005400:	483d      	ldr	r0, [pc, #244]	; (80054f8 <HAL_TIM_MspPostInit+0x154>)
 8005402:	f003 fa87 	bl	8008914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005406:	e06e      	b.n	80054e6 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a3b      	ldr	r2, [pc, #236]	; (80054fc <HAL_TIM_MspPostInit+0x158>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d120      	bne.n	8005454 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005412:	4b38      	ldr	r3, [pc, #224]	; (80054f4 <HAL_TIM_MspPostInit+0x150>)
 8005414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005418:	4a36      	ldr	r2, [pc, #216]	; (80054f4 <HAL_TIM_MspPostInit+0x150>)
 800541a:	f043 0308 	orr.w	r3, r3, #8
 800541e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005422:	4b34      	ldr	r3, [pc, #208]	; (80054f4 <HAL_TIM_MspPostInit+0x150>)
 8005424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005436:	2302      	movs	r3, #2
 8005438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800543a:	2300      	movs	r3, #0
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800543e:	2300      	movs	r3, #0
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005442:	2302      	movs	r3, #2
 8005444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005446:	f107 031c 	add.w	r3, r7, #28
 800544a:	4619      	mov	r1, r3
 800544c:	482c      	ldr	r0, [pc, #176]	; (8005500 <HAL_TIM_MspPostInit+0x15c>)
 800544e:	f003 fa61 	bl	8008914 <HAL_GPIO_Init>
}
 8005452:	e048      	b.n	80054e6 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a2a      	ldr	r2, [pc, #168]	; (8005504 <HAL_TIM_MspPostInit+0x160>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d11f      	bne.n	800549e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800545e:	4b25      	ldr	r3, [pc, #148]	; (80054f4 <HAL_TIM_MspPostInit+0x150>)
 8005460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005464:	4a23      	ldr	r2, [pc, #140]	; (80054f4 <HAL_TIM_MspPostInit+0x150>)
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800546e:	4b21      	ldr	r3, [pc, #132]	; (80054f4 <HAL_TIM_MspPostInit+0x150>)
 8005470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800547c:	2301      	movs	r3, #1
 800547e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005480:	2302      	movs	r3, #2
 8005482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005484:	2300      	movs	r3, #0
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005488:	2300      	movs	r3, #0
 800548a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800548c:	2302      	movs	r3, #2
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005490:	f107 031c 	add.w	r3, r7, #28
 8005494:	4619      	mov	r1, r3
 8005496:	481c      	ldr	r0, [pc, #112]	; (8005508 <HAL_TIM_MspPostInit+0x164>)
 8005498:	f003 fa3c 	bl	8008914 <HAL_GPIO_Init>
}
 800549c:	e023      	b.n	80054e6 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1a      	ldr	r2, [pc, #104]	; (800550c <HAL_TIM_MspPostInit+0x168>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d11e      	bne.n	80054e6 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80054a8:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <HAL_TIM_MspPostInit+0x150>)
 80054aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054ae:	4a11      	ldr	r2, [pc, #68]	; (80054f4 <HAL_TIM_MspPostInit+0x150>)
 80054b0:	f043 0310 	orr.w	r3, r3, #16
 80054b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054b8:	4b0e      	ldr	r3, [pc, #56]	; (80054f4 <HAL_TIM_MspPostInit+0x150>)
 80054ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80054c6:	2320      	movs	r3, #32
 80054c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ca:	2302      	movs	r3, #2
 80054cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d2:	2300      	movs	r3, #0
 80054d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80054d6:	2304      	movs	r3, #4
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054da:	f107 031c 	add.w	r3, r7, #28
 80054de:	4619      	mov	r1, r3
 80054e0:	4805      	ldr	r0, [pc, #20]	; (80054f8 <HAL_TIM_MspPostInit+0x154>)
 80054e2:	f003 fa17 	bl	8008914 <HAL_GPIO_Init>
}
 80054e6:	bf00      	nop
 80054e8:	3730      	adds	r7, #48	; 0x30
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40010000 	.word	0x40010000
 80054f4:	58024400 	.word	0x58024400
 80054f8:	58021000 	.word	0x58021000
 80054fc:	40000800 	.word	0x40000800
 8005500:	58020c00 	.word	0x58020c00
 8005504:	40000c00 	.word	0x40000c00
 8005508:	58020000 	.word	0x58020000
 800550c:	40014000 	.word	0x40014000

08005510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b0b6      	sub	sp, #216	; 0xd8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005518:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	609a      	str	r2, [r3, #8]
 8005524:	60da      	str	r2, [r3, #12]
 8005526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005528:	f107 0310 	add.w	r3, r7, #16
 800552c:	22b4      	movs	r2, #180	; 0xb4
 800552e:	2100      	movs	r1, #0
 8005530:	4618      	mov	r0, r3
 8005532:	f009 fc7d 	bl	800ee30 <memset>
  if(huart->Instance==USART3)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a57      	ldr	r2, [pc, #348]	; (8005698 <HAL_UART_MspInit+0x188>)
 800553c:	4293      	cmp	r3, r2
 800553e:	f040 80a7 	bne.w	8005690 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005542:	2302      	movs	r3, #2
 8005544:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005546:	2300      	movs	r3, #0
 8005548:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800554c:	f107 0310 	add.w	r3, r7, #16
 8005550:	4618      	mov	r0, r3
 8005552:	f004 fb15 	bl	8009b80 <HAL_RCCEx_PeriphCLKConfig>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800555c:	f7fc fd66 	bl	800202c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005560:	4b4e      	ldr	r3, [pc, #312]	; (800569c <HAL_UART_MspInit+0x18c>)
 8005562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005566:	4a4d      	ldr	r2, [pc, #308]	; (800569c <HAL_UART_MspInit+0x18c>)
 8005568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800556c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005570:	4b4a      	ldr	r3, [pc, #296]	; (800569c <HAL_UART_MspInit+0x18c>)
 8005572:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800557e:	4b47      	ldr	r3, [pc, #284]	; (800569c <HAL_UART_MspInit+0x18c>)
 8005580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005584:	4a45      	ldr	r2, [pc, #276]	; (800569c <HAL_UART_MspInit+0x18c>)
 8005586:	f043 0302 	orr.w	r3, r3, #2
 800558a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800558e:	4b43      	ldr	r3, [pc, #268]	; (800569c <HAL_UART_MspInit+0x18c>)
 8005590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800559c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80055a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a4:	2302      	movs	r3, #2
 80055a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055b0:	2300      	movs	r3, #0
 80055b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80055b6:	2307      	movs	r3, #7
 80055b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4837      	ldr	r0, [pc, #220]	; (80056a0 <HAL_UART_MspInit+0x190>)
 80055c4:	f003 f9a6 	bl	8008914 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80055c8:	4b36      	ldr	r3, [pc, #216]	; (80056a4 <HAL_UART_MspInit+0x194>)
 80055ca:	4a37      	ldr	r2, [pc, #220]	; (80056a8 <HAL_UART_MspInit+0x198>)
 80055cc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80055ce:	4b35      	ldr	r3, [pc, #212]	; (80056a4 <HAL_UART_MspInit+0x194>)
 80055d0:	222d      	movs	r2, #45	; 0x2d
 80055d2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055d4:	4b33      	ldr	r3, [pc, #204]	; (80056a4 <HAL_UART_MspInit+0x194>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055da:	4b32      	ldr	r3, [pc, #200]	; (80056a4 <HAL_UART_MspInit+0x194>)
 80055dc:	2200      	movs	r2, #0
 80055de:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055e0:	4b30      	ldr	r3, [pc, #192]	; (80056a4 <HAL_UART_MspInit+0x194>)
 80055e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055e6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055e8:	4b2e      	ldr	r3, [pc, #184]	; (80056a4 <HAL_UART_MspInit+0x194>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055ee:	4b2d      	ldr	r3, [pc, #180]	; (80056a4 <HAL_UART_MspInit+0x194>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80055f4:	4b2b      	ldr	r3, [pc, #172]	; (80056a4 <HAL_UART_MspInit+0x194>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80055fa:	4b2a      	ldr	r3, [pc, #168]	; (80056a4 <HAL_UART_MspInit+0x194>)
 80055fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005600:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005602:	4b28      	ldr	r3, [pc, #160]	; (80056a4 <HAL_UART_MspInit+0x194>)
 8005604:	2200      	movs	r2, #0
 8005606:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005608:	4826      	ldr	r0, [pc, #152]	; (80056a4 <HAL_UART_MspInit+0x194>)
 800560a:	f000 fb49 	bl	8005ca0 <HAL_DMA_Init>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8005614:	f7fc fd0a 	bl	800202c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a22      	ldr	r2, [pc, #136]	; (80056a4 <HAL_UART_MspInit+0x194>)
 800561c:	67da      	str	r2, [r3, #124]	; 0x7c
 800561e:	4a21      	ldr	r2, [pc, #132]	; (80056a4 <HAL_UART_MspInit+0x194>)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8005624:	4b21      	ldr	r3, [pc, #132]	; (80056ac <HAL_UART_MspInit+0x19c>)
 8005626:	4a22      	ldr	r2, [pc, #136]	; (80056b0 <HAL_UART_MspInit+0x1a0>)
 8005628:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800562a:	4b20      	ldr	r3, [pc, #128]	; (80056ac <HAL_UART_MspInit+0x19c>)
 800562c:	222e      	movs	r2, #46	; 0x2e
 800562e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005630:	4b1e      	ldr	r3, [pc, #120]	; (80056ac <HAL_UART_MspInit+0x19c>)
 8005632:	2240      	movs	r2, #64	; 0x40
 8005634:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005636:	4b1d      	ldr	r3, [pc, #116]	; (80056ac <HAL_UART_MspInit+0x19c>)
 8005638:	2200      	movs	r2, #0
 800563a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800563c:	4b1b      	ldr	r3, [pc, #108]	; (80056ac <HAL_UART_MspInit+0x19c>)
 800563e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005642:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005644:	4b19      	ldr	r3, [pc, #100]	; (80056ac <HAL_UART_MspInit+0x19c>)
 8005646:	2200      	movs	r2, #0
 8005648:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800564a:	4b18      	ldr	r3, [pc, #96]	; (80056ac <HAL_UART_MspInit+0x19c>)
 800564c:	2200      	movs	r2, #0
 800564e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005650:	4b16      	ldr	r3, [pc, #88]	; (80056ac <HAL_UART_MspInit+0x19c>)
 8005652:	2200      	movs	r2, #0
 8005654:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005656:	4b15      	ldr	r3, [pc, #84]	; (80056ac <HAL_UART_MspInit+0x19c>)
 8005658:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800565c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800565e:	4b13      	ldr	r3, [pc, #76]	; (80056ac <HAL_UART_MspInit+0x19c>)
 8005660:	2200      	movs	r2, #0
 8005662:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005664:	4811      	ldr	r0, [pc, #68]	; (80056ac <HAL_UART_MspInit+0x19c>)
 8005666:	f000 fb1b 	bl	8005ca0 <HAL_DMA_Init>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8005670:	f7fc fcdc 	bl	800202c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a0d      	ldr	r2, [pc, #52]	; (80056ac <HAL_UART_MspInit+0x19c>)
 8005678:	679a      	str	r2, [r3, #120]	; 0x78
 800567a:	4a0c      	ldr	r2, [pc, #48]	; (80056ac <HAL_UART_MspInit+0x19c>)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005680:	2200      	movs	r2, #0
 8005682:	2100      	movs	r1, #0
 8005684:	2027      	movs	r0, #39	; 0x27
 8005686:	f000 fad6 	bl	8005c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800568a:	2027      	movs	r0, #39	; 0x27
 800568c:	f000 faed 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005690:	bf00      	nop
 8005692:	37d8      	adds	r7, #216	; 0xd8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40004800 	.word	0x40004800
 800569c:	58024400 	.word	0x58024400
 80056a0:	58020400 	.word	0x58020400
 80056a4:	24000468 	.word	0x24000468
 80056a8:	40020010 	.word	0x40020010
 80056ac:	240004e0 	.word	0x240004e0
 80056b0:	40020028 	.word	0x40020028

080056b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80056b8:	e7fe      	b.n	80056b8 <NMI_Handler+0x4>

080056ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056ba:	b480      	push	{r7}
 80056bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056be:	e7fe      	b.n	80056be <HardFault_Handler+0x4>

080056c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056c4:	e7fe      	b.n	80056c4 <MemManage_Handler+0x4>

080056c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056c6:	b480      	push	{r7}
 80056c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056ca:	e7fe      	b.n	80056ca <BusFault_Handler+0x4>

080056cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056d0:	e7fe      	b.n	80056d0 <UsageFault_Handler+0x4>

080056d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056d2:	b480      	push	{r7}
 80056d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056d6:	bf00      	nop
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056ee:	b480      	push	{r7}
 80056f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056f2:	bf00      	nop
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005700:	f000 f99e 	bl	8005a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005704:	bf00      	nop
 8005706:	bd80      	pop	{r7, pc}

08005708 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800570c:	bf00      	nop
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
	...

08005718 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800571c:	4802      	ldr	r0, [pc, #8]	; (8005728 <DMA1_Stream0_IRQHandler+0x10>)
 800571e:	f001 fde7 	bl	80072f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005722:	bf00      	nop
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	24000468 	.word	0x24000468

0800572c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005730:	4802      	ldr	r0, [pc, #8]	; (800573c <DMA1_Stream1_IRQHandler+0x10>)
 8005732:	f001 fddd 	bl	80072f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005736:	bf00      	nop
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	240004e0 	.word	0x240004e0

08005740 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005744:	4802      	ldr	r0, [pc, #8]	; (8005750 <TIM2_IRQHandler+0x10>)
 8005746:	f006 f917 	bl	800b978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800574a:	bf00      	nop
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	240000e0 	.word	0x240000e0

08005754 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005758:	4802      	ldr	r0, [pc, #8]	; (8005764 <USART3_IRQHandler+0x10>)
 800575a:	f007 fb33 	bl	800cdc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	240003d8 	.word	0x240003d8

08005768 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
	return 1;
 800576c:	2301      	movs	r3, #1
}
 800576e:	4618      	mov	r0, r3
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <_kill>:

int _kill(int pid, int sig)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005782:	f009 fb1d 	bl	800edc0 <__errno>
 8005786:	4603      	mov	r3, r0
 8005788:	2216      	movs	r2, #22
 800578a:	601a      	str	r2, [r3, #0]
	return -1;
 800578c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <_exit>:

void _exit (int status)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80057a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff ffe7 	bl	8005778 <_kill>
	while (1) {}		/* Make sure we hang here */
 80057aa:	e7fe      	b.n	80057aa <_exit+0x12>

080057ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057b4:	4a14      	ldr	r2, [pc, #80]	; (8005808 <_sbrk+0x5c>)
 80057b6:	4b15      	ldr	r3, [pc, #84]	; (800580c <_sbrk+0x60>)
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057c0:	4b13      	ldr	r3, [pc, #76]	; (8005810 <_sbrk+0x64>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d102      	bne.n	80057ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80057c8:	4b11      	ldr	r3, [pc, #68]	; (8005810 <_sbrk+0x64>)
 80057ca:	4a12      	ldr	r2, [pc, #72]	; (8005814 <_sbrk+0x68>)
 80057cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <_sbrk+0x64>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4413      	add	r3, r2
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d207      	bcs.n	80057ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80057dc:	f009 faf0 	bl	800edc0 <__errno>
 80057e0:	4603      	mov	r3, r0
 80057e2:	220c      	movs	r2, #12
 80057e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80057e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057ea:	e009      	b.n	8005800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80057ec:	4b08      	ldr	r3, [pc, #32]	; (8005810 <_sbrk+0x64>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80057f2:	4b07      	ldr	r3, [pc, #28]	; (8005810 <_sbrk+0x64>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4413      	add	r3, r2
 80057fa:	4a05      	ldr	r2, [pc, #20]	; (8005810 <_sbrk+0x64>)
 80057fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80057fe:	68fb      	ldr	r3, [r7, #12]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	24050000 	.word	0x24050000
 800580c:	00000400 	.word	0x00000400
 8005810:	24001ce8 	.word	0x24001ce8
 8005814:	24001d00 	.word	0x24001d00

08005818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800581c:	4b32      	ldr	r3, [pc, #200]	; (80058e8 <SystemInit+0xd0>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005822:	4a31      	ldr	r2, [pc, #196]	; (80058e8 <SystemInit+0xd0>)
 8005824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800582c:	4b2f      	ldr	r3, [pc, #188]	; (80058ec <SystemInit+0xd4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 030f 	and.w	r3, r3, #15
 8005834:	2b06      	cmp	r3, #6
 8005836:	d807      	bhi.n	8005848 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005838:	4b2c      	ldr	r3, [pc, #176]	; (80058ec <SystemInit+0xd4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f023 030f 	bic.w	r3, r3, #15
 8005840:	4a2a      	ldr	r2, [pc, #168]	; (80058ec <SystemInit+0xd4>)
 8005842:	f043 0307 	orr.w	r3, r3, #7
 8005846:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005848:	4b29      	ldr	r3, [pc, #164]	; (80058f0 <SystemInit+0xd8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a28      	ldr	r2, [pc, #160]	; (80058f0 <SystemInit+0xd8>)
 800584e:	f043 0301 	orr.w	r3, r3, #1
 8005852:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005854:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <SystemInit+0xd8>)
 8005856:	2200      	movs	r2, #0
 8005858:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800585a:	4b25      	ldr	r3, [pc, #148]	; (80058f0 <SystemInit+0xd8>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	4924      	ldr	r1, [pc, #144]	; (80058f0 <SystemInit+0xd8>)
 8005860:	4b24      	ldr	r3, [pc, #144]	; (80058f4 <SystemInit+0xdc>)
 8005862:	4013      	ands	r3, r2
 8005864:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005866:	4b21      	ldr	r3, [pc, #132]	; (80058ec <SystemInit+0xd4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d007      	beq.n	8005882 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005872:	4b1e      	ldr	r3, [pc, #120]	; (80058ec <SystemInit+0xd4>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f023 030f 	bic.w	r3, r3, #15
 800587a:	4a1c      	ldr	r2, [pc, #112]	; (80058ec <SystemInit+0xd4>)
 800587c:	f043 0307 	orr.w	r3, r3, #7
 8005880:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005882:	4b1b      	ldr	r3, [pc, #108]	; (80058f0 <SystemInit+0xd8>)
 8005884:	2200      	movs	r2, #0
 8005886:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005888:	4b19      	ldr	r3, [pc, #100]	; (80058f0 <SystemInit+0xd8>)
 800588a:	2200      	movs	r2, #0
 800588c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800588e:	4b18      	ldr	r3, [pc, #96]	; (80058f0 <SystemInit+0xd8>)
 8005890:	2200      	movs	r2, #0
 8005892:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005894:	4b16      	ldr	r3, [pc, #88]	; (80058f0 <SystemInit+0xd8>)
 8005896:	4a18      	ldr	r2, [pc, #96]	; (80058f8 <SystemInit+0xe0>)
 8005898:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800589a:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <SystemInit+0xd8>)
 800589c:	4a17      	ldr	r2, [pc, #92]	; (80058fc <SystemInit+0xe4>)
 800589e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80058a0:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <SystemInit+0xd8>)
 80058a2:	4a17      	ldr	r2, [pc, #92]	; (8005900 <SystemInit+0xe8>)
 80058a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80058a6:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <SystemInit+0xd8>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80058ac:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <SystemInit+0xd8>)
 80058ae:	4a14      	ldr	r2, [pc, #80]	; (8005900 <SystemInit+0xe8>)
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80058b2:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <SystemInit+0xd8>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80058b8:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <SystemInit+0xd8>)
 80058ba:	4a11      	ldr	r2, [pc, #68]	; (8005900 <SystemInit+0xe8>)
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80058be:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <SystemInit+0xd8>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80058c4:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <SystemInit+0xd8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a09      	ldr	r2, [pc, #36]	; (80058f0 <SystemInit+0xd8>)
 80058ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <SystemInit+0xd8>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80058d6:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <SystemInit+0xec>)
 80058d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80058dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80058de:	bf00      	nop
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	e000ed00 	.word	0xe000ed00
 80058ec:	52002000 	.word	0x52002000
 80058f0:	58024400 	.word	0x58024400
 80058f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80058f8:	02020200 	.word	0x02020200
 80058fc:	01ff0000 	.word	0x01ff0000
 8005900:	01010280 	.word	0x01010280
 8005904:	52004000 	.word	0x52004000

08005908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005940 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800590c:	f7ff ff84 	bl	8005818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005910:	480c      	ldr	r0, [pc, #48]	; (8005944 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005912:	490d      	ldr	r1, [pc, #52]	; (8005948 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005914:	4a0d      	ldr	r2, [pc, #52]	; (800594c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005918:	e002      	b.n	8005920 <LoopCopyDataInit>

0800591a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800591a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800591c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800591e:	3304      	adds	r3, #4

08005920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005924:	d3f9      	bcc.n	800591a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005926:	4a0a      	ldr	r2, [pc, #40]	; (8005950 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005928:	4c0a      	ldr	r4, [pc, #40]	; (8005954 <LoopFillZerobss+0x22>)
  movs r3, #0
 800592a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800592c:	e001      	b.n	8005932 <LoopFillZerobss>

0800592e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800592e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005930:	3204      	adds	r2, #4

08005932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005934:	d3fb      	bcc.n	800592e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005936:	f009 fa49 	bl	800edcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800593a:	f7fa fea1 	bl	8000680 <main>
  bx  lr
 800593e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005940:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005944:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005948:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800594c:	0800f4d8 	.word	0x0800f4d8
  ldr r2, =_sbss
 8005950:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8005954:	24001d00 	.word	0x24001d00

08005958 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005958:	e7fe      	b.n	8005958 <ADC3_IRQHandler>
	...

0800595c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005962:	2003      	movs	r0, #3
 8005964:	f000 f95c 	bl	8005c20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005968:	f003 ff34 	bl	80097d4 <HAL_RCC_GetSysClockFreq>
 800596c:	4602      	mov	r2, r0
 800596e:	4b15      	ldr	r3, [pc, #84]	; (80059c4 <HAL_Init+0x68>)
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	0a1b      	lsrs	r3, r3, #8
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	4913      	ldr	r1, [pc, #76]	; (80059c8 <HAL_Init+0x6c>)
 800597a:	5ccb      	ldrb	r3, [r1, r3]
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	fa22 f303 	lsr.w	r3, r2, r3
 8005984:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005986:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <HAL_Init+0x68>)
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	4a0e      	ldr	r2, [pc, #56]	; (80059c8 <HAL_Init+0x6c>)
 8005990:	5cd3      	ldrb	r3, [r2, r3]
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
 800599c:	4a0b      	ldr	r2, [pc, #44]	; (80059cc <HAL_Init+0x70>)
 800599e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059a0:	4a0b      	ldr	r2, [pc, #44]	; (80059d0 <HAL_Init+0x74>)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059a6:	2000      	movs	r0, #0
 80059a8:	f000 f814 	bl	80059d4 <HAL_InitTick>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e002      	b.n	80059bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80059b6:	f7ff fb07 	bl	8004fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	58024400 	.word	0x58024400
 80059c8:	0800f484 	.word	0x0800f484
 80059cc:	24000004 	.word	0x24000004
 80059d0:	24000000 	.word	0x24000000

080059d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80059dc:	4b15      	ldr	r3, [pc, #84]	; (8005a34 <HAL_InitTick+0x60>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e021      	b.n	8005a2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80059e8:	4b13      	ldr	r3, [pc, #76]	; (8005a38 <HAL_InitTick+0x64>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <HAL_InitTick+0x60>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	4619      	mov	r1, r3
 80059f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80059fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 f941 	bl	8005c86 <HAL_SYSTICK_Config>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e00e      	b.n	8005a2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b0f      	cmp	r3, #15
 8005a12:	d80a      	bhi.n	8005a2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a14:	2200      	movs	r2, #0
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a1c:	f000 f90b 	bl	8005c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a20:	4a06      	ldr	r2, [pc, #24]	; (8005a3c <HAL_InitTick+0x68>)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e000      	b.n	8005a2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	2400000c 	.word	0x2400000c
 8005a38:	24000000 	.word	0x24000000
 8005a3c:	24000008 	.word	0x24000008

08005a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <HAL_IncTick+0x20>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <HAL_IncTick+0x24>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4413      	add	r3, r2
 8005a50:	4a04      	ldr	r2, [pc, #16]	; (8005a64 <HAL_IncTick+0x24>)
 8005a52:	6013      	str	r3, [r2, #0]
}
 8005a54:	bf00      	nop
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	2400000c 	.word	0x2400000c
 8005a64:	24001cec 	.word	0x24001cec

08005a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8005a6c:	4b03      	ldr	r3, [pc, #12]	; (8005a7c <HAL_GetTick+0x14>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	24001cec 	.word	0x24001cec

08005a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <__NVIC_SetPriorityGrouping+0x40>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005aa8:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005aae:	4a04      	ldr	r2, [pc, #16]	; (8005ac0 <__NVIC_SetPriorityGrouping+0x40>)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	60d3      	str	r3, [r2, #12]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	e000ed00 	.word	0xe000ed00
 8005ac4:	05fa0000 	.word	0x05fa0000

08005ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005acc:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	0a1b      	lsrs	r3, r3, #8
 8005ad2:	f003 0307 	and.w	r3, r3, #7
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	e000ed00 	.word	0xe000ed00

08005ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	db0b      	blt.n	8005b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	f003 021f 	and.w	r2, r3, #31
 8005afc:	4907      	ldr	r1, [pc, #28]	; (8005b1c <__NVIC_EnableIRQ+0x38>)
 8005afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	2001      	movs	r0, #1
 8005b06:	fa00 f202 	lsl.w	r2, r0, r2
 8005b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	e000e100 	.word	0xe000e100

08005b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	6039      	str	r1, [r7, #0]
 8005b2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	db0a      	blt.n	8005b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	490c      	ldr	r1, [pc, #48]	; (8005b6c <__NVIC_SetPriority+0x4c>)
 8005b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b3e:	0112      	lsls	r2, r2, #4
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	440b      	add	r3, r1
 8005b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b48:	e00a      	b.n	8005b60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	4908      	ldr	r1, [pc, #32]	; (8005b70 <__NVIC_SetPriority+0x50>)
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	3b04      	subs	r3, #4
 8005b58:	0112      	lsls	r2, r2, #4
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	761a      	strb	r2, [r3, #24]
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	e000e100 	.word	0xe000e100
 8005b70:	e000ed00 	.word	0xe000ed00

08005b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b089      	sub	sp, #36	; 0x24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f1c3 0307 	rsb	r3, r3, #7
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	bf28      	it	cs
 8005b92:	2304      	movcs	r3, #4
 8005b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	2b06      	cmp	r3, #6
 8005b9c:	d902      	bls.n	8005ba4 <NVIC_EncodePriority+0x30>
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	3b03      	subs	r3, #3
 8005ba2:	e000      	b.n	8005ba6 <NVIC_EncodePriority+0x32>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	43da      	mvns	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	401a      	ands	r2, r3
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc6:	43d9      	mvns	r1, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bcc:	4313      	orrs	r3, r2
         );
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3724      	adds	r7, #36	; 0x24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bec:	d301      	bcc.n	8005bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e00f      	b.n	8005c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bf2:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <SysTick_Config+0x40>)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bfa:	210f      	movs	r1, #15
 8005bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c00:	f7ff ff8e 	bl	8005b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <SysTick_Config+0x40>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c0a:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <SysTick_Config+0x40>)
 8005c0c:	2207      	movs	r2, #7
 8005c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	e000e010 	.word	0xe000e010

08005c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff ff29 	bl	8005a80 <__NVIC_SetPriorityGrouping>
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b086      	sub	sp, #24
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
 8005c42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c44:	f7ff ff40 	bl	8005ac8 <__NVIC_GetPriorityGrouping>
 8005c48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	6978      	ldr	r0, [r7, #20]
 8005c50:	f7ff ff90 	bl	8005b74 <NVIC_EncodePriority>
 8005c54:	4602      	mov	r2, r0
 8005c56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff ff5f 	bl	8005b20 <__NVIC_SetPriority>
}
 8005c62:	bf00      	nop
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	4603      	mov	r3, r0
 8005c72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff ff33 	bl	8005ae4 <__NVIC_EnableIRQ>
}
 8005c7e:	bf00      	nop
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff ffa4 	bl	8005bdc <SysTick_Config>
 8005c94:	4603      	mov	r3, r0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005ca8:	f7ff fede 	bl	8005a68 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e314      	b.n	80062e2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a66      	ldr	r2, [pc, #408]	; (8005e58 <HAL_DMA_Init+0x1b8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d04a      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a65      	ldr	r2, [pc, #404]	; (8005e5c <HAL_DMA_Init+0x1bc>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d045      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a63      	ldr	r2, [pc, #396]	; (8005e60 <HAL_DMA_Init+0x1c0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d040      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a62      	ldr	r2, [pc, #392]	; (8005e64 <HAL_DMA_Init+0x1c4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d03b      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a60      	ldr	r2, [pc, #384]	; (8005e68 <HAL_DMA_Init+0x1c8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d036      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a5f      	ldr	r2, [pc, #380]	; (8005e6c <HAL_DMA_Init+0x1cc>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d031      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a5d      	ldr	r2, [pc, #372]	; (8005e70 <HAL_DMA_Init+0x1d0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d02c      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a5c      	ldr	r2, [pc, #368]	; (8005e74 <HAL_DMA_Init+0x1d4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d027      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a5a      	ldr	r2, [pc, #360]	; (8005e78 <HAL_DMA_Init+0x1d8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d022      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a59      	ldr	r2, [pc, #356]	; (8005e7c <HAL_DMA_Init+0x1dc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d01d      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a57      	ldr	r2, [pc, #348]	; (8005e80 <HAL_DMA_Init+0x1e0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d018      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a56      	ldr	r2, [pc, #344]	; (8005e84 <HAL_DMA_Init+0x1e4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d013      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a54      	ldr	r2, [pc, #336]	; (8005e88 <HAL_DMA_Init+0x1e8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00e      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a53      	ldr	r2, [pc, #332]	; (8005e8c <HAL_DMA_Init+0x1ec>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d009      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a51      	ldr	r2, [pc, #324]	; (8005e90 <HAL_DMA_Init+0x1f0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d004      	beq.n	8005d58 <HAL_DMA_Init+0xb8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a50      	ldr	r2, [pc, #320]	; (8005e94 <HAL_DMA_Init+0x1f4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d101      	bne.n	8005d5c <HAL_DMA_Init+0xbc>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <HAL_DMA_Init+0xbe>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 813c 	beq.w	8005fdc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a37      	ldr	r2, [pc, #220]	; (8005e58 <HAL_DMA_Init+0x1b8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d04a      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a36      	ldr	r2, [pc, #216]	; (8005e5c <HAL_DMA_Init+0x1bc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d045      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a34      	ldr	r2, [pc, #208]	; (8005e60 <HAL_DMA_Init+0x1c0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d040      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a33      	ldr	r2, [pc, #204]	; (8005e64 <HAL_DMA_Init+0x1c4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d03b      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a31      	ldr	r2, [pc, #196]	; (8005e68 <HAL_DMA_Init+0x1c8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d036      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a30      	ldr	r2, [pc, #192]	; (8005e6c <HAL_DMA_Init+0x1cc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d031      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a2e      	ldr	r2, [pc, #184]	; (8005e70 <HAL_DMA_Init+0x1d0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d02c      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a2d      	ldr	r2, [pc, #180]	; (8005e74 <HAL_DMA_Init+0x1d4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d027      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a2b      	ldr	r2, [pc, #172]	; (8005e78 <HAL_DMA_Init+0x1d8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d022      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <HAL_DMA_Init+0x1dc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d01d      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a28      	ldr	r2, [pc, #160]	; (8005e80 <HAL_DMA_Init+0x1e0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d018      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a27      	ldr	r2, [pc, #156]	; (8005e84 <HAL_DMA_Init+0x1e4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d013      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a25      	ldr	r2, [pc, #148]	; (8005e88 <HAL_DMA_Init+0x1e8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00e      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a24      	ldr	r2, [pc, #144]	; (8005e8c <HAL_DMA_Init+0x1ec>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d009      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a22      	ldr	r2, [pc, #136]	; (8005e90 <HAL_DMA_Init+0x1f0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d004      	beq.n	8005e14 <HAL_DMA_Init+0x174>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <HAL_DMA_Init+0x1f4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d108      	bne.n	8005e26 <HAL_DMA_Init+0x186>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0201 	bic.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	e007      	b.n	8005e36 <HAL_DMA_Init+0x196>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0201 	bic.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e36:	e02f      	b.n	8005e98 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e38:	f7ff fe16 	bl	8005a68 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b05      	cmp	r3, #5
 8005e44:	d928      	bls.n	8005e98 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2203      	movs	r2, #3
 8005e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e244      	b.n	80062e2 <HAL_DMA_Init+0x642>
 8005e58:	40020010 	.word	0x40020010
 8005e5c:	40020028 	.word	0x40020028
 8005e60:	40020040 	.word	0x40020040
 8005e64:	40020058 	.word	0x40020058
 8005e68:	40020070 	.word	0x40020070
 8005e6c:	40020088 	.word	0x40020088
 8005e70:	400200a0 	.word	0x400200a0
 8005e74:	400200b8 	.word	0x400200b8
 8005e78:	40020410 	.word	0x40020410
 8005e7c:	40020428 	.word	0x40020428
 8005e80:	40020440 	.word	0x40020440
 8005e84:	40020458 	.word	0x40020458
 8005e88:	40020470 	.word	0x40020470
 8005e8c:	40020488 	.word	0x40020488
 8005e90:	400204a0 	.word	0x400204a0
 8005e94:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1c8      	bne.n	8005e38 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4b84      	ldr	r3, [pc, #528]	; (80060c4 <HAL_DMA_Init+0x424>)
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005ebe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ed6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d107      	bne.n	8005efc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b28      	cmp	r3, #40	; 0x28
 8005f02:	d903      	bls.n	8005f0c <HAL_DMA_Init+0x26c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b2e      	cmp	r3, #46	; 0x2e
 8005f0a:	d91f      	bls.n	8005f4c <HAL_DMA_Init+0x2ac>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b3e      	cmp	r3, #62	; 0x3e
 8005f12:	d903      	bls.n	8005f1c <HAL_DMA_Init+0x27c>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b42      	cmp	r3, #66	; 0x42
 8005f1a:	d917      	bls.n	8005f4c <HAL_DMA_Init+0x2ac>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2b46      	cmp	r3, #70	; 0x46
 8005f22:	d903      	bls.n	8005f2c <HAL_DMA_Init+0x28c>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b48      	cmp	r3, #72	; 0x48
 8005f2a:	d90f      	bls.n	8005f4c <HAL_DMA_Init+0x2ac>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	2b4e      	cmp	r3, #78	; 0x4e
 8005f32:	d903      	bls.n	8005f3c <HAL_DMA_Init+0x29c>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b52      	cmp	r3, #82	; 0x52
 8005f3a:	d907      	bls.n	8005f4c <HAL_DMA_Init+0x2ac>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2b73      	cmp	r3, #115	; 0x73
 8005f42:	d905      	bls.n	8005f50 <HAL_DMA_Init+0x2b0>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b77      	cmp	r3, #119	; 0x77
 8005f4a:	d801      	bhi.n	8005f50 <HAL_DMA_Init+0x2b0>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <HAL_DMA_Init+0x2b2>
 8005f50:	2300      	movs	r3, #0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f5c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f023 0307 	bic.w	r3, r3, #7
 8005f74:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d117      	bne.n	8005fb8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00e      	beq.n	8005fb8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f002 fb30 	bl	8008600 <DMA_CheckFifoParam>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d008      	beq.n	8005fb8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2240      	movs	r2, #64	; 0x40
 8005faa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e194      	b.n	80062e2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f002 fa6b 	bl	800849c <DMA_CalcBaseAndBitshift>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fce:	f003 031f 	and.w	r3, r3, #31
 8005fd2:	223f      	movs	r2, #63	; 0x3f
 8005fd4:	409a      	lsls	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	609a      	str	r2, [r3, #8]
 8005fda:	e0ca      	b.n	8006172 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a39      	ldr	r2, [pc, #228]	; (80060c8 <HAL_DMA_Init+0x428>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d022      	beq.n	800602c <HAL_DMA_Init+0x38c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a38      	ldr	r2, [pc, #224]	; (80060cc <HAL_DMA_Init+0x42c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d01d      	beq.n	800602c <HAL_DMA_Init+0x38c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a36      	ldr	r2, [pc, #216]	; (80060d0 <HAL_DMA_Init+0x430>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d018      	beq.n	800602c <HAL_DMA_Init+0x38c>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a35      	ldr	r2, [pc, #212]	; (80060d4 <HAL_DMA_Init+0x434>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <HAL_DMA_Init+0x38c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a33      	ldr	r2, [pc, #204]	; (80060d8 <HAL_DMA_Init+0x438>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00e      	beq.n	800602c <HAL_DMA_Init+0x38c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a32      	ldr	r2, [pc, #200]	; (80060dc <HAL_DMA_Init+0x43c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d009      	beq.n	800602c <HAL_DMA_Init+0x38c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a30      	ldr	r2, [pc, #192]	; (80060e0 <HAL_DMA_Init+0x440>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d004      	beq.n	800602c <HAL_DMA_Init+0x38c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a2f      	ldr	r2, [pc, #188]	; (80060e4 <HAL_DMA_Init+0x444>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d101      	bne.n	8006030 <HAL_DMA_Init+0x390>
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <HAL_DMA_Init+0x392>
 8006030:	2300      	movs	r3, #0
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 8094 	beq.w	8006160 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a22      	ldr	r2, [pc, #136]	; (80060c8 <HAL_DMA_Init+0x428>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d021      	beq.n	8006086 <HAL_DMA_Init+0x3e6>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a21      	ldr	r2, [pc, #132]	; (80060cc <HAL_DMA_Init+0x42c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d01c      	beq.n	8006086 <HAL_DMA_Init+0x3e6>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1f      	ldr	r2, [pc, #124]	; (80060d0 <HAL_DMA_Init+0x430>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d017      	beq.n	8006086 <HAL_DMA_Init+0x3e6>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1e      	ldr	r2, [pc, #120]	; (80060d4 <HAL_DMA_Init+0x434>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d012      	beq.n	8006086 <HAL_DMA_Init+0x3e6>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1c      	ldr	r2, [pc, #112]	; (80060d8 <HAL_DMA_Init+0x438>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00d      	beq.n	8006086 <HAL_DMA_Init+0x3e6>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1b      	ldr	r2, [pc, #108]	; (80060dc <HAL_DMA_Init+0x43c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d008      	beq.n	8006086 <HAL_DMA_Init+0x3e6>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a19      	ldr	r2, [pc, #100]	; (80060e0 <HAL_DMA_Init+0x440>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d003      	beq.n	8006086 <HAL_DMA_Init+0x3e6>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a18      	ldr	r2, [pc, #96]	; (80060e4 <HAL_DMA_Init+0x444>)
 8006084:	4293      	cmp	r3, r2
 8006086:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4b11      	ldr	r3, [pc, #68]	; (80060e8 <HAL_DMA_Init+0x448>)
 80060a4:	4013      	ands	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b40      	cmp	r3, #64	; 0x40
 80060ae:	d01d      	beq.n	80060ec <HAL_DMA_Init+0x44c>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b80      	cmp	r3, #128	; 0x80
 80060b6:	d102      	bne.n	80060be <HAL_DMA_Init+0x41e>
 80060b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060bc:	e017      	b.n	80060ee <HAL_DMA_Init+0x44e>
 80060be:	2300      	movs	r3, #0
 80060c0:	e015      	b.n	80060ee <HAL_DMA_Init+0x44e>
 80060c2:	bf00      	nop
 80060c4:	fe10803f 	.word	0xfe10803f
 80060c8:	58025408 	.word	0x58025408
 80060cc:	5802541c 	.word	0x5802541c
 80060d0:	58025430 	.word	0x58025430
 80060d4:	58025444 	.word	0x58025444
 80060d8:	58025458 	.word	0x58025458
 80060dc:	5802546c 	.word	0x5802546c
 80060e0:	58025480 	.word	0x58025480
 80060e4:	58025494 	.word	0x58025494
 80060e8:	fffe000f 	.word	0xfffe000f
 80060ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	68d2      	ldr	r2, [r2, #12]
 80060f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80060fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006104:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800610c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006114:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800611c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4313      	orrs	r3, r2
 8006122:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	4b6e      	ldr	r3, [pc, #440]	; (80062ec <HAL_DMA_Init+0x64c>)
 8006134:	4413      	add	r3, r2
 8006136:	4a6e      	ldr	r2, [pc, #440]	; (80062f0 <HAL_DMA_Init+0x650>)
 8006138:	fba2 2303 	umull	r2, r3, r2, r3
 800613c:	091b      	lsrs	r3, r3, #4
 800613e:	009a      	lsls	r2, r3, #2
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f002 f9a9 	bl	800849c <DMA_CalcBaseAndBitshift>
 800614a:	4603      	mov	r3, r0
 800614c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	2201      	movs	r2, #1
 8006158:	409a      	lsls	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	605a      	str	r2, [r3, #4]
 800615e:	e008      	b.n	8006172 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2240      	movs	r2, #64	; 0x40
 8006164:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2203      	movs	r2, #3
 800616a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e0b7      	b.n	80062e2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a5f      	ldr	r2, [pc, #380]	; (80062f4 <HAL_DMA_Init+0x654>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d072      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a5d      	ldr	r2, [pc, #372]	; (80062f8 <HAL_DMA_Init+0x658>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d06d      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a5c      	ldr	r2, [pc, #368]	; (80062fc <HAL_DMA_Init+0x65c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d068      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a5a      	ldr	r2, [pc, #360]	; (8006300 <HAL_DMA_Init+0x660>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d063      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a59      	ldr	r2, [pc, #356]	; (8006304 <HAL_DMA_Init+0x664>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d05e      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a57      	ldr	r2, [pc, #348]	; (8006308 <HAL_DMA_Init+0x668>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d059      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a56      	ldr	r2, [pc, #344]	; (800630c <HAL_DMA_Init+0x66c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d054      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a54      	ldr	r2, [pc, #336]	; (8006310 <HAL_DMA_Init+0x670>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d04f      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a53      	ldr	r2, [pc, #332]	; (8006314 <HAL_DMA_Init+0x674>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d04a      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a51      	ldr	r2, [pc, #324]	; (8006318 <HAL_DMA_Init+0x678>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d045      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a50      	ldr	r2, [pc, #320]	; (800631c <HAL_DMA_Init+0x67c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d040      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a4e      	ldr	r2, [pc, #312]	; (8006320 <HAL_DMA_Init+0x680>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d03b      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a4d      	ldr	r2, [pc, #308]	; (8006324 <HAL_DMA_Init+0x684>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d036      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a4b      	ldr	r2, [pc, #300]	; (8006328 <HAL_DMA_Init+0x688>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d031      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a4a      	ldr	r2, [pc, #296]	; (800632c <HAL_DMA_Init+0x68c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d02c      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a48      	ldr	r2, [pc, #288]	; (8006330 <HAL_DMA_Init+0x690>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d027      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a47      	ldr	r2, [pc, #284]	; (8006334 <HAL_DMA_Init+0x694>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d022      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a45      	ldr	r2, [pc, #276]	; (8006338 <HAL_DMA_Init+0x698>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d01d      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a44      	ldr	r2, [pc, #272]	; (800633c <HAL_DMA_Init+0x69c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d018      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a42      	ldr	r2, [pc, #264]	; (8006340 <HAL_DMA_Init+0x6a0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d013      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a41      	ldr	r2, [pc, #260]	; (8006344 <HAL_DMA_Init+0x6a4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00e      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a3f      	ldr	r2, [pc, #252]	; (8006348 <HAL_DMA_Init+0x6a8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d009      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a3e      	ldr	r2, [pc, #248]	; (800634c <HAL_DMA_Init+0x6ac>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d004      	beq.n	8006262 <HAL_DMA_Init+0x5c2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a3c      	ldr	r2, [pc, #240]	; (8006350 <HAL_DMA_Init+0x6b0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d101      	bne.n	8006266 <HAL_DMA_Init+0x5c6>
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <HAL_DMA_Init+0x5c8>
 8006266:	2300      	movs	r3, #0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d032      	beq.n	80062d2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f002 fa43 	bl	80086f8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2b80      	cmp	r3, #128	; 0x80
 8006278:	d102      	bne.n	8006280 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006294:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d010      	beq.n	80062c0 <HAL_DMA_Init+0x620>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	d80c      	bhi.n	80062c0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f002 fac0 	bl	800882c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	e008      	b.n	80062d2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	a7fdabf8 	.word	0xa7fdabf8
 80062f0:	cccccccd 	.word	0xcccccccd
 80062f4:	40020010 	.word	0x40020010
 80062f8:	40020028 	.word	0x40020028
 80062fc:	40020040 	.word	0x40020040
 8006300:	40020058 	.word	0x40020058
 8006304:	40020070 	.word	0x40020070
 8006308:	40020088 	.word	0x40020088
 800630c:	400200a0 	.word	0x400200a0
 8006310:	400200b8 	.word	0x400200b8
 8006314:	40020410 	.word	0x40020410
 8006318:	40020428 	.word	0x40020428
 800631c:	40020440 	.word	0x40020440
 8006320:	40020458 	.word	0x40020458
 8006324:	40020470 	.word	0x40020470
 8006328:	40020488 	.word	0x40020488
 800632c:	400204a0 	.word	0x400204a0
 8006330:	400204b8 	.word	0x400204b8
 8006334:	58025408 	.word	0x58025408
 8006338:	5802541c 	.word	0x5802541c
 800633c:	58025430 	.word	0x58025430
 8006340:	58025444 	.word	0x58025444
 8006344:	58025458 	.word	0x58025458
 8006348:	5802546c 	.word	0x5802546c
 800634c:	58025480 	.word	0x58025480
 8006350:	58025494 	.word	0x58025494

08006354 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e226      	b.n	80067be <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <HAL_DMA_Start_IT+0x2a>
 800637a:	2302      	movs	r3, #2
 800637c:	e21f      	b.n	80067be <HAL_DMA_Start_IT+0x46a>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	f040 820a 	bne.w	80067a8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a68      	ldr	r2, [pc, #416]	; (8006548 <HAL_DMA_Start_IT+0x1f4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d04a      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a66      	ldr	r2, [pc, #408]	; (800654c <HAL_DMA_Start_IT+0x1f8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d045      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a65      	ldr	r2, [pc, #404]	; (8006550 <HAL_DMA_Start_IT+0x1fc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d040      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a63      	ldr	r2, [pc, #396]	; (8006554 <HAL_DMA_Start_IT+0x200>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d03b      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a62      	ldr	r2, [pc, #392]	; (8006558 <HAL_DMA_Start_IT+0x204>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d036      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a60      	ldr	r2, [pc, #384]	; (800655c <HAL_DMA_Start_IT+0x208>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d031      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a5f      	ldr	r2, [pc, #380]	; (8006560 <HAL_DMA_Start_IT+0x20c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d02c      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a5d      	ldr	r2, [pc, #372]	; (8006564 <HAL_DMA_Start_IT+0x210>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d027      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a5c      	ldr	r2, [pc, #368]	; (8006568 <HAL_DMA_Start_IT+0x214>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d022      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a5a      	ldr	r2, [pc, #360]	; (800656c <HAL_DMA_Start_IT+0x218>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d01d      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a59      	ldr	r2, [pc, #356]	; (8006570 <HAL_DMA_Start_IT+0x21c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d018      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a57      	ldr	r2, [pc, #348]	; (8006574 <HAL_DMA_Start_IT+0x220>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d013      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a56      	ldr	r2, [pc, #344]	; (8006578 <HAL_DMA_Start_IT+0x224>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d00e      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a54      	ldr	r2, [pc, #336]	; (800657c <HAL_DMA_Start_IT+0x228>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d009      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a53      	ldr	r2, [pc, #332]	; (8006580 <HAL_DMA_Start_IT+0x22c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d004      	beq.n	8006442 <HAL_DMA_Start_IT+0xee>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a51      	ldr	r2, [pc, #324]	; (8006584 <HAL_DMA_Start_IT+0x230>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d108      	bne.n	8006454 <HAL_DMA_Start_IT+0x100>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0201 	bic.w	r2, r2, #1
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	e007      	b.n	8006464 <HAL_DMA_Start_IT+0x110>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0201 	bic.w	r2, r2, #1
 8006462:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f001 fe6a 	bl	8008144 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a34      	ldr	r2, [pc, #208]	; (8006548 <HAL_DMA_Start_IT+0x1f4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d04a      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a33      	ldr	r2, [pc, #204]	; (800654c <HAL_DMA_Start_IT+0x1f8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d045      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a31      	ldr	r2, [pc, #196]	; (8006550 <HAL_DMA_Start_IT+0x1fc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d040      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a30      	ldr	r2, [pc, #192]	; (8006554 <HAL_DMA_Start_IT+0x200>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d03b      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a2e      	ldr	r2, [pc, #184]	; (8006558 <HAL_DMA_Start_IT+0x204>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d036      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a2d      	ldr	r2, [pc, #180]	; (800655c <HAL_DMA_Start_IT+0x208>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d031      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a2b      	ldr	r2, [pc, #172]	; (8006560 <HAL_DMA_Start_IT+0x20c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d02c      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a2a      	ldr	r2, [pc, #168]	; (8006564 <HAL_DMA_Start_IT+0x210>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d027      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a28      	ldr	r2, [pc, #160]	; (8006568 <HAL_DMA_Start_IT+0x214>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d022      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a27      	ldr	r2, [pc, #156]	; (800656c <HAL_DMA_Start_IT+0x218>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d01d      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a25      	ldr	r2, [pc, #148]	; (8006570 <HAL_DMA_Start_IT+0x21c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d018      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a24      	ldr	r2, [pc, #144]	; (8006574 <HAL_DMA_Start_IT+0x220>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d013      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a22      	ldr	r2, [pc, #136]	; (8006578 <HAL_DMA_Start_IT+0x224>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00e      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a21      	ldr	r2, [pc, #132]	; (800657c <HAL_DMA_Start_IT+0x228>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d009      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a1f      	ldr	r2, [pc, #124]	; (8006580 <HAL_DMA_Start_IT+0x22c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d004      	beq.n	8006510 <HAL_DMA_Start_IT+0x1bc>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a1e      	ldr	r2, [pc, #120]	; (8006584 <HAL_DMA_Start_IT+0x230>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d101      	bne.n	8006514 <HAL_DMA_Start_IT+0x1c0>
 8006510:	2301      	movs	r3, #1
 8006512:	e000      	b.n	8006516 <HAL_DMA_Start_IT+0x1c2>
 8006514:	2300      	movs	r3, #0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d036      	beq.n	8006588 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f023 021e 	bic.w	r2, r3, #30
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f042 0216 	orr.w	r2, r2, #22
 800652c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d03e      	beq.n	80065b4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0208 	orr.w	r2, r2, #8
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	e035      	b.n	80065b4 <HAL_DMA_Start_IT+0x260>
 8006548:	40020010 	.word	0x40020010
 800654c:	40020028 	.word	0x40020028
 8006550:	40020040 	.word	0x40020040
 8006554:	40020058 	.word	0x40020058
 8006558:	40020070 	.word	0x40020070
 800655c:	40020088 	.word	0x40020088
 8006560:	400200a0 	.word	0x400200a0
 8006564:	400200b8 	.word	0x400200b8
 8006568:	40020410 	.word	0x40020410
 800656c:	40020428 	.word	0x40020428
 8006570:	40020440 	.word	0x40020440
 8006574:	40020458 	.word	0x40020458
 8006578:	40020470 	.word	0x40020470
 800657c:	40020488 	.word	0x40020488
 8006580:	400204a0 	.word	0x400204a0
 8006584:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f023 020e 	bic.w	r2, r3, #14
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 020a 	orr.w	r2, r2, #10
 800659a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d007      	beq.n	80065b4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0204 	orr.w	r2, r2, #4
 80065b2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a83      	ldr	r2, [pc, #524]	; (80067c8 <HAL_DMA_Start_IT+0x474>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d072      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a82      	ldr	r2, [pc, #520]	; (80067cc <HAL_DMA_Start_IT+0x478>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d06d      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a80      	ldr	r2, [pc, #512]	; (80067d0 <HAL_DMA_Start_IT+0x47c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d068      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a7f      	ldr	r2, [pc, #508]	; (80067d4 <HAL_DMA_Start_IT+0x480>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d063      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a7d      	ldr	r2, [pc, #500]	; (80067d8 <HAL_DMA_Start_IT+0x484>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d05e      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a7c      	ldr	r2, [pc, #496]	; (80067dc <HAL_DMA_Start_IT+0x488>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d059      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a7a      	ldr	r2, [pc, #488]	; (80067e0 <HAL_DMA_Start_IT+0x48c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d054      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a79      	ldr	r2, [pc, #484]	; (80067e4 <HAL_DMA_Start_IT+0x490>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d04f      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a77      	ldr	r2, [pc, #476]	; (80067e8 <HAL_DMA_Start_IT+0x494>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d04a      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a76      	ldr	r2, [pc, #472]	; (80067ec <HAL_DMA_Start_IT+0x498>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d045      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a74      	ldr	r2, [pc, #464]	; (80067f0 <HAL_DMA_Start_IT+0x49c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d040      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a73      	ldr	r2, [pc, #460]	; (80067f4 <HAL_DMA_Start_IT+0x4a0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d03b      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a71      	ldr	r2, [pc, #452]	; (80067f8 <HAL_DMA_Start_IT+0x4a4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d036      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a70      	ldr	r2, [pc, #448]	; (80067fc <HAL_DMA_Start_IT+0x4a8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d031      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a6e      	ldr	r2, [pc, #440]	; (8006800 <HAL_DMA_Start_IT+0x4ac>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d02c      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a6d      	ldr	r2, [pc, #436]	; (8006804 <HAL_DMA_Start_IT+0x4b0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d027      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a6b      	ldr	r2, [pc, #428]	; (8006808 <HAL_DMA_Start_IT+0x4b4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d022      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a6a      	ldr	r2, [pc, #424]	; (800680c <HAL_DMA_Start_IT+0x4b8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d01d      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a68      	ldr	r2, [pc, #416]	; (8006810 <HAL_DMA_Start_IT+0x4bc>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d018      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a67      	ldr	r2, [pc, #412]	; (8006814 <HAL_DMA_Start_IT+0x4c0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d013      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a65      	ldr	r2, [pc, #404]	; (8006818 <HAL_DMA_Start_IT+0x4c4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d00e      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a64      	ldr	r2, [pc, #400]	; (800681c <HAL_DMA_Start_IT+0x4c8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d009      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a62      	ldr	r2, [pc, #392]	; (8006820 <HAL_DMA_Start_IT+0x4cc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d004      	beq.n	80066a4 <HAL_DMA_Start_IT+0x350>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a61      	ldr	r2, [pc, #388]	; (8006824 <HAL_DMA_Start_IT+0x4d0>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d101      	bne.n	80066a8 <HAL_DMA_Start_IT+0x354>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <HAL_DMA_Start_IT+0x356>
 80066a8:	2300      	movs	r3, #0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d01a      	beq.n	80066e4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d007      	beq.n	80066cc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a37      	ldr	r2, [pc, #220]	; (80067c8 <HAL_DMA_Start_IT+0x474>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d04a      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a36      	ldr	r2, [pc, #216]	; (80067cc <HAL_DMA_Start_IT+0x478>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d045      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a34      	ldr	r2, [pc, #208]	; (80067d0 <HAL_DMA_Start_IT+0x47c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d040      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a33      	ldr	r2, [pc, #204]	; (80067d4 <HAL_DMA_Start_IT+0x480>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d03b      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a31      	ldr	r2, [pc, #196]	; (80067d8 <HAL_DMA_Start_IT+0x484>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d036      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a30      	ldr	r2, [pc, #192]	; (80067dc <HAL_DMA_Start_IT+0x488>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d031      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a2e      	ldr	r2, [pc, #184]	; (80067e0 <HAL_DMA_Start_IT+0x48c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d02c      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a2d      	ldr	r2, [pc, #180]	; (80067e4 <HAL_DMA_Start_IT+0x490>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d027      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a2b      	ldr	r2, [pc, #172]	; (80067e8 <HAL_DMA_Start_IT+0x494>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d022      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a2a      	ldr	r2, [pc, #168]	; (80067ec <HAL_DMA_Start_IT+0x498>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d01d      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a28      	ldr	r2, [pc, #160]	; (80067f0 <HAL_DMA_Start_IT+0x49c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d018      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a27      	ldr	r2, [pc, #156]	; (80067f4 <HAL_DMA_Start_IT+0x4a0>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d013      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a25      	ldr	r2, [pc, #148]	; (80067f8 <HAL_DMA_Start_IT+0x4a4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00e      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a24      	ldr	r2, [pc, #144]	; (80067fc <HAL_DMA_Start_IT+0x4a8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d009      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a22      	ldr	r2, [pc, #136]	; (8006800 <HAL_DMA_Start_IT+0x4ac>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d004      	beq.n	8006784 <HAL_DMA_Start_IT+0x430>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a21      	ldr	r2, [pc, #132]	; (8006804 <HAL_DMA_Start_IT+0x4b0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d108      	bne.n	8006796 <HAL_DMA_Start_IT+0x442>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0201 	orr.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	e012      	b.n	80067bc <HAL_DMA_Start_IT+0x468>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0201 	orr.w	r2, r2, #1
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	e009      	b.n	80067bc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40020010 	.word	0x40020010
 80067cc:	40020028 	.word	0x40020028
 80067d0:	40020040 	.word	0x40020040
 80067d4:	40020058 	.word	0x40020058
 80067d8:	40020070 	.word	0x40020070
 80067dc:	40020088 	.word	0x40020088
 80067e0:	400200a0 	.word	0x400200a0
 80067e4:	400200b8 	.word	0x400200b8
 80067e8:	40020410 	.word	0x40020410
 80067ec:	40020428 	.word	0x40020428
 80067f0:	40020440 	.word	0x40020440
 80067f4:	40020458 	.word	0x40020458
 80067f8:	40020470 	.word	0x40020470
 80067fc:	40020488 	.word	0x40020488
 8006800:	400204a0 	.word	0x400204a0
 8006804:	400204b8 	.word	0x400204b8
 8006808:	58025408 	.word	0x58025408
 800680c:	5802541c 	.word	0x5802541c
 8006810:	58025430 	.word	0x58025430
 8006814:	58025444 	.word	0x58025444
 8006818:	58025458 	.word	0x58025458
 800681c:	5802546c 	.word	0x5802546c
 8006820:	58025480 	.word	0x58025480
 8006824:	58025494 	.word	0x58025494

08006828 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006830:	f7ff f91a 	bl	8005a68 <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e2dc      	b.n	8006dfa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d008      	beq.n	800685e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2280      	movs	r2, #128	; 0x80
 8006850:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e2cd      	b.n	8006dfa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a76      	ldr	r2, [pc, #472]	; (8006a3c <HAL_DMA_Abort+0x214>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d04a      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a74      	ldr	r2, [pc, #464]	; (8006a40 <HAL_DMA_Abort+0x218>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d045      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a73      	ldr	r2, [pc, #460]	; (8006a44 <HAL_DMA_Abort+0x21c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d040      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a71      	ldr	r2, [pc, #452]	; (8006a48 <HAL_DMA_Abort+0x220>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d03b      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a70      	ldr	r2, [pc, #448]	; (8006a4c <HAL_DMA_Abort+0x224>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d036      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a6e      	ldr	r2, [pc, #440]	; (8006a50 <HAL_DMA_Abort+0x228>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d031      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a6d      	ldr	r2, [pc, #436]	; (8006a54 <HAL_DMA_Abort+0x22c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d02c      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a6b      	ldr	r2, [pc, #428]	; (8006a58 <HAL_DMA_Abort+0x230>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d027      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a6a      	ldr	r2, [pc, #424]	; (8006a5c <HAL_DMA_Abort+0x234>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d022      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a68      	ldr	r2, [pc, #416]	; (8006a60 <HAL_DMA_Abort+0x238>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d01d      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a67      	ldr	r2, [pc, #412]	; (8006a64 <HAL_DMA_Abort+0x23c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d018      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a65      	ldr	r2, [pc, #404]	; (8006a68 <HAL_DMA_Abort+0x240>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d013      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a64      	ldr	r2, [pc, #400]	; (8006a6c <HAL_DMA_Abort+0x244>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00e      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a62      	ldr	r2, [pc, #392]	; (8006a70 <HAL_DMA_Abort+0x248>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d009      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a61      	ldr	r2, [pc, #388]	; (8006a74 <HAL_DMA_Abort+0x24c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d004      	beq.n	80068fe <HAL_DMA_Abort+0xd6>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a5f      	ldr	r2, [pc, #380]	; (8006a78 <HAL_DMA_Abort+0x250>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d101      	bne.n	8006902 <HAL_DMA_Abort+0xda>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <HAL_DMA_Abort+0xdc>
 8006902:	2300      	movs	r3, #0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d013      	beq.n	8006930 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 021e 	bic.w	r2, r2, #30
 8006916:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695a      	ldr	r2, [r3, #20]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006926:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	e00a      	b.n	8006946 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 020e 	bic.w	r2, r2, #14
 800693e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a3c      	ldr	r2, [pc, #240]	; (8006a3c <HAL_DMA_Abort+0x214>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d072      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a3a      	ldr	r2, [pc, #232]	; (8006a40 <HAL_DMA_Abort+0x218>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d06d      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a39      	ldr	r2, [pc, #228]	; (8006a44 <HAL_DMA_Abort+0x21c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d068      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a37      	ldr	r2, [pc, #220]	; (8006a48 <HAL_DMA_Abort+0x220>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d063      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a36      	ldr	r2, [pc, #216]	; (8006a4c <HAL_DMA_Abort+0x224>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d05e      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a34      	ldr	r2, [pc, #208]	; (8006a50 <HAL_DMA_Abort+0x228>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d059      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a33      	ldr	r2, [pc, #204]	; (8006a54 <HAL_DMA_Abort+0x22c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d054      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a31      	ldr	r2, [pc, #196]	; (8006a58 <HAL_DMA_Abort+0x230>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d04f      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a30      	ldr	r2, [pc, #192]	; (8006a5c <HAL_DMA_Abort+0x234>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d04a      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a2e      	ldr	r2, [pc, #184]	; (8006a60 <HAL_DMA_Abort+0x238>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d045      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a2d      	ldr	r2, [pc, #180]	; (8006a64 <HAL_DMA_Abort+0x23c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d040      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a2b      	ldr	r2, [pc, #172]	; (8006a68 <HAL_DMA_Abort+0x240>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d03b      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a2a      	ldr	r2, [pc, #168]	; (8006a6c <HAL_DMA_Abort+0x244>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d036      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a28      	ldr	r2, [pc, #160]	; (8006a70 <HAL_DMA_Abort+0x248>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d031      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a27      	ldr	r2, [pc, #156]	; (8006a74 <HAL_DMA_Abort+0x24c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d02c      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a25      	ldr	r2, [pc, #148]	; (8006a78 <HAL_DMA_Abort+0x250>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d027      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a24      	ldr	r2, [pc, #144]	; (8006a7c <HAL_DMA_Abort+0x254>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d022      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a22      	ldr	r2, [pc, #136]	; (8006a80 <HAL_DMA_Abort+0x258>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d01d      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a21      	ldr	r2, [pc, #132]	; (8006a84 <HAL_DMA_Abort+0x25c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d018      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1f      	ldr	r2, [pc, #124]	; (8006a88 <HAL_DMA_Abort+0x260>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d013      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1e      	ldr	r2, [pc, #120]	; (8006a8c <HAL_DMA_Abort+0x264>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00e      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1c      	ldr	r2, [pc, #112]	; (8006a90 <HAL_DMA_Abort+0x268>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d009      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1b      	ldr	r2, [pc, #108]	; (8006a94 <HAL_DMA_Abort+0x26c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d004      	beq.n	8006a36 <HAL_DMA_Abort+0x20e>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a19      	ldr	r2, [pc, #100]	; (8006a98 <HAL_DMA_Abort+0x270>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d132      	bne.n	8006a9c <HAL_DMA_Abort+0x274>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e031      	b.n	8006a9e <HAL_DMA_Abort+0x276>
 8006a3a:	bf00      	nop
 8006a3c:	40020010 	.word	0x40020010
 8006a40:	40020028 	.word	0x40020028
 8006a44:	40020040 	.word	0x40020040
 8006a48:	40020058 	.word	0x40020058
 8006a4c:	40020070 	.word	0x40020070
 8006a50:	40020088 	.word	0x40020088
 8006a54:	400200a0 	.word	0x400200a0
 8006a58:	400200b8 	.word	0x400200b8
 8006a5c:	40020410 	.word	0x40020410
 8006a60:	40020428 	.word	0x40020428
 8006a64:	40020440 	.word	0x40020440
 8006a68:	40020458 	.word	0x40020458
 8006a6c:	40020470 	.word	0x40020470
 8006a70:	40020488 	.word	0x40020488
 8006a74:	400204a0 	.word	0x400204a0
 8006a78:	400204b8 	.word	0x400204b8
 8006a7c:	58025408 	.word	0x58025408
 8006a80:	5802541c 	.word	0x5802541c
 8006a84:	58025430 	.word	0x58025430
 8006a88:	58025444 	.word	0x58025444
 8006a8c:	58025458 	.word	0x58025458
 8006a90:	5802546c 	.word	0x5802546c
 8006a94:	58025480 	.word	0x58025480
 8006a98:	58025494 	.word	0x58025494
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d007      	beq.n	8006ab2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ab0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a6d      	ldr	r2, [pc, #436]	; (8006c6c <HAL_DMA_Abort+0x444>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d04a      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a6b      	ldr	r2, [pc, #428]	; (8006c70 <HAL_DMA_Abort+0x448>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d045      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a6a      	ldr	r2, [pc, #424]	; (8006c74 <HAL_DMA_Abort+0x44c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d040      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a68      	ldr	r2, [pc, #416]	; (8006c78 <HAL_DMA_Abort+0x450>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d03b      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a67      	ldr	r2, [pc, #412]	; (8006c7c <HAL_DMA_Abort+0x454>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d036      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a65      	ldr	r2, [pc, #404]	; (8006c80 <HAL_DMA_Abort+0x458>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d031      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a64      	ldr	r2, [pc, #400]	; (8006c84 <HAL_DMA_Abort+0x45c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d02c      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a62      	ldr	r2, [pc, #392]	; (8006c88 <HAL_DMA_Abort+0x460>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d027      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a61      	ldr	r2, [pc, #388]	; (8006c8c <HAL_DMA_Abort+0x464>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d022      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a5f      	ldr	r2, [pc, #380]	; (8006c90 <HAL_DMA_Abort+0x468>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d01d      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a5e      	ldr	r2, [pc, #376]	; (8006c94 <HAL_DMA_Abort+0x46c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d018      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a5c      	ldr	r2, [pc, #368]	; (8006c98 <HAL_DMA_Abort+0x470>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d013      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a5b      	ldr	r2, [pc, #364]	; (8006c9c <HAL_DMA_Abort+0x474>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00e      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a59      	ldr	r2, [pc, #356]	; (8006ca0 <HAL_DMA_Abort+0x478>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d009      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a58      	ldr	r2, [pc, #352]	; (8006ca4 <HAL_DMA_Abort+0x47c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_DMA_Abort+0x32a>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a56      	ldr	r2, [pc, #344]	; (8006ca8 <HAL_DMA_Abort+0x480>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d108      	bne.n	8006b64 <HAL_DMA_Abort+0x33c>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0201 	bic.w	r2, r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e007      	b.n	8006b74 <HAL_DMA_Abort+0x34c>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0201 	bic.w	r2, r2, #1
 8006b72:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006b74:	e013      	b.n	8006b9e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b76:	f7fe ff77 	bl	8005a68 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b05      	cmp	r3, #5
 8006b82:	d90c      	bls.n	8006b9e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e12d      	b.n	8006dfa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e5      	bne.n	8006b76 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a2f      	ldr	r2, [pc, #188]	; (8006c6c <HAL_DMA_Abort+0x444>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d04a      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a2d      	ldr	r2, [pc, #180]	; (8006c70 <HAL_DMA_Abort+0x448>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d045      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a2c      	ldr	r2, [pc, #176]	; (8006c74 <HAL_DMA_Abort+0x44c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d040      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a2a      	ldr	r2, [pc, #168]	; (8006c78 <HAL_DMA_Abort+0x450>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d03b      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a29      	ldr	r2, [pc, #164]	; (8006c7c <HAL_DMA_Abort+0x454>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d036      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a27      	ldr	r2, [pc, #156]	; (8006c80 <HAL_DMA_Abort+0x458>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d031      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a26      	ldr	r2, [pc, #152]	; (8006c84 <HAL_DMA_Abort+0x45c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d02c      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a24      	ldr	r2, [pc, #144]	; (8006c88 <HAL_DMA_Abort+0x460>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d027      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a23      	ldr	r2, [pc, #140]	; (8006c8c <HAL_DMA_Abort+0x464>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d022      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a21      	ldr	r2, [pc, #132]	; (8006c90 <HAL_DMA_Abort+0x468>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d01d      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a20      	ldr	r2, [pc, #128]	; (8006c94 <HAL_DMA_Abort+0x46c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d018      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a1e      	ldr	r2, [pc, #120]	; (8006c98 <HAL_DMA_Abort+0x470>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d013      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a1d      	ldr	r2, [pc, #116]	; (8006c9c <HAL_DMA_Abort+0x474>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00e      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <HAL_DMA_Abort+0x478>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d009      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ca4 <HAL_DMA_Abort+0x47c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d004      	beq.n	8006c4a <HAL_DMA_Abort+0x422>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a18      	ldr	r2, [pc, #96]	; (8006ca8 <HAL_DMA_Abort+0x480>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d101      	bne.n	8006c4e <HAL_DMA_Abort+0x426>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <HAL_DMA_Abort+0x428>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d02b      	beq.n	8006cac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c58:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5e:	f003 031f 	and.w	r3, r3, #31
 8006c62:	223f      	movs	r2, #63	; 0x3f
 8006c64:	409a      	lsls	r2, r3
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	609a      	str	r2, [r3, #8]
 8006c6a:	e02a      	b.n	8006cc2 <HAL_DMA_Abort+0x49a>
 8006c6c:	40020010 	.word	0x40020010
 8006c70:	40020028 	.word	0x40020028
 8006c74:	40020040 	.word	0x40020040
 8006c78:	40020058 	.word	0x40020058
 8006c7c:	40020070 	.word	0x40020070
 8006c80:	40020088 	.word	0x40020088
 8006c84:	400200a0 	.word	0x400200a0
 8006c88:	400200b8 	.word	0x400200b8
 8006c8c:	40020410 	.word	0x40020410
 8006c90:	40020428 	.word	0x40020428
 8006c94:	40020440 	.word	0x40020440
 8006c98:	40020458 	.word	0x40020458
 8006c9c:	40020470 	.word	0x40020470
 8006ca0:	40020488 	.word	0x40020488
 8006ca4:	400204a0 	.word	0x400204a0
 8006ca8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	2201      	movs	r2, #1
 8006cbc:	409a      	lsls	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a4f      	ldr	r2, [pc, #316]	; (8006e04 <HAL_DMA_Abort+0x5dc>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d072      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a4d      	ldr	r2, [pc, #308]	; (8006e08 <HAL_DMA_Abort+0x5e0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d06d      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a4c      	ldr	r2, [pc, #304]	; (8006e0c <HAL_DMA_Abort+0x5e4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d068      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a4a      	ldr	r2, [pc, #296]	; (8006e10 <HAL_DMA_Abort+0x5e8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d063      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a49      	ldr	r2, [pc, #292]	; (8006e14 <HAL_DMA_Abort+0x5ec>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d05e      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a47      	ldr	r2, [pc, #284]	; (8006e18 <HAL_DMA_Abort+0x5f0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d059      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a46      	ldr	r2, [pc, #280]	; (8006e1c <HAL_DMA_Abort+0x5f4>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d054      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a44      	ldr	r2, [pc, #272]	; (8006e20 <HAL_DMA_Abort+0x5f8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d04f      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a43      	ldr	r2, [pc, #268]	; (8006e24 <HAL_DMA_Abort+0x5fc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d04a      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a41      	ldr	r2, [pc, #260]	; (8006e28 <HAL_DMA_Abort+0x600>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d045      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a40      	ldr	r2, [pc, #256]	; (8006e2c <HAL_DMA_Abort+0x604>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d040      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a3e      	ldr	r2, [pc, #248]	; (8006e30 <HAL_DMA_Abort+0x608>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d03b      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a3d      	ldr	r2, [pc, #244]	; (8006e34 <HAL_DMA_Abort+0x60c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d036      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a3b      	ldr	r2, [pc, #236]	; (8006e38 <HAL_DMA_Abort+0x610>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d031      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a3a      	ldr	r2, [pc, #232]	; (8006e3c <HAL_DMA_Abort+0x614>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d02c      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a38      	ldr	r2, [pc, #224]	; (8006e40 <HAL_DMA_Abort+0x618>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d027      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a37      	ldr	r2, [pc, #220]	; (8006e44 <HAL_DMA_Abort+0x61c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d022      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a35      	ldr	r2, [pc, #212]	; (8006e48 <HAL_DMA_Abort+0x620>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d01d      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a34      	ldr	r2, [pc, #208]	; (8006e4c <HAL_DMA_Abort+0x624>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d018      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a32      	ldr	r2, [pc, #200]	; (8006e50 <HAL_DMA_Abort+0x628>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d013      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a31      	ldr	r2, [pc, #196]	; (8006e54 <HAL_DMA_Abort+0x62c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d00e      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a2f      	ldr	r2, [pc, #188]	; (8006e58 <HAL_DMA_Abort+0x630>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d009      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a2e      	ldr	r2, [pc, #184]	; (8006e5c <HAL_DMA_Abort+0x634>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d004      	beq.n	8006db2 <HAL_DMA_Abort+0x58a>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a2c      	ldr	r2, [pc, #176]	; (8006e60 <HAL_DMA_Abort+0x638>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d101      	bne.n	8006db6 <HAL_DMA_Abort+0x58e>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <HAL_DMA_Abort+0x590>
 8006db6:	2300      	movs	r3, #0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d015      	beq.n	8006de8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006dc4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00c      	beq.n	8006de8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ddc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006de6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	40020010 	.word	0x40020010
 8006e08:	40020028 	.word	0x40020028
 8006e0c:	40020040 	.word	0x40020040
 8006e10:	40020058 	.word	0x40020058
 8006e14:	40020070 	.word	0x40020070
 8006e18:	40020088 	.word	0x40020088
 8006e1c:	400200a0 	.word	0x400200a0
 8006e20:	400200b8 	.word	0x400200b8
 8006e24:	40020410 	.word	0x40020410
 8006e28:	40020428 	.word	0x40020428
 8006e2c:	40020440 	.word	0x40020440
 8006e30:	40020458 	.word	0x40020458
 8006e34:	40020470 	.word	0x40020470
 8006e38:	40020488 	.word	0x40020488
 8006e3c:	400204a0 	.word	0x400204a0
 8006e40:	400204b8 	.word	0x400204b8
 8006e44:	58025408 	.word	0x58025408
 8006e48:	5802541c 	.word	0x5802541c
 8006e4c:	58025430 	.word	0x58025430
 8006e50:	58025444 	.word	0x58025444
 8006e54:	58025458 	.word	0x58025458
 8006e58:	5802546c 	.word	0x5802546c
 8006e5c:	58025480 	.word	0x58025480
 8006e60:	58025494 	.word	0x58025494

08006e64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e237      	b.n	80072e6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d004      	beq.n	8006e8c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2280      	movs	r2, #128	; 0x80
 8006e86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e22c      	b.n	80072e6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a5c      	ldr	r2, [pc, #368]	; (8007004 <HAL_DMA_Abort_IT+0x1a0>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d04a      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a5b      	ldr	r2, [pc, #364]	; (8007008 <HAL_DMA_Abort_IT+0x1a4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d045      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a59      	ldr	r2, [pc, #356]	; (800700c <HAL_DMA_Abort_IT+0x1a8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d040      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a58      	ldr	r2, [pc, #352]	; (8007010 <HAL_DMA_Abort_IT+0x1ac>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d03b      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a56      	ldr	r2, [pc, #344]	; (8007014 <HAL_DMA_Abort_IT+0x1b0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d036      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a55      	ldr	r2, [pc, #340]	; (8007018 <HAL_DMA_Abort_IT+0x1b4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d031      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a53      	ldr	r2, [pc, #332]	; (800701c <HAL_DMA_Abort_IT+0x1b8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d02c      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a52      	ldr	r2, [pc, #328]	; (8007020 <HAL_DMA_Abort_IT+0x1bc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d027      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a50      	ldr	r2, [pc, #320]	; (8007024 <HAL_DMA_Abort_IT+0x1c0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d022      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a4f      	ldr	r2, [pc, #316]	; (8007028 <HAL_DMA_Abort_IT+0x1c4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d01d      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a4d      	ldr	r2, [pc, #308]	; (800702c <HAL_DMA_Abort_IT+0x1c8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d018      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a4c      	ldr	r2, [pc, #304]	; (8007030 <HAL_DMA_Abort_IT+0x1cc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d013      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a4a      	ldr	r2, [pc, #296]	; (8007034 <HAL_DMA_Abort_IT+0x1d0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d00e      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a49      	ldr	r2, [pc, #292]	; (8007038 <HAL_DMA_Abort_IT+0x1d4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d009      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a47      	ldr	r2, [pc, #284]	; (800703c <HAL_DMA_Abort_IT+0x1d8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d004      	beq.n	8006f2c <HAL_DMA_Abort_IT+0xc8>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a46      	ldr	r2, [pc, #280]	; (8007040 <HAL_DMA_Abort_IT+0x1dc>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d101      	bne.n	8006f30 <HAL_DMA_Abort_IT+0xcc>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <HAL_DMA_Abort_IT+0xce>
 8006f30:	2300      	movs	r3, #0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8086 	beq.w	8007044 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2204      	movs	r2, #4
 8006f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a2f      	ldr	r2, [pc, #188]	; (8007004 <HAL_DMA_Abort_IT+0x1a0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d04a      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a2e      	ldr	r2, [pc, #184]	; (8007008 <HAL_DMA_Abort_IT+0x1a4>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d045      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a2c      	ldr	r2, [pc, #176]	; (800700c <HAL_DMA_Abort_IT+0x1a8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d040      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a2b      	ldr	r2, [pc, #172]	; (8007010 <HAL_DMA_Abort_IT+0x1ac>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d03b      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a29      	ldr	r2, [pc, #164]	; (8007014 <HAL_DMA_Abort_IT+0x1b0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d036      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a28      	ldr	r2, [pc, #160]	; (8007018 <HAL_DMA_Abort_IT+0x1b4>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d031      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a26      	ldr	r2, [pc, #152]	; (800701c <HAL_DMA_Abort_IT+0x1b8>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d02c      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a25      	ldr	r2, [pc, #148]	; (8007020 <HAL_DMA_Abort_IT+0x1bc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d027      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a23      	ldr	r2, [pc, #140]	; (8007024 <HAL_DMA_Abort_IT+0x1c0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d022      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a22      	ldr	r2, [pc, #136]	; (8007028 <HAL_DMA_Abort_IT+0x1c4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d01d      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a20      	ldr	r2, [pc, #128]	; (800702c <HAL_DMA_Abort_IT+0x1c8>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d018      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1f      	ldr	r2, [pc, #124]	; (8007030 <HAL_DMA_Abort_IT+0x1cc>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d013      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1d      	ldr	r2, [pc, #116]	; (8007034 <HAL_DMA_Abort_IT+0x1d0>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00e      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1c      	ldr	r2, [pc, #112]	; (8007038 <HAL_DMA_Abort_IT+0x1d4>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d009      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1a      	ldr	r2, [pc, #104]	; (800703c <HAL_DMA_Abort_IT+0x1d8>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d004      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x17c>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a19      	ldr	r2, [pc, #100]	; (8007040 <HAL_DMA_Abort_IT+0x1dc>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d108      	bne.n	8006ff2 <HAL_DMA_Abort_IT+0x18e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 0201 	bic.w	r2, r2, #1
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	e178      	b.n	80072e4 <HAL_DMA_Abort_IT+0x480>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0201 	bic.w	r2, r2, #1
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	e16f      	b.n	80072e4 <HAL_DMA_Abort_IT+0x480>
 8007004:	40020010 	.word	0x40020010
 8007008:	40020028 	.word	0x40020028
 800700c:	40020040 	.word	0x40020040
 8007010:	40020058 	.word	0x40020058
 8007014:	40020070 	.word	0x40020070
 8007018:	40020088 	.word	0x40020088
 800701c:	400200a0 	.word	0x400200a0
 8007020:	400200b8 	.word	0x400200b8
 8007024:	40020410 	.word	0x40020410
 8007028:	40020428 	.word	0x40020428
 800702c:	40020440 	.word	0x40020440
 8007030:	40020458 	.word	0x40020458
 8007034:	40020470 	.word	0x40020470
 8007038:	40020488 	.word	0x40020488
 800703c:	400204a0 	.word	0x400204a0
 8007040:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 020e 	bic.w	r2, r2, #14
 8007052:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a6c      	ldr	r2, [pc, #432]	; (800720c <HAL_DMA_Abort_IT+0x3a8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d04a      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a6b      	ldr	r2, [pc, #428]	; (8007210 <HAL_DMA_Abort_IT+0x3ac>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d045      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a69      	ldr	r2, [pc, #420]	; (8007214 <HAL_DMA_Abort_IT+0x3b0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d040      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a68      	ldr	r2, [pc, #416]	; (8007218 <HAL_DMA_Abort_IT+0x3b4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d03b      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a66      	ldr	r2, [pc, #408]	; (800721c <HAL_DMA_Abort_IT+0x3b8>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d036      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a65      	ldr	r2, [pc, #404]	; (8007220 <HAL_DMA_Abort_IT+0x3bc>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d031      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a63      	ldr	r2, [pc, #396]	; (8007224 <HAL_DMA_Abort_IT+0x3c0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d02c      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a62      	ldr	r2, [pc, #392]	; (8007228 <HAL_DMA_Abort_IT+0x3c4>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d027      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a60      	ldr	r2, [pc, #384]	; (800722c <HAL_DMA_Abort_IT+0x3c8>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d022      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a5f      	ldr	r2, [pc, #380]	; (8007230 <HAL_DMA_Abort_IT+0x3cc>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d01d      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a5d      	ldr	r2, [pc, #372]	; (8007234 <HAL_DMA_Abort_IT+0x3d0>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d018      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a5c      	ldr	r2, [pc, #368]	; (8007238 <HAL_DMA_Abort_IT+0x3d4>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a5a      	ldr	r2, [pc, #360]	; (800723c <HAL_DMA_Abort_IT+0x3d8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00e      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a59      	ldr	r2, [pc, #356]	; (8007240 <HAL_DMA_Abort_IT+0x3dc>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d009      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a57      	ldr	r2, [pc, #348]	; (8007244 <HAL_DMA_Abort_IT+0x3e0>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d004      	beq.n	80070f4 <HAL_DMA_Abort_IT+0x290>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a56      	ldr	r2, [pc, #344]	; (8007248 <HAL_DMA_Abort_IT+0x3e4>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d108      	bne.n	8007106 <HAL_DMA_Abort_IT+0x2a2>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0201 	bic.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	e007      	b.n	8007116 <HAL_DMA_Abort_IT+0x2b2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0201 	bic.w	r2, r2, #1
 8007114:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a3c      	ldr	r2, [pc, #240]	; (800720c <HAL_DMA_Abort_IT+0x3a8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d072      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a3a      	ldr	r2, [pc, #232]	; (8007210 <HAL_DMA_Abort_IT+0x3ac>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d06d      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a39      	ldr	r2, [pc, #228]	; (8007214 <HAL_DMA_Abort_IT+0x3b0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d068      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a37      	ldr	r2, [pc, #220]	; (8007218 <HAL_DMA_Abort_IT+0x3b4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d063      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a36      	ldr	r2, [pc, #216]	; (800721c <HAL_DMA_Abort_IT+0x3b8>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d05e      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a34      	ldr	r2, [pc, #208]	; (8007220 <HAL_DMA_Abort_IT+0x3bc>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d059      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a33      	ldr	r2, [pc, #204]	; (8007224 <HAL_DMA_Abort_IT+0x3c0>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d054      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a31      	ldr	r2, [pc, #196]	; (8007228 <HAL_DMA_Abort_IT+0x3c4>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d04f      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a30      	ldr	r2, [pc, #192]	; (800722c <HAL_DMA_Abort_IT+0x3c8>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d04a      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a2e      	ldr	r2, [pc, #184]	; (8007230 <HAL_DMA_Abort_IT+0x3cc>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d045      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a2d      	ldr	r2, [pc, #180]	; (8007234 <HAL_DMA_Abort_IT+0x3d0>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d040      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a2b      	ldr	r2, [pc, #172]	; (8007238 <HAL_DMA_Abort_IT+0x3d4>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d03b      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a2a      	ldr	r2, [pc, #168]	; (800723c <HAL_DMA_Abort_IT+0x3d8>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d036      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a28      	ldr	r2, [pc, #160]	; (8007240 <HAL_DMA_Abort_IT+0x3dc>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d031      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a27      	ldr	r2, [pc, #156]	; (8007244 <HAL_DMA_Abort_IT+0x3e0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d02c      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a25      	ldr	r2, [pc, #148]	; (8007248 <HAL_DMA_Abort_IT+0x3e4>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d027      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a24      	ldr	r2, [pc, #144]	; (800724c <HAL_DMA_Abort_IT+0x3e8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d022      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a22      	ldr	r2, [pc, #136]	; (8007250 <HAL_DMA_Abort_IT+0x3ec>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d01d      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a21      	ldr	r2, [pc, #132]	; (8007254 <HAL_DMA_Abort_IT+0x3f0>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d018      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a1f      	ldr	r2, [pc, #124]	; (8007258 <HAL_DMA_Abort_IT+0x3f4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d013      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a1e      	ldr	r2, [pc, #120]	; (800725c <HAL_DMA_Abort_IT+0x3f8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00e      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a1c      	ldr	r2, [pc, #112]	; (8007260 <HAL_DMA_Abort_IT+0x3fc>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d009      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a1b      	ldr	r2, [pc, #108]	; (8007264 <HAL_DMA_Abort_IT+0x400>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d004      	beq.n	8007206 <HAL_DMA_Abort_IT+0x3a2>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a19      	ldr	r2, [pc, #100]	; (8007268 <HAL_DMA_Abort_IT+0x404>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d132      	bne.n	800726c <HAL_DMA_Abort_IT+0x408>
 8007206:	2301      	movs	r3, #1
 8007208:	e031      	b.n	800726e <HAL_DMA_Abort_IT+0x40a>
 800720a:	bf00      	nop
 800720c:	40020010 	.word	0x40020010
 8007210:	40020028 	.word	0x40020028
 8007214:	40020040 	.word	0x40020040
 8007218:	40020058 	.word	0x40020058
 800721c:	40020070 	.word	0x40020070
 8007220:	40020088 	.word	0x40020088
 8007224:	400200a0 	.word	0x400200a0
 8007228:	400200b8 	.word	0x400200b8
 800722c:	40020410 	.word	0x40020410
 8007230:	40020428 	.word	0x40020428
 8007234:	40020440 	.word	0x40020440
 8007238:	40020458 	.word	0x40020458
 800723c:	40020470 	.word	0x40020470
 8007240:	40020488 	.word	0x40020488
 8007244:	400204a0 	.word	0x400204a0
 8007248:	400204b8 	.word	0x400204b8
 800724c:	58025408 	.word	0x58025408
 8007250:	5802541c 	.word	0x5802541c
 8007254:	58025430 	.word	0x58025430
 8007258:	58025444 	.word	0x58025444
 800725c:	58025458 	.word	0x58025458
 8007260:	5802546c 	.word	0x5802546c
 8007264:	58025480 	.word	0x58025480
 8007268:	58025494 	.word	0x58025494
 800726c:	2300      	movs	r3, #0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d028      	beq.n	80072c4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800727c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007280:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007286:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728c:	f003 031f 	and.w	r3, r3, #31
 8007290:	2201      	movs	r2, #1
 8007292:	409a      	lsls	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072a0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00c      	beq.n	80072c4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072b8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072c2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop

080072f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08a      	sub	sp, #40	; 0x28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80072fc:	4b67      	ldr	r3, [pc, #412]	; (800749c <HAL_DMA_IRQHandler+0x1ac>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a67      	ldr	r2, [pc, #412]	; (80074a0 <HAL_DMA_IRQHandler+0x1b0>)
 8007302:	fba2 2303 	umull	r2, r3, r2, r3
 8007306:	0a9b      	lsrs	r3, r3, #10
 8007308:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800730e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007314:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a5f      	ldr	r2, [pc, #380]	; (80074a4 <HAL_DMA_IRQHandler+0x1b4>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d04a      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a5d      	ldr	r2, [pc, #372]	; (80074a8 <HAL_DMA_IRQHandler+0x1b8>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d045      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a5c      	ldr	r2, [pc, #368]	; (80074ac <HAL_DMA_IRQHandler+0x1bc>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d040      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a5a      	ldr	r2, [pc, #360]	; (80074b0 <HAL_DMA_IRQHandler+0x1c0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d03b      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a59      	ldr	r2, [pc, #356]	; (80074b4 <HAL_DMA_IRQHandler+0x1c4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d036      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a57      	ldr	r2, [pc, #348]	; (80074b8 <HAL_DMA_IRQHandler+0x1c8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d031      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a56      	ldr	r2, [pc, #344]	; (80074bc <HAL_DMA_IRQHandler+0x1cc>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d02c      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a54      	ldr	r2, [pc, #336]	; (80074c0 <HAL_DMA_IRQHandler+0x1d0>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d027      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a53      	ldr	r2, [pc, #332]	; (80074c4 <HAL_DMA_IRQHandler+0x1d4>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d022      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a51      	ldr	r2, [pc, #324]	; (80074c8 <HAL_DMA_IRQHandler+0x1d8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d01d      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a50      	ldr	r2, [pc, #320]	; (80074cc <HAL_DMA_IRQHandler+0x1dc>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d018      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a4e      	ldr	r2, [pc, #312]	; (80074d0 <HAL_DMA_IRQHandler+0x1e0>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d013      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a4d      	ldr	r2, [pc, #308]	; (80074d4 <HAL_DMA_IRQHandler+0x1e4>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d00e      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a4b      	ldr	r2, [pc, #300]	; (80074d8 <HAL_DMA_IRQHandler+0x1e8>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d009      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a4a      	ldr	r2, [pc, #296]	; (80074dc <HAL_DMA_IRQHandler+0x1ec>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d004      	beq.n	80073c2 <HAL_DMA_IRQHandler+0xd2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a48      	ldr	r2, [pc, #288]	; (80074e0 <HAL_DMA_IRQHandler+0x1f0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d101      	bne.n	80073c6 <HAL_DMA_IRQHandler+0xd6>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <HAL_DMA_IRQHandler+0xd8>
 80073c6:	2300      	movs	r3, #0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 842b 	beq.w	8007c24 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	2208      	movs	r2, #8
 80073d8:	409a      	lsls	r2, r3
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	4013      	ands	r3, r2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 80a2 	beq.w	8007528 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a2e      	ldr	r2, [pc, #184]	; (80074a4 <HAL_DMA_IRQHandler+0x1b4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d04a      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a2d      	ldr	r2, [pc, #180]	; (80074a8 <HAL_DMA_IRQHandler+0x1b8>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d045      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a2b      	ldr	r2, [pc, #172]	; (80074ac <HAL_DMA_IRQHandler+0x1bc>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d040      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a2a      	ldr	r2, [pc, #168]	; (80074b0 <HAL_DMA_IRQHandler+0x1c0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d03b      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a28      	ldr	r2, [pc, #160]	; (80074b4 <HAL_DMA_IRQHandler+0x1c4>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d036      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a27      	ldr	r2, [pc, #156]	; (80074b8 <HAL_DMA_IRQHandler+0x1c8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d031      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a25      	ldr	r2, [pc, #148]	; (80074bc <HAL_DMA_IRQHandler+0x1cc>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d02c      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a24      	ldr	r2, [pc, #144]	; (80074c0 <HAL_DMA_IRQHandler+0x1d0>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d027      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <HAL_DMA_IRQHandler+0x1d4>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d022      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a21      	ldr	r2, [pc, #132]	; (80074c8 <HAL_DMA_IRQHandler+0x1d8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d01d      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1f      	ldr	r2, [pc, #124]	; (80074cc <HAL_DMA_IRQHandler+0x1dc>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d018      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a1e      	ldr	r2, [pc, #120]	; (80074d0 <HAL_DMA_IRQHandler+0x1e0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d013      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a1c      	ldr	r2, [pc, #112]	; (80074d4 <HAL_DMA_IRQHandler+0x1e4>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00e      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a1b      	ldr	r2, [pc, #108]	; (80074d8 <HAL_DMA_IRQHandler+0x1e8>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d009      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a19      	ldr	r2, [pc, #100]	; (80074dc <HAL_DMA_IRQHandler+0x1ec>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d004      	beq.n	8007484 <HAL_DMA_IRQHandler+0x194>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a18      	ldr	r2, [pc, #96]	; (80074e0 <HAL_DMA_IRQHandler+0x1f0>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d12f      	bne.n	80074e4 <HAL_DMA_IRQHandler+0x1f4>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0304 	and.w	r3, r3, #4
 800748e:	2b00      	cmp	r3, #0
 8007490:	bf14      	ite	ne
 8007492:	2301      	movne	r3, #1
 8007494:	2300      	moveq	r3, #0
 8007496:	b2db      	uxtb	r3, r3
 8007498:	e02e      	b.n	80074f8 <HAL_DMA_IRQHandler+0x208>
 800749a:	bf00      	nop
 800749c:	24000000 	.word	0x24000000
 80074a0:	1b4e81b5 	.word	0x1b4e81b5
 80074a4:	40020010 	.word	0x40020010
 80074a8:	40020028 	.word	0x40020028
 80074ac:	40020040 	.word	0x40020040
 80074b0:	40020058 	.word	0x40020058
 80074b4:	40020070 	.word	0x40020070
 80074b8:	40020088 	.word	0x40020088
 80074bc:	400200a0 	.word	0x400200a0
 80074c0:	400200b8 	.word	0x400200b8
 80074c4:	40020410 	.word	0x40020410
 80074c8:	40020428 	.word	0x40020428
 80074cc:	40020440 	.word	0x40020440
 80074d0:	40020458 	.word	0x40020458
 80074d4:	40020470 	.word	0x40020470
 80074d8:	40020488 	.word	0x40020488
 80074dc:	400204a0 	.word	0x400204a0
 80074e0:	400204b8 	.word	0x400204b8
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0308 	and.w	r3, r3, #8
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	bf14      	ite	ne
 80074f2:	2301      	movne	r3, #1
 80074f4:	2300      	moveq	r3, #0
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d015      	beq.n	8007528 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0204 	bic.w	r2, r2, #4
 800750a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007510:	f003 031f 	and.w	r3, r3, #31
 8007514:	2208      	movs	r2, #8
 8007516:	409a      	lsls	r2, r3
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007520:	f043 0201 	orr.w	r2, r3, #1
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800752c:	f003 031f 	and.w	r3, r3, #31
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	fa22 f303 	lsr.w	r3, r2, r3
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d06e      	beq.n	800761c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a69      	ldr	r2, [pc, #420]	; (80076e8 <HAL_DMA_IRQHandler+0x3f8>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d04a      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a67      	ldr	r2, [pc, #412]	; (80076ec <HAL_DMA_IRQHandler+0x3fc>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d045      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a66      	ldr	r2, [pc, #408]	; (80076f0 <HAL_DMA_IRQHandler+0x400>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d040      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a64      	ldr	r2, [pc, #400]	; (80076f4 <HAL_DMA_IRQHandler+0x404>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d03b      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a63      	ldr	r2, [pc, #396]	; (80076f8 <HAL_DMA_IRQHandler+0x408>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d036      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a61      	ldr	r2, [pc, #388]	; (80076fc <HAL_DMA_IRQHandler+0x40c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d031      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a60      	ldr	r2, [pc, #384]	; (8007700 <HAL_DMA_IRQHandler+0x410>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d02c      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a5e      	ldr	r2, [pc, #376]	; (8007704 <HAL_DMA_IRQHandler+0x414>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d027      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a5d      	ldr	r2, [pc, #372]	; (8007708 <HAL_DMA_IRQHandler+0x418>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d022      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a5b      	ldr	r2, [pc, #364]	; (800770c <HAL_DMA_IRQHandler+0x41c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d01d      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a5a      	ldr	r2, [pc, #360]	; (8007710 <HAL_DMA_IRQHandler+0x420>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d018      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a58      	ldr	r2, [pc, #352]	; (8007714 <HAL_DMA_IRQHandler+0x424>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a57      	ldr	r2, [pc, #348]	; (8007718 <HAL_DMA_IRQHandler+0x428>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00e      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a55      	ldr	r2, [pc, #340]	; (800771c <HAL_DMA_IRQHandler+0x42c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d009      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a54      	ldr	r2, [pc, #336]	; (8007720 <HAL_DMA_IRQHandler+0x430>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d004      	beq.n	80075de <HAL_DMA_IRQHandler+0x2ee>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a52      	ldr	r2, [pc, #328]	; (8007724 <HAL_DMA_IRQHandler+0x434>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d10a      	bne.n	80075f4 <HAL_DMA_IRQHandler+0x304>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	bf14      	ite	ne
 80075ec:	2301      	movne	r3, #1
 80075ee:	2300      	moveq	r3, #0
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	e003      	b.n	80075fc <HAL_DMA_IRQHandler+0x30c>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2300      	movs	r3, #0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00d      	beq.n	800761c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007604:	f003 031f 	and.w	r3, r3, #31
 8007608:	2201      	movs	r2, #1
 800760a:	409a      	lsls	r2, r3
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007614:	f043 0202 	orr.w	r2, r3, #2
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007620:	f003 031f 	and.w	r3, r3, #31
 8007624:	2204      	movs	r2, #4
 8007626:	409a      	lsls	r2, r3
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	4013      	ands	r3, r2
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 808f 	beq.w	8007750 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a2c      	ldr	r2, [pc, #176]	; (80076e8 <HAL_DMA_IRQHandler+0x3f8>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d04a      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a2a      	ldr	r2, [pc, #168]	; (80076ec <HAL_DMA_IRQHandler+0x3fc>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d045      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a29      	ldr	r2, [pc, #164]	; (80076f0 <HAL_DMA_IRQHandler+0x400>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d040      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a27      	ldr	r2, [pc, #156]	; (80076f4 <HAL_DMA_IRQHandler+0x404>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d03b      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a26      	ldr	r2, [pc, #152]	; (80076f8 <HAL_DMA_IRQHandler+0x408>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d036      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a24      	ldr	r2, [pc, #144]	; (80076fc <HAL_DMA_IRQHandler+0x40c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d031      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a23      	ldr	r2, [pc, #140]	; (8007700 <HAL_DMA_IRQHandler+0x410>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d02c      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a21      	ldr	r2, [pc, #132]	; (8007704 <HAL_DMA_IRQHandler+0x414>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d027      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a20      	ldr	r2, [pc, #128]	; (8007708 <HAL_DMA_IRQHandler+0x418>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d022      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a1e      	ldr	r2, [pc, #120]	; (800770c <HAL_DMA_IRQHandler+0x41c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d01d      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a1d      	ldr	r2, [pc, #116]	; (8007710 <HAL_DMA_IRQHandler+0x420>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d018      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a1b      	ldr	r2, [pc, #108]	; (8007714 <HAL_DMA_IRQHandler+0x424>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d013      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1a      	ldr	r2, [pc, #104]	; (8007718 <HAL_DMA_IRQHandler+0x428>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00e      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a18      	ldr	r2, [pc, #96]	; (800771c <HAL_DMA_IRQHandler+0x42c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d009      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a17      	ldr	r2, [pc, #92]	; (8007720 <HAL_DMA_IRQHandler+0x430>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d004      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x3e2>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a15      	ldr	r2, [pc, #84]	; (8007724 <HAL_DMA_IRQHandler+0x434>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d12a      	bne.n	8007728 <HAL_DMA_IRQHandler+0x438>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0302 	and.w	r3, r3, #2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	bf14      	ite	ne
 80076e0:	2301      	movne	r3, #1
 80076e2:	2300      	moveq	r3, #0
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	e023      	b.n	8007730 <HAL_DMA_IRQHandler+0x440>
 80076e8:	40020010 	.word	0x40020010
 80076ec:	40020028 	.word	0x40020028
 80076f0:	40020040 	.word	0x40020040
 80076f4:	40020058 	.word	0x40020058
 80076f8:	40020070 	.word	0x40020070
 80076fc:	40020088 	.word	0x40020088
 8007700:	400200a0 	.word	0x400200a0
 8007704:	400200b8 	.word	0x400200b8
 8007708:	40020410 	.word	0x40020410
 800770c:	40020428 	.word	0x40020428
 8007710:	40020440 	.word	0x40020440
 8007714:	40020458 	.word	0x40020458
 8007718:	40020470 	.word	0x40020470
 800771c:	40020488 	.word	0x40020488
 8007720:	400204a0 	.word	0x400204a0
 8007724:	400204b8 	.word	0x400204b8
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2300      	movs	r3, #0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00d      	beq.n	8007750 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007738:	f003 031f 	and.w	r3, r3, #31
 800773c:	2204      	movs	r2, #4
 800773e:	409a      	lsls	r2, r3
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007748:	f043 0204 	orr.w	r2, r3, #4
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007754:	f003 031f 	and.w	r3, r3, #31
 8007758:	2210      	movs	r2, #16
 800775a:	409a      	lsls	r2, r3
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	4013      	ands	r3, r2
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 80a6 	beq.w	80078b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a85      	ldr	r2, [pc, #532]	; (8007980 <HAL_DMA_IRQHandler+0x690>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d04a      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a83      	ldr	r2, [pc, #524]	; (8007984 <HAL_DMA_IRQHandler+0x694>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d045      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a82      	ldr	r2, [pc, #520]	; (8007988 <HAL_DMA_IRQHandler+0x698>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d040      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a80      	ldr	r2, [pc, #512]	; (800798c <HAL_DMA_IRQHandler+0x69c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d03b      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a7f      	ldr	r2, [pc, #508]	; (8007990 <HAL_DMA_IRQHandler+0x6a0>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d036      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a7d      	ldr	r2, [pc, #500]	; (8007994 <HAL_DMA_IRQHandler+0x6a4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d031      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a7c      	ldr	r2, [pc, #496]	; (8007998 <HAL_DMA_IRQHandler+0x6a8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d02c      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a7a      	ldr	r2, [pc, #488]	; (800799c <HAL_DMA_IRQHandler+0x6ac>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d027      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a79      	ldr	r2, [pc, #484]	; (80079a0 <HAL_DMA_IRQHandler+0x6b0>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d022      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a77      	ldr	r2, [pc, #476]	; (80079a4 <HAL_DMA_IRQHandler+0x6b4>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d01d      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a76      	ldr	r2, [pc, #472]	; (80079a8 <HAL_DMA_IRQHandler+0x6b8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d018      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a74      	ldr	r2, [pc, #464]	; (80079ac <HAL_DMA_IRQHandler+0x6bc>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d013      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a73      	ldr	r2, [pc, #460]	; (80079b0 <HAL_DMA_IRQHandler+0x6c0>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d00e      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a71      	ldr	r2, [pc, #452]	; (80079b4 <HAL_DMA_IRQHandler+0x6c4>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d009      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a70      	ldr	r2, [pc, #448]	; (80079b8 <HAL_DMA_IRQHandler+0x6c8>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d004      	beq.n	8007806 <HAL_DMA_IRQHandler+0x516>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a6e      	ldr	r2, [pc, #440]	; (80079bc <HAL_DMA_IRQHandler+0x6cc>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d10a      	bne.n	800781c <HAL_DMA_IRQHandler+0x52c>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0308 	and.w	r3, r3, #8
 8007810:	2b00      	cmp	r3, #0
 8007812:	bf14      	ite	ne
 8007814:	2301      	movne	r3, #1
 8007816:	2300      	moveq	r3, #0
 8007818:	b2db      	uxtb	r3, r3
 800781a:	e009      	b.n	8007830 <HAL_DMA_IRQHandler+0x540>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	bf14      	ite	ne
 800782a:	2301      	movne	r3, #1
 800782c:	2300      	moveq	r3, #0
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d03e      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007838:	f003 031f 	and.w	r3, r3, #31
 800783c:	2210      	movs	r2, #16
 800783e:	409a      	lsls	r2, r3
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d018      	beq.n	8007884 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d108      	bne.n	8007872 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007864:	2b00      	cmp	r3, #0
 8007866:	d024      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4798      	blx	r3
 8007870:	e01f      	b.n	80078b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007876:	2b00      	cmp	r3, #0
 8007878:	d01b      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
 8007882:	e016      	b.n	80078b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800788e:	2b00      	cmp	r3, #0
 8007890:	d107      	bne.n	80078a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f022 0208 	bic.w	r2, r2, #8
 80078a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b6:	f003 031f 	and.w	r3, r3, #31
 80078ba:	2220      	movs	r2, #32
 80078bc:	409a      	lsls	r2, r3
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	4013      	ands	r3, r2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 8110 	beq.w	8007ae8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a2c      	ldr	r2, [pc, #176]	; (8007980 <HAL_DMA_IRQHandler+0x690>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d04a      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a2b      	ldr	r2, [pc, #172]	; (8007984 <HAL_DMA_IRQHandler+0x694>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d045      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a29      	ldr	r2, [pc, #164]	; (8007988 <HAL_DMA_IRQHandler+0x698>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d040      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a28      	ldr	r2, [pc, #160]	; (800798c <HAL_DMA_IRQHandler+0x69c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d03b      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a26      	ldr	r2, [pc, #152]	; (8007990 <HAL_DMA_IRQHandler+0x6a0>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d036      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a25      	ldr	r2, [pc, #148]	; (8007994 <HAL_DMA_IRQHandler+0x6a4>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d031      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a23      	ldr	r2, [pc, #140]	; (8007998 <HAL_DMA_IRQHandler+0x6a8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d02c      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a22      	ldr	r2, [pc, #136]	; (800799c <HAL_DMA_IRQHandler+0x6ac>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d027      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a20      	ldr	r2, [pc, #128]	; (80079a0 <HAL_DMA_IRQHandler+0x6b0>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d022      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a1f      	ldr	r2, [pc, #124]	; (80079a4 <HAL_DMA_IRQHandler+0x6b4>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d01d      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a1d      	ldr	r2, [pc, #116]	; (80079a8 <HAL_DMA_IRQHandler+0x6b8>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d018      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a1c      	ldr	r2, [pc, #112]	; (80079ac <HAL_DMA_IRQHandler+0x6bc>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d013      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a1a      	ldr	r2, [pc, #104]	; (80079b0 <HAL_DMA_IRQHandler+0x6c0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d00e      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a19      	ldr	r2, [pc, #100]	; (80079b4 <HAL_DMA_IRQHandler+0x6c4>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d009      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a17      	ldr	r2, [pc, #92]	; (80079b8 <HAL_DMA_IRQHandler+0x6c8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d004      	beq.n	8007968 <HAL_DMA_IRQHandler+0x678>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a16      	ldr	r2, [pc, #88]	; (80079bc <HAL_DMA_IRQHandler+0x6cc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d12b      	bne.n	80079c0 <HAL_DMA_IRQHandler+0x6d0>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0310 	and.w	r3, r3, #16
 8007972:	2b00      	cmp	r3, #0
 8007974:	bf14      	ite	ne
 8007976:	2301      	movne	r3, #1
 8007978:	2300      	moveq	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	e02a      	b.n	80079d4 <HAL_DMA_IRQHandler+0x6e4>
 800797e:	bf00      	nop
 8007980:	40020010 	.word	0x40020010
 8007984:	40020028 	.word	0x40020028
 8007988:	40020040 	.word	0x40020040
 800798c:	40020058 	.word	0x40020058
 8007990:	40020070 	.word	0x40020070
 8007994:	40020088 	.word	0x40020088
 8007998:	400200a0 	.word	0x400200a0
 800799c:	400200b8 	.word	0x400200b8
 80079a0:	40020410 	.word	0x40020410
 80079a4:	40020428 	.word	0x40020428
 80079a8:	40020440 	.word	0x40020440
 80079ac:	40020458 	.word	0x40020458
 80079b0:	40020470 	.word	0x40020470
 80079b4:	40020488 	.word	0x40020488
 80079b8:	400204a0 	.word	0x400204a0
 80079bc:	400204b8 	.word	0x400204b8
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	bf14      	ite	ne
 80079ce:	2301      	movne	r3, #1
 80079d0:	2300      	moveq	r3, #0
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 8087 	beq.w	8007ae8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079de:	f003 031f 	and.w	r3, r3, #31
 80079e2:	2220      	movs	r2, #32
 80079e4:	409a      	lsls	r2, r3
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d139      	bne.n	8007a6a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0216 	bic.w	r2, r2, #22
 8007a04:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	695a      	ldr	r2, [r3, #20]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a14:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d103      	bne.n	8007a26 <HAL_DMA_IRQHandler+0x736>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d007      	beq.n	8007a36 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 0208 	bic.w	r2, r2, #8
 8007a34:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a3a:	f003 031f 	and.w	r3, r3, #31
 8007a3e:	223f      	movs	r2, #63	; 0x3f
 8007a40:	409a      	lsls	r2, r3
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 834a 	beq.w	80080f4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	4798      	blx	r3
          }
          return;
 8007a68:	e344      	b.n	80080f4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d018      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d108      	bne.n	8007a98 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d02c      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	4798      	blx	r3
 8007a96:	e027      	b.n	8007ae8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d023      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	4798      	blx	r3
 8007aa8:	e01e      	b.n	8007ae8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10f      	bne.n	8007ad8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0210 	bic.w	r2, r2, #16
 8007ac6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 8306 	beq.w	80080fe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 8088 	beq.w	8007c10 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2204      	movs	r2, #4
 8007b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a7a      	ldr	r2, [pc, #488]	; (8007cf8 <HAL_DMA_IRQHandler+0xa08>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d04a      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a79      	ldr	r2, [pc, #484]	; (8007cfc <HAL_DMA_IRQHandler+0xa0c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d045      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a77      	ldr	r2, [pc, #476]	; (8007d00 <HAL_DMA_IRQHandler+0xa10>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d040      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a76      	ldr	r2, [pc, #472]	; (8007d04 <HAL_DMA_IRQHandler+0xa14>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d03b      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a74      	ldr	r2, [pc, #464]	; (8007d08 <HAL_DMA_IRQHandler+0xa18>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d036      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a73      	ldr	r2, [pc, #460]	; (8007d0c <HAL_DMA_IRQHandler+0xa1c>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d031      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a71      	ldr	r2, [pc, #452]	; (8007d10 <HAL_DMA_IRQHandler+0xa20>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d02c      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a70      	ldr	r2, [pc, #448]	; (8007d14 <HAL_DMA_IRQHandler+0xa24>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d027      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a6e      	ldr	r2, [pc, #440]	; (8007d18 <HAL_DMA_IRQHandler+0xa28>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d022      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a6d      	ldr	r2, [pc, #436]	; (8007d1c <HAL_DMA_IRQHandler+0xa2c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d01d      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a6b      	ldr	r2, [pc, #428]	; (8007d20 <HAL_DMA_IRQHandler+0xa30>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d018      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a6a      	ldr	r2, [pc, #424]	; (8007d24 <HAL_DMA_IRQHandler+0xa34>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d013      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a68      	ldr	r2, [pc, #416]	; (8007d28 <HAL_DMA_IRQHandler+0xa38>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d00e      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a67      	ldr	r2, [pc, #412]	; (8007d2c <HAL_DMA_IRQHandler+0xa3c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d009      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a65      	ldr	r2, [pc, #404]	; (8007d30 <HAL_DMA_IRQHandler+0xa40>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d004      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x8b8>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a64      	ldr	r2, [pc, #400]	; (8007d34 <HAL_DMA_IRQHandler+0xa44>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d108      	bne.n	8007bba <HAL_DMA_IRQHandler+0x8ca>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0201 	bic.w	r2, r2, #1
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	e007      	b.n	8007bca <HAL_DMA_IRQHandler+0x8da>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 0201 	bic.w	r2, r2, #1
 8007bc8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d307      	bcc.n	8007be6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1f2      	bne.n	8007bca <HAL_DMA_IRQHandler+0x8da>
 8007be4:	e000      	b.n	8007be8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007be6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d004      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2203      	movs	r2, #3
 8007bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007bfe:	e003      	b.n	8007c08 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 8272 	beq.w	80080fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	4798      	blx	r3
 8007c22:	e26c      	b.n	80080fe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a43      	ldr	r2, [pc, #268]	; (8007d38 <HAL_DMA_IRQHandler+0xa48>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d022      	beq.n	8007c74 <HAL_DMA_IRQHandler+0x984>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a42      	ldr	r2, [pc, #264]	; (8007d3c <HAL_DMA_IRQHandler+0xa4c>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d01d      	beq.n	8007c74 <HAL_DMA_IRQHandler+0x984>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a40      	ldr	r2, [pc, #256]	; (8007d40 <HAL_DMA_IRQHandler+0xa50>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d018      	beq.n	8007c74 <HAL_DMA_IRQHandler+0x984>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a3f      	ldr	r2, [pc, #252]	; (8007d44 <HAL_DMA_IRQHandler+0xa54>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d013      	beq.n	8007c74 <HAL_DMA_IRQHandler+0x984>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a3d      	ldr	r2, [pc, #244]	; (8007d48 <HAL_DMA_IRQHandler+0xa58>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00e      	beq.n	8007c74 <HAL_DMA_IRQHandler+0x984>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a3c      	ldr	r2, [pc, #240]	; (8007d4c <HAL_DMA_IRQHandler+0xa5c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d009      	beq.n	8007c74 <HAL_DMA_IRQHandler+0x984>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a3a      	ldr	r2, [pc, #232]	; (8007d50 <HAL_DMA_IRQHandler+0xa60>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d004      	beq.n	8007c74 <HAL_DMA_IRQHandler+0x984>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a39      	ldr	r2, [pc, #228]	; (8007d54 <HAL_DMA_IRQHandler+0xa64>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d101      	bne.n	8007c78 <HAL_DMA_IRQHandler+0x988>
 8007c74:	2301      	movs	r3, #1
 8007c76:	e000      	b.n	8007c7a <HAL_DMA_IRQHandler+0x98a>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 823f 	beq.w	80080fe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c8c:	f003 031f 	and.w	r3, r3, #31
 8007c90:	2204      	movs	r2, #4
 8007c92:	409a      	lsls	r2, r3
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	4013      	ands	r3, r2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 80cd 	beq.w	8007e38 <HAL_DMA_IRQHandler+0xb48>
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 80c7 	beq.w	8007e38 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cae:	f003 031f 	and.w	r3, r3, #31
 8007cb2:	2204      	movs	r2, #4
 8007cb4:	409a      	lsls	r2, r3
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d049      	beq.n	8007d58 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d109      	bne.n	8007ce2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 8210 	beq.w	80080f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ce0:	e20a      	b.n	80080f8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 8206 	beq.w	80080f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cf4:	e200      	b.n	80080f8 <HAL_DMA_IRQHandler+0xe08>
 8007cf6:	bf00      	nop
 8007cf8:	40020010 	.word	0x40020010
 8007cfc:	40020028 	.word	0x40020028
 8007d00:	40020040 	.word	0x40020040
 8007d04:	40020058 	.word	0x40020058
 8007d08:	40020070 	.word	0x40020070
 8007d0c:	40020088 	.word	0x40020088
 8007d10:	400200a0 	.word	0x400200a0
 8007d14:	400200b8 	.word	0x400200b8
 8007d18:	40020410 	.word	0x40020410
 8007d1c:	40020428 	.word	0x40020428
 8007d20:	40020440 	.word	0x40020440
 8007d24:	40020458 	.word	0x40020458
 8007d28:	40020470 	.word	0x40020470
 8007d2c:	40020488 	.word	0x40020488
 8007d30:	400204a0 	.word	0x400204a0
 8007d34:	400204b8 	.word	0x400204b8
 8007d38:	58025408 	.word	0x58025408
 8007d3c:	5802541c 	.word	0x5802541c
 8007d40:	58025430 	.word	0x58025430
 8007d44:	58025444 	.word	0x58025444
 8007d48:	58025458 	.word	0x58025458
 8007d4c:	5802546c 	.word	0x5802546c
 8007d50:	58025480 	.word	0x58025480
 8007d54:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f003 0320 	and.w	r3, r3, #32
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d160      	bne.n	8007e24 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a7f      	ldr	r2, [pc, #508]	; (8007f64 <HAL_DMA_IRQHandler+0xc74>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d04a      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a7d      	ldr	r2, [pc, #500]	; (8007f68 <HAL_DMA_IRQHandler+0xc78>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d045      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a7c      	ldr	r2, [pc, #496]	; (8007f6c <HAL_DMA_IRQHandler+0xc7c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d040      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a7a      	ldr	r2, [pc, #488]	; (8007f70 <HAL_DMA_IRQHandler+0xc80>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d03b      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a79      	ldr	r2, [pc, #484]	; (8007f74 <HAL_DMA_IRQHandler+0xc84>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d036      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a77      	ldr	r2, [pc, #476]	; (8007f78 <HAL_DMA_IRQHandler+0xc88>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d031      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a76      	ldr	r2, [pc, #472]	; (8007f7c <HAL_DMA_IRQHandler+0xc8c>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d02c      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a74      	ldr	r2, [pc, #464]	; (8007f80 <HAL_DMA_IRQHandler+0xc90>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d027      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a73      	ldr	r2, [pc, #460]	; (8007f84 <HAL_DMA_IRQHandler+0xc94>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d022      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a71      	ldr	r2, [pc, #452]	; (8007f88 <HAL_DMA_IRQHandler+0xc98>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d01d      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a70      	ldr	r2, [pc, #448]	; (8007f8c <HAL_DMA_IRQHandler+0xc9c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d018      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a6e      	ldr	r2, [pc, #440]	; (8007f90 <HAL_DMA_IRQHandler+0xca0>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d013      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a6d      	ldr	r2, [pc, #436]	; (8007f94 <HAL_DMA_IRQHandler+0xca4>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d00e      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a6b      	ldr	r2, [pc, #428]	; (8007f98 <HAL_DMA_IRQHandler+0xca8>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d009      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a6a      	ldr	r2, [pc, #424]	; (8007f9c <HAL_DMA_IRQHandler+0xcac>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d004      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xb12>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a68      	ldr	r2, [pc, #416]	; (8007fa0 <HAL_DMA_IRQHandler+0xcb0>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d108      	bne.n	8007e14 <HAL_DMA_IRQHandler+0xb24>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 0208 	bic.w	r2, r2, #8
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	e007      	b.n	8007e24 <HAL_DMA_IRQHandler+0xb34>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0204 	bic.w	r2, r2, #4
 8007e22:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 8165 	beq.w	80080f8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e36:	e15f      	b.n	80080f8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e3c:	f003 031f 	and.w	r3, r3, #31
 8007e40:	2202      	movs	r2, #2
 8007e42:	409a      	lsls	r2, r3
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	4013      	ands	r3, r2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 80c5 	beq.w	8007fd8 <HAL_DMA_IRQHandler+0xce8>
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f003 0302 	and.w	r3, r3, #2
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 80bf 	beq.w	8007fd8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5e:	f003 031f 	and.w	r3, r3, #31
 8007e62:	2202      	movs	r2, #2
 8007e64:	409a      	lsls	r2, r3
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d018      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d109      	bne.n	8007e92 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 813a 	beq.w	80080fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e90:	e134      	b.n	80080fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 8130 	beq.w	80080fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ea4:	e12a      	b.n	80080fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f003 0320 	and.w	r3, r3, #32
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f040 8089 	bne.w	8007fc4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a2b      	ldr	r2, [pc, #172]	; (8007f64 <HAL_DMA_IRQHandler+0xc74>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d04a      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a29      	ldr	r2, [pc, #164]	; (8007f68 <HAL_DMA_IRQHandler+0xc78>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d045      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a28      	ldr	r2, [pc, #160]	; (8007f6c <HAL_DMA_IRQHandler+0xc7c>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d040      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a26      	ldr	r2, [pc, #152]	; (8007f70 <HAL_DMA_IRQHandler+0xc80>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d03b      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a25      	ldr	r2, [pc, #148]	; (8007f74 <HAL_DMA_IRQHandler+0xc84>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d036      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a23      	ldr	r2, [pc, #140]	; (8007f78 <HAL_DMA_IRQHandler+0xc88>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d031      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a22      	ldr	r2, [pc, #136]	; (8007f7c <HAL_DMA_IRQHandler+0xc8c>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d02c      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a20      	ldr	r2, [pc, #128]	; (8007f80 <HAL_DMA_IRQHandler+0xc90>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d027      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1f      	ldr	r2, [pc, #124]	; (8007f84 <HAL_DMA_IRQHandler+0xc94>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d022      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a1d      	ldr	r2, [pc, #116]	; (8007f88 <HAL_DMA_IRQHandler+0xc98>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d01d      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1c      	ldr	r2, [pc, #112]	; (8007f8c <HAL_DMA_IRQHandler+0xc9c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d018      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a1a      	ldr	r2, [pc, #104]	; (8007f90 <HAL_DMA_IRQHandler+0xca0>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d013      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a19      	ldr	r2, [pc, #100]	; (8007f94 <HAL_DMA_IRQHandler+0xca4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00e      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a17      	ldr	r2, [pc, #92]	; (8007f98 <HAL_DMA_IRQHandler+0xca8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d009      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a16      	ldr	r2, [pc, #88]	; (8007f9c <HAL_DMA_IRQHandler+0xcac>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d004      	beq.n	8007f52 <HAL_DMA_IRQHandler+0xc62>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a14      	ldr	r2, [pc, #80]	; (8007fa0 <HAL_DMA_IRQHandler+0xcb0>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d128      	bne.n	8007fa4 <HAL_DMA_IRQHandler+0xcb4>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0214 	bic.w	r2, r2, #20
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	e027      	b.n	8007fb4 <HAL_DMA_IRQHandler+0xcc4>
 8007f64:	40020010 	.word	0x40020010
 8007f68:	40020028 	.word	0x40020028
 8007f6c:	40020040 	.word	0x40020040
 8007f70:	40020058 	.word	0x40020058
 8007f74:	40020070 	.word	0x40020070
 8007f78:	40020088 	.word	0x40020088
 8007f7c:	400200a0 	.word	0x400200a0
 8007f80:	400200b8 	.word	0x400200b8
 8007f84:	40020410 	.word	0x40020410
 8007f88:	40020428 	.word	0x40020428
 8007f8c:	40020440 	.word	0x40020440
 8007f90:	40020458 	.word	0x40020458
 8007f94:	40020470 	.word	0x40020470
 8007f98:	40020488 	.word	0x40020488
 8007f9c:	400204a0 	.word	0x400204a0
 8007fa0:	400204b8 	.word	0x400204b8
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 020a 	bic.w	r2, r2, #10
 8007fb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 8097 	beq.w	80080fc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fd6:	e091      	b.n	80080fc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fdc:	f003 031f 	and.w	r3, r3, #31
 8007fe0:	2208      	movs	r2, #8
 8007fe2:	409a      	lsls	r2, r3
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 8088 	beq.w	80080fe <HAL_DMA_IRQHandler+0xe0e>
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 8082 	beq.w	80080fe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a41      	ldr	r2, [pc, #260]	; (8008104 <HAL_DMA_IRQHandler+0xe14>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d04a      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a3f      	ldr	r2, [pc, #252]	; (8008108 <HAL_DMA_IRQHandler+0xe18>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d045      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a3e      	ldr	r2, [pc, #248]	; (800810c <HAL_DMA_IRQHandler+0xe1c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d040      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a3c      	ldr	r2, [pc, #240]	; (8008110 <HAL_DMA_IRQHandler+0xe20>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d03b      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a3b      	ldr	r2, [pc, #236]	; (8008114 <HAL_DMA_IRQHandler+0xe24>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d036      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a39      	ldr	r2, [pc, #228]	; (8008118 <HAL_DMA_IRQHandler+0xe28>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d031      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a38      	ldr	r2, [pc, #224]	; (800811c <HAL_DMA_IRQHandler+0xe2c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d02c      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a36      	ldr	r2, [pc, #216]	; (8008120 <HAL_DMA_IRQHandler+0xe30>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d027      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a35      	ldr	r2, [pc, #212]	; (8008124 <HAL_DMA_IRQHandler+0xe34>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d022      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a33      	ldr	r2, [pc, #204]	; (8008128 <HAL_DMA_IRQHandler+0xe38>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d01d      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a32      	ldr	r2, [pc, #200]	; (800812c <HAL_DMA_IRQHandler+0xe3c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d018      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a30      	ldr	r2, [pc, #192]	; (8008130 <HAL_DMA_IRQHandler+0xe40>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d013      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a2f      	ldr	r2, [pc, #188]	; (8008134 <HAL_DMA_IRQHandler+0xe44>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00e      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a2d      	ldr	r2, [pc, #180]	; (8008138 <HAL_DMA_IRQHandler+0xe48>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d009      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a2c      	ldr	r2, [pc, #176]	; (800813c <HAL_DMA_IRQHandler+0xe4c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d004      	beq.n	800809a <HAL_DMA_IRQHandler+0xdaa>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a2a      	ldr	r2, [pc, #168]	; (8008140 <HAL_DMA_IRQHandler+0xe50>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d108      	bne.n	80080ac <HAL_DMA_IRQHandler+0xdbc>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 021c 	bic.w	r2, r2, #28
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	e007      	b.n	80080bc <HAL_DMA_IRQHandler+0xdcc>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 020e 	bic.w	r2, r2, #14
 80080ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080c0:	f003 031f 	and.w	r3, r3, #31
 80080c4:	2201      	movs	r2, #1
 80080c6:	409a      	lsls	r2, r3
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d009      	beq.n	80080fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
 80080f2:	e004      	b.n	80080fe <HAL_DMA_IRQHandler+0xe0e>
          return;
 80080f4:	bf00      	nop
 80080f6:	e002      	b.n	80080fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080f8:	bf00      	nop
 80080fa:	e000      	b.n	80080fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80080fe:	3728      	adds	r7, #40	; 0x28
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	40020010 	.word	0x40020010
 8008108:	40020028 	.word	0x40020028
 800810c:	40020040 	.word	0x40020040
 8008110:	40020058 	.word	0x40020058
 8008114:	40020070 	.word	0x40020070
 8008118:	40020088 	.word	0x40020088
 800811c:	400200a0 	.word	0x400200a0
 8008120:	400200b8 	.word	0x400200b8
 8008124:	40020410 	.word	0x40020410
 8008128:	40020428 	.word	0x40020428
 800812c:	40020440 	.word	0x40020440
 8008130:	40020458 	.word	0x40020458
 8008134:	40020470 	.word	0x40020470
 8008138:	40020488 	.word	0x40020488
 800813c:	400204a0 	.word	0x400204a0
 8008140:	400204b8 	.word	0x400204b8

08008144 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008156:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800815c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a7f      	ldr	r2, [pc, #508]	; (8008360 <DMA_SetConfig+0x21c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d072      	beq.n	800824e <DMA_SetConfig+0x10a>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a7d      	ldr	r2, [pc, #500]	; (8008364 <DMA_SetConfig+0x220>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d06d      	beq.n	800824e <DMA_SetConfig+0x10a>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a7c      	ldr	r2, [pc, #496]	; (8008368 <DMA_SetConfig+0x224>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d068      	beq.n	800824e <DMA_SetConfig+0x10a>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a7a      	ldr	r2, [pc, #488]	; (800836c <DMA_SetConfig+0x228>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d063      	beq.n	800824e <DMA_SetConfig+0x10a>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a79      	ldr	r2, [pc, #484]	; (8008370 <DMA_SetConfig+0x22c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d05e      	beq.n	800824e <DMA_SetConfig+0x10a>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a77      	ldr	r2, [pc, #476]	; (8008374 <DMA_SetConfig+0x230>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d059      	beq.n	800824e <DMA_SetConfig+0x10a>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a76      	ldr	r2, [pc, #472]	; (8008378 <DMA_SetConfig+0x234>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d054      	beq.n	800824e <DMA_SetConfig+0x10a>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a74      	ldr	r2, [pc, #464]	; (800837c <DMA_SetConfig+0x238>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d04f      	beq.n	800824e <DMA_SetConfig+0x10a>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a73      	ldr	r2, [pc, #460]	; (8008380 <DMA_SetConfig+0x23c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d04a      	beq.n	800824e <DMA_SetConfig+0x10a>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a71      	ldr	r2, [pc, #452]	; (8008384 <DMA_SetConfig+0x240>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d045      	beq.n	800824e <DMA_SetConfig+0x10a>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a70      	ldr	r2, [pc, #448]	; (8008388 <DMA_SetConfig+0x244>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d040      	beq.n	800824e <DMA_SetConfig+0x10a>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a6e      	ldr	r2, [pc, #440]	; (800838c <DMA_SetConfig+0x248>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d03b      	beq.n	800824e <DMA_SetConfig+0x10a>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a6d      	ldr	r2, [pc, #436]	; (8008390 <DMA_SetConfig+0x24c>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d036      	beq.n	800824e <DMA_SetConfig+0x10a>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a6b      	ldr	r2, [pc, #428]	; (8008394 <DMA_SetConfig+0x250>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d031      	beq.n	800824e <DMA_SetConfig+0x10a>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a6a      	ldr	r2, [pc, #424]	; (8008398 <DMA_SetConfig+0x254>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d02c      	beq.n	800824e <DMA_SetConfig+0x10a>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a68      	ldr	r2, [pc, #416]	; (800839c <DMA_SetConfig+0x258>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d027      	beq.n	800824e <DMA_SetConfig+0x10a>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a67      	ldr	r2, [pc, #412]	; (80083a0 <DMA_SetConfig+0x25c>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d022      	beq.n	800824e <DMA_SetConfig+0x10a>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a65      	ldr	r2, [pc, #404]	; (80083a4 <DMA_SetConfig+0x260>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d01d      	beq.n	800824e <DMA_SetConfig+0x10a>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a64      	ldr	r2, [pc, #400]	; (80083a8 <DMA_SetConfig+0x264>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d018      	beq.n	800824e <DMA_SetConfig+0x10a>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a62      	ldr	r2, [pc, #392]	; (80083ac <DMA_SetConfig+0x268>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d013      	beq.n	800824e <DMA_SetConfig+0x10a>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a61      	ldr	r2, [pc, #388]	; (80083b0 <DMA_SetConfig+0x26c>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d00e      	beq.n	800824e <DMA_SetConfig+0x10a>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a5f      	ldr	r2, [pc, #380]	; (80083b4 <DMA_SetConfig+0x270>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d009      	beq.n	800824e <DMA_SetConfig+0x10a>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a5e      	ldr	r2, [pc, #376]	; (80083b8 <DMA_SetConfig+0x274>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d004      	beq.n	800824e <DMA_SetConfig+0x10a>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a5c      	ldr	r2, [pc, #368]	; (80083bc <DMA_SetConfig+0x278>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d101      	bne.n	8008252 <DMA_SetConfig+0x10e>
 800824e:	2301      	movs	r3, #1
 8008250:	e000      	b.n	8008254 <DMA_SetConfig+0x110>
 8008252:	2300      	movs	r3, #0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00d      	beq.n	8008274 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008260:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008266:	2b00      	cmp	r3, #0
 8008268:	d004      	beq.n	8008274 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008272:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a39      	ldr	r2, [pc, #228]	; (8008360 <DMA_SetConfig+0x21c>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d04a      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a38      	ldr	r2, [pc, #224]	; (8008364 <DMA_SetConfig+0x220>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d045      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a36      	ldr	r2, [pc, #216]	; (8008368 <DMA_SetConfig+0x224>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d040      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a35      	ldr	r2, [pc, #212]	; (800836c <DMA_SetConfig+0x228>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d03b      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a33      	ldr	r2, [pc, #204]	; (8008370 <DMA_SetConfig+0x22c>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d036      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a32      	ldr	r2, [pc, #200]	; (8008374 <DMA_SetConfig+0x230>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d031      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a30      	ldr	r2, [pc, #192]	; (8008378 <DMA_SetConfig+0x234>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d02c      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a2f      	ldr	r2, [pc, #188]	; (800837c <DMA_SetConfig+0x238>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d027      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a2d      	ldr	r2, [pc, #180]	; (8008380 <DMA_SetConfig+0x23c>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d022      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a2c      	ldr	r2, [pc, #176]	; (8008384 <DMA_SetConfig+0x240>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d01d      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a2a      	ldr	r2, [pc, #168]	; (8008388 <DMA_SetConfig+0x244>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d018      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a29      	ldr	r2, [pc, #164]	; (800838c <DMA_SetConfig+0x248>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d013      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a27      	ldr	r2, [pc, #156]	; (8008390 <DMA_SetConfig+0x24c>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d00e      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a26      	ldr	r2, [pc, #152]	; (8008394 <DMA_SetConfig+0x250>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d009      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a24      	ldr	r2, [pc, #144]	; (8008398 <DMA_SetConfig+0x254>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d004      	beq.n	8008314 <DMA_SetConfig+0x1d0>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a23      	ldr	r2, [pc, #140]	; (800839c <DMA_SetConfig+0x258>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d101      	bne.n	8008318 <DMA_SetConfig+0x1d4>
 8008314:	2301      	movs	r3, #1
 8008316:	e000      	b.n	800831a <DMA_SetConfig+0x1d6>
 8008318:	2300      	movs	r3, #0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d059      	beq.n	80083d2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008322:	f003 031f 	and.w	r3, r3, #31
 8008326:	223f      	movs	r2, #63	; 0x3f
 8008328:	409a      	lsls	r2, r3
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800833c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	2b40      	cmp	r3, #64	; 0x40
 800834c:	d138      	bne.n	80083c0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800835e:	e086      	b.n	800846e <DMA_SetConfig+0x32a>
 8008360:	40020010 	.word	0x40020010
 8008364:	40020028 	.word	0x40020028
 8008368:	40020040 	.word	0x40020040
 800836c:	40020058 	.word	0x40020058
 8008370:	40020070 	.word	0x40020070
 8008374:	40020088 	.word	0x40020088
 8008378:	400200a0 	.word	0x400200a0
 800837c:	400200b8 	.word	0x400200b8
 8008380:	40020410 	.word	0x40020410
 8008384:	40020428 	.word	0x40020428
 8008388:	40020440 	.word	0x40020440
 800838c:	40020458 	.word	0x40020458
 8008390:	40020470 	.word	0x40020470
 8008394:	40020488 	.word	0x40020488
 8008398:	400204a0 	.word	0x400204a0
 800839c:	400204b8 	.word	0x400204b8
 80083a0:	58025408 	.word	0x58025408
 80083a4:	5802541c 	.word	0x5802541c
 80083a8:	58025430 	.word	0x58025430
 80083ac:	58025444 	.word	0x58025444
 80083b0:	58025458 	.word	0x58025458
 80083b4:	5802546c 	.word	0x5802546c
 80083b8:	58025480 	.word	0x58025480
 80083bc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	60da      	str	r2, [r3, #12]
}
 80083d0:	e04d      	b.n	800846e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a29      	ldr	r2, [pc, #164]	; (800847c <DMA_SetConfig+0x338>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d022      	beq.n	8008422 <DMA_SetConfig+0x2de>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a27      	ldr	r2, [pc, #156]	; (8008480 <DMA_SetConfig+0x33c>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d01d      	beq.n	8008422 <DMA_SetConfig+0x2de>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a26      	ldr	r2, [pc, #152]	; (8008484 <DMA_SetConfig+0x340>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d018      	beq.n	8008422 <DMA_SetConfig+0x2de>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a24      	ldr	r2, [pc, #144]	; (8008488 <DMA_SetConfig+0x344>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d013      	beq.n	8008422 <DMA_SetConfig+0x2de>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a23      	ldr	r2, [pc, #140]	; (800848c <DMA_SetConfig+0x348>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00e      	beq.n	8008422 <DMA_SetConfig+0x2de>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a21      	ldr	r2, [pc, #132]	; (8008490 <DMA_SetConfig+0x34c>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d009      	beq.n	8008422 <DMA_SetConfig+0x2de>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a20      	ldr	r2, [pc, #128]	; (8008494 <DMA_SetConfig+0x350>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d004      	beq.n	8008422 <DMA_SetConfig+0x2de>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a1e      	ldr	r2, [pc, #120]	; (8008498 <DMA_SetConfig+0x354>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d101      	bne.n	8008426 <DMA_SetConfig+0x2e2>
 8008422:	2301      	movs	r3, #1
 8008424:	e000      	b.n	8008428 <DMA_SetConfig+0x2e4>
 8008426:	2300      	movs	r3, #0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d020      	beq.n	800846e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008430:	f003 031f 	and.w	r3, r3, #31
 8008434:	2201      	movs	r2, #1
 8008436:	409a      	lsls	r2, r3
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	2b40      	cmp	r3, #64	; 0x40
 800844a:	d108      	bne.n	800845e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	60da      	str	r2, [r3, #12]
}
 800845c:	e007      	b.n	800846e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	60da      	str	r2, [r3, #12]
}
 800846e:	bf00      	nop
 8008470:	371c      	adds	r7, #28
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	58025408 	.word	0x58025408
 8008480:	5802541c 	.word	0x5802541c
 8008484:	58025430 	.word	0x58025430
 8008488:	58025444 	.word	0x58025444
 800848c:	58025458 	.word	0x58025458
 8008490:	5802546c 	.word	0x5802546c
 8008494:	58025480 	.word	0x58025480
 8008498:	58025494 	.word	0x58025494

0800849c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a42      	ldr	r2, [pc, #264]	; (80085b4 <DMA_CalcBaseAndBitshift+0x118>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d04a      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a41      	ldr	r2, [pc, #260]	; (80085b8 <DMA_CalcBaseAndBitshift+0x11c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d045      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a3f      	ldr	r2, [pc, #252]	; (80085bc <DMA_CalcBaseAndBitshift+0x120>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d040      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a3e      	ldr	r2, [pc, #248]	; (80085c0 <DMA_CalcBaseAndBitshift+0x124>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d03b      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a3c      	ldr	r2, [pc, #240]	; (80085c4 <DMA_CalcBaseAndBitshift+0x128>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d036      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a3b      	ldr	r2, [pc, #236]	; (80085c8 <DMA_CalcBaseAndBitshift+0x12c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d031      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a39      	ldr	r2, [pc, #228]	; (80085cc <DMA_CalcBaseAndBitshift+0x130>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d02c      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a38      	ldr	r2, [pc, #224]	; (80085d0 <DMA_CalcBaseAndBitshift+0x134>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d027      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a36      	ldr	r2, [pc, #216]	; (80085d4 <DMA_CalcBaseAndBitshift+0x138>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d022      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a35      	ldr	r2, [pc, #212]	; (80085d8 <DMA_CalcBaseAndBitshift+0x13c>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d01d      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a33      	ldr	r2, [pc, #204]	; (80085dc <DMA_CalcBaseAndBitshift+0x140>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d018      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a32      	ldr	r2, [pc, #200]	; (80085e0 <DMA_CalcBaseAndBitshift+0x144>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d013      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a30      	ldr	r2, [pc, #192]	; (80085e4 <DMA_CalcBaseAndBitshift+0x148>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00e      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a2f      	ldr	r2, [pc, #188]	; (80085e8 <DMA_CalcBaseAndBitshift+0x14c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d009      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a2d      	ldr	r2, [pc, #180]	; (80085ec <DMA_CalcBaseAndBitshift+0x150>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d004      	beq.n	8008544 <DMA_CalcBaseAndBitshift+0xa8>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a2c      	ldr	r2, [pc, #176]	; (80085f0 <DMA_CalcBaseAndBitshift+0x154>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d101      	bne.n	8008548 <DMA_CalcBaseAndBitshift+0xac>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <DMA_CalcBaseAndBitshift+0xae>
 8008548:	2300      	movs	r3, #0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d024      	beq.n	8008598 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	3b10      	subs	r3, #16
 8008556:	4a27      	ldr	r2, [pc, #156]	; (80085f4 <DMA_CalcBaseAndBitshift+0x158>)
 8008558:	fba2 2303 	umull	r2, r3, r2, r3
 800855c:	091b      	lsrs	r3, r3, #4
 800855e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f003 0307 	and.w	r3, r3, #7
 8008566:	4a24      	ldr	r2, [pc, #144]	; (80085f8 <DMA_CalcBaseAndBitshift+0x15c>)
 8008568:	5cd3      	ldrb	r3, [r2, r3]
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b03      	cmp	r3, #3
 8008574:	d908      	bls.n	8008588 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	4b1f      	ldr	r3, [pc, #124]	; (80085fc <DMA_CalcBaseAndBitshift+0x160>)
 800857e:	4013      	ands	r3, r2
 8008580:	1d1a      	adds	r2, r3, #4
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	659a      	str	r2, [r3, #88]	; 0x58
 8008586:	e00d      	b.n	80085a4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	461a      	mov	r2, r3
 800858e:	4b1b      	ldr	r3, [pc, #108]	; (80085fc <DMA_CalcBaseAndBitshift+0x160>)
 8008590:	4013      	ands	r3, r2
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	6593      	str	r3, [r2, #88]	; 0x58
 8008596:	e005      	b.n	80085a4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	40020010 	.word	0x40020010
 80085b8:	40020028 	.word	0x40020028
 80085bc:	40020040 	.word	0x40020040
 80085c0:	40020058 	.word	0x40020058
 80085c4:	40020070 	.word	0x40020070
 80085c8:	40020088 	.word	0x40020088
 80085cc:	400200a0 	.word	0x400200a0
 80085d0:	400200b8 	.word	0x400200b8
 80085d4:	40020410 	.word	0x40020410
 80085d8:	40020428 	.word	0x40020428
 80085dc:	40020440 	.word	0x40020440
 80085e0:	40020458 	.word	0x40020458
 80085e4:	40020470 	.word	0x40020470
 80085e8:	40020488 	.word	0x40020488
 80085ec:	400204a0 	.word	0x400204a0
 80085f0:	400204b8 	.word	0x400204b8
 80085f4:	aaaaaaab 	.word	0xaaaaaaab
 80085f8:	0800f494 	.word	0x0800f494
 80085fc:	fffffc00 	.word	0xfffffc00

08008600 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d120      	bne.n	8008656 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	2b03      	cmp	r3, #3
 800861a:	d858      	bhi.n	80086ce <DMA_CheckFifoParam+0xce>
 800861c:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <DMA_CheckFifoParam+0x24>)
 800861e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008622:	bf00      	nop
 8008624:	08008635 	.word	0x08008635
 8008628:	08008647 	.word	0x08008647
 800862c:	08008635 	.word	0x08008635
 8008630:	080086cf 	.word	0x080086cf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d048      	beq.n	80086d2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008644:	e045      	b.n	80086d2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800864e:	d142      	bne.n	80086d6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008654:	e03f      	b.n	80086d6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800865e:	d123      	bne.n	80086a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008664:	2b03      	cmp	r3, #3
 8008666:	d838      	bhi.n	80086da <DMA_CheckFifoParam+0xda>
 8008668:	a201      	add	r2, pc, #4	; (adr r2, 8008670 <DMA_CheckFifoParam+0x70>)
 800866a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866e:	bf00      	nop
 8008670:	08008681 	.word	0x08008681
 8008674:	08008687 	.word	0x08008687
 8008678:	08008681 	.word	0x08008681
 800867c:	08008699 	.word	0x08008699
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	73fb      	strb	r3, [r7, #15]
        break;
 8008684:	e030      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d025      	beq.n	80086de <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008696:	e022      	b.n	80086de <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086a0:	d11f      	bne.n	80086e2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086a6:	e01c      	b.n	80086e2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d902      	bls.n	80086b6 <DMA_CheckFifoParam+0xb6>
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d003      	beq.n	80086bc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80086b4:	e018      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	73fb      	strb	r3, [r7, #15]
        break;
 80086ba:	e015      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00e      	beq.n	80086e6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	73fb      	strb	r3, [r7, #15]
    break;
 80086cc:	e00b      	b.n	80086e6 <DMA_CheckFifoParam+0xe6>
        break;
 80086ce:	bf00      	nop
 80086d0:	e00a      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
        break;
 80086d2:	bf00      	nop
 80086d4:	e008      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
        break;
 80086d6:	bf00      	nop
 80086d8:	e006      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
        break;
 80086da:	bf00      	nop
 80086dc:	e004      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
        break;
 80086de:	bf00      	nop
 80086e0:	e002      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
        break;
 80086e2:	bf00      	nop
 80086e4:	e000      	b.n	80086e8 <DMA_CheckFifoParam+0xe8>
    break;
 80086e6:	bf00      	nop
    }
  }

  return status;
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop

080086f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a38      	ldr	r2, [pc, #224]	; (80087ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d022      	beq.n	8008756 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a36      	ldr	r2, [pc, #216]	; (80087f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d01d      	beq.n	8008756 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a35      	ldr	r2, [pc, #212]	; (80087f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d018      	beq.n	8008756 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a33      	ldr	r2, [pc, #204]	; (80087f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d013      	beq.n	8008756 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a32      	ldr	r2, [pc, #200]	; (80087fc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d00e      	beq.n	8008756 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a30      	ldr	r2, [pc, #192]	; (8008800 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d009      	beq.n	8008756 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a2f      	ldr	r2, [pc, #188]	; (8008804 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d004      	beq.n	8008756 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a2d      	ldr	r2, [pc, #180]	; (8008808 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d101      	bne.n	800875a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008756:	2301      	movs	r3, #1
 8008758:	e000      	b.n	800875c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800875a:	2300      	movs	r3, #0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d01a      	beq.n	8008796 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	3b08      	subs	r3, #8
 8008768:	4a28      	ldr	r2, [pc, #160]	; (800880c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800876a:	fba2 2303 	umull	r2, r3, r2, r3
 800876e:	091b      	lsrs	r3, r3, #4
 8008770:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4b26      	ldr	r3, [pc, #152]	; (8008810 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	461a      	mov	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a24      	ldr	r2, [pc, #144]	; (8008814 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008784:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f003 031f 	and.w	r3, r3, #31
 800878c:	2201      	movs	r2, #1
 800878e:	409a      	lsls	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008794:	e024      	b.n	80087e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	b2db      	uxtb	r3, r3
 800879c:	3b10      	subs	r3, #16
 800879e:	4a1e      	ldr	r2, [pc, #120]	; (8008818 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80087a0:	fba2 2303 	umull	r2, r3, r2, r3
 80087a4:	091b      	lsrs	r3, r3, #4
 80087a6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	4a1c      	ldr	r2, [pc, #112]	; (800881c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d806      	bhi.n	80087be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	4a1b      	ldr	r2, [pc, #108]	; (8008820 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d902      	bls.n	80087be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3308      	adds	r3, #8
 80087bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	4b18      	ldr	r3, [pc, #96]	; (8008824 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	461a      	mov	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a16      	ldr	r2, [pc, #88]	; (8008828 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80087d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f003 031f 	and.w	r3, r3, #31
 80087d8:	2201      	movs	r2, #1
 80087da:	409a      	lsls	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	669a      	str	r2, [r3, #104]	; 0x68
}
 80087e0:	bf00      	nop
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	58025408 	.word	0x58025408
 80087f0:	5802541c 	.word	0x5802541c
 80087f4:	58025430 	.word	0x58025430
 80087f8:	58025444 	.word	0x58025444
 80087fc:	58025458 	.word	0x58025458
 8008800:	5802546c 	.word	0x5802546c
 8008804:	58025480 	.word	0x58025480
 8008808:	58025494 	.word	0x58025494
 800880c:	cccccccd 	.word	0xcccccccd
 8008810:	16009600 	.word	0x16009600
 8008814:	58025880 	.word	0x58025880
 8008818:	aaaaaaab 	.word	0xaaaaaaab
 800881c:	400204b8 	.word	0x400204b8
 8008820:	4002040f 	.word	0x4002040f
 8008824:	10008200 	.word	0x10008200
 8008828:	40020880 	.word	0x40020880

0800882c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d04a      	beq.n	80088d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b08      	cmp	r3, #8
 8008846:	d847      	bhi.n	80088d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a25      	ldr	r2, [pc, #148]	; (80088e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d022      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a24      	ldr	r2, [pc, #144]	; (80088e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d01d      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a22      	ldr	r2, [pc, #136]	; (80088ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d018      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a21      	ldr	r2, [pc, #132]	; (80088f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d013      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a1f      	ldr	r2, [pc, #124]	; (80088f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00e      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a1e      	ldr	r2, [pc, #120]	; (80088f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d009      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a1c      	ldr	r2, [pc, #112]	; (80088fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d004      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a1b      	ldr	r2, [pc, #108]	; (8008900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d101      	bne.n	800889c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008898:	2301      	movs	r3, #1
 800889a:	e000      	b.n	800889e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800889c:	2300      	movs	r3, #0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	4b17      	ldr	r3, [pc, #92]	; (8008904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80088a6:	4413      	add	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	461a      	mov	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a15      	ldr	r2, [pc, #84]	; (8008908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80088b4:	671a      	str	r2, [r3, #112]	; 0x70
 80088b6:	e009      	b.n	80088cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	4b14      	ldr	r3, [pc, #80]	; (800890c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	461a      	mov	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a11      	ldr	r2, [pc, #68]	; (8008910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80088ca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	2201      	movs	r2, #1
 80088d2:	409a      	lsls	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80088d8:	bf00      	nop
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	58025408 	.word	0x58025408
 80088e8:	5802541c 	.word	0x5802541c
 80088ec:	58025430 	.word	0x58025430
 80088f0:	58025444 	.word	0x58025444
 80088f4:	58025458 	.word	0x58025458
 80088f8:	5802546c 	.word	0x5802546c
 80088fc:	58025480 	.word	0x58025480
 8008900:	58025494 	.word	0x58025494
 8008904:	1600963f 	.word	0x1600963f
 8008908:	58025940 	.word	0x58025940
 800890c:	1000823f 	.word	0x1000823f
 8008910:	40020940 	.word	0x40020940

08008914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008914:	b480      	push	{r7}
 8008916:	b089      	sub	sp, #36	; 0x24
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800891e:	2300      	movs	r3, #0
 8008920:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008922:	4b86      	ldr	r3, [pc, #536]	; (8008b3c <HAL_GPIO_Init+0x228>)
 8008924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008926:	e18c      	b.n	8008c42 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	2101      	movs	r1, #1
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	fa01 f303 	lsl.w	r3, r1, r3
 8008934:	4013      	ands	r3, r2
 8008936:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 817e 	beq.w	8008c3c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f003 0303 	and.w	r3, r3, #3
 8008948:	2b01      	cmp	r3, #1
 800894a:	d005      	beq.n	8008958 <HAL_GPIO_Init+0x44>
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f003 0303 	and.w	r3, r3, #3
 8008954:	2b02      	cmp	r3, #2
 8008956:	d130      	bne.n	80089ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	2203      	movs	r2, #3
 8008964:	fa02 f303 	lsl.w	r3, r2, r3
 8008968:	43db      	mvns	r3, r3
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	4013      	ands	r3, r2
 800896e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	68da      	ldr	r2, [r3, #12]
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	fa02 f303 	lsl.w	r3, r2, r3
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	4313      	orrs	r3, r2
 8008980:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800898e:	2201      	movs	r2, #1
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	fa02 f303 	lsl.w	r3, r2, r3
 8008996:	43db      	mvns	r3, r3
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	4013      	ands	r3, r2
 800899c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	091b      	lsrs	r3, r3, #4
 80089a4:	f003 0201 	and.w	r2, r3, #1
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	fa02 f303 	lsl.w	r3, r2, r3
 80089ae:	69ba      	ldr	r2, [r7, #24]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	69ba      	ldr	r2, [r7, #24]
 80089b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f003 0303 	and.w	r3, r3, #3
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d017      	beq.n	80089f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	2203      	movs	r2, #3
 80089d2:	fa02 f303 	lsl.w	r3, r2, r3
 80089d6:	43db      	mvns	r3, r3
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	4013      	ands	r3, r2
 80089dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	689a      	ldr	r2, [r3, #8]
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	69ba      	ldr	r2, [r7, #24]
 80089f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f003 0303 	and.w	r3, r3, #3
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d123      	bne.n	8008a4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	08da      	lsrs	r2, r3, #3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3208      	adds	r2, #8
 8008a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	220f      	movs	r2, #15
 8008a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1e:	43db      	mvns	r3, r3
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	4013      	ands	r3, r2
 8008a24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	691a      	ldr	r2, [r3, #16]
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	f003 0307 	and.w	r3, r3, #7
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	fa02 f303 	lsl.w	r3, r2, r3
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	08da      	lsrs	r2, r3, #3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3208      	adds	r2, #8
 8008a44:	69b9      	ldr	r1, [r7, #24]
 8008a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	005b      	lsls	r3, r3, #1
 8008a54:	2203      	movs	r2, #3
 8008a56:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5a:	43db      	mvns	r3, r3
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	4013      	ands	r3, r2
 8008a60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f003 0203 	and.w	r2, r3, #3
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	005b      	lsls	r3, r3, #1
 8008a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 80d8 	beq.w	8008c3c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a8c:	4b2c      	ldr	r3, [pc, #176]	; (8008b40 <HAL_GPIO_Init+0x22c>)
 8008a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a92:	4a2b      	ldr	r2, [pc, #172]	; (8008b40 <HAL_GPIO_Init+0x22c>)
 8008a94:	f043 0302 	orr.w	r3, r3, #2
 8008a98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008a9c:	4b28      	ldr	r3, [pc, #160]	; (8008b40 <HAL_GPIO_Init+0x22c>)
 8008a9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008aaa:	4a26      	ldr	r2, [pc, #152]	; (8008b44 <HAL_GPIO_Init+0x230>)
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	089b      	lsrs	r3, r3, #2
 8008ab0:	3302      	adds	r3, #2
 8008ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	f003 0303 	and.w	r3, r3, #3
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	220f      	movs	r2, #15
 8008ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac6:	43db      	mvns	r3, r3
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	4013      	ands	r3, r2
 8008acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a1d      	ldr	r2, [pc, #116]	; (8008b48 <HAL_GPIO_Init+0x234>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d04a      	beq.n	8008b6c <HAL_GPIO_Init+0x258>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a1c      	ldr	r2, [pc, #112]	; (8008b4c <HAL_GPIO_Init+0x238>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d02b      	beq.n	8008b36 <HAL_GPIO_Init+0x222>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a1b      	ldr	r2, [pc, #108]	; (8008b50 <HAL_GPIO_Init+0x23c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d025      	beq.n	8008b32 <HAL_GPIO_Init+0x21e>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a1a      	ldr	r2, [pc, #104]	; (8008b54 <HAL_GPIO_Init+0x240>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d01f      	beq.n	8008b2e <HAL_GPIO_Init+0x21a>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a19      	ldr	r2, [pc, #100]	; (8008b58 <HAL_GPIO_Init+0x244>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d019      	beq.n	8008b2a <HAL_GPIO_Init+0x216>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a18      	ldr	r2, [pc, #96]	; (8008b5c <HAL_GPIO_Init+0x248>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d013      	beq.n	8008b26 <HAL_GPIO_Init+0x212>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a17      	ldr	r2, [pc, #92]	; (8008b60 <HAL_GPIO_Init+0x24c>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d00d      	beq.n	8008b22 <HAL_GPIO_Init+0x20e>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a16      	ldr	r2, [pc, #88]	; (8008b64 <HAL_GPIO_Init+0x250>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d007      	beq.n	8008b1e <HAL_GPIO_Init+0x20a>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a15      	ldr	r2, [pc, #84]	; (8008b68 <HAL_GPIO_Init+0x254>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d101      	bne.n	8008b1a <HAL_GPIO_Init+0x206>
 8008b16:	2309      	movs	r3, #9
 8008b18:	e029      	b.n	8008b6e <HAL_GPIO_Init+0x25a>
 8008b1a:	230a      	movs	r3, #10
 8008b1c:	e027      	b.n	8008b6e <HAL_GPIO_Init+0x25a>
 8008b1e:	2307      	movs	r3, #7
 8008b20:	e025      	b.n	8008b6e <HAL_GPIO_Init+0x25a>
 8008b22:	2306      	movs	r3, #6
 8008b24:	e023      	b.n	8008b6e <HAL_GPIO_Init+0x25a>
 8008b26:	2305      	movs	r3, #5
 8008b28:	e021      	b.n	8008b6e <HAL_GPIO_Init+0x25a>
 8008b2a:	2304      	movs	r3, #4
 8008b2c:	e01f      	b.n	8008b6e <HAL_GPIO_Init+0x25a>
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e01d      	b.n	8008b6e <HAL_GPIO_Init+0x25a>
 8008b32:	2302      	movs	r3, #2
 8008b34:	e01b      	b.n	8008b6e <HAL_GPIO_Init+0x25a>
 8008b36:	2301      	movs	r3, #1
 8008b38:	e019      	b.n	8008b6e <HAL_GPIO_Init+0x25a>
 8008b3a:	bf00      	nop
 8008b3c:	58000080 	.word	0x58000080
 8008b40:	58024400 	.word	0x58024400
 8008b44:	58000400 	.word	0x58000400
 8008b48:	58020000 	.word	0x58020000
 8008b4c:	58020400 	.word	0x58020400
 8008b50:	58020800 	.word	0x58020800
 8008b54:	58020c00 	.word	0x58020c00
 8008b58:	58021000 	.word	0x58021000
 8008b5c:	58021400 	.word	0x58021400
 8008b60:	58021800 	.word	0x58021800
 8008b64:	58021c00 	.word	0x58021c00
 8008b68:	58022400 	.word	0x58022400
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	69fa      	ldr	r2, [r7, #28]
 8008b70:	f002 0203 	and.w	r2, r2, #3
 8008b74:	0092      	lsls	r2, r2, #2
 8008b76:	4093      	lsls	r3, r2
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b7e:	4938      	ldr	r1, [pc, #224]	; (8008c60 <HAL_GPIO_Init+0x34c>)
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	089b      	lsrs	r3, r3, #2
 8008b84:	3302      	adds	r3, #2
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	43db      	mvns	r3, r3
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008baa:	69ba      	ldr	r2, [r7, #24]
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	43db      	mvns	r3, r3
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	4013      	ands	r3, r2
 8008bca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	43db      	mvns	r3, r3
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d003      	beq.n	8008c0c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	43db      	mvns	r3, r3
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	4013      	ands	r3, r2
 8008c20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	fa22 f303 	lsr.w	r3, r2, r3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f47f ae6b 	bne.w	8008928 <HAL_GPIO_Init+0x14>
  }
}
 8008c52:	bf00      	nop
 8008c54:	bf00      	nop
 8008c56:	3724      	adds	r7, #36	; 0x24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	58000400 	.word	0x58000400

08008c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	807b      	strh	r3, [r7, #2]
 8008c70:	4613      	mov	r3, r2
 8008c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008c74:	787b      	ldrb	r3, [r7, #1]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c7a:	887a      	ldrh	r2, [r7, #2]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008c80:	e003      	b.n	8008c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008c82:	887b      	ldrh	r3, [r7, #2]
 8008c84:	041a      	lsls	r2, r3, #16
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	619a      	str	r2, [r3, #24]
}
 8008c8a:	bf00      	nop
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
	...

08008c98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008ca0:	4b19      	ldr	r3, [pc, #100]	; (8008d08 <HAL_PWREx_ConfigSupply+0x70>)
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	f003 0304 	and.w	r3, r3, #4
 8008ca8:	2b04      	cmp	r3, #4
 8008caa:	d00a      	beq.n	8008cc2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008cac:	4b16      	ldr	r3, [pc, #88]	; (8008d08 <HAL_PWREx_ConfigSupply+0x70>)
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f003 0307 	and.w	r3, r3, #7
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d001      	beq.n	8008cbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e01f      	b.n	8008cfe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	e01d      	b.n	8008cfe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008cc2:	4b11      	ldr	r3, [pc, #68]	; (8008d08 <HAL_PWREx_ConfigSupply+0x70>)
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	f023 0207 	bic.w	r2, r3, #7
 8008cca:	490f      	ldr	r1, [pc, #60]	; (8008d08 <HAL_PWREx_ConfigSupply+0x70>)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008cd2:	f7fc fec9 	bl	8005a68 <HAL_GetTick>
 8008cd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008cd8:	e009      	b.n	8008cee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008cda:	f7fc fec5 	bl	8005a68 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ce8:	d901      	bls.n	8008cee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e007      	b.n	8008cfe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008cee:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <HAL_PWREx_ConfigSupply+0x70>)
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cfa:	d1ee      	bne.n	8008cda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	58024800 	.word	0x58024800

08008d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08c      	sub	sp, #48	; 0x30
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e39d      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f000 8087 	beq.w	8008e3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d2c:	4b88      	ldr	r3, [pc, #544]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d36:	4b86      	ldr	r3, [pc, #536]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3e:	2b10      	cmp	r3, #16
 8008d40:	d007      	beq.n	8008d52 <HAL_RCC_OscConfig+0x46>
 8008d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d44:	2b18      	cmp	r3, #24
 8008d46:	d110      	bne.n	8008d6a <HAL_RCC_OscConfig+0x5e>
 8008d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4a:	f003 0303 	and.w	r3, r3, #3
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d10b      	bne.n	8008d6a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d52:	4b7f      	ldr	r3, [pc, #508]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d06c      	beq.n	8008e38 <HAL_RCC_OscConfig+0x12c>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d168      	bne.n	8008e38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e377      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d72:	d106      	bne.n	8008d82 <HAL_RCC_OscConfig+0x76>
 8008d74:	4b76      	ldr	r3, [pc, #472]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a75      	ldr	r2, [pc, #468]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	e02e      	b.n	8008de0 <HAL_RCC_OscConfig+0xd4>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10c      	bne.n	8008da4 <HAL_RCC_OscConfig+0x98>
 8008d8a:	4b71      	ldr	r3, [pc, #452]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a70      	ldr	r2, [pc, #448]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d94:	6013      	str	r3, [r2, #0]
 8008d96:	4b6e      	ldr	r3, [pc, #440]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a6d      	ldr	r2, [pc, #436]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008da0:	6013      	str	r3, [r2, #0]
 8008da2:	e01d      	b.n	8008de0 <HAL_RCC_OscConfig+0xd4>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dac:	d10c      	bne.n	8008dc8 <HAL_RCC_OscConfig+0xbc>
 8008dae:	4b68      	ldr	r3, [pc, #416]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a67      	ldr	r2, [pc, #412]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	4b65      	ldr	r3, [pc, #404]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a64      	ldr	r2, [pc, #400]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	e00b      	b.n	8008de0 <HAL_RCC_OscConfig+0xd4>
 8008dc8:	4b61      	ldr	r3, [pc, #388]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a60      	ldr	r2, [pc, #384]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	4b5e      	ldr	r3, [pc, #376]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a5d      	ldr	r2, [pc, #372]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d013      	beq.n	8008e10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de8:	f7fc fe3e 	bl	8005a68 <HAL_GetTick>
 8008dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008dee:	e008      	b.n	8008e02 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008df0:	f7fc fe3a 	bl	8005a68 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b64      	cmp	r3, #100	; 0x64
 8008dfc:	d901      	bls.n	8008e02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e32b      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e02:	4b53      	ldr	r3, [pc, #332]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d0f0      	beq.n	8008df0 <HAL_RCC_OscConfig+0xe4>
 8008e0e:	e014      	b.n	8008e3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e10:	f7fc fe2a 	bl	8005a68 <HAL_GetTick>
 8008e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e16:	e008      	b.n	8008e2a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e18:	f7fc fe26 	bl	8005a68 <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	2b64      	cmp	r3, #100	; 0x64
 8008e24:	d901      	bls.n	8008e2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e317      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e2a:	4b49      	ldr	r3, [pc, #292]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1f0      	bne.n	8008e18 <HAL_RCC_OscConfig+0x10c>
 8008e36:	e000      	b.n	8008e3a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 808c 	beq.w	8008f60 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e48:	4b41      	ldr	r3, [pc, #260]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e52:	4b3f      	ldr	r3, [pc, #252]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d007      	beq.n	8008e6e <HAL_RCC_OscConfig+0x162>
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	2b18      	cmp	r3, #24
 8008e62:	d137      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x1c8>
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f003 0303 	and.w	r3, r3, #3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d132      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e6e:	4b38      	ldr	r3, [pc, #224]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0304 	and.w	r3, r3, #4
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <HAL_RCC_OscConfig+0x17a>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e2e9      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e86:	4b32      	ldr	r3, [pc, #200]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f023 0219 	bic.w	r2, r3, #25
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	492f      	ldr	r1, [pc, #188]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008e94:	4313      	orrs	r3, r2
 8008e96:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e98:	f7fc fde6 	bl	8005a68 <HAL_GetTick>
 8008e9c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e9e:	e008      	b.n	8008eb2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ea0:	f7fc fde2 	bl	8005a68 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d901      	bls.n	8008eb2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e2d3      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008eb2:	4b27      	ldr	r3, [pc, #156]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0304 	and.w	r3, r3, #4
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0f0      	beq.n	8008ea0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ebe:	4b24      	ldr	r3, [pc, #144]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	061b      	lsls	r3, r3, #24
 8008ecc:	4920      	ldr	r1, [pc, #128]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ed2:	e045      	b.n	8008f60 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d026      	beq.n	8008f2a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008edc:	4b1c      	ldr	r3, [pc, #112]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f023 0219 	bic.w	r2, r3, #25
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	4919      	ldr	r1, [pc, #100]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eee:	f7fc fdbb 	bl	8005a68 <HAL_GetTick>
 8008ef2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ef4:	e008      	b.n	8008f08 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ef6:	f7fc fdb7 	bl	8005a68 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d901      	bls.n	8008f08 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e2a8      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f08:	4b11      	ldr	r3, [pc, #68]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0304 	and.w	r3, r3, #4
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d0f0      	beq.n	8008ef6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f14:	4b0e      	ldr	r3, [pc, #56]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	061b      	lsls	r3, r3, #24
 8008f22:	490b      	ldr	r1, [pc, #44]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	604b      	str	r3, [r1, #4]
 8008f28:	e01a      	b.n	8008f60 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f2a:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a08      	ldr	r2, [pc, #32]	; (8008f50 <HAL_RCC_OscConfig+0x244>)
 8008f30:	f023 0301 	bic.w	r3, r3, #1
 8008f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f36:	f7fc fd97 	bl	8005a68 <HAL_GetTick>
 8008f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f3c:	e00a      	b.n	8008f54 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f3e:	f7fc fd93 	bl	8005a68 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d903      	bls.n	8008f54 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e284      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
 8008f50:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f54:	4b96      	ldr	r3, [pc, #600]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0304 	and.w	r3, r3, #4
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1ee      	bne.n	8008f3e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0310 	and.w	r3, r3, #16
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d06a      	beq.n	8009042 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f6c:	4b90      	ldr	r3, [pc, #576]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f74:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f76:	4b8e      	ldr	r3, [pc, #568]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8008f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	2b08      	cmp	r3, #8
 8008f80:	d007      	beq.n	8008f92 <HAL_RCC_OscConfig+0x286>
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	2b18      	cmp	r3, #24
 8008f86:	d11b      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x2b4>
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f003 0303 	and.w	r3, r3, #3
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d116      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f92:	4b87      	ldr	r3, [pc, #540]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d005      	beq.n	8008faa <HAL_RCC_OscConfig+0x29e>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	2b80      	cmp	r3, #128	; 0x80
 8008fa4:	d001      	beq.n	8008faa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e257      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008faa:	4b81      	ldr	r3, [pc, #516]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	061b      	lsls	r3, r3, #24
 8008fb8:	497d      	ldr	r1, [pc, #500]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008fbe:	e040      	b.n	8009042 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	69db      	ldr	r3, [r3, #28]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d023      	beq.n	8009010 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008fc8:	4b79      	ldr	r3, [pc, #484]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a78      	ldr	r2, [pc, #480]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8008fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd4:	f7fc fd48 	bl	8005a68 <HAL_GetTick>
 8008fd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fda:	e008      	b.n	8008fee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008fdc:	f7fc fd44 	bl	8005a68 <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d901      	bls.n	8008fee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e235      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fee:	4b70      	ldr	r3, [pc, #448]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0f0      	beq.n	8008fdc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ffa:	4b6d      	ldr	r3, [pc, #436]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a1b      	ldr	r3, [r3, #32]
 8009006:	061b      	lsls	r3, r3, #24
 8009008:	4969      	ldr	r1, [pc, #420]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 800900a:	4313      	orrs	r3, r2
 800900c:	60cb      	str	r3, [r1, #12]
 800900e:	e018      	b.n	8009042 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009010:	4b67      	ldr	r3, [pc, #412]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a66      	ldr	r2, [pc, #408]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8009016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800901a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800901c:	f7fc fd24 	bl	8005a68 <HAL_GetTick>
 8009020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009022:	e008      	b.n	8009036 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009024:	f7fc fd20 	bl	8005a68 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	2b02      	cmp	r3, #2
 8009030:	d901      	bls.n	8009036 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e211      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009036:	4b5e      	ldr	r3, [pc, #376]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1f0      	bne.n	8009024 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0308 	and.w	r3, r3, #8
 800904a:	2b00      	cmp	r3, #0
 800904c:	d036      	beq.n	80090bc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d019      	beq.n	800908a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009056:	4b56      	ldr	r3, [pc, #344]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8009058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800905a:	4a55      	ldr	r2, [pc, #340]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 800905c:	f043 0301 	orr.w	r3, r3, #1
 8009060:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009062:	f7fc fd01 	bl	8005a68 <HAL_GetTick>
 8009066:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009068:	e008      	b.n	800907c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800906a:	f7fc fcfd 	bl	8005a68 <HAL_GetTick>
 800906e:	4602      	mov	r2, r0
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	2b02      	cmp	r3, #2
 8009076:	d901      	bls.n	800907c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009078:	2303      	movs	r3, #3
 800907a:	e1ee      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800907c:	4b4c      	ldr	r3, [pc, #304]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 800907e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009080:	f003 0302 	and.w	r3, r3, #2
 8009084:	2b00      	cmp	r3, #0
 8009086:	d0f0      	beq.n	800906a <HAL_RCC_OscConfig+0x35e>
 8009088:	e018      	b.n	80090bc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800908a:	4b49      	ldr	r3, [pc, #292]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 800908c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800908e:	4a48      	ldr	r2, [pc, #288]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8009090:	f023 0301 	bic.w	r3, r3, #1
 8009094:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009096:	f7fc fce7 	bl	8005a68 <HAL_GetTick>
 800909a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800909c:	e008      	b.n	80090b0 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800909e:	f7fc fce3 	bl	8005a68 <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d901      	bls.n	80090b0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e1d4      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090b0:	4b3f      	ldr	r3, [pc, #252]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 80090b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090b4:	f003 0302 	and.w	r3, r3, #2
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1f0      	bne.n	800909e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0320 	and.w	r3, r3, #32
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d036      	beq.n	8009136 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d019      	beq.n	8009104 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80090d0:	4b37      	ldr	r3, [pc, #220]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a36      	ldr	r2, [pc, #216]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 80090d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80090da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80090dc:	f7fc fcc4 	bl	8005a68 <HAL_GetTick>
 80090e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80090e2:	e008      	b.n	80090f6 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80090e4:	f7fc fcc0 	bl	8005a68 <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d901      	bls.n	80090f6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e1b1      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80090f6:	4b2e      	ldr	r3, [pc, #184]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0f0      	beq.n	80090e4 <HAL_RCC_OscConfig+0x3d8>
 8009102:	e018      	b.n	8009136 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009104:	4b2a      	ldr	r3, [pc, #168]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a29      	ldr	r2, [pc, #164]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 800910a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800910e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009110:	f7fc fcaa 	bl	8005a68 <HAL_GetTick>
 8009114:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009116:	e008      	b.n	800912a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009118:	f7fc fca6 	bl	8005a68 <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	2b02      	cmp	r3, #2
 8009124:	d901      	bls.n	800912a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009126:	2303      	movs	r3, #3
 8009128:	e197      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800912a:	4b21      	ldr	r3, [pc, #132]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1f0      	bne.n	8009118 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0304 	and.w	r3, r3, #4
 800913e:	2b00      	cmp	r3, #0
 8009140:	f000 8086 	beq.w	8009250 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009144:	4b1b      	ldr	r3, [pc, #108]	; (80091b4 <HAL_RCC_OscConfig+0x4a8>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a1a      	ldr	r2, [pc, #104]	; (80091b4 <HAL_RCC_OscConfig+0x4a8>)
 800914a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800914e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009150:	f7fc fc8a 	bl	8005a68 <HAL_GetTick>
 8009154:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009156:	e008      	b.n	800916a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009158:	f7fc fc86 	bl	8005a68 <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	2b64      	cmp	r3, #100	; 0x64
 8009164:	d901      	bls.n	800916a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e177      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800916a:	4b12      	ldr	r3, [pc, #72]	; (80091b4 <HAL_RCC_OscConfig+0x4a8>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0f0      	beq.n	8009158 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d106      	bne.n	800918c <HAL_RCC_OscConfig+0x480>
 800917e:	4b0c      	ldr	r3, [pc, #48]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8009180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009182:	4a0b      	ldr	r2, [pc, #44]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8009184:	f043 0301 	orr.w	r3, r3, #1
 8009188:	6713      	str	r3, [r2, #112]	; 0x70
 800918a:	e032      	b.n	80091f2 <HAL_RCC_OscConfig+0x4e6>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d111      	bne.n	80091b8 <HAL_RCC_OscConfig+0x4ac>
 8009194:	4b06      	ldr	r3, [pc, #24]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 8009196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009198:	4a05      	ldr	r2, [pc, #20]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 800919a:	f023 0301 	bic.w	r3, r3, #1
 800919e:	6713      	str	r3, [r2, #112]	; 0x70
 80091a0:	4b03      	ldr	r3, [pc, #12]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 80091a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a4:	4a02      	ldr	r2, [pc, #8]	; (80091b0 <HAL_RCC_OscConfig+0x4a4>)
 80091a6:	f023 0304 	bic.w	r3, r3, #4
 80091aa:	6713      	str	r3, [r2, #112]	; 0x70
 80091ac:	e021      	b.n	80091f2 <HAL_RCC_OscConfig+0x4e6>
 80091ae:	bf00      	nop
 80091b0:	58024400 	.word	0x58024400
 80091b4:	58024800 	.word	0x58024800
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	2b05      	cmp	r3, #5
 80091be:	d10c      	bne.n	80091da <HAL_RCC_OscConfig+0x4ce>
 80091c0:	4b83      	ldr	r3, [pc, #524]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80091c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c4:	4a82      	ldr	r2, [pc, #520]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80091c6:	f043 0304 	orr.w	r3, r3, #4
 80091ca:	6713      	str	r3, [r2, #112]	; 0x70
 80091cc:	4b80      	ldr	r3, [pc, #512]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80091ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d0:	4a7f      	ldr	r2, [pc, #508]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80091d2:	f043 0301 	orr.w	r3, r3, #1
 80091d6:	6713      	str	r3, [r2, #112]	; 0x70
 80091d8:	e00b      	b.n	80091f2 <HAL_RCC_OscConfig+0x4e6>
 80091da:	4b7d      	ldr	r3, [pc, #500]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80091dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091de:	4a7c      	ldr	r2, [pc, #496]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80091e0:	f023 0301 	bic.w	r3, r3, #1
 80091e4:	6713      	str	r3, [r2, #112]	; 0x70
 80091e6:	4b7a      	ldr	r3, [pc, #488]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80091e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ea:	4a79      	ldr	r2, [pc, #484]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80091ec:	f023 0304 	bic.w	r3, r3, #4
 80091f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d015      	beq.n	8009226 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091fa:	f7fc fc35 	bl	8005a68 <HAL_GetTick>
 80091fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009200:	e00a      	b.n	8009218 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009202:	f7fc fc31 	bl	8005a68 <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009210:	4293      	cmp	r3, r2
 8009212:	d901      	bls.n	8009218 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	e120      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009218:	4b6d      	ldr	r3, [pc, #436]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 800921a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921c:	f003 0302 	and.w	r3, r3, #2
 8009220:	2b00      	cmp	r3, #0
 8009222:	d0ee      	beq.n	8009202 <HAL_RCC_OscConfig+0x4f6>
 8009224:	e014      	b.n	8009250 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009226:	f7fc fc1f 	bl	8005a68 <HAL_GetTick>
 800922a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800922c:	e00a      	b.n	8009244 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800922e:	f7fc fc1b 	bl	8005a68 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	f241 3288 	movw	r2, #5000	; 0x1388
 800923c:	4293      	cmp	r3, r2
 800923e:	d901      	bls.n	8009244 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e10a      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009244:	4b62      	ldr	r3, [pc, #392]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 8009246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1ee      	bne.n	800922e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009254:	2b00      	cmp	r3, #0
 8009256:	f000 80ff 	beq.w	8009458 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800925a:	4b5d      	ldr	r3, [pc, #372]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009262:	2b18      	cmp	r3, #24
 8009264:	f000 80ba 	beq.w	80093dc <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926c:	2b02      	cmp	r3, #2
 800926e:	f040 8095 	bne.w	800939c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009272:	4b57      	ldr	r3, [pc, #348]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a56      	ldr	r2, [pc, #344]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 8009278:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800927c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800927e:	f7fc fbf3 	bl	8005a68 <HAL_GetTick>
 8009282:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009284:	e008      	b.n	8009298 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009286:	f7fc fbef 	bl	8005a68 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	2b02      	cmp	r3, #2
 8009292:	d901      	bls.n	8009298 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e0e0      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009298:	4b4d      	ldr	r3, [pc, #308]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1f0      	bne.n	8009286 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092a4:	4b4a      	ldr	r3, [pc, #296]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80092a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092a8:	4b4a      	ldr	r3, [pc, #296]	; (80093d4 <HAL_RCC_OscConfig+0x6c8>)
 80092aa:	4013      	ands	r3, r2
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80092b4:	0112      	lsls	r2, r2, #4
 80092b6:	430a      	orrs	r2, r1
 80092b8:	4945      	ldr	r1, [pc, #276]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	628b      	str	r3, [r1, #40]	; 0x28
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c2:	3b01      	subs	r3, #1
 80092c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092cc:	3b01      	subs	r3, #1
 80092ce:	025b      	lsls	r3, r3, #9
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	431a      	orrs	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d8:	3b01      	subs	r3, #1
 80092da:	041b      	lsls	r3, r3, #16
 80092dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80092e0:	431a      	orrs	r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e6:	3b01      	subs	r3, #1
 80092e8:	061b      	lsls	r3, r3, #24
 80092ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80092ee:	4938      	ldr	r1, [pc, #224]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80092f0:	4313      	orrs	r3, r2
 80092f2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80092f4:	4b36      	ldr	r3, [pc, #216]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80092f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f8:	4a35      	ldr	r2, [pc, #212]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80092fa:	f023 0301 	bic.w	r3, r3, #1
 80092fe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009300:	4b33      	ldr	r3, [pc, #204]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 8009302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009304:	4b34      	ldr	r3, [pc, #208]	; (80093d8 <HAL_RCC_OscConfig+0x6cc>)
 8009306:	4013      	ands	r3, r2
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800930c:	00d2      	lsls	r2, r2, #3
 800930e:	4930      	ldr	r1, [pc, #192]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 8009310:	4313      	orrs	r3, r2
 8009312:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009314:	4b2e      	ldr	r3, [pc, #184]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 8009316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009318:	f023 020c 	bic.w	r2, r3, #12
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009320:	492b      	ldr	r1, [pc, #172]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 8009322:	4313      	orrs	r3, r2
 8009324:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009326:	4b2a      	ldr	r3, [pc, #168]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	f023 0202 	bic.w	r2, r3, #2
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009332:	4927      	ldr	r1, [pc, #156]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 8009334:	4313      	orrs	r3, r2
 8009336:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009338:	4b25      	ldr	r3, [pc, #148]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 800933a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933c:	4a24      	ldr	r2, [pc, #144]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 800933e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009344:	4b22      	ldr	r3, [pc, #136]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	4a21      	ldr	r2, [pc, #132]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 800934a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800934e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009350:	4b1f      	ldr	r3, [pc, #124]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	4a1e      	ldr	r2, [pc, #120]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 8009356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800935a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800935c:	4b1c      	ldr	r3, [pc, #112]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	4a1b      	ldr	r2, [pc, #108]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 8009362:	f043 0301 	orr.w	r3, r3, #1
 8009366:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009368:	4b19      	ldr	r3, [pc, #100]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a18      	ldr	r2, [pc, #96]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 800936e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009374:	f7fc fb78 	bl	8005a68 <HAL_GetTick>
 8009378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800937a:	e008      	b.n	800938e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800937c:	f7fc fb74 	bl	8005a68 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b02      	cmp	r3, #2
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e065      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800938e:	4b10      	ldr	r3, [pc, #64]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0f0      	beq.n	800937c <HAL_RCC_OscConfig+0x670>
 800939a:	e05d      	b.n	8009458 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800939c:	4b0c      	ldr	r3, [pc, #48]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a0b      	ldr	r2, [pc, #44]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80093a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093a8:	f7fc fb5e 	bl	8005a68 <HAL_GetTick>
 80093ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093ae:	e008      	b.n	80093c2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093b0:	f7fc fb5a 	bl	8005a68 <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d901      	bls.n	80093c2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	e04b      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093c2:	4b03      	ldr	r3, [pc, #12]	; (80093d0 <HAL_RCC_OscConfig+0x6c4>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1f0      	bne.n	80093b0 <HAL_RCC_OscConfig+0x6a4>
 80093ce:	e043      	b.n	8009458 <HAL_RCC_OscConfig+0x74c>
 80093d0:	58024400 	.word	0x58024400
 80093d4:	fffffc0c 	.word	0xfffffc0c
 80093d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80093dc:	4b21      	ldr	r3, [pc, #132]	; (8009464 <HAL_RCC_OscConfig+0x758>)
 80093de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80093e2:	4b20      	ldr	r3, [pc, #128]	; (8009464 <HAL_RCC_OscConfig+0x758>)
 80093e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d031      	beq.n	8009454 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f003 0203 	and.w	r2, r3, #3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d12a      	bne.n	8009454 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	091b      	lsrs	r3, r3, #4
 8009402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800940a:	429a      	cmp	r2, r3
 800940c:	d122      	bne.n	8009454 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009418:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800941a:	429a      	cmp	r2, r3
 800941c:	d11a      	bne.n	8009454 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	0a5b      	lsrs	r3, r3, #9
 8009422:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800942c:	429a      	cmp	r2, r3
 800942e:	d111      	bne.n	8009454 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	0c1b      	lsrs	r3, r3, #16
 8009434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800943e:	429a      	cmp	r2, r3
 8009440:	d108      	bne.n	8009454 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	0e1b      	lsrs	r3, r3, #24
 8009446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800944e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009450:	429a      	cmp	r2, r3
 8009452:	d001      	beq.n	8009458 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e000      	b.n	800945a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3730      	adds	r7, #48	; 0x30
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	58024400 	.word	0x58024400

08009468 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e19c      	b.n	80097b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800947c:	4b8a      	ldr	r3, [pc, #552]	; (80096a8 <HAL_RCC_ClockConfig+0x240>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 030f 	and.w	r3, r3, #15
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	429a      	cmp	r2, r3
 8009488:	d910      	bls.n	80094ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800948a:	4b87      	ldr	r3, [pc, #540]	; (80096a8 <HAL_RCC_ClockConfig+0x240>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f023 020f 	bic.w	r2, r3, #15
 8009492:	4985      	ldr	r1, [pc, #532]	; (80096a8 <HAL_RCC_ClockConfig+0x240>)
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	4313      	orrs	r3, r2
 8009498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800949a:	4b83      	ldr	r3, [pc, #524]	; (80096a8 <HAL_RCC_ClockConfig+0x240>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 030f 	and.w	r3, r3, #15
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d001      	beq.n	80094ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e184      	b.n	80097b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 0304 	and.w	r3, r3, #4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d010      	beq.n	80094da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	691a      	ldr	r2, [r3, #16]
 80094bc:	4b7b      	ldr	r3, [pc, #492]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d908      	bls.n	80094da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80094c8:	4b78      	ldr	r3, [pc, #480]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	4975      	ldr	r1, [pc, #468]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0308 	and.w	r3, r3, #8
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d010      	beq.n	8009508 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	695a      	ldr	r2, [r3, #20]
 80094ea:	4b70      	ldr	r3, [pc, #448]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d908      	bls.n	8009508 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80094f6:	4b6d      	ldr	r3, [pc, #436]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	496a      	ldr	r1, [pc, #424]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 8009504:	4313      	orrs	r3, r2
 8009506:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0310 	and.w	r3, r3, #16
 8009510:	2b00      	cmp	r3, #0
 8009512:	d010      	beq.n	8009536 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	699a      	ldr	r2, [r3, #24]
 8009518:	4b64      	ldr	r3, [pc, #400]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009520:	429a      	cmp	r2, r3
 8009522:	d908      	bls.n	8009536 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009524:	4b61      	ldr	r3, [pc, #388]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	495e      	ldr	r1, [pc, #376]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 8009532:	4313      	orrs	r3, r2
 8009534:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0320 	and.w	r3, r3, #32
 800953e:	2b00      	cmp	r3, #0
 8009540:	d010      	beq.n	8009564 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	69da      	ldr	r2, [r3, #28]
 8009546:	4b59      	ldr	r3, [pc, #356]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800954e:	429a      	cmp	r2, r3
 8009550:	d908      	bls.n	8009564 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009552:	4b56      	ldr	r3, [pc, #344]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	4953      	ldr	r1, [pc, #332]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 8009560:	4313      	orrs	r3, r2
 8009562:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d010      	beq.n	8009592 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68da      	ldr	r2, [r3, #12]
 8009574:	4b4d      	ldr	r3, [pc, #308]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	f003 030f 	and.w	r3, r3, #15
 800957c:	429a      	cmp	r2, r3
 800957e:	d908      	bls.n	8009592 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009580:	4b4a      	ldr	r3, [pc, #296]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	f023 020f 	bic.w	r2, r3, #15
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	4947      	ldr	r1, [pc, #284]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 800958e:	4313      	orrs	r3, r2
 8009590:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d055      	beq.n	800964a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800959e:	4b43      	ldr	r3, [pc, #268]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	4940      	ldr	r1, [pc, #256]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d107      	bne.n	80095c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095b8:	4b3c      	ldr	r3, [pc, #240]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d121      	bne.n	8009608 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e0f6      	b.n	80097b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	2b03      	cmp	r3, #3
 80095ce:	d107      	bne.n	80095e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095d0:	4b36      	ldr	r3, [pc, #216]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d115      	bne.n	8009608 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	e0ea      	b.n	80097b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d107      	bne.n	80095f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095e8:	4b30      	ldr	r3, [pc, #192]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d109      	bne.n	8009608 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e0de      	b.n	80097b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095f8:	4b2c      	ldr	r3, [pc, #176]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0304 	and.w	r3, r3, #4
 8009600:	2b00      	cmp	r3, #0
 8009602:	d101      	bne.n	8009608 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e0d6      	b.n	80097b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009608:	4b28      	ldr	r3, [pc, #160]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	f023 0207 	bic.w	r2, r3, #7
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	4925      	ldr	r1, [pc, #148]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 8009616:	4313      	orrs	r3, r2
 8009618:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800961a:	f7fc fa25 	bl	8005a68 <HAL_GetTick>
 800961e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009620:	e00a      	b.n	8009638 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009622:	f7fc fa21 	bl	8005a68 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009630:	4293      	cmp	r3, r2
 8009632:	d901      	bls.n	8009638 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e0be      	b.n	80097b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009638:	4b1c      	ldr	r3, [pc, #112]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	00db      	lsls	r3, r3, #3
 8009646:	429a      	cmp	r2, r3
 8009648:	d1eb      	bne.n	8009622 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0302 	and.w	r3, r3, #2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d010      	beq.n	8009678 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68da      	ldr	r2, [r3, #12]
 800965a:	4b14      	ldr	r3, [pc, #80]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	429a      	cmp	r2, r3
 8009664:	d208      	bcs.n	8009678 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009666:	4b11      	ldr	r3, [pc, #68]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	f023 020f 	bic.w	r2, r3, #15
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	490e      	ldr	r1, [pc, #56]	; (80096ac <HAL_RCC_ClockConfig+0x244>)
 8009674:	4313      	orrs	r3, r2
 8009676:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009678:	4b0b      	ldr	r3, [pc, #44]	; (80096a8 <HAL_RCC_ClockConfig+0x240>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 030f 	and.w	r3, r3, #15
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	429a      	cmp	r2, r3
 8009684:	d214      	bcs.n	80096b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009686:	4b08      	ldr	r3, [pc, #32]	; (80096a8 <HAL_RCC_ClockConfig+0x240>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f023 020f 	bic.w	r2, r3, #15
 800968e:	4906      	ldr	r1, [pc, #24]	; (80096a8 <HAL_RCC_ClockConfig+0x240>)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	4313      	orrs	r3, r2
 8009694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009696:	4b04      	ldr	r3, [pc, #16]	; (80096a8 <HAL_RCC_ClockConfig+0x240>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 030f 	and.w	r3, r3, #15
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d005      	beq.n	80096b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e086      	b.n	80097b6 <HAL_RCC_ClockConfig+0x34e>
 80096a8:	52002000 	.word	0x52002000
 80096ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0304 	and.w	r3, r3, #4
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d010      	beq.n	80096de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	691a      	ldr	r2, [r3, #16]
 80096c0:	4b3f      	ldr	r3, [pc, #252]	; (80097c0 <HAL_RCC_ClockConfig+0x358>)
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d208      	bcs.n	80096de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096cc:	4b3c      	ldr	r3, [pc, #240]	; (80097c0 <HAL_RCC_ClockConfig+0x358>)
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	4939      	ldr	r1, [pc, #228]	; (80097c0 <HAL_RCC_ClockConfig+0x358>)
 80096da:	4313      	orrs	r3, r2
 80096dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 0308 	and.w	r3, r3, #8
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d010      	beq.n	800970c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	695a      	ldr	r2, [r3, #20]
 80096ee:	4b34      	ldr	r3, [pc, #208]	; (80097c0 <HAL_RCC_ClockConfig+0x358>)
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d208      	bcs.n	800970c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096fa:	4b31      	ldr	r3, [pc, #196]	; (80097c0 <HAL_RCC_ClockConfig+0x358>)
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	492e      	ldr	r1, [pc, #184]	; (80097c0 <HAL_RCC_ClockConfig+0x358>)
 8009708:	4313      	orrs	r3, r2
 800970a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0310 	and.w	r3, r3, #16
 8009714:	2b00      	cmp	r3, #0
 8009716:	d010      	beq.n	800973a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	699a      	ldr	r2, [r3, #24]
 800971c:	4b28      	ldr	r3, [pc, #160]	; (80097c0 <HAL_RCC_ClockConfig+0x358>)
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009724:	429a      	cmp	r2, r3
 8009726:	d208      	bcs.n	800973a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009728:	4b25      	ldr	r3, [pc, #148]	; (80097c0 <HAL_RCC_ClockConfig+0x358>)
 800972a:	69db      	ldr	r3, [r3, #28]
 800972c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	4922      	ldr	r1, [pc, #136]	; (80097c0 <HAL_RCC_ClockConfig+0x358>)
 8009736:	4313      	orrs	r3, r2
 8009738:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 0320 	and.w	r3, r3, #32
 8009742:	2b00      	cmp	r3, #0
 8009744:	d010      	beq.n	8009768 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	69da      	ldr	r2, [r3, #28]
 800974a:	4b1d      	ldr	r3, [pc, #116]	; (80097c0 <HAL_RCC_ClockConfig+0x358>)
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009752:	429a      	cmp	r2, r3
 8009754:	d208      	bcs.n	8009768 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009756:	4b1a      	ldr	r3, [pc, #104]	; (80097c0 <HAL_RCC_ClockConfig+0x358>)
 8009758:	6a1b      	ldr	r3, [r3, #32]
 800975a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	4917      	ldr	r1, [pc, #92]	; (80097c0 <HAL_RCC_ClockConfig+0x358>)
 8009764:	4313      	orrs	r3, r2
 8009766:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009768:	f000 f834 	bl	80097d4 <HAL_RCC_GetSysClockFreq>
 800976c:	4602      	mov	r2, r0
 800976e:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <HAL_RCC_ClockConfig+0x358>)
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	0a1b      	lsrs	r3, r3, #8
 8009774:	f003 030f 	and.w	r3, r3, #15
 8009778:	4912      	ldr	r1, [pc, #72]	; (80097c4 <HAL_RCC_ClockConfig+0x35c>)
 800977a:	5ccb      	ldrb	r3, [r1, r3]
 800977c:	f003 031f 	and.w	r3, r3, #31
 8009780:	fa22 f303 	lsr.w	r3, r2, r3
 8009784:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009786:	4b0e      	ldr	r3, [pc, #56]	; (80097c0 <HAL_RCC_ClockConfig+0x358>)
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	f003 030f 	and.w	r3, r3, #15
 800978e:	4a0d      	ldr	r2, [pc, #52]	; (80097c4 <HAL_RCC_ClockConfig+0x35c>)
 8009790:	5cd3      	ldrb	r3, [r2, r3]
 8009792:	f003 031f 	and.w	r3, r3, #31
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	fa22 f303 	lsr.w	r3, r2, r3
 800979c:	4a0a      	ldr	r2, [pc, #40]	; (80097c8 <HAL_RCC_ClockConfig+0x360>)
 800979e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097a0:	4a0a      	ldr	r2, [pc, #40]	; (80097cc <HAL_RCC_ClockConfig+0x364>)
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80097a6:	4b0a      	ldr	r3, [pc, #40]	; (80097d0 <HAL_RCC_ClockConfig+0x368>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fc f912 	bl	80059d4 <HAL_InitTick>
 80097b0:	4603      	mov	r3, r0
 80097b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3718      	adds	r7, #24
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	58024400 	.word	0x58024400
 80097c4:	0800f484 	.word	0x0800f484
 80097c8:	24000004 	.word	0x24000004
 80097cc:	24000000 	.word	0x24000000
 80097d0:	24000008 	.word	0x24000008

080097d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b089      	sub	sp, #36	; 0x24
 80097d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097da:	4bb3      	ldr	r3, [pc, #716]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097e2:	2b18      	cmp	r3, #24
 80097e4:	f200 8155 	bhi.w	8009a92 <HAL_RCC_GetSysClockFreq+0x2be>
 80097e8:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80097ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ee:	bf00      	nop
 80097f0:	08009855 	.word	0x08009855
 80097f4:	08009a93 	.word	0x08009a93
 80097f8:	08009a93 	.word	0x08009a93
 80097fc:	08009a93 	.word	0x08009a93
 8009800:	08009a93 	.word	0x08009a93
 8009804:	08009a93 	.word	0x08009a93
 8009808:	08009a93 	.word	0x08009a93
 800980c:	08009a93 	.word	0x08009a93
 8009810:	0800987b 	.word	0x0800987b
 8009814:	08009a93 	.word	0x08009a93
 8009818:	08009a93 	.word	0x08009a93
 800981c:	08009a93 	.word	0x08009a93
 8009820:	08009a93 	.word	0x08009a93
 8009824:	08009a93 	.word	0x08009a93
 8009828:	08009a93 	.word	0x08009a93
 800982c:	08009a93 	.word	0x08009a93
 8009830:	08009881 	.word	0x08009881
 8009834:	08009a93 	.word	0x08009a93
 8009838:	08009a93 	.word	0x08009a93
 800983c:	08009a93 	.word	0x08009a93
 8009840:	08009a93 	.word	0x08009a93
 8009844:	08009a93 	.word	0x08009a93
 8009848:	08009a93 	.word	0x08009a93
 800984c:	08009a93 	.word	0x08009a93
 8009850:	08009887 	.word	0x08009887
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009854:	4b94      	ldr	r3, [pc, #592]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0320 	and.w	r3, r3, #32
 800985c:	2b00      	cmp	r3, #0
 800985e:	d009      	beq.n	8009874 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009860:	4b91      	ldr	r3, [pc, #580]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	08db      	lsrs	r3, r3, #3
 8009866:	f003 0303 	and.w	r3, r3, #3
 800986a:	4a90      	ldr	r2, [pc, #576]	; (8009aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800986c:	fa22 f303 	lsr.w	r3, r2, r3
 8009870:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009872:	e111      	b.n	8009a98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009874:	4b8d      	ldr	r3, [pc, #564]	; (8009aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009876:	61bb      	str	r3, [r7, #24]
    break;
 8009878:	e10e      	b.n	8009a98 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800987a:	4b8d      	ldr	r3, [pc, #564]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800987c:	61bb      	str	r3, [r7, #24]
    break;
 800987e:	e10b      	b.n	8009a98 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009880:	4b8c      	ldr	r3, [pc, #560]	; (8009ab4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009882:	61bb      	str	r3, [r7, #24]
    break;
 8009884:	e108      	b.n	8009a98 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009886:	4b88      	ldr	r3, [pc, #544]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988a:	f003 0303 	and.w	r3, r3, #3
 800988e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009890:	4b85      	ldr	r3, [pc, #532]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009894:	091b      	lsrs	r3, r3, #4
 8009896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800989a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800989c:	4b82      	ldr	r3, [pc, #520]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800989e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80098a6:	4b80      	ldr	r3, [pc, #512]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098aa:	08db      	lsrs	r3, r3, #3
 80098ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	fb02 f303 	mul.w	r3, r2, r3
 80098b6:	ee07 3a90 	vmov	s15, r3
 80098ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 80e1 	beq.w	8009a8c <HAL_RCC_GetSysClockFreq+0x2b8>
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	f000 8083 	beq.w	80099d8 <HAL_RCC_GetSysClockFreq+0x204>
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	f200 80a1 	bhi.w	8009a1c <HAL_RCC_GetSysClockFreq+0x248>
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <HAL_RCC_GetSysClockFreq+0x114>
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d056      	beq.n	8009994 <HAL_RCC_GetSysClockFreq+0x1c0>
 80098e6:	e099      	b.n	8009a1c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098e8:	4b6f      	ldr	r3, [pc, #444]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0320 	and.w	r3, r3, #32
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d02d      	beq.n	8009950 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098f4:	4b6c      	ldr	r3, [pc, #432]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	08db      	lsrs	r3, r3, #3
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	4a6b      	ldr	r2, [pc, #428]	; (8009aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009900:	fa22 f303 	lsr.w	r3, r2, r3
 8009904:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	ee07 3a90 	vmov	s15, r3
 800990c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991e:	4b62      	ldr	r3, [pc, #392]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009932:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800994e:	e087      	b.n	8009a60 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009abc <HAL_RCC_GetSysClockFreq+0x2e8>
 800995e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009962:	4b51      	ldr	r3, [pc, #324]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009972:	ed97 6a02 	vldr	s12, [r7, #8]
 8009976:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800997a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009992:	e065      	b.n	8009a60 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009ac0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80099a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a6:	4b40      	ldr	r3, [pc, #256]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80099ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099d6:	e043      	b.n	8009a60 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009ac4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80099e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ea:	4b2f      	ldr	r3, [pc, #188]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80099fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a1a:	e021      	b.n	8009a60 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	ee07 3a90 	vmov	s15, r3
 8009a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a26:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009ac0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a2e:	4b1e      	ldr	r3, [pc, #120]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a42:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a5e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009a60:	4b11      	ldr	r3, [pc, #68]	; (8009aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a64:	0a5b      	lsrs	r3, r3, #9
 8009a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	ee07 3a90 	vmov	s15, r3
 8009a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a84:	ee17 3a90 	vmov	r3, s15
 8009a88:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009a8a:	e005      	b.n	8009a98 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	61bb      	str	r3, [r7, #24]
    break;
 8009a90:	e002      	b.n	8009a98 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009a92:	4b07      	ldr	r3, [pc, #28]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a94:	61bb      	str	r3, [r7, #24]
    break;
 8009a96:	bf00      	nop
  }

  return sysclockfreq;
 8009a98:	69bb      	ldr	r3, [r7, #24]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3724      	adds	r7, #36	; 0x24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	58024400 	.word	0x58024400
 8009aac:	03d09000 	.word	0x03d09000
 8009ab0:	003d0900 	.word	0x003d0900
 8009ab4:	007a1200 	.word	0x007a1200
 8009ab8:	46000000 	.word	0x46000000
 8009abc:	4c742400 	.word	0x4c742400
 8009ac0:	4a742400 	.word	0x4a742400
 8009ac4:	4af42400 	.word	0x4af42400

08009ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009ace:	f7ff fe81 	bl	80097d4 <HAL_RCC_GetSysClockFreq>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	4b10      	ldr	r3, [pc, #64]	; (8009b18 <HAL_RCC_GetHCLKFreq+0x50>)
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	0a1b      	lsrs	r3, r3, #8
 8009ada:	f003 030f 	and.w	r3, r3, #15
 8009ade:	490f      	ldr	r1, [pc, #60]	; (8009b1c <HAL_RCC_GetHCLKFreq+0x54>)
 8009ae0:	5ccb      	ldrb	r3, [r1, r3]
 8009ae2:	f003 031f 	and.w	r3, r3, #31
 8009ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009aec:	4b0a      	ldr	r3, [pc, #40]	; (8009b18 <HAL_RCC_GetHCLKFreq+0x50>)
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	f003 030f 	and.w	r3, r3, #15
 8009af4:	4a09      	ldr	r2, [pc, #36]	; (8009b1c <HAL_RCC_GetHCLKFreq+0x54>)
 8009af6:	5cd3      	ldrb	r3, [r2, r3]
 8009af8:	f003 031f 	and.w	r3, r3, #31
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	fa22 f303 	lsr.w	r3, r2, r3
 8009b02:	4a07      	ldr	r2, [pc, #28]	; (8009b20 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b06:	4a07      	ldr	r2, [pc, #28]	; (8009b24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009b0c:	4b04      	ldr	r3, [pc, #16]	; (8009b20 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	58024400 	.word	0x58024400
 8009b1c:	0800f484 	.word	0x0800f484
 8009b20:	24000004 	.word	0x24000004
 8009b24:	24000000 	.word	0x24000000

08009b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009b2c:	f7ff ffcc 	bl	8009ac8 <HAL_RCC_GetHCLKFreq>
 8009b30:	4602      	mov	r2, r0
 8009b32:	4b06      	ldr	r3, [pc, #24]	; (8009b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b34:	69db      	ldr	r3, [r3, #28]
 8009b36:	091b      	lsrs	r3, r3, #4
 8009b38:	f003 0307 	and.w	r3, r3, #7
 8009b3c:	4904      	ldr	r1, [pc, #16]	; (8009b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009b3e:	5ccb      	ldrb	r3, [r1, r3]
 8009b40:	f003 031f 	and.w	r3, r3, #31
 8009b44:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	58024400 	.word	0x58024400
 8009b50:	0800f484 	.word	0x0800f484

08009b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009b58:	f7ff ffb6 	bl	8009ac8 <HAL_RCC_GetHCLKFreq>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	4b06      	ldr	r3, [pc, #24]	; (8009b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	0a1b      	lsrs	r3, r3, #8
 8009b64:	f003 0307 	and.w	r3, r3, #7
 8009b68:	4904      	ldr	r1, [pc, #16]	; (8009b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009b6a:	5ccb      	ldrb	r3, [r1, r3]
 8009b6c:	f003 031f 	and.w	r3, r3, #31
 8009b70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	58024400 	.word	0x58024400
 8009b7c:	0800f484 	.word	0x0800f484

08009b80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b88:	2300      	movs	r3, #0
 8009b8a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d03f      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ba0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ba4:	d02a      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009ba6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009baa:	d824      	bhi.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009bac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bb0:	d018      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bb6:	d81e      	bhi.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bc0:	d007      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009bc2:	e018      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bc4:	4ba4      	ldr	r3, [pc, #656]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc8:	4aa3      	ldr	r2, [pc, #652]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009bd0:	e015      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	2102      	movs	r1, #2
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f001 f989 	bl	800aef0 <RCCEx_PLL2_Config>
 8009bde:	4603      	mov	r3, r0
 8009be0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009be2:	e00c      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3324      	adds	r3, #36	; 0x24
 8009be8:	2102      	movs	r1, #2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f001 fa32 	bl	800b054 <RCCEx_PLL3_Config>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009bf4:	e003      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8009bfa:	e000      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d109      	bne.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009c04:	4b94      	ldr	r3, [pc, #592]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c10:	4991      	ldr	r1, [pc, #580]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	650b      	str	r3, [r1, #80]	; 0x50
 8009c16:	e001      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c18:	7dfb      	ldrb	r3, [r7, #23]
 8009c1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d03d      	beq.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	d826      	bhi.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009c30:	a201      	add	r2, pc, #4	; (adr r2, 8009c38 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c36:	bf00      	nop
 8009c38:	08009c4d 	.word	0x08009c4d
 8009c3c:	08009c5b 	.word	0x08009c5b
 8009c40:	08009c6d 	.word	0x08009c6d
 8009c44:	08009c85 	.word	0x08009c85
 8009c48:	08009c85 	.word	0x08009c85
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c4c:	4b82      	ldr	r3, [pc, #520]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	4a81      	ldr	r2, [pc, #516]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c58:	e015      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	2100      	movs	r1, #0
 8009c60:	4618      	mov	r0, r3
 8009c62:	f001 f945 	bl	800aef0 <RCCEx_PLL2_Config>
 8009c66:	4603      	mov	r3, r0
 8009c68:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c6a:	e00c      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	3324      	adds	r3, #36	; 0x24
 8009c70:	2100      	movs	r1, #0
 8009c72:	4618      	mov	r0, r3
 8009c74:	f001 f9ee 	bl	800b054 <RCCEx_PLL3_Config>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c7c:	e003      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	75fb      	strb	r3, [r7, #23]
      break;
 8009c82:	e000      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c86:	7dfb      	ldrb	r3, [r7, #23]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d109      	bne.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c8c:	4b72      	ldr	r3, [pc, #456]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c90:	f023 0207 	bic.w	r2, r3, #7
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c98:	496f      	ldr	r1, [pc, #444]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	650b      	str	r3, [r1, #80]	; 0x50
 8009c9e:	e001      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca0:	7dfb      	ldrb	r3, [r7, #23]
 8009ca2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d051      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009cb6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009cba:	d036      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009cbc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009cc0:	d830      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009cc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009cc6:	d032      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009cc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ccc:	d82a      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009cce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009cd2:	d02e      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009cd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009cd8:	d824      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cde:	d018      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ce4:	d81e      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009cea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cee:	d007      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009cf0:	e018      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cf2:	4b59      	ldr	r3, [pc, #356]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf6:	4a58      	ldr	r2, [pc, #352]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cfe:	e019      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3304      	adds	r3, #4
 8009d04:	2100      	movs	r1, #0
 8009d06:	4618      	mov	r0, r3
 8009d08:	f001 f8f2 	bl	800aef0 <RCCEx_PLL2_Config>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009d10:	e010      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	3324      	adds	r3, #36	; 0x24
 8009d16:	2100      	movs	r1, #0
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f001 f99b 	bl	800b054 <RCCEx_PLL3_Config>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d22:	e007      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	75fb      	strb	r3, [r7, #23]
      break;
 8009d28:	e004      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009d2a:	bf00      	nop
 8009d2c:	e002      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009d2e:	bf00      	nop
 8009d30:	e000      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d34:	7dfb      	ldrb	r3, [r7, #23]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10a      	bne.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009d3a:	4b47      	ldr	r3, [pc, #284]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d3e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d48:	4943      	ldr	r1, [pc, #268]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	658b      	str	r3, [r1, #88]	; 0x58
 8009d4e:	e001      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
 8009d52:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d051      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d66:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009d6a:	d036      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009d6c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009d70:	d830      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d76:	d032      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d7c:	d82a      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d82:	d02e      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009d84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d88:	d824      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d8e:	d018      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009d90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d94:	d81e      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009d9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d9e:	d007      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009da0:	e018      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009da2:	4b2d      	ldr	r3, [pc, #180]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da6:	4a2c      	ldr	r2, [pc, #176]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009dae:	e019      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3304      	adds	r3, #4
 8009db4:	2100      	movs	r1, #0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f001 f89a 	bl	800aef0 <RCCEx_PLL2_Config>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009dc0:	e010      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3324      	adds	r3, #36	; 0x24
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f001 f943 	bl	800b054 <RCCEx_PLL3_Config>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009dd2:	e007      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd8:	e004      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009dda:	bf00      	nop
 8009ddc:	e002      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009dde:	bf00      	nop
 8009de0:	e000      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009de4:	7dfb      	ldrb	r3, [r7, #23]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10a      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009dea:	4b1b      	ldr	r3, [pc, #108]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dee:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009df8:	4917      	ldr	r1, [pc, #92]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	658b      	str	r3, [r1, #88]	; 0x58
 8009dfe:	e001      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d035      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e14:	2b30      	cmp	r3, #48	; 0x30
 8009e16:	d01c      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009e18:	2b30      	cmp	r3, #48	; 0x30
 8009e1a:	d817      	bhi.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009e1c:	2b20      	cmp	r3, #32
 8009e1e:	d00c      	beq.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009e20:	2b20      	cmp	r3, #32
 8009e22:	d813      	bhi.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d019      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009e28:	2b10      	cmp	r3, #16
 8009e2a:	d10f      	bne.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e2c:	4b0a      	ldr	r3, [pc, #40]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e30:	4a09      	ldr	r2, [pc, #36]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009e38:	e011      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	2102      	movs	r1, #2
 8009e40:	4618      	mov	r0, r3
 8009e42:	f001 f855 	bl	800aef0 <RCCEx_PLL2_Config>
 8009e46:	4603      	mov	r3, r0
 8009e48:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009e4a:	e008      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e50:	e005      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009e52:	bf00      	nop
 8009e54:	e003      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009e56:	bf00      	nop
 8009e58:	58024400 	.word	0x58024400
      break;
 8009e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d109      	bne.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009e64:	4ba3      	ldr	r3, [pc, #652]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e70:	49a0      	ldr	r1, [pc, #640]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009e76:	e001      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d047      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e90:	d030      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e96:	d82a      	bhi.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009e98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e9c:	d02c      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009e9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ea2:	d824      	bhi.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ea8:	d018      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eae:	d81e      	bhi.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d003      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eb8:	d007      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009eba:	e018      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ebc:	4b8d      	ldr	r3, [pc, #564]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec0:	4a8c      	ldr	r2, [pc, #560]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009ec8:	e017      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	2100      	movs	r1, #0
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f001 f80d 	bl	800aef0 <RCCEx_PLL2_Config>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009eda:	e00e      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	3324      	adds	r3, #36	; 0x24
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f001 f8b6 	bl	800b054 <RCCEx_PLL3_Config>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009eec:	e005      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef2:	e002      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009ef4:	bf00      	nop
 8009ef6:	e000      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d109      	bne.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009f00:	4b7c      	ldr	r3, [pc, #496]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f04:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f0c:	4979      	ldr	r1, [pc, #484]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	650b      	str	r3, [r1, #80]	; 0x50
 8009f12:	e001      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f14:	7dfb      	ldrb	r3, [r7, #23]
 8009f16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d049      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f2c:	d02e      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009f2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f32:	d828      	bhi.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009f34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f38:	d02a      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009f3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f3e:	d822      	bhi.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009f40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f44:	d026      	beq.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009f46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f4a:	d81c      	bhi.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009f4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f50:	d010      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f56:	d816      	bhi.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d01d      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f60:	d111      	bne.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	3304      	adds	r3, #4
 8009f66:	2101      	movs	r1, #1
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 ffc1 	bl	800aef0 <RCCEx_PLL2_Config>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f72:	e012      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	3324      	adds	r3, #36	; 0x24
 8009f78:	2101      	movs	r1, #1
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f001 f86a 	bl	800b054 <RCCEx_PLL3_Config>
 8009f80:	4603      	mov	r3, r0
 8009f82:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f84:	e009      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	75fb      	strb	r3, [r7, #23]
      break;
 8009f8a:	e006      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f8c:	bf00      	nop
 8009f8e:	e004      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f90:	bf00      	nop
 8009f92:	e002      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f94:	bf00      	nop
 8009f96:	e000      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d109      	bne.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009fa0:	4b54      	ldr	r3, [pc, #336]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fac:	4951      	ldr	r1, [pc, #324]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	650b      	str	r3, [r1, #80]	; 0x50
 8009fb2:	e001      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d04b      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fce:	d02e      	beq.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fd4:	d828      	bhi.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fda:	d02a      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fe0:	d822      	bhi.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009fe2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fe6:	d026      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009fe8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fec:	d81c      	bhi.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ff2:	d010      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ff8:	d816      	bhi.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d01d      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a002:	d111      	bne.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3304      	adds	r3, #4
 800a008:	2101      	movs	r1, #1
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 ff70 	bl	800aef0 <RCCEx_PLL2_Config>
 800a010:	4603      	mov	r3, r0
 800a012:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a014:	e012      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	3324      	adds	r3, #36	; 0x24
 800a01a:	2101      	movs	r1, #1
 800a01c:	4618      	mov	r0, r3
 800a01e:	f001 f819 	bl	800b054 <RCCEx_PLL3_Config>
 800a022:	4603      	mov	r3, r0
 800a024:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a026:	e009      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	75fb      	strb	r3, [r7, #23]
      break;
 800a02c:	e006      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a02e:	bf00      	nop
 800a030:	e004      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a032:	bf00      	nop
 800a034:	e002      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a036:	bf00      	nop
 800a038:	e000      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a03a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a03c:	7dfb      	ldrb	r3, [r7, #23]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10a      	bne.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a042:	4b2c      	ldr	r3, [pc, #176]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a046:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a050:	4928      	ldr	r1, [pc, #160]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a052:	4313      	orrs	r3, r2
 800a054:	658b      	str	r3, [r1, #88]	; 0x58
 800a056:	e001      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a058:	7dfb      	ldrb	r3, [r7, #23]
 800a05a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d02f      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a06c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a070:	d00e      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a076:	d814      	bhi.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d015      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a07c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a080:	d10f      	bne.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a082:	4b1c      	ldr	r3, [pc, #112]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a086:	4a1b      	ldr	r2, [pc, #108]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a08c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a08e:	e00c      	b.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3304      	adds	r3, #4
 800a094:	2101      	movs	r1, #1
 800a096:	4618      	mov	r0, r3
 800a098:	f000 ff2a 	bl	800aef0 <RCCEx_PLL2_Config>
 800a09c:	4603      	mov	r3, r0
 800a09e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a0a0:	e003      	b.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a0a6:	e000      	b.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a0a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0aa:	7dfb      	ldrb	r3, [r7, #23]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d109      	bne.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a0b0:	4b10      	ldr	r3, [pc, #64]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0bc:	490d      	ldr	r1, [pc, #52]	; (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	650b      	str	r3, [r1, #80]	; 0x50
 800a0c2:	e001      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
 800a0c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d034      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0d8:	2b03      	cmp	r3, #3
 800a0da:	d81d      	bhi.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a0dc:	a201      	add	r2, pc, #4	; (adr r2, 800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e2:	bf00      	nop
 800a0e4:	0800a11f 	.word	0x0800a11f
 800a0e8:	0800a0f9 	.word	0x0800a0f9
 800a0ec:	0800a107 	.word	0x0800a107
 800a0f0:	0800a11f 	.word	0x0800a11f
 800a0f4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0f8:	4bb1      	ldr	r3, [pc, #708]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fc:	4ab0      	ldr	r2, [pc, #704]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a0fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a102:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a104:	e00c      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3304      	adds	r3, #4
 800a10a:	2102      	movs	r1, #2
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 feef 	bl	800aef0 <RCCEx_PLL2_Config>
 800a112:	4603      	mov	r3, r0
 800a114:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a116:	e003      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	75fb      	strb	r3, [r7, #23]
      break;
 800a11c:	e000      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a11e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a120:	7dfb      	ldrb	r3, [r7, #23]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d109      	bne.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a126:	4ba6      	ldr	r3, [pc, #664]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a12a:	f023 0203 	bic.w	r2, r3, #3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a132:	49a3      	ldr	r1, [pc, #652]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a134:	4313      	orrs	r3, r2
 800a136:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a138:	e001      	b.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 8086 	beq.w	800a258 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a14c:	4b9d      	ldr	r3, [pc, #628]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a9c      	ldr	r2, [pc, #624]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a158:	f7fb fc86 	bl	8005a68 <HAL_GetTick>
 800a15c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a15e:	e009      	b.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a160:	f7fb fc82 	bl	8005a68 <HAL_GetTick>
 800a164:	4602      	mov	r2, r0
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	2b64      	cmp	r3, #100	; 0x64
 800a16c:	d902      	bls.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	75fb      	strb	r3, [r7, #23]
        break;
 800a172:	e005      	b.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a174:	4b93      	ldr	r3, [pc, #588]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d0ef      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a180:	7dfb      	ldrb	r3, [r7, #23]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d166      	bne.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a186:	4b8e      	ldr	r3, [pc, #568]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a188:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a190:	4053      	eors	r3, r2
 800a192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a196:	2b00      	cmp	r3, #0
 800a198:	d013      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a19a:	4b89      	ldr	r3, [pc, #548]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a19e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a1a4:	4b86      	ldr	r3, [pc, #536]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1a8:	4a85      	ldr	r2, [pc, #532]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a1b0:	4b83      	ldr	r3, [pc, #524]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b4:	4a82      	ldr	r2, [pc, #520]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a1bc:	4a80      	ldr	r2, [pc, #512]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1cc:	d115      	bne.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ce:	f7fb fc4b 	bl	8005a68 <HAL_GetTick>
 800a1d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1d4:	e00b      	b.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1d6:	f7fb fc47 	bl	8005a68 <HAL_GetTick>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d902      	bls.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	75fb      	strb	r3, [r7, #23]
            break;
 800a1ec:	e005      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1ee:	4b74      	ldr	r3, [pc, #464]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1f2:	f003 0302 	and.w	r3, r3, #2
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d0ed      	beq.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d126      	bne.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a20a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a20e:	d10d      	bne.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a210:	4b6b      	ldr	r3, [pc, #428]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a21e:	0919      	lsrs	r1, r3, #4
 800a220:	4b69      	ldr	r3, [pc, #420]	; (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a222:	400b      	ands	r3, r1
 800a224:	4966      	ldr	r1, [pc, #408]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a226:	4313      	orrs	r3, r2
 800a228:	610b      	str	r3, [r1, #16]
 800a22a:	e005      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a22c:	4b64      	ldr	r3, [pc, #400]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	4a63      	ldr	r2, [pc, #396]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a232:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a236:	6113      	str	r3, [r2, #16]
 800a238:	4b61      	ldr	r3, [pc, #388]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a23a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a246:	495e      	ldr	r1, [pc, #376]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a248:	4313      	orrs	r3, r2
 800a24a:	670b      	str	r3, [r1, #112]	; 0x70
 800a24c:	e004      	b.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a24e:	7dfb      	ldrb	r3, [r7, #23]
 800a250:	75bb      	strb	r3, [r7, #22]
 800a252:	e001      	b.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a254:	7dfb      	ldrb	r3, [r7, #23]
 800a256:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 0301 	and.w	r3, r3, #1
 800a260:	2b00      	cmp	r3, #0
 800a262:	d07e      	beq.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a268:	2b28      	cmp	r3, #40	; 0x28
 800a26a:	d867      	bhi.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a26c:	a201      	add	r2, pc, #4	; (adr r2, 800a274 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a272:	bf00      	nop
 800a274:	0800a343 	.word	0x0800a343
 800a278:	0800a33d 	.word	0x0800a33d
 800a27c:	0800a33d 	.word	0x0800a33d
 800a280:	0800a33d 	.word	0x0800a33d
 800a284:	0800a33d 	.word	0x0800a33d
 800a288:	0800a33d 	.word	0x0800a33d
 800a28c:	0800a33d 	.word	0x0800a33d
 800a290:	0800a33d 	.word	0x0800a33d
 800a294:	0800a319 	.word	0x0800a319
 800a298:	0800a33d 	.word	0x0800a33d
 800a29c:	0800a33d 	.word	0x0800a33d
 800a2a0:	0800a33d 	.word	0x0800a33d
 800a2a4:	0800a33d 	.word	0x0800a33d
 800a2a8:	0800a33d 	.word	0x0800a33d
 800a2ac:	0800a33d 	.word	0x0800a33d
 800a2b0:	0800a33d 	.word	0x0800a33d
 800a2b4:	0800a32b 	.word	0x0800a32b
 800a2b8:	0800a33d 	.word	0x0800a33d
 800a2bc:	0800a33d 	.word	0x0800a33d
 800a2c0:	0800a33d 	.word	0x0800a33d
 800a2c4:	0800a33d 	.word	0x0800a33d
 800a2c8:	0800a33d 	.word	0x0800a33d
 800a2cc:	0800a33d 	.word	0x0800a33d
 800a2d0:	0800a33d 	.word	0x0800a33d
 800a2d4:	0800a343 	.word	0x0800a343
 800a2d8:	0800a33d 	.word	0x0800a33d
 800a2dc:	0800a33d 	.word	0x0800a33d
 800a2e0:	0800a33d 	.word	0x0800a33d
 800a2e4:	0800a33d 	.word	0x0800a33d
 800a2e8:	0800a33d 	.word	0x0800a33d
 800a2ec:	0800a33d 	.word	0x0800a33d
 800a2f0:	0800a33d 	.word	0x0800a33d
 800a2f4:	0800a343 	.word	0x0800a343
 800a2f8:	0800a33d 	.word	0x0800a33d
 800a2fc:	0800a33d 	.word	0x0800a33d
 800a300:	0800a33d 	.word	0x0800a33d
 800a304:	0800a33d 	.word	0x0800a33d
 800a308:	0800a33d 	.word	0x0800a33d
 800a30c:	0800a33d 	.word	0x0800a33d
 800a310:	0800a33d 	.word	0x0800a33d
 800a314:	0800a343 	.word	0x0800a343
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	3304      	adds	r3, #4
 800a31c:	2101      	movs	r1, #1
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 fde6 	bl	800aef0 <RCCEx_PLL2_Config>
 800a324:	4603      	mov	r3, r0
 800a326:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a328:	e00c      	b.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	3324      	adds	r3, #36	; 0x24
 800a32e:	2101      	movs	r1, #1
 800a330:	4618      	mov	r0, r3
 800a332:	f000 fe8f 	bl	800b054 <RCCEx_PLL3_Config>
 800a336:	4603      	mov	r3, r0
 800a338:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a33a:	e003      	b.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	75fb      	strb	r3, [r7, #23]
      break;
 800a340:	e000      	b.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a342:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a344:	7dfb      	ldrb	r3, [r7, #23]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d109      	bne.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a34a:	4b1d      	ldr	r3, [pc, #116]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a34c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a34e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a356:	491a      	ldr	r1, [pc, #104]	; (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a358:	4313      	orrs	r3, r2
 800a35a:	654b      	str	r3, [r1, #84]	; 0x54
 800a35c:	e001      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a35e:	7dfb      	ldrb	r3, [r7, #23]
 800a360:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0302 	and.w	r3, r3, #2
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d03e      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a372:	2b05      	cmp	r3, #5
 800a374:	d820      	bhi.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a376:	a201      	add	r2, pc, #4	; (adr r2, 800a37c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37c:	0800a3cd 	.word	0x0800a3cd
 800a380:	0800a395 	.word	0x0800a395
 800a384:	0800a3a7 	.word	0x0800a3a7
 800a388:	0800a3cd 	.word	0x0800a3cd
 800a38c:	0800a3cd 	.word	0x0800a3cd
 800a390:	0800a3cd 	.word	0x0800a3cd
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3304      	adds	r3, #4
 800a398:	2101      	movs	r1, #1
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 fda8 	bl	800aef0 <RCCEx_PLL2_Config>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a3a4:	e013      	b.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	3324      	adds	r3, #36	; 0x24
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 fe51 	bl	800b054 <RCCEx_PLL3_Config>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a3b6:	e00a      	b.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a3bc:	e007      	b.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a3be:	bf00      	nop
 800a3c0:	58024400 	.word	0x58024400
 800a3c4:	58024800 	.word	0x58024800
 800a3c8:	00ffffcf 	.word	0x00ffffcf
      break;
 800a3cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d109      	bne.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a3d4:	4b9f      	ldr	r3, [pc, #636]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a3d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d8:	f023 0207 	bic.w	r2, r3, #7
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e0:	499c      	ldr	r1, [pc, #624]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	654b      	str	r3, [r1, #84]	; 0x54
 800a3e6:	e001      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3e8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0304 	and.w	r3, r3, #4
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d039      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3fe:	2b05      	cmp	r3, #5
 800a400:	d820      	bhi.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a402:	a201      	add	r2, pc, #4	; (adr r2, 800a408 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a408:	0800a44b 	.word	0x0800a44b
 800a40c:	0800a421 	.word	0x0800a421
 800a410:	0800a433 	.word	0x0800a433
 800a414:	0800a44b 	.word	0x0800a44b
 800a418:	0800a44b 	.word	0x0800a44b
 800a41c:	0800a44b 	.word	0x0800a44b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	3304      	adds	r3, #4
 800a424:	2101      	movs	r1, #1
 800a426:	4618      	mov	r0, r3
 800a428:	f000 fd62 	bl	800aef0 <RCCEx_PLL2_Config>
 800a42c:	4603      	mov	r3, r0
 800a42e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a430:	e00c      	b.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	3324      	adds	r3, #36	; 0x24
 800a436:	2101      	movs	r1, #1
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fe0b 	bl	800b054 <RCCEx_PLL3_Config>
 800a43e:	4603      	mov	r3, r0
 800a440:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a442:	e003      	b.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	75fb      	strb	r3, [r7, #23]
      break;
 800a448:	e000      	b.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a44a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a44c:	7dfb      	ldrb	r3, [r7, #23]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10a      	bne.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a452:	4b80      	ldr	r3, [pc, #512]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a456:	f023 0207 	bic.w	r2, r3, #7
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a460:	497c      	ldr	r1, [pc, #496]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a462:	4313      	orrs	r3, r2
 800a464:	658b      	str	r3, [r1, #88]	; 0x58
 800a466:	e001      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 0320 	and.w	r3, r3, #32
 800a474:	2b00      	cmp	r3, #0
 800a476:	d04b      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a47e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a482:	d02e      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a488:	d828      	bhi.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a48a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a48e:	d02a      	beq.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a494:	d822      	bhi.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a496:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a49a:	d026      	beq.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a49c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a4a0:	d81c      	bhi.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a4a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4a6:	d010      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a4a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4ac:	d816      	bhi.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d01d      	beq.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a4b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4b6:	d111      	bne.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	2100      	movs	r1, #0
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 fd16 	bl	800aef0 <RCCEx_PLL2_Config>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a4c8:	e012      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3324      	adds	r3, #36	; 0x24
 800a4ce:	2102      	movs	r1, #2
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 fdbf 	bl	800b054 <RCCEx_PLL3_Config>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a4da:	e009      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	75fb      	strb	r3, [r7, #23]
      break;
 800a4e0:	e006      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a4e2:	bf00      	nop
 800a4e4:	e004      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a4e6:	bf00      	nop
 800a4e8:	e002      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a4ea:	bf00      	nop
 800a4ec:	e000      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a4ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4f0:	7dfb      	ldrb	r3, [r7, #23]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10a      	bne.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a4f6:	4b57      	ldr	r3, [pc, #348]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a504:	4953      	ldr	r1, [pc, #332]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a506:	4313      	orrs	r3, r2
 800a508:	654b      	str	r3, [r1, #84]	; 0x54
 800a50a:	e001      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a50c:	7dfb      	ldrb	r3, [r7, #23]
 800a50e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d04b      	beq.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a522:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a526:	d02e      	beq.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a528:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a52c:	d828      	bhi.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a52e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a532:	d02a      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a538:	d822      	bhi.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a53a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a53e:	d026      	beq.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a540:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a544:	d81c      	bhi.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a54a:	d010      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a54c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a550:	d816      	bhi.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a552:	2b00      	cmp	r3, #0
 800a554:	d01d      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a55a:	d111      	bne.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3304      	adds	r3, #4
 800a560:	2100      	movs	r1, #0
 800a562:	4618      	mov	r0, r3
 800a564:	f000 fcc4 	bl	800aef0 <RCCEx_PLL2_Config>
 800a568:	4603      	mov	r3, r0
 800a56a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a56c:	e012      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	3324      	adds	r3, #36	; 0x24
 800a572:	2102      	movs	r1, #2
 800a574:	4618      	mov	r0, r3
 800a576:	f000 fd6d 	bl	800b054 <RCCEx_PLL3_Config>
 800a57a:	4603      	mov	r3, r0
 800a57c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a57e:	e009      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	75fb      	strb	r3, [r7, #23]
      break;
 800a584:	e006      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a586:	bf00      	nop
 800a588:	e004      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a58a:	bf00      	nop
 800a58c:	e002      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a58e:	bf00      	nop
 800a590:	e000      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a592:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a594:	7dfb      	ldrb	r3, [r7, #23]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d10a      	bne.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a59a:	4b2e      	ldr	r3, [pc, #184]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a59c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a59e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5a8:	492a      	ldr	r1, [pc, #168]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	658b      	str	r3, [r1, #88]	; 0x58
 800a5ae:	e001      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b0:	7dfb      	ldrb	r3, [r7, #23]
 800a5b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d04d      	beq.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a5ca:	d02e      	beq.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a5cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a5d0:	d828      	bhi.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a5d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5d6:	d02a      	beq.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a5d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5dc:	d822      	bhi.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a5de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5e2:	d026      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a5e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5e8:	d81c      	bhi.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a5ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5ee:	d010      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a5f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5f4:	d816      	bhi.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d01d      	beq.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a5fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5fe:	d111      	bne.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	3304      	adds	r3, #4
 800a604:	2100      	movs	r1, #0
 800a606:	4618      	mov	r0, r3
 800a608:	f000 fc72 	bl	800aef0 <RCCEx_PLL2_Config>
 800a60c:	4603      	mov	r3, r0
 800a60e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a610:	e012      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	3324      	adds	r3, #36	; 0x24
 800a616:	2102      	movs	r1, #2
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 fd1b 	bl	800b054 <RCCEx_PLL3_Config>
 800a61e:	4603      	mov	r3, r0
 800a620:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a622:	e009      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	75fb      	strb	r3, [r7, #23]
      break;
 800a628:	e006      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a62a:	bf00      	nop
 800a62c:	e004      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a62e:	bf00      	nop
 800a630:	e002      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a632:	bf00      	nop
 800a634:	e000      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a636:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a638:	7dfb      	ldrb	r3, [r7, #23]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10c      	bne.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a63e:	4b05      	ldr	r3, [pc, #20]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a64c:	4901      	ldr	r1, [pc, #4]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	658b      	str	r3, [r1, #88]	; 0x58
 800a652:	e003      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a654:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 0308 	and.w	r3, r3, #8
 800a664:	2b00      	cmp	r3, #0
 800a666:	d018      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a66c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a670:	d10a      	bne.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	3324      	adds	r3, #36	; 0x24
 800a676:	2102      	movs	r1, #2
 800a678:	4618      	mov	r0, r3
 800a67a:	f000 fceb 	bl	800b054 <RCCEx_PLL3_Config>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d001      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a688:	4b8a      	ldr	r3, [pc, #552]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a68c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a694:	4987      	ldr	r1, [pc, #540]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a696:	4313      	orrs	r3, r2
 800a698:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f003 0310 	and.w	r3, r3, #16
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d01a      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6b0:	d10a      	bne.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	3324      	adds	r3, #36	; 0x24
 800a6b6:	2102      	movs	r1, #2
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 fccb 	bl	800b054 <RCCEx_PLL3_Config>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a6c8:	4b7a      	ldr	r3, [pc, #488]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a6ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6d6:	4977      	ldr	r1, [pc, #476]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d034      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a6ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6f2:	d01d      	beq.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a6f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6f8:	d817      	bhi.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d003      	beq.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a6fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a702:	d009      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a704:	e011      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	3304      	adds	r3, #4
 800a70a:	2100      	movs	r1, #0
 800a70c:	4618      	mov	r0, r3
 800a70e:	f000 fbef 	bl	800aef0 <RCCEx_PLL2_Config>
 800a712:	4603      	mov	r3, r0
 800a714:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a716:	e00c      	b.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3324      	adds	r3, #36	; 0x24
 800a71c:	2102      	movs	r1, #2
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 fc98 	bl	800b054 <RCCEx_PLL3_Config>
 800a724:	4603      	mov	r3, r0
 800a726:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a728:	e003      	b.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	75fb      	strb	r3, [r7, #23]
      break;
 800a72e:	e000      	b.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a730:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a732:	7dfb      	ldrb	r3, [r7, #23]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10a      	bne.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a738:	4b5e      	ldr	r3, [pc, #376]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a73a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a73c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a746:	495b      	ldr	r1, [pc, #364]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a748:	4313      	orrs	r3, r2
 800a74a:	658b      	str	r3, [r1, #88]	; 0x58
 800a74c:	e001      	b.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a74e:	7dfb      	ldrb	r3, [r7, #23]
 800a750:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d033      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a764:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a768:	d01c      	beq.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a76a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a76e:	d816      	bhi.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a774:	d003      	beq.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a776:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a77a:	d007      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a77c:	e00f      	b.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a77e:	4b4d      	ldr	r3, [pc, #308]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a782:	4a4c      	ldr	r2, [pc, #304]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a788:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a78a:	e00c      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3324      	adds	r3, #36	; 0x24
 800a790:	2101      	movs	r1, #1
 800a792:	4618      	mov	r0, r3
 800a794:	f000 fc5e 	bl	800b054 <RCCEx_PLL3_Config>
 800a798:	4603      	mov	r3, r0
 800a79a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a79c:	e003      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a7a2:	e000      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a7a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10a      	bne.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a7ac:	4b41      	ldr	r3, [pc, #260]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7ba:	493e      	ldr	r1, [pc, #248]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	654b      	str	r3, [r1, #84]	; 0x54
 800a7c0:	e001      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7c2:	7dfb      	ldrb	r3, [r7, #23]
 800a7c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d029      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d003      	beq.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a7da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7de:	d007      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a7e0:	e00f      	b.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7e2:	4b34      	ldr	r3, [pc, #208]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e6:	4a33      	ldr	r2, [pc, #204]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a7ee:	e00b      	b.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	2102      	movs	r1, #2
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 fb7a 	bl	800aef0 <RCCEx_PLL2_Config>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a800:	e002      	b.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	75fb      	strb	r3, [r7, #23]
      break;
 800a806:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d109      	bne.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a80e:	4b29      	ldr	r3, [pc, #164]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a812:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a81a:	4926      	ldr	r1, [pc, #152]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a81c:	4313      	orrs	r3, r2
 800a81e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a820:	e001      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a822:	7dfb      	ldrb	r3, [r7, #23]
 800a824:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00a      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	3324      	adds	r3, #36	; 0x24
 800a836:	2102      	movs	r1, #2
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 fc0b 	bl	800b054 <RCCEx_PLL3_Config>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a850:	2b00      	cmp	r3, #0
 800a852:	d033      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a85c:	d017      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a85e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a862:	d811      	bhi.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a868:	d013      	beq.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a86a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a86e:	d80b      	bhi.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a870:	2b00      	cmp	r3, #0
 800a872:	d010      	beq.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a878:	d106      	bne.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a87a:	4b0e      	ldr	r3, [pc, #56]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87e:	4a0d      	ldr	r2, [pc, #52]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a884:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a886:	e007      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	75fb      	strb	r3, [r7, #23]
      break;
 800a88c:	e004      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a88e:	bf00      	nop
 800a890:	e002      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a892:	bf00      	nop
 800a894:	e000      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a896:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a898:	7dfb      	ldrb	r3, [r7, #23]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10c      	bne.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a89e:	4b05      	ldr	r3, [pc, #20]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8aa:	4902      	ldr	r1, [pc, #8]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	654b      	str	r3, [r1, #84]	; 0x54
 800a8b0:	e004      	b.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a8b2:	bf00      	nop
 800a8b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d008      	beq.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a8c8:	4b29      	ldr	r3, [pc, #164]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8d4:	4926      	ldr	r1, [pc, #152]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d008      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a8e6:	4b22      	ldr	r3, [pc, #136]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8f2:	491f      	ldr	r1, [pc, #124]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00d      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a904:	4b1a      	ldr	r3, [pc, #104]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	4a19      	ldr	r2, [pc, #100]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a90a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a90e:	6113      	str	r3, [r2, #16]
 800a910:	4b17      	ldr	r3, [pc, #92]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a912:	691a      	ldr	r2, [r3, #16]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a91a:	4915      	ldr	r1, [pc, #84]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a91c:	4313      	orrs	r3, r2
 800a91e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	da08      	bge.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a928:	4b11      	ldr	r3, [pc, #68]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a92a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a92c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a934:	490e      	ldr	r1, [pc, #56]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a936:	4313      	orrs	r3, r2
 800a938:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a942:	2b00      	cmp	r3, #0
 800a944:	d009      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a946:	4b0a      	ldr	r3, [pc, #40]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a94a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a954:	4906      	ldr	r1, [pc, #24]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a956:	4313      	orrs	r3, r2
 800a958:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a95a:	7dbb      	ldrb	r3, [r7, #22]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d101      	bne.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	e000      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
}
 800a966:	4618      	mov	r0, r3
 800a968:	3718      	adds	r7, #24
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	58024400 	.word	0x58024400

0800a974 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a978:	f7ff f8a6 	bl	8009ac8 <HAL_RCC_GetHCLKFreq>
 800a97c:	4602      	mov	r2, r0
 800a97e:	4b06      	ldr	r3, [pc, #24]	; (800a998 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	091b      	lsrs	r3, r3, #4
 800a984:	f003 0307 	and.w	r3, r3, #7
 800a988:	4904      	ldr	r1, [pc, #16]	; (800a99c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a98a:	5ccb      	ldrb	r3, [r1, r3]
 800a98c:	f003 031f 	and.w	r3, r3, #31
 800a990:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a994:	4618      	mov	r0, r3
 800a996:	bd80      	pop	{r7, pc}
 800a998:	58024400 	.word	0x58024400
 800a99c:	0800f484 	.word	0x0800f484

0800a9a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b089      	sub	sp, #36	; 0x24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9a8:	4ba1      	ldr	r3, [pc, #644]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ac:	f003 0303 	and.w	r3, r3, #3
 800a9b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a9b2:	4b9f      	ldr	r3, [pc, #636]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b6:	0b1b      	lsrs	r3, r3, #12
 800a9b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a9be:	4b9c      	ldr	r3, [pc, #624]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c2:	091b      	lsrs	r3, r3, #4
 800a9c4:	f003 0301 	and.w	r3, r3, #1
 800a9c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a9ca:	4b99      	ldr	r3, [pc, #612]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ce:	08db      	lsrs	r3, r3, #3
 800a9d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9d4:	693a      	ldr	r2, [r7, #16]
 800a9d6:	fb02 f303 	mul.w	r3, r2, r3
 800a9da:	ee07 3a90 	vmov	s15, r3
 800a9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f000 8111 	beq.w	800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	f000 8083 	beq.w	800aafc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	f200 80a1 	bhi.w	800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d003      	beq.n	800aa0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d056      	beq.n	800aab8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa0a:	e099      	b.n	800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa0c:	4b88      	ldr	r3, [pc, #544]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 0320 	and.w	r3, r3, #32
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d02d      	beq.n	800aa74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa18:	4b85      	ldr	r3, [pc, #532]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	08db      	lsrs	r3, r3, #3
 800aa1e:	f003 0303 	and.w	r3, r3, #3
 800aa22:	4a84      	ldr	r2, [pc, #528]	; (800ac34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa24:	fa22 f303 	lsr.w	r3, r2, r3
 800aa28:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	ee07 3a90 	vmov	s15, r3
 800aa30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	ee07 3a90 	vmov	s15, r3
 800aa3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa42:	4b7b      	ldr	r3, [pc, #492]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa52:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa56:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ac38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aa72:	e087      	b.n	800ab84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	ee07 3a90 	vmov	s15, r3
 800aa7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa86:	4b6a      	ldr	r3, [pc, #424]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8e:	ee07 3a90 	vmov	s15, r3
 800aa92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa96:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ac38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aab6:	e065      	b.n	800ab84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	ee07 3a90 	vmov	s15, r3
 800aabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaca:	4b59      	ldr	r3, [pc, #356]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad2:	ee07 3a90 	vmov	s15, r3
 800aad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aada:	ed97 6a03 	vldr	s12, [r7, #12]
 800aade:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ac38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aafa:	e043      	b.n	800ab84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ac44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab0e:	4b48      	ldr	r3, [pc, #288]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab16:	ee07 3a90 	vmov	s15, r3
 800ab1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab22:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ac38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab3e:	e021      	b.n	800ab84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	ee07 3a90 	vmov	s15, r3
 800ab46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ac40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab52:	4b37      	ldr	r3, [pc, #220]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab5a:	ee07 3a90 	vmov	s15, r3
 800ab5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab66:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ac38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ab84:	4b2a      	ldr	r3, [pc, #168]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab88:	0a5b      	lsrs	r3, r3, #9
 800ab8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800aba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abaa:	ee17 2a90 	vmov	r2, s15
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800abb2:	4b1f      	ldr	r3, [pc, #124]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb6:	0c1b      	lsrs	r3, r3, #16
 800abb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abbc:	ee07 3a90 	vmov	s15, r3
 800abc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abcc:	edd7 6a07 	vldr	s13, [r7, #28]
 800abd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abd8:	ee17 2a90 	vmov	r2, s15
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800abe0:	4b13      	ldr	r3, [pc, #76]	; (800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe4:	0e1b      	lsrs	r3, r3, #24
 800abe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abfa:	edd7 6a07 	vldr	s13, [r7, #28]
 800abfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac06:	ee17 2a90 	vmov	r2, s15
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac0e:	e008      	b.n	800ac22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	609a      	str	r2, [r3, #8]
}
 800ac22:	bf00      	nop
 800ac24:	3724      	adds	r7, #36	; 0x24
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	58024400 	.word	0x58024400
 800ac34:	03d09000 	.word	0x03d09000
 800ac38:	46000000 	.word	0x46000000
 800ac3c:	4c742400 	.word	0x4c742400
 800ac40:	4a742400 	.word	0x4a742400
 800ac44:	4af42400 	.word	0x4af42400

0800ac48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b089      	sub	sp, #36	; 0x24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac50:	4ba1      	ldr	r3, [pc, #644]	; (800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac54:	f003 0303 	and.w	r3, r3, #3
 800ac58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ac5a:	4b9f      	ldr	r3, [pc, #636]	; (800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5e:	0d1b      	lsrs	r3, r3, #20
 800ac60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac66:	4b9c      	ldr	r3, [pc, #624]	; (800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6a:	0a1b      	lsrs	r3, r3, #8
 800ac6c:	f003 0301 	and.w	r3, r3, #1
 800ac70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ac72:	4b99      	ldr	r3, [pc, #612]	; (800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac76:	08db      	lsrs	r3, r3, #3
 800ac78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac7c:	693a      	ldr	r2, [r7, #16]
 800ac7e:	fb02 f303 	mul.w	r3, r2, r3
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 8111 	beq.w	800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	f000 8083 	beq.w	800ada4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	f200 80a1 	bhi.w	800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d003      	beq.n	800acb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d056      	beq.n	800ad60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800acb2:	e099      	b.n	800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acb4:	4b88      	ldr	r3, [pc, #544]	; (800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 0320 	and.w	r3, r3, #32
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d02d      	beq.n	800ad1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800acc0:	4b85      	ldr	r3, [pc, #532]	; (800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	08db      	lsrs	r3, r3, #3
 800acc6:	f003 0303 	and.w	r3, r3, #3
 800acca:	4a84      	ldr	r2, [pc, #528]	; (800aedc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800accc:	fa22 f303 	lsr.w	r3, r2, r3
 800acd0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	ee07 3a90 	vmov	s15, r3
 800acd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acea:	4b7b      	ldr	r3, [pc, #492]	; (800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acf2:	ee07 3a90 	vmov	s15, r3
 800acf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800acfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ad1a:	e087      	b.n	800ae2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	ee07 3a90 	vmov	s15, r3
 800ad22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad2e:	4b6a      	ldr	r3, [pc, #424]	; (800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad36:	ee07 3a90 	vmov	s15, r3
 800ad3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad42:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad5e:	e065      	b.n	800ae2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aee8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad72:	4b59      	ldr	r3, [pc, #356]	; (800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad7a:	ee07 3a90 	vmov	s15, r3
 800ad7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad86:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ada2:	e043      	b.n	800ae2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	ee07 3a90 	vmov	s15, r3
 800adaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aeec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800adb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adb6:	4b48      	ldr	r3, [pc, #288]	; (800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adca:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800add2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800add6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ade6:	e021      	b.n	800ae2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	ee07 3a90 	vmov	s15, r3
 800adee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aee8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adfa:	4b37      	ldr	r3, [pc, #220]	; (800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae02:	ee07 3a90 	vmov	s15, r3
 800ae06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ae2c:	4b2a      	ldr	r3, [pc, #168]	; (800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae30:	0a5b      	lsrs	r3, r3, #9
 800ae32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae36:	ee07 3a90 	vmov	s15, r3
 800ae3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae46:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae52:	ee17 2a90 	vmov	r2, s15
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ae5a:	4b1f      	ldr	r3, [pc, #124]	; (800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5e:	0c1b      	lsrs	r3, r3, #16
 800ae60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae64:	ee07 3a90 	vmov	s15, r3
 800ae68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae74:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae80:	ee17 2a90 	vmov	r2, s15
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ae88:	4b13      	ldr	r3, [pc, #76]	; (800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8c:	0e1b      	lsrs	r3, r3, #24
 800ae8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae92:	ee07 3a90 	vmov	s15, r3
 800ae96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aea2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeae:	ee17 2a90 	vmov	r2, s15
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aeb6:	e008      	b.n	800aeca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	609a      	str	r2, [r3, #8]
}
 800aeca:	bf00      	nop
 800aecc:	3724      	adds	r7, #36	; 0x24
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	58024400 	.word	0x58024400
 800aedc:	03d09000 	.word	0x03d09000
 800aee0:	46000000 	.word	0x46000000
 800aee4:	4c742400 	.word	0x4c742400
 800aee8:	4a742400 	.word	0x4a742400
 800aeec:	4af42400 	.word	0x4af42400

0800aef0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aefe:	4b53      	ldr	r3, [pc, #332]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800af00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af02:	f003 0303 	and.w	r3, r3, #3
 800af06:	2b03      	cmp	r3, #3
 800af08:	d101      	bne.n	800af0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	e099      	b.n	800b042 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800af0e:	4b4f      	ldr	r3, [pc, #316]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a4e      	ldr	r2, [pc, #312]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800af14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800af18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af1a:	f7fa fda5 	bl	8005a68 <HAL_GetTick>
 800af1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af20:	e008      	b.n	800af34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800af22:	f7fa fda1 	bl	8005a68 <HAL_GetTick>
 800af26:	4602      	mov	r2, r0
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d901      	bls.n	800af34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e086      	b.n	800b042 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af34:	4b45      	ldr	r3, [pc, #276]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1f0      	bne.n	800af22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800af40:	4b42      	ldr	r3, [pc, #264]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800af42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	031b      	lsls	r3, r3, #12
 800af4e:	493f      	ldr	r1, [pc, #252]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800af50:	4313      	orrs	r3, r2
 800af52:	628b      	str	r3, [r1, #40]	; 0x28
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	3b01      	subs	r3, #1
 800af5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	3b01      	subs	r3, #1
 800af64:	025b      	lsls	r3, r3, #9
 800af66:	b29b      	uxth	r3, r3
 800af68:	431a      	orrs	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	3b01      	subs	r3, #1
 800af70:	041b      	lsls	r3, r3, #16
 800af72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800af76:	431a      	orrs	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	3b01      	subs	r3, #1
 800af7e:	061b      	lsls	r3, r3, #24
 800af80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800af84:	4931      	ldr	r1, [pc, #196]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800af86:	4313      	orrs	r3, r2
 800af88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800af8a:	4b30      	ldr	r3, [pc, #192]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800af8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	695b      	ldr	r3, [r3, #20]
 800af96:	492d      	ldr	r1, [pc, #180]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800af98:	4313      	orrs	r3, r2
 800af9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800af9c:	4b2b      	ldr	r3, [pc, #172]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	f023 0220 	bic.w	r2, r3, #32
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	4928      	ldr	r1, [pc, #160]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800afaa:	4313      	orrs	r3, r2
 800afac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800afae:	4b27      	ldr	r3, [pc, #156]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800afb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb2:	4a26      	ldr	r2, [pc, #152]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800afb4:	f023 0310 	bic.w	r3, r3, #16
 800afb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800afba:	4b24      	ldr	r3, [pc, #144]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800afbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afbe:	4b24      	ldr	r3, [pc, #144]	; (800b050 <RCCEx_PLL2_Config+0x160>)
 800afc0:	4013      	ands	r3, r2
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	69d2      	ldr	r2, [r2, #28]
 800afc6:	00d2      	lsls	r2, r2, #3
 800afc8:	4920      	ldr	r1, [pc, #128]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800afca:	4313      	orrs	r3, r2
 800afcc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800afce:	4b1f      	ldr	r3, [pc, #124]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800afd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd2:	4a1e      	ldr	r2, [pc, #120]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800afd4:	f043 0310 	orr.w	r3, r3, #16
 800afd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d106      	bne.n	800afee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800afe0:	4b1a      	ldr	r3, [pc, #104]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800afe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe4:	4a19      	ldr	r2, [pc, #100]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800afe6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800afec:	e00f      	b.n	800b00e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d106      	bne.n	800b002 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aff4:	4b15      	ldr	r3, [pc, #84]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800aff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff8:	4a14      	ldr	r2, [pc, #80]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800affa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800affe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b000:	e005      	b.n	800b00e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b002:	4b12      	ldr	r3, [pc, #72]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800b004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b006:	4a11      	ldr	r2, [pc, #68]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800b008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b00c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b00e:	4b0f      	ldr	r3, [pc, #60]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a0e      	ldr	r2, [pc, #56]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800b014:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b01a:	f7fa fd25 	bl	8005a68 <HAL_GetTick>
 800b01e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b020:	e008      	b.n	800b034 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b022:	f7fa fd21 	bl	8005a68 <HAL_GetTick>
 800b026:	4602      	mov	r2, r0
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d901      	bls.n	800b034 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b030:	2303      	movs	r3, #3
 800b032:	e006      	b.n	800b042 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b034:	4b05      	ldr	r3, [pc, #20]	; (800b04c <RCCEx_PLL2_Config+0x15c>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d0f0      	beq.n	800b022 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b040:	7bfb      	ldrb	r3, [r7, #15]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	58024400 	.word	0x58024400
 800b050:	ffff0007 	.word	0xffff0007

0800b054 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b062:	4b53      	ldr	r3, [pc, #332]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b066:	f003 0303 	and.w	r3, r3, #3
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	d101      	bne.n	800b072 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e099      	b.n	800b1a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b072:	4b4f      	ldr	r3, [pc, #316]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a4e      	ldr	r2, [pc, #312]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b07c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b07e:	f7fa fcf3 	bl	8005a68 <HAL_GetTick>
 800b082:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b084:	e008      	b.n	800b098 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b086:	f7fa fcef 	bl	8005a68 <HAL_GetTick>
 800b08a:	4602      	mov	r2, r0
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	1ad3      	subs	r3, r2, r3
 800b090:	2b02      	cmp	r3, #2
 800b092:	d901      	bls.n	800b098 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b094:	2303      	movs	r3, #3
 800b096:	e086      	b.n	800b1a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b098:	4b45      	ldr	r3, [pc, #276]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1f0      	bne.n	800b086 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b0a4:	4b42      	ldr	r3, [pc, #264]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	051b      	lsls	r3, r3, #20
 800b0b2:	493f      	ldr	r1, [pc, #252]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	628b      	str	r3, [r1, #40]	; 0x28
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	025b      	lsls	r3, r3, #9
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	041b      	lsls	r3, r3, #16
 800b0d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b0da:	431a      	orrs	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	061b      	lsls	r3, r3, #24
 800b0e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b0e8:	4931      	ldr	r1, [pc, #196]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b0ee:	4b30      	ldr	r3, [pc, #192]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	492d      	ldr	r1, [pc, #180]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b100:	4b2b      	ldr	r3, [pc, #172]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b104:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	699b      	ldr	r3, [r3, #24]
 800b10c:	4928      	ldr	r1, [pc, #160]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b112:	4b27      	ldr	r3, [pc, #156]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b116:	4a26      	ldr	r2, [pc, #152]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b11c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b11e:	4b24      	ldr	r3, [pc, #144]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b122:	4b24      	ldr	r3, [pc, #144]	; (800b1b4 <RCCEx_PLL3_Config+0x160>)
 800b124:	4013      	ands	r3, r2
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	69d2      	ldr	r2, [r2, #28]
 800b12a:	00d2      	lsls	r2, r2, #3
 800b12c:	4920      	ldr	r1, [pc, #128]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b12e:	4313      	orrs	r3, r2
 800b130:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b132:	4b1f      	ldr	r3, [pc, #124]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b136:	4a1e      	ldr	r2, [pc, #120]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b13c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d106      	bne.n	800b152 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b144:	4b1a      	ldr	r3, [pc, #104]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b148:	4a19      	ldr	r2, [pc, #100]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b14a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b14e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b150:	e00f      	b.n	800b172 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d106      	bne.n	800b166 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b158:	4b15      	ldr	r3, [pc, #84]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15c:	4a14      	ldr	r2, [pc, #80]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b15e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b162:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b164:	e005      	b.n	800b172 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b166:	4b12      	ldr	r3, [pc, #72]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16a:	4a11      	ldr	r2, [pc, #68]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b16c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b170:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b172:	4b0f      	ldr	r3, [pc, #60]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a0e      	ldr	r2, [pc, #56]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b17c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b17e:	f7fa fc73 	bl	8005a68 <HAL_GetTick>
 800b182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b184:	e008      	b.n	800b198 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b186:	f7fa fc6f 	bl	8005a68 <HAL_GetTick>
 800b18a:	4602      	mov	r2, r0
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	2b02      	cmp	r3, #2
 800b192:	d901      	bls.n	800b198 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b194:	2303      	movs	r3, #3
 800b196:	e006      	b.n	800b1a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b198:	4b05      	ldr	r3, [pc, #20]	; (800b1b0 <RCCEx_PLL3_Config+0x15c>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d0f0      	beq.n	800b186 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	58024400 	.word	0x58024400
 800b1b4:	ffff0007 	.word	0xffff0007

0800b1b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e049      	b.n	800b25e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d106      	bne.n	800b1e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7f9 ff7a 	bl	80050d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4610      	mov	r0, r2
 800b1f8:	f000 ff12 	bl	800c020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
	...

0800b268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d001      	beq.n	800b280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	e05e      	b.n	800b33e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2202      	movs	r2, #2
 800b284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68da      	ldr	r2, [r3, #12]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f042 0201 	orr.w	r2, r2, #1
 800b296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a2b      	ldr	r2, [pc, #172]	; (800b34c <HAL_TIM_Base_Start_IT+0xe4>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d02c      	beq.n	800b2fc <HAL_TIM_Base_Start_IT+0x94>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2aa:	d027      	beq.n	800b2fc <HAL_TIM_Base_Start_IT+0x94>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a27      	ldr	r2, [pc, #156]	; (800b350 <HAL_TIM_Base_Start_IT+0xe8>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d022      	beq.n	800b2fc <HAL_TIM_Base_Start_IT+0x94>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a26      	ldr	r2, [pc, #152]	; (800b354 <HAL_TIM_Base_Start_IT+0xec>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d01d      	beq.n	800b2fc <HAL_TIM_Base_Start_IT+0x94>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a24      	ldr	r2, [pc, #144]	; (800b358 <HAL_TIM_Base_Start_IT+0xf0>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d018      	beq.n	800b2fc <HAL_TIM_Base_Start_IT+0x94>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a23      	ldr	r2, [pc, #140]	; (800b35c <HAL_TIM_Base_Start_IT+0xf4>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d013      	beq.n	800b2fc <HAL_TIM_Base_Start_IT+0x94>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a21      	ldr	r2, [pc, #132]	; (800b360 <HAL_TIM_Base_Start_IT+0xf8>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d00e      	beq.n	800b2fc <HAL_TIM_Base_Start_IT+0x94>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a20      	ldr	r2, [pc, #128]	; (800b364 <HAL_TIM_Base_Start_IT+0xfc>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d009      	beq.n	800b2fc <HAL_TIM_Base_Start_IT+0x94>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a1e      	ldr	r2, [pc, #120]	; (800b368 <HAL_TIM_Base_Start_IT+0x100>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d004      	beq.n	800b2fc <HAL_TIM_Base_Start_IT+0x94>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a1d      	ldr	r2, [pc, #116]	; (800b36c <HAL_TIM_Base_Start_IT+0x104>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d115      	bne.n	800b328 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	689a      	ldr	r2, [r3, #8]
 800b302:	4b1b      	ldr	r3, [pc, #108]	; (800b370 <HAL_TIM_Base_Start_IT+0x108>)
 800b304:	4013      	ands	r3, r2
 800b306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2b06      	cmp	r3, #6
 800b30c:	d015      	beq.n	800b33a <HAL_TIM_Base_Start_IT+0xd2>
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b314:	d011      	beq.n	800b33a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f042 0201 	orr.w	r2, r2, #1
 800b324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b326:	e008      	b.n	800b33a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f042 0201 	orr.w	r2, r2, #1
 800b336:	601a      	str	r2, [r3, #0]
 800b338:	e000      	b.n	800b33c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b33a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3714      	adds	r7, #20
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	40010000 	.word	0x40010000
 800b350:	40000400 	.word	0x40000400
 800b354:	40000800 	.word	0x40000800
 800b358:	40000c00 	.word	0x40000c00
 800b35c:	40010400 	.word	0x40010400
 800b360:	40001800 	.word	0x40001800
 800b364:	40014000 	.word	0x40014000
 800b368:	4000e000 	.word	0x4000e000
 800b36c:	4000e400 	.word	0x4000e400
 800b370:	00010007 	.word	0x00010007

0800b374 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d101      	bne.n	800b386 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e049      	b.n	800b41a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d106      	bne.n	800b3a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f7f9 fe34 	bl	8005008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	4610      	mov	r0, r2
 800b3b4:	f000 fe34 	bl	800c020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2201      	movs	r2, #1
 800b414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
	...

0800b424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d109      	bne.n	800b448 <HAL_TIM_PWM_Start+0x24>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	bf14      	ite	ne
 800b440:	2301      	movne	r3, #1
 800b442:	2300      	moveq	r3, #0
 800b444:	b2db      	uxtb	r3, r3
 800b446:	e03c      	b.n	800b4c2 <HAL_TIM_PWM_Start+0x9e>
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	d109      	bne.n	800b462 <HAL_TIM_PWM_Start+0x3e>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b454:	b2db      	uxtb	r3, r3
 800b456:	2b01      	cmp	r3, #1
 800b458:	bf14      	ite	ne
 800b45a:	2301      	movne	r3, #1
 800b45c:	2300      	moveq	r3, #0
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	e02f      	b.n	800b4c2 <HAL_TIM_PWM_Start+0x9e>
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b08      	cmp	r3, #8
 800b466:	d109      	bne.n	800b47c <HAL_TIM_PWM_Start+0x58>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	2b01      	cmp	r3, #1
 800b472:	bf14      	ite	ne
 800b474:	2301      	movne	r3, #1
 800b476:	2300      	moveq	r3, #0
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	e022      	b.n	800b4c2 <HAL_TIM_PWM_Start+0x9e>
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	2b0c      	cmp	r3, #12
 800b480:	d109      	bne.n	800b496 <HAL_TIM_PWM_Start+0x72>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	bf14      	ite	ne
 800b48e:	2301      	movne	r3, #1
 800b490:	2300      	moveq	r3, #0
 800b492:	b2db      	uxtb	r3, r3
 800b494:	e015      	b.n	800b4c2 <HAL_TIM_PWM_Start+0x9e>
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b10      	cmp	r3, #16
 800b49a:	d109      	bne.n	800b4b0 <HAL_TIM_PWM_Start+0x8c>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	bf14      	ite	ne
 800b4a8:	2301      	movne	r3, #1
 800b4aa:	2300      	moveq	r3, #0
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	e008      	b.n	800b4c2 <HAL_TIM_PWM_Start+0x9e>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	bf14      	ite	ne
 800b4bc:	2301      	movne	r3, #1
 800b4be:	2300      	moveq	r3, #0
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d001      	beq.n	800b4ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e0ab      	b.n	800b622 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d104      	bne.n	800b4da <HAL_TIM_PWM_Start+0xb6>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2202      	movs	r2, #2
 800b4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4d8:	e023      	b.n	800b522 <HAL_TIM_PWM_Start+0xfe>
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	2b04      	cmp	r3, #4
 800b4de:	d104      	bne.n	800b4ea <HAL_TIM_PWM_Start+0xc6>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4e8:	e01b      	b.n	800b522 <HAL_TIM_PWM_Start+0xfe>
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2b08      	cmp	r3, #8
 800b4ee:	d104      	bne.n	800b4fa <HAL_TIM_PWM_Start+0xd6>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4f8:	e013      	b.n	800b522 <HAL_TIM_PWM_Start+0xfe>
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	2b0c      	cmp	r3, #12
 800b4fe:	d104      	bne.n	800b50a <HAL_TIM_PWM_Start+0xe6>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2202      	movs	r2, #2
 800b504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b508:	e00b      	b.n	800b522 <HAL_TIM_PWM_Start+0xfe>
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	2b10      	cmp	r3, #16
 800b50e:	d104      	bne.n	800b51a <HAL_TIM_PWM_Start+0xf6>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2202      	movs	r2, #2
 800b514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b518:	e003      	b.n	800b522 <HAL_TIM_PWM_Start+0xfe>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2202      	movs	r2, #2
 800b51e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2201      	movs	r2, #1
 800b528:	6839      	ldr	r1, [r7, #0]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f001 f992 	bl	800c854 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a3d      	ldr	r2, [pc, #244]	; (800b62c <HAL_TIM_PWM_Start+0x208>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d013      	beq.n	800b562 <HAL_TIM_PWM_Start+0x13e>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a3c      	ldr	r2, [pc, #240]	; (800b630 <HAL_TIM_PWM_Start+0x20c>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d00e      	beq.n	800b562 <HAL_TIM_PWM_Start+0x13e>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a3a      	ldr	r2, [pc, #232]	; (800b634 <HAL_TIM_PWM_Start+0x210>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d009      	beq.n	800b562 <HAL_TIM_PWM_Start+0x13e>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a39      	ldr	r2, [pc, #228]	; (800b638 <HAL_TIM_PWM_Start+0x214>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d004      	beq.n	800b562 <HAL_TIM_PWM_Start+0x13e>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a37      	ldr	r2, [pc, #220]	; (800b63c <HAL_TIM_PWM_Start+0x218>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d101      	bne.n	800b566 <HAL_TIM_PWM_Start+0x142>
 800b562:	2301      	movs	r3, #1
 800b564:	e000      	b.n	800b568 <HAL_TIM_PWM_Start+0x144>
 800b566:	2300      	movs	r3, #0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d007      	beq.n	800b57c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b57a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a2a      	ldr	r2, [pc, #168]	; (800b62c <HAL_TIM_PWM_Start+0x208>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d02c      	beq.n	800b5e0 <HAL_TIM_PWM_Start+0x1bc>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b58e:	d027      	beq.n	800b5e0 <HAL_TIM_PWM_Start+0x1bc>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a2a      	ldr	r2, [pc, #168]	; (800b640 <HAL_TIM_PWM_Start+0x21c>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d022      	beq.n	800b5e0 <HAL_TIM_PWM_Start+0x1bc>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a29      	ldr	r2, [pc, #164]	; (800b644 <HAL_TIM_PWM_Start+0x220>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d01d      	beq.n	800b5e0 <HAL_TIM_PWM_Start+0x1bc>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a27      	ldr	r2, [pc, #156]	; (800b648 <HAL_TIM_PWM_Start+0x224>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d018      	beq.n	800b5e0 <HAL_TIM_PWM_Start+0x1bc>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a1f      	ldr	r2, [pc, #124]	; (800b630 <HAL_TIM_PWM_Start+0x20c>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d013      	beq.n	800b5e0 <HAL_TIM_PWM_Start+0x1bc>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a23      	ldr	r2, [pc, #140]	; (800b64c <HAL_TIM_PWM_Start+0x228>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d00e      	beq.n	800b5e0 <HAL_TIM_PWM_Start+0x1bc>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a1b      	ldr	r2, [pc, #108]	; (800b634 <HAL_TIM_PWM_Start+0x210>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d009      	beq.n	800b5e0 <HAL_TIM_PWM_Start+0x1bc>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a1f      	ldr	r2, [pc, #124]	; (800b650 <HAL_TIM_PWM_Start+0x22c>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d004      	beq.n	800b5e0 <HAL_TIM_PWM_Start+0x1bc>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a1e      	ldr	r2, [pc, #120]	; (800b654 <HAL_TIM_PWM_Start+0x230>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d115      	bne.n	800b60c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	689a      	ldr	r2, [r3, #8]
 800b5e6:	4b1c      	ldr	r3, [pc, #112]	; (800b658 <HAL_TIM_PWM_Start+0x234>)
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2b06      	cmp	r3, #6
 800b5f0:	d015      	beq.n	800b61e <HAL_TIM_PWM_Start+0x1fa>
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5f8:	d011      	beq.n	800b61e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f042 0201 	orr.w	r2, r2, #1
 800b608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b60a:	e008      	b.n	800b61e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f042 0201 	orr.w	r2, r2, #1
 800b61a:	601a      	str	r2, [r3, #0]
 800b61c:	e000      	b.n	800b620 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b61e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	40010000 	.word	0x40010000
 800b630:	40010400 	.word	0x40010400
 800b634:	40014000 	.word	0x40014000
 800b638:	40014400 	.word	0x40014400
 800b63c:	40014800 	.word	0x40014800
 800b640:	40000400 	.word	0x40000400
 800b644:	40000800 	.word	0x40000800
 800b648:	40000c00 	.word	0x40000c00
 800b64c:	40001800 	.word	0x40001800
 800b650:	4000e000 	.word	0x4000e000
 800b654:	4000e400 	.word	0x4000e400
 800b658:	00010007 	.word	0x00010007

0800b65c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	e041      	b.n	800b6f4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b676:	b2db      	uxtb	r3, r3
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d106      	bne.n	800b68a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f839 	bl	800b6fc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2202      	movs	r2, #2
 800b68e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	3304      	adds	r3, #4
 800b69a:	4619      	mov	r1, r3
 800b69c:	4610      	mov	r0, r2
 800b69e:	f000 fcbf 	bl	800c020 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f022 0208 	bic.w	r2, r2, #8
 800b6b0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6819      	ldr	r1, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	683a      	ldr	r2, [r7, #0]
 800b6be:	430a      	orrs	r2, r1
 800b6c0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b086      	sub	sp, #24
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d101      	bne.n	800b724 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	e08f      	b.n	800b844 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d106      	bne.n	800b73e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7f9 fd21 	bl	8005180 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2202      	movs	r2, #2
 800b742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6899      	ldr	r1, [r3, #8]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	4b3e      	ldr	r3, [pc, #248]	; (800b84c <HAL_TIM_Encoder_Init+0x13c>)
 800b752:	400b      	ands	r3, r1
 800b754:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	3304      	adds	r3, #4
 800b75e:	4619      	mov	r1, r3
 800b760:	4610      	mov	r0, r2
 800b762:	f000 fc5d 	bl	800c020 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6a1b      	ldr	r3, [r3, #32]
 800b77c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	697a      	ldr	r2, [r7, #20]
 800b784:	4313      	orrs	r3, r2
 800b786:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b788:	693a      	ldr	r2, [r7, #16]
 800b78a:	4b31      	ldr	r3, [pc, #196]	; (800b850 <HAL_TIM_Encoder_Init+0x140>)
 800b78c:	4013      	ands	r3, r2
 800b78e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	689a      	ldr	r2, [r3, #8]
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	699b      	ldr	r3, [r3, #24]
 800b798:	021b      	lsls	r3, r3, #8
 800b79a:	4313      	orrs	r3, r2
 800b79c:	693a      	ldr	r2, [r7, #16]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b7a2:	693a      	ldr	r2, [r7, #16]
 800b7a4:	4b2b      	ldr	r3, [pc, #172]	; (800b854 <HAL_TIM_Encoder_Init+0x144>)
 800b7a6:	4013      	ands	r3, r2
 800b7a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b7aa:	693a      	ldr	r2, [r7, #16]
 800b7ac:	4b2a      	ldr	r3, [pc, #168]	; (800b858 <HAL_TIM_Encoder_Init+0x148>)
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	68da      	ldr	r2, [r3, #12]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	69db      	ldr	r3, [r3, #28]
 800b7ba:	021b      	lsls	r3, r3, #8
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	691b      	ldr	r3, [r3, #16]
 800b7c8:	011a      	lsls	r2, r3, #4
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	6a1b      	ldr	r3, [r3, #32]
 800b7ce:	031b      	lsls	r3, r3, #12
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	693a      	ldr	r2, [r7, #16]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b7de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b7e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	695b      	ldr	r3, [r3, #20]
 800b7f0:	011b      	lsls	r3, r3, #4
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	697a      	ldr	r2, [r7, #20]
 800b800:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2201      	movs	r2, #1
 800b81e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2201      	movs	r2, #1
 800b826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3718      	adds	r7, #24
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	fffebff8 	.word	0xfffebff8
 800b850:	fffffcfc 	.word	0xfffffcfc
 800b854:	fffff3f3 	.word	0xfffff3f3
 800b858:	ffff0f0f 	.word	0xffff0f0f

0800b85c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b86c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b874:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b87c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b884:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d110      	bne.n	800b8ae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b88c:	7bfb      	ldrb	r3, [r7, #15]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d102      	bne.n	800b898 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b892:	7b7b      	ldrb	r3, [r7, #13]
 800b894:	2b01      	cmp	r3, #1
 800b896:	d001      	beq.n	800b89c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e069      	b.n	800b970 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2202      	movs	r2, #2
 800b8a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8ac:	e031      	b.n	800b912 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b04      	cmp	r3, #4
 800b8b2:	d110      	bne.n	800b8d6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8b4:	7bbb      	ldrb	r3, [r7, #14]
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d102      	bne.n	800b8c0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b8ba:	7b3b      	ldrb	r3, [r7, #12]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d001      	beq.n	800b8c4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e055      	b.n	800b970 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2202      	movs	r2, #2
 800b8c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8d4:	e01d      	b.n	800b912 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8d6:	7bfb      	ldrb	r3, [r7, #15]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d108      	bne.n	800b8ee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8dc:	7bbb      	ldrb	r3, [r7, #14]
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d105      	bne.n	800b8ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8e2:	7b7b      	ldrb	r3, [r7, #13]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d102      	bne.n	800b8ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b8e8:	7b3b      	ldrb	r3, [r7, #12]
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d001      	beq.n	800b8f2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e03e      	b.n	800b970 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2202      	movs	r2, #2
 800b8f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2202      	movs	r2, #2
 800b8fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2202      	movs	r2, #2
 800b906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2202      	movs	r2, #2
 800b90e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d003      	beq.n	800b920 <HAL_TIM_Encoder_Start+0xc4>
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b04      	cmp	r3, #4
 800b91c:	d008      	beq.n	800b930 <HAL_TIM_Encoder_Start+0xd4>
 800b91e:	e00f      	b.n	800b940 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2201      	movs	r2, #1
 800b926:	2100      	movs	r1, #0
 800b928:	4618      	mov	r0, r3
 800b92a:	f000 ff93 	bl	800c854 <TIM_CCxChannelCmd>
      break;
 800b92e:	e016      	b.n	800b95e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2201      	movs	r2, #1
 800b936:	2104      	movs	r1, #4
 800b938:	4618      	mov	r0, r3
 800b93a:	f000 ff8b 	bl	800c854 <TIM_CCxChannelCmd>
      break;
 800b93e:	e00e      	b.n	800b95e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2201      	movs	r2, #1
 800b946:	2100      	movs	r1, #0
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 ff83 	bl	800c854 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2201      	movs	r2, #1
 800b954:	2104      	movs	r1, #4
 800b956:	4618      	mov	r0, r3
 800b958:	f000 ff7c 	bl	800c854 <TIM_CCxChannelCmd>
      break;
 800b95c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f042 0201 	orr.w	r2, r2, #1
 800b96c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	f003 0302 	and.w	r3, r3, #2
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	d122      	bne.n	800b9d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	f003 0302 	and.w	r3, r3, #2
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d11b      	bne.n	800b9d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f06f 0202 	mvn.w	r2, #2
 800b9a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	699b      	ldr	r3, [r3, #24]
 800b9b2:	f003 0303 	and.w	r3, r3, #3
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d003      	beq.n	800b9c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fb12 	bl	800bfe4 <HAL_TIM_IC_CaptureCallback>
 800b9c0:	e005      	b.n	800b9ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fb04 	bl	800bfd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fb15 	bl	800bff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	f003 0304 	and.w	r3, r3, #4
 800b9de:	2b04      	cmp	r3, #4
 800b9e0:	d122      	bne.n	800ba28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	f003 0304 	and.w	r3, r3, #4
 800b9ec:	2b04      	cmp	r3, #4
 800b9ee:	d11b      	bne.n	800ba28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f06f 0204 	mvn.w	r2, #4
 800b9f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2202      	movs	r2, #2
 800b9fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	699b      	ldr	r3, [r3, #24]
 800ba06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d003      	beq.n	800ba16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 fae8 	bl	800bfe4 <HAL_TIM_IC_CaptureCallback>
 800ba14:	e005      	b.n	800ba22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 fada 	bl	800bfd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 faeb 	bl	800bff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	f003 0308 	and.w	r3, r3, #8
 800ba32:	2b08      	cmp	r3, #8
 800ba34:	d122      	bne.n	800ba7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	f003 0308 	and.w	r3, r3, #8
 800ba40:	2b08      	cmp	r3, #8
 800ba42:	d11b      	bne.n	800ba7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f06f 0208 	mvn.w	r2, #8
 800ba4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2204      	movs	r2, #4
 800ba52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	69db      	ldr	r3, [r3, #28]
 800ba5a:	f003 0303 	and.w	r3, r3, #3
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d003      	beq.n	800ba6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 fabe 	bl	800bfe4 <HAL_TIM_IC_CaptureCallback>
 800ba68:	e005      	b.n	800ba76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 fab0 	bl	800bfd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fac1 	bl	800bff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	691b      	ldr	r3, [r3, #16]
 800ba82:	f003 0310 	and.w	r3, r3, #16
 800ba86:	2b10      	cmp	r3, #16
 800ba88:	d122      	bne.n	800bad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	f003 0310 	and.w	r3, r3, #16
 800ba94:	2b10      	cmp	r3, #16
 800ba96:	d11b      	bne.n	800bad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f06f 0210 	mvn.w	r2, #16
 800baa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2208      	movs	r2, #8
 800baa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	69db      	ldr	r3, [r3, #28]
 800baae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d003      	beq.n	800babe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fa94 	bl	800bfe4 <HAL_TIM_IC_CaptureCallback>
 800babc:	e005      	b.n	800baca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fa86 	bl	800bfd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fa97 	bl	800bff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	f003 0301 	and.w	r3, r3, #1
 800bada:	2b01      	cmp	r3, #1
 800badc:	d10e      	bne.n	800bafc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	f003 0301 	and.w	r3, r3, #1
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d107      	bne.n	800bafc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f06f 0201 	mvn.w	r2, #1
 800baf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7f5 fdc2 	bl	8001680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb06:	2b80      	cmp	r3, #128	; 0x80
 800bb08:	d10e      	bne.n	800bb28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb14:	2b80      	cmp	r3, #128	; 0x80
 800bb16:	d107      	bne.n	800bb28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f001 f802 	bl	800cb2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb36:	d10e      	bne.n	800bb56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb42:	2b80      	cmp	r3, #128	; 0x80
 800bb44:	d107      	bne.n	800bb56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bb4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fff5 	bl	800cb40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	691b      	ldr	r3, [r3, #16]
 800bb5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb60:	2b40      	cmp	r3, #64	; 0x40
 800bb62:	d10e      	bne.n	800bb82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb6e:	2b40      	cmp	r3, #64	; 0x40
 800bb70:	d107      	bne.n	800bb82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fa45 	bl	800c00c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	f003 0320 	and.w	r3, r3, #32
 800bb8c:	2b20      	cmp	r3, #32
 800bb8e:	d10e      	bne.n	800bbae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	f003 0320 	and.w	r3, r3, #32
 800bb9a:	2b20      	cmp	r3, #32
 800bb9c:	d107      	bne.n	800bbae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f06f 0220 	mvn.w	r2, #32
 800bba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 ffb5 	bl	800cb18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbae:	bf00      	nop
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
	...

0800bbb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d101      	bne.n	800bbd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bbd2:	2302      	movs	r3, #2
 800bbd4:	e0ff      	b.n	800bdd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2b14      	cmp	r3, #20
 800bbe2:	f200 80f0 	bhi.w	800bdc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bbe6:	a201      	add	r2, pc, #4	; (adr r2, 800bbec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbec:	0800bc41 	.word	0x0800bc41
 800bbf0:	0800bdc7 	.word	0x0800bdc7
 800bbf4:	0800bdc7 	.word	0x0800bdc7
 800bbf8:	0800bdc7 	.word	0x0800bdc7
 800bbfc:	0800bc81 	.word	0x0800bc81
 800bc00:	0800bdc7 	.word	0x0800bdc7
 800bc04:	0800bdc7 	.word	0x0800bdc7
 800bc08:	0800bdc7 	.word	0x0800bdc7
 800bc0c:	0800bcc3 	.word	0x0800bcc3
 800bc10:	0800bdc7 	.word	0x0800bdc7
 800bc14:	0800bdc7 	.word	0x0800bdc7
 800bc18:	0800bdc7 	.word	0x0800bdc7
 800bc1c:	0800bd03 	.word	0x0800bd03
 800bc20:	0800bdc7 	.word	0x0800bdc7
 800bc24:	0800bdc7 	.word	0x0800bdc7
 800bc28:	0800bdc7 	.word	0x0800bdc7
 800bc2c:	0800bd45 	.word	0x0800bd45
 800bc30:	0800bdc7 	.word	0x0800bdc7
 800bc34:	0800bdc7 	.word	0x0800bdc7
 800bc38:	0800bdc7 	.word	0x0800bdc7
 800bc3c:	0800bd85 	.word	0x0800bd85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	68b9      	ldr	r1, [r7, #8]
 800bc46:	4618      	mov	r0, r3
 800bc48:	f000 fa90 	bl	800c16c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	699a      	ldr	r2, [r3, #24]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f042 0208 	orr.w	r2, r2, #8
 800bc5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	699a      	ldr	r2, [r3, #24]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f022 0204 	bic.w	r2, r2, #4
 800bc6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	6999      	ldr	r1, [r3, #24]
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	691a      	ldr	r2, [r3, #16]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	430a      	orrs	r2, r1
 800bc7c:	619a      	str	r2, [r3, #24]
      break;
 800bc7e:	e0a5      	b.n	800bdcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	68b9      	ldr	r1, [r7, #8]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f000 fb00 	bl	800c28c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	699a      	ldr	r2, [r3, #24]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	699a      	ldr	r2, [r3, #24]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	6999      	ldr	r1, [r3, #24]
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	021a      	lsls	r2, r3, #8
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	430a      	orrs	r2, r1
 800bcbe:	619a      	str	r2, [r3, #24]
      break;
 800bcc0:	e084      	b.n	800bdcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68b9      	ldr	r1, [r7, #8]
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f000 fb69 	bl	800c3a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	69da      	ldr	r2, [r3, #28]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f042 0208 	orr.w	r2, r2, #8
 800bcdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	69da      	ldr	r2, [r3, #28]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f022 0204 	bic.w	r2, r2, #4
 800bcec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	69d9      	ldr	r1, [r3, #28]
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	691a      	ldr	r2, [r3, #16]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	430a      	orrs	r2, r1
 800bcfe:	61da      	str	r2, [r3, #28]
      break;
 800bd00:	e064      	b.n	800bdcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68b9      	ldr	r1, [r7, #8]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f000 fbd1 	bl	800c4b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	69da      	ldr	r2, [r3, #28]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	69da      	ldr	r2, [r3, #28]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	69d9      	ldr	r1, [r3, #28]
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	691b      	ldr	r3, [r3, #16]
 800bd38:	021a      	lsls	r2, r3, #8
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	430a      	orrs	r2, r1
 800bd40:	61da      	str	r2, [r3, #28]
      break;
 800bd42:	e043      	b.n	800bdcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68b9      	ldr	r1, [r7, #8]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 fc1a 	bl	800c584 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f042 0208 	orr.w	r2, r2, #8
 800bd5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f022 0204 	bic.w	r2, r2, #4
 800bd6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	691a      	ldr	r2, [r3, #16]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	430a      	orrs	r2, r1
 800bd80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bd82:	e023      	b.n	800bdcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68b9      	ldr	r1, [r7, #8]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 fc5e 	bl	800c64c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	021a      	lsls	r2, r3, #8
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	430a      	orrs	r2, r1
 800bdc2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bdc4:	e002      	b.n	800bdcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	75fb      	strb	r3, [r7, #23]
      break;
 800bdca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bdd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3718      	adds	r7, #24
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop

0800bde0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bdea:	2300      	movs	r3, #0
 800bdec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d101      	bne.n	800bdfc <HAL_TIM_ConfigClockSource+0x1c>
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	e0dc      	b.n	800bfb6 <HAL_TIM_ConfigClockSource+0x1d6>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2202      	movs	r2, #2
 800be08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	4b6a      	ldr	r3, [pc, #424]	; (800bfc0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800be18:	4013      	ands	r3, r2
 800be1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a64      	ldr	r2, [pc, #400]	; (800bfc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800be32:	4293      	cmp	r3, r2
 800be34:	f000 80a9 	beq.w	800bf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800be38:	4a62      	ldr	r2, [pc, #392]	; (800bfc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	f200 80ae 	bhi.w	800bf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800be40:	4a61      	ldr	r2, [pc, #388]	; (800bfc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800be42:	4293      	cmp	r3, r2
 800be44:	f000 80a1 	beq.w	800bf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800be48:	4a5f      	ldr	r2, [pc, #380]	; (800bfc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	f200 80a6 	bhi.w	800bf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800be50:	4a5e      	ldr	r2, [pc, #376]	; (800bfcc <HAL_TIM_ConfigClockSource+0x1ec>)
 800be52:	4293      	cmp	r3, r2
 800be54:	f000 8099 	beq.w	800bf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800be58:	4a5c      	ldr	r2, [pc, #368]	; (800bfcc <HAL_TIM_ConfigClockSource+0x1ec>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	f200 809e 	bhi.w	800bf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800be60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800be64:	f000 8091 	beq.w	800bf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800be68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800be6c:	f200 8096 	bhi.w	800bf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800be70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be74:	f000 8089 	beq.w	800bf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800be78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be7c:	f200 808e 	bhi.w	800bf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800be80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be84:	d03e      	beq.n	800bf04 <HAL_TIM_ConfigClockSource+0x124>
 800be86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be8a:	f200 8087 	bhi.w	800bf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800be8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be92:	f000 8086 	beq.w	800bfa2 <HAL_TIM_ConfigClockSource+0x1c2>
 800be96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be9a:	d87f      	bhi.n	800bf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800be9c:	2b70      	cmp	r3, #112	; 0x70
 800be9e:	d01a      	beq.n	800bed6 <HAL_TIM_ConfigClockSource+0xf6>
 800bea0:	2b70      	cmp	r3, #112	; 0x70
 800bea2:	d87b      	bhi.n	800bf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800bea4:	2b60      	cmp	r3, #96	; 0x60
 800bea6:	d050      	beq.n	800bf4a <HAL_TIM_ConfigClockSource+0x16a>
 800bea8:	2b60      	cmp	r3, #96	; 0x60
 800beaa:	d877      	bhi.n	800bf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800beac:	2b50      	cmp	r3, #80	; 0x50
 800beae:	d03c      	beq.n	800bf2a <HAL_TIM_ConfigClockSource+0x14a>
 800beb0:	2b50      	cmp	r3, #80	; 0x50
 800beb2:	d873      	bhi.n	800bf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800beb4:	2b40      	cmp	r3, #64	; 0x40
 800beb6:	d058      	beq.n	800bf6a <HAL_TIM_ConfigClockSource+0x18a>
 800beb8:	2b40      	cmp	r3, #64	; 0x40
 800beba:	d86f      	bhi.n	800bf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800bebc:	2b30      	cmp	r3, #48	; 0x30
 800bebe:	d064      	beq.n	800bf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800bec0:	2b30      	cmp	r3, #48	; 0x30
 800bec2:	d86b      	bhi.n	800bf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800bec4:	2b20      	cmp	r3, #32
 800bec6:	d060      	beq.n	800bf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800bec8:	2b20      	cmp	r3, #32
 800beca:	d867      	bhi.n	800bf9c <HAL_TIM_ConfigClockSource+0x1bc>
 800becc:	2b00      	cmp	r3, #0
 800bece:	d05c      	beq.n	800bf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800bed0:	2b10      	cmp	r3, #16
 800bed2:	d05a      	beq.n	800bf8a <HAL_TIM_ConfigClockSource+0x1aa>
 800bed4:	e062      	b.n	800bf9c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6818      	ldr	r0, [r3, #0]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	6899      	ldr	r1, [r3, #8]
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	685a      	ldr	r2, [r3, #4]
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	f000 fc95 	bl	800c814 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bef8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	68ba      	ldr	r2, [r7, #8]
 800bf00:	609a      	str	r2, [r3, #8]
      break;
 800bf02:	e04f      	b.n	800bfa4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6818      	ldr	r0, [r3, #0]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	6899      	ldr	r1, [r3, #8]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	685a      	ldr	r2, [r3, #4]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	f000 fc7e 	bl	800c814 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	689a      	ldr	r2, [r3, #8]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf26:	609a      	str	r2, [r3, #8]
      break;
 800bf28:	e03c      	b.n	800bfa4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6818      	ldr	r0, [r3, #0]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	6859      	ldr	r1, [r3, #4]
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	461a      	mov	r2, r3
 800bf38:	f000 fbee 	bl	800c718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2150      	movs	r1, #80	; 0x50
 800bf42:	4618      	mov	r0, r3
 800bf44:	f000 fc48 	bl	800c7d8 <TIM_ITRx_SetConfig>
      break;
 800bf48:	e02c      	b.n	800bfa4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6818      	ldr	r0, [r3, #0]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	6859      	ldr	r1, [r3, #4]
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	461a      	mov	r2, r3
 800bf58:	f000 fc0d 	bl	800c776 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2160      	movs	r1, #96	; 0x60
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 fc38 	bl	800c7d8 <TIM_ITRx_SetConfig>
      break;
 800bf68:	e01c      	b.n	800bfa4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6818      	ldr	r0, [r3, #0]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	6859      	ldr	r1, [r3, #4]
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	461a      	mov	r2, r3
 800bf78:	f000 fbce 	bl	800c718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2140      	movs	r1, #64	; 0x40
 800bf82:	4618      	mov	r0, r3
 800bf84:	f000 fc28 	bl	800c7d8 <TIM_ITRx_SetConfig>
      break;
 800bf88:	e00c      	b.n	800bfa4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4619      	mov	r1, r3
 800bf94:	4610      	mov	r0, r2
 800bf96:	f000 fc1f 	bl	800c7d8 <TIM_ITRx_SetConfig>
      break;
 800bf9a:	e003      	b.n	800bfa4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	73fb      	strb	r3, [r7, #15]
      break;
 800bfa0:	e000      	b.n	800bfa4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bfa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bfb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3710      	adds	r7, #16
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	ffceff88 	.word	0xffceff88
 800bfc4:	00100040 	.word	0x00100040
 800bfc8:	00100030 	.word	0x00100030
 800bfcc:	00100020 	.word	0x00100020

0800bfd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bfd8:	bf00      	nop
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bfec:	bf00      	nop
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c000:	bf00      	nop
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c014:	bf00      	nop
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4a44      	ldr	r2, [pc, #272]	; (800c144 <TIM_Base_SetConfig+0x124>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d013      	beq.n	800c060 <TIM_Base_SetConfig+0x40>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c03e:	d00f      	beq.n	800c060 <TIM_Base_SetConfig+0x40>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4a41      	ldr	r2, [pc, #260]	; (800c148 <TIM_Base_SetConfig+0x128>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d00b      	beq.n	800c060 <TIM_Base_SetConfig+0x40>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4a40      	ldr	r2, [pc, #256]	; (800c14c <TIM_Base_SetConfig+0x12c>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d007      	beq.n	800c060 <TIM_Base_SetConfig+0x40>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4a3f      	ldr	r2, [pc, #252]	; (800c150 <TIM_Base_SetConfig+0x130>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d003      	beq.n	800c060 <TIM_Base_SetConfig+0x40>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4a3e      	ldr	r2, [pc, #248]	; (800c154 <TIM_Base_SetConfig+0x134>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d108      	bne.n	800c072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	4313      	orrs	r3, r2
 800c070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4a33      	ldr	r2, [pc, #204]	; (800c144 <TIM_Base_SetConfig+0x124>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d027      	beq.n	800c0ca <TIM_Base_SetConfig+0xaa>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c080:	d023      	beq.n	800c0ca <TIM_Base_SetConfig+0xaa>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4a30      	ldr	r2, [pc, #192]	; (800c148 <TIM_Base_SetConfig+0x128>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d01f      	beq.n	800c0ca <TIM_Base_SetConfig+0xaa>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4a2f      	ldr	r2, [pc, #188]	; (800c14c <TIM_Base_SetConfig+0x12c>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d01b      	beq.n	800c0ca <TIM_Base_SetConfig+0xaa>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4a2e      	ldr	r2, [pc, #184]	; (800c150 <TIM_Base_SetConfig+0x130>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d017      	beq.n	800c0ca <TIM_Base_SetConfig+0xaa>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a2d      	ldr	r2, [pc, #180]	; (800c154 <TIM_Base_SetConfig+0x134>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d013      	beq.n	800c0ca <TIM_Base_SetConfig+0xaa>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a2c      	ldr	r2, [pc, #176]	; (800c158 <TIM_Base_SetConfig+0x138>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d00f      	beq.n	800c0ca <TIM_Base_SetConfig+0xaa>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a2b      	ldr	r2, [pc, #172]	; (800c15c <TIM_Base_SetConfig+0x13c>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d00b      	beq.n	800c0ca <TIM_Base_SetConfig+0xaa>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	4a2a      	ldr	r2, [pc, #168]	; (800c160 <TIM_Base_SetConfig+0x140>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d007      	beq.n	800c0ca <TIM_Base_SetConfig+0xaa>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a29      	ldr	r2, [pc, #164]	; (800c164 <TIM_Base_SetConfig+0x144>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d003      	beq.n	800c0ca <TIM_Base_SetConfig+0xaa>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4a28      	ldr	r2, [pc, #160]	; (800c168 <TIM_Base_SetConfig+0x148>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d108      	bne.n	800c0dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	695b      	ldr	r3, [r3, #20]
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	689a      	ldr	r2, [r3, #8]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4a10      	ldr	r2, [pc, #64]	; (800c144 <TIM_Base_SetConfig+0x124>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d00f      	beq.n	800c128 <TIM_Base_SetConfig+0x108>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4a12      	ldr	r2, [pc, #72]	; (800c154 <TIM_Base_SetConfig+0x134>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d00b      	beq.n	800c128 <TIM_Base_SetConfig+0x108>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4a11      	ldr	r2, [pc, #68]	; (800c158 <TIM_Base_SetConfig+0x138>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d007      	beq.n	800c128 <TIM_Base_SetConfig+0x108>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4a10      	ldr	r2, [pc, #64]	; (800c15c <TIM_Base_SetConfig+0x13c>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d003      	beq.n	800c128 <TIM_Base_SetConfig+0x108>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a0f      	ldr	r2, [pc, #60]	; (800c160 <TIM_Base_SetConfig+0x140>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d103      	bne.n	800c130 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	691a      	ldr	r2, [r3, #16]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	615a      	str	r2, [r3, #20]
}
 800c136:	bf00      	nop
 800c138:	3714      	adds	r7, #20
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop
 800c144:	40010000 	.word	0x40010000
 800c148:	40000400 	.word	0x40000400
 800c14c:	40000800 	.word	0x40000800
 800c150:	40000c00 	.word	0x40000c00
 800c154:	40010400 	.word	0x40010400
 800c158:	40014000 	.word	0x40014000
 800c15c:	40014400 	.word	0x40014400
 800c160:	40014800 	.word	0x40014800
 800c164:	4000e000 	.word	0x4000e000
 800c168:	4000e400 	.word	0x4000e400

0800c16c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b087      	sub	sp, #28
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6a1b      	ldr	r3, [r3, #32]
 800c17a:	f023 0201 	bic.w	r2, r3, #1
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a1b      	ldr	r3, [r3, #32]
 800c186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	699b      	ldr	r3, [r3, #24]
 800c192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	4b37      	ldr	r3, [pc, #220]	; (800c274 <TIM_OC1_SetConfig+0x108>)
 800c198:	4013      	ands	r3, r2
 800c19a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f023 0303 	bic.w	r3, r3, #3
 800c1a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	f023 0302 	bic.w	r3, r3, #2
 800c1b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	697a      	ldr	r2, [r7, #20]
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4a2d      	ldr	r2, [pc, #180]	; (800c278 <TIM_OC1_SetConfig+0x10c>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d00f      	beq.n	800c1e8 <TIM_OC1_SetConfig+0x7c>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a2c      	ldr	r2, [pc, #176]	; (800c27c <TIM_OC1_SetConfig+0x110>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d00b      	beq.n	800c1e8 <TIM_OC1_SetConfig+0x7c>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	4a2b      	ldr	r2, [pc, #172]	; (800c280 <TIM_OC1_SetConfig+0x114>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d007      	beq.n	800c1e8 <TIM_OC1_SetConfig+0x7c>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4a2a      	ldr	r2, [pc, #168]	; (800c284 <TIM_OC1_SetConfig+0x118>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d003      	beq.n	800c1e8 <TIM_OC1_SetConfig+0x7c>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4a29      	ldr	r2, [pc, #164]	; (800c288 <TIM_OC1_SetConfig+0x11c>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d10c      	bne.n	800c202 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	f023 0308 	bic.w	r3, r3, #8
 800c1ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	697a      	ldr	r2, [r7, #20]
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	f023 0304 	bic.w	r3, r3, #4
 800c200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4a1c      	ldr	r2, [pc, #112]	; (800c278 <TIM_OC1_SetConfig+0x10c>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d00f      	beq.n	800c22a <TIM_OC1_SetConfig+0xbe>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	4a1b      	ldr	r2, [pc, #108]	; (800c27c <TIM_OC1_SetConfig+0x110>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d00b      	beq.n	800c22a <TIM_OC1_SetConfig+0xbe>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4a1a      	ldr	r2, [pc, #104]	; (800c280 <TIM_OC1_SetConfig+0x114>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d007      	beq.n	800c22a <TIM_OC1_SetConfig+0xbe>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4a19      	ldr	r2, [pc, #100]	; (800c284 <TIM_OC1_SetConfig+0x118>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d003      	beq.n	800c22a <TIM_OC1_SetConfig+0xbe>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4a18      	ldr	r2, [pc, #96]	; (800c288 <TIM_OC1_SetConfig+0x11c>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d111      	bne.n	800c24e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	695b      	ldr	r3, [r3, #20]
 800c23e:	693a      	ldr	r2, [r7, #16]
 800c240:	4313      	orrs	r3, r2
 800c242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	699b      	ldr	r3, [r3, #24]
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	693a      	ldr	r2, [r7, #16]
 800c252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	685a      	ldr	r2, [r3, #4]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	621a      	str	r2, [r3, #32]
}
 800c268:	bf00      	nop
 800c26a:	371c      	adds	r7, #28
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr
 800c274:	fffeff8f 	.word	0xfffeff8f
 800c278:	40010000 	.word	0x40010000
 800c27c:	40010400 	.word	0x40010400
 800c280:	40014000 	.word	0x40014000
 800c284:	40014400 	.word	0x40014400
 800c288:	40014800 	.word	0x40014800

0800c28c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b087      	sub	sp, #28
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6a1b      	ldr	r3, [r3, #32]
 800c29a:	f023 0210 	bic.w	r2, r3, #16
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6a1b      	ldr	r3, [r3, #32]
 800c2a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	699b      	ldr	r3, [r3, #24]
 800c2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	4b34      	ldr	r3, [pc, #208]	; (800c388 <TIM_OC2_SetConfig+0xfc>)
 800c2b8:	4013      	ands	r3, r2
 800c2ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	021b      	lsls	r3, r3, #8
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	f023 0320 	bic.w	r3, r3, #32
 800c2d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	011b      	lsls	r3, r3, #4
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a29      	ldr	r2, [pc, #164]	; (800c38c <TIM_OC2_SetConfig+0x100>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d003      	beq.n	800c2f4 <TIM_OC2_SetConfig+0x68>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4a28      	ldr	r2, [pc, #160]	; (800c390 <TIM_OC2_SetConfig+0x104>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d10d      	bne.n	800c310 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	011b      	lsls	r3, r3, #4
 800c302:	697a      	ldr	r2, [r7, #20]
 800c304:	4313      	orrs	r3, r2
 800c306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c30e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4a1e      	ldr	r2, [pc, #120]	; (800c38c <TIM_OC2_SetConfig+0x100>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d00f      	beq.n	800c338 <TIM_OC2_SetConfig+0xac>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4a1d      	ldr	r2, [pc, #116]	; (800c390 <TIM_OC2_SetConfig+0x104>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d00b      	beq.n	800c338 <TIM_OC2_SetConfig+0xac>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	4a1c      	ldr	r2, [pc, #112]	; (800c394 <TIM_OC2_SetConfig+0x108>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d007      	beq.n	800c338 <TIM_OC2_SetConfig+0xac>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4a1b      	ldr	r2, [pc, #108]	; (800c398 <TIM_OC2_SetConfig+0x10c>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d003      	beq.n	800c338 <TIM_OC2_SetConfig+0xac>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4a1a      	ldr	r2, [pc, #104]	; (800c39c <TIM_OC2_SetConfig+0x110>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d113      	bne.n	800c360 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c33e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c346:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	695b      	ldr	r3, [r3, #20]
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	693a      	ldr	r2, [r7, #16]
 800c350:	4313      	orrs	r3, r2
 800c352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	699b      	ldr	r3, [r3, #24]
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	693a      	ldr	r2, [r7, #16]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	693a      	ldr	r2, [r7, #16]
 800c364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	685a      	ldr	r2, [r3, #4]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	697a      	ldr	r2, [r7, #20]
 800c378:	621a      	str	r2, [r3, #32]
}
 800c37a:	bf00      	nop
 800c37c:	371c      	adds	r7, #28
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	feff8fff 	.word	0xfeff8fff
 800c38c:	40010000 	.word	0x40010000
 800c390:	40010400 	.word	0x40010400
 800c394:	40014000 	.word	0x40014000
 800c398:	40014400 	.word	0x40014400
 800c39c:	40014800 	.word	0x40014800

0800c3a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b087      	sub	sp, #28
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a1b      	ldr	r3, [r3, #32]
 800c3ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a1b      	ldr	r3, [r3, #32]
 800c3ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	69db      	ldr	r3, [r3, #28]
 800c3c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	4b33      	ldr	r3, [pc, #204]	; (800c498 <TIM_OC3_SetConfig+0xf8>)
 800c3cc:	4013      	ands	r3, r2
 800c3ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f023 0303 	bic.w	r3, r3, #3
 800c3d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68fa      	ldr	r2, [r7, #12]
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c3e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	021b      	lsls	r3, r3, #8
 800c3f0:	697a      	ldr	r2, [r7, #20]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	4a28      	ldr	r2, [pc, #160]	; (800c49c <TIM_OC3_SetConfig+0xfc>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d003      	beq.n	800c406 <TIM_OC3_SetConfig+0x66>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4a27      	ldr	r2, [pc, #156]	; (800c4a0 <TIM_OC3_SetConfig+0x100>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d10d      	bne.n	800c422 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c40c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	021b      	lsls	r3, r3, #8
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	4313      	orrs	r3, r2
 800c418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4a1d      	ldr	r2, [pc, #116]	; (800c49c <TIM_OC3_SetConfig+0xfc>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d00f      	beq.n	800c44a <TIM_OC3_SetConfig+0xaa>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4a1c      	ldr	r2, [pc, #112]	; (800c4a0 <TIM_OC3_SetConfig+0x100>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d00b      	beq.n	800c44a <TIM_OC3_SetConfig+0xaa>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4a1b      	ldr	r2, [pc, #108]	; (800c4a4 <TIM_OC3_SetConfig+0x104>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d007      	beq.n	800c44a <TIM_OC3_SetConfig+0xaa>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	4a1a      	ldr	r2, [pc, #104]	; (800c4a8 <TIM_OC3_SetConfig+0x108>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d003      	beq.n	800c44a <TIM_OC3_SetConfig+0xaa>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4a19      	ldr	r2, [pc, #100]	; (800c4ac <TIM_OC3_SetConfig+0x10c>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d113      	bne.n	800c472 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	695b      	ldr	r3, [r3, #20]
 800c45e:	011b      	lsls	r3, r3, #4
 800c460:	693a      	ldr	r2, [r7, #16]
 800c462:	4313      	orrs	r3, r2
 800c464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	699b      	ldr	r3, [r3, #24]
 800c46a:	011b      	lsls	r3, r3, #4
 800c46c:	693a      	ldr	r2, [r7, #16]
 800c46e:	4313      	orrs	r3, r2
 800c470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	68fa      	ldr	r2, [r7, #12]
 800c47c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	685a      	ldr	r2, [r3, #4]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	697a      	ldr	r2, [r7, #20]
 800c48a:	621a      	str	r2, [r3, #32]
}
 800c48c:	bf00      	nop
 800c48e:	371c      	adds	r7, #28
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr
 800c498:	fffeff8f 	.word	0xfffeff8f
 800c49c:	40010000 	.word	0x40010000
 800c4a0:	40010400 	.word	0x40010400
 800c4a4:	40014000 	.word	0x40014000
 800c4a8:	40014400 	.word	0x40014400
 800c4ac:	40014800 	.word	0x40014800

0800c4b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b087      	sub	sp, #28
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6a1b      	ldr	r3, [r3, #32]
 800c4be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a1b      	ldr	r3, [r3, #32]
 800c4ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	69db      	ldr	r3, [r3, #28]
 800c4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c4d8:	68fa      	ldr	r2, [r7, #12]
 800c4da:	4b24      	ldr	r3, [pc, #144]	; (800c56c <TIM_OC4_SetConfig+0xbc>)
 800c4dc:	4013      	ands	r3, r2
 800c4de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	021b      	lsls	r3, r3, #8
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c4fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	031b      	lsls	r3, r3, #12
 800c502:	693a      	ldr	r2, [r7, #16]
 800c504:	4313      	orrs	r3, r2
 800c506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4a19      	ldr	r2, [pc, #100]	; (800c570 <TIM_OC4_SetConfig+0xc0>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d00f      	beq.n	800c530 <TIM_OC4_SetConfig+0x80>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4a18      	ldr	r2, [pc, #96]	; (800c574 <TIM_OC4_SetConfig+0xc4>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d00b      	beq.n	800c530 <TIM_OC4_SetConfig+0x80>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4a17      	ldr	r2, [pc, #92]	; (800c578 <TIM_OC4_SetConfig+0xc8>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d007      	beq.n	800c530 <TIM_OC4_SetConfig+0x80>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4a16      	ldr	r2, [pc, #88]	; (800c57c <TIM_OC4_SetConfig+0xcc>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d003      	beq.n	800c530 <TIM_OC4_SetConfig+0x80>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4a15      	ldr	r2, [pc, #84]	; (800c580 <TIM_OC4_SetConfig+0xd0>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d109      	bne.n	800c544 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	695b      	ldr	r3, [r3, #20]
 800c53c:	019b      	lsls	r3, r3, #6
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	4313      	orrs	r3, r2
 800c542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	697a      	ldr	r2, [r7, #20]
 800c548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	685a      	ldr	r2, [r3, #4]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	693a      	ldr	r2, [r7, #16]
 800c55c:	621a      	str	r2, [r3, #32]
}
 800c55e:	bf00      	nop
 800c560:	371c      	adds	r7, #28
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	feff8fff 	.word	0xfeff8fff
 800c570:	40010000 	.word	0x40010000
 800c574:	40010400 	.word	0x40010400
 800c578:	40014000 	.word	0x40014000
 800c57c:	40014400 	.word	0x40014400
 800c580:	40014800 	.word	0x40014800

0800c584 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c584:	b480      	push	{r7}
 800c586:	b087      	sub	sp, #28
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6a1b      	ldr	r3, [r3, #32]
 800c592:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6a1b      	ldr	r3, [r3, #32]
 800c59e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	4b21      	ldr	r3, [pc, #132]	; (800c634 <TIM_OC5_SetConfig+0xb0>)
 800c5b0:	4013      	ands	r3, r2
 800c5b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c5c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	041b      	lsls	r3, r3, #16
 800c5cc:	693a      	ldr	r2, [r7, #16]
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4a18      	ldr	r2, [pc, #96]	; (800c638 <TIM_OC5_SetConfig+0xb4>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d00f      	beq.n	800c5fa <TIM_OC5_SetConfig+0x76>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4a17      	ldr	r2, [pc, #92]	; (800c63c <TIM_OC5_SetConfig+0xb8>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d00b      	beq.n	800c5fa <TIM_OC5_SetConfig+0x76>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	4a16      	ldr	r2, [pc, #88]	; (800c640 <TIM_OC5_SetConfig+0xbc>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d007      	beq.n	800c5fa <TIM_OC5_SetConfig+0x76>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4a15      	ldr	r2, [pc, #84]	; (800c644 <TIM_OC5_SetConfig+0xc0>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d003      	beq.n	800c5fa <TIM_OC5_SetConfig+0x76>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	4a14      	ldr	r2, [pc, #80]	; (800c648 <TIM_OC5_SetConfig+0xc4>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d109      	bne.n	800c60e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c600:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	695b      	ldr	r3, [r3, #20]
 800c606:	021b      	lsls	r3, r3, #8
 800c608:	697a      	ldr	r2, [r7, #20]
 800c60a:	4313      	orrs	r3, r2
 800c60c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	697a      	ldr	r2, [r7, #20]
 800c612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	685a      	ldr	r2, [r3, #4]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	621a      	str	r2, [r3, #32]
}
 800c628:	bf00      	nop
 800c62a:	371c      	adds	r7, #28
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr
 800c634:	fffeff8f 	.word	0xfffeff8f
 800c638:	40010000 	.word	0x40010000
 800c63c:	40010400 	.word	0x40010400
 800c640:	40014000 	.word	0x40014000
 800c644:	40014400 	.word	0x40014400
 800c648:	40014800 	.word	0x40014800

0800c64c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b087      	sub	sp, #28
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a1b      	ldr	r3, [r3, #32]
 800c65a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a1b      	ldr	r3, [r3, #32]
 800c666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	4b22      	ldr	r3, [pc, #136]	; (800c700 <TIM_OC6_SetConfig+0xb4>)
 800c678:	4013      	ands	r3, r2
 800c67a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	021b      	lsls	r3, r3, #8
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	4313      	orrs	r3, r2
 800c686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c68e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	051b      	lsls	r3, r3, #20
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	4313      	orrs	r3, r2
 800c69a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a19      	ldr	r2, [pc, #100]	; (800c704 <TIM_OC6_SetConfig+0xb8>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d00f      	beq.n	800c6c4 <TIM_OC6_SetConfig+0x78>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a18      	ldr	r2, [pc, #96]	; (800c708 <TIM_OC6_SetConfig+0xbc>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d00b      	beq.n	800c6c4 <TIM_OC6_SetConfig+0x78>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4a17      	ldr	r2, [pc, #92]	; (800c70c <TIM_OC6_SetConfig+0xc0>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d007      	beq.n	800c6c4 <TIM_OC6_SetConfig+0x78>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4a16      	ldr	r2, [pc, #88]	; (800c710 <TIM_OC6_SetConfig+0xc4>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d003      	beq.n	800c6c4 <TIM_OC6_SetConfig+0x78>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a15      	ldr	r2, [pc, #84]	; (800c714 <TIM_OC6_SetConfig+0xc8>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d109      	bne.n	800c6d8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c6ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	695b      	ldr	r3, [r3, #20]
 800c6d0:	029b      	lsls	r3, r3, #10
 800c6d2:	697a      	ldr	r2, [r7, #20]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	697a      	ldr	r2, [r7, #20]
 800c6dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	693a      	ldr	r2, [r7, #16]
 800c6f0:	621a      	str	r2, [r3, #32]
}
 800c6f2:	bf00      	nop
 800c6f4:	371c      	adds	r7, #28
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	feff8fff 	.word	0xfeff8fff
 800c704:	40010000 	.word	0x40010000
 800c708:	40010400 	.word	0x40010400
 800c70c:	40014000 	.word	0x40014000
 800c710:	40014400 	.word	0x40014400
 800c714:	40014800 	.word	0x40014800

0800c718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c718:	b480      	push	{r7}
 800c71a:	b087      	sub	sp, #28
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	6a1b      	ldr	r3, [r3, #32]
 800c728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	6a1b      	ldr	r3, [r3, #32]
 800c72e:	f023 0201 	bic.w	r2, r3, #1
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	011b      	lsls	r3, r3, #4
 800c748:	693a      	ldr	r2, [r7, #16]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	f023 030a 	bic.w	r3, r3, #10
 800c754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	4313      	orrs	r3, r2
 800c75c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	697a      	ldr	r2, [r7, #20]
 800c768:	621a      	str	r2, [r3, #32]
}
 800c76a:	bf00      	nop
 800c76c:	371c      	adds	r7, #28
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr

0800c776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c776:	b480      	push	{r7}
 800c778:	b087      	sub	sp, #28
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	60f8      	str	r0, [r7, #12]
 800c77e:	60b9      	str	r1, [r7, #8]
 800c780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6a1b      	ldr	r3, [r3, #32]
 800c786:	f023 0210 	bic.w	r2, r3, #16
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6a1b      	ldr	r3, [r3, #32]
 800c798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c7a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	031b      	lsls	r3, r3, #12
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c7b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	011b      	lsls	r3, r3, #4
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	697a      	ldr	r2, [r7, #20]
 800c7c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	693a      	ldr	r2, [r7, #16]
 800c7c8:	621a      	str	r2, [r3, #32]
}
 800c7ca:	bf00      	nop
 800c7cc:	371c      	adds	r7, #28
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
	...

0800c7d8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	4b09      	ldr	r3, [pc, #36]	; (800c810 <TIM_ITRx_SetConfig+0x38>)
 800c7ec:	4013      	ands	r3, r2
 800c7ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c7f0:	683a      	ldr	r2, [r7, #0]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	f043 0307 	orr.w	r3, r3, #7
 800c7fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	68fa      	ldr	r2, [r7, #12]
 800c800:	609a      	str	r2, [r3, #8]
}
 800c802:	bf00      	nop
 800c804:	3714      	adds	r7, #20
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	ffcfff8f 	.word	0xffcfff8f

0800c814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c814:	b480      	push	{r7}
 800c816:	b087      	sub	sp, #28
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
 800c820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c82e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	021a      	lsls	r2, r3, #8
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	431a      	orrs	r2, r3
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	4313      	orrs	r3, r2
 800c83c:	697a      	ldr	r2, [r7, #20]
 800c83e:	4313      	orrs	r3, r2
 800c840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	697a      	ldr	r2, [r7, #20]
 800c846:	609a      	str	r2, [r3, #8]
}
 800c848:	bf00      	nop
 800c84a:	371c      	adds	r7, #28
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c854:	b480      	push	{r7}
 800c856:	b087      	sub	sp, #28
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	f003 031f 	and.w	r3, r3, #31
 800c866:	2201      	movs	r2, #1
 800c868:	fa02 f303 	lsl.w	r3, r2, r3
 800c86c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6a1a      	ldr	r2, [r3, #32]
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	43db      	mvns	r3, r3
 800c876:	401a      	ands	r2, r3
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6a1a      	ldr	r2, [r3, #32]
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	f003 031f 	and.w	r3, r3, #31
 800c886:	6879      	ldr	r1, [r7, #4]
 800c888:	fa01 f303 	lsl.w	r3, r1, r3
 800c88c:	431a      	orrs	r2, r3
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	621a      	str	r2, [r3, #32]
}
 800c892:	bf00      	nop
 800c894:	371c      	adds	r7, #28
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
	...

0800c8a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d101      	bne.n	800c8b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c8b4:	2302      	movs	r3, #2
 800c8b6:	e077      	b.n	800c9a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2202      	movs	r2, #2
 800c8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a35      	ldr	r2, [pc, #212]	; (800c9b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d004      	beq.n	800c8ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a34      	ldr	r2, [pc, #208]	; (800c9b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d108      	bne.n	800c8fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c8f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c904:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	4313      	orrs	r3, r2
 800c90e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a25      	ldr	r2, [pc, #148]	; (800c9b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d02c      	beq.n	800c97c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c92a:	d027      	beq.n	800c97c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a22      	ldr	r2, [pc, #136]	; (800c9bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d022      	beq.n	800c97c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a21      	ldr	r2, [pc, #132]	; (800c9c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d01d      	beq.n	800c97c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a1f      	ldr	r2, [pc, #124]	; (800c9c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d018      	beq.n	800c97c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4a1a      	ldr	r2, [pc, #104]	; (800c9b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d013      	beq.n	800c97c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a1b      	ldr	r2, [pc, #108]	; (800c9c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d00e      	beq.n	800c97c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4a1a      	ldr	r2, [pc, #104]	; (800c9cc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d009      	beq.n	800c97c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a18      	ldr	r2, [pc, #96]	; (800c9d0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d004      	beq.n	800c97c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a17      	ldr	r2, [pc, #92]	; (800c9d4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d10c      	bne.n	800c996 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c982:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	68ba      	ldr	r2, [r7, #8]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2201      	movs	r2, #1
 800c99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9a6:	2300      	movs	r3, #0
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3714      	adds	r7, #20
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr
 800c9b4:	40010000 	.word	0x40010000
 800c9b8:	40010400 	.word	0x40010400
 800c9bc:	40000400 	.word	0x40000400
 800c9c0:	40000800 	.word	0x40000800
 800c9c4:	40000c00 	.word	0x40000c00
 800c9c8:	40001800 	.word	0x40001800
 800c9cc:	40014000 	.word	0x40014000
 800c9d0:	4000e000 	.word	0x4000e000
 800c9d4:	4000e400 	.word	0x4000e400

0800c9d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b085      	sub	sp, #20
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d101      	bne.n	800c9f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	e087      	b.n	800cb04 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	4313      	orrs	r3, r2
 800ca16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	4313      	orrs	r3, r2
 800ca24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4313      	orrs	r3, r2
 800ca32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	695b      	ldr	r3, [r3, #20]
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	699b      	ldr	r3, [r3, #24]
 800ca68:	041b      	lsls	r3, r3, #16
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a27      	ldr	r2, [pc, #156]	; (800cb10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d004      	beq.n	800ca82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a25      	ldr	r2, [pc, #148]	; (800cb14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d106      	bne.n	800ca90 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	69db      	ldr	r3, [r3, #28]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a1e      	ldr	r2, [pc, #120]	; (800cb10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d004      	beq.n	800caa4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a1d      	ldr	r2, [pc, #116]	; (800cb14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d126      	bne.n	800caf2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caae:	051b      	lsls	r3, r3, #20
 800cab0:	4313      	orrs	r3, r2
 800cab2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	6a1b      	ldr	r3, [r3, #32]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cacc:	4313      	orrs	r3, r2
 800cace:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a0e      	ldr	r2, [pc, #56]	; (800cb10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d004      	beq.n	800cae4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a0d      	ldr	r2, [pc, #52]	; (800cb14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d106      	bne.n	800caf2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caee:	4313      	orrs	r3, r2
 800caf0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb02:	2300      	movs	r3, #0
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3714      	adds	r7, #20
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	40010000 	.word	0x40010000
 800cb14:	40010400 	.word	0x40010400

0800cb18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b083      	sub	sp, #12
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb20:	bf00      	nop
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb34:	bf00      	nop
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d101      	bne.n	800cb66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb62:	2301      	movs	r3, #1
 800cb64:	e042      	b.n	800cbec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d106      	bne.n	800cb7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7f8 fcc9 	bl	8005510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2224      	movs	r2, #36	; 0x24
 800cb82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f022 0201 	bic.w	r2, r2, #1
 800cb94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fcdc 	bl	800d554 <UART_SetConfig>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d101      	bne.n	800cba6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cba2:	2301      	movs	r3, #1
 800cba4:	e022      	b.n	800cbec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d002      	beq.n	800cbb4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f001 fb3c 	bl	800e22c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	685a      	ldr	r2, [r3, #4]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	689a      	ldr	r2, [r3, #8]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f042 0201 	orr.w	r2, r2, #1
 800cbe2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f001 fbc3 	bl	800e370 <UART_CheckIdleState>
 800cbea:	4603      	mov	r3, r0
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3708      	adds	r7, #8
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b08a      	sub	sp, #40	; 0x28
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	4613      	mov	r3, r2
 800cc00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc08:	2b20      	cmp	r3, #32
 800cc0a:	d17a      	bne.n	800cd02 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d002      	beq.n	800cc18 <HAL_UART_Transmit_DMA+0x24>
 800cc12:	88fb      	ldrh	r3, [r7, #6]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d101      	bne.n	800cc1c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	e073      	b.n	800cd04 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d101      	bne.n	800cc2a <HAL_UART_Transmit_DMA+0x36>
 800cc26:	2302      	movs	r3, #2
 800cc28:	e06c      	b.n	800cd04 <HAL_UART_Transmit_DMA+0x110>
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	68ba      	ldr	r2, [r7, #8]
 800cc36:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	88fa      	ldrh	r2, [r7, #6]
 800cc3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	88fa      	ldrh	r2, [r7, #6]
 800cc44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2221      	movs	r2, #33	; 0x21
 800cc54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d02c      	beq.n	800ccba <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc64:	4a29      	ldr	r2, [pc, #164]	; (800cd0c <HAL_UART_Transmit_DMA+0x118>)
 800cc66:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc6c:	4a28      	ldr	r2, [pc, #160]	; (800cd10 <HAL_UART_Transmit_DMA+0x11c>)
 800cc6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc74:	4a27      	ldr	r2, [pc, #156]	; (800cd14 <HAL_UART_Transmit_DMA+0x120>)
 800cc76:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc88:	4619      	mov	r1, r3
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	3328      	adds	r3, #40	; 0x28
 800cc90:	461a      	mov	r2, r3
 800cc92:	88fb      	ldrh	r3, [r7, #6]
 800cc94:	f7f9 fb5e 	bl	8006354 <HAL_DMA_Start_IT>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00d      	beq.n	800ccba <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2210      	movs	r2, #16
 800cca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2220      	movs	r2, #32
 800ccb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e024      	b.n	800cd04 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2240      	movs	r2, #64	; 0x40
 800ccc0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	3308      	adds	r3, #8
 800ccd0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	e853 3f00 	ldrex	r3, [r3]
 800ccd8:	613b      	str	r3, [r7, #16]
   return(result);
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cce0:	627b      	str	r3, [r7, #36]	; 0x24
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	3308      	adds	r3, #8
 800cce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccea:	623a      	str	r2, [r7, #32]
 800ccec:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccee:	69f9      	ldr	r1, [r7, #28]
 800ccf0:	6a3a      	ldr	r2, [r7, #32]
 800ccf2:	e841 2300 	strex	r3, r2, [r1]
 800ccf6:	61bb      	str	r3, [r7, #24]
   return(result);
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d1e5      	bne.n	800ccca <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	e000      	b.n	800cd04 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800cd02:	2302      	movs	r3, #2
  }
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3728      	adds	r7, #40	; 0x28
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	0800e839 	.word	0x0800e839
 800cd10:	0800e8cf 	.word	0x0800e8cf
 800cd14:	0800ea45 	.word	0x0800ea45

0800cd18 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b08a      	sub	sp, #40	; 0x28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	4613      	mov	r3, r2
 800cd24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd2c:	2b20      	cmp	r3, #32
 800cd2e:	d142      	bne.n	800cdb6 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d002      	beq.n	800cd3c <HAL_UART_Receive_DMA+0x24>
 800cd36:	88fb      	ldrh	r3, [r7, #6]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d101      	bne.n	800cd40 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	e03b      	b.n	800cdb8 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d101      	bne.n	800cd4e <HAL_UART_Receive_DMA+0x36>
 800cd4a:	2302      	movs	r3, #2
 800cd4c:	e034      	b.n	800cdb8 <HAL_UART_Receive_DMA+0xa0>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2201      	movs	r2, #1
 800cd52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a17      	ldr	r2, [pc, #92]	; (800cdc0 <HAL_UART_Receive_DMA+0xa8>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d01f      	beq.n	800cda6 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d018      	beq.n	800cda6 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	e853 3f00 	ldrex	r3, [r3]
 800cd80:	613b      	str	r3, [r7, #16]
   return(result);
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd88:	627b      	str	r3, [r7, #36]	; 0x24
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd92:	623b      	str	r3, [r7, #32]
 800cd94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd96:	69f9      	ldr	r1, [r7, #28]
 800cd98:	6a3a      	ldr	r2, [r7, #32]
 800cd9a:	e841 2300 	strex	r3, r2, [r1]
 800cd9e:	61bb      	str	r3, [r7, #24]
   return(result);
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d1e6      	bne.n	800cd74 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cda6:	88fb      	ldrh	r3, [r7, #6]
 800cda8:	461a      	mov	r2, r3
 800cdaa:	68b9      	ldr	r1, [r7, #8]
 800cdac:	68f8      	ldr	r0, [r7, #12]
 800cdae:	f001 fbf3 	bl	800e598 <UART_Start_Receive_DMA>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	e000      	b.n	800cdb8 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cdb6:	2302      	movs	r3, #2
  }
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3728      	adds	r7, #40	; 0x28
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	58000c00 	.word	0x58000c00

0800cdc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b0ba      	sub	sp, #232	; 0xe8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	69db      	ldr	r3, [r3, #28]
 800cdd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cdea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cdee:	f640 030f 	movw	r3, #2063	; 0x80f
 800cdf2:	4013      	ands	r3, r2
 800cdf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cdf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d11b      	bne.n	800ce38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ce00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce04:	f003 0320 	and.w	r3, r3, #32
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d015      	beq.n	800ce38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ce0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce10:	f003 0320 	and.w	r3, r3, #32
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d105      	bne.n	800ce24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d009      	beq.n	800ce38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f000 835a 	beq.w	800d4e2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	4798      	blx	r3
      }
      return;
 800ce36:	e354      	b.n	800d4e2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ce38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f000 811f 	beq.w	800d080 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ce42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ce46:	4b8b      	ldr	r3, [pc, #556]	; (800d074 <HAL_UART_IRQHandler+0x2b0>)
 800ce48:	4013      	ands	r3, r2
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d106      	bne.n	800ce5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ce4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ce52:	4b89      	ldr	r3, [pc, #548]	; (800d078 <HAL_UART_IRQHandler+0x2b4>)
 800ce54:	4013      	ands	r3, r2
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	f000 8112 	beq.w	800d080 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce60:	f003 0301 	and.w	r3, r3, #1
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d011      	beq.n	800ce8c <HAL_UART_IRQHandler+0xc8>
 800ce68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00b      	beq.n	800ce8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2201      	movs	r2, #1
 800ce7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce82:	f043 0201 	orr.w	r2, r3, #1
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce90:	f003 0302 	and.w	r3, r3, #2
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d011      	beq.n	800cebc <HAL_UART_IRQHandler+0xf8>
 800ce98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce9c:	f003 0301 	and.w	r3, r3, #1
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00b      	beq.n	800cebc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	2202      	movs	r2, #2
 800ceaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ceb2:	f043 0204 	orr.w	r2, r3, #4
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cec0:	f003 0304 	and.w	r3, r3, #4
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d011      	beq.n	800ceec <HAL_UART_IRQHandler+0x128>
 800cec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cecc:	f003 0301 	and.w	r3, r3, #1
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d00b      	beq.n	800ceec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2204      	movs	r2, #4
 800ceda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cee2:	f043 0202 	orr.w	r2, r3, #2
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ceec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cef0:	f003 0308 	and.w	r3, r3, #8
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d017      	beq.n	800cf28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cefc:	f003 0320 	and.w	r3, r3, #32
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d105      	bne.n	800cf10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cf04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf08:	4b5a      	ldr	r3, [pc, #360]	; (800d074 <HAL_UART_IRQHandler+0x2b0>)
 800cf0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d00b      	beq.n	800cf28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	2208      	movs	r2, #8
 800cf16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf1e:	f043 0208 	orr.w	r2, r3, #8
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cf28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d012      	beq.n	800cf5a <HAL_UART_IRQHandler+0x196>
 800cf34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00c      	beq.n	800cf5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf50:	f043 0220 	orr.w	r2, r3, #32
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f000 82c0 	beq.w	800d4e6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cf66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf6a:	f003 0320 	and.w	r3, r3, #32
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d013      	beq.n	800cf9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cf72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf76:	f003 0320 	and.w	r3, r3, #32
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d105      	bne.n	800cf8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d007      	beq.n	800cf9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d003      	beq.n	800cf9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	689b      	ldr	r3, [r3, #8]
 800cfaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfae:	2b40      	cmp	r3, #64	; 0x40
 800cfb0:	d005      	beq.n	800cfbe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cfb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cfb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d04f      	beq.n	800d05e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f001 fbd4 	bl	800e76c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfce:	2b40      	cmp	r3, #64	; 0x40
 800cfd0:	d141      	bne.n	800d056 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	3308      	adds	r3, #8
 800cfd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cfe0:	e853 3f00 	ldrex	r3, [r3]
 800cfe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cfe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cfec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	3308      	adds	r3, #8
 800cffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cffe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d00a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d00e:	e841 2300 	strex	r3, r2, [r1]
 800d012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1d9      	bne.n	800cfd2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d022:	2b00      	cmp	r3, #0
 800d024:	d013      	beq.n	800d04e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d02a:	4a14      	ldr	r2, [pc, #80]	; (800d07c <HAL_UART_IRQHandler+0x2b8>)
 800d02c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d032:	4618      	mov	r0, r3
 800d034:	f7f9 ff16 	bl	8006e64 <HAL_DMA_Abort_IT>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d017      	beq.n	800d06e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d048:	4610      	mov	r0, r2
 800d04a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d04c:	e00f      	b.n	800d06e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 fa6a 	bl	800d528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d054:	e00b      	b.n	800d06e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 fa66 	bl	800d528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d05c:	e007      	b.n	800d06e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fa62 	bl	800d528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d06c:	e23b      	b.n	800d4e6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d06e:	bf00      	nop
    return;
 800d070:	e239      	b.n	800d4e6 <HAL_UART_IRQHandler+0x722>
 800d072:	bf00      	nop
 800d074:	10000001 	.word	0x10000001
 800d078:	04000120 	.word	0x04000120
 800d07c:	0800eac5 	.word	0x0800eac5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d084:	2b01      	cmp	r3, #1
 800d086:	f040 81ce 	bne.w	800d426 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d08a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d08e:	f003 0310 	and.w	r3, r3, #16
 800d092:	2b00      	cmp	r3, #0
 800d094:	f000 81c7 	beq.w	800d426 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d09c:	f003 0310 	and.w	r3, r3, #16
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 81c0 	beq.w	800d426 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2210      	movs	r2, #16
 800d0ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0b8:	2b40      	cmp	r3, #64	; 0x40
 800d0ba:	f040 813b 	bne.w	800d334 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a8b      	ldr	r2, [pc, #556]	; (800d2f4 <HAL_UART_IRQHandler+0x530>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d059      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a89      	ldr	r2, [pc, #548]	; (800d2f8 <HAL_UART_IRQHandler+0x534>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d053      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a87      	ldr	r2, [pc, #540]	; (800d2fc <HAL_UART_IRQHandler+0x538>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d04d      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a85      	ldr	r2, [pc, #532]	; (800d300 <HAL_UART_IRQHandler+0x53c>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d047      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a83      	ldr	r2, [pc, #524]	; (800d304 <HAL_UART_IRQHandler+0x540>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d041      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a81      	ldr	r2, [pc, #516]	; (800d308 <HAL_UART_IRQHandler+0x544>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d03b      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4a7f      	ldr	r2, [pc, #508]	; (800d30c <HAL_UART_IRQHandler+0x548>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d035      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a7d      	ldr	r2, [pc, #500]	; (800d310 <HAL_UART_IRQHandler+0x54c>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d02f      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a7b      	ldr	r2, [pc, #492]	; (800d314 <HAL_UART_IRQHandler+0x550>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d029      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a79      	ldr	r2, [pc, #484]	; (800d318 <HAL_UART_IRQHandler+0x554>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d023      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a77      	ldr	r2, [pc, #476]	; (800d31c <HAL_UART_IRQHandler+0x558>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d01d      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a75      	ldr	r2, [pc, #468]	; (800d320 <HAL_UART_IRQHandler+0x55c>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d017      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4a73      	ldr	r2, [pc, #460]	; (800d324 <HAL_UART_IRQHandler+0x560>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d011      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a71      	ldr	r2, [pc, #452]	; (800d328 <HAL_UART_IRQHandler+0x564>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d00b      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a6f      	ldr	r2, [pc, #444]	; (800d32c <HAL_UART_IRQHandler+0x568>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d005      	beq.n	800d17e <HAL_UART_IRQHandler+0x3ba>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a6d      	ldr	r2, [pc, #436]	; (800d330 <HAL_UART_IRQHandler+0x56c>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d105      	bne.n	800d18a <HAL_UART_IRQHandler+0x3c6>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	b29b      	uxth	r3, r3
 800d188:	e004      	b.n	800d194 <HAL_UART_IRQHandler+0x3d0>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	b29b      	uxth	r3, r3
 800d194:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d198:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	f000 81a4 	beq.w	800d4ea <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d1a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	f080 819c 	bcs.w	800d4ea <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d1b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1c0:	69db      	ldr	r3, [r3, #28]
 800d1c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1c6:	f000 8086 	beq.w	800d2d6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d1d6:	e853 3f00 	ldrex	r3, [r3]
 800d1da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d1de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d1e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d1f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d1f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d200:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d204:	e841 2300 	strex	r3, r2, [r1]
 800d208:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d20c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d210:	2b00      	cmp	r3, #0
 800d212:	d1da      	bne.n	800d1ca <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	3308      	adds	r3, #8
 800d21a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d21c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d21e:	e853 3f00 	ldrex	r3, [r3]
 800d222:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d226:	f023 0301 	bic.w	r3, r3, #1
 800d22a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	3308      	adds	r3, #8
 800d234:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d238:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d23c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d240:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d244:	e841 2300 	strex	r3, r2, [r1]
 800d248:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d24a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d1e1      	bne.n	800d214 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3308      	adds	r3, #8
 800d256:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d25a:	e853 3f00 	ldrex	r3, [r3]
 800d25e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	3308      	adds	r3, #8
 800d270:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d274:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d276:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d278:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d27a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d27c:	e841 2300 	strex	r3, r2, [r1]
 800d280:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d282:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d284:	2b00      	cmp	r3, #0
 800d286:	d1e3      	bne.n	800d250 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2220      	movs	r2, #32
 800d28c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d29e:	e853 3f00 	ldrex	r3, [r3]
 800d2a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d2a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2a6:	f023 0310 	bic.w	r3, r3, #16
 800d2aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d2b8:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d2be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2c0:	e841 2300 	strex	r3, r2, [r1]
 800d2c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d2c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d1e4      	bne.n	800d296 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7f9 faa9 	bl	8006828 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	1ad3      	subs	r3, r2, r3
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 f926 	bl	800d53c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d2f0:	e0fb      	b.n	800d4ea <HAL_UART_IRQHandler+0x726>
 800d2f2:	bf00      	nop
 800d2f4:	40020010 	.word	0x40020010
 800d2f8:	40020028 	.word	0x40020028
 800d2fc:	40020040 	.word	0x40020040
 800d300:	40020058 	.word	0x40020058
 800d304:	40020070 	.word	0x40020070
 800d308:	40020088 	.word	0x40020088
 800d30c:	400200a0 	.word	0x400200a0
 800d310:	400200b8 	.word	0x400200b8
 800d314:	40020410 	.word	0x40020410
 800d318:	40020428 	.word	0x40020428
 800d31c:	40020440 	.word	0x40020440
 800d320:	40020458 	.word	0x40020458
 800d324:	40020470 	.word	0x40020470
 800d328:	40020488 	.word	0x40020488
 800d32c:	400204a0 	.word	0x400204a0
 800d330:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d340:	b29b      	uxth	r3, r3
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d34e:	b29b      	uxth	r3, r3
 800d350:	2b00      	cmp	r3, #0
 800d352:	f000 80cc 	beq.w	800d4ee <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d356:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f000 80c7 	beq.w	800d4ee <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d368:	e853 3f00 	ldrex	r3, [r3]
 800d36c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d370:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d374:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	461a      	mov	r2, r3
 800d37e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d382:	647b      	str	r3, [r7, #68]	; 0x44
 800d384:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d386:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d38a:	e841 2300 	strex	r3, r2, [r1]
 800d38e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1e4      	bne.n	800d360 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	3308      	adds	r3, #8
 800d39c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a0:	e853 3f00 	ldrex	r3, [r3]
 800d3a4:	623b      	str	r3, [r7, #32]
   return(result);
 800d3a6:	6a3a      	ldr	r2, [r7, #32]
 800d3a8:	4b54      	ldr	r3, [pc, #336]	; (800d4fc <HAL_UART_IRQHandler+0x738>)
 800d3aa:	4013      	ands	r3, r2
 800d3ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	3308      	adds	r3, #8
 800d3b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d3ba:	633a      	str	r2, [r7, #48]	; 0x30
 800d3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3c2:	e841 2300 	strex	r3, r2, [r1]
 800d3c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d1e3      	bne.n	800d396 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2220      	movs	r2, #32
 800d3d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	e853 3f00 	ldrex	r3, [r3]
 800d3ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f023 0310 	bic.w	r3, r3, #16
 800d3f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	461a      	mov	r2, r3
 800d400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d404:	61fb      	str	r3, [r7, #28]
 800d406:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d408:	69b9      	ldr	r1, [r7, #24]
 800d40a:	69fa      	ldr	r2, [r7, #28]
 800d40c:	e841 2300 	strex	r3, r2, [r1]
 800d410:	617b      	str	r3, [r7, #20]
   return(result);
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1e4      	bne.n	800d3e2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d41c:	4619      	mov	r1, r3
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 f88c 	bl	800d53c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d424:	e063      	b.n	800d4ee <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d42a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00e      	beq.n	800d450 <HAL_UART_IRQHandler+0x68c>
 800d432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d008      	beq.n	800d450 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d446:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f001 fb7c 	bl	800eb46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d44e:	e051      	b.n	800d4f4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d014      	beq.n	800d486 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d45c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d464:	2b00      	cmp	r3, #0
 800d466:	d105      	bne.n	800d474 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d46c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d470:	2b00      	cmp	r3, #0
 800d472:	d008      	beq.n	800d486 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d03a      	beq.n	800d4f2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	4798      	blx	r3
    }
    return;
 800d484:	e035      	b.n	800d4f2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d009      	beq.n	800d4a6 <HAL_UART_IRQHandler+0x6e2>
 800d492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d003      	beq.n	800d4a6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f001 fb26 	bl	800eaf0 <UART_EndTransmit_IT>
    return;
 800d4a4:	e026      	b.n	800d4f4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d009      	beq.n	800d4c6 <HAL_UART_IRQHandler+0x702>
 800d4b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d003      	beq.n	800d4c6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f001 fb55 	bl	800eb6e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4c4:	e016      	b.n	800d4f4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d4c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d010      	beq.n	800d4f4 <HAL_UART_IRQHandler+0x730>
 800d4d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	da0c      	bge.n	800d4f4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f001 fb3d 	bl	800eb5a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4e0:	e008      	b.n	800d4f4 <HAL_UART_IRQHandler+0x730>
      return;
 800d4e2:	bf00      	nop
 800d4e4:	e006      	b.n	800d4f4 <HAL_UART_IRQHandler+0x730>
    return;
 800d4e6:	bf00      	nop
 800d4e8:	e004      	b.n	800d4f4 <HAL_UART_IRQHandler+0x730>
      return;
 800d4ea:	bf00      	nop
 800d4ec:	e002      	b.n	800d4f4 <HAL_UART_IRQHandler+0x730>
      return;
 800d4ee:	bf00      	nop
 800d4f0:	e000      	b.n	800d4f4 <HAL_UART_IRQHandler+0x730>
    return;
 800d4f2:	bf00      	nop
  }
}
 800d4f4:	37e8      	adds	r7, #232	; 0xe8
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	effffffe 	.word	0xeffffffe

0800d500 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d51c:	bf00      	nop
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d530:	bf00      	nop
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	460b      	mov	r3, r1
 800d546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d548:	bf00      	nop
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d558:	b092      	sub	sp, #72	; 0x48
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d55e:	2300      	movs	r3, #0
 800d560:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	689a      	ldr	r2, [r3, #8]
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	691b      	ldr	r3, [r3, #16]
 800d56c:	431a      	orrs	r2, r3
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	695b      	ldr	r3, [r3, #20]
 800d572:	431a      	orrs	r2, r3
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	69db      	ldr	r3, [r3, #28]
 800d578:	4313      	orrs	r3, r2
 800d57a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	4bbe      	ldr	r3, [pc, #760]	; (800d87c <UART_SetConfig+0x328>)
 800d584:	4013      	ands	r3, r2
 800d586:	697a      	ldr	r2, [r7, #20]
 800d588:	6812      	ldr	r2, [r2, #0]
 800d58a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d58c:	430b      	orrs	r3, r1
 800d58e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	68da      	ldr	r2, [r3, #12]
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	430a      	orrs	r2, r1
 800d5a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	699b      	ldr	r3, [r3, #24]
 800d5aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4ab3      	ldr	r2, [pc, #716]	; (800d880 <UART_SetConfig+0x32c>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d004      	beq.n	800d5c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	6a1b      	ldr	r3, [r3, #32]
 800d5ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	689a      	ldr	r2, [r3, #8]
 800d5c6:	4baf      	ldr	r3, [pc, #700]	; (800d884 <UART_SetConfig+0x330>)
 800d5c8:	4013      	ands	r3, r2
 800d5ca:	697a      	ldr	r2, [r7, #20]
 800d5cc:	6812      	ldr	r2, [r2, #0]
 800d5ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5d0:	430b      	orrs	r3, r1
 800d5d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5da:	f023 010f 	bic.w	r1, r3, #15
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	430a      	orrs	r2, r1
 800d5e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4aa6      	ldr	r2, [pc, #664]	; (800d888 <UART_SetConfig+0x334>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d177      	bne.n	800d6e4 <UART_SetConfig+0x190>
 800d5f4:	4ba5      	ldr	r3, [pc, #660]	; (800d88c <UART_SetConfig+0x338>)
 800d5f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d5fc:	2b28      	cmp	r3, #40	; 0x28
 800d5fe:	d86d      	bhi.n	800d6dc <UART_SetConfig+0x188>
 800d600:	a201      	add	r2, pc, #4	; (adr r2, 800d608 <UART_SetConfig+0xb4>)
 800d602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d606:	bf00      	nop
 800d608:	0800d6ad 	.word	0x0800d6ad
 800d60c:	0800d6dd 	.word	0x0800d6dd
 800d610:	0800d6dd 	.word	0x0800d6dd
 800d614:	0800d6dd 	.word	0x0800d6dd
 800d618:	0800d6dd 	.word	0x0800d6dd
 800d61c:	0800d6dd 	.word	0x0800d6dd
 800d620:	0800d6dd 	.word	0x0800d6dd
 800d624:	0800d6dd 	.word	0x0800d6dd
 800d628:	0800d6b5 	.word	0x0800d6b5
 800d62c:	0800d6dd 	.word	0x0800d6dd
 800d630:	0800d6dd 	.word	0x0800d6dd
 800d634:	0800d6dd 	.word	0x0800d6dd
 800d638:	0800d6dd 	.word	0x0800d6dd
 800d63c:	0800d6dd 	.word	0x0800d6dd
 800d640:	0800d6dd 	.word	0x0800d6dd
 800d644:	0800d6dd 	.word	0x0800d6dd
 800d648:	0800d6bd 	.word	0x0800d6bd
 800d64c:	0800d6dd 	.word	0x0800d6dd
 800d650:	0800d6dd 	.word	0x0800d6dd
 800d654:	0800d6dd 	.word	0x0800d6dd
 800d658:	0800d6dd 	.word	0x0800d6dd
 800d65c:	0800d6dd 	.word	0x0800d6dd
 800d660:	0800d6dd 	.word	0x0800d6dd
 800d664:	0800d6dd 	.word	0x0800d6dd
 800d668:	0800d6c5 	.word	0x0800d6c5
 800d66c:	0800d6dd 	.word	0x0800d6dd
 800d670:	0800d6dd 	.word	0x0800d6dd
 800d674:	0800d6dd 	.word	0x0800d6dd
 800d678:	0800d6dd 	.word	0x0800d6dd
 800d67c:	0800d6dd 	.word	0x0800d6dd
 800d680:	0800d6dd 	.word	0x0800d6dd
 800d684:	0800d6dd 	.word	0x0800d6dd
 800d688:	0800d6cd 	.word	0x0800d6cd
 800d68c:	0800d6dd 	.word	0x0800d6dd
 800d690:	0800d6dd 	.word	0x0800d6dd
 800d694:	0800d6dd 	.word	0x0800d6dd
 800d698:	0800d6dd 	.word	0x0800d6dd
 800d69c:	0800d6dd 	.word	0x0800d6dd
 800d6a0:	0800d6dd 	.word	0x0800d6dd
 800d6a4:	0800d6dd 	.word	0x0800d6dd
 800d6a8:	0800d6d5 	.word	0x0800d6d5
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6b2:	e326      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d6b4:	2304      	movs	r3, #4
 800d6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ba:	e322      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d6bc:	2308      	movs	r3, #8
 800d6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c2:	e31e      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d6c4:	2310      	movs	r3, #16
 800d6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ca:	e31a      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d6cc:	2320      	movs	r3, #32
 800d6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6d2:	e316      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d6d4:	2340      	movs	r3, #64	; 0x40
 800d6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6da:	e312      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d6dc:	2380      	movs	r3, #128	; 0x80
 800d6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6e2:	e30e      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4a69      	ldr	r2, [pc, #420]	; (800d890 <UART_SetConfig+0x33c>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d130      	bne.n	800d750 <UART_SetConfig+0x1fc>
 800d6ee:	4b67      	ldr	r3, [pc, #412]	; (800d88c <UART_SetConfig+0x338>)
 800d6f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6f2:	f003 0307 	and.w	r3, r3, #7
 800d6f6:	2b05      	cmp	r3, #5
 800d6f8:	d826      	bhi.n	800d748 <UART_SetConfig+0x1f4>
 800d6fa:	a201      	add	r2, pc, #4	; (adr r2, 800d700 <UART_SetConfig+0x1ac>)
 800d6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d700:	0800d719 	.word	0x0800d719
 800d704:	0800d721 	.word	0x0800d721
 800d708:	0800d729 	.word	0x0800d729
 800d70c:	0800d731 	.word	0x0800d731
 800d710:	0800d739 	.word	0x0800d739
 800d714:	0800d741 	.word	0x0800d741
 800d718:	2300      	movs	r3, #0
 800d71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71e:	e2f0      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d720:	2304      	movs	r3, #4
 800d722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d726:	e2ec      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d728:	2308      	movs	r3, #8
 800d72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72e:	e2e8      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d730:	2310      	movs	r3, #16
 800d732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d736:	e2e4      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d738:	2320      	movs	r3, #32
 800d73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73e:	e2e0      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d740:	2340      	movs	r3, #64	; 0x40
 800d742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d746:	e2dc      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d748:	2380      	movs	r3, #128	; 0x80
 800d74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d74e:	e2d8      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4a4f      	ldr	r2, [pc, #316]	; (800d894 <UART_SetConfig+0x340>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d130      	bne.n	800d7bc <UART_SetConfig+0x268>
 800d75a:	4b4c      	ldr	r3, [pc, #304]	; (800d88c <UART_SetConfig+0x338>)
 800d75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d75e:	f003 0307 	and.w	r3, r3, #7
 800d762:	2b05      	cmp	r3, #5
 800d764:	d826      	bhi.n	800d7b4 <UART_SetConfig+0x260>
 800d766:	a201      	add	r2, pc, #4	; (adr r2, 800d76c <UART_SetConfig+0x218>)
 800d768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76c:	0800d785 	.word	0x0800d785
 800d770:	0800d78d 	.word	0x0800d78d
 800d774:	0800d795 	.word	0x0800d795
 800d778:	0800d79d 	.word	0x0800d79d
 800d77c:	0800d7a5 	.word	0x0800d7a5
 800d780:	0800d7ad 	.word	0x0800d7ad
 800d784:	2300      	movs	r3, #0
 800d786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78a:	e2ba      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d78c:	2304      	movs	r3, #4
 800d78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d792:	e2b6      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d794:	2308      	movs	r3, #8
 800d796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79a:	e2b2      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d79c:	2310      	movs	r3, #16
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a2:	e2ae      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d7a4:	2320      	movs	r3, #32
 800d7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7aa:	e2aa      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d7ac:	2340      	movs	r3, #64	; 0x40
 800d7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7b2:	e2a6      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d7b4:	2380      	movs	r3, #128	; 0x80
 800d7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ba:	e2a2      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a35      	ldr	r2, [pc, #212]	; (800d898 <UART_SetConfig+0x344>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d130      	bne.n	800d828 <UART_SetConfig+0x2d4>
 800d7c6:	4b31      	ldr	r3, [pc, #196]	; (800d88c <UART_SetConfig+0x338>)
 800d7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7ca:	f003 0307 	and.w	r3, r3, #7
 800d7ce:	2b05      	cmp	r3, #5
 800d7d0:	d826      	bhi.n	800d820 <UART_SetConfig+0x2cc>
 800d7d2:	a201      	add	r2, pc, #4	; (adr r2, 800d7d8 <UART_SetConfig+0x284>)
 800d7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d8:	0800d7f1 	.word	0x0800d7f1
 800d7dc:	0800d7f9 	.word	0x0800d7f9
 800d7e0:	0800d801 	.word	0x0800d801
 800d7e4:	0800d809 	.word	0x0800d809
 800d7e8:	0800d811 	.word	0x0800d811
 800d7ec:	0800d819 	.word	0x0800d819
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7f6:	e284      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d7f8:	2304      	movs	r3, #4
 800d7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fe:	e280      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d800:	2308      	movs	r3, #8
 800d802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d806:	e27c      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d808:	2310      	movs	r3, #16
 800d80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80e:	e278      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d810:	2320      	movs	r3, #32
 800d812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d816:	e274      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d818:	2340      	movs	r3, #64	; 0x40
 800d81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d81e:	e270      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d820:	2380      	movs	r3, #128	; 0x80
 800d822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d826:	e26c      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a1b      	ldr	r2, [pc, #108]	; (800d89c <UART_SetConfig+0x348>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d142      	bne.n	800d8b8 <UART_SetConfig+0x364>
 800d832:	4b16      	ldr	r3, [pc, #88]	; (800d88c <UART_SetConfig+0x338>)
 800d834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d836:	f003 0307 	and.w	r3, r3, #7
 800d83a:	2b05      	cmp	r3, #5
 800d83c:	d838      	bhi.n	800d8b0 <UART_SetConfig+0x35c>
 800d83e:	a201      	add	r2, pc, #4	; (adr r2, 800d844 <UART_SetConfig+0x2f0>)
 800d840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d844:	0800d85d 	.word	0x0800d85d
 800d848:	0800d865 	.word	0x0800d865
 800d84c:	0800d86d 	.word	0x0800d86d
 800d850:	0800d875 	.word	0x0800d875
 800d854:	0800d8a1 	.word	0x0800d8a1
 800d858:	0800d8a9 	.word	0x0800d8a9
 800d85c:	2300      	movs	r3, #0
 800d85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d862:	e24e      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d864:	2304      	movs	r3, #4
 800d866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d86a:	e24a      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d86c:	2308      	movs	r3, #8
 800d86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d872:	e246      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d874:	2310      	movs	r3, #16
 800d876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d87a:	e242      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d87c:	cfff69f3 	.word	0xcfff69f3
 800d880:	58000c00 	.word	0x58000c00
 800d884:	11fff4ff 	.word	0x11fff4ff
 800d888:	40011000 	.word	0x40011000
 800d88c:	58024400 	.word	0x58024400
 800d890:	40004400 	.word	0x40004400
 800d894:	40004800 	.word	0x40004800
 800d898:	40004c00 	.word	0x40004c00
 800d89c:	40005000 	.word	0x40005000
 800d8a0:	2320      	movs	r3, #32
 800d8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8a6:	e22c      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d8a8:	2340      	movs	r3, #64	; 0x40
 800d8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ae:	e228      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d8b0:	2380      	movs	r3, #128	; 0x80
 800d8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8b6:	e224      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4ab1      	ldr	r2, [pc, #708]	; (800db84 <UART_SetConfig+0x630>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d176      	bne.n	800d9b0 <UART_SetConfig+0x45c>
 800d8c2:	4bb1      	ldr	r3, [pc, #708]	; (800db88 <UART_SetConfig+0x634>)
 800d8c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d8ca:	2b28      	cmp	r3, #40	; 0x28
 800d8cc:	d86c      	bhi.n	800d9a8 <UART_SetConfig+0x454>
 800d8ce:	a201      	add	r2, pc, #4	; (adr r2, 800d8d4 <UART_SetConfig+0x380>)
 800d8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d4:	0800d979 	.word	0x0800d979
 800d8d8:	0800d9a9 	.word	0x0800d9a9
 800d8dc:	0800d9a9 	.word	0x0800d9a9
 800d8e0:	0800d9a9 	.word	0x0800d9a9
 800d8e4:	0800d9a9 	.word	0x0800d9a9
 800d8e8:	0800d9a9 	.word	0x0800d9a9
 800d8ec:	0800d9a9 	.word	0x0800d9a9
 800d8f0:	0800d9a9 	.word	0x0800d9a9
 800d8f4:	0800d981 	.word	0x0800d981
 800d8f8:	0800d9a9 	.word	0x0800d9a9
 800d8fc:	0800d9a9 	.word	0x0800d9a9
 800d900:	0800d9a9 	.word	0x0800d9a9
 800d904:	0800d9a9 	.word	0x0800d9a9
 800d908:	0800d9a9 	.word	0x0800d9a9
 800d90c:	0800d9a9 	.word	0x0800d9a9
 800d910:	0800d9a9 	.word	0x0800d9a9
 800d914:	0800d989 	.word	0x0800d989
 800d918:	0800d9a9 	.word	0x0800d9a9
 800d91c:	0800d9a9 	.word	0x0800d9a9
 800d920:	0800d9a9 	.word	0x0800d9a9
 800d924:	0800d9a9 	.word	0x0800d9a9
 800d928:	0800d9a9 	.word	0x0800d9a9
 800d92c:	0800d9a9 	.word	0x0800d9a9
 800d930:	0800d9a9 	.word	0x0800d9a9
 800d934:	0800d991 	.word	0x0800d991
 800d938:	0800d9a9 	.word	0x0800d9a9
 800d93c:	0800d9a9 	.word	0x0800d9a9
 800d940:	0800d9a9 	.word	0x0800d9a9
 800d944:	0800d9a9 	.word	0x0800d9a9
 800d948:	0800d9a9 	.word	0x0800d9a9
 800d94c:	0800d9a9 	.word	0x0800d9a9
 800d950:	0800d9a9 	.word	0x0800d9a9
 800d954:	0800d999 	.word	0x0800d999
 800d958:	0800d9a9 	.word	0x0800d9a9
 800d95c:	0800d9a9 	.word	0x0800d9a9
 800d960:	0800d9a9 	.word	0x0800d9a9
 800d964:	0800d9a9 	.word	0x0800d9a9
 800d968:	0800d9a9 	.word	0x0800d9a9
 800d96c:	0800d9a9 	.word	0x0800d9a9
 800d970:	0800d9a9 	.word	0x0800d9a9
 800d974:	0800d9a1 	.word	0x0800d9a1
 800d978:	2301      	movs	r3, #1
 800d97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d97e:	e1c0      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d980:	2304      	movs	r3, #4
 800d982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d986:	e1bc      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d988:	2308      	movs	r3, #8
 800d98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d98e:	e1b8      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d990:	2310      	movs	r3, #16
 800d992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d996:	e1b4      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d998:	2320      	movs	r3, #32
 800d99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d99e:	e1b0      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d9a0:	2340      	movs	r3, #64	; 0x40
 800d9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9a6:	e1ac      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d9a8:	2380      	movs	r3, #128	; 0x80
 800d9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ae:	e1a8      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a75      	ldr	r2, [pc, #468]	; (800db8c <UART_SetConfig+0x638>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d130      	bne.n	800da1c <UART_SetConfig+0x4c8>
 800d9ba:	4b73      	ldr	r3, [pc, #460]	; (800db88 <UART_SetConfig+0x634>)
 800d9bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9be:	f003 0307 	and.w	r3, r3, #7
 800d9c2:	2b05      	cmp	r3, #5
 800d9c4:	d826      	bhi.n	800da14 <UART_SetConfig+0x4c0>
 800d9c6:	a201      	add	r2, pc, #4	; (adr r2, 800d9cc <UART_SetConfig+0x478>)
 800d9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9cc:	0800d9e5 	.word	0x0800d9e5
 800d9d0:	0800d9ed 	.word	0x0800d9ed
 800d9d4:	0800d9f5 	.word	0x0800d9f5
 800d9d8:	0800d9fd 	.word	0x0800d9fd
 800d9dc:	0800da05 	.word	0x0800da05
 800d9e0:	0800da0d 	.word	0x0800da0d
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ea:	e18a      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d9ec:	2304      	movs	r3, #4
 800d9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f2:	e186      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d9f4:	2308      	movs	r3, #8
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fa:	e182      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800d9fc:	2310      	movs	r3, #16
 800d9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da02:	e17e      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800da04:	2320      	movs	r3, #32
 800da06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0a:	e17a      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800da0c:	2340      	movs	r3, #64	; 0x40
 800da0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da12:	e176      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800da14:	2380      	movs	r3, #128	; 0x80
 800da16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da1a:	e172      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4a5b      	ldr	r2, [pc, #364]	; (800db90 <UART_SetConfig+0x63c>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d130      	bne.n	800da88 <UART_SetConfig+0x534>
 800da26:	4b58      	ldr	r3, [pc, #352]	; (800db88 <UART_SetConfig+0x634>)
 800da28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da2a:	f003 0307 	and.w	r3, r3, #7
 800da2e:	2b05      	cmp	r3, #5
 800da30:	d826      	bhi.n	800da80 <UART_SetConfig+0x52c>
 800da32:	a201      	add	r2, pc, #4	; (adr r2, 800da38 <UART_SetConfig+0x4e4>)
 800da34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da38:	0800da51 	.word	0x0800da51
 800da3c:	0800da59 	.word	0x0800da59
 800da40:	0800da61 	.word	0x0800da61
 800da44:	0800da69 	.word	0x0800da69
 800da48:	0800da71 	.word	0x0800da71
 800da4c:	0800da79 	.word	0x0800da79
 800da50:	2300      	movs	r3, #0
 800da52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da56:	e154      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800da58:	2304      	movs	r3, #4
 800da5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5e:	e150      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800da60:	2308      	movs	r3, #8
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da66:	e14c      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800da68:	2310      	movs	r3, #16
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6e:	e148      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800da70:	2320      	movs	r3, #32
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da76:	e144      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800da78:	2340      	movs	r3, #64	; 0x40
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7e:	e140      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800da80:	2380      	movs	r3, #128	; 0x80
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da86:	e13c      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4a41      	ldr	r2, [pc, #260]	; (800db94 <UART_SetConfig+0x640>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	f040 8082 	bne.w	800db98 <UART_SetConfig+0x644>
 800da94:	4b3c      	ldr	r3, [pc, #240]	; (800db88 <UART_SetConfig+0x634>)
 800da96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da9c:	2b28      	cmp	r3, #40	; 0x28
 800da9e:	d86d      	bhi.n	800db7c <UART_SetConfig+0x628>
 800daa0:	a201      	add	r2, pc, #4	; (adr r2, 800daa8 <UART_SetConfig+0x554>)
 800daa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa6:	bf00      	nop
 800daa8:	0800db4d 	.word	0x0800db4d
 800daac:	0800db7d 	.word	0x0800db7d
 800dab0:	0800db7d 	.word	0x0800db7d
 800dab4:	0800db7d 	.word	0x0800db7d
 800dab8:	0800db7d 	.word	0x0800db7d
 800dabc:	0800db7d 	.word	0x0800db7d
 800dac0:	0800db7d 	.word	0x0800db7d
 800dac4:	0800db7d 	.word	0x0800db7d
 800dac8:	0800db55 	.word	0x0800db55
 800dacc:	0800db7d 	.word	0x0800db7d
 800dad0:	0800db7d 	.word	0x0800db7d
 800dad4:	0800db7d 	.word	0x0800db7d
 800dad8:	0800db7d 	.word	0x0800db7d
 800dadc:	0800db7d 	.word	0x0800db7d
 800dae0:	0800db7d 	.word	0x0800db7d
 800dae4:	0800db7d 	.word	0x0800db7d
 800dae8:	0800db5d 	.word	0x0800db5d
 800daec:	0800db7d 	.word	0x0800db7d
 800daf0:	0800db7d 	.word	0x0800db7d
 800daf4:	0800db7d 	.word	0x0800db7d
 800daf8:	0800db7d 	.word	0x0800db7d
 800dafc:	0800db7d 	.word	0x0800db7d
 800db00:	0800db7d 	.word	0x0800db7d
 800db04:	0800db7d 	.word	0x0800db7d
 800db08:	0800db65 	.word	0x0800db65
 800db0c:	0800db7d 	.word	0x0800db7d
 800db10:	0800db7d 	.word	0x0800db7d
 800db14:	0800db7d 	.word	0x0800db7d
 800db18:	0800db7d 	.word	0x0800db7d
 800db1c:	0800db7d 	.word	0x0800db7d
 800db20:	0800db7d 	.word	0x0800db7d
 800db24:	0800db7d 	.word	0x0800db7d
 800db28:	0800db6d 	.word	0x0800db6d
 800db2c:	0800db7d 	.word	0x0800db7d
 800db30:	0800db7d 	.word	0x0800db7d
 800db34:	0800db7d 	.word	0x0800db7d
 800db38:	0800db7d 	.word	0x0800db7d
 800db3c:	0800db7d 	.word	0x0800db7d
 800db40:	0800db7d 	.word	0x0800db7d
 800db44:	0800db7d 	.word	0x0800db7d
 800db48:	0800db75 	.word	0x0800db75
 800db4c:	2301      	movs	r3, #1
 800db4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db52:	e0d6      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800db54:	2304      	movs	r3, #4
 800db56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db5a:	e0d2      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800db5c:	2308      	movs	r3, #8
 800db5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db62:	e0ce      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800db64:	2310      	movs	r3, #16
 800db66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db6a:	e0ca      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800db6c:	2320      	movs	r3, #32
 800db6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db72:	e0c6      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800db74:	2340      	movs	r3, #64	; 0x40
 800db76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db7a:	e0c2      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800db7c:	2380      	movs	r3, #128	; 0x80
 800db7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db82:	e0be      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800db84:	40011400 	.word	0x40011400
 800db88:	58024400 	.word	0x58024400
 800db8c:	40007800 	.word	0x40007800
 800db90:	40007c00 	.word	0x40007c00
 800db94:	40011800 	.word	0x40011800
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4aad      	ldr	r2, [pc, #692]	; (800de54 <UART_SetConfig+0x900>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d176      	bne.n	800dc90 <UART_SetConfig+0x73c>
 800dba2:	4bad      	ldr	r3, [pc, #692]	; (800de58 <UART_SetConfig+0x904>)
 800dba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dbaa:	2b28      	cmp	r3, #40	; 0x28
 800dbac:	d86c      	bhi.n	800dc88 <UART_SetConfig+0x734>
 800dbae:	a201      	add	r2, pc, #4	; (adr r2, 800dbb4 <UART_SetConfig+0x660>)
 800dbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb4:	0800dc59 	.word	0x0800dc59
 800dbb8:	0800dc89 	.word	0x0800dc89
 800dbbc:	0800dc89 	.word	0x0800dc89
 800dbc0:	0800dc89 	.word	0x0800dc89
 800dbc4:	0800dc89 	.word	0x0800dc89
 800dbc8:	0800dc89 	.word	0x0800dc89
 800dbcc:	0800dc89 	.word	0x0800dc89
 800dbd0:	0800dc89 	.word	0x0800dc89
 800dbd4:	0800dc61 	.word	0x0800dc61
 800dbd8:	0800dc89 	.word	0x0800dc89
 800dbdc:	0800dc89 	.word	0x0800dc89
 800dbe0:	0800dc89 	.word	0x0800dc89
 800dbe4:	0800dc89 	.word	0x0800dc89
 800dbe8:	0800dc89 	.word	0x0800dc89
 800dbec:	0800dc89 	.word	0x0800dc89
 800dbf0:	0800dc89 	.word	0x0800dc89
 800dbf4:	0800dc69 	.word	0x0800dc69
 800dbf8:	0800dc89 	.word	0x0800dc89
 800dbfc:	0800dc89 	.word	0x0800dc89
 800dc00:	0800dc89 	.word	0x0800dc89
 800dc04:	0800dc89 	.word	0x0800dc89
 800dc08:	0800dc89 	.word	0x0800dc89
 800dc0c:	0800dc89 	.word	0x0800dc89
 800dc10:	0800dc89 	.word	0x0800dc89
 800dc14:	0800dc71 	.word	0x0800dc71
 800dc18:	0800dc89 	.word	0x0800dc89
 800dc1c:	0800dc89 	.word	0x0800dc89
 800dc20:	0800dc89 	.word	0x0800dc89
 800dc24:	0800dc89 	.word	0x0800dc89
 800dc28:	0800dc89 	.word	0x0800dc89
 800dc2c:	0800dc89 	.word	0x0800dc89
 800dc30:	0800dc89 	.word	0x0800dc89
 800dc34:	0800dc79 	.word	0x0800dc79
 800dc38:	0800dc89 	.word	0x0800dc89
 800dc3c:	0800dc89 	.word	0x0800dc89
 800dc40:	0800dc89 	.word	0x0800dc89
 800dc44:	0800dc89 	.word	0x0800dc89
 800dc48:	0800dc89 	.word	0x0800dc89
 800dc4c:	0800dc89 	.word	0x0800dc89
 800dc50:	0800dc89 	.word	0x0800dc89
 800dc54:	0800dc81 	.word	0x0800dc81
 800dc58:	2301      	movs	r3, #1
 800dc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5e:	e050      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800dc60:	2304      	movs	r3, #4
 800dc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc66:	e04c      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800dc68:	2308      	movs	r3, #8
 800dc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6e:	e048      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800dc70:	2310      	movs	r3, #16
 800dc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc76:	e044      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800dc78:	2320      	movs	r3, #32
 800dc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7e:	e040      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800dc80:	2340      	movs	r3, #64	; 0x40
 800dc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc86:	e03c      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800dc88:	2380      	movs	r3, #128	; 0x80
 800dc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc8e:	e038      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a71      	ldr	r2, [pc, #452]	; (800de5c <UART_SetConfig+0x908>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d130      	bne.n	800dcfc <UART_SetConfig+0x7a8>
 800dc9a:	4b6f      	ldr	r3, [pc, #444]	; (800de58 <UART_SetConfig+0x904>)
 800dc9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc9e:	f003 0307 	and.w	r3, r3, #7
 800dca2:	2b05      	cmp	r3, #5
 800dca4:	d826      	bhi.n	800dcf4 <UART_SetConfig+0x7a0>
 800dca6:	a201      	add	r2, pc, #4	; (adr r2, 800dcac <UART_SetConfig+0x758>)
 800dca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcac:	0800dcc5 	.word	0x0800dcc5
 800dcb0:	0800dccd 	.word	0x0800dccd
 800dcb4:	0800dcd5 	.word	0x0800dcd5
 800dcb8:	0800dcdd 	.word	0x0800dcdd
 800dcbc:	0800dce5 	.word	0x0800dce5
 800dcc0:	0800dced 	.word	0x0800dced
 800dcc4:	2302      	movs	r3, #2
 800dcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcca:	e01a      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800dccc:	2304      	movs	r3, #4
 800dcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd2:	e016      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800dcd4:	2308      	movs	r3, #8
 800dcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcda:	e012      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800dcdc:	2310      	movs	r3, #16
 800dcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce2:	e00e      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800dce4:	2320      	movs	r3, #32
 800dce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcea:	e00a      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800dcec:	2340      	movs	r3, #64	; 0x40
 800dcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcf2:	e006      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800dcf4:	2380      	movs	r3, #128	; 0x80
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfa:	e002      	b.n	800dd02 <UART_SetConfig+0x7ae>
 800dcfc:	2380      	movs	r3, #128	; 0x80
 800dcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4a55      	ldr	r2, [pc, #340]	; (800de5c <UART_SetConfig+0x908>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	f040 80f8 	bne.w	800defe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dd0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dd12:	2b20      	cmp	r3, #32
 800dd14:	dc46      	bgt.n	800dda4 <UART_SetConfig+0x850>
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	db75      	blt.n	800de06 <UART_SetConfig+0x8b2>
 800dd1a:	3b02      	subs	r3, #2
 800dd1c:	2b1e      	cmp	r3, #30
 800dd1e:	d872      	bhi.n	800de06 <UART_SetConfig+0x8b2>
 800dd20:	a201      	add	r2, pc, #4	; (adr r2, 800dd28 <UART_SetConfig+0x7d4>)
 800dd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd26:	bf00      	nop
 800dd28:	0800ddab 	.word	0x0800ddab
 800dd2c:	0800de07 	.word	0x0800de07
 800dd30:	0800ddb3 	.word	0x0800ddb3
 800dd34:	0800de07 	.word	0x0800de07
 800dd38:	0800de07 	.word	0x0800de07
 800dd3c:	0800de07 	.word	0x0800de07
 800dd40:	0800ddc3 	.word	0x0800ddc3
 800dd44:	0800de07 	.word	0x0800de07
 800dd48:	0800de07 	.word	0x0800de07
 800dd4c:	0800de07 	.word	0x0800de07
 800dd50:	0800de07 	.word	0x0800de07
 800dd54:	0800de07 	.word	0x0800de07
 800dd58:	0800de07 	.word	0x0800de07
 800dd5c:	0800de07 	.word	0x0800de07
 800dd60:	0800ddd3 	.word	0x0800ddd3
 800dd64:	0800de07 	.word	0x0800de07
 800dd68:	0800de07 	.word	0x0800de07
 800dd6c:	0800de07 	.word	0x0800de07
 800dd70:	0800de07 	.word	0x0800de07
 800dd74:	0800de07 	.word	0x0800de07
 800dd78:	0800de07 	.word	0x0800de07
 800dd7c:	0800de07 	.word	0x0800de07
 800dd80:	0800de07 	.word	0x0800de07
 800dd84:	0800de07 	.word	0x0800de07
 800dd88:	0800de07 	.word	0x0800de07
 800dd8c:	0800de07 	.word	0x0800de07
 800dd90:	0800de07 	.word	0x0800de07
 800dd94:	0800de07 	.word	0x0800de07
 800dd98:	0800de07 	.word	0x0800de07
 800dd9c:	0800de07 	.word	0x0800de07
 800dda0:	0800ddf9 	.word	0x0800ddf9
 800dda4:	2b40      	cmp	r3, #64	; 0x40
 800dda6:	d02a      	beq.n	800ddfe <UART_SetConfig+0x8aa>
 800dda8:	e02d      	b.n	800de06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ddaa:	f7fc fde3 	bl	800a974 <HAL_RCCEx_GetD3PCLK1Freq>
 800ddae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ddb0:	e02f      	b.n	800de12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7fc fdf2 	bl	800a9a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ddbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddc0:	e027      	b.n	800de12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddc2:	f107 0318 	add.w	r3, r7, #24
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fc ff3e 	bl	800ac48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddd0:	e01f      	b.n	800de12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddd2:	4b21      	ldr	r3, [pc, #132]	; (800de58 <UART_SetConfig+0x904>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f003 0320 	and.w	r3, r3, #32
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d009      	beq.n	800ddf2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ddde:	4b1e      	ldr	r3, [pc, #120]	; (800de58 <UART_SetConfig+0x904>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	08db      	lsrs	r3, r3, #3
 800dde4:	f003 0303 	and.w	r3, r3, #3
 800dde8:	4a1d      	ldr	r2, [pc, #116]	; (800de60 <UART_SetConfig+0x90c>)
 800ddea:	fa22 f303 	lsr.w	r3, r2, r3
 800ddee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ddf0:	e00f      	b.n	800de12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ddf2:	4b1b      	ldr	r3, [pc, #108]	; (800de60 <UART_SetConfig+0x90c>)
 800ddf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddf6:	e00c      	b.n	800de12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ddf8:	4b1a      	ldr	r3, [pc, #104]	; (800de64 <UART_SetConfig+0x910>)
 800ddfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddfc:	e009      	b.n	800de12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ddfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de04:	e005      	b.n	800de12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800de06:	2300      	movs	r3, #0
 800de08:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800de0a:	2301      	movs	r3, #1
 800de0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800de10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800de12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de14:	2b00      	cmp	r3, #0
 800de16:	f000 81ee 	beq.w	800e1f6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1e:	4a12      	ldr	r2, [pc, #72]	; (800de68 <UART_SetConfig+0x914>)
 800de20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de24:	461a      	mov	r2, r3
 800de26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de28:	fbb3 f3f2 	udiv	r3, r3, r2
 800de2c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	685a      	ldr	r2, [r3, #4]
 800de32:	4613      	mov	r3, r2
 800de34:	005b      	lsls	r3, r3, #1
 800de36:	4413      	add	r3, r2
 800de38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d305      	bcc.n	800de4a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de46:	429a      	cmp	r2, r3
 800de48:	d910      	bls.n	800de6c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800de50:	e1d1      	b.n	800e1f6 <UART_SetConfig+0xca2>
 800de52:	bf00      	nop
 800de54:	40011c00 	.word	0x40011c00
 800de58:	58024400 	.word	0x58024400
 800de5c:	58000c00 	.word	0x58000c00
 800de60:	03d09000 	.word	0x03d09000
 800de64:	003d0900 	.word	0x003d0900
 800de68:	0800f49c 	.word	0x0800f49c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de6e:	2200      	movs	r2, #0
 800de70:	60bb      	str	r3, [r7, #8]
 800de72:	60fa      	str	r2, [r7, #12]
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de78:	4ac0      	ldr	r2, [pc, #768]	; (800e17c <UART_SetConfig+0xc28>)
 800de7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de7e:	b29b      	uxth	r3, r3
 800de80:	2200      	movs	r2, #0
 800de82:	603b      	str	r3, [r7, #0]
 800de84:	607a      	str	r2, [r7, #4]
 800de86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800de8e:	f7f2 fa47 	bl	8000320 <__aeabi_uldivmod>
 800de92:	4602      	mov	r2, r0
 800de94:	460b      	mov	r3, r1
 800de96:	4610      	mov	r0, r2
 800de98:	4619      	mov	r1, r3
 800de9a:	f04f 0200 	mov.w	r2, #0
 800de9e:	f04f 0300 	mov.w	r3, #0
 800dea2:	020b      	lsls	r3, r1, #8
 800dea4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dea8:	0202      	lsls	r2, r0, #8
 800deaa:	6979      	ldr	r1, [r7, #20]
 800deac:	6849      	ldr	r1, [r1, #4]
 800deae:	0849      	lsrs	r1, r1, #1
 800deb0:	2000      	movs	r0, #0
 800deb2:	460c      	mov	r4, r1
 800deb4:	4605      	mov	r5, r0
 800deb6:	eb12 0804 	adds.w	r8, r2, r4
 800deba:	eb43 0905 	adc.w	r9, r3, r5
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	469a      	mov	sl, r3
 800dec6:	4693      	mov	fp, r2
 800dec8:	4652      	mov	r2, sl
 800deca:	465b      	mov	r3, fp
 800decc:	4640      	mov	r0, r8
 800dece:	4649      	mov	r1, r9
 800ded0:	f7f2 fa26 	bl	8000320 <__aeabi_uldivmod>
 800ded4:	4602      	mov	r2, r0
 800ded6:	460b      	mov	r3, r1
 800ded8:	4613      	mov	r3, r2
 800deda:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dee2:	d308      	bcc.n	800def6 <UART_SetConfig+0x9a2>
 800dee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800deea:	d204      	bcs.n	800def6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800def2:	60da      	str	r2, [r3, #12]
 800def4:	e17f      	b.n	800e1f6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800def6:	2301      	movs	r3, #1
 800def8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800defc:	e17b      	b.n	800e1f6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	69db      	ldr	r3, [r3, #28]
 800df02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df06:	f040 80bd 	bne.w	800e084 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800df0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800df0e:	2b20      	cmp	r3, #32
 800df10:	dc48      	bgt.n	800dfa4 <UART_SetConfig+0xa50>
 800df12:	2b00      	cmp	r3, #0
 800df14:	db7b      	blt.n	800e00e <UART_SetConfig+0xaba>
 800df16:	2b20      	cmp	r3, #32
 800df18:	d879      	bhi.n	800e00e <UART_SetConfig+0xaba>
 800df1a:	a201      	add	r2, pc, #4	; (adr r2, 800df20 <UART_SetConfig+0x9cc>)
 800df1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df20:	0800dfab 	.word	0x0800dfab
 800df24:	0800dfb3 	.word	0x0800dfb3
 800df28:	0800e00f 	.word	0x0800e00f
 800df2c:	0800e00f 	.word	0x0800e00f
 800df30:	0800dfbb 	.word	0x0800dfbb
 800df34:	0800e00f 	.word	0x0800e00f
 800df38:	0800e00f 	.word	0x0800e00f
 800df3c:	0800e00f 	.word	0x0800e00f
 800df40:	0800dfcb 	.word	0x0800dfcb
 800df44:	0800e00f 	.word	0x0800e00f
 800df48:	0800e00f 	.word	0x0800e00f
 800df4c:	0800e00f 	.word	0x0800e00f
 800df50:	0800e00f 	.word	0x0800e00f
 800df54:	0800e00f 	.word	0x0800e00f
 800df58:	0800e00f 	.word	0x0800e00f
 800df5c:	0800e00f 	.word	0x0800e00f
 800df60:	0800dfdb 	.word	0x0800dfdb
 800df64:	0800e00f 	.word	0x0800e00f
 800df68:	0800e00f 	.word	0x0800e00f
 800df6c:	0800e00f 	.word	0x0800e00f
 800df70:	0800e00f 	.word	0x0800e00f
 800df74:	0800e00f 	.word	0x0800e00f
 800df78:	0800e00f 	.word	0x0800e00f
 800df7c:	0800e00f 	.word	0x0800e00f
 800df80:	0800e00f 	.word	0x0800e00f
 800df84:	0800e00f 	.word	0x0800e00f
 800df88:	0800e00f 	.word	0x0800e00f
 800df8c:	0800e00f 	.word	0x0800e00f
 800df90:	0800e00f 	.word	0x0800e00f
 800df94:	0800e00f 	.word	0x0800e00f
 800df98:	0800e00f 	.word	0x0800e00f
 800df9c:	0800e00f 	.word	0x0800e00f
 800dfa0:	0800e001 	.word	0x0800e001
 800dfa4:	2b40      	cmp	r3, #64	; 0x40
 800dfa6:	d02e      	beq.n	800e006 <UART_SetConfig+0xab2>
 800dfa8:	e031      	b.n	800e00e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dfaa:	f7fb fdbd 	bl	8009b28 <HAL_RCC_GetPCLK1Freq>
 800dfae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dfb0:	e033      	b.n	800e01a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dfb2:	f7fb fdcf 	bl	8009b54 <HAL_RCC_GetPCLK2Freq>
 800dfb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dfb8:	e02f      	b.n	800e01a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fc fcee 	bl	800a9a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfc8:	e027      	b.n	800e01a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dfca:	f107 0318 	add.w	r3, r7, #24
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fc fe3a 	bl	800ac48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfd8:	e01f      	b.n	800e01a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfda:	4b69      	ldr	r3, [pc, #420]	; (800e180 <UART_SetConfig+0xc2c>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f003 0320 	and.w	r3, r3, #32
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d009      	beq.n	800dffa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dfe6:	4b66      	ldr	r3, [pc, #408]	; (800e180 <UART_SetConfig+0xc2c>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	08db      	lsrs	r3, r3, #3
 800dfec:	f003 0303 	and.w	r3, r3, #3
 800dff0:	4a64      	ldr	r2, [pc, #400]	; (800e184 <UART_SetConfig+0xc30>)
 800dff2:	fa22 f303 	lsr.w	r3, r2, r3
 800dff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dff8:	e00f      	b.n	800e01a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800dffa:	4b62      	ldr	r3, [pc, #392]	; (800e184 <UART_SetConfig+0xc30>)
 800dffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dffe:	e00c      	b.n	800e01a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e000:	4b61      	ldr	r3, [pc, #388]	; (800e188 <UART_SetConfig+0xc34>)
 800e002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e004:	e009      	b.n	800e01a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e00c:	e005      	b.n	800e01a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e00e:	2300      	movs	r3, #0
 800e010:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e018:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	f000 80ea 	beq.w	800e1f6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e026:	4a55      	ldr	r2, [pc, #340]	; (800e17c <UART_SetConfig+0xc28>)
 800e028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e02c:	461a      	mov	r2, r3
 800e02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e030:	fbb3 f3f2 	udiv	r3, r3, r2
 800e034:	005a      	lsls	r2, r3, #1
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	085b      	lsrs	r3, r3, #1
 800e03c:	441a      	add	r2, r3
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	fbb2 f3f3 	udiv	r3, r2, r3
 800e046:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04a:	2b0f      	cmp	r3, #15
 800e04c:	d916      	bls.n	800e07c <UART_SetConfig+0xb28>
 800e04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e054:	d212      	bcs.n	800e07c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e058:	b29b      	uxth	r3, r3
 800e05a:	f023 030f 	bic.w	r3, r3, #15
 800e05e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e062:	085b      	lsrs	r3, r3, #1
 800e064:	b29b      	uxth	r3, r3
 800e066:	f003 0307 	and.w	r3, r3, #7
 800e06a:	b29a      	uxth	r2, r3
 800e06c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e06e:	4313      	orrs	r3, r2
 800e070:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e078:	60da      	str	r2, [r3, #12]
 800e07a:	e0bc      	b.n	800e1f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e07c:	2301      	movs	r3, #1
 800e07e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e082:	e0b8      	b.n	800e1f6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e084:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e088:	2b20      	cmp	r3, #32
 800e08a:	dc4b      	bgt.n	800e124 <UART_SetConfig+0xbd0>
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f2c0 8087 	blt.w	800e1a0 <UART_SetConfig+0xc4c>
 800e092:	2b20      	cmp	r3, #32
 800e094:	f200 8084 	bhi.w	800e1a0 <UART_SetConfig+0xc4c>
 800e098:	a201      	add	r2, pc, #4	; (adr r2, 800e0a0 <UART_SetConfig+0xb4c>)
 800e09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e09e:	bf00      	nop
 800e0a0:	0800e12b 	.word	0x0800e12b
 800e0a4:	0800e133 	.word	0x0800e133
 800e0a8:	0800e1a1 	.word	0x0800e1a1
 800e0ac:	0800e1a1 	.word	0x0800e1a1
 800e0b0:	0800e13b 	.word	0x0800e13b
 800e0b4:	0800e1a1 	.word	0x0800e1a1
 800e0b8:	0800e1a1 	.word	0x0800e1a1
 800e0bc:	0800e1a1 	.word	0x0800e1a1
 800e0c0:	0800e14b 	.word	0x0800e14b
 800e0c4:	0800e1a1 	.word	0x0800e1a1
 800e0c8:	0800e1a1 	.word	0x0800e1a1
 800e0cc:	0800e1a1 	.word	0x0800e1a1
 800e0d0:	0800e1a1 	.word	0x0800e1a1
 800e0d4:	0800e1a1 	.word	0x0800e1a1
 800e0d8:	0800e1a1 	.word	0x0800e1a1
 800e0dc:	0800e1a1 	.word	0x0800e1a1
 800e0e0:	0800e15b 	.word	0x0800e15b
 800e0e4:	0800e1a1 	.word	0x0800e1a1
 800e0e8:	0800e1a1 	.word	0x0800e1a1
 800e0ec:	0800e1a1 	.word	0x0800e1a1
 800e0f0:	0800e1a1 	.word	0x0800e1a1
 800e0f4:	0800e1a1 	.word	0x0800e1a1
 800e0f8:	0800e1a1 	.word	0x0800e1a1
 800e0fc:	0800e1a1 	.word	0x0800e1a1
 800e100:	0800e1a1 	.word	0x0800e1a1
 800e104:	0800e1a1 	.word	0x0800e1a1
 800e108:	0800e1a1 	.word	0x0800e1a1
 800e10c:	0800e1a1 	.word	0x0800e1a1
 800e110:	0800e1a1 	.word	0x0800e1a1
 800e114:	0800e1a1 	.word	0x0800e1a1
 800e118:	0800e1a1 	.word	0x0800e1a1
 800e11c:	0800e1a1 	.word	0x0800e1a1
 800e120:	0800e193 	.word	0x0800e193
 800e124:	2b40      	cmp	r3, #64	; 0x40
 800e126:	d037      	beq.n	800e198 <UART_SetConfig+0xc44>
 800e128:	e03a      	b.n	800e1a0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e12a:	f7fb fcfd 	bl	8009b28 <HAL_RCC_GetPCLK1Freq>
 800e12e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e130:	e03c      	b.n	800e1ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e132:	f7fb fd0f 	bl	8009b54 <HAL_RCC_GetPCLK2Freq>
 800e136:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e138:	e038      	b.n	800e1ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e13a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e13e:	4618      	mov	r0, r3
 800e140:	f7fc fc2e 	bl	800a9a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e148:	e030      	b.n	800e1ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e14a:	f107 0318 	add.w	r3, r7, #24
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fc fd7a 	bl	800ac48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e158:	e028      	b.n	800e1ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e15a:	4b09      	ldr	r3, [pc, #36]	; (800e180 <UART_SetConfig+0xc2c>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f003 0320 	and.w	r3, r3, #32
 800e162:	2b00      	cmp	r3, #0
 800e164:	d012      	beq.n	800e18c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e166:	4b06      	ldr	r3, [pc, #24]	; (800e180 <UART_SetConfig+0xc2c>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	08db      	lsrs	r3, r3, #3
 800e16c:	f003 0303 	and.w	r3, r3, #3
 800e170:	4a04      	ldr	r2, [pc, #16]	; (800e184 <UART_SetConfig+0xc30>)
 800e172:	fa22 f303 	lsr.w	r3, r2, r3
 800e176:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e178:	e018      	b.n	800e1ac <UART_SetConfig+0xc58>
 800e17a:	bf00      	nop
 800e17c:	0800f49c 	.word	0x0800f49c
 800e180:	58024400 	.word	0x58024400
 800e184:	03d09000 	.word	0x03d09000
 800e188:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e18c:	4b24      	ldr	r3, [pc, #144]	; (800e220 <UART_SetConfig+0xccc>)
 800e18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e190:	e00c      	b.n	800e1ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e192:	4b24      	ldr	r3, [pc, #144]	; (800e224 <UART_SetConfig+0xcd0>)
 800e194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e196:	e009      	b.n	800e1ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e19c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e19e:	e005      	b.n	800e1ac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e1aa:	bf00      	nop
    }

    if (pclk != 0U)
 800e1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d021      	beq.n	800e1f6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b6:	4a1c      	ldr	r2, [pc, #112]	; (800e228 <UART_SetConfig+0xcd4>)
 800e1b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1bc:	461a      	mov	r2, r3
 800e1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1c0:	fbb3 f2f2 	udiv	r2, r3, r2
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	085b      	lsrs	r3, r3, #1
 800e1ca:	441a      	add	r2, r3
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1d4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d8:	2b0f      	cmp	r3, #15
 800e1da:	d909      	bls.n	800e1f0 <UART_SetConfig+0xc9c>
 800e1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1e2:	d205      	bcs.n	800e1f0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e6:	b29a      	uxth	r2, r3
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	60da      	str	r2, [r3, #12]
 800e1ee:	e002      	b.n	800e1f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	2201      	movs	r2, #1
 800e202:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2200      	movs	r2, #0
 800e20a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	2200      	movs	r2, #0
 800e210:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e212:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e216:	4618      	mov	r0, r3
 800e218:	3748      	adds	r7, #72	; 0x48
 800e21a:	46bd      	mov	sp, r7
 800e21c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e220:	03d09000 	.word	0x03d09000
 800e224:	003d0900 	.word	0x003d0900
 800e228:	0800f49c 	.word	0x0800f49c

0800e22c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b083      	sub	sp, #12
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e238:	f003 0301 	and.w	r3, r3, #1
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d00a      	beq.n	800e256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	430a      	orrs	r2, r1
 800e254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e25a:	f003 0302 	and.w	r3, r3, #2
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d00a      	beq.n	800e278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	430a      	orrs	r2, r1
 800e276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e27c:	f003 0304 	and.w	r3, r3, #4
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00a      	beq.n	800e29a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	430a      	orrs	r2, r1
 800e298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e29e:	f003 0308 	and.w	r3, r3, #8
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d00a      	beq.n	800e2bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	430a      	orrs	r2, r1
 800e2ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2c0:	f003 0310 	and.w	r3, r3, #16
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d00a      	beq.n	800e2de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	430a      	orrs	r2, r1
 800e2dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2e2:	f003 0320 	and.w	r3, r3, #32
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00a      	beq.n	800e300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	689b      	ldr	r3, [r3, #8]
 800e2f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	430a      	orrs	r2, r1
 800e2fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d01a      	beq.n	800e342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	430a      	orrs	r2, r1
 800e320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e32a:	d10a      	bne.n	800e342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	430a      	orrs	r2, r1
 800e340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d00a      	beq.n	800e364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	430a      	orrs	r2, r1
 800e362:	605a      	str	r2, [r3, #4]
  }
}
 800e364:	bf00      	nop
 800e366:	370c      	adds	r7, #12
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b086      	sub	sp, #24
 800e374:	af02      	add	r7, sp, #8
 800e376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2200      	movs	r2, #0
 800e37c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e380:	f7f7 fb72 	bl	8005a68 <HAL_GetTick>
 800e384:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f003 0308 	and.w	r3, r3, #8
 800e390:	2b08      	cmp	r3, #8
 800e392:	d10e      	bne.n	800e3b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 f82f 	bl	800e406 <UART_WaitOnFlagUntilTimeout>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d001      	beq.n	800e3b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e3ae:	2303      	movs	r3, #3
 800e3b0:	e025      	b.n	800e3fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f003 0304 	and.w	r3, r3, #4
 800e3bc:	2b04      	cmp	r3, #4
 800e3be:	d10e      	bne.n	800e3de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e3c4:	9300      	str	r3, [sp, #0]
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f000 f819 	bl	800e406 <UART_WaitOnFlagUntilTimeout>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d001      	beq.n	800e3de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e3da:	2303      	movs	r3, #3
 800e3dc:	e00f      	b.n	800e3fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2220      	movs	r2, #32
 800e3e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2220      	movs	r2, #32
 800e3ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e3fc:	2300      	movs	r3, #0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3710      	adds	r7, #16
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}

0800e406 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e406:	b580      	push	{r7, lr}
 800e408:	b09c      	sub	sp, #112	; 0x70
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	60f8      	str	r0, [r7, #12]
 800e40e:	60b9      	str	r1, [r7, #8]
 800e410:	603b      	str	r3, [r7, #0]
 800e412:	4613      	mov	r3, r2
 800e414:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e416:	e0a9      	b.n	800e56c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e41a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e41e:	f000 80a5 	beq.w	800e56c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e422:	f7f7 fb21 	bl	8005a68 <HAL_GetTick>
 800e426:	4602      	mov	r2, r0
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	1ad3      	subs	r3, r2, r3
 800e42c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e42e:	429a      	cmp	r2, r3
 800e430:	d302      	bcc.n	800e438 <UART_WaitOnFlagUntilTimeout+0x32>
 800e432:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e434:	2b00      	cmp	r3, #0
 800e436:	d140      	bne.n	800e4ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e43e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e440:	e853 3f00 	ldrex	r3, [r3]
 800e444:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e448:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e44c:	667b      	str	r3, [r7, #100]	; 0x64
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	461a      	mov	r2, r3
 800e454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e456:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e458:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e45a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e45c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e45e:	e841 2300 	strex	r3, r2, [r1]
 800e462:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1e6      	bne.n	800e438 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	3308      	adds	r3, #8
 800e470:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e474:	e853 3f00 	ldrex	r3, [r3]
 800e478:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47c:	f023 0301 	bic.w	r3, r3, #1
 800e480:	663b      	str	r3, [r7, #96]	; 0x60
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	3308      	adds	r3, #8
 800e488:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e48a:	64ba      	str	r2, [r7, #72]	; 0x48
 800e48c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e48e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e492:	e841 2300 	strex	r3, r2, [r1]
 800e496:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d1e5      	bne.n	800e46a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2220      	movs	r2, #32
 800e4a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2220      	movs	r2, #32
 800e4aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e4b6:	2303      	movs	r3, #3
 800e4b8:	e069      	b.n	800e58e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f003 0304 	and.w	r3, r3, #4
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d051      	beq.n	800e56c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	69db      	ldr	r3, [r3, #28]
 800e4ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e4d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e4d6:	d149      	bne.n	800e56c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	e853 3f00 	ldrex	r3, [r3]
 800e4ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e4f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e500:	637b      	str	r3, [r7, #52]	; 0x34
 800e502:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e508:	e841 2300 	strex	r3, r2, [r1]
 800e50c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e510:	2b00      	cmp	r3, #0
 800e512:	d1e6      	bne.n	800e4e2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	3308      	adds	r3, #8
 800e51a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	e853 3f00 	ldrex	r3, [r3]
 800e522:	613b      	str	r3, [r7, #16]
   return(result);
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	f023 0301 	bic.w	r3, r3, #1
 800e52a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	3308      	adds	r3, #8
 800e532:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e534:	623a      	str	r2, [r7, #32]
 800e536:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e538:	69f9      	ldr	r1, [r7, #28]
 800e53a:	6a3a      	ldr	r2, [r7, #32]
 800e53c:	e841 2300 	strex	r3, r2, [r1]
 800e540:	61bb      	str	r3, [r7, #24]
   return(result);
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d1e5      	bne.n	800e514 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2220      	movs	r2, #32
 800e54c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2220      	movs	r2, #32
 800e554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2220      	movs	r2, #32
 800e55c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2200      	movs	r2, #0
 800e564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e568:	2303      	movs	r3, #3
 800e56a:	e010      	b.n	800e58e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	69da      	ldr	r2, [r3, #28]
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	4013      	ands	r3, r2
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	429a      	cmp	r2, r3
 800e57a:	bf0c      	ite	eq
 800e57c:	2301      	moveq	r3, #1
 800e57e:	2300      	movne	r3, #0
 800e580:	b2db      	uxtb	r3, r3
 800e582:	461a      	mov	r2, r3
 800e584:	79fb      	ldrb	r3, [r7, #7]
 800e586:	429a      	cmp	r2, r3
 800e588:	f43f af46 	beq.w	800e418 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e58c:	2300      	movs	r3, #0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3770      	adds	r7, #112	; 0x70
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
	...

0800e598 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b096      	sub	sp, #88	; 0x58
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	68ba      	ldr	r2, [r7, #8]
 800e5aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	88fa      	ldrh	r2, [r7, #6]
 800e5b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2222      	movs	r2, #34	; 0x22
 800e5c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d02c      	beq.n	800e626 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5d0:	4a42      	ldr	r2, [pc, #264]	; (800e6dc <UART_Start_Receive_DMA+0x144>)
 800e5d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5d8:	4a41      	ldr	r2, [pc, #260]	; (800e6e0 <UART_Start_Receive_DMA+0x148>)
 800e5da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5e0:	4a40      	ldr	r2, [pc, #256]	; (800e6e4 <UART_Start_Receive_DMA+0x14c>)
 800e5e2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	3324      	adds	r3, #36	; 0x24
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	88fb      	ldrh	r3, [r7, #6]
 800e600:	f7f7 fea8 	bl	8006354 <HAL_DMA_Start_IT>
 800e604:	4603      	mov	r3, r0
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00d      	beq.n	800e626 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2210      	movs	r2, #16
 800e60e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2200      	movs	r2, #0
 800e616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2220      	movs	r2, #32
 800e61e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e622:	2301      	movs	r3, #1
 800e624:	e055      	b.n	800e6d2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2200      	movs	r2, #0
 800e62a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	691b      	ldr	r3, [r3, #16]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d018      	beq.n	800e668 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e63e:	e853 3f00 	ldrex	r3, [r3]
 800e642:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e64a:	657b      	str	r3, [r7, #84]	; 0x54
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	461a      	mov	r2, r3
 800e652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e654:	64bb      	str	r3, [r7, #72]	; 0x48
 800e656:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e658:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e65a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e65c:	e841 2300 	strex	r3, r2, [r1]
 800e660:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e664:	2b00      	cmp	r3, #0
 800e666:	d1e6      	bne.n	800e636 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	3308      	adds	r3, #8
 800e66e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e672:	e853 3f00 	ldrex	r3, [r3]
 800e676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67a:	f043 0301 	orr.w	r3, r3, #1
 800e67e:	653b      	str	r3, [r7, #80]	; 0x50
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	3308      	adds	r3, #8
 800e686:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e688:	637a      	str	r2, [r7, #52]	; 0x34
 800e68a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e68c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e68e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e690:	e841 2300 	strex	r3, r2, [r1]
 800e694:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d1e5      	bne.n	800e668 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	3308      	adds	r3, #8
 800e6a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	e853 3f00 	ldrex	r3, [r3]
 800e6aa:	613b      	str	r3, [r7, #16]
   return(result);
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	3308      	adds	r3, #8
 800e6ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e6bc:	623a      	str	r2, [r7, #32]
 800e6be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c0:	69f9      	ldr	r1, [r7, #28]
 800e6c2:	6a3a      	ldr	r2, [r7, #32]
 800e6c4:	e841 2300 	strex	r3, r2, [r1]
 800e6c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e6ca:	69bb      	ldr	r3, [r7, #24]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d1e5      	bne.n	800e69c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e6d0:	2300      	movs	r3, #0
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3758      	adds	r7, #88	; 0x58
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	0800e8eb 	.word	0x0800e8eb
 800e6e0:	0800ea0d 	.word	0x0800ea0d
 800e6e4:	0800ea45 	.word	0x0800ea45

0800e6e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b08f      	sub	sp, #60	; 0x3c
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f6:	6a3b      	ldr	r3, [r7, #32]
 800e6f8:	e853 3f00 	ldrex	r3, [r3]
 800e6fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e704:	637b      	str	r3, [r7, #52]	; 0x34
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	461a      	mov	r2, r3
 800e70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e710:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e716:	e841 2300 	strex	r3, r2, [r1]
 800e71a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d1e6      	bne.n	800e6f0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	3308      	adds	r3, #8
 800e728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	e853 3f00 	ldrex	r3, [r3]
 800e730:	60bb      	str	r3, [r7, #8]
   return(result);
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e738:	633b      	str	r3, [r7, #48]	; 0x30
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	3308      	adds	r3, #8
 800e740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e742:	61ba      	str	r2, [r7, #24]
 800e744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e746:	6979      	ldr	r1, [r7, #20]
 800e748:	69ba      	ldr	r2, [r7, #24]
 800e74a:	e841 2300 	strex	r3, r2, [r1]
 800e74e:	613b      	str	r3, [r7, #16]
   return(result);
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d1e5      	bne.n	800e722 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2220      	movs	r2, #32
 800e75a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e75e:	bf00      	nop
 800e760:	373c      	adds	r7, #60	; 0x3c
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr
	...

0800e76c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b095      	sub	sp, #84	; 0x54
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e77c:	e853 3f00 	ldrex	r3, [r3]
 800e780:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e784:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	461a      	mov	r2, r3
 800e790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e792:	643b      	str	r3, [r7, #64]	; 0x40
 800e794:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e796:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e798:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e79a:	e841 2300 	strex	r3, r2, [r1]
 800e79e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d1e6      	bne.n	800e774 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	3308      	adds	r3, #8
 800e7ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ae:	6a3b      	ldr	r3, [r7, #32]
 800e7b0:	e853 3f00 	ldrex	r3, [r3]
 800e7b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7b6:	69fa      	ldr	r2, [r7, #28]
 800e7b8:	4b1e      	ldr	r3, [pc, #120]	; (800e834 <UART_EndRxTransfer+0xc8>)
 800e7ba:	4013      	ands	r3, r2
 800e7bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	3308      	adds	r3, #8
 800e7c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e7c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ce:	e841 2300 	strex	r3, r2, [r1]
 800e7d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d1e5      	bne.n	800e7a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7de:	2b01      	cmp	r3, #1
 800e7e0:	d118      	bne.n	800e814 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	e853 3f00 	ldrex	r3, [r3]
 800e7ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	f023 0310 	bic.w	r3, r3, #16
 800e7f6:	647b      	str	r3, [r7, #68]	; 0x44
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e800:	61bb      	str	r3, [r7, #24]
 800e802:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e804:	6979      	ldr	r1, [r7, #20]
 800e806:	69ba      	ldr	r2, [r7, #24]
 800e808:	e841 2300 	strex	r3, r2, [r1]
 800e80c:	613b      	str	r3, [r7, #16]
   return(result);
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d1e6      	bne.n	800e7e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2220      	movs	r2, #32
 800e818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2200      	movs	r2, #0
 800e820:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2200      	movs	r2, #0
 800e826:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e828:	bf00      	nop
 800e82a:	3754      	adds	r7, #84	; 0x54
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr
 800e834:	effffffe 	.word	0xeffffffe

0800e838 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b090      	sub	sp, #64	; 0x40
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e844:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	69db      	ldr	r3, [r3, #28]
 800e84a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e84e:	d037      	beq.n	800e8c0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e852:	2200      	movs	r2, #0
 800e854:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	3308      	adds	r3, #8
 800e85e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e862:	e853 3f00 	ldrex	r3, [r3]
 800e866:	623b      	str	r3, [r7, #32]
   return(result);
 800e868:	6a3b      	ldr	r3, [r7, #32]
 800e86a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e86e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	3308      	adds	r3, #8
 800e876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e878:	633a      	str	r2, [r7, #48]	; 0x30
 800e87a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e87c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e87e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e880:	e841 2300 	strex	r3, r2, [r1]
 800e884:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d1e5      	bne.n	800e858 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	e853 3f00 	ldrex	r3, [r3]
 800e898:	60fb      	str	r3, [r7, #12]
   return(result);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8a0:	637b      	str	r3, [r7, #52]	; 0x34
 800e8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8aa:	61fb      	str	r3, [r7, #28]
 800e8ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ae:	69b9      	ldr	r1, [r7, #24]
 800e8b0:	69fa      	ldr	r2, [r7, #28]
 800e8b2:	e841 2300 	strex	r3, r2, [r1]
 800e8b6:	617b      	str	r3, [r7, #20]
   return(result);
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d1e6      	bne.n	800e88c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e8be:	e002      	b.n	800e8c6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e8c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e8c2:	f7f5 fb97 	bl	8003ff4 <HAL_UART_TxCpltCallback>
}
 800e8c6:	bf00      	nop
 800e8c8:	3740      	adds	r7, #64	; 0x40
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}

0800e8ce <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e8ce:	b580      	push	{r7, lr}
 800e8d0:	b084      	sub	sp, #16
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e8dc:	68f8      	ldr	r0, [r7, #12]
 800e8de:	f7fe fe0f 	bl	800d500 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e8e2:	bf00      	nop
 800e8e4:	3710      	adds	r7, #16
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}

0800e8ea <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e8ea:	b580      	push	{r7, lr}
 800e8ec:	b09c      	sub	sp, #112	; 0x70
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	69db      	ldr	r3, [r3, #28]
 800e8fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e900:	d071      	beq.n	800e9e6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e904:	2200      	movs	r2, #0
 800e906:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e90a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e912:	e853 3f00 	ldrex	r3, [r3]
 800e916:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e91a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e91e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	461a      	mov	r2, r3
 800e926:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e928:	65bb      	str	r3, [r7, #88]	; 0x58
 800e92a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e92c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e92e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e930:	e841 2300 	strex	r3, r2, [r1]
 800e934:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d1e6      	bne.n	800e90a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e93c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	3308      	adds	r3, #8
 800e942:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e946:	e853 3f00 	ldrex	r3, [r3]
 800e94a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e94e:	f023 0301 	bic.w	r3, r3, #1
 800e952:	667b      	str	r3, [r7, #100]	; 0x64
 800e954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	3308      	adds	r3, #8
 800e95a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e95c:	647a      	str	r2, [r7, #68]	; 0x44
 800e95e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e960:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e964:	e841 2300 	strex	r3, r2, [r1]
 800e968:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d1e5      	bne.n	800e93c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	3308      	adds	r3, #8
 800e976:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97a:	e853 3f00 	ldrex	r3, [r3]
 800e97e:	623b      	str	r3, [r7, #32]
   return(result);
 800e980:	6a3b      	ldr	r3, [r7, #32]
 800e982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e986:	663b      	str	r3, [r7, #96]	; 0x60
 800e988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	3308      	adds	r3, #8
 800e98e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e990:	633a      	str	r2, [r7, #48]	; 0x30
 800e992:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e994:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e998:	e841 2300 	strex	r3, r2, [r1]
 800e99c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d1e5      	bne.n	800e970 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e9a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9a6:	2220      	movs	r2, #32
 800e9a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d118      	bne.n	800e9e6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	e853 3f00 	ldrex	r3, [r3]
 800e9c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	f023 0310 	bic.w	r3, r3, #16
 800e9c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e9ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9d2:	61fb      	str	r3, [r7, #28]
 800e9d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d6:	69b9      	ldr	r1, [r7, #24]
 800e9d8:	69fa      	ldr	r2, [r7, #28]
 800e9da:	e841 2300 	strex	r3, r2, [r1]
 800e9de:	617b      	str	r3, [r7, #20]
   return(result);
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d1e6      	bne.n	800e9b4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d107      	bne.n	800e9fe <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e9ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e9f8:	f7fe fda0 	bl	800d53c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e9fc:	e002      	b.n	800ea04 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e9fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ea00:	f7f5 fb0a 	bl	8004018 <HAL_UART_RxCpltCallback>
}
 800ea04:	bf00      	nop
 800ea06:	3770      	adds	r7, #112	; 0x70
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b084      	sub	sp, #16
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea18:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d109      	bne.n	800ea36 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ea28:	085b      	lsrs	r3, r3, #1
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	68f8      	ldr	r0, [r7, #12]
 800ea30:	f7fe fd84 	bl	800d53c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ea34:	e002      	b.n	800ea3c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ea36:	68f8      	ldr	r0, [r7, #12]
 800ea38:	f7fe fd6c 	bl	800d514 <HAL_UART_RxHalfCpltCallback>
}
 800ea3c:	bf00      	nop
 800ea3e:	3710      	adds	r7, #16
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b086      	sub	sp, #24
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea50:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea58:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea60:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	689b      	ldr	r3, [r3, #8]
 800ea68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea6c:	2b80      	cmp	r3, #128	; 0x80
 800ea6e:	d109      	bne.n	800ea84 <UART_DMAError+0x40>
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	2b21      	cmp	r3, #33	; 0x21
 800ea74:	d106      	bne.n	800ea84 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ea7e:	6978      	ldr	r0, [r7, #20]
 800ea80:	f7ff fe32 	bl	800e6e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	689b      	ldr	r3, [r3, #8]
 800ea8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea8e:	2b40      	cmp	r3, #64	; 0x40
 800ea90:	d109      	bne.n	800eaa6 <UART_DMAError+0x62>
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2b22      	cmp	r3, #34	; 0x22
 800ea96:	d106      	bne.n	800eaa6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eaa0:	6978      	ldr	r0, [r7, #20]
 800eaa2:	f7ff fe63 	bl	800e76c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaac:	f043 0210 	orr.w	r2, r3, #16
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eab6:	6978      	ldr	r0, [r7, #20]
 800eab8:	f7fe fd36 	bl	800d528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eabc:	bf00      	nop
 800eabe:	3718      	adds	r7, #24
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b084      	sub	sp, #16
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2200      	movs	r2, #0
 800eade:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eae2:	68f8      	ldr	r0, [r7, #12]
 800eae4:	f7fe fd20 	bl	800d528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eae8:	bf00      	nop
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b088      	sub	sp, #32
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	e853 3f00 	ldrex	r3, [r3]
 800eb04:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb0c:	61fb      	str	r3, [r7, #28]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	461a      	mov	r2, r3
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	61bb      	str	r3, [r7, #24]
 800eb18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1a:	6979      	ldr	r1, [r7, #20]
 800eb1c:	69ba      	ldr	r2, [r7, #24]
 800eb1e:	e841 2300 	strex	r3, r2, [r1]
 800eb22:	613b      	str	r3, [r7, #16]
   return(result);
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1e6      	bne.n	800eaf8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2220      	movs	r2, #32
 800eb2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2200      	movs	r2, #0
 800eb36:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7f5 fa5b 	bl	8003ff4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb3e:	bf00      	nop
 800eb40:	3720      	adds	r7, #32
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eb46:	b480      	push	{r7}
 800eb48:	b083      	sub	sp, #12
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eb4e:	bf00      	nop
 800eb50:	370c      	adds	r7, #12
 800eb52:	46bd      	mov	sp, r7
 800eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb58:	4770      	bx	lr

0800eb5a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eb5a:	b480      	push	{r7}
 800eb5c:	b083      	sub	sp, #12
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eb62:	bf00      	nop
 800eb64:	370c      	adds	r7, #12
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr

0800eb6e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eb6e:	b480      	push	{r7}
 800eb70:	b083      	sub	sp, #12
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eb76:	bf00      	nop
 800eb78:	370c      	adds	r7, #12
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr

0800eb82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eb82:	b480      	push	{r7}
 800eb84:	b085      	sub	sp, #20
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb90:	2b01      	cmp	r3, #1
 800eb92:	d101      	bne.n	800eb98 <HAL_UARTEx_DisableFifoMode+0x16>
 800eb94:	2302      	movs	r3, #2
 800eb96:	e027      	b.n	800ebe8 <HAL_UARTEx_DisableFifoMode+0x66>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2224      	movs	r2, #36	; 0x24
 800eba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f022 0201 	bic.w	r2, r2, #1
 800ebbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ebc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	68fa      	ldr	r2, [r7, #12]
 800ebd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2220      	movs	r2, #32
 800ebda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ebe6:	2300      	movs	r3, #0
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3714      	adds	r7, #20
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr

0800ebf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d101      	bne.n	800ec0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ec08:	2302      	movs	r3, #2
 800ec0a:	e02d      	b.n	800ec68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2224      	movs	r2, #36	; 0x24
 800ec18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f022 0201 	bic.w	r2, r2, #1
 800ec32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	689b      	ldr	r3, [r3, #8]
 800ec3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	683a      	ldr	r2, [r7, #0]
 800ec44:	430a      	orrs	r2, r1
 800ec46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f000 f84f 	bl	800ecec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	68fa      	ldr	r2, [r7, #12]
 800ec54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2220      	movs	r2, #32
 800ec5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2200      	movs	r2, #0
 800ec62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec66:	2300      	movs	r3, #0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d101      	bne.n	800ec88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ec84:	2302      	movs	r3, #2
 800ec86:	e02d      	b.n	800ece4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2224      	movs	r2, #36	; 0x24
 800ec94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f022 0201 	bic.w	r2, r2, #1
 800ecae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	689b      	ldr	r3, [r3, #8]
 800ecb6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	683a      	ldr	r2, [r7, #0]
 800ecc0:	430a      	orrs	r2, r1
 800ecc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f000 f811 	bl	800ecec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	68fa      	ldr	r2, [r7, #12]
 800ecd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2220      	movs	r2, #32
 800ecd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ece2:	2300      	movs	r3, #0
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3710      	adds	r7, #16
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b085      	sub	sp, #20
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d108      	bne.n	800ed0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2201      	movs	r2, #1
 800ed08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ed0c:	e031      	b.n	800ed72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ed0e:	2310      	movs	r3, #16
 800ed10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ed12:	2310      	movs	r3, #16
 800ed14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	689b      	ldr	r3, [r3, #8]
 800ed1c:	0e5b      	lsrs	r3, r3, #25
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	f003 0307 	and.w	r3, r3, #7
 800ed24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	0f5b      	lsrs	r3, r3, #29
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	f003 0307 	and.w	r3, r3, #7
 800ed34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed36:	7bbb      	ldrb	r3, [r7, #14]
 800ed38:	7b3a      	ldrb	r2, [r7, #12]
 800ed3a:	4911      	ldr	r1, [pc, #68]	; (800ed80 <UARTEx_SetNbDataToProcess+0x94>)
 800ed3c:	5c8a      	ldrb	r2, [r1, r2]
 800ed3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ed42:	7b3a      	ldrb	r2, [r7, #12]
 800ed44:	490f      	ldr	r1, [pc, #60]	; (800ed84 <UARTEx_SetNbDataToProcess+0x98>)
 800ed46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed48:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed4c:	b29a      	uxth	r2, r3
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed54:	7bfb      	ldrb	r3, [r7, #15]
 800ed56:	7b7a      	ldrb	r2, [r7, #13]
 800ed58:	4909      	ldr	r1, [pc, #36]	; (800ed80 <UARTEx_SetNbDataToProcess+0x94>)
 800ed5a:	5c8a      	ldrb	r2, [r1, r2]
 800ed5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ed60:	7b7a      	ldrb	r2, [r7, #13]
 800ed62:	4908      	ldr	r1, [pc, #32]	; (800ed84 <UARTEx_SetNbDataToProcess+0x98>)
 800ed64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed66:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ed72:	bf00      	nop
 800ed74:	3714      	adds	r7, #20
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	0800f4b4 	.word	0x0800f4b4
 800ed84:	0800f4bc 	.word	0x0800f4bc

0800ed88 <__cxa_pure_virtual>:
 800ed88:	b508      	push	{r3, lr}
 800ed8a:	f000 f80d 	bl	800eda8 <_ZSt9terminatev>

0800ed8e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ed8e:	b508      	push	{r3, lr}
 800ed90:	4780      	blx	r0
 800ed92:	f000 f80e 	bl	800edb2 <abort>
	...

0800ed98 <_ZSt13get_terminatev>:
 800ed98:	4b02      	ldr	r3, [pc, #8]	; (800eda4 <_ZSt13get_terminatev+0xc>)
 800ed9a:	6818      	ldr	r0, [r3, #0]
 800ed9c:	f3bf 8f5b 	dmb	ish
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop
 800eda4:	24000010 	.word	0x24000010

0800eda8 <_ZSt9terminatev>:
 800eda8:	b508      	push	{r3, lr}
 800edaa:	f7ff fff5 	bl	800ed98 <_ZSt13get_terminatev>
 800edae:	f7ff ffee 	bl	800ed8e <_ZN10__cxxabiv111__terminateEPFvvE>

0800edb2 <abort>:
 800edb2:	b508      	push	{r3, lr}
 800edb4:	2006      	movs	r0, #6
 800edb6:	f000 f873 	bl	800eea0 <raise>
 800edba:	2001      	movs	r0, #1
 800edbc:	f7f6 fcec 	bl	8005798 <_exit>

0800edc0 <__errno>:
 800edc0:	4b01      	ldr	r3, [pc, #4]	; (800edc8 <__errno+0x8>)
 800edc2:	6818      	ldr	r0, [r3, #0]
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop
 800edc8:	24000014 	.word	0x24000014

0800edcc <__libc_init_array>:
 800edcc:	b570      	push	{r4, r5, r6, lr}
 800edce:	4d0d      	ldr	r5, [pc, #52]	; (800ee04 <__libc_init_array+0x38>)
 800edd0:	4c0d      	ldr	r4, [pc, #52]	; (800ee08 <__libc_init_array+0x3c>)
 800edd2:	1b64      	subs	r4, r4, r5
 800edd4:	10a4      	asrs	r4, r4, #2
 800edd6:	2600      	movs	r6, #0
 800edd8:	42a6      	cmp	r6, r4
 800edda:	d109      	bne.n	800edf0 <__libc_init_array+0x24>
 800eddc:	4d0b      	ldr	r5, [pc, #44]	; (800ee0c <__libc_init_array+0x40>)
 800edde:	4c0c      	ldr	r4, [pc, #48]	; (800ee10 <__libc_init_array+0x44>)
 800ede0:	f000 f9b0 	bl	800f144 <_init>
 800ede4:	1b64      	subs	r4, r4, r5
 800ede6:	10a4      	asrs	r4, r4, #2
 800ede8:	2600      	movs	r6, #0
 800edea:	42a6      	cmp	r6, r4
 800edec:	d105      	bne.n	800edfa <__libc_init_array+0x2e>
 800edee:	bd70      	pop	{r4, r5, r6, pc}
 800edf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800edf4:	4798      	blx	r3
 800edf6:	3601      	adds	r6, #1
 800edf8:	e7ee      	b.n	800edd8 <__libc_init_array+0xc>
 800edfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800edfe:	4798      	blx	r3
 800ee00:	3601      	adds	r6, #1
 800ee02:	e7f2      	b.n	800edea <__libc_init_array+0x1e>
 800ee04:	0800f4cc 	.word	0x0800f4cc
 800ee08:	0800f4cc 	.word	0x0800f4cc
 800ee0c:	0800f4cc 	.word	0x0800f4cc
 800ee10:	0800f4d4 	.word	0x0800f4d4

0800ee14 <memcpy>:
 800ee14:	440a      	add	r2, r1
 800ee16:	4291      	cmp	r1, r2
 800ee18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ee1c:	d100      	bne.n	800ee20 <memcpy+0xc>
 800ee1e:	4770      	bx	lr
 800ee20:	b510      	push	{r4, lr}
 800ee22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee2a:	4291      	cmp	r1, r2
 800ee2c:	d1f9      	bne.n	800ee22 <memcpy+0xe>
 800ee2e:	bd10      	pop	{r4, pc}

0800ee30 <memset>:
 800ee30:	4402      	add	r2, r0
 800ee32:	4603      	mov	r3, r0
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d100      	bne.n	800ee3a <memset+0xa>
 800ee38:	4770      	bx	lr
 800ee3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ee3e:	e7f9      	b.n	800ee34 <memset+0x4>

0800ee40 <realloc>:
 800ee40:	4b02      	ldr	r3, [pc, #8]	; (800ee4c <realloc+0xc>)
 800ee42:	460a      	mov	r2, r1
 800ee44:	4601      	mov	r1, r0
 800ee46:	6818      	ldr	r0, [r3, #0]
 800ee48:	f000 b8da 	b.w	800f000 <_realloc_r>
 800ee4c:	24000014 	.word	0x24000014

0800ee50 <_raise_r>:
 800ee50:	291f      	cmp	r1, #31
 800ee52:	b538      	push	{r3, r4, r5, lr}
 800ee54:	4604      	mov	r4, r0
 800ee56:	460d      	mov	r5, r1
 800ee58:	d904      	bls.n	800ee64 <_raise_r+0x14>
 800ee5a:	2316      	movs	r3, #22
 800ee5c:	6003      	str	r3, [r0, #0]
 800ee5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee62:	bd38      	pop	{r3, r4, r5, pc}
 800ee64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ee66:	b112      	cbz	r2, 800ee6e <_raise_r+0x1e>
 800ee68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee6c:	b94b      	cbnz	r3, 800ee82 <_raise_r+0x32>
 800ee6e:	4620      	mov	r0, r4
 800ee70:	f000 f830 	bl	800eed4 <_getpid_r>
 800ee74:	462a      	mov	r2, r5
 800ee76:	4601      	mov	r1, r0
 800ee78:	4620      	mov	r0, r4
 800ee7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee7e:	f000 b817 	b.w	800eeb0 <_kill_r>
 800ee82:	2b01      	cmp	r3, #1
 800ee84:	d00a      	beq.n	800ee9c <_raise_r+0x4c>
 800ee86:	1c59      	adds	r1, r3, #1
 800ee88:	d103      	bne.n	800ee92 <_raise_r+0x42>
 800ee8a:	2316      	movs	r3, #22
 800ee8c:	6003      	str	r3, [r0, #0]
 800ee8e:	2001      	movs	r0, #1
 800ee90:	e7e7      	b.n	800ee62 <_raise_r+0x12>
 800ee92:	2400      	movs	r4, #0
 800ee94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee98:	4628      	mov	r0, r5
 800ee9a:	4798      	blx	r3
 800ee9c:	2000      	movs	r0, #0
 800ee9e:	e7e0      	b.n	800ee62 <_raise_r+0x12>

0800eea0 <raise>:
 800eea0:	4b02      	ldr	r3, [pc, #8]	; (800eeac <raise+0xc>)
 800eea2:	4601      	mov	r1, r0
 800eea4:	6818      	ldr	r0, [r3, #0]
 800eea6:	f7ff bfd3 	b.w	800ee50 <_raise_r>
 800eeaa:	bf00      	nop
 800eeac:	24000014 	.word	0x24000014

0800eeb0 <_kill_r>:
 800eeb0:	b538      	push	{r3, r4, r5, lr}
 800eeb2:	4d07      	ldr	r5, [pc, #28]	; (800eed0 <_kill_r+0x20>)
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	4608      	mov	r0, r1
 800eeba:	4611      	mov	r1, r2
 800eebc:	602b      	str	r3, [r5, #0]
 800eebe:	f7f6 fc5b 	bl	8005778 <_kill>
 800eec2:	1c43      	adds	r3, r0, #1
 800eec4:	d102      	bne.n	800eecc <_kill_r+0x1c>
 800eec6:	682b      	ldr	r3, [r5, #0]
 800eec8:	b103      	cbz	r3, 800eecc <_kill_r+0x1c>
 800eeca:	6023      	str	r3, [r4, #0]
 800eecc:	bd38      	pop	{r3, r4, r5, pc}
 800eece:	bf00      	nop
 800eed0:	24001cf8 	.word	0x24001cf8

0800eed4 <_getpid_r>:
 800eed4:	f7f6 bc48 	b.w	8005768 <_getpid>

0800eed8 <sbrk_aligned>:
 800eed8:	b570      	push	{r4, r5, r6, lr}
 800eeda:	4e0e      	ldr	r6, [pc, #56]	; (800ef14 <sbrk_aligned+0x3c>)
 800eedc:	460c      	mov	r4, r1
 800eede:	6831      	ldr	r1, [r6, #0]
 800eee0:	4605      	mov	r5, r0
 800eee2:	b911      	cbnz	r1, 800eeea <sbrk_aligned+0x12>
 800eee4:	f000 f8bc 	bl	800f060 <_sbrk_r>
 800eee8:	6030      	str	r0, [r6, #0]
 800eeea:	4621      	mov	r1, r4
 800eeec:	4628      	mov	r0, r5
 800eeee:	f000 f8b7 	bl	800f060 <_sbrk_r>
 800eef2:	1c43      	adds	r3, r0, #1
 800eef4:	d00a      	beq.n	800ef0c <sbrk_aligned+0x34>
 800eef6:	1cc4      	adds	r4, r0, #3
 800eef8:	f024 0403 	bic.w	r4, r4, #3
 800eefc:	42a0      	cmp	r0, r4
 800eefe:	d007      	beq.n	800ef10 <sbrk_aligned+0x38>
 800ef00:	1a21      	subs	r1, r4, r0
 800ef02:	4628      	mov	r0, r5
 800ef04:	f000 f8ac 	bl	800f060 <_sbrk_r>
 800ef08:	3001      	adds	r0, #1
 800ef0a:	d101      	bne.n	800ef10 <sbrk_aligned+0x38>
 800ef0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ef10:	4620      	mov	r0, r4
 800ef12:	bd70      	pop	{r4, r5, r6, pc}
 800ef14:	24001cf4 	.word	0x24001cf4

0800ef18 <_malloc_r>:
 800ef18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef1c:	1ccd      	adds	r5, r1, #3
 800ef1e:	f025 0503 	bic.w	r5, r5, #3
 800ef22:	3508      	adds	r5, #8
 800ef24:	2d0c      	cmp	r5, #12
 800ef26:	bf38      	it	cc
 800ef28:	250c      	movcc	r5, #12
 800ef2a:	2d00      	cmp	r5, #0
 800ef2c:	4607      	mov	r7, r0
 800ef2e:	db01      	blt.n	800ef34 <_malloc_r+0x1c>
 800ef30:	42a9      	cmp	r1, r5
 800ef32:	d905      	bls.n	800ef40 <_malloc_r+0x28>
 800ef34:	230c      	movs	r3, #12
 800ef36:	603b      	str	r3, [r7, #0]
 800ef38:	2600      	movs	r6, #0
 800ef3a:	4630      	mov	r0, r6
 800ef3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef40:	4e2e      	ldr	r6, [pc, #184]	; (800effc <_malloc_r+0xe4>)
 800ef42:	f000 f89d 	bl	800f080 <__malloc_lock>
 800ef46:	6833      	ldr	r3, [r6, #0]
 800ef48:	461c      	mov	r4, r3
 800ef4a:	bb34      	cbnz	r4, 800ef9a <_malloc_r+0x82>
 800ef4c:	4629      	mov	r1, r5
 800ef4e:	4638      	mov	r0, r7
 800ef50:	f7ff ffc2 	bl	800eed8 <sbrk_aligned>
 800ef54:	1c43      	adds	r3, r0, #1
 800ef56:	4604      	mov	r4, r0
 800ef58:	d14d      	bne.n	800eff6 <_malloc_r+0xde>
 800ef5a:	6834      	ldr	r4, [r6, #0]
 800ef5c:	4626      	mov	r6, r4
 800ef5e:	2e00      	cmp	r6, #0
 800ef60:	d140      	bne.n	800efe4 <_malloc_r+0xcc>
 800ef62:	6823      	ldr	r3, [r4, #0]
 800ef64:	4631      	mov	r1, r6
 800ef66:	4638      	mov	r0, r7
 800ef68:	eb04 0803 	add.w	r8, r4, r3
 800ef6c:	f000 f878 	bl	800f060 <_sbrk_r>
 800ef70:	4580      	cmp	r8, r0
 800ef72:	d13a      	bne.n	800efea <_malloc_r+0xd2>
 800ef74:	6821      	ldr	r1, [r4, #0]
 800ef76:	3503      	adds	r5, #3
 800ef78:	1a6d      	subs	r5, r5, r1
 800ef7a:	f025 0503 	bic.w	r5, r5, #3
 800ef7e:	3508      	adds	r5, #8
 800ef80:	2d0c      	cmp	r5, #12
 800ef82:	bf38      	it	cc
 800ef84:	250c      	movcc	r5, #12
 800ef86:	4629      	mov	r1, r5
 800ef88:	4638      	mov	r0, r7
 800ef8a:	f7ff ffa5 	bl	800eed8 <sbrk_aligned>
 800ef8e:	3001      	adds	r0, #1
 800ef90:	d02b      	beq.n	800efea <_malloc_r+0xd2>
 800ef92:	6823      	ldr	r3, [r4, #0]
 800ef94:	442b      	add	r3, r5
 800ef96:	6023      	str	r3, [r4, #0]
 800ef98:	e00e      	b.n	800efb8 <_malloc_r+0xa0>
 800ef9a:	6822      	ldr	r2, [r4, #0]
 800ef9c:	1b52      	subs	r2, r2, r5
 800ef9e:	d41e      	bmi.n	800efde <_malloc_r+0xc6>
 800efa0:	2a0b      	cmp	r2, #11
 800efa2:	d916      	bls.n	800efd2 <_malloc_r+0xba>
 800efa4:	1961      	adds	r1, r4, r5
 800efa6:	42a3      	cmp	r3, r4
 800efa8:	6025      	str	r5, [r4, #0]
 800efaa:	bf18      	it	ne
 800efac:	6059      	strne	r1, [r3, #4]
 800efae:	6863      	ldr	r3, [r4, #4]
 800efb0:	bf08      	it	eq
 800efb2:	6031      	streq	r1, [r6, #0]
 800efb4:	5162      	str	r2, [r4, r5]
 800efb6:	604b      	str	r3, [r1, #4]
 800efb8:	4638      	mov	r0, r7
 800efba:	f104 060b 	add.w	r6, r4, #11
 800efbe:	f000 f865 	bl	800f08c <__malloc_unlock>
 800efc2:	f026 0607 	bic.w	r6, r6, #7
 800efc6:	1d23      	adds	r3, r4, #4
 800efc8:	1af2      	subs	r2, r6, r3
 800efca:	d0b6      	beq.n	800ef3a <_malloc_r+0x22>
 800efcc:	1b9b      	subs	r3, r3, r6
 800efce:	50a3      	str	r3, [r4, r2]
 800efd0:	e7b3      	b.n	800ef3a <_malloc_r+0x22>
 800efd2:	6862      	ldr	r2, [r4, #4]
 800efd4:	42a3      	cmp	r3, r4
 800efd6:	bf0c      	ite	eq
 800efd8:	6032      	streq	r2, [r6, #0]
 800efda:	605a      	strne	r2, [r3, #4]
 800efdc:	e7ec      	b.n	800efb8 <_malloc_r+0xa0>
 800efde:	4623      	mov	r3, r4
 800efe0:	6864      	ldr	r4, [r4, #4]
 800efe2:	e7b2      	b.n	800ef4a <_malloc_r+0x32>
 800efe4:	4634      	mov	r4, r6
 800efe6:	6876      	ldr	r6, [r6, #4]
 800efe8:	e7b9      	b.n	800ef5e <_malloc_r+0x46>
 800efea:	230c      	movs	r3, #12
 800efec:	603b      	str	r3, [r7, #0]
 800efee:	4638      	mov	r0, r7
 800eff0:	f000 f84c 	bl	800f08c <__malloc_unlock>
 800eff4:	e7a1      	b.n	800ef3a <_malloc_r+0x22>
 800eff6:	6025      	str	r5, [r4, #0]
 800eff8:	e7de      	b.n	800efb8 <_malloc_r+0xa0>
 800effa:	bf00      	nop
 800effc:	24001cf0 	.word	0x24001cf0

0800f000 <_realloc_r>:
 800f000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f004:	4680      	mov	r8, r0
 800f006:	4614      	mov	r4, r2
 800f008:	460e      	mov	r6, r1
 800f00a:	b921      	cbnz	r1, 800f016 <_realloc_r+0x16>
 800f00c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f010:	4611      	mov	r1, r2
 800f012:	f7ff bf81 	b.w	800ef18 <_malloc_r>
 800f016:	b92a      	cbnz	r2, 800f024 <_realloc_r+0x24>
 800f018:	f000 f83e 	bl	800f098 <_free_r>
 800f01c:	4625      	mov	r5, r4
 800f01e:	4628      	mov	r0, r5
 800f020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f024:	f000 f884 	bl	800f130 <_malloc_usable_size_r>
 800f028:	4284      	cmp	r4, r0
 800f02a:	4607      	mov	r7, r0
 800f02c:	d802      	bhi.n	800f034 <_realloc_r+0x34>
 800f02e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f032:	d812      	bhi.n	800f05a <_realloc_r+0x5a>
 800f034:	4621      	mov	r1, r4
 800f036:	4640      	mov	r0, r8
 800f038:	f7ff ff6e 	bl	800ef18 <_malloc_r>
 800f03c:	4605      	mov	r5, r0
 800f03e:	2800      	cmp	r0, #0
 800f040:	d0ed      	beq.n	800f01e <_realloc_r+0x1e>
 800f042:	42bc      	cmp	r4, r7
 800f044:	4622      	mov	r2, r4
 800f046:	4631      	mov	r1, r6
 800f048:	bf28      	it	cs
 800f04a:	463a      	movcs	r2, r7
 800f04c:	f7ff fee2 	bl	800ee14 <memcpy>
 800f050:	4631      	mov	r1, r6
 800f052:	4640      	mov	r0, r8
 800f054:	f000 f820 	bl	800f098 <_free_r>
 800f058:	e7e1      	b.n	800f01e <_realloc_r+0x1e>
 800f05a:	4635      	mov	r5, r6
 800f05c:	e7df      	b.n	800f01e <_realloc_r+0x1e>
	...

0800f060 <_sbrk_r>:
 800f060:	b538      	push	{r3, r4, r5, lr}
 800f062:	4d06      	ldr	r5, [pc, #24]	; (800f07c <_sbrk_r+0x1c>)
 800f064:	2300      	movs	r3, #0
 800f066:	4604      	mov	r4, r0
 800f068:	4608      	mov	r0, r1
 800f06a:	602b      	str	r3, [r5, #0]
 800f06c:	f7f6 fb9e 	bl	80057ac <_sbrk>
 800f070:	1c43      	adds	r3, r0, #1
 800f072:	d102      	bne.n	800f07a <_sbrk_r+0x1a>
 800f074:	682b      	ldr	r3, [r5, #0]
 800f076:	b103      	cbz	r3, 800f07a <_sbrk_r+0x1a>
 800f078:	6023      	str	r3, [r4, #0]
 800f07a:	bd38      	pop	{r3, r4, r5, pc}
 800f07c:	24001cf8 	.word	0x24001cf8

0800f080 <__malloc_lock>:
 800f080:	4801      	ldr	r0, [pc, #4]	; (800f088 <__malloc_lock+0x8>)
 800f082:	f000 b85d 	b.w	800f140 <__retarget_lock_acquire_recursive>
 800f086:	bf00      	nop
 800f088:	24001cfc 	.word	0x24001cfc

0800f08c <__malloc_unlock>:
 800f08c:	4801      	ldr	r0, [pc, #4]	; (800f094 <__malloc_unlock+0x8>)
 800f08e:	f000 b858 	b.w	800f142 <__retarget_lock_release_recursive>
 800f092:	bf00      	nop
 800f094:	24001cfc 	.word	0x24001cfc

0800f098 <_free_r>:
 800f098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f09a:	2900      	cmp	r1, #0
 800f09c:	d044      	beq.n	800f128 <_free_r+0x90>
 800f09e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0a2:	9001      	str	r0, [sp, #4]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	f1a1 0404 	sub.w	r4, r1, #4
 800f0aa:	bfb8      	it	lt
 800f0ac:	18e4      	addlt	r4, r4, r3
 800f0ae:	f7ff ffe7 	bl	800f080 <__malloc_lock>
 800f0b2:	4a1e      	ldr	r2, [pc, #120]	; (800f12c <_free_r+0x94>)
 800f0b4:	9801      	ldr	r0, [sp, #4]
 800f0b6:	6813      	ldr	r3, [r2, #0]
 800f0b8:	b933      	cbnz	r3, 800f0c8 <_free_r+0x30>
 800f0ba:	6063      	str	r3, [r4, #4]
 800f0bc:	6014      	str	r4, [r2, #0]
 800f0be:	b003      	add	sp, #12
 800f0c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f0c4:	f7ff bfe2 	b.w	800f08c <__malloc_unlock>
 800f0c8:	42a3      	cmp	r3, r4
 800f0ca:	d908      	bls.n	800f0de <_free_r+0x46>
 800f0cc:	6825      	ldr	r5, [r4, #0]
 800f0ce:	1961      	adds	r1, r4, r5
 800f0d0:	428b      	cmp	r3, r1
 800f0d2:	bf01      	itttt	eq
 800f0d4:	6819      	ldreq	r1, [r3, #0]
 800f0d6:	685b      	ldreq	r3, [r3, #4]
 800f0d8:	1949      	addeq	r1, r1, r5
 800f0da:	6021      	streq	r1, [r4, #0]
 800f0dc:	e7ed      	b.n	800f0ba <_free_r+0x22>
 800f0de:	461a      	mov	r2, r3
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	b10b      	cbz	r3, 800f0e8 <_free_r+0x50>
 800f0e4:	42a3      	cmp	r3, r4
 800f0e6:	d9fa      	bls.n	800f0de <_free_r+0x46>
 800f0e8:	6811      	ldr	r1, [r2, #0]
 800f0ea:	1855      	adds	r5, r2, r1
 800f0ec:	42a5      	cmp	r5, r4
 800f0ee:	d10b      	bne.n	800f108 <_free_r+0x70>
 800f0f0:	6824      	ldr	r4, [r4, #0]
 800f0f2:	4421      	add	r1, r4
 800f0f4:	1854      	adds	r4, r2, r1
 800f0f6:	42a3      	cmp	r3, r4
 800f0f8:	6011      	str	r1, [r2, #0]
 800f0fa:	d1e0      	bne.n	800f0be <_free_r+0x26>
 800f0fc:	681c      	ldr	r4, [r3, #0]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	6053      	str	r3, [r2, #4]
 800f102:	4421      	add	r1, r4
 800f104:	6011      	str	r1, [r2, #0]
 800f106:	e7da      	b.n	800f0be <_free_r+0x26>
 800f108:	d902      	bls.n	800f110 <_free_r+0x78>
 800f10a:	230c      	movs	r3, #12
 800f10c:	6003      	str	r3, [r0, #0]
 800f10e:	e7d6      	b.n	800f0be <_free_r+0x26>
 800f110:	6825      	ldr	r5, [r4, #0]
 800f112:	1961      	adds	r1, r4, r5
 800f114:	428b      	cmp	r3, r1
 800f116:	bf04      	itt	eq
 800f118:	6819      	ldreq	r1, [r3, #0]
 800f11a:	685b      	ldreq	r3, [r3, #4]
 800f11c:	6063      	str	r3, [r4, #4]
 800f11e:	bf04      	itt	eq
 800f120:	1949      	addeq	r1, r1, r5
 800f122:	6021      	streq	r1, [r4, #0]
 800f124:	6054      	str	r4, [r2, #4]
 800f126:	e7ca      	b.n	800f0be <_free_r+0x26>
 800f128:	b003      	add	sp, #12
 800f12a:	bd30      	pop	{r4, r5, pc}
 800f12c:	24001cf0 	.word	0x24001cf0

0800f130 <_malloc_usable_size_r>:
 800f130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f134:	1f18      	subs	r0, r3, #4
 800f136:	2b00      	cmp	r3, #0
 800f138:	bfbc      	itt	lt
 800f13a:	580b      	ldrlt	r3, [r1, r0]
 800f13c:	18c0      	addlt	r0, r0, r3
 800f13e:	4770      	bx	lr

0800f140 <__retarget_lock_acquire_recursive>:
 800f140:	4770      	bx	lr

0800f142 <__retarget_lock_release_recursive>:
 800f142:	4770      	bx	lr

0800f144 <_init>:
 800f144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f146:	bf00      	nop
 800f148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f14a:	bc08      	pop	{r3}
 800f14c:	469e      	mov	lr, r3
 800f14e:	4770      	bx	lr

0800f150 <_fini>:
 800f150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f152:	bf00      	nop
 800f154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f156:	bc08      	pop	{r3}
 800f158:	469e      	mov	lr, r3
 800f15a:	4770      	bx	lr
