
0210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084e0  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080087b0  080087b0  000187b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080087e8  080087e8  000187e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080087f0  080087f0  000187f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080087f4  080087f4  000187f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080087f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08008808  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08008868  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  240000d0  080088c8  000200d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240006c0  080088c8  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a372  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f9  00000000  00000000  0003a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0003c970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  0003db90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003335e  00000000  00000000  0003ece8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015eb2  00000000  00000000  00072046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00151e1b  00000000  00000000  00087ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d9d13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e2c  00000000  00000000  001d9d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000d0 	.word	0x240000d0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008798 	.word	0x08008798

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000d4 	.word	0x240000d4
 800030c:	08008798 	.word	0x08008798

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	0000      	movs	r0, r0
	...

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PV1 = 0, PV2 = 0, PV3 = 0, PV4 = 0;
 800061c:	4998      	ldr	r1, [pc, #608]	; (8000880 <main+0x268>)
 800061e:	f04f 0200 	mov.w	r2, #0
 8000622:	f04f 0300 	mov.w	r3, #0
 8000626:	e9c1 2300 	strd	r2, r3, [r1]
 800062a:	4996      	ldr	r1, [pc, #600]	; (8000884 <main+0x26c>)
 800062c:	f04f 0200 	mov.w	r2, #0
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e9c1 2300 	strd	r2, r3, [r1]
 8000638:	4993      	ldr	r1, [pc, #588]	; (8000888 <main+0x270>)
 800063a:	f04f 0200 	mov.w	r2, #0
 800063e:	f04f 0300 	mov.w	r3, #0
 8000642:	e9c1 2300 	strd	r2, r3, [r1]
 8000646:	4991      	ldr	r1, [pc, #580]	; (800088c <main+0x274>)
 8000648:	f04f 0200 	mov.w	r2, #0
 800064c:	f04f 0300 	mov.w	r3, #0
 8000650:	e9c1 2300 	strd	r2, r3, [r1]
	SP1 = 0, SP2 = 0, SP3 = 0, SP4 = 0;
 8000654:	498e      	ldr	r1, [pc, #568]	; (8000890 <main+0x278>)
 8000656:	f04f 0200 	mov.w	r2, #0
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	e9c1 2300 	strd	r2, r3, [r1]
 8000662:	498c      	ldr	r1, [pc, #560]	; (8000894 <main+0x27c>)
 8000664:	f04f 0200 	mov.w	r2, #0
 8000668:	f04f 0300 	mov.w	r3, #0
 800066c:	e9c1 2300 	strd	r2, r3, [r1]
 8000670:	4989      	ldr	r1, [pc, #548]	; (8000898 <main+0x280>)
 8000672:	f04f 0200 	mov.w	r2, #0
 8000676:	f04f 0300 	mov.w	r3, #0
 800067a:	e9c1 2300 	strd	r2, r3, [r1]
 800067e:	4987      	ldr	r1, [pc, #540]	; (800089c <main+0x284>)
 8000680:	f04f 0200 	mov.w	r2, #0
 8000684:	f04f 0300 	mov.w	r3, #0
 8000688:	e9c1 2300 	strd	r2, r3, [r1]

	n = 0;
 800068c:	4b84      	ldr	r3, [pc, #528]	; (80008a0 <main+0x288>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]

	error1 = PV1 - SP1;
 8000692:	4b7b      	ldr	r3, [pc, #492]	; (8000880 <main+0x268>)
 8000694:	ed93 6b00 	vldr	d6, [r3]
 8000698:	4b7d      	ldr	r3, [pc, #500]	; (8000890 <main+0x278>)
 800069a:	ed93 7b00 	vldr	d7, [r3]
 800069e:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006a2:	4b80      	ldr	r3, [pc, #512]	; (80008a4 <main+0x28c>)
 80006a4:	ed83 7b00 	vstr	d7, [r3]
	error2 = PV2 - SP2;
 80006a8:	4b76      	ldr	r3, [pc, #472]	; (8000884 <main+0x26c>)
 80006aa:	ed93 6b00 	vldr	d6, [r3]
 80006ae:	4b79      	ldr	r3, [pc, #484]	; (8000894 <main+0x27c>)
 80006b0:	ed93 7b00 	vldr	d7, [r3]
 80006b4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006b8:	4b7b      	ldr	r3, [pc, #492]	; (80008a8 <main+0x290>)
 80006ba:	ed83 7b00 	vstr	d7, [r3]
	error3 = PV3 - SP3;
 80006be:	4b72      	ldr	r3, [pc, #456]	; (8000888 <main+0x270>)
 80006c0:	ed93 6b00 	vldr	d6, [r3]
 80006c4:	4b74      	ldr	r3, [pc, #464]	; (8000898 <main+0x280>)
 80006c6:	ed93 7b00 	vldr	d7, [r3]
 80006ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006ce:	4b77      	ldr	r3, [pc, #476]	; (80008ac <main+0x294>)
 80006d0:	ed83 7b00 	vstr	d7, [r3]
	error4 = PV4 - SP4;
 80006d4:	4b6d      	ldr	r3, [pc, #436]	; (800088c <main+0x274>)
 80006d6:	ed93 6b00 	vldr	d6, [r3]
 80006da:	4b70      	ldr	r3, [pc, #448]	; (800089c <main+0x284>)
 80006dc:	ed93 7b00 	vldr	d7, [r3]
 80006e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006e4:	4b72      	ldr	r3, [pc, #456]	; (80008b0 <main+0x298>)
 80006e6:	ed83 7b00 	vstr	d7, [r3]
	enc1 = 0, enc2 = 0, enc3 = 0, enc4 = 0;
 80006ea:	4b72      	ldr	r3, [pc, #456]	; (80008b4 <main+0x29c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	801a      	strh	r2, [r3, #0]
 80006f0:	4b71      	ldr	r3, [pc, #452]	; (80008b8 <main+0x2a0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	801a      	strh	r2, [r3, #0]
 80006f6:	4b71      	ldr	r3, [pc, #452]	; (80008bc <main+0x2a4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	801a      	strh	r2, [r3, #0]
 80006fc:	4b70      	ldr	r3, [pc, #448]	; (80008c0 <main+0x2a8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	801a      	strh	r2, [r3, #0]

	Kp1 = 1.314238; // blue
 8000702:	4970      	ldr	r1, [pc, #448]	; (80008c4 <main+0x2ac>)
 8000704:	a356      	add	r3, pc, #344	; (adr r3, 8000860 <main+0x248>)
 8000706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800070a:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 = 37.12271; // blue
 800070e:	496e      	ldr	r1, [pc, #440]	; (80008c8 <main+0x2b0>)
 8000710:	a355      	add	r3, pc, #340	; (adr r3, 8000868 <main+0x250>)
 8000712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000716:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 = 1.8217; // purple
 800071a:	496c      	ldr	r1, [pc, #432]	; (80008cc <main+0x2b4>)
 800071c:	a354      	add	r3, pc, #336	; (adr r3, 8000870 <main+0x258>)
 800071e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000722:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 = 48.293; // purple
 8000726:	496a      	ldr	r1, [pc, #424]	; (80008d0 <main+0x2b8>)
 8000728:	a353      	add	r3, pc, #332	; (adr r3, 8000878 <main+0x260>)
 800072a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800072e:	e9c1 2300 	strd	r2, r3, [r1]
	Kp3 = 1;
 8000732:	4968      	ldr	r1, [pc, #416]	; (80008d4 <main+0x2bc>)
 8000734:	f04f 0200 	mov.w	r2, #0
 8000738:	4b67      	ldr	r3, [pc, #412]	; (80008d8 <main+0x2c0>)
 800073a:	e9c1 2300 	strd	r2, r3, [r1]
	Ki3 = 30;
 800073e:	4967      	ldr	r1, [pc, #412]	; (80008dc <main+0x2c4>)
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	4b66      	ldr	r3, [pc, #408]	; (80008e0 <main+0x2c8>)
 8000746:	e9c1 2300 	strd	r2, r3, [r1]
	Kp4 = 1;
 800074a:	4966      	ldr	r1, [pc, #408]	; (80008e4 <main+0x2cc>)
 800074c:	f04f 0200 	mov.w	r2, #0
 8000750:	4b61      	ldr	r3, [pc, #388]	; (80008d8 <main+0x2c0>)
 8000752:	e9c1 2300 	strd	r2, r3, [r1]
	Ki4 = 30;
 8000756:	4964      	ldr	r1, [pc, #400]	; (80008e8 <main+0x2d0>)
 8000758:	f04f 0200 	mov.w	r2, #0
 800075c:	4b60      	ldr	r3, [pc, #384]	; (80008e0 <main+0x2c8>)
 800075e:	e9c1 2300 	strd	r2, r3, [r1]

	error_last1 = 0;
 8000762:	4962      	ldr	r1, [pc, #392]	; (80008ec <main+0x2d4>)
 8000764:	f04f 0200 	mov.w	r2, #0
 8000768:	f04f 0300 	mov.w	r3, #0
 800076c:	e9c1 2300 	strd	r2, r3, [r1]
	error_last2 = 0;
 8000770:	495f      	ldr	r1, [pc, #380]	; (80008f0 <main+0x2d8>)
 8000772:	f04f 0200 	mov.w	r2, #0
 8000776:	f04f 0300 	mov.w	r3, #0
 800077a:	e9c1 2300 	strd	r2, r3, [r1]
	error_last3 = 0;
 800077e:	495d      	ldr	r1, [pc, #372]	; (80008f4 <main+0x2dc>)
 8000780:	f04f 0200 	mov.w	r2, #0
 8000784:	f04f 0300 	mov.w	r3, #0
 8000788:	e9c1 2300 	strd	r2, r3, [r1]
	error_last4 = 0;
 800078c:	495a      	ldr	r1, [pc, #360]	; (80008f8 <main+0x2e0>)
 800078e:	f04f 0200 	mov.w	r2, #0
 8000792:	f04f 0300 	mov.w	r3, #0
 8000796:	e9c1 2300 	strd	r2, r3, [r1]

	errorsum1 = 0;
 800079a:	4958      	ldr	r1, [pc, #352]	; (80008fc <main+0x2e4>)
 800079c:	f04f 0200 	mov.w	r2, #0
 80007a0:	f04f 0300 	mov.w	r3, #0
 80007a4:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum2 = 0;
 80007a8:	4955      	ldr	r1, [pc, #340]	; (8000900 <main+0x2e8>)
 80007aa:	f04f 0200 	mov.w	r2, #0
 80007ae:	f04f 0300 	mov.w	r3, #0
 80007b2:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum3 = 0;
 80007b6:	4953      	ldr	r1, [pc, #332]	; (8000904 <main+0x2ec>)
 80007b8:	f04f 0200 	mov.w	r2, #0
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum4 = 0;
 80007c4:	4950      	ldr	r1, [pc, #320]	; (8000908 <main+0x2f0>)
 80007c6:	f04f 0200 	mov.w	r2, #0
 80007ca:	f04f 0300 	mov.w	r3, #0
 80007ce:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d2:	f001 ff47 	bl	8002664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d6:	f000 f8ab 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007da:	f000 fda9 	bl	8001330 <MX_GPIO_Init>
  MX_ETH_Init();
 80007de:	f000 f917 	bl	8000a10 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007e2:	f000 fd51 	bl	8001288 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80007e6:	f000 fd9b 	bl	8001320 <MX_USB_OTG_HS_USB_Init>
  MX_TIM2_Init();
 80007ea:	f000 f9ed 	bl	8000bc8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007ee:	f000 fa39 	bl	8000c64 <MX_TIM3_Init>
  MX_TIM4_Init();
 80007f2:	f000 fa8d 	bl	8000d10 <MX_TIM4_Init>
  MX_TIM6_Init();
 80007f6:	f000 fb43 	bl	8000e80 <MX_TIM6_Init>
  MX_TIM7_Init();
 80007fa:	f000 fb81 	bl	8000f00 <MX_TIM7_Init>
  MX_TIM1_Init();
 80007fe:	f000 f953 	bl	8000aa8 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000802:	f000 fae1 	bl	8000dc8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000806:	f000 fbb1 	bl	8000f6c <MX_TIM8_Init>
  MX_TIM15_Init();
 800080a:	f000 fc09 	bl	8001020 <MX_TIM15_Init>
  MX_TIM23_Init();
 800080e:	f000 fc8f 	bl	8001130 <MX_TIM23_Init>
  MX_TIM24_Init();
 8000812:	f000 fce3 	bl	80011dc <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000816:	483d      	ldr	r0, [pc, #244]	; (800090c <main+0x2f4>)
 8000818:	f005 f9a8 	bl	8005b6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 800081c:	2100      	movs	r1, #0
 800081e:	483c      	ldr	r0, [pc, #240]	; (8000910 <main+0x2f8>)
 8000820:	f005 fc9e 	bl	8006160 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 8000824:	2100      	movs	r1, #0
 8000826:	483b      	ldr	r0, [pc, #236]	; (8000914 <main+0x2fc>)
 8000828:	f005 fc9a 	bl	8006160 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 800082c:	2100      	movs	r1, #0
 800082e:	483a      	ldr	r0, [pc, #232]	; (8000918 <main+0x300>)
 8000830:	f005 fc96 	bl	8006160 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 8000834:	2100      	movs	r1, #0
 8000836:	4839      	ldr	r0, [pc, #228]	; (800091c <main+0x304>)
 8000838:	f005 fc92 	bl	8006160 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800083c:	2100      	movs	r1, #0
 800083e:	4838      	ldr	r0, [pc, #224]	; (8000920 <main+0x308>)
 8000840:	f005 fa72 	bl	8005d28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000844:	2100      	movs	r1, #0
 8000846:	4837      	ldr	r0, [pc, #220]	; (8000924 <main+0x30c>)
 8000848:	f005 fa6e 	bl	8005d28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800084c:	2100      	movs	r1, #0
 800084e:	4836      	ldr	r0, [pc, #216]	; (8000928 <main+0x310>)
 8000850:	f005 fa6a 	bl	8005d28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000854:	2100      	movs	r1, #0
 8000856:	4835      	ldr	r0, [pc, #212]	; (800092c <main+0x314>)
 8000858:	f005 fa66 	bl	8005d28 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085c:	e7fe      	b.n	800085c <main+0x244>
 800085e:	bf00      	nop
 8000860:	6cd29132 	.word	0x6cd29132
 8000864:	3ff5071e 	.word	0x3ff5071e
 8000868:	f6167232 	.word	0xf6167232
 800086c:	40428fb4 	.word	0x40428fb4
 8000870:	e631f8a1 	.word	0xe631f8a1
 8000874:	3ffd25ae 	.word	0x3ffd25ae
 8000878:	0624dd2f 	.word	0x0624dd2f
 800087c:	40482581 	.word	0x40482581
 8000880:	240005a8 	.word	0x240005a8
 8000884:	240005b0 	.word	0x240005b0
 8000888:	240005b8 	.word	0x240005b8
 800088c:	240005c0 	.word	0x240005c0
 8000890:	240005c8 	.word	0x240005c8
 8000894:	240005d0 	.word	0x240005d0
 8000898:	240005d8 	.word	0x240005d8
 800089c:	240005e0 	.word	0x240005e0
 80008a0:	240006b0 	.word	0x240006b0
 80008a4:	240005e8 	.word	0x240005e8
 80008a8:	240005f0 	.word	0x240005f0
 80008ac:	240005f8 	.word	0x240005f8
 80008b0:	24000600 	.word	0x24000600
 80008b4:	24000608 	.word	0x24000608
 80008b8:	2400060a 	.word	0x2400060a
 80008bc:	2400060c 	.word	0x2400060c
 80008c0:	2400060e 	.word	0x2400060e
 80008c4:	24000610 	.word	0x24000610
 80008c8:	24000630 	.word	0x24000630
 80008cc:	24000618 	.word	0x24000618
 80008d0:	24000638 	.word	0x24000638
 80008d4:	24000620 	.word	0x24000620
 80008d8:	3ff00000 	.word	0x3ff00000
 80008dc:	24000640 	.word	0x24000640
 80008e0:	403e0000 	.word	0x403e0000
 80008e4:	24000628 	.word	0x24000628
 80008e8:	24000648 	.word	0x24000648
 80008ec:	24000670 	.word	0x24000670
 80008f0:	24000678 	.word	0x24000678
 80008f4:	24000680 	.word	0x24000680
 80008f8:	24000688 	.word	0x24000688
 80008fc:	24000690 	.word	0x24000690
 8000900:	24000698 	.word	0x24000698
 8000904:	240006a0 	.word	0x240006a0
 8000908:	240006a8 	.word	0x240006a8
 800090c:	24000220 	.word	0x24000220
 8000910:	2400026c 	.word	0x2400026c
 8000914:	240003e8 	.word	0x240003e8
 8000918:	24000480 	.word	0x24000480
 800091c:	240004cc 	.word	0x240004cc
 8000920:	240002b8 	.word	0x240002b8
 8000924:	24000304 	.word	0x24000304
 8000928:	24000434 	.word	0x24000434
 800092c:	240001d4 	.word	0x240001d4

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b09c      	sub	sp, #112	; 0x70
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093a:	224c      	movs	r2, #76	; 0x4c
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f007 ff22 	bl	8008788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2220      	movs	r2, #32
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f007 ff1c 	bl	8008788 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000950:	2002      	movs	r0, #2
 8000952:	f002 fe23 	bl	800359c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b2c      	ldr	r3, [pc, #176]	; (8000a0c <SystemClock_Config+0xdc>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a2b      	ldr	r2, [pc, #172]	; (8000a0c <SystemClock_Config+0xdc>)
 8000960:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <SystemClock_Config+0xdc>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000972:	bf00      	nop
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <SystemClock_Config+0xdc>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800097c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000980:	d1f8      	bne.n	8000974 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000982:	2321      	movs	r3, #33	; 0x21
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000986:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800098c:	2301      	movs	r3, #1
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000990:	2302      	movs	r3, #2
 8000992:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000994:	2302      	movs	r3, #2
 8000996:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800099c:	f240 1313 	movw	r3, #275	; 0x113
 80009a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a6:	2304      	movs	r3, #4
 80009a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80009ae:	2304      	movs	r3, #4
 80009b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fe26 	bl	8003610 <HAL_RCC_OscConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009ca:	f001 f99d 	bl	8001d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ce:	233f      	movs	r3, #63	; 0x3f
 80009d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d2:	2303      	movs	r3, #3
 80009d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009da:	2308      	movs	r3, #8
 80009dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009de:	2340      	movs	r3, #64	; 0x40
 80009e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009ec:	2340      	movs	r3, #64	; 0x40
 80009ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2103      	movs	r1, #3
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 f9b9 	bl	8003d6c <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a00:	f001 f982 	bl	8001d08 <Error_Handler>
  }
}
 8000a04:	bf00      	nop
 8000a06:	3770      	adds	r7, #112	; 0x70
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	58024800 	.word	0x58024800

08000a10 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_ETH_Init+0x80>)
 8000a16:	4a1f      	ldr	r2, [pc, #124]	; (8000a94 <MX_ETH_Init+0x84>)
 8000a18:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_ETH_Init+0x88>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <MX_ETH_Init+0x88>)
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_ETH_Init+0x88>)
 8000a28:	22e1      	movs	r2, #225	; 0xe1
 8000a2a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_ETH_Init+0x88>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_ETH_Init+0x88>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_ETH_Init+0x88>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_ETH_Init+0x80>)
 8000a40:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <MX_ETH_Init+0x88>)
 8000a42:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_ETH_Init+0x80>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_ETH_Init+0x80>)
 8000a4c:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <MX_ETH_Init+0x8c>)
 8000a4e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_ETH_Init+0x80>)
 8000a52:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <MX_ETH_Init+0x90>)
 8000a54:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_ETH_Init+0x80>)
 8000a58:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a5c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a5e:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_ETH_Init+0x80>)
 8000a60:	f001 ffb6 	bl	80029d0 <HAL_ETH_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a6a:	f001 f94d 	bl	8001d08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a6e:	2238      	movs	r2, #56	; 0x38
 8000a70:	2100      	movs	r1, #0
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_ETH_Init+0x94>)
 8000a74:	f007 fe88 	bl	8008788 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MX_ETH_Init+0x94>)
 8000a7a:	2221      	movs	r2, #33	; 0x21
 8000a7c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_ETH_Init+0x94>)
 8000a80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a84:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <MX_ETH_Init+0x94>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	24000124 	.word	0x24000124
 8000a94:	40028000 	.word	0x40028000
 8000a98:	240006b4 	.word	0x240006b4
 8000a9c:	24000070 	.word	0x24000070
 8000aa0:	24000010 	.word	0x24000010
 8000aa4:	240000ec 	.word	0x240000ec

08000aa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b098      	sub	sp, #96	; 0x60
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2234      	movs	r2, #52	; 0x34
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f007 fe57 	bl	8008788 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ada:	4b39      	ldr	r3, [pc, #228]	; (8000bc0 <MX_TIM1_Init+0x118>)
 8000adc:	4a39      	ldr	r2, [pc, #228]	; (8000bc4 <MX_TIM1_Init+0x11c>)
 8000ade:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 274;
 8000ae0:	4b37      	ldr	r3, [pc, #220]	; (8000bc0 <MX_TIM1_Init+0x118>)
 8000ae2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000ae6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <MX_TIM1_Init+0x118>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000aee:	4b34      	ldr	r3, [pc, #208]	; (8000bc0 <MX_TIM1_Init+0x118>)
 8000af0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b32      	ldr	r3, [pc, #200]	; (8000bc0 <MX_TIM1_Init+0x118>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000afc:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <MX_TIM1_Init+0x118>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <MX_TIM1_Init+0x118>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b08:	482d      	ldr	r0, [pc, #180]	; (8000bc0 <MX_TIM1_Init+0x118>)
 8000b0a:	f005 f8b5 	bl	8005c78 <HAL_TIM_PWM_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000b14:	f001 f8f8 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4825      	ldr	r0, [pc, #148]	; (8000bc0 <MX_TIM1_Init+0x118>)
 8000b2c:	f006 fb3a 	bl	80071a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b36:	f001 f8e7 	bl	8001d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3a:	2360      	movs	r3, #96	; 0x60
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b42:	2300      	movs	r3, #0
 8000b44:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b46:	2300      	movs	r3, #0
 8000b48:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4818      	ldr	r0, [pc, #96]	; (8000bc0 <MX_TIM1_Init+0x118>)
 8000b60:	f005 fcac 	bl	80064bc <HAL_TIM_PWM_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000b6a:	f001 f8cd 	bl	8001d08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <MX_TIM1_Init+0x118>)
 8000ba4:	f006 fb9a 	bl	80072dc <HAL_TIMEx_ConfigBreakDeadTime>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000bae:	f001 f8ab 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bb2:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <MX_TIM1_Init+0x118>)
 8000bb4:	f001 fb64 	bl	8002280 <HAL_TIM_MspPostInit>

}
 8000bb8:	bf00      	nop
 8000bba:	3760      	adds	r7, #96	; 0x60
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	240001d4 	.word	0x240001d4
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be6:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <MX_TIM2_Init+0x98>)
 8000be8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <MX_TIM2_Init+0x98>)
 8000bf0:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000bf4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_TIM2_Init+0x98>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_TIM2_Init+0x98>)
 8000bfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MX_TIM2_Init+0x98>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <MX_TIM2_Init+0x98>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c10:	4813      	ldr	r0, [pc, #76]	; (8000c60 <MX_TIM2_Init+0x98>)
 8000c12:	f004 ff53 	bl	8005abc <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c1c:	f001 f874 	bl	8001d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <MX_TIM2_Init+0x98>)
 8000c2e:	f005 fd59 	bl	80066e4 <HAL_TIM_ConfigClockSource>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c38:	f001 f866 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_TIM2_Init+0x98>)
 8000c4a:	f006 faab 	bl	80071a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c54:	f001 f858 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	3720      	adds	r7, #32
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	24000220 	.word	0x24000220

08000c64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	; 0x30
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	2224      	movs	r2, #36	; 0x24
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f007 fd88 	bl	8008788 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <MX_TIM3_Init+0xa4>)
 8000c84:	4a21      	ldr	r2, [pc, #132]	; (8000d0c <MX_TIM3_Init+0xa8>)
 8000c86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <MX_TIM3_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <MX_TIM3_Init+0xa4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <MX_TIM3_Init+0xa4>)
 8000c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_TIM3_Init+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <MX_TIM3_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480d      	ldr	r0, [pc, #52]	; (8000d08 <MX_TIM3_Init+0xa4>)
 8000cd4:	f005 f99e 	bl	8006014 <HAL_TIM_Encoder_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000cde:	f001 f813 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <MX_TIM3_Init+0xa4>)
 8000cf0:	f006 fa58 	bl	80071a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000cfa:	f001 f805 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3730      	adds	r7, #48	; 0x30
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2400026c 	.word	0x2400026c
 8000d0c:	40000400 	.word	0x40000400

08000d10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d22:	463b      	mov	r3, r7
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
 8000d30:	615a      	str	r2, [r3, #20]
 8000d32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_TIM4_Init+0xb0>)
 8000d36:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <MX_TIM4_Init+0xb4>)
 8000d38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 274;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_TIM4_Init+0xb0>)
 8000d3c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000d40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_TIM4_Init+0xb0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <MX_TIM4_Init+0xb0>)
 8000d4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_TIM4_Init+0xb0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_TIM4_Init+0xb0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d5c:	4818      	ldr	r0, [pc, #96]	; (8000dc0 <MX_TIM4_Init+0xb0>)
 8000d5e:	f004 ff8b 	bl	8005c78 <HAL_TIM_PWM_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000d68:	f000 ffce 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <MX_TIM4_Init+0xb0>)
 8000d7c:	f006 fa12 	bl	80071a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000d86:	f000 ffbf 	bl	8001d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d8a:	2360      	movs	r3, #96	; 0x60
 8000d8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <MX_TIM4_Init+0xb0>)
 8000da2:	f005 fb8b 	bl	80064bc <HAL_TIM_PWM_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000dac:	f000 ffac 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000db0:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <MX_TIM4_Init+0xb0>)
 8000db2:	f001 fa65 	bl	8002280 <HAL_TIM_MspPostInit>

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	240002b8 	.word	0x240002b8
 8000dc4:	40000800 	.word	0x40000800

08000dc8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dec:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <MX_TIM5_Init+0xb0>)
 8000dee:	4a23      	ldr	r2, [pc, #140]	; (8000e7c <MX_TIM5_Init+0xb4>)
 8000df0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 274;
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <MX_TIM5_Init+0xb0>)
 8000df4:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000df8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <MX_TIM5_Init+0xb0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <MX_TIM5_Init+0xb0>)
 8000e02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e06:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_TIM5_Init+0xb0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_TIM5_Init+0xb0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e14:	4818      	ldr	r0, [pc, #96]	; (8000e78 <MX_TIM5_Init+0xb0>)
 8000e16:	f004 ff2f 	bl	8005c78 <HAL_TIM_PWM_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8000e20:	f000 ff72 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4811      	ldr	r0, [pc, #68]	; (8000e78 <MX_TIM5_Init+0xb0>)
 8000e34:	f006 f9b6 	bl	80071a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8000e3e:	f000 ff63 	bl	8001d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e42:	2360      	movs	r3, #96	; 0x60
 8000e44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e52:	463b      	mov	r3, r7
 8000e54:	2200      	movs	r2, #0
 8000e56:	4619      	mov	r1, r3
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <MX_TIM5_Init+0xb0>)
 8000e5a:	f005 fb2f 	bl	80064bc <HAL_TIM_PWM_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000e64:	f000 ff50 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <MX_TIM5_Init+0xb0>)
 8000e6a:	f001 fa09 	bl	8002280 <HAL_TIM_MspPostInit>

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	24000304 	.word	0x24000304
 8000e7c:	40000c00 	.word	0x40000c00

08000e80 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <MX_TIM6_Init+0x78>)
 8000e92:	4a1a      	ldr	r2, [pc, #104]	; (8000efc <MX_TIM6_Init+0x7c>)
 8000e94:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <MX_TIM6_Init+0x78>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <MX_TIM6_Init+0x78>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <MX_TIM6_Init+0x78>)
 8000ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_TIM6_Init+0x78>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000eb0:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <MX_TIM6_Init+0x78>)
 8000eb2:	f004 fe03 	bl	8005abc <HAL_TIM_Base_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ebc:	f000 ff24 	bl	8001d08 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ec0:	2108      	movs	r1, #8
 8000ec2:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <MX_TIM6_Init+0x78>)
 8000ec4:	f005 f84c 	bl	8005f60 <HAL_TIM_OnePulse_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000ece:	f000 ff1b 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <MX_TIM6_Init+0x78>)
 8000ee0:	f006 f960 	bl	80071a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000eea:	f000 ff0d 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	24000350 	.word	0x24000350
 8000efc:	40001000 	.word	0x40001000

08000f00 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_TIM7_Init+0x64>)
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <MX_TIM7_Init+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_TIM7_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_TIM7_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_TIM7_Init+0x64>)
 8000f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f28:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_TIM7_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <MX_TIM7_Init+0x64>)
 8000f32:	f004 fdc3 	bl	8005abc <HAL_TIM_Base_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f3c:	f000 fee4 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_TIM7_Init+0x64>)
 8000f4e:	f006 f929 	bl	80071a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f58:	f000 fed6 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2400039c 	.word	0x2400039c
 8000f68:	40001400 	.word	0x40001400

08000f6c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	2224      	movs	r2, #36	; 0x24
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f007 fc04 	bl	8008788 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <MX_TIM8_Init+0xac>)
 8000f8c:	4a23      	ldr	r2, [pc, #140]	; (800101c <MX_TIM8_Init+0xb0>)
 8000f8e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <MX_TIM8_Init+0xac>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <MX_TIM8_Init+0xac>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <MX_TIM8_Init+0xac>)
 8000f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <MX_TIM8_Init+0xac>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_TIM8_Init+0xac>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <MX_TIM8_Init+0xac>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <MX_TIM8_Init+0xac>)
 8000fe2:	f005 f817 	bl	8006014 <HAL_TIM_Encoder_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000fec:	f000 fe8c 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_TIM8_Init+0xac>)
 8001002:	f006 f8cf 	bl	80071a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800100c:	f000 fe7c 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	3730      	adds	r7, #48	; 0x30
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	240003e8 	.word	0x240003e8
 800101c:	40010400 	.word	0x40010400

08001020 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b098      	sub	sp, #96	; 0x60
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001026:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001032:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2234      	movs	r2, #52	; 0x34
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f007 fb9b 	bl	8008788 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <MX_TIM15_Init+0x108>)
 8001054:	4a35      	ldr	r2, [pc, #212]	; (800112c <MX_TIM15_Init+0x10c>)
 8001056:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 274;
 8001058:	4b33      	ldr	r3, [pc, #204]	; (8001128 <MX_TIM15_Init+0x108>)
 800105a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800105e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b31      	ldr	r3, [pc, #196]	; (8001128 <MX_TIM15_Init+0x108>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001066:	4b30      	ldr	r3, [pc, #192]	; (8001128 <MX_TIM15_Init+0x108>)
 8001068:	f240 32e7 	movw	r2, #999	; 0x3e7
 800106c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <MX_TIM15_Init+0x108>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <MX_TIM15_Init+0x108>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MX_TIM15_Init+0x108>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001080:	4829      	ldr	r0, [pc, #164]	; (8001128 <MX_TIM15_Init+0x108>)
 8001082:	f004 fdf9 	bl	8005c78 <HAL_TIM_PWM_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 800108c:	f000 fe3c 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001090:	2300      	movs	r3, #0
 8001092:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001098:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800109c:	4619      	mov	r1, r3
 800109e:	4822      	ldr	r0, [pc, #136]	; (8001128 <MX_TIM15_Init+0x108>)
 80010a0:	f006 f880 	bl	80071a4 <HAL_TIMEx_MasterConfigSynchronization>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 80010aa:	f000 fe2d 	bl	8001d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ae:	2360      	movs	r3, #96	; 0x60
 80010b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b6:	2300      	movs	r3, #0
 80010b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ba:	2300      	movs	r3, #0
 80010bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	4815      	ldr	r0, [pc, #84]	; (8001128 <MX_TIM15_Init+0x108>)
 80010d4:	f005 f9f2 	bl	80064bc <HAL_TIM_PWM_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 80010de:	f000 fe13 	bl	8001d08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	4807      	ldr	r0, [pc, #28]	; (8001128 <MX_TIM15_Init+0x108>)
 800110a:	f006 f8e7 	bl	80072dc <HAL_TIMEx_ConfigBreakDeadTime>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8001114:	f000 fdf8 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <MX_TIM15_Init+0x108>)
 800111a:	f001 f8b1 	bl	8002280 <HAL_TIM_MspPostInit>

}
 800111e:	bf00      	nop
 8001120:	3760      	adds	r7, #96	; 0x60
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	24000434 	.word	0x24000434
 800112c:	40014000 	.word	0x40014000

08001130 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	2224      	movs	r2, #36	; 0x24
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f007 fb22 	bl	8008788 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <MX_TIM23_Init+0xa4>)
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <MX_TIM23_Init+0xa8>)
 8001152:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <MX_TIM23_Init+0xa4>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <MX_TIM23_Init+0xa4>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 65535;
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_TIM23_Init+0xa4>)
 8001162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001166:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_TIM23_Init+0xa4>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_TIM23_Init+0xa4>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001174:	2303      	movs	r3, #3
 8001176:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800117c:	2301      	movs	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800118c:	2301      	movs	r3, #1
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	4619      	mov	r1, r3
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <MX_TIM23_Init+0xa4>)
 80011a0:	f004 ff38 	bl	8006014 <HAL_TIM_Encoder_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 80011aa:	f000 fdad 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <MX_TIM23_Init+0xa4>)
 80011bc:	f005 fff2 	bl	80071a4 <HAL_TIMEx_MasterConfigSynchronization>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 80011c6:	f000 fd9f 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	3730      	adds	r7, #48	; 0x30
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	24000480 	.word	0x24000480
 80011d8:	4000e000 	.word	0x4000e000

080011dc <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2224      	movs	r2, #36	; 0x24
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f007 facc 	bl	8008788 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_TIM24_Init+0xa4>)
 80011fc:	4a21      	ldr	r2, [pc, #132]	; (8001284 <MX_TIM24_Init+0xa8>)
 80011fe:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_TIM24_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_TIM24_Init+0xa4>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 65535;
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_TIM24_Init+0xa4>)
 800120e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001212:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_TIM24_Init+0xa4>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_TIM24_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001220:	2303      	movs	r3, #3
 8001222:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001228:	2301      	movs	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001238:	2301      	movs	r3, #1
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	4619      	mov	r1, r3
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_TIM24_Init+0xa4>)
 800124c:	f004 fee2 	bl	8006014 <HAL_TIM_Encoder_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 8001256:	f000 fd57 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	4619      	mov	r1, r3
 8001266:	4806      	ldr	r0, [pc, #24]	; (8001280 <MX_TIM24_Init+0xa4>)
 8001268:	f005 ff9c 	bl	80071a4 <HAL_TIMEx_MasterConfigSynchronization>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 8001272:	f000 fd49 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	3730      	adds	r7, #48	; 0x30
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	240004cc 	.word	0x240004cc
 8001284:	4000e400 	.word	0x4000e400

08001288 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <MX_USART3_UART_Init+0x90>)
 800128e:	4a23      	ldr	r2, [pc, #140]	; (800131c <MX_USART3_UART_Init+0x94>)
 8001290:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <MX_USART3_UART_Init+0x90>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_USART3_UART_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012d0:	4811      	ldr	r0, [pc, #68]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012d2:	f006 f8c1 	bl	8007458 <HAL_UART_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012dc:	f000 fd14 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012e4:	f007 f962 	bl	80085ac <HAL_UARTEx_SetTxFifoThreshold>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012ee:	f000 fd0b 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f2:	2100      	movs	r1, #0
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <MX_USART3_UART_Init+0x90>)
 80012f6:	f007 f997 	bl	8008628 <HAL_UARTEx_SetRxFifoThreshold>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001300:	f000 fd02 	bl	8001d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_USART3_UART_Init+0x90>)
 8001306:	f007 f918 	bl	800853a <HAL_UARTEx_DisableFifoMode>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001310:	f000 fcfa 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	24000518 	.word	0x24000518
 800131c:	40004800 	.word	0x40004800

08001320 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08e      	sub	sp, #56	; 0x38
 8001334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001346:	4b97      	ldr	r3, [pc, #604]	; (80015a4 <MX_GPIO_Init+0x274>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	4a95      	ldr	r2, [pc, #596]	; (80015a4 <MX_GPIO_Init+0x274>)
 800134e:	f043 0310 	orr.w	r3, r3, #16
 8001352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001356:	4b93      	ldr	r3, [pc, #588]	; (80015a4 <MX_GPIO_Init+0x274>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	623b      	str	r3, [r7, #32]
 8001362:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001364:	4b8f      	ldr	r3, [pc, #572]	; (80015a4 <MX_GPIO_Init+0x274>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	4a8e      	ldr	r2, [pc, #568]	; (80015a4 <MX_GPIO_Init+0x274>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001374:	4b8b      	ldr	r3, [pc, #556]	; (80015a4 <MX_GPIO_Init+0x274>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001382:	4b88      	ldr	r3, [pc, #544]	; (80015a4 <MX_GPIO_Init+0x274>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001388:	4a86      	ldr	r2, [pc, #536]	; (80015a4 <MX_GPIO_Init+0x274>)
 800138a:	f043 0320 	orr.w	r3, r3, #32
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001392:	4b84      	ldr	r3, [pc, #528]	; (80015a4 <MX_GPIO_Init+0x274>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001398:	f003 0320 	and.w	r3, r3, #32
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a0:	4b80      	ldr	r3, [pc, #512]	; (80015a4 <MX_GPIO_Init+0x274>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a6:	4a7f      	ldr	r2, [pc, #508]	; (80015a4 <MX_GPIO_Init+0x274>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b0:	4b7c      	ldr	r3, [pc, #496]	; (80015a4 <MX_GPIO_Init+0x274>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b79      	ldr	r3, [pc, #484]	; (80015a4 <MX_GPIO_Init+0x274>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	4a77      	ldr	r2, [pc, #476]	; (80015a4 <MX_GPIO_Init+0x274>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ce:	4b75      	ldr	r3, [pc, #468]	; (80015a4 <MX_GPIO_Init+0x274>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	4b71      	ldr	r3, [pc, #452]	; (80015a4 <MX_GPIO_Init+0x274>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e2:	4a70      	ldr	r2, [pc, #448]	; (80015a4 <MX_GPIO_Init+0x274>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ec:	4b6d      	ldr	r3, [pc, #436]	; (80015a4 <MX_GPIO_Init+0x274>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fa:	4b6a      	ldr	r3, [pc, #424]	; (80015a4 <MX_GPIO_Init+0x274>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001400:	4a68      	ldr	r2, [pc, #416]	; (80015a4 <MX_GPIO_Init+0x274>)
 8001402:	f043 0308 	orr.w	r3, r3, #8
 8001406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140a:	4b66      	ldr	r3, [pc, #408]	; (80015a4 <MX_GPIO_Init+0x274>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001418:	4b62      	ldr	r3, [pc, #392]	; (80015a4 <MX_GPIO_Init+0x274>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141e:	4a61      	ldr	r2, [pc, #388]	; (80015a4 <MX_GPIO_Init+0x274>)
 8001420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001428:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <MX_GPIO_Init+0x274>)
 800142a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f244 0101 	movw	r1, #16385	; 0x4001
 800143c:	485a      	ldr	r0, [pc, #360]	; (80015a8 <MX_GPIO_Init+0x278>)
 800143e:	f002 f893 	bl	8003568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001448:	4858      	ldr	r0, [pc, #352]	; (80015ac <MX_GPIO_Init+0x27c>)
 800144a:	f002 f88d 	bl	8003568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2178      	movs	r1, #120	; 0x78
 8001452:	4857      	ldr	r0, [pc, #348]	; (80015b0 <MX_GPIO_Init+0x280>)
 8001454:	f002 f888 	bl	8003568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800145e:	4855      	ldr	r0, [pc, #340]	; (80015b4 <MX_GPIO_Init+0x284>)
 8001460:	f002 f882 	bl	8003568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146a:	4853      	ldr	r0, [pc, #332]	; (80015b8 <MX_GPIO_Init+0x288>)
 800146c:	f002 f87c 	bl	8003568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2102      	movs	r1, #2
 8001474:	4851      	ldr	r0, [pc, #324]	; (80015bc <MX_GPIO_Init+0x28c>)
 8001476:	f002 f877 	bl	8003568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800147a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	4619      	mov	r1, r3
 800148e:	4849      	ldr	r0, [pc, #292]	; (80015b4 <MX_GPIO_Init+0x284>)
 8001490:	f001 fec2 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001494:	f244 0301 	movw	r3, #16385	; 0x4001
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	483e      	ldr	r0, [pc, #248]	; (80015a8 <MX_GPIO_Init+0x278>)
 80014ae:	f001 feb3 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD14 PD15 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_14|GPIO_PIN_15;
 80014b2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4838      	ldr	r0, [pc, #224]	; (80015ac <MX_GPIO_Init+0x27c>)
 80014cc:	f001 fea4 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80014d0:	2378      	movs	r3, #120	; 0x78
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	4619      	mov	r1, r3
 80014e6:	4832      	ldr	r0, [pc, #200]	; (80015b0 <MX_GPIO_Init+0x280>)
 80014e8:	f001 fe96 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	482b      	ldr	r0, [pc, #172]	; (80015b0 <MX_GPIO_Init+0x280>)
 8001502:	f001 fe89 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001506:	f44f 7300 	mov.w	r3, #512	; 0x200
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	4619      	mov	r1, r3
 800151e:	4825      	ldr	r0, [pc, #148]	; (80015b4 <MX_GPIO_Init+0x284>)
 8001520:	f001 fe7a 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	481e      	ldr	r0, [pc, #120]	; (80015b8 <MX_GPIO_Init+0x288>)
 800153e:	f001 fe6b 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	4818      	ldr	r0, [pc, #96]	; (80015b8 <MX_GPIO_Init+0x288>)
 8001558:	f001 fe5e 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800155c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800156e:	230a      	movs	r3, #10
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	480f      	ldr	r0, [pc, #60]	; (80015b8 <MX_GPIO_Init+0x288>)
 800157a:	f001 fe4d 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800157e:	2302      	movs	r3, #2
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <MX_GPIO_Init+0x28c>)
 8001596:	f001 fe3f 	bl	8003218 <HAL_GPIO_Init>

}
 800159a:	bf00      	nop
 800159c:	3738      	adds	r7, #56	; 0x38
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	58024400 	.word	0x58024400
 80015a8:	58020400 	.word	0x58020400
 80015ac:	58020c00 	.word	0x58020c00
 80015b0:	58021800 	.word	0x58021800
 80015b4:	58020800 	.word	0x58020800
 80015b8:	58020000 	.word	0x58020000
 80015bc:	58021000 	.word	0x58021000

080015c0 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
}
}
PID ?�度*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d0:	f040 836e 	bne.w	8001cb0 <HAL_TIM_PeriodElapsedCallback+0x6f0>
		enc1 = __HAL_TIM_GetCounter(&htim3);
 80015d4:	4bae      	ldr	r3, [pc, #696]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	b21a      	sxth	r2, r3
 80015dc:	4bad      	ldr	r3, [pc, #692]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80015de:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim8);
 80015e0:	4bad      	ldr	r3, [pc, #692]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	4bac      	ldr	r3, [pc, #688]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80015ea:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim23);
 80015ec:	4bac      	ldr	r3, [pc, #688]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	4bab      	ldr	r3, [pc, #684]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80015f6:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim24);
 80015f8:	4bab      	ldr	r3, [pc, #684]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	b21a      	sxth	r2, r3
 8001600:	4baa      	ldr	r3, [pc, #680]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001602:	801a      	strh	r2, [r3, #0]

		n++;
 8001604:	4baa      	ldr	r3, [pc, #680]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	4aa9      	ldr	r2, [pc, #676]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800160c:	6013      	str	r3, [r2, #0]

		PV1 = (double) enc1 / (4 * 512 * 36 * 0.001);
 800160e:	4ba1      	ldr	r3, [pc, #644]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800161c:	ed9f 5b98 	vldr	d5, [pc, #608]	; 8001880 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 8001620:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001624:	4ba3      	ldr	r3, [pc, #652]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001626:	ed83 7b00 	vstr	d7, [r3]
		PV2 = (double) enc2 / (4 * 512 * 36 * 0.001);
 800162a:	4b9c      	ldr	r3, [pc, #624]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800162c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001638:	ed9f 5b91 	vldr	d5, [pc, #580]	; 8001880 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 800163c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001640:	4b9d      	ldr	r3, [pc, #628]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001642:	ed83 7b00 	vstr	d7, [r3]
		PV3 = (double) enc3 / (4 * 512 * 36 * 0.001);
 8001646:	4b97      	ldr	r3, [pc, #604]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164c:	ee07 3a90 	vmov	s15, r3
 8001650:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001654:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8001880 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 8001658:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800165c:	4b97      	ldr	r3, [pc, #604]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800165e:	ed83 7b00 	vstr	d7, [r3]
		PV4 = (double) enc4 / (4 * 512 * 36 * 0.001);
 8001662:	4b92      	ldr	r3, [pc, #584]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001670:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8001880 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 8001674:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001678:	4b91      	ldr	r3, [pc, #580]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800167a:	ed83 7b00 	vstr	d7, [r3]

 		__HAL_TIM_SetCounter(&htim3, 0);
 800167e:	4b84      	ldr	r3, [pc, #528]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim8, 0);
 8001686:	4b84      	ldr	r3, [pc, #528]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2200      	movs	r2, #0
 800168c:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim23, 0);
 800168e:	4b84      	ldr	r3, [pc, #528]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim24, 0);
 8001696:	4b84      	ldr	r3, [pc, #528]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	; 0x24

		error1 = SP1 - PV1;
 800169e:	4b89      	ldr	r3, [pc, #548]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80016a0:	ed93 6b00 	vldr	d6, [r3]
 80016a4:	4b83      	ldr	r3, [pc, #524]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80016a6:	ed93 7b00 	vldr	d7, [r3]
 80016aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016ae:	4b86      	ldr	r3, [pc, #536]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80016b0:	ed83 7b00 	vstr	d7, [r3]
		error2 = SP2 - PV2;
 80016b4:	4b85      	ldr	r3, [pc, #532]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80016b6:	ed93 6b00 	vldr	d6, [r3]
 80016ba:	4b7f      	ldr	r3, [pc, #508]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80016bc:	ed93 7b00 	vldr	d7, [r3]
 80016c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016c4:	4b82      	ldr	r3, [pc, #520]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80016c6:	ed83 7b00 	vstr	d7, [r3]
		error3 = SP3 - PV3;
 80016ca:	4b82      	ldr	r3, [pc, #520]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80016cc:	ed93 6b00 	vldr	d6, [r3]
 80016d0:	4b7a      	ldr	r3, [pc, #488]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80016d2:	ed93 7b00 	vldr	d7, [r3]
 80016d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016da:	4b7f      	ldr	r3, [pc, #508]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80016dc:	ed83 7b00 	vstr	d7, [r3]
		error4 = SP4 - PV4;
 80016e0:	4b7e      	ldr	r3, [pc, #504]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80016e2:	ed93 6b00 	vldr	d6, [r3]
 80016e6:	4b76      	ldr	r3, [pc, #472]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80016e8:	ed93 7b00 	vldr	d7, [r3]
 80016ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016f0:	4b7b      	ldr	r3, [pc, #492]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80016f2:	ed83 7b00 	vstr	d7, [r3]

		errorsum1 += error1;
 80016f6:	4b7b      	ldr	r3, [pc, #492]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016f8:	ed93 6b00 	vldr	d6, [r3]
 80016fc:	4b72      	ldr	r3, [pc, #456]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80016fe:	ed93 7b00 	vldr	d7, [r3]
 8001702:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001706:	4b77      	ldr	r3, [pc, #476]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001708:	ed83 7b00 	vstr	d7, [r3]
		errorsum2 += error2;
 800170c:	4b76      	ldr	r3, [pc, #472]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800170e:	ed93 6b00 	vldr	d6, [r3]
 8001712:	4b6f      	ldr	r3, [pc, #444]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001714:	ed93 7b00 	vldr	d7, [r3]
 8001718:	ee36 7b07 	vadd.f64	d7, d6, d7
 800171c:	4b72      	ldr	r3, [pc, #456]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800171e:	ed83 7b00 	vstr	d7, [r3]
		errorsum3 += error3;
 8001722:	4b72      	ldr	r3, [pc, #456]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001724:	ed93 6b00 	vldr	d6, [r3]
 8001728:	4b6b      	ldr	r3, [pc, #428]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800172a:	ed93 7b00 	vldr	d7, [r3]
 800172e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001732:	4b6e      	ldr	r3, [pc, #440]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001734:	ed83 7b00 	vstr	d7, [r3]
		errorsum4 += error4;
 8001738:	4b6d      	ldr	r3, [pc, #436]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800173a:	ed93 6b00 	vldr	d6, [r3]
 800173e:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001740:	ed93 7b00 	vldr	d7, [r3]
 8001744:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001748:	4b69      	ldr	r3, [pc, #420]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800174a:	ed83 7b00 	vstr	d7, [r3]

		ut1 = Kp1 * error1 + Ki1 * errorsum1 * 0.001;
 800174e:	4b69      	ldr	r3, [pc, #420]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001750:	ed93 6b00 	vldr	d6, [r3]
 8001754:	4b5c      	ldr	r3, [pc, #368]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001756:	ed93 7b00 	vldr	d7, [r3]
 800175a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800175e:	4b66      	ldr	r3, [pc, #408]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001760:	ed93 5b00 	vldr	d5, [r3]
 8001764:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001766:	ed93 7b00 	vldr	d7, [r3]
 800176a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800176e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001888 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8001772:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001776:	ee36 7b07 	vadd.f64	d7, d6, d7
 800177a:	4b60      	ldr	r3, [pc, #384]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800177c:	ed83 7b00 	vstr	d7, [r3]
		ut2 = Kp2 * error2 + Ki2 * errorsum2 * 0.001;
 8001780:	4b5f      	ldr	r3, [pc, #380]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001782:	ed93 6b00 	vldr	d6, [r3]
 8001786:	4b52      	ldr	r3, [pc, #328]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001788:	ed93 7b00 	vldr	d7, [r3]
 800178c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001790:	4b5c      	ldr	r3, [pc, #368]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001792:	ed93 5b00 	vldr	d5, [r3]
 8001796:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001798:	ed93 7b00 	vldr	d7, [r3]
 800179c:	ee25 7b07 	vmul.f64	d7, d5, d7
 80017a0:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8001888 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80017a4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80017a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017ac:	4b56      	ldr	r3, [pc, #344]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80017ae:	ed83 7b00 	vstr	d7, [r3]
		ut3 = Kp3 * error3 + Ki3 * errorsum3 * 0.001;
 80017b2:	4b56      	ldr	r3, [pc, #344]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017b4:	ed93 6b00 	vldr	d6, [r3]
 80017b8:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80017ba:	ed93 7b00 	vldr	d7, [r3]
 80017be:	ee26 6b07 	vmul.f64	d6, d6, d7
 80017c2:	4b53      	ldr	r3, [pc, #332]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80017c4:	ed93 5b00 	vldr	d5, [r3]
 80017c8:	4b48      	ldr	r3, [pc, #288]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80017ca:	ed93 7b00 	vldr	d7, [r3]
 80017ce:	ee25 7b07 	vmul.f64	d7, d5, d7
 80017d2:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8001888 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80017d6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80017da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017de:	4b4d      	ldr	r3, [pc, #308]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80017e0:	ed83 7b00 	vstr	d7, [r3]
		ut4 = Kp4 * error4 + Ki4 * errorsum4 * 0.001;
 80017e4:	4b4c      	ldr	r3, [pc, #304]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80017e6:	ed93 6b00 	vldr	d6, [r3]
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80017ec:	ed93 7b00 	vldr	d7, [r3]
 80017f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80017f4:	4b49      	ldr	r3, [pc, #292]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80017f6:	ed93 5b00 	vldr	d5, [r3]
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80017fc:	ed93 7b00 	vldr	d7, [r3]
 8001800:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001804:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8001888 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8001808:	ee27 7b05 	vmul.f64	d7, d7, d5
 800180c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001812:	ed83 7b00 	vstr	d7, [r3]

		if(ut1 > 1){
 8001816:	4b39      	ldr	r3, [pc, #228]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001818:	ed93 7b00 	vldr	d7, [r3]
 800181c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001820:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001828:	dd06      	ble.n	8001838 <HAL_TIM_PeriodElapsedCallback+0x278>
			ut1 = 1;
 800182a:	4934      	ldr	r1, [pc, #208]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	4b3c      	ldr	r3, [pc, #240]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001832:	e9c1 2300 	strd	r2, r3, [r1]
 8001836:	e00f      	b.n	8001858 <HAL_TIM_PeriodElapsedCallback+0x298>
		}else if(ut1 < -1){
 8001838:	4b30      	ldr	r3, [pc, #192]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800183a:	ed93 7b00 	vldr	d7, [r3]
 800183e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001842:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	d505      	bpl.n	8001858 <HAL_TIM_PeriodElapsedCallback+0x298>
			ut1 = -1;
 800184c:	492b      	ldr	r1, [pc, #172]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b35      	ldr	r3, [pc, #212]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001854:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut2 > 1){
 8001858:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800185a:	ed93 7b00 	vldr	d7, [r3]
 800185e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001862:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	dd5f      	ble.n	800192c <HAL_TIM_PeriodElapsedCallback+0x36c>
			ut2 = 1;
 800186c:	4926      	ldr	r1, [pc, #152]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001874:	e9c1 2300 	strd	r2, r3, [r1]
 8001878:	e068      	b.n	800194c <HAL_TIM_PeriodElapsedCallback+0x38c>
 800187a:	bf00      	nop
 800187c:	f3af 8000 	nop.w
 8001880:	8d4fdf3c 	.word	0x8d4fdf3c
 8001884:	40526e97 	.word	0x40526e97
 8001888:	d2f1a9fc 	.word	0xd2f1a9fc
 800188c:	3f50624d 	.word	0x3f50624d
 8001890:	2400026c 	.word	0x2400026c
 8001894:	24000608 	.word	0x24000608
 8001898:	240003e8 	.word	0x240003e8
 800189c:	2400060a 	.word	0x2400060a
 80018a0:	24000480 	.word	0x24000480
 80018a4:	2400060c 	.word	0x2400060c
 80018a8:	240004cc 	.word	0x240004cc
 80018ac:	2400060e 	.word	0x2400060e
 80018b0:	240006b0 	.word	0x240006b0
 80018b4:	240005a8 	.word	0x240005a8
 80018b8:	240005b0 	.word	0x240005b0
 80018bc:	240005b8 	.word	0x240005b8
 80018c0:	240005c0 	.word	0x240005c0
 80018c4:	240005c8 	.word	0x240005c8
 80018c8:	240005e8 	.word	0x240005e8
 80018cc:	240005d0 	.word	0x240005d0
 80018d0:	240005f0 	.word	0x240005f0
 80018d4:	240005d8 	.word	0x240005d8
 80018d8:	240005f8 	.word	0x240005f8
 80018dc:	240005e0 	.word	0x240005e0
 80018e0:	24000600 	.word	0x24000600
 80018e4:	24000690 	.word	0x24000690
 80018e8:	24000698 	.word	0x24000698
 80018ec:	240006a0 	.word	0x240006a0
 80018f0:	240006a8 	.word	0x240006a8
 80018f4:	24000610 	.word	0x24000610
 80018f8:	24000630 	.word	0x24000630
 80018fc:	24000650 	.word	0x24000650
 8001900:	24000618 	.word	0x24000618
 8001904:	24000638 	.word	0x24000638
 8001908:	24000658 	.word	0x24000658
 800190c:	24000620 	.word	0x24000620
 8001910:	24000640 	.word	0x24000640
 8001914:	24000660 	.word	0x24000660
 8001918:	24000628 	.word	0x24000628
 800191c:	24000648 	.word	0x24000648
 8001920:	24000668 	.word	0x24000668
 8001924:	3ff00000 	.word	0x3ff00000
 8001928:	bff00000 	.word	0xbff00000
		}else if(ut2 < -1){
 800192c:	4b94      	ldr	r3, [pc, #592]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800192e:	ed93 7b00 	vldr	d7, [r3]
 8001932:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001936:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193e:	d505      	bpl.n	800194c <HAL_TIM_PeriodElapsedCallback+0x38c>
			ut2 = -1;
 8001940:	498f      	ldr	r1, [pc, #572]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	4b8f      	ldr	r3, [pc, #572]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001948:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut3 > 1){
 800194c:	4b8e      	ldr	r3, [pc, #568]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800194e:	ed93 7b00 	vldr	d7, [r3]
 8001952:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001956:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	dd06      	ble.n	800196e <HAL_TIM_PeriodElapsedCallback+0x3ae>
			ut3 = 1;
 8001960:	4989      	ldr	r1, [pc, #548]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	4b89      	ldr	r3, [pc, #548]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001968:	e9c1 2300 	strd	r2, r3, [r1]
 800196c:	e00f      	b.n	800198e <HAL_TIM_PeriodElapsedCallback+0x3ce>
		}else if(ut3 < -1){
 800196e:	4b86      	ldr	r3, [pc, #536]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001970:	ed93 7b00 	vldr	d7, [r3]
 8001974:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001978:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001980:	d505      	bpl.n	800198e <HAL_TIM_PeriodElapsedCallback+0x3ce>
			ut3 = -1;
 8001982:	4981      	ldr	r1, [pc, #516]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	4b7e      	ldr	r3, [pc, #504]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800198a:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut4 > 1){
 800198e:	4b80      	ldr	r3, [pc, #512]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001990:	ed93 7b00 	vldr	d7, [r3]
 8001994:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001998:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a0:	dd06      	ble.n	80019b0 <HAL_TIM_PeriodElapsedCallback+0x3f0>
			ut4 = 1;
 80019a2:	497b      	ldr	r1, [pc, #492]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	4b78      	ldr	r3, [pc, #480]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80019aa:	e9c1 2300 	strd	r2, r3, [r1]
 80019ae:	e00f      	b.n	80019d0 <HAL_TIM_PeriodElapsedCallback+0x410>
		}else if(ut4 < -1){
 80019b0:	4b77      	ldr	r3, [pc, #476]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80019b2:	ed93 7b00 	vldr	d7, [r3]
 80019b6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80019ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	d505      	bpl.n	80019d0 <HAL_TIM_PeriodElapsedCallback+0x410>
			ut4 = -1;
 80019c4:	4972      	ldr	r1, [pc, #456]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	4b6e      	ldr	r3, [pc, #440]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80019cc:	e9c1 2300 	strd	r2, r3, [r1]
		}


		if(ut1 > 0){
 80019d0:	4b70      	ldr	r3, [pc, #448]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80019d2:	ed93 7b00 	vldr	d7, [r3]
 80019d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80019da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019de:	dd0a      	ble.n	80019f6 <HAL_TIM_PeriodElapsedCallback+0x436>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 80019e0:	2201      	movs	r2, #1
 80019e2:	2120      	movs	r1, #32
 80019e4:	486c      	ldr	r0, [pc, #432]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80019e6:	f001 fdbf 	bl	8003568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2140      	movs	r1, #64	; 0x40
 80019ee:	486a      	ldr	r0, [pc, #424]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80019f0:	f001 fdba 	bl	8003568 <HAL_GPIO_WritePin>
 80019f4:	e024      	b.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x480>
		}else if(ut1 < 0){
 80019f6:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80019f8:	ed93 7b00 	vldr	d7, [r3]
 80019fc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a04:	d50a      	bpl.n	8001a1c <HAL_TIM_PeriodElapsedCallback+0x45c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2120      	movs	r1, #32
 8001a0a:	4863      	ldr	r0, [pc, #396]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001a0c:	f001 fdac 	bl	8003568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001a10:	2201      	movs	r2, #1
 8001a12:	2140      	movs	r1, #64	; 0x40
 8001a14:	4860      	ldr	r0, [pc, #384]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001a16:	f001 fda7 	bl	8003568 <HAL_GPIO_WritePin>
 8001a1a:	e011      	b.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x480>
		}else if(ut1 == 0){
 8001a1c:	4b5d      	ldr	r3, [pc, #372]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001a1e:	ed93 7b00 	vldr	d7, [r3]
 8001a22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	d109      	bne.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x480>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2120      	movs	r1, #32
 8001a30:	4859      	ldr	r0, [pc, #356]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001a32:	f001 fd99 	bl	8003568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2140      	movs	r1, #64	; 0x40
 8001a3a:	4857      	ldr	r0, [pc, #348]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001a3c:	f001 fd94 	bl	8003568 <HAL_GPIO_WritePin>
		}

		if(ut2 > 0){
 8001a40:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001a42:	ed93 7b00 	vldr	d7, [r3]
 8001a46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4e:	dd0a      	ble.n	8001a66 <HAL_TIM_PeriodElapsedCallback+0x4a6>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2110      	movs	r1, #16
 8001a54:	4850      	ldr	r0, [pc, #320]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001a56:	f001 fd87 	bl	8003568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2108      	movs	r1, #8
 8001a5e:	484e      	ldr	r0, [pc, #312]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001a60:	f001 fd82 	bl	8003568 <HAL_GPIO_WritePin>
 8001a64:	e024      	b.n	8001ab0 <HAL_TIM_PeriodElapsedCallback+0x4f0>
		}else if(ut2 < 0){
 8001a66:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001a68:	ed93 7b00 	vldr	d7, [r3]
 8001a6c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a74:	d50a      	bpl.n	8001a8c <HAL_TIM_PeriodElapsedCallback+0x4cc>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2110      	movs	r1, #16
 8001a7a:	4847      	ldr	r0, [pc, #284]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001a7c:	f001 fd74 	bl	8003568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2108      	movs	r1, #8
 8001a84:	4844      	ldr	r0, [pc, #272]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001a86:	f001 fd6f 	bl	8003568 <HAL_GPIO_WritePin>
 8001a8a:	e011      	b.n	8001ab0 <HAL_TIM_PeriodElapsedCallback+0x4f0>
		}else if(ut2 == 0){
 8001a8c:	4b3c      	ldr	r3, [pc, #240]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001a8e:	ed93 7b00 	vldr	d7, [r3]
 8001a92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	d109      	bne.n	8001ab0 <HAL_TIM_PeriodElapsedCallback+0x4f0>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	483d      	ldr	r0, [pc, #244]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001aa2:	f001 fd61 	bl	8003568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2108      	movs	r1, #8
 8001aaa:	483b      	ldr	r0, [pc, #236]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001aac:	f001 fd5c 	bl	8003568 <HAL_GPIO_WritePin>
		}

		if(ut3 > 0){
 8001ab0:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001ab2:	ed93 7b00 	vldr	d7, [r3]
 8001ab6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	dd0c      	ble.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x51a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ac6:	4835      	ldr	r0, [pc, #212]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001ac8:	f001 fd4e 	bl	8003568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad2:	4832      	ldr	r0, [pc, #200]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001ad4:	f001 fd48 	bl	8003568 <HAL_GPIO_WritePin>
 8001ad8:	e028      	b.n	8001b2c <HAL_TIM_PeriodElapsedCallback+0x56c>
		}else if(ut3 < 0){
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001adc:	ed93 7b00 	vldr	d7, [r3]
 8001ae0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	d50c      	bpl.n	8001b04 <HAL_TIM_PeriodElapsedCallback+0x544>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001af0:	482a      	ldr	r0, [pc, #168]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001af2:	f001 fd39 	bl	8003568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001af6:	2201      	movs	r2, #1
 8001af8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001afc:	4827      	ldr	r0, [pc, #156]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001afe:	f001 fd33 	bl	8003568 <HAL_GPIO_WritePin>
 8001b02:	e013      	b.n	8001b2c <HAL_TIM_PeriodElapsedCallback+0x56c>
		}else if(ut3 == 0){
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001b06:	ed93 7b00 	vldr	d7, [r3]
 8001b0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b12:	d10b      	bne.n	8001b2c <HAL_TIM_PeriodElapsedCallback+0x56c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b1a:	4820      	ldr	r0, [pc, #128]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001b1c:	f001 fd24 	bl	8003568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b26:	481d      	ldr	r0, [pc, #116]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001b28:	f001 fd1e 	bl	8003568 <HAL_GPIO_WritePin>
		}

		if(ut4 > 0){
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001b2e:	ed93 7b00 	vldr	d7, [r3]
 8001b32:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3a:	dd0c      	ble.n	8001b56 <HAL_TIM_PeriodElapsedCallback+0x596>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b42:	4817      	ldr	r0, [pc, #92]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001b44:	f001 fd10 	bl	8003568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b4e:	4815      	ldr	r0, [pc, #84]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001b50:	f001 fd0a 	bl	8003568 <HAL_GPIO_WritePin>
 8001b54:	e03c      	b.n	8001bd0 <HAL_TIM_PeriodElapsedCallback+0x610>
		}else if(ut4 < 0){
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001b58:	ed93 7b00 	vldr	d7, [r3]
 8001b5c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b64:	d520      	bpl.n	8001ba8 <HAL_TIM_PeriodElapsedCallback+0x5e8>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001b6e:	f001 fcfb 	bl	8003568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001b72:	2201      	movs	r2, #1
 8001b74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b78:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001b7a:	f001 fcf5 	bl	8003568 <HAL_GPIO_WritePin>
 8001b7e:	e027      	b.n	8001bd0 <HAL_TIM_PeriodElapsedCallback+0x610>
 8001b80:	24000658 	.word	0x24000658
 8001b84:	bff00000 	.word	0xbff00000
 8001b88:	24000660 	.word	0x24000660
 8001b8c:	3ff00000 	.word	0x3ff00000
 8001b90:	24000668 	.word	0x24000668
 8001b94:	24000650 	.word	0x24000650
 8001b98:	58021800 	.word	0x58021800
 8001b9c:	58020c00 	.word	0x58020c00
 8001ba0:	58020000 	.word	0x58020000
 8001ba4:	58020800 	.word	0x58020800
		}else if(ut4 == 0){
 8001ba8:	4b45      	ldr	r3, [pc, #276]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8001baa:	ed93 7b00 	vldr	d7, [r3]
 8001bae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_TIM_PeriodElapsedCallback+0x610>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bbe:	4841      	ldr	r0, [pc, #260]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8001bc0:	f001 fcd2 	bl	8003568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bca:	483f      	ldr	r0, [pc, #252]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8001bcc:	f001 fccc 	bl	8003568 <HAL_GPIO_WritePin>
		}


		ut1 = fabs(ut1);
 8001bd0:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8001bd2:	ed93 7b00 	vldr	d7, [r3]
 8001bd6:	eeb0 7bc7 	vabs.f64	d7, d7
 8001bda:	4b3c      	ldr	r3, [pc, #240]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8001bdc:	ed83 7b00 	vstr	d7, [r3]
		ut2 = fabs(ut2);
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8001be2:	ed93 7b00 	vldr	d7, [r3]
 8001be6:	eeb0 7bc7 	vabs.f64	d7, d7
 8001bea:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8001bec:	ed83 7b00 	vstr	d7, [r3]
		ut3 = fabs(ut3);
 8001bf0:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8001bf2:	ed93 7b00 	vldr	d7, [r3]
 8001bf6:	eeb0 7bc7 	vabs.f64	d7, d7
 8001bfa:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8001bfc:	ed83 7b00 	vstr	d7, [r3]
		ut4 = fabs(ut4);
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8001c02:	ed93 7b00 	vldr	d7, [r3]
 8001c06:	eeb0 7bc7 	vabs.f64	d7, d7
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8001c0c:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ut1 * 1000);
 8001c10:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8001c12:	ed93 7b00 	vldr	d7, [r3]
 8001c16:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8001cb8 <HAL_TIM_PeriodElapsedCallback+0x6f8>
 8001c1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c26:	ee17 2a90 	vmov	r2, s15
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ut2 * 1000);
 8001c2c:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8001c2e:	ed93 7b00 	vldr	d7, [r3]
 8001c32:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001cb8 <HAL_TIM_PeriodElapsedCallback+0x6f8>
 8001c36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c3a:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c42:	ee17 2a90 	vmov	r2, s15
 8001c46:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ut3 * 1000);
 8001c48:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8001c4a:	ed93 7b00 	vldr	d7, [r3]
 8001c4e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001cb8 <HAL_TIM_PeriodElapsedCallback+0x6f8>
 8001c52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c5e:	ee17 2a90 	vmov	r2, s15
 8001c62:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ut4 * 1000);
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8001c66:	ed93 7b00 	vldr	d7, [r3]
 8001c6a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001cb8 <HAL_TIM_PeriodElapsedCallback+0x6f8>
 8001c6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c72:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c7a:	ee17 2a90 	vmov	r2, s15
 8001c7e:	635a      	str	r2, [r3, #52]	; 0x34

		error_last1 = error1;
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	4919      	ldr	r1, [pc, #100]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8001c88:	e9c1 2300 	strd	r2, r3, [r1]
		error_last2 = error2;
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8001c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c92:	4918      	ldr	r1, [pc, #96]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001c94:	e9c1 2300 	strd	r2, r3, [r1]
		error_last3 = error3;
 8001c98:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	4917      	ldr	r1, [pc, #92]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8001ca0:	e9c1 2300 	strd	r2, r3, [r1]
		error_last4 = error4;
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	4916      	ldr	r1, [pc, #88]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x744>)
 8001cac:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	00000000 	.word	0x00000000
 8001cbc:	408f4000 	.word	0x408f4000
 8001cc0:	24000668 	.word	0x24000668
 8001cc4:	58020000 	.word	0x58020000
 8001cc8:	58020800 	.word	0x58020800
 8001ccc:	24000650 	.word	0x24000650
 8001cd0:	24000658 	.word	0x24000658
 8001cd4:	24000660 	.word	0x24000660
 8001cd8:	240002b8 	.word	0x240002b8
 8001cdc:	24000304 	.word	0x24000304
 8001ce0:	24000434 	.word	0x24000434
 8001ce4:	240001d4 	.word	0x240001d4
 8001ce8:	240005e8 	.word	0x240005e8
 8001cec:	24000670 	.word	0x24000670
 8001cf0:	240005f0 	.word	0x240005f0
 8001cf4:	24000678 	.word	0x24000678
 8001cf8:	240005f8 	.word	0x240005f8
 8001cfc:	24000680 	.word	0x24000680
 8001d00:	24000600 	.word	0x24000600
 8001d04:	24000688 	.word	0x24000688

08001d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d0c:	b672      	cpsid	i
}
 8001d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <Error_Handler+0x8>
	...

08001d14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_MspInit+0x30>)
 8001d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d20:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <HAL_MspInit+0x30>)
 8001d22:	f043 0302 	orr.w	r3, r3, #2
 8001d26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_MspInit+0x30>)
 8001d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	58024400 	.word	0x58024400

08001d48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08e      	sub	sp, #56	; 0x38
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a59      	ldr	r2, [pc, #356]	; (8001ecc <HAL_ETH_MspInit+0x184>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	f040 80ab 	bne.w	8001ec2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001d6c:	4b58      	ldr	r3, [pc, #352]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001d6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d72:	4a57      	ldr	r2, [pc, #348]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d7c:	4b54      	ldr	r3, [pc, #336]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001d7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d86:	623b      	str	r3, [r7, #32]
 8001d88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001d8a:	4b51      	ldr	r3, [pc, #324]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001d8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d90:	4a4f      	ldr	r2, [pc, #316]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d9a:	4b4d      	ldr	r3, [pc, #308]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001d9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001da8:	4b49      	ldr	r3, [pc, #292]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001daa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dae:	4a48      	ldr	r2, [pc, #288]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001db8:	4b45      	ldr	r3, [pc, #276]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001dba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	4b42      	ldr	r3, [pc, #264]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dcc:	4a40      	ldr	r2, [pc, #256]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd6:	4b3e      	ldr	r3, [pc, #248]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de4:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dea:	4a39      	ldr	r2, [pc, #228]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e08:	4a31      	ldr	r2, [pc, #196]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e12:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e20:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e26:	4a2a      	ldr	r2, [pc, #168]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_ETH_MspInit+0x188>)
 8001e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e3e:	2332      	movs	r3, #50	; 0x32
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e4e:	230b      	movs	r3, #11
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e56:	4619      	mov	r1, r3
 8001e58:	481e      	ldr	r0, [pc, #120]	; (8001ed4 <HAL_ETH_MspInit+0x18c>)
 8001e5a:	f001 f9dd 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e5e:	2386      	movs	r3, #134	; 0x86
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e6e:	230b      	movs	r3, #11
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e76:	4619      	mov	r1, r3
 8001e78:	4817      	ldr	r0, [pc, #92]	; (8001ed8 <HAL_ETH_MspInit+0x190>)
 8001e7a:	f001 f9cd 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e90:	230b      	movs	r3, #11
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4810      	ldr	r0, [pc, #64]	; (8001edc <HAL_ETH_MspInit+0x194>)
 8001e9c:	f001 f9bc 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001ea0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eb2:	230b      	movs	r3, #11
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4808      	ldr	r0, [pc, #32]	; (8001ee0 <HAL_ETH_MspInit+0x198>)
 8001ebe:	f001 f9ab 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3738      	adds	r7, #56	; 0x38
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40028000 	.word	0x40028000
 8001ed0:	58024400 	.word	0x58024400
 8001ed4:	58020800 	.word	0x58020800
 8001ed8:	58020000 	.word	0x58020000
 8001edc:	58020400 	.word	0x58020400
 8001ee0:	58021800 	.word	0x58021800

08001ee4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <HAL_TIM_PWM_MspInit+0xbc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d10f      	bne.n	8001f16 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001efc:	4a29      	ldr	r2, [pc, #164]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f06:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001f14:	e03d      	b.n	8001f92 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a23      	ldr	r2, [pc, #140]	; (8001fa8 <HAL_TIM_PWM_MspInit+0xc4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d10f      	bne.n	8001f40 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f20:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f26:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f30:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
}
 8001f3e:	e028      	b.n	8001f92 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a19      	ldr	r2, [pc, #100]	; (8001fac <HAL_TIM_PWM_MspInit+0xc8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d10f      	bne.n	8001f6a <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f50:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f52:	f043 0308 	orr.w	r3, r3, #8
 8001f56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	e013      	b.n	8001f92 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM15)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a10      	ldr	r2, [pc, #64]	; (8001fb0 <HAL_TIM_PWM_MspInit+0xcc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d10e      	bne.n	8001f92 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
}
 8001f92:	bf00      	nop
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	58024400 	.word	0x58024400
 8001fa8:	40000800 	.word	0x40000800
 8001fac:	40000c00 	.word	0x40000c00
 8001fb0:	40014000 	.word	0x40014000

08001fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc4:	d117      	bne.n	8001ff6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fc6:	4b22      	ldr	r3, [pc, #136]	; (8002050 <HAL_TIM_Base_MspInit+0x9c>)
 8001fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fcc:	4a20      	ldr	r2, [pc, #128]	; (8002050 <HAL_TIM_Base_MspInit+0x9c>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <HAL_TIM_Base_MspInit+0x9c>)
 8001fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	201c      	movs	r0, #28
 8001fea:	f000 fcbc 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fee:	201c      	movs	r0, #28
 8001ff0:	f000 fcd3 	bl	800299a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001ff4:	e028      	b.n	8002048 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM6)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a16      	ldr	r2, [pc, #88]	; (8002054 <HAL_TIM_Base_MspInit+0xa0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d10f      	bne.n	8002020 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_TIM_Base_MspInit+0x9c>)
 8002002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <HAL_TIM_Base_MspInit+0x9c>)
 8002008:	f043 0310 	orr.w	r3, r3, #16
 800200c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_TIM_Base_MspInit+0x9c>)
 8002012:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]
}
 800201e:	e013      	b.n	8002048 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM7)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0c      	ldr	r2, [pc, #48]	; (8002058 <HAL_TIM_Base_MspInit+0xa4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d10e      	bne.n	8002048 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_TIM_Base_MspInit+0x9c>)
 800202c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002030:	4a07      	ldr	r2, [pc, #28]	; (8002050 <HAL_TIM_Base_MspInit+0x9c>)
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_TIM_Base_MspInit+0x9c>)
 800203c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002040:	f003 0320 	and.w	r3, r3, #32
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	bf00      	nop
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	58024400 	.word	0x58024400
 8002054:	40001000 	.word	0x40001000
 8002058:	40001400 	.word	0x40001400

0800205c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b090      	sub	sp, #64	; 0x40
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a78      	ldr	r2, [pc, #480]	; (800225c <HAL_TIM_Encoder_MspInit+0x200>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d14d      	bne.n	800211a <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800207e:	4b78      	ldr	r3, [pc, #480]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 8002080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002084:	4a76      	ldr	r2, [pc, #472]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 8002086:	f043 0302 	orr.w	r3, r3, #2
 800208a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800208e:	4b74      	ldr	r3, [pc, #464]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 8002090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	4b70      	ldr	r3, [pc, #448]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 800209e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a2:	4a6f      	ldr	r2, [pc, #444]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ac:	4b6c      	ldr	r3, [pc, #432]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 80020ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	4b69      	ldr	r3, [pc, #420]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 80020bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c0:	4a67      	ldr	r2, [pc, #412]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ca:	4b65      	ldr	r3, [pc, #404]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 80020cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	623b      	str	r3, [r7, #32]
 80020d6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020d8:	2340      	movs	r3, #64	; 0x40
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020e8:	2302      	movs	r3, #2
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020f0:	4619      	mov	r1, r3
 80020f2:	485c      	ldr	r0, [pc, #368]	; (8002264 <HAL_TIM_Encoder_MspInit+0x208>)
 80020f4:	f001 f890 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020f8:	2320      	movs	r3, #32
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002108:	2302      	movs	r3, #2
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002110:	4619      	mov	r1, r3
 8002112:	4855      	ldr	r0, [pc, #340]	; (8002268 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002114:	f001 f880 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8002118:	e09b      	b.n	8002252 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a53      	ldr	r2, [pc, #332]	; (800226c <HAL_TIM_Encoder_MspInit+0x210>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d12e      	bne.n	8002182 <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002124:	4b4e      	ldr	r3, [pc, #312]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 8002126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800212a:	4a4d      	ldr	r2, [pc, #308]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002134:	4b4a      	ldr	r3, [pc, #296]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 8002136:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002142:	4b47      	ldr	r3, [pc, #284]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 8002144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002148:	4a45      	ldr	r2, [pc, #276]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002152:	4b43      	ldr	r3, [pc, #268]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002160:	23c0      	movs	r3, #192	; 0xc0
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002170:	2303      	movs	r3, #3
 8002172:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002178:	4619      	mov	r1, r3
 800217a:	483d      	ldr	r0, [pc, #244]	; (8002270 <HAL_TIM_Encoder_MspInit+0x214>)
 800217c:	f001 f84c 	bl	8003218 <HAL_GPIO_Init>
}
 8002180:	e067      	b.n	8002252 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM23)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a3b      	ldr	r2, [pc, #236]	; (8002274 <HAL_TIM_Encoder_MspInit+0x218>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d12e      	bne.n	80021ea <HAL_TIM_Encoder_MspInit+0x18e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800218c:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 800218e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002192:	4a33      	ldr	r2, [pc, #204]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 8002194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002198:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800219c:	4b30      	ldr	r3, [pc, #192]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 800219e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80021a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	4a2b      	ldr	r2, [pc, #172]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 80021b2:	f043 0320 	orr.w	r3, r3, #32
 80021b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ba:	4b29      	ldr	r3, [pc, #164]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 80021bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021c8:	2303      	movs	r3, #3
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80021d8:	230d      	movs	r3, #13
 80021da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e0:	4619      	mov	r1, r3
 80021e2:	4825      	ldr	r0, [pc, #148]	; (8002278 <HAL_TIM_Encoder_MspInit+0x21c>)
 80021e4:	f001 f818 	bl	8003218 <HAL_GPIO_Init>
}
 80021e8:	e033      	b.n	8002252 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM24)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a23      	ldr	r2, [pc, #140]	; (800227c <HAL_TIM_Encoder_MspInit+0x220>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d12e      	bne.n	8002252 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80021f4:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 80021f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80021fa:	4a19      	ldr	r2, [pc, #100]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 80021fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002200:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002204:	4b16      	ldr	r3, [pc, #88]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 8002206:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 8002214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 800221a:	f043 0320 	orr.w	r3, r3, #32
 800221e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_TIM_Encoder_MspInit+0x204>)
 8002224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002230:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8002242:	230e      	movs	r3, #14
 8002244:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800224a:	4619      	mov	r1, r3
 800224c:	480a      	ldr	r0, [pc, #40]	; (8002278 <HAL_TIM_Encoder_MspInit+0x21c>)
 800224e:	f000 ffe3 	bl	8003218 <HAL_GPIO_Init>
}
 8002252:	bf00      	nop
 8002254:	3740      	adds	r7, #64	; 0x40
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40000400 	.word	0x40000400
 8002260:	58024400 	.word	0x58024400
 8002264:	58020000 	.word	0x58020000
 8002268:	58020400 	.word	0x58020400
 800226c:	40010400 	.word	0x40010400
 8002270:	58020800 	.word	0x58020800
 8002274:	4000e000 	.word	0x4000e000
 8002278:	58021400 	.word	0x58021400
 800227c:	4000e400 	.word	0x4000e400

08002280 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	; 0x30
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 031c 	add.w	r3, r7, #28
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a4b      	ldr	r2, [pc, #300]	; (80023cc <HAL_TIM_MspPostInit+0x14c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d120      	bne.n	80022e4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022a2:	4b4b      	ldr	r3, [pc, #300]	; (80023d0 <HAL_TIM_MspPostInit+0x150>)
 80022a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a8:	4a49      	ldr	r2, [pc, #292]	; (80023d0 <HAL_TIM_MspPostInit+0x150>)
 80022aa:	f043 0310 	orr.w	r3, r3, #16
 80022ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022b2:	4b47      	ldr	r3, [pc, #284]	; (80023d0 <HAL_TIM_MspPostInit+0x150>)
 80022b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	483d      	ldr	r0, [pc, #244]	; (80023d4 <HAL_TIM_MspPostInit+0x154>)
 80022de:	f000 ff9b 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80022e2:	e06e      	b.n	80023c2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a3b      	ldr	r2, [pc, #236]	; (80023d8 <HAL_TIM_MspPostInit+0x158>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d120      	bne.n	8002330 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ee:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <HAL_TIM_MspPostInit+0x150>)
 80022f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f4:	4a36      	ldr	r2, [pc, #216]	; (80023d0 <HAL_TIM_MspPostInit+0x150>)
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022fe:	4b34      	ldr	r3, [pc, #208]	; (80023d0 <HAL_TIM_MspPostInit+0x150>)
 8002300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800230c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800231e:	2302      	movs	r3, #2
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002322:	f107 031c 	add.w	r3, r7, #28
 8002326:	4619      	mov	r1, r3
 8002328:	482c      	ldr	r0, [pc, #176]	; (80023dc <HAL_TIM_MspPostInit+0x15c>)
 800232a:	f000 ff75 	bl	8003218 <HAL_GPIO_Init>
}
 800232e:	e048      	b.n	80023c2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2a      	ldr	r2, [pc, #168]	; (80023e0 <HAL_TIM_MspPostInit+0x160>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d11f      	bne.n	800237a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <HAL_TIM_MspPostInit+0x150>)
 800233c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002340:	4a23      	ldr	r2, [pc, #140]	; (80023d0 <HAL_TIM_MspPostInit+0x150>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800234a:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <HAL_TIM_MspPostInit+0x150>)
 800234c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002358:	2301      	movs	r3, #1
 800235a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002368:	2302      	movs	r3, #2
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	4619      	mov	r1, r3
 8002372:	481c      	ldr	r0, [pc, #112]	; (80023e4 <HAL_TIM_MspPostInit+0x164>)
 8002374:	f000 ff50 	bl	8003218 <HAL_GPIO_Init>
}
 8002378:	e023      	b.n	80023c2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a1a      	ldr	r2, [pc, #104]	; (80023e8 <HAL_TIM_MspPostInit+0x168>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d11e      	bne.n	80023c2 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_TIM_MspPostInit+0x150>)
 8002386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238a:	4a11      	ldr	r2, [pc, #68]	; (80023d0 <HAL_TIM_MspPostInit+0x150>)
 800238c:	f043 0310 	orr.w	r3, r3, #16
 8002390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_TIM_MspPostInit+0x150>)
 8002396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023a2:	2320      	movs	r3, #32
 80023a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80023b2:	2304      	movs	r3, #4
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	4619      	mov	r1, r3
 80023bc:	4805      	ldr	r0, [pc, #20]	; (80023d4 <HAL_TIM_MspPostInit+0x154>)
 80023be:	f000 ff2b 	bl	8003218 <HAL_GPIO_Init>
}
 80023c2:	bf00      	nop
 80023c4:	3730      	adds	r7, #48	; 0x30
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40010000 	.word	0x40010000
 80023d0:	58024400 	.word	0x58024400
 80023d4:	58021000 	.word	0x58021000
 80023d8:	40000800 	.word	0x40000800
 80023dc:	58020c00 	.word	0x58020c00
 80023e0:	40000c00 	.word	0x40000c00
 80023e4:	58020000 	.word	0x58020000
 80023e8:	40014000 	.word	0x40014000

080023ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b0b6      	sub	sp, #216	; 0xd8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	22b4      	movs	r2, #180	; 0xb4
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f006 f9bb 	bl	8008788 <memset>
  if(huart->Instance==USART3)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a25      	ldr	r2, [pc, #148]	; (80024ac <HAL_UART_MspInit+0xc0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d142      	bne.n	80024a2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800241c:	2302      	movs	r3, #2
 800241e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	4618      	mov	r0, r3
 800242c:	f002 f82a 	bl	8004484 <HAL_RCCEx_PeriphCLKConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002436:	f7ff fc67 	bl	8001d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800243a:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 800243c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002440:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 8002442:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002446:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 800244c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 800245a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245e:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 800246a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8002476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800247a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002490:	2307      	movs	r3, #7
 8002492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002496:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	; (80024b4 <HAL_UART_MspInit+0xc8>)
 800249e:	f000 febb 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024a2:	bf00      	nop
 80024a4:	37d8      	adds	r7, #216	; 0xd8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40004800 	.word	0x40004800
 80024b0:	58024400 	.word	0x58024400
 80024b4:	58020c00 	.word	0x58020c00

080024b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <NMI_Handler+0x4>

080024be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c2:	e7fe      	b.n	80024c2 <HardFault_Handler+0x4>

080024c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <MemManage_Handler+0x4>

080024ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <BusFault_Handler+0x4>

080024d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <UsageFault_Handler+0x4>

080024d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002504:	f000 f920 	bl	8002748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}

0800250c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <TIM2_IRQHandler+0x10>)
 8002512:	f003 feb3 	bl	800627c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	24000220 	.word	0x24000220

08002520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002524:	4b32      	ldr	r3, [pc, #200]	; (80025f0 <SystemInit+0xd0>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	4a31      	ldr	r2, [pc, #196]	; (80025f0 <SystemInit+0xd0>)
 800252c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002534:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <SystemInit+0xd4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	2b06      	cmp	r3, #6
 800253e:	d807      	bhi.n	8002550 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002540:	4b2c      	ldr	r3, [pc, #176]	; (80025f4 <SystemInit+0xd4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 030f 	bic.w	r3, r3, #15
 8002548:	4a2a      	ldr	r2, [pc, #168]	; (80025f4 <SystemInit+0xd4>)
 800254a:	f043 0307 	orr.w	r3, r3, #7
 800254e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002550:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <SystemInit+0xd8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a28      	ldr	r2, [pc, #160]	; (80025f8 <SystemInit+0xd8>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800255c:	4b26      	ldr	r3, [pc, #152]	; (80025f8 <SystemInit+0xd8>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002562:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <SystemInit+0xd8>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4924      	ldr	r1, [pc, #144]	; (80025f8 <SystemInit+0xd8>)
 8002568:	4b24      	ldr	r3, [pc, #144]	; (80025fc <SystemInit+0xdc>)
 800256a:	4013      	ands	r3, r2
 800256c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800256e:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <SystemInit+0xd4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <SystemInit+0xd4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 030f 	bic.w	r3, r3, #15
 8002582:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <SystemInit+0xd4>)
 8002584:	f043 0307 	orr.w	r3, r3, #7
 8002588:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <SystemInit+0xd8>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <SystemInit+0xd8>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002596:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <SystemInit+0xd8>)
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800259c:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <SystemInit+0xd8>)
 800259e:	4a18      	ldr	r2, [pc, #96]	; (8002600 <SystemInit+0xe0>)
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <SystemInit+0xd8>)
 80025a4:	4a17      	ldr	r2, [pc, #92]	; (8002604 <SystemInit+0xe4>)
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <SystemInit+0xd8>)
 80025aa:	4a17      	ldr	r2, [pc, #92]	; (8002608 <SystemInit+0xe8>)
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <SystemInit+0xd8>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <SystemInit+0xd8>)
 80025b6:	4a14      	ldr	r2, [pc, #80]	; (8002608 <SystemInit+0xe8>)
 80025b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <SystemInit+0xd8>)
 80025bc:	2200      	movs	r2, #0
 80025be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <SystemInit+0xd8>)
 80025c2:	4a11      	ldr	r2, [pc, #68]	; (8002608 <SystemInit+0xe8>)
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <SystemInit+0xd8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <SystemInit+0xd8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <SystemInit+0xd8>)
 80025d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <SystemInit+0xd8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <SystemInit+0xec>)
 80025e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80025e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00
 80025f4:	52002000 	.word	0x52002000
 80025f8:	58024400 	.word	0x58024400
 80025fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002600:	02020200 	.word	0x02020200
 8002604:	01ff0000 	.word	0x01ff0000
 8002608:	01010280 	.word	0x01010280
 800260c:	52004000 	.word	0x52004000

08002610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002648 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002614:	f7ff ff84 	bl	8002520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002618:	480c      	ldr	r0, [pc, #48]	; (800264c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800261a:	490d      	ldr	r1, [pc, #52]	; (8002650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800261c:	4a0d      	ldr	r2, [pc, #52]	; (8002654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002620:	e002      	b.n	8002628 <LoopCopyDataInit>

08002622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002626:	3304      	adds	r3, #4

08002628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800262c:	d3f9      	bcc.n	8002622 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002630:	4c0a      	ldr	r4, [pc, #40]	; (800265c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002634:	e001      	b.n	800263a <LoopFillZerobss>

08002636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002638:	3204      	adds	r2, #4

0800263a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800263c:	d3fb      	bcc.n	8002636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800263e:	f006 f87f 	bl	8008740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002642:	f7fd ffe9 	bl	8000618 <main>
  bx  lr
 8002646:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002648:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800264c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002650:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002654:	080087f8 	.word	0x080087f8
  ldr r2, =_sbss
 8002658:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800265c:	240006c0 	.word	0x240006c0

08002660 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002660:	e7fe      	b.n	8002660 <ADC3_IRQHandler>
	...

08002664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800266a:	2003      	movs	r0, #3
 800266c:	f000 f970 	bl	8002950 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002670:	f001 fd32 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_Init+0x68>)
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	4913      	ldr	r1, [pc, #76]	; (80026d0 <HAL_Init+0x6c>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
 800268c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <HAL_Init+0x68>)
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <HAL_Init+0x6c>)
 8002698:	5cd3      	ldrb	r3, [r2, r3]
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
 80026a4:	4a0b      	ldr	r2, [pc, #44]	; (80026d4 <HAL_Init+0x70>)
 80026a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026a8:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <HAL_Init+0x74>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ae:	2000      	movs	r0, #0
 80026b0:	f000 f814 	bl	80026dc <HAL_InitTick>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e002      	b.n	80026c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026be:	f7ff fb29 	bl	8001d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	58024400 	.word	0x58024400
 80026d0:	080087b0 	.word	0x080087b0
 80026d4:	24000004 	.word	0x24000004
 80026d8:	24000000 	.word	0x24000000

080026dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80026e4:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_InitTick+0x60>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e021      	b.n	8002734 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_InitTick+0x64>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_InitTick+0x60>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f955 	bl	80029b6 <HAL_SYSTICK_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e00e      	b.n	8002734 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b0f      	cmp	r3, #15
 800271a:	d80a      	bhi.n	8002732 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800271c:	2200      	movs	r2, #0
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f000 f91f 	bl	8002966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002728:	4a06      	ldr	r2, [pc, #24]	; (8002744 <HAL_InitTick+0x68>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	2400000c 	.word	0x2400000c
 8002740:	24000000 	.word	0x24000000
 8002744:	24000008 	.word	0x24000008

08002748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_IncTick+0x20>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_IncTick+0x24>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4413      	add	r3, r2
 8002758:	4a04      	ldr	r2, [pc, #16]	; (800276c <HAL_IncTick+0x24>)
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	2400000c 	.word	0x2400000c
 800276c:	240006bc 	.word	0x240006bc

08002770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return uwTick;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_GetTick+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	240006bc 	.word	0x240006bc

08002788 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002798:	4904      	ldr	r1, [pc, #16]	; (80027ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	58000400 	.word	0x58000400

080027b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <__NVIC_SetPriorityGrouping+0x40>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027cc:	4013      	ands	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <__NVIC_SetPriorityGrouping+0x44>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027de:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <__NVIC_SetPriorityGrouping+0x40>)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	60d3      	str	r3, [r2, #12]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00
 80027f4:	05fa0000 	.word	0x05fa0000

080027f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <__NVIC_GetPriorityGrouping+0x18>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	f003 0307 	and.w	r3, r3, #7
}
 8002806:	4618      	mov	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800281e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002822:	2b00      	cmp	r3, #0
 8002824:	db0b      	blt.n	800283e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4907      	ldr	r1, [pc, #28]	; (800284c <__NVIC_EnableIRQ+0x38>)
 800282e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2001      	movs	r0, #1
 8002836:	fa00 f202 	lsl.w	r2, r0, r2
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000e100 	.word	0xe000e100

08002850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800285c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002860:	2b00      	cmp	r3, #0
 8002862:	db0a      	blt.n	800287a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	490c      	ldr	r1, [pc, #48]	; (800289c <__NVIC_SetPriority+0x4c>)
 800286a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800286e:	0112      	lsls	r2, r2, #4
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	440b      	add	r3, r1
 8002874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002878:	e00a      	b.n	8002890 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4908      	ldr	r1, [pc, #32]	; (80028a0 <__NVIC_SetPriority+0x50>)
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	3b04      	subs	r3, #4
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	440b      	add	r3, r1
 800288e:	761a      	strb	r2, [r3, #24]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000e100 	.word	0xe000e100
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	; 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f1c3 0307 	rsb	r3, r3, #7
 80028be:	2b04      	cmp	r3, #4
 80028c0:	bf28      	it	cs
 80028c2:	2304      	movcs	r3, #4
 80028c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d902      	bls.n	80028d4 <NVIC_EncodePriority+0x30>
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3b03      	subs	r3, #3
 80028d2:	e000      	b.n	80028d6 <NVIC_EncodePriority+0x32>
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	401a      	ands	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	43d9      	mvns	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	4313      	orrs	r3, r2
         );
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3724      	adds	r7, #36	; 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800291c:	d301      	bcc.n	8002922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800291e:	2301      	movs	r3, #1
 8002920:	e00f      	b.n	8002942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002922:	4a0a      	ldr	r2, [pc, #40]	; (800294c <SysTick_Config+0x40>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292a:	210f      	movs	r1, #15
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f7ff ff8e 	bl	8002850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <SysTick_Config+0x40>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <SysTick_Config+0x40>)
 800293c:	2207      	movs	r2, #7
 800293e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	e000e010 	.word	0xe000e010

08002950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff29 	bl	80027b0 <__NVIC_SetPriorityGrouping>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002974:	f7ff ff40 	bl	80027f8 <__NVIC_GetPriorityGrouping>
 8002978:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	6978      	ldr	r0, [r7, #20]
 8002980:	f7ff ff90 	bl	80028a4 <NVIC_EncodePriority>
 8002984:	4602      	mov	r2, r0
 8002986:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff5f 	bl	8002850 <__NVIC_SetPriority>
}
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff33 	bl	8002814 <__NVIC_EnableIRQ>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ffa4 	bl	800290c <SysTick_Config>
 80029c4:	4603      	mov	r3, r0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0cf      	b.n	8002b82 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d106      	bne.n	80029fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2223      	movs	r2, #35	; 0x23
 80029f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff f9a7 	bl	8001d48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	4b64      	ldr	r3, [pc, #400]	; (8002b8c <HAL_ETH_Init+0x1bc>)
 80029fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a00:	4a62      	ldr	r2, [pc, #392]	; (8002b8c <HAL_ETH_Init+0x1bc>)
 8002a02:	f043 0302 	orr.w	r3, r3, #2
 8002a06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a0a:	4b60      	ldr	r3, [pc, #384]	; (8002b8c <HAL_ETH_Init+0x1bc>)
 8002a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7a1b      	ldrb	r3, [r3, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d103      	bne.n	8002a28 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7ff feb1 	bl	8002788 <HAL_SYSCFG_ETHInterfaceSelect>
 8002a26:	e003      	b.n	8002a30 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002a28:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002a2c:	f7ff feac 	bl	8002788 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002a30:	4b57      	ldr	r3, [pc, #348]	; (8002b90 <HAL_ETH_Init+0x1c0>)
 8002a32:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a4c:	f7ff fe90 	bl	8002770 <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a52:	e011      	b.n	8002a78 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002a54:	f7ff fe8c 	bl	8002770 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a62:	d909      	bls.n	8002a78 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2204      	movs	r2, #4
 8002a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	22e0      	movs	r2, #224	; 0xe0
 8002a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e084      	b.n	8002b82 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1e4      	bne.n	8002a54 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f886 	bl	8002b9c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002a90:	f001 fc9c 	bl	80043cc <HAL_RCC_GetHCLKFreq>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4a3f      	ldr	r2, [pc, #252]	; (8002b94 <HAL_ETH_Init+0x1c4>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	0c9a      	lsrs	r2, r3, #18
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3a01      	subs	r2, #1
 8002aa4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fa71 	bl	8002f90 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002aba:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ac6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002aca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	22e0      	movs	r2, #224	; 0xe0
 8002ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e049      	b.n	8002b82 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002afa:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_ETH_Init+0x1c8>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6952      	ldr	r2, [r2, #20]
 8002b02:	0051      	lsls	r1, r2, #1
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b0e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fad9 	bl	80030ca <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fb1f 	bl	800315c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	3305      	adds	r3, #5
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	021a      	lsls	r2, r3, #8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	3303      	adds	r3, #3
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	061a      	lsls	r2, r3, #24
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	041b      	lsls	r3, r3, #16
 8002b50:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	3301      	adds	r3, #1
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b5c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b6a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2210      	movs	r2, #16
 8002b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	58024400 	.word	0x58024400
 8002b90:	58000400 	.word	0x58000400
 8002b94:	431bde83 	.word	0x431bde83
 8002b98:	ffff8001 	.word	0xffff8001

08002b9c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002bb6:	f001 fc09 	bl	80043cc <HAL_RCC_GetHCLKFreq>
 8002bba:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	; (8002c38 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d908      	bls.n	8002bd6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4a1d      	ldr	r2, [pc, #116]	; (8002c3c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d804      	bhi.n	8002bd6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	e027      	b.n	8002c26 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d908      	bls.n	8002bf0 <HAL_ETH_SetMDIOClockRange+0x54>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d204      	bcs.n	8002bf0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e01a      	b.n	8002c26 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4a13      	ldr	r2, [pc, #76]	; (8002c40 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d303      	bcc.n	8002c00 <HAL_ETH_SetMDIOClockRange+0x64>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d911      	bls.n	8002c24 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d908      	bls.n	8002c1a <HAL_ETH_SetMDIOClockRange+0x7e>
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4a0f      	ldr	r2, [pc, #60]	; (8002c48 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d804      	bhi.n	8002c1a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e005      	b.n	8002c26 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	e000      	b.n	8002c26 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002c24:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	01312cff 	.word	0x01312cff
 8002c3c:	02160ebf 	.word	0x02160ebf
 8002c40:	03938700 	.word	0x03938700
 8002c44:	05f5e0ff 	.word	0x05f5e0ff
 8002c48:	08f0d17f 	.word	0x08f0d17f

08002c4c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002c5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	791b      	ldrb	r3, [r3, #4]
 8002c64:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002c66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	7b1b      	ldrb	r3, [r3, #12]
 8002c6c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	7b5b      	ldrb	r3, [r3, #13]
 8002c74:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	7b9b      	ldrb	r3, [r3, #14]
 8002c7c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	7bdb      	ldrb	r3, [r3, #15]
 8002c84:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c86:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	7c12      	ldrb	r2, [r2, #16]
 8002c8c:	2a00      	cmp	r2, #0
 8002c8e:	d102      	bne.n	8002c96 <ETH_SetMACConfig+0x4a>
 8002c90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c94:	e000      	b.n	8002c98 <ETH_SetMACConfig+0x4c>
 8002c96:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c98:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	7c52      	ldrb	r2, [r2, #17]
 8002c9e:	2a00      	cmp	r2, #0
 8002ca0:	d102      	bne.n	8002ca8 <ETH_SetMACConfig+0x5c>
 8002ca2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ca6:	e000      	b.n	8002caa <ETH_SetMACConfig+0x5e>
 8002ca8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002caa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	7c9b      	ldrb	r3, [r3, #18]
 8002cb0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002cb2:	431a      	orrs	r2, r3
               macconf->Speed |
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002cb8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002cbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	7f1b      	ldrb	r3, [r3, #28]
 8002cc4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002cc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	7f5b      	ldrb	r3, [r3, #29]
 8002ccc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002cce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	7f92      	ldrb	r2, [r2, #30]
 8002cd4:	2a00      	cmp	r2, #0
 8002cd6:	d102      	bne.n	8002cde <ETH_SetMACConfig+0x92>
 8002cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cdc:	e000      	b.n	8002ce0 <ETH_SetMACConfig+0x94>
 8002cde:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002ce0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	7fdb      	ldrb	r3, [r3, #31]
 8002ce6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002ce8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002cf0:	2a00      	cmp	r2, #0
 8002cf2:	d102      	bne.n	8002cfa <ETH_SetMACConfig+0xae>
 8002cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf8:	e000      	b.n	8002cfc <ETH_SetMACConfig+0xb0>
 8002cfa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002cfc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d0a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002d0c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b56      	ldr	r3, [pc, #344]	; (8002e78 <ETH_SetMACConfig+0x22c>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	68f9      	ldr	r1, [r7, #12]
 8002d26:	430b      	orrs	r3, r1
 8002d28:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d36:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d38:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d40:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d4a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d4c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002d54:	2a00      	cmp	r2, #0
 8002d56:	d102      	bne.n	8002d5e <ETH_SetMACConfig+0x112>
 8002d58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d5c:	e000      	b.n	8002d60 <ETH_SetMACConfig+0x114>
 8002d5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d60:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	4b42      	ldr	r3, [pc, #264]	; (8002e7c <ETH_SetMACConfig+0x230>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	68f9      	ldr	r1, [r7, #12]
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d84:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <ETH_SetMACConfig+0x234>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	68f9      	ldr	r1, [r7, #12]
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002da8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002dae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002db6:	2a00      	cmp	r2, #0
 8002db8:	d101      	bne.n	8002dbe <ETH_SetMACConfig+0x172>
 8002dba:	2280      	movs	r2, #128	; 0x80
 8002dbc:	e000      	b.n	8002dc0 <ETH_SetMACConfig+0x174>
 8002dbe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002dc0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dd2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	68f9      	ldr	r1, [r7, #12]
 8002dde:	430b      	orrs	r3, r1
 8002de0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002de8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002df0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	f023 0103 	bic.w	r1, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002e16:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002e32:	2a00      	cmp	r2, #0
 8002e34:	d101      	bne.n	8002e3a <ETH_SetMACConfig+0x1ee>
 8002e36:	2240      	movs	r2, #64	; 0x40
 8002e38:	e000      	b.n	8002e3c <ETH_SetMACConfig+0x1f0>
 8002e3a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002e3c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002e44:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002e4e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002e5c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	00048083 	.word	0x00048083
 8002e7c:	c0f88000 	.word	0xc0f88000
 8002e80:	fffffef0 	.word	0xfffffef0

08002e84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <ETH_SetDMAConfig+0xf8>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	6811      	ldr	r1, [r2, #0]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002eaa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	791b      	ldrb	r3, [r3, #4]
 8002eb0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002eb6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	7b1b      	ldrb	r3, [r3, #12]
 8002ebc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	4b2c      	ldr	r3, [pc, #176]	; (8002f80 <ETH_SetDMAConfig+0xfc>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	68f9      	ldr	r1, [r7, #12]
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002edc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	7b5b      	ldrb	r3, [r3, #13]
 8002ee2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002ef8:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <ETH_SetDMAConfig+0x100>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	68f9      	ldr	r1, [r7, #12]
 8002f02:	430b      	orrs	r3, r1
 8002f04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f08:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	7d1b      	ldrb	r3, [r3, #20]
 8002f14:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f16:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	7f5b      	ldrb	r3, [r3, #29]
 8002f1c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f2a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002f2e:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <ETH_SetDMAConfig+0x104>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	68f9      	ldr	r1, [r7, #12]
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f3e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	7f1b      	ldrb	r3, [r3, #28]
 8002f46:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f58:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <ETH_SetDMAConfig+0x108>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	68f9      	ldr	r1, [r7, #12]
 8002f66:	430b      	orrs	r3, r1
 8002f68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f6c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	ffff87fd 	.word	0xffff87fd
 8002f80:	ffff2ffe 	.word	0xffff2ffe
 8002f84:	fffec000 	.word	0xfffec000
 8002f88:	ffc0efef 	.word	0xffc0efef
 8002f8c:	7fc0ffff 	.word	0x7fc0ffff

08002f90 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0a4      	sub	sp, #144	; 0x90
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fd0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002fe8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002fec:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800300a:	2300      	movs	r3, #0
 800300c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800300e:	2300      	movs	r3, #0
 8003010:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003012:	2300      	movs	r3, #0
 8003014:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003016:	2300      	movs	r3, #0
 8003018:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800301c:	2300      	movs	r3, #0
 800301e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003028:	2320      	movs	r3, #32
 800302a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003034:	2300      	movs	r3, #0
 8003036:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800303a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003040:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003044:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003046:	2300      	movs	r3, #0
 8003048:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800304c:	2302      	movs	r3, #2
 800304e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003052:	2300      	movs	r3, #0
 8003054:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800305e:	2300      	movs	r3, #0
 8003060:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003064:	2301      	movs	r3, #1
 8003066:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800306a:	2300      	movs	r3, #0
 800306c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003078:	4619      	mov	r1, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff fde6 	bl	8002c4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003080:	2301      	movs	r3, #1
 8003082:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003084:	2301      	movs	r3, #1
 8003086:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003088:	2300      	movs	r3, #0
 800308a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800308c:	2300      	movs	r3, #0
 800308e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003092:	2300      	movs	r3, #0
 8003094:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003096:	2300      	movs	r3, #0
 8003098:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800309a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800309e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80030b0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030b6:	f107 0308 	add.w	r3, r7, #8
 80030ba:	4619      	mov	r1, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff fee1 	bl	8002e84 <ETH_SetDMAConfig>
}
 80030c2:	bf00      	nop
 80030c4:	3790      	adds	r7, #144	; 0x90
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	e01d      	b.n	8003114 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68d9      	ldr	r1, [r3, #12]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	440b      	add	r3, r1
 80030e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2200      	movs	r2, #0
 8003100:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	3206      	adds	r2, #6
 800310a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3301      	adds	r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d9de      	bls.n	80030d8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003128:	461a      	mov	r2, r3
 800312a:	2303      	movs	r3, #3
 800312c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800313c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800314c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	e023      	b.n	80031b2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6919      	ldr	r1, [r3, #16]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2200      	movs	r2, #0
 8003186:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2200      	movs	r2, #0
 8003192:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2200      	movs	r2, #0
 800319e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	3212      	adds	r2, #18
 80031a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3301      	adds	r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d9d8      	bls.n	800316a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031de:	461a      	mov	r2, r3
 80031e0:	2303      	movs	r3, #3
 80031e2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031f2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003206:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003226:	4b86      	ldr	r3, [pc, #536]	; (8003440 <HAL_GPIO_Init+0x228>)
 8003228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800322a:	e18c      	b.n	8003546 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 817e 	beq.w	8003540 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d005      	beq.n	800325c <HAL_GPIO_Init+0x44>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d130      	bne.n	80032be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	2203      	movs	r2, #3
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003292:	2201      	movs	r2, #1
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 0201 	and.w	r2, r3, #1
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d017      	beq.n	80032fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	2203      	movs	r2, #3
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d123      	bne.n	800334e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	08da      	lsrs	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3208      	adds	r2, #8
 800330e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	220f      	movs	r2, #15
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	08da      	lsrs	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3208      	adds	r2, #8
 8003348:	69b9      	ldr	r1, [r7, #24]
 800334a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	2203      	movs	r2, #3
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0203 	and.w	r2, r3, #3
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80d8 	beq.w	8003540 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003390:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <HAL_GPIO_Init+0x22c>)
 8003392:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003396:	4a2b      	ldr	r2, [pc, #172]	; (8003444 <HAL_GPIO_Init+0x22c>)
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033a0:	4b28      	ldr	r3, [pc, #160]	; (8003444 <HAL_GPIO_Init+0x22c>)
 80033a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ae:	4a26      	ldr	r2, [pc, #152]	; (8003448 <HAL_GPIO_Init+0x230>)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	3302      	adds	r3, #2
 80033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	220f      	movs	r2, #15
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1d      	ldr	r2, [pc, #116]	; (800344c <HAL_GPIO_Init+0x234>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d04a      	beq.n	8003470 <HAL_GPIO_Init+0x258>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1c      	ldr	r2, [pc, #112]	; (8003450 <HAL_GPIO_Init+0x238>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d02b      	beq.n	800343a <HAL_GPIO_Init+0x222>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <HAL_GPIO_Init+0x23c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d025      	beq.n	8003436 <HAL_GPIO_Init+0x21e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a1a      	ldr	r2, [pc, #104]	; (8003458 <HAL_GPIO_Init+0x240>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01f      	beq.n	8003432 <HAL_GPIO_Init+0x21a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <HAL_GPIO_Init+0x244>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d019      	beq.n	800342e <HAL_GPIO_Init+0x216>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a18      	ldr	r2, [pc, #96]	; (8003460 <HAL_GPIO_Init+0x248>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_GPIO_Init+0x212>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a17      	ldr	r2, [pc, #92]	; (8003464 <HAL_GPIO_Init+0x24c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00d      	beq.n	8003426 <HAL_GPIO_Init+0x20e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a16      	ldr	r2, [pc, #88]	; (8003468 <HAL_GPIO_Init+0x250>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <HAL_GPIO_Init+0x20a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a15      	ldr	r2, [pc, #84]	; (800346c <HAL_GPIO_Init+0x254>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_GPIO_Init+0x206>
 800341a:	2309      	movs	r3, #9
 800341c:	e029      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800341e:	230a      	movs	r3, #10
 8003420:	e027      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 8003422:	2307      	movs	r3, #7
 8003424:	e025      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 8003426:	2306      	movs	r3, #6
 8003428:	e023      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800342a:	2305      	movs	r3, #5
 800342c:	e021      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800342e:	2304      	movs	r3, #4
 8003430:	e01f      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 8003432:	2303      	movs	r3, #3
 8003434:	e01d      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 8003436:	2302      	movs	r3, #2
 8003438:	e01b      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800343a:	2301      	movs	r3, #1
 800343c:	e019      	b.n	8003472 <HAL_GPIO_Init+0x25a>
 800343e:	bf00      	nop
 8003440:	58000080 	.word	0x58000080
 8003444:	58024400 	.word	0x58024400
 8003448:	58000400 	.word	0x58000400
 800344c:	58020000 	.word	0x58020000
 8003450:	58020400 	.word	0x58020400
 8003454:	58020800 	.word	0x58020800
 8003458:	58020c00 	.word	0x58020c00
 800345c:	58021000 	.word	0x58021000
 8003460:	58021400 	.word	0x58021400
 8003464:	58021800 	.word	0x58021800
 8003468:	58021c00 	.word	0x58021c00
 800346c:	58022400 	.word	0x58022400
 8003470:	2300      	movs	r3, #0
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	f002 0203 	and.w	r2, r2, #3
 8003478:	0092      	lsls	r2, r2, #2
 800347a:	4093      	lsls	r3, r2
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003482:	4938      	ldr	r1, [pc, #224]	; (8003564 <HAL_GPIO_Init+0x34c>)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3302      	adds	r3, #2
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	3301      	adds	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f ae6b 	bne.w	800322c <HAL_GPIO_Init+0x14>
  }
}
 8003556:	bf00      	nop
 8003558:	bf00      	nop
 800355a:	3724      	adds	r7, #36	; 0x24
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	58000400 	.word	0x58000400

08003568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	807b      	strh	r3, [r7, #2]
 8003574:	4613      	mov	r3, r2
 8003576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003578:	787b      	ldrb	r3, [r7, #1]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800357e:	887a      	ldrh	r2, [r7, #2]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003584:	e003      	b.n	800358e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003586:	887b      	ldrh	r3, [r7, #2]
 8003588:	041a      	lsls	r2, r3, #16
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	619a      	str	r2, [r3, #24]
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_PWREx_ConfigSupply+0x70>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d00a      	beq.n	80035c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035b0:	4b16      	ldr	r3, [pc, #88]	; (800360c <HAL_PWREx_ConfigSupply+0x70>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d001      	beq.n	80035c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e01f      	b.n	8003602 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e01d      	b.n	8003602 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035c6:	4b11      	ldr	r3, [pc, #68]	; (800360c <HAL_PWREx_ConfigSupply+0x70>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f023 0207 	bic.w	r2, r3, #7
 80035ce:	490f      	ldr	r1, [pc, #60]	; (800360c <HAL_PWREx_ConfigSupply+0x70>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035d6:	f7ff f8cb 	bl	8002770 <HAL_GetTick>
 80035da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035dc:	e009      	b.n	80035f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035de:	f7ff f8c7 	bl	8002770 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ec:	d901      	bls.n	80035f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e007      	b.n	8003602 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_PWREx_ConfigSupply+0x70>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fe:	d1ee      	bne.n	80035de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	58024800 	.word	0x58024800

08003610 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	; 0x30
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e39d      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 8087 	beq.w	800373e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003630:	4b88      	ldr	r3, [pc, #544]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800363a:	4b86      	ldr	r3, [pc, #536]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	2b10      	cmp	r3, #16
 8003644:	d007      	beq.n	8003656 <HAL_RCC_OscConfig+0x46>
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	2b18      	cmp	r3, #24
 800364a:	d110      	bne.n	800366e <HAL_RCC_OscConfig+0x5e>
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d10b      	bne.n	800366e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003656:	4b7f      	ldr	r3, [pc, #508]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d06c      	beq.n	800373c <HAL_RCC_OscConfig+0x12c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d168      	bne.n	800373c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e377      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003676:	d106      	bne.n	8003686 <HAL_RCC_OscConfig+0x76>
 8003678:	4b76      	ldr	r3, [pc, #472]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a75      	ldr	r2, [pc, #468]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 800367e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	e02e      	b.n	80036e4 <HAL_RCC_OscConfig+0xd4>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10c      	bne.n	80036a8 <HAL_RCC_OscConfig+0x98>
 800368e:	4b71      	ldr	r3, [pc, #452]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a70      	ldr	r2, [pc, #448]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 8003694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	4b6e      	ldr	r3, [pc, #440]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a6d      	ldr	r2, [pc, #436]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 80036a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	e01d      	b.n	80036e4 <HAL_RCC_OscConfig+0xd4>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b0:	d10c      	bne.n	80036cc <HAL_RCC_OscConfig+0xbc>
 80036b2:	4b68      	ldr	r3, [pc, #416]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a67      	ldr	r2, [pc, #412]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 80036b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	4b65      	ldr	r3, [pc, #404]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a64      	ldr	r2, [pc, #400]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 80036c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	e00b      	b.n	80036e4 <HAL_RCC_OscConfig+0xd4>
 80036cc:	4b61      	ldr	r3, [pc, #388]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a60      	ldr	r2, [pc, #384]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 80036d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b5e      	ldr	r3, [pc, #376]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a5d      	ldr	r2, [pc, #372]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 80036de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7ff f840 	bl	8002770 <HAL_GetTick>
 80036f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f4:	f7ff f83c 	bl	8002770 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	; 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e32b      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003706:	4b53      	ldr	r3, [pc, #332]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0xe4>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7ff f82c 	bl	8002770 <HAL_GetTick>
 8003718:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800371c:	f7ff f828 	bl	8002770 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e317      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800372e:	4b49      	ldr	r3, [pc, #292]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x10c>
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 808c 	beq.w	8003864 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800374c:	4b41      	ldr	r3, [pc, #260]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003754:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003756:	4b3f      	ldr	r3, [pc, #252]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <HAL_RCC_OscConfig+0x162>
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	2b18      	cmp	r3, #24
 8003766:	d137      	bne.n	80037d8 <HAL_RCC_OscConfig+0x1c8>
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d132      	bne.n	80037d8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003772:	4b38      	ldr	r3, [pc, #224]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_RCC_OscConfig+0x17a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e2e9      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800378a:	4b32      	ldr	r3, [pc, #200]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 0219 	bic.w	r2, r3, #25
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	492f      	ldr	r1, [pc, #188]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 8003798:	4313      	orrs	r3, r2
 800379a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800379c:	f7fe ffe8 	bl	8002770 <HAL_GetTick>
 80037a0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a4:	f7fe ffe4 	bl	8002770 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e2d3      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037b6:	4b27      	ldr	r3, [pc, #156]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c2:	4b24      	ldr	r3, [pc, #144]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	061b      	lsls	r3, r3, #24
 80037d0:	4920      	ldr	r1, [pc, #128]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037d6:	e045      	b.n	8003864 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d026      	beq.n	800382e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037e0:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f023 0219 	bic.w	r2, r3, #25
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4919      	ldr	r1, [pc, #100]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fe ffbd 	bl	8002770 <HAL_GetTick>
 80037f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037fa:	f7fe ffb9 	bl	8002770 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e2a8      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	490b      	ldr	r1, [pc, #44]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
 800382c:	e01a      	b.n	8003864 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a08      	ldr	r2, [pc, #32]	; (8003854 <HAL_RCC_OscConfig+0x244>)
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fe ff99 	bl	8002770 <HAL_GetTick>
 800383e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003840:	e00a      	b.n	8003858 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003842:	f7fe ff95 	bl	8002770 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d903      	bls.n	8003858 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e284      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
 8003854:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003858:	4b96      	ldr	r3, [pc, #600]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1ee      	bne.n	8003842 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b00      	cmp	r3, #0
 800386e:	d06a      	beq.n	8003946 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003870:	4b90      	ldr	r3, [pc, #576]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003878:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800387a:	4b8e      	ldr	r3, [pc, #568]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b08      	cmp	r3, #8
 8003884:	d007      	beq.n	8003896 <HAL_RCC_OscConfig+0x286>
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2b18      	cmp	r3, #24
 800388a:	d11b      	bne.n	80038c4 <HAL_RCC_OscConfig+0x2b4>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b01      	cmp	r3, #1
 8003894:	d116      	bne.n	80038c4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003896:	4b87      	ldr	r3, [pc, #540]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_RCC_OscConfig+0x29e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	2b80      	cmp	r3, #128	; 0x80
 80038a8:	d001      	beq.n	80038ae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e257      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038ae:	4b81      	ldr	r3, [pc, #516]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	061b      	lsls	r3, r3, #24
 80038bc:	497d      	ldr	r1, [pc, #500]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038c2:	e040      	b.n	8003946 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d023      	beq.n	8003914 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038cc:	4b79      	ldr	r3, [pc, #484]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a78      	ldr	r2, [pc, #480]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 80038d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fe ff4a 	bl	8002770 <HAL_GetTick>
 80038dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80038e0:	f7fe ff46 	bl	8002770 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e235      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038f2:	4b70      	ldr	r3, [pc, #448]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038fe:	4b6d      	ldr	r3, [pc, #436]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	061b      	lsls	r3, r3, #24
 800390c:	4969      	ldr	r1, [pc, #420]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 800390e:	4313      	orrs	r3, r2
 8003910:	60cb      	str	r3, [r1, #12]
 8003912:	e018      	b.n	8003946 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003914:	4b67      	ldr	r3, [pc, #412]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a66      	ldr	r2, [pc, #408]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 800391a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800391e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fe ff26 	bl	8002770 <HAL_GetTick>
 8003924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003928:	f7fe ff22 	bl	8002770 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e211      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800393a:	4b5e      	ldr	r3, [pc, #376]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d036      	beq.n	80039c0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d019      	beq.n	800398e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395a:	4b56      	ldr	r3, [pc, #344]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 800395c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395e:	4a55      	ldr	r2, [pc, #340]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003966:	f7fe ff03 	bl	8002770 <HAL_GetTick>
 800396a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396e:	f7fe feff 	bl	8002770 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e1ee      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003980:	4b4c      	ldr	r3, [pc, #304]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x35e>
 800398c:	e018      	b.n	80039c0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398e:	4b49      	ldr	r3, [pc, #292]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003992:	4a48      	ldr	r2, [pc, #288]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399a:	f7fe fee9 	bl	8002770 <HAL_GetTick>
 800399e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a2:	f7fe fee5 	bl	8002770 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e1d4      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039b4:	4b3f      	ldr	r3, [pc, #252]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 80039b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f0      	bne.n	80039a2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d036      	beq.n	8003a3a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d019      	beq.n	8003a08 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039d4:	4b37      	ldr	r3, [pc, #220]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a36      	ldr	r2, [pc, #216]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 80039da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039e0:	f7fe fec6 	bl	8002770 <HAL_GetTick>
 80039e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80039e8:	f7fe fec2 	bl	8002770 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e1b1      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039fa:	4b2e      	ldr	r3, [pc, #184]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x3d8>
 8003a06:	e018      	b.n	8003a3a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a08:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a29      	ldr	r2, [pc, #164]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a14:	f7fe feac 	bl	8002770 <HAL_GetTick>
 8003a18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a1c:	f7fe fea8 	bl	8002770 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e197      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a2e:	4b21      	ldr	r3, [pc, #132]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 8086 	beq.w	8003b54 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a48:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <HAL_RCC_OscConfig+0x4a8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <HAL_RCC_OscConfig+0x4a8>)
 8003a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a54:	f7fe fe8c 	bl	8002770 <HAL_GetTick>
 8003a58:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a5c:	f7fe fe88 	bl	8002770 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e177      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a6e:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <HAL_RCC_OscConfig+0x4a8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d106      	bne.n	8003a90 <HAL_RCC_OscConfig+0x480>
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	4a0b      	ldr	r2, [pc, #44]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8e:	e032      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d111      	bne.n	8003abc <HAL_RCC_OscConfig+0x4ac>
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a05      	ldr	r2, [pc, #20]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	4a02      	ldr	r2, [pc, #8]	; (8003ab4 <HAL_RCC_OscConfig+0x4a4>)
 8003aaa:	f023 0304 	bic.w	r3, r3, #4
 8003aae:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab0:	e021      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e6>
 8003ab2:	bf00      	nop
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	58024800 	.word	0x58024800
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b05      	cmp	r3, #5
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCC_OscConfig+0x4ce>
 8003ac4:	4b83      	ldr	r3, [pc, #524]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac8:	4a82      	ldr	r2, [pc, #520]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003aca:	f043 0304 	orr.w	r3, r3, #4
 8003ace:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad0:	4b80      	ldr	r3, [pc, #512]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad4:	4a7f      	ldr	r2, [pc, #508]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6713      	str	r3, [r2, #112]	; 0x70
 8003adc:	e00b      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e6>
 8003ade:	4b7d      	ldr	r3, [pc, #500]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	4a7c      	ldr	r2, [pc, #496]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aea:	4b7a      	ldr	r3, [pc, #488]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	4a79      	ldr	r2, [pc, #484]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d015      	beq.n	8003b2a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7fe fe37 	bl	8002770 <HAL_GetTick>
 8003b02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7fe fe33 	bl	8002770 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e120      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b1c:	4b6d      	ldr	r3, [pc, #436]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ee      	beq.n	8003b06 <HAL_RCC_OscConfig+0x4f6>
 8003b28:	e014      	b.n	8003b54 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2a:	f7fe fe21 	bl	8002770 <HAL_GetTick>
 8003b2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fe fe1d 	bl	8002770 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e10a      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b48:	4b62      	ldr	r3, [pc, #392]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1ee      	bne.n	8003b32 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80ff 	beq.w	8003d5c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b5e:	4b5d      	ldr	r3, [pc, #372]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b66:	2b18      	cmp	r3, #24
 8003b68:	f000 80ba 	beq.w	8003ce0 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	f040 8095 	bne.w	8003ca0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b76:	4b57      	ldr	r3, [pc, #348]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a56      	ldr	r2, [pc, #344]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003b7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fe fdf5 	bl	8002770 <HAL_GetTick>
 8003b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8a:	f7fe fdf1 	bl	8002770 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e0e0      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b9c:	4b4d      	ldr	r3, [pc, #308]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba8:	4b4a      	ldr	r3, [pc, #296]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bac:	4b4a      	ldr	r3, [pc, #296]	; (8003cd8 <HAL_RCC_OscConfig+0x6c8>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bb8:	0112      	lsls	r2, r2, #4
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	4945      	ldr	r1, [pc, #276]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	628b      	str	r3, [r1, #40]	; 0x28
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	025b      	lsls	r3, r3, #9
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	041b      	lsls	r3, r3, #16
 8003be0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	3b01      	subs	r3, #1
 8003bec:	061b      	lsls	r3, r3, #24
 8003bee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bf2:	4938      	ldr	r1, [pc, #224]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003bf8:	4b36      	ldr	r3, [pc, #216]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	4a35      	ldr	r2, [pc, #212]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c04:	4b33      	ldr	r3, [pc, #204]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c08:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <HAL_RCC_OscConfig+0x6cc>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c10:	00d2      	lsls	r2, r2, #3
 8003c12:	4930      	ldr	r1, [pc, #192]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c18:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	f023 020c 	bic.w	r2, r3, #12
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	492b      	ldr	r1, [pc, #172]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c2a:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	f023 0202 	bic.w	r2, r3, #2
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	4927      	ldr	r1, [pc, #156]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c3c:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	4a24      	ldr	r2, [pc, #144]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c48:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	4a21      	ldr	r2, [pc, #132]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c54:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003c60:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c6c:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe fd7a 	bl	8002770 <HAL_GetTick>
 8003c7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fe fd76 	bl	8002770 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e065      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x670>
 8003c9e:	e05d      	b.n	8003d5c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a0b      	ldr	r2, [pc, #44]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fe fd60 	bl	8002770 <HAL_GetTick>
 8003cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fe fd5c 	bl	8002770 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e04b      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cc6:	4b03      	ldr	r3, [pc, #12]	; (8003cd4 <HAL_RCC_OscConfig+0x6c4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x6a4>
 8003cd2:	e043      	b.n	8003d5c <HAL_RCC_OscConfig+0x74c>
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	fffffc0c 	.word	0xfffffc0c
 8003cdc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ce0:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <HAL_RCC_OscConfig+0x758>)
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_RCC_OscConfig+0x758>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d031      	beq.n	8003d58 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f003 0203 	and.w	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d12a      	bne.n	8003d58 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d122      	bne.n	8003d58 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d11a      	bne.n	8003d58 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	0a5b      	lsrs	r3, r3, #9
 8003d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d111      	bne.n	8003d58 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	0c1b      	lsrs	r3, r3, #16
 8003d38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d108      	bne.n	8003d58 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	0e1b      	lsrs	r3, r3, #24
 8003d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d52:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3730      	adds	r7, #48	; 0x30
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	58024400 	.word	0x58024400

08003d6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e19c      	b.n	80040ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d80:	4b8a      	ldr	r3, [pc, #552]	; (8003fac <HAL_RCC_ClockConfig+0x240>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d910      	bls.n	8003db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	4b87      	ldr	r3, [pc, #540]	; (8003fac <HAL_RCC_ClockConfig+0x240>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 020f 	bic.w	r2, r3, #15
 8003d96:	4985      	ldr	r1, [pc, #532]	; (8003fac <HAL_RCC_ClockConfig+0x240>)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b83      	ldr	r3, [pc, #524]	; (8003fac <HAL_RCC_ClockConfig+0x240>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e184      	b.n	80040ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d010      	beq.n	8003dde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	4b7b      	ldr	r3, [pc, #492]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d908      	bls.n	8003dde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003dcc:	4b78      	ldr	r3, [pc, #480]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	4975      	ldr	r1, [pc, #468]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d010      	beq.n	8003e0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	4b70      	ldr	r3, [pc, #448]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d908      	bls.n	8003e0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003dfa:	4b6d      	ldr	r3, [pc, #436]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	496a      	ldr	r1, [pc, #424]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d010      	beq.n	8003e3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	4b64      	ldr	r3, [pc, #400]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d908      	bls.n	8003e3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e28:	4b61      	ldr	r3, [pc, #388]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	495e      	ldr	r1, [pc, #376]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d010      	beq.n	8003e68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69da      	ldr	r2, [r3, #28]
 8003e4a:	4b59      	ldr	r3, [pc, #356]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d908      	bls.n	8003e68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e56:	4b56      	ldr	r3, [pc, #344]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	4953      	ldr	r1, [pc, #332]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d010      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	4b4d      	ldr	r3, [pc, #308]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d908      	bls.n	8003e96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e84:	4b4a      	ldr	r3, [pc, #296]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f023 020f 	bic.w	r2, r3, #15
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4947      	ldr	r1, [pc, #284]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d055      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ea2:	4b43      	ldr	r3, [pc, #268]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4940      	ldr	r1, [pc, #256]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d107      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ebc:	4b3c      	ldr	r3, [pc, #240]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d121      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0f6      	b.n	80040ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ed4:	4b36      	ldr	r3, [pc, #216]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d115      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0ea      	b.n	80040ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d107      	bne.n	8003efc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003eec:	4b30      	ldr	r3, [pc, #192]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d109      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0de      	b.n	80040ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003efc:	4b2c      	ldr	r3, [pc, #176]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0d6      	b.n	80040ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f0c:	4b28      	ldr	r3, [pc, #160]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f023 0207 	bic.w	r2, r3, #7
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4925      	ldr	r1, [pc, #148]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7fe fc27 	bl	8002770 <HAL_GetTick>
 8003f22:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f24:	e00a      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f26:	f7fe fc23 	bl	8002770 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e0be      	b.n	80040ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3c:	4b1c      	ldr	r3, [pc, #112]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d1eb      	bne.n	8003f26 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d010      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d208      	bcs.n	8003f7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f6a:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f023 020f 	bic.w	r2, r3, #15
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	490e      	ldr	r1, [pc, #56]	; (8003fb0 <HAL_RCC_ClockConfig+0x244>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_RCC_ClockConfig+0x240>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d214      	bcs.n	8003fb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b08      	ldr	r3, [pc, #32]	; (8003fac <HAL_RCC_ClockConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 020f 	bic.w	r2, r3, #15
 8003f92:	4906      	ldr	r1, [pc, #24]	; (8003fac <HAL_RCC_ClockConfig+0x240>)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b04      	ldr	r3, [pc, #16]	; (8003fac <HAL_RCC_ClockConfig+0x240>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e086      	b.n	80040ba <HAL_RCC_ClockConfig+0x34e>
 8003fac:	52002000 	.word	0x52002000
 8003fb0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d010      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	4b3f      	ldr	r3, [pc, #252]	; (80040c4 <HAL_RCC_ClockConfig+0x358>)
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d208      	bcs.n	8003fe2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fd0:	4b3c      	ldr	r3, [pc, #240]	; (80040c4 <HAL_RCC_ClockConfig+0x358>)
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	4939      	ldr	r1, [pc, #228]	; (80040c4 <HAL_RCC_ClockConfig+0x358>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d010      	beq.n	8004010 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695a      	ldr	r2, [r3, #20]
 8003ff2:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <HAL_RCC_ClockConfig+0x358>)
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d208      	bcs.n	8004010 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ffe:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <HAL_RCC_ClockConfig+0x358>)
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	492e      	ldr	r1, [pc, #184]	; (80040c4 <HAL_RCC_ClockConfig+0x358>)
 800400c:	4313      	orrs	r3, r2
 800400e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	d010      	beq.n	800403e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699a      	ldr	r2, [r3, #24]
 8004020:	4b28      	ldr	r3, [pc, #160]	; (80040c4 <HAL_RCC_ClockConfig+0x358>)
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004028:	429a      	cmp	r2, r3
 800402a:	d208      	bcs.n	800403e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800402c:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <HAL_RCC_ClockConfig+0x358>)
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	4922      	ldr	r1, [pc, #136]	; (80040c4 <HAL_RCC_ClockConfig+0x358>)
 800403a:	4313      	orrs	r3, r2
 800403c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d010      	beq.n	800406c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69da      	ldr	r2, [r3, #28]
 800404e:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <HAL_RCC_ClockConfig+0x358>)
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004056:	429a      	cmp	r2, r3
 8004058:	d208      	bcs.n	800406c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800405a:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <HAL_RCC_ClockConfig+0x358>)
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	4917      	ldr	r1, [pc, #92]	; (80040c4 <HAL_RCC_ClockConfig+0x358>)
 8004068:	4313      	orrs	r3, r2
 800406a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800406c:	f000 f834 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b14      	ldr	r3, [pc, #80]	; (80040c4 <HAL_RCC_ClockConfig+0x358>)
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	4912      	ldr	r1, [pc, #72]	; (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
 8004088:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800408a:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <HAL_RCC_ClockConfig+0x358>)
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <HAL_RCC_ClockConfig+0x35c>)
 8004094:	5cd3      	ldrb	r3, [r2, r3]
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	fa22 f303 	lsr.w	r3, r2, r3
 80040a0:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <HAL_RCC_ClockConfig+0x360>)
 80040a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040a4:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <HAL_RCC_ClockConfig+0x364>)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <HAL_RCC_ClockConfig+0x368>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fe fb14 	bl	80026dc <HAL_InitTick>
 80040b4:	4603      	mov	r3, r0
 80040b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	58024400 	.word	0x58024400
 80040c8:	080087b0 	.word	0x080087b0
 80040cc:	24000004 	.word	0x24000004
 80040d0:	24000000 	.word	0x24000000
 80040d4:	24000008 	.word	0x24000008

080040d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	; 0x24
 80040dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040de:	4bb3      	ldr	r3, [pc, #716]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040e6:	2b18      	cmp	r3, #24
 80040e8:	f200 8155 	bhi.w	8004396 <HAL_RCC_GetSysClockFreq+0x2be>
 80040ec:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004159 	.word	0x08004159
 80040f8:	08004397 	.word	0x08004397
 80040fc:	08004397 	.word	0x08004397
 8004100:	08004397 	.word	0x08004397
 8004104:	08004397 	.word	0x08004397
 8004108:	08004397 	.word	0x08004397
 800410c:	08004397 	.word	0x08004397
 8004110:	08004397 	.word	0x08004397
 8004114:	0800417f 	.word	0x0800417f
 8004118:	08004397 	.word	0x08004397
 800411c:	08004397 	.word	0x08004397
 8004120:	08004397 	.word	0x08004397
 8004124:	08004397 	.word	0x08004397
 8004128:	08004397 	.word	0x08004397
 800412c:	08004397 	.word	0x08004397
 8004130:	08004397 	.word	0x08004397
 8004134:	08004185 	.word	0x08004185
 8004138:	08004397 	.word	0x08004397
 800413c:	08004397 	.word	0x08004397
 8004140:	08004397 	.word	0x08004397
 8004144:	08004397 	.word	0x08004397
 8004148:	08004397 	.word	0x08004397
 800414c:	08004397 	.word	0x08004397
 8004150:	08004397 	.word	0x08004397
 8004154:	0800418b 	.word	0x0800418b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004158:	4b94      	ldr	r3, [pc, #592]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004164:	4b91      	ldr	r3, [pc, #580]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	08db      	lsrs	r3, r3, #3
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	4a90      	ldr	r2, [pc, #576]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
 8004174:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004176:	e111      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004178:	4b8d      	ldr	r3, [pc, #564]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800417a:	61bb      	str	r3, [r7, #24]
    break;
 800417c:	e10e      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800417e:	4b8d      	ldr	r3, [pc, #564]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004180:	61bb      	str	r3, [r7, #24]
    break;
 8004182:	e10b      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004184:	4b8c      	ldr	r3, [pc, #560]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004186:	61bb      	str	r3, [r7, #24]
    break;
 8004188:	e108      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800418a:	4b88      	ldr	r3, [pc, #544]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004194:	4b85      	ldr	r3, [pc, #532]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800419e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80041a0:	4b82      	ldr	r3, [pc, #520]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80041aa:	4b80      	ldr	r3, [pc, #512]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ae:	08db      	lsrs	r3, r3, #3
 80041b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80e1 	beq.w	8004390 <HAL_RCC_GetSysClockFreq+0x2b8>
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	f000 8083 	beq.w	80042dc <HAL_RCC_GetSysClockFreq+0x204>
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	f200 80a1 	bhi.w	8004320 <HAL_RCC_GetSysClockFreq+0x248>
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x114>
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d056      	beq.n	8004298 <HAL_RCC_GetSysClockFreq+0x1c0>
 80041ea:	e099      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041ec:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d02d      	beq.n	8004254 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041f8:	4b6c      	ldr	r3, [pc, #432]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	08db      	lsrs	r3, r3, #3
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	4a6b      	ldr	r2, [pc, #428]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
 8004208:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	ee07 3a90 	vmov	s15, r3
 8004210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004222:	4b62      	ldr	r3, [pc, #392]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004232:	ed97 6a02 	vldr	s12, [r7, #8]
 8004236:	eddf 5a61 	vldr	s11, [pc, #388]	; 80043bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800423a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800423e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800424a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004252:	e087      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80043c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004266:	4b51      	ldr	r3, [pc, #324]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004276:	ed97 6a02 	vldr	s12, [r7, #8]
 800427a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80043bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800427e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800428a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800428e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004296:	e065      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80043c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80042a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042aa:	4b40      	ldr	r3, [pc, #256]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80042be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80043bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80042c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042da:	e043      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80043c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80042ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ee:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004302:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80043bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800430a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800430e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800431a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800431e:	e021      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800432e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004332:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004342:	ed97 6a02 	vldr	s12, [r7, #8]
 8004346:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80043bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800434a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800435a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004362:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004364:	4b11      	ldr	r3, [pc, #68]	; (80043ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	0a5b      	lsrs	r3, r3, #9
 800436a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800436e:	3301      	adds	r3, #1
 8004370:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	ee07 3a90 	vmov	s15, r3
 8004378:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800437c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004388:	ee17 3a90 	vmov	r3, s15
 800438c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800438e:	e005      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	61bb      	str	r3, [r7, #24]
    break;
 8004394:	e002      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004398:	61bb      	str	r3, [r7, #24]
    break;
 800439a:	bf00      	nop
  }

  return sysclockfreq;
 800439c:	69bb      	ldr	r3, [r7, #24]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3724      	adds	r7, #36	; 0x24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	58024400 	.word	0x58024400
 80043b0:	03d09000 	.word	0x03d09000
 80043b4:	003d0900 	.word	0x003d0900
 80043b8:	007a1200 	.word	0x007a1200
 80043bc:	46000000 	.word	0x46000000
 80043c0:	4c742400 	.word	0x4c742400
 80043c4:	4a742400 	.word	0x4a742400
 80043c8:	4af42400 	.word	0x4af42400

080043cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043d2:	f7ff fe81 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 80043d6:	4602      	mov	r2, r0
 80043d8:	4b10      	ldr	r3, [pc, #64]	; (800441c <HAL_RCC_GetHCLKFreq+0x50>)
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	0a1b      	lsrs	r3, r3, #8
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	490f      	ldr	r1, [pc, #60]	; (8004420 <HAL_RCC_GetHCLKFreq+0x54>)
 80043e4:	5ccb      	ldrb	r3, [r1, r3]
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	fa22 f303 	lsr.w	r3, r2, r3
 80043ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <HAL_RCC_GetHCLKFreq+0x50>)
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	4a09      	ldr	r2, [pc, #36]	; (8004420 <HAL_RCC_GetHCLKFreq+0x54>)
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	fa22 f303 	lsr.w	r3, r2, r3
 8004406:	4a07      	ldr	r2, [pc, #28]	; (8004424 <HAL_RCC_GetHCLKFreq+0x58>)
 8004408:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800440a:	4a07      	ldr	r2, [pc, #28]	; (8004428 <HAL_RCC_GetHCLKFreq+0x5c>)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <HAL_RCC_GetHCLKFreq+0x58>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	58024400 	.word	0x58024400
 8004420:	080087b0 	.word	0x080087b0
 8004424:	24000004 	.word	0x24000004
 8004428:	24000000 	.word	0x24000000

0800442c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004430:	f7ff ffcc 	bl	80043cc <HAL_RCC_GetHCLKFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4904      	ldr	r1, [pc, #16]	; (8004454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	58024400 	.word	0x58024400
 8004454:	080087b0 	.word	0x080087b0

08004458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800445c:	f7ff ffb6 	bl	80043cc <HAL_RCC_GetHCLKFreq>
 8004460:	4602      	mov	r2, r0
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	4904      	ldr	r1, [pc, #16]	; (8004480 <HAL_RCC_GetPCLK2Freq+0x28>)
 800446e:	5ccb      	ldrb	r3, [r1, r3]
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	58024400 	.word	0x58024400
 8004480:	080087b0 	.word	0x080087b0

08004484 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800448c:	2300      	movs	r3, #0
 800448e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004490:	2300      	movs	r3, #0
 8004492:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d03f      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044a8:	d02a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044ae:	d824      	bhi.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044b4:	d018      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ba:	d81e      	bhi.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c4:	d007      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044c6:	e018      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c8:	4ba4      	ldr	r3, [pc, #656]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	4aa3      	ldr	r2, [pc, #652]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80044ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044d4:	e015      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3304      	adds	r3, #4
 80044da:	2102      	movs	r1, #2
 80044dc:	4618      	mov	r0, r3
 80044de:	f001 f989 	bl	80057f4 <RCCEx_PLL2_Config>
 80044e2:	4603      	mov	r3, r0
 80044e4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044e6:	e00c      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3324      	adds	r3, #36	; 0x24
 80044ec:	2102      	movs	r1, #2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 fa32 	bl	8005958 <RCCEx_PLL3_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044f8:	e003      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	75fb      	strb	r3, [r7, #23]
      break;
 80044fe:	e000      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d109      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004508:	4b94      	ldr	r3, [pc, #592]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800450a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004514:	4991      	ldr	r1, [pc, #580]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004516:	4313      	orrs	r3, r2
 8004518:	650b      	str	r3, [r1, #80]	; 0x50
 800451a:	e001      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d03d      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	2b04      	cmp	r3, #4
 8004532:	d826      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004534:	a201      	add	r2, pc, #4	; (adr r2, 800453c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453a:	bf00      	nop
 800453c:	08004551 	.word	0x08004551
 8004540:	0800455f 	.word	0x0800455f
 8004544:	08004571 	.word	0x08004571
 8004548:	08004589 	.word	0x08004589
 800454c:	08004589 	.word	0x08004589
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004550:	4b82      	ldr	r3, [pc, #520]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	4a81      	ldr	r2, [pc, #516]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800455a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800455c:	e015      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3304      	adds	r3, #4
 8004562:	2100      	movs	r1, #0
 8004564:	4618      	mov	r0, r3
 8004566:	f001 f945 	bl	80057f4 <RCCEx_PLL2_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800456e:	e00c      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3324      	adds	r3, #36	; 0x24
 8004574:	2100      	movs	r1, #0
 8004576:	4618      	mov	r0, r3
 8004578:	f001 f9ee 	bl	8005958 <RCCEx_PLL3_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004580:	e003      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	75fb      	strb	r3, [r7, #23]
      break;
 8004586:	e000      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004590:	4b72      	ldr	r3, [pc, #456]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004594:	f023 0207 	bic.w	r2, r3, #7
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	496f      	ldr	r1, [pc, #444]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	650b      	str	r3, [r1, #80]	; 0x50
 80045a2:	e001      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
 80045a6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d051      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80045ba:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80045be:	d036      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045c0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80045c4:	d830      	bhi.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80045c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045ca:	d032      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80045cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045d0:	d82a      	bhi.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80045d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045d6:	d02e      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80045d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045dc:	d824      	bhi.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80045de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e2:	d018      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80045e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e8:	d81e      	bhi.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80045ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045f2:	d007      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80045f4:	e018      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f6:	4b59      	ldr	r3, [pc, #356]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	4a58      	ldr	r2, [pc, #352]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80045fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004600:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004602:	e019      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3304      	adds	r3, #4
 8004608:	2100      	movs	r1, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f001 f8f2 	bl	80057f4 <RCCEx_PLL2_Config>
 8004610:	4603      	mov	r3, r0
 8004612:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004614:	e010      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3324      	adds	r3, #36	; 0x24
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f001 f99b 	bl	8005958 <RCCEx_PLL3_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004626:	e007      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	75fb      	strb	r3, [r7, #23]
      break;
 800462c:	e004      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800462e:	bf00      	nop
 8004630:	e002      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004632:	bf00      	nop
 8004634:	e000      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004638:	7dfb      	ldrb	r3, [r7, #23]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800463e:	4b47      	ldr	r3, [pc, #284]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004642:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800464c:	4943      	ldr	r1, [pc, #268]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800464e:	4313      	orrs	r3, r2
 8004650:	658b      	str	r3, [r1, #88]	; 0x58
 8004652:	e001      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004654:	7dfb      	ldrb	r3, [r7, #23]
 8004656:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004660:	2b00      	cmp	r3, #0
 8004662:	d051      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800466a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800466e:	d036      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004670:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004674:	d830      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004676:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800467a:	d032      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800467c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004680:	d82a      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004682:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004686:	d02e      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004688:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800468c:	d824      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800468e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004692:	d018      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004694:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004698:	d81e      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800469e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046a2:	d007      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80046a4:	e018      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a6:	4b2d      	ldr	r3, [pc, #180]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	4a2c      	ldr	r2, [pc, #176]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80046ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046b2:	e019      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3304      	adds	r3, #4
 80046b8:	2100      	movs	r1, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f001 f89a 	bl	80057f4 <RCCEx_PLL2_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80046c4:	e010      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3324      	adds	r3, #36	; 0x24
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f001 f943 	bl	8005958 <RCCEx_PLL3_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046d6:	e007      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	75fb      	strb	r3, [r7, #23]
      break;
 80046dc:	e004      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80046de:	bf00      	nop
 80046e0:	e002      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80046e2:	bf00      	nop
 80046e4:	e000      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80046e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80046ee:	4b1b      	ldr	r3, [pc, #108]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80046f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046fc:	4917      	ldr	r1, [pc, #92]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	658b      	str	r3, [r1, #88]	; 0x58
 8004702:	e001      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d035      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004718:	2b30      	cmp	r3, #48	; 0x30
 800471a:	d01c      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800471c:	2b30      	cmp	r3, #48	; 0x30
 800471e:	d817      	bhi.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004720:	2b20      	cmp	r3, #32
 8004722:	d00c      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004724:	2b20      	cmp	r3, #32
 8004726:	d813      	bhi.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d019      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800472c:	2b10      	cmp	r3, #16
 800472e:	d10f      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	4a09      	ldr	r2, [pc, #36]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800473a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800473c:	e011      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3304      	adds	r3, #4
 8004742:	2102      	movs	r1, #2
 8004744:	4618      	mov	r0, r3
 8004746:	f001 f855 	bl	80057f4 <RCCEx_PLL2_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800474e:	e008      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75fb      	strb	r3, [r7, #23]
      break;
 8004754:	e005      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8004756:	bf00      	nop
 8004758:	e003      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800475a:	bf00      	nop
 800475c:	58024400 	.word	0x58024400
      break;
 8004760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004768:	4ba3      	ldr	r3, [pc, #652]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800476a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004774:	49a0      	ldr	r1, [pc, #640]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004776:	4313      	orrs	r3, r2
 8004778:	64cb      	str	r3, [r1, #76]	; 0x4c
 800477a:	e001      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477c:	7dfb      	ldrb	r3, [r7, #23]
 800477e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d047      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004794:	d030      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800479a:	d82a      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800479c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047a0:	d02c      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x378>
 80047a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047a6:	d824      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80047a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ac:	d018      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80047ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b2:	d81e      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80047b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047bc:	d007      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80047be:	e018      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c0:	4b8d      	ldr	r3, [pc, #564]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	4a8c      	ldr	r2, [pc, #560]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80047c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80047cc:	e017      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3304      	adds	r3, #4
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 f80d 	bl	80057f4 <RCCEx_PLL2_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80047de:	e00e      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3324      	adds	r3, #36	; 0x24
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f001 f8b6 	bl	8005958 <RCCEx_PLL3_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80047f0:	e005      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
      break;
 80047f6:	e002      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80047f8:	bf00      	nop
 80047fa:	e000      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80047fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d109      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004804:	4b7c      	ldr	r3, [pc, #496]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004808:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	4979      	ldr	r1, [pc, #484]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004812:	4313      	orrs	r3, r2
 8004814:	650b      	str	r3, [r1, #80]	; 0x50
 8004816:	e001      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d049      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004830:	d02e      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004832:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004836:	d828      	bhi.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004838:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800483c:	d02a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800483e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004842:	d822      	bhi.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004844:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004848:	d026      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800484a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800484e:	d81c      	bhi.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004854:	d010      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800485a:	d816      	bhi.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01d      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004864:	d111      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	2101      	movs	r1, #1
 800486c:	4618      	mov	r0, r3
 800486e:	f000 ffc1 	bl	80057f4 <RCCEx_PLL2_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004876:	e012      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3324      	adds	r3, #36	; 0x24
 800487c:	2101      	movs	r1, #1
 800487e:	4618      	mov	r0, r3
 8004880:	f001 f86a 	bl	8005958 <RCCEx_PLL3_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004888:	e009      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	75fb      	strb	r3, [r7, #23]
      break;
 800488e:	e006      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004890:	bf00      	nop
 8004892:	e004      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004894:	bf00      	nop
 8004896:	e002      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004898:	bf00      	nop
 800489a:	e000      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800489c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800489e:	7dfb      	ldrb	r3, [r7, #23]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80048a4:	4b54      	ldr	r3, [pc, #336]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80048a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b0:	4951      	ldr	r1, [pc, #324]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	650b      	str	r3, [r1, #80]	; 0x50
 80048b6:	e001      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
 80048ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d04b      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048d2:	d02e      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80048d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048d8:	d828      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80048da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048de:	d02a      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80048e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e4:	d822      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80048e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048ea:	d026      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80048ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048f0:	d81c      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80048f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048f6:	d010      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x496>
 80048f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048fc:	d816      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01d      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004906:	d111      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3304      	adds	r3, #4
 800490c:	2101      	movs	r1, #1
 800490e:	4618      	mov	r0, r3
 8004910:	f000 ff70 	bl	80057f4 <RCCEx_PLL2_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004918:	e012      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3324      	adds	r3, #36	; 0x24
 800491e:	2101      	movs	r1, #1
 8004920:	4618      	mov	r0, r3
 8004922:	f001 f819 	bl	8005958 <RCCEx_PLL3_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800492a:	e009      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	75fb      	strb	r3, [r7, #23]
      break;
 8004930:	e006      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004932:	bf00      	nop
 8004934:	e004      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004936:	bf00      	nop
 8004938:	e002      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800493a:	bf00      	nop
 800493c:	e000      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800493e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10a      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004946:	4b2c      	ldr	r3, [pc, #176]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004954:	4928      	ldr	r1, [pc, #160]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004956:	4313      	orrs	r3, r2
 8004958:	658b      	str	r3, [r1, #88]	; 0x58
 800495a:	e001      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495c:	7dfb      	ldrb	r3, [r7, #23]
 800495e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02f      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004974:	d00e      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800497a:	d814      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d015      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004980:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004984:	d10f      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004986:	4b1c      	ldr	r3, [pc, #112]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	4a1b      	ldr	r2, [pc, #108]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800498c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004990:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004992:	e00c      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	2101      	movs	r1, #1
 800499a:	4618      	mov	r0, r3
 800499c:	f000 ff2a 	bl	80057f4 <RCCEx_PLL2_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80049a4:	e003      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
      break;
 80049aa:	e000      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80049ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d109      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049b4:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80049b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c0:	490d      	ldr	r1, [pc, #52]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	650b      	str	r3, [r1, #80]	; 0x50
 80049c6:	e001      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
 80049ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d034      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d81d      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x598>
 80049e0:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80049e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e6:	bf00      	nop
 80049e8:	08004a23 	.word	0x08004a23
 80049ec:	080049fd 	.word	0x080049fd
 80049f0:	08004a0b 	.word	0x08004a0b
 80049f4:	08004a23 	.word	0x08004a23
 80049f8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049fc:	4bb1      	ldr	r3, [pc, #708]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	4ab0      	ldr	r2, [pc, #704]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004a08:	e00c      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	2102      	movs	r1, #2
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 feef 	bl	80057f4 <RCCEx_PLL2_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004a1a:	e003      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a20:	e000      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8004a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a24:	7dfb      	ldrb	r3, [r7, #23]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004a2a:	4ba6      	ldr	r3, [pc, #664]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2e:	f023 0203 	bic.w	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	49a3      	ldr	r1, [pc, #652]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a3c:	e001      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
 8004a40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 8086 	beq.w	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a50:	4b9d      	ldr	r3, [pc, #628]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a9c      	ldr	r2, [pc, #624]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a5c:	f7fd fe88 	bl	8002770 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a62:	e009      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a64:	f7fd fe84 	bl	8002770 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b64      	cmp	r3, #100	; 0x64
 8004a70:	d902      	bls.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	75fb      	strb	r3, [r7, #23]
        break;
 8004a76:	e005      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a78:	4b93      	ldr	r3, [pc, #588]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0ef      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d166      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004a8a:	4b8e      	ldr	r3, [pc, #568]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004a8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a94:	4053      	eors	r3, r2
 8004a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d013      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a9e:	4b89      	ldr	r3, [pc, #548]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004aa8:	4b86      	ldr	r3, [pc, #536]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	4a85      	ldr	r2, [pc, #532]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ab4:	4b83      	ldr	r3, [pc, #524]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	4a82      	ldr	r2, [pc, #520]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004abe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ac0:	4a80      	ldr	r2, [pc, #512]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad0:	d115      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad2:	f7fd fe4d 	bl	8002770 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ad8:	e00b      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ada:	f7fd fe49 	bl	8002770 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d902      	bls.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	75fb      	strb	r3, [r7, #23]
            break;
 8004af0:	e005      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004af2:	4b74      	ldr	r3, [pc, #464]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0ed      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d126      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b12:	d10d      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8004b14:	4b6b      	ldr	r3, [pc, #428]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b22:	0919      	lsrs	r1, r3, #4
 8004b24:	4b69      	ldr	r3, [pc, #420]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b26:	400b      	ands	r3, r1
 8004b28:	4966      	ldr	r1, [pc, #408]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	610b      	str	r3, [r1, #16]
 8004b2e:	e005      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8004b30:	4b64      	ldr	r3, [pc, #400]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	4a63      	ldr	r2, [pc, #396]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b3a:	6113      	str	r3, [r2, #16]
 8004b3c:	4b61      	ldr	r3, [pc, #388]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4a:	495e      	ldr	r1, [pc, #376]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	670b      	str	r3, [r1, #112]	; 0x70
 8004b50:	e004      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
 8004b54:	75bb      	strb	r3, [r7, #22]
 8004b56:	e001      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
 8004b5a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d07e      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6c:	2b28      	cmp	r3, #40	; 0x28
 8004b6e:	d867      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004b70:	a201      	add	r2, pc, #4	; (adr r2, 8004b78 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b76:	bf00      	nop
 8004b78:	08004c47 	.word	0x08004c47
 8004b7c:	08004c41 	.word	0x08004c41
 8004b80:	08004c41 	.word	0x08004c41
 8004b84:	08004c41 	.word	0x08004c41
 8004b88:	08004c41 	.word	0x08004c41
 8004b8c:	08004c41 	.word	0x08004c41
 8004b90:	08004c41 	.word	0x08004c41
 8004b94:	08004c41 	.word	0x08004c41
 8004b98:	08004c1d 	.word	0x08004c1d
 8004b9c:	08004c41 	.word	0x08004c41
 8004ba0:	08004c41 	.word	0x08004c41
 8004ba4:	08004c41 	.word	0x08004c41
 8004ba8:	08004c41 	.word	0x08004c41
 8004bac:	08004c41 	.word	0x08004c41
 8004bb0:	08004c41 	.word	0x08004c41
 8004bb4:	08004c41 	.word	0x08004c41
 8004bb8:	08004c2f 	.word	0x08004c2f
 8004bbc:	08004c41 	.word	0x08004c41
 8004bc0:	08004c41 	.word	0x08004c41
 8004bc4:	08004c41 	.word	0x08004c41
 8004bc8:	08004c41 	.word	0x08004c41
 8004bcc:	08004c41 	.word	0x08004c41
 8004bd0:	08004c41 	.word	0x08004c41
 8004bd4:	08004c41 	.word	0x08004c41
 8004bd8:	08004c47 	.word	0x08004c47
 8004bdc:	08004c41 	.word	0x08004c41
 8004be0:	08004c41 	.word	0x08004c41
 8004be4:	08004c41 	.word	0x08004c41
 8004be8:	08004c41 	.word	0x08004c41
 8004bec:	08004c41 	.word	0x08004c41
 8004bf0:	08004c41 	.word	0x08004c41
 8004bf4:	08004c41 	.word	0x08004c41
 8004bf8:	08004c47 	.word	0x08004c47
 8004bfc:	08004c41 	.word	0x08004c41
 8004c00:	08004c41 	.word	0x08004c41
 8004c04:	08004c41 	.word	0x08004c41
 8004c08:	08004c41 	.word	0x08004c41
 8004c0c:	08004c41 	.word	0x08004c41
 8004c10:	08004c41 	.word	0x08004c41
 8004c14:	08004c41 	.word	0x08004c41
 8004c18:	08004c47 	.word	0x08004c47
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	2101      	movs	r1, #1
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fde6 	bl	80057f4 <RCCEx_PLL2_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c2c:	e00c      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3324      	adds	r3, #36	; 0x24
 8004c32:	2101      	movs	r1, #1
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fe8f 	bl	8005958 <RCCEx_PLL3_Config>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c3e:	e003      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	75fb      	strb	r3, [r7, #23]
      break;
 8004c44:	e000      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8004c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c4e:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c52:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5a:	491a      	ldr	r1, [pc, #104]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	654b      	str	r3, [r1, #84]	; 0x54
 8004c60:	e001      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
 8004c64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d03e      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	2b05      	cmp	r3, #5
 8004c78:	d820      	bhi.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004c7a:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8004c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c80:	08004cd1 	.word	0x08004cd1
 8004c84:	08004c99 	.word	0x08004c99
 8004c88:	08004cab 	.word	0x08004cab
 8004c8c:	08004cd1 	.word	0x08004cd1
 8004c90:	08004cd1 	.word	0x08004cd1
 8004c94:	08004cd1 	.word	0x08004cd1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fda8 	bl	80057f4 <RCCEx_PLL2_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ca8:	e013      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3324      	adds	r3, #36	; 0x24
 8004cae:	2101      	movs	r1, #1
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fe51 	bl	8005958 <RCCEx_PLL3_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8004cc0:	e007      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004cc2:	bf00      	nop
 8004cc4:	58024400 	.word	0x58024400
 8004cc8:	58024800 	.word	0x58024800
 8004ccc:	00ffffcf 	.word	0x00ffffcf
      break;
 8004cd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004cd8:	4b9f      	ldr	r3, [pc, #636]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cdc:	f023 0207 	bic.w	r2, r3, #7
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	499c      	ldr	r1, [pc, #624]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	654b      	str	r3, [r1, #84]	; 0x54
 8004cea:	e001      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cec:	7dfb      	ldrb	r3, [r7, #23]
 8004cee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d039      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d820      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8004d06:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004d4f 	.word	0x08004d4f
 8004d10:	08004d25 	.word	0x08004d25
 8004d14:	08004d37 	.word	0x08004d37
 8004d18:	08004d4f 	.word	0x08004d4f
 8004d1c:	08004d4f 	.word	0x08004d4f
 8004d20:	08004d4f 	.word	0x08004d4f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fd62 	bl	80057f4 <RCCEx_PLL2_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004d34:	e00c      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3324      	adds	r3, #36	; 0x24
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fe0b 	bl	8005958 <RCCEx_PLL3_Config>
 8004d42:	4603      	mov	r3, r0
 8004d44:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004d46:	e003      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d4c:	e000      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8004d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10a      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d56:	4b80      	ldr	r3, [pc, #512]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5a:	f023 0207 	bic.w	r2, r3, #7
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d64:	497c      	ldr	r1, [pc, #496]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	658b      	str	r3, [r1, #88]	; 0x58
 8004d6a:	e001      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6c:	7dfb      	ldrb	r3, [r7, #23]
 8004d6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d04b      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d86:	d02e      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d8c:	d828      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d92:	d02a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d98:	d822      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004d9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d9e:	d026      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004da0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004da4:	d81c      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004daa:	d010      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8004dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db0:	d816      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01d      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004db6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dba:	d111      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fd16 	bl	80057f4 <RCCEx_PLL2_Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004dcc:	e012      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3324      	adds	r3, #36	; 0x24
 8004dd2:	2102      	movs	r1, #2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fdbf 	bl	8005958 <RCCEx_PLL3_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004dde:	e009      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	75fb      	strb	r3, [r7, #23]
      break;
 8004de4:	e006      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004de6:	bf00      	nop
 8004de8:	e004      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004dea:	bf00      	nop
 8004dec:	e002      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004dee:	bf00      	nop
 8004df0:	e000      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dfa:	4b57      	ldr	r3, [pc, #348]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e08:	4953      	ldr	r1, [pc, #332]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	654b      	str	r3, [r1, #84]	; 0x54
 8004e0e:	e001      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d04b      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e26:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e2a:	d02e      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8004e2c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e30:	d828      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e36:	d02a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3c:	d822      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e42:	d026      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004e44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e48:	d81c      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e4e:	d010      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8004e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e54:	d816      	bhi.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01d      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5e:	d111      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	2100      	movs	r1, #0
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fcc4 	bl	80057f4 <RCCEx_PLL2_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004e70:	e012      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3324      	adds	r3, #36	; 0x24
 8004e76:	2102      	movs	r1, #2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fd6d 	bl	8005958 <RCCEx_PLL3_Config>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004e82:	e009      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	75fb      	strb	r3, [r7, #23]
      break;
 8004e88:	e006      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e004      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004e8e:	bf00      	nop
 8004e90:	e002      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004e92:	bf00      	nop
 8004e94:	e000      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e9e:	4b2e      	ldr	r3, [pc, #184]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eac:	492a      	ldr	r1, [pc, #168]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	658b      	str	r3, [r1, #88]	; 0x58
 8004eb2:	e001      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb4:	7dfb      	ldrb	r3, [r7, #23]
 8004eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d04d      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ece:	d02e      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004ed0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ed4:	d828      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eda:	d02a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee0:	d822      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004ee2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ee6:	d026      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004ee8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004eec:	d81c      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ef2:	d010      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ef8:	d816      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01d      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f02:	d111      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3304      	adds	r3, #4
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fc72 	bl	80057f4 <RCCEx_PLL2_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004f14:	e012      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3324      	adds	r3, #36	; 0x24
 8004f1a:	2102      	movs	r1, #2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fd1b 	bl	8005958 <RCCEx_PLL3_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004f26:	e009      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2c:	e006      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e004      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004f32:	bf00      	nop
 8004f34:	e002      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004f36:	bf00      	nop
 8004f38:	e000      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f50:	4901      	ldr	r1, [pc, #4]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	658b      	str	r3, [r1, #88]	; 0x58
 8004f56:	e003      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004f58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d018      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f74:	d10a      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3324      	adds	r3, #36	; 0x24
 8004f7a:	2102      	movs	r1, #2
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fceb 	bl	8005958 <RCCEx_PLL3_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004f8c:	4b8a      	ldr	r3, [pc, #552]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f98:	4987      	ldr	r1, [pc, #540]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb4:	d10a      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3324      	adds	r3, #36	; 0x24
 8004fba:	2102      	movs	r1, #2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fccb 	bl	8005958 <RCCEx_PLL3_Config>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fcc:	4b7a      	ldr	r3, [pc, #488]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	4977      	ldr	r1, [pc, #476]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d034      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ff2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ff6:	d01d      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004ff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ffc:	d817      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005006:	d009      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005008:	e011      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3304      	adds	r3, #4
 800500e:	2100      	movs	r1, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fbef 	bl	80057f4 <RCCEx_PLL2_Config>
 8005016:	4603      	mov	r3, r0
 8005018:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800501a:	e00c      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3324      	adds	r3, #36	; 0x24
 8005020:	2102      	movs	r1, #2
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fc98 	bl	8005958 <RCCEx_PLL3_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800502c:	e003      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	75fb      	strb	r3, [r7, #23]
      break;
 8005032:	e000      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005036:	7dfb      	ldrb	r3, [r7, #23]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800503c:	4b5e      	ldr	r3, [pc, #376]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800503e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005040:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800504a:	495b      	ldr	r1, [pc, #364]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800504c:	4313      	orrs	r3, r2
 800504e:	658b      	str	r3, [r1, #88]	; 0x58
 8005050:	e001      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005052:	7dfb      	ldrb	r3, [r7, #23]
 8005054:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d033      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005068:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800506c:	d01c      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800506e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005072:	d816      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005078:	d003      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800507a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800507e:	d007      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8005080:	e00f      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005082:	4b4d      	ldr	r3, [pc, #308]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	4a4c      	ldr	r2, [pc, #304]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800508c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800508e:	e00c      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3324      	adds	r3, #36	; 0x24
 8005094:	2101      	movs	r1, #1
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fc5e 	bl	8005958 <RCCEx_PLL3_Config>
 800509c:	4603      	mov	r3, r0
 800509e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80050a0:	e003      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
      break;
 80050a6:	e000      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80050a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050aa:	7dfb      	ldrb	r3, [r7, #23]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050b0:	4b41      	ldr	r3, [pc, #260]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80050b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050be:	493e      	ldr	r1, [pc, #248]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	654b      	str	r3, [r1, #84]	; 0x54
 80050c4:	e001      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c6:	7dfb      	ldrb	r3, [r7, #23]
 80050c8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d029      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80050de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e2:	d007      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80050e4:	e00f      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e6:	4b34      	ldr	r3, [pc, #208]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	4a33      	ldr	r2, [pc, #204]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80050ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80050f2:	e00b      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3304      	adds	r3, #4
 80050f8:	2102      	movs	r1, #2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fb7a 	bl	80057f4 <RCCEx_PLL2_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005104:	e002      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	75fb      	strb	r3, [r7, #23]
      break;
 800510a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800510c:	7dfb      	ldrb	r3, [r7, #23]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d109      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005112:	4b29      	ldr	r3, [pc, #164]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005116:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511e:	4926      	ldr	r1, [pc, #152]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005120:	4313      	orrs	r3, r2
 8005122:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005124:	e001      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005126:	7dfb      	ldrb	r3, [r7, #23]
 8005128:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3324      	adds	r3, #36	; 0x24
 800513a:	2102      	movs	r1, #2
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fc0b 	bl	8005958 <RCCEx_PLL3_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d033      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800515c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005160:	d017      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005166:	d811      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800516c:	d013      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800516e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005172:	d80b      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d010      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8005178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800517c:	d106      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800517e:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	4a0d      	ldr	r2, [pc, #52]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005188:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800518a:	e007      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	75fb      	strb	r3, [r7, #23]
      break;
 8005190:	e004      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005192:	bf00      	nop
 8005194:	e002      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005196:	bf00      	nop
 8005198:	e000      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800519a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800519c:	7dfb      	ldrb	r3, [r7, #23]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10c      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ae:	4902      	ldr	r1, [pc, #8]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	654b      	str	r3, [r1, #84]	; 0x54
 80051b4:	e004      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80051b6:	bf00      	nop
 80051b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051cc:	4b29      	ldr	r3, [pc, #164]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80051ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d8:	4926      	ldr	r1, [pc, #152]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051ea:	4b22      	ldr	r3, [pc, #136]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80051ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051f6:	491f      	ldr	r1, [pc, #124]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00d      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005208:	4b1a      	ldr	r3, [pc, #104]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	4a19      	ldr	r2, [pc, #100]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800520e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005212:	6113      	str	r3, [r2, #16]
 8005214:	4b17      	ldr	r3, [pc, #92]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800521e:	4915      	ldr	r1, [pc, #84]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005220:	4313      	orrs	r3, r2
 8005222:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	da08      	bge.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800522c:	4b11      	ldr	r3, [pc, #68]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800522e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005230:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005238:	490e      	ldr	r1, [pc, #56]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800523a:	4313      	orrs	r3, r2
 800523c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800524a:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005258:	4906      	ldr	r1, [pc, #24]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800525a:	4313      	orrs	r3, r2
 800525c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800525e:	7dbb      	ldrb	r3, [r7, #22]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	e000      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	58024400 	.word	0x58024400

08005278 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800527c:	f7ff f8a6 	bl	80043cc <HAL_RCC_GetHCLKFreq>
 8005280:	4602      	mov	r2, r0
 8005282:	4b06      	ldr	r3, [pc, #24]	; (800529c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	091b      	lsrs	r3, r3, #4
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	4904      	ldr	r1, [pc, #16]	; (80052a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800528e:	5ccb      	ldrb	r3, [r1, r3]
 8005290:	f003 031f 	and.w	r3, r3, #31
 8005294:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005298:	4618      	mov	r0, r3
 800529a:	bd80      	pop	{r7, pc}
 800529c:	58024400 	.word	0x58024400
 80052a0:	080087b0 	.word	0x080087b0

080052a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b089      	sub	sp, #36	; 0x24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052ac:	4ba1      	ldr	r3, [pc, #644]	; (8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b0:	f003 0303 	and.w	r3, r3, #3
 80052b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80052b6:	4b9f      	ldr	r3, [pc, #636]	; (8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	0b1b      	lsrs	r3, r3, #12
 80052bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80052c2:	4b9c      	ldr	r3, [pc, #624]	; (8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	091b      	lsrs	r3, r3, #4
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80052ce:	4b99      	ldr	r3, [pc, #612]	; (8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	08db      	lsrs	r3, r3, #3
 80052d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	fb02 f303 	mul.w	r3, r2, r3
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8111 	beq.w	8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	f000 8083 	beq.w	8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	f200 80a1 	bhi.w	8005444 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d056      	beq.n	80053bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800530e:	e099      	b.n	8005444 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005310:	4b88      	ldr	r3, [pc, #544]	; (8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d02d      	beq.n	8005378 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800531c:	4b85      	ldr	r3, [pc, #532]	; (8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	08db      	lsrs	r3, r3, #3
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	4a84      	ldr	r2, [pc, #528]	; (8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
 800532c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	ee07 3a90 	vmov	s15, r3
 8005334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005346:	4b7b      	ldr	r3, [pc, #492]	; (8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005356:	ed97 6a03 	vldr	s12, [r7, #12]
 800535a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800553c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800535e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800536a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005372:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005376:	e087      	b.n	8005488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538a:	4b6a      	ldr	r3, [pc, #424]	; (8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539a:	ed97 6a03 	vldr	s12, [r7, #12]
 800539e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800553c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053ba:	e065      	b.n	8005488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80053ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ce:	4b59      	ldr	r3, [pc, #356]	; (8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053de:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800553c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053fe:	e043      	b.n	8005488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005548 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800540e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005412:	4b48      	ldr	r3, [pc, #288]	; (8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541a:	ee07 3a90 	vmov	s15, r3
 800541e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005422:	ed97 6a03 	vldr	s12, [r7, #12]
 8005426:	eddf 5a45 	vldr	s11, [pc, #276]	; 800553c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800542a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800542e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005442:	e021      	b.n	8005488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005456:	4b37      	ldr	r3, [pc, #220]	; (8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005466:	ed97 6a03 	vldr	s12, [r7, #12]
 800546a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800553c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800546e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800547a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005482:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005486:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005488:	4b2a      	ldr	r3, [pc, #168]	; (8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	0a5b      	lsrs	r3, r3, #9
 800548e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800549e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80054a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ae:	ee17 2a90 	vmov	r2, s15
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80054b6:	4b1f      	ldr	r3, [pc, #124]	; (8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	0c1b      	lsrs	r3, r3, #16
 80054bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c0:	ee07 3a90 	vmov	s15, r3
 80054c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054dc:	ee17 2a90 	vmov	r2, s15
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80054e4:	4b13      	ldr	r3, [pc, #76]	; (8005534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	0e1b      	lsrs	r3, r3, #24
 80054ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800550a:	ee17 2a90 	vmov	r2, s15
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005512:	e008      	b.n	8005526 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	609a      	str	r2, [r3, #8]
}
 8005526:	bf00      	nop
 8005528:	3724      	adds	r7, #36	; 0x24
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	58024400 	.word	0x58024400
 8005538:	03d09000 	.word	0x03d09000
 800553c:	46000000 	.word	0x46000000
 8005540:	4c742400 	.word	0x4c742400
 8005544:	4a742400 	.word	0x4a742400
 8005548:	4af42400 	.word	0x4af42400

0800554c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800554c:	b480      	push	{r7}
 800554e:	b089      	sub	sp, #36	; 0x24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005554:	4ba1      	ldr	r3, [pc, #644]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	f003 0303 	and.w	r3, r3, #3
 800555c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800555e:	4b9f      	ldr	r3, [pc, #636]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005562:	0d1b      	lsrs	r3, r3, #20
 8005564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005568:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800556a:	4b9c      	ldr	r3, [pc, #624]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	0a1b      	lsrs	r3, r3, #8
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005576:	4b99      	ldr	r3, [pc, #612]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557a:	08db      	lsrs	r3, r3, #3
 800557c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	fb02 f303 	mul.w	r3, r2, r3
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8111 	beq.w	80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	2b02      	cmp	r3, #2
 800559e:	f000 8083 	beq.w	80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	f200 80a1 	bhi.w	80056ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d056      	beq.n	8005664 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80055b6:	e099      	b.n	80056ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055b8:	4b88      	ldr	r3, [pc, #544]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d02d      	beq.n	8005620 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055c4:	4b85      	ldr	r3, [pc, #532]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	08db      	lsrs	r3, r3, #3
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	4a84      	ldr	r2, [pc, #528]	; (80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
 80055d4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	ee07 3a90 	vmov	s15, r3
 80055dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	ee07 3a90 	vmov	s15, r3
 80055e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ee:	4b7b      	ldr	r3, [pc, #492]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005602:	eddf 5a78 	vldr	s11, [pc, #480]	; 80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800560a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800560e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800561e:	e087      	b.n	8005730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800562e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005632:	4b6a      	ldr	r3, [pc, #424]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563a:	ee07 3a90 	vmov	s15, r3
 800563e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005642:	ed97 6a03 	vldr	s12, [r7, #12]
 8005646:	eddf 5a67 	vldr	s11, [pc, #412]	; 80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800564a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800564e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800565e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005662:	e065      	b.n	8005730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005676:	4b59      	ldr	r3, [pc, #356]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005686:	ed97 6a03 	vldr	s12, [r7, #12]
 800568a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800568e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056a6:	e043      	b.n	8005730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80057f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80056b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ba:	4b48      	ldr	r3, [pc, #288]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056ea:	e021      	b.n	8005730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fe:	4b37      	ldr	r3, [pc, #220]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005712:	eddf 5a34 	vldr	s11, [pc, #208]	; 80057e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800572e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005730:	4b2a      	ldr	r3, [pc, #168]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005734:	0a5b      	lsrs	r3, r3, #9
 8005736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800574a:	edd7 6a07 	vldr	s13, [r7, #28]
 800574e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005756:	ee17 2a90 	vmov	r2, s15
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800575e:	4b1f      	ldr	r3, [pc, #124]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	0c1b      	lsrs	r3, r3, #16
 8005764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005768:	ee07 3a90 	vmov	s15, r3
 800576c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005774:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005778:	edd7 6a07 	vldr	s13, [r7, #28]
 800577c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005784:	ee17 2a90 	vmov	r2, s15
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800578c:	4b13      	ldr	r3, [pc, #76]	; (80057dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	0e1b      	lsrs	r3, r3, #24
 8005792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80057aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057b2:	ee17 2a90 	vmov	r2, s15
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80057ba:	e008      	b.n	80057ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	609a      	str	r2, [r3, #8]
}
 80057ce:	bf00      	nop
 80057d0:	3724      	adds	r7, #36	; 0x24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	58024400 	.word	0x58024400
 80057e0:	03d09000 	.word	0x03d09000
 80057e4:	46000000 	.word	0x46000000
 80057e8:	4c742400 	.word	0x4c742400
 80057ec:	4a742400 	.word	0x4a742400
 80057f0:	4af42400 	.word	0x4af42400

080057f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005802:	4b53      	ldr	r3, [pc, #332]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	2b03      	cmp	r3, #3
 800580c:	d101      	bne.n	8005812 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e099      	b.n	8005946 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005812:	4b4f      	ldr	r3, [pc, #316]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a4e      	ldr	r2, [pc, #312]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 8005818:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800581c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800581e:	f7fc ffa7 	bl	8002770 <HAL_GetTick>
 8005822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005824:	e008      	b.n	8005838 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005826:	f7fc ffa3 	bl	8002770 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e086      	b.n	8005946 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005838:	4b45      	ldr	r3, [pc, #276]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1f0      	bne.n	8005826 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005844:	4b42      	ldr	r3, [pc, #264]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	031b      	lsls	r3, r3, #12
 8005852:	493f      	ldr	r1, [pc, #252]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 8005854:	4313      	orrs	r3, r2
 8005856:	628b      	str	r3, [r1, #40]	; 0x28
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	3b01      	subs	r3, #1
 800585e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	3b01      	subs	r3, #1
 8005868:	025b      	lsls	r3, r3, #9
 800586a:	b29b      	uxth	r3, r3
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	3b01      	subs	r3, #1
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	3b01      	subs	r3, #1
 8005882:	061b      	lsls	r3, r3, #24
 8005884:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005888:	4931      	ldr	r1, [pc, #196]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 800588a:	4313      	orrs	r3, r2
 800588c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800588e:	4b30      	ldr	r3, [pc, #192]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	492d      	ldr	r1, [pc, #180]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 800589c:	4313      	orrs	r3, r2
 800589e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058a0:	4b2b      	ldr	r3, [pc, #172]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	f023 0220 	bic.w	r2, r3, #32
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	4928      	ldr	r1, [pc, #160]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058b2:	4b27      	ldr	r3, [pc, #156]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	4a26      	ldr	r2, [pc, #152]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 80058b8:	f023 0310 	bic.w	r3, r3, #16
 80058bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058be:	4b24      	ldr	r3, [pc, #144]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 80058c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058c2:	4b24      	ldr	r3, [pc, #144]	; (8005954 <RCCEx_PLL2_Config+0x160>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	69d2      	ldr	r2, [r2, #28]
 80058ca:	00d2      	lsls	r2, r2, #3
 80058cc:	4920      	ldr	r1, [pc, #128]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058d2:	4b1f      	ldr	r3, [pc, #124]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	4a1e      	ldr	r2, [pc, #120]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 80058d8:	f043 0310 	orr.w	r3, r3, #16
 80058dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80058e4:	4b1a      	ldr	r3, [pc, #104]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	4a19      	ldr	r2, [pc, #100]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 80058ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058f0:	e00f      	b.n	8005912 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d106      	bne.n	8005906 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80058f8:	4b15      	ldr	r3, [pc, #84]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	4a14      	ldr	r2, [pc, #80]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 80058fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005902:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005904:	e005      	b.n	8005912 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005906:	4b12      	ldr	r3, [pc, #72]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590a:	4a11      	ldr	r2, [pc, #68]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 800590c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005910:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005912:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a0e      	ldr	r2, [pc, #56]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 8005918:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800591c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800591e:	f7fc ff27 	bl	8002770 <HAL_GetTick>
 8005922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005924:	e008      	b.n	8005938 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005926:	f7fc ff23 	bl	8002770 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e006      	b.n	8005946 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005938:	4b05      	ldr	r3, [pc, #20]	; (8005950 <RCCEx_PLL2_Config+0x15c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0f0      	beq.n	8005926 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	58024400 	.word	0x58024400
 8005954:	ffff0007 	.word	0xffff0007

08005958 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005966:	4b53      	ldr	r3, [pc, #332]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	2b03      	cmp	r3, #3
 8005970:	d101      	bne.n	8005976 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e099      	b.n	8005aaa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005976:	4b4f      	ldr	r3, [pc, #316]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a4e      	ldr	r2, [pc, #312]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 800597c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005982:	f7fc fef5 	bl	8002770 <HAL_GetTick>
 8005986:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005988:	e008      	b.n	800599c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800598a:	f7fc fef1 	bl	8002770 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e086      	b.n	8005aaa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800599c:	4b45      	ldr	r3, [pc, #276]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1f0      	bne.n	800598a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059a8:	4b42      	ldr	r3, [pc, #264]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	051b      	lsls	r3, r3, #20
 80059b6:	493f      	ldr	r1, [pc, #252]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	628b      	str	r3, [r1, #40]	; 0x28
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	025b      	lsls	r3, r3, #9
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	041b      	lsls	r3, r3, #16
 80059da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	061b      	lsls	r3, r3, #24
 80059e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059ec:	4931      	ldr	r1, [pc, #196]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80059f2:	4b30      	ldr	r3, [pc, #192]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	492d      	ldr	r1, [pc, #180]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a04:	4b2b      	ldr	r3, [pc, #172]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	4928      	ldr	r1, [pc, #160]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a16:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	4a26      	ldr	r2, [pc, #152]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a22:	4b24      	ldr	r3, [pc, #144]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a26:	4b24      	ldr	r3, [pc, #144]	; (8005ab8 <RCCEx_PLL3_Config+0x160>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	69d2      	ldr	r2, [r2, #28]
 8005a2e:	00d2      	lsls	r2, r2, #3
 8005a30:	4920      	ldr	r1, [pc, #128]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a36:	4b1f      	ldr	r3, [pc, #124]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a48:	4b1a      	ldr	r3, [pc, #104]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	4a19      	ldr	r2, [pc, #100]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a54:	e00f      	b.n	8005a76 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d106      	bne.n	8005a6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a5c:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	4a14      	ldr	r2, [pc, #80]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a68:	e005      	b.n	8005a76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a6a:	4b12      	ldr	r3, [pc, #72]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	4a11      	ldr	r2, [pc, #68]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a76:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a0e      	ldr	r2, [pc, #56]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a82:	f7fc fe75 	bl	8002770 <HAL_GetTick>
 8005a86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a88:	e008      	b.n	8005a9c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a8a:	f7fc fe71 	bl	8002770 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e006      	b.n	8005aaa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <RCCEx_PLL3_Config+0x15c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0f0      	beq.n	8005a8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	58024400 	.word	0x58024400
 8005ab8:	ffff0007 	.word	0xffff0007

08005abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e049      	b.n	8005b62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fc fa66 	bl	8001fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
 8005af8:	4619      	mov	r1, r3
 8005afa:	4610      	mov	r0, r2
 8005afc:	f000 ff12 	bl	8006924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d001      	beq.n	8005b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e05e      	b.n	8005c42 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a2b      	ldr	r2, [pc, #172]	; (8005c50 <HAL_TIM_Base_Start_IT+0xe4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d02c      	beq.n	8005c00 <HAL_TIM_Base_Start_IT+0x94>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bae:	d027      	beq.n	8005c00 <HAL_TIM_Base_Start_IT+0x94>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a27      	ldr	r2, [pc, #156]	; (8005c54 <HAL_TIM_Base_Start_IT+0xe8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d022      	beq.n	8005c00 <HAL_TIM_Base_Start_IT+0x94>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a26      	ldr	r2, [pc, #152]	; (8005c58 <HAL_TIM_Base_Start_IT+0xec>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d01d      	beq.n	8005c00 <HAL_TIM_Base_Start_IT+0x94>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a24      	ldr	r2, [pc, #144]	; (8005c5c <HAL_TIM_Base_Start_IT+0xf0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d018      	beq.n	8005c00 <HAL_TIM_Base_Start_IT+0x94>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a23      	ldr	r2, [pc, #140]	; (8005c60 <HAL_TIM_Base_Start_IT+0xf4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d013      	beq.n	8005c00 <HAL_TIM_Base_Start_IT+0x94>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a21      	ldr	r2, [pc, #132]	; (8005c64 <HAL_TIM_Base_Start_IT+0xf8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00e      	beq.n	8005c00 <HAL_TIM_Base_Start_IT+0x94>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a20      	ldr	r2, [pc, #128]	; (8005c68 <HAL_TIM_Base_Start_IT+0xfc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d009      	beq.n	8005c00 <HAL_TIM_Base_Start_IT+0x94>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1e      	ldr	r2, [pc, #120]	; (8005c6c <HAL_TIM_Base_Start_IT+0x100>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d004      	beq.n	8005c00 <HAL_TIM_Base_Start_IT+0x94>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <HAL_TIM_Base_Start_IT+0x104>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d115      	bne.n	8005c2c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <HAL_TIM_Base_Start_IT+0x108>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b06      	cmp	r3, #6
 8005c10:	d015      	beq.n	8005c3e <HAL_TIM_Base_Start_IT+0xd2>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c18:	d011      	beq.n	8005c3e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0201 	orr.w	r2, r2, #1
 8005c28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2a:	e008      	b.n	8005c3e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0201 	orr.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	e000      	b.n	8005c40 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40010000 	.word	0x40010000
 8005c54:	40000400 	.word	0x40000400
 8005c58:	40000800 	.word	0x40000800
 8005c5c:	40000c00 	.word	0x40000c00
 8005c60:	40010400 	.word	0x40010400
 8005c64:	40001800 	.word	0x40001800
 8005c68:	40014000 	.word	0x40014000
 8005c6c:	4000e000 	.word	0x4000e000
 8005c70:	4000e400 	.word	0x4000e400
 8005c74:	00010007 	.word	0x00010007

08005c78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e049      	b.n	8005d1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fc f920 	bl	8001ee4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f000 fe34 	bl	8006924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <HAL_TIM_PWM_Start+0x24>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	bf14      	ite	ne
 8005d44:	2301      	movne	r3, #1
 8005d46:	2300      	moveq	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	e03c      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x9e>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d109      	bne.n	8005d66 <HAL_TIM_PWM_Start+0x3e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	bf14      	ite	ne
 8005d5e:	2301      	movne	r3, #1
 8005d60:	2300      	moveq	r3, #0
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	e02f      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x9e>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d109      	bne.n	8005d80 <HAL_TIM_PWM_Start+0x58>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	bf14      	ite	ne
 8005d78:	2301      	movne	r3, #1
 8005d7a:	2300      	moveq	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	e022      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x9e>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b0c      	cmp	r3, #12
 8005d84:	d109      	bne.n	8005d9a <HAL_TIM_PWM_Start+0x72>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	bf14      	ite	ne
 8005d92:	2301      	movne	r3, #1
 8005d94:	2300      	moveq	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	e015      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x9e>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b10      	cmp	r3, #16
 8005d9e:	d109      	bne.n	8005db4 <HAL_TIM_PWM_Start+0x8c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	bf14      	ite	ne
 8005dac:	2301      	movne	r3, #1
 8005dae:	2300      	moveq	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	e008      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x9e>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	bf14      	ite	ne
 8005dc0:	2301      	movne	r3, #1
 8005dc2:	2300      	moveq	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e0ab      	b.n	8005f26 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <HAL_TIM_PWM_Start+0xb6>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ddc:	e023      	b.n	8005e26 <HAL_TIM_PWM_Start+0xfe>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d104      	bne.n	8005dee <HAL_TIM_PWM_Start+0xc6>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dec:	e01b      	b.n	8005e26 <HAL_TIM_PWM_Start+0xfe>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d104      	bne.n	8005dfe <HAL_TIM_PWM_Start+0xd6>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dfc:	e013      	b.n	8005e26 <HAL_TIM_PWM_Start+0xfe>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b0c      	cmp	r3, #12
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_PWM_Start+0xe6>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e0c:	e00b      	b.n	8005e26 <HAL_TIM_PWM_Start+0xfe>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b10      	cmp	r3, #16
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_PWM_Start+0xf6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e1c:	e003      	b.n	8005e26 <HAL_TIM_PWM_Start+0xfe>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 f992 	bl	8007158 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a3d      	ldr	r2, [pc, #244]	; (8005f30 <HAL_TIM_PWM_Start+0x208>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d013      	beq.n	8005e66 <HAL_TIM_PWM_Start+0x13e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a3c      	ldr	r2, [pc, #240]	; (8005f34 <HAL_TIM_PWM_Start+0x20c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d00e      	beq.n	8005e66 <HAL_TIM_PWM_Start+0x13e>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a3a      	ldr	r2, [pc, #232]	; (8005f38 <HAL_TIM_PWM_Start+0x210>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d009      	beq.n	8005e66 <HAL_TIM_PWM_Start+0x13e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a39      	ldr	r2, [pc, #228]	; (8005f3c <HAL_TIM_PWM_Start+0x214>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d004      	beq.n	8005e66 <HAL_TIM_PWM_Start+0x13e>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a37      	ldr	r2, [pc, #220]	; (8005f40 <HAL_TIM_PWM_Start+0x218>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d101      	bne.n	8005e6a <HAL_TIM_PWM_Start+0x142>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <HAL_TIM_PWM_Start+0x144>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d007      	beq.n	8005e80 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a2a      	ldr	r2, [pc, #168]	; (8005f30 <HAL_TIM_PWM_Start+0x208>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d02c      	beq.n	8005ee4 <HAL_TIM_PWM_Start+0x1bc>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e92:	d027      	beq.n	8005ee4 <HAL_TIM_PWM_Start+0x1bc>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a2a      	ldr	r2, [pc, #168]	; (8005f44 <HAL_TIM_PWM_Start+0x21c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d022      	beq.n	8005ee4 <HAL_TIM_PWM_Start+0x1bc>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a29      	ldr	r2, [pc, #164]	; (8005f48 <HAL_TIM_PWM_Start+0x220>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d01d      	beq.n	8005ee4 <HAL_TIM_PWM_Start+0x1bc>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a27      	ldr	r2, [pc, #156]	; (8005f4c <HAL_TIM_PWM_Start+0x224>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d018      	beq.n	8005ee4 <HAL_TIM_PWM_Start+0x1bc>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1f      	ldr	r2, [pc, #124]	; (8005f34 <HAL_TIM_PWM_Start+0x20c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d013      	beq.n	8005ee4 <HAL_TIM_PWM_Start+0x1bc>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a23      	ldr	r2, [pc, #140]	; (8005f50 <HAL_TIM_PWM_Start+0x228>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00e      	beq.n	8005ee4 <HAL_TIM_PWM_Start+0x1bc>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a1b      	ldr	r2, [pc, #108]	; (8005f38 <HAL_TIM_PWM_Start+0x210>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d009      	beq.n	8005ee4 <HAL_TIM_PWM_Start+0x1bc>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1f      	ldr	r2, [pc, #124]	; (8005f54 <HAL_TIM_PWM_Start+0x22c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d004      	beq.n	8005ee4 <HAL_TIM_PWM_Start+0x1bc>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1e      	ldr	r2, [pc, #120]	; (8005f58 <HAL_TIM_PWM_Start+0x230>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d115      	bne.n	8005f10 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	4b1c      	ldr	r3, [pc, #112]	; (8005f5c <HAL_TIM_PWM_Start+0x234>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b06      	cmp	r3, #6
 8005ef4:	d015      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x1fa>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005efc:	d011      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 0201 	orr.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f0e:	e008      	b.n	8005f22 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0201 	orr.w	r2, r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	e000      	b.n	8005f24 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40010000 	.word	0x40010000
 8005f34:	40010400 	.word	0x40010400
 8005f38:	40014000 	.word	0x40014000
 8005f3c:	40014400 	.word	0x40014400
 8005f40:	40014800 	.word	0x40014800
 8005f44:	40000400 	.word	0x40000400
 8005f48:	40000800 	.word	0x40000800
 8005f4c:	40000c00 	.word	0x40000c00
 8005f50:	40001800 	.word	0x40001800
 8005f54:	4000e000 	.word	0x4000e000
 8005f58:	4000e400 	.word	0x4000e400
 8005f5c:	00010007 	.word	0x00010007

08005f60 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e041      	b.n	8005ff8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d106      	bne.n	8005f8e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f839 	bl	8006000 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	f000 fcbf 	bl	8006924 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0208 	bic.w	r2, r2, #8
 8005fb4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6819      	ldr	r1, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e08f      	b.n	8006148 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d106      	bne.n	8006042 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7fc f80d 	bl	800205c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6899      	ldr	r1, [r3, #8]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	4b3e      	ldr	r3, [pc, #248]	; (8006150 <HAL_TIM_Encoder_Init+0x13c>)
 8006056:	400b      	ands	r3, r1
 8006058:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3304      	adds	r3, #4
 8006062:	4619      	mov	r1, r3
 8006064:	4610      	mov	r0, r2
 8006066:	f000 fc5d 	bl	8006924 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4313      	orrs	r3, r2
 800608a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	4b31      	ldr	r3, [pc, #196]	; (8006154 <HAL_TIM_Encoder_Init+0x140>)
 8006090:	4013      	ands	r3, r2
 8006092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	4313      	orrs	r3, r2
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4b2b      	ldr	r3, [pc, #172]	; (8006158 <HAL_TIM_Encoder_Init+0x144>)
 80060aa:	4013      	ands	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4b2a      	ldr	r3, [pc, #168]	; (800615c <HAL_TIM_Encoder_Init+0x148>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	4313      	orrs	r3, r2
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	011a      	lsls	r2, r3, #4
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	031b      	lsls	r3, r3, #12
 80060d4:	4313      	orrs	r3, r2
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80060e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80060ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	4313      	orrs	r3, r2
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	fffebff8 	.word	0xfffebff8
 8006154:	fffffcfc 	.word	0xfffffcfc
 8006158:	fffff3f3 	.word	0xfffff3f3
 800615c:	ffff0f0f 	.word	0xffff0f0f

08006160 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006170:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006178:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006180:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006188:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d110      	bne.n	80061b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d102      	bne.n	800619c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006196:	7b7b      	ldrb	r3, [r7, #13]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d001      	beq.n	80061a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e069      	b.n	8006274 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b0:	e031      	b.n	8006216 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d110      	bne.n	80061da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d102      	bne.n	80061c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061be:	7b3b      	ldrb	r3, [r7, #12]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d001      	beq.n	80061c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e055      	b.n	8006274 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061d8:	e01d      	b.n	8006216 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d108      	bne.n	80061f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061e0:	7bbb      	ldrb	r3, [r7, #14]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d105      	bne.n	80061f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061e6:	7b7b      	ldrb	r3, [r7, #13]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d102      	bne.n	80061f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061ec:	7b3b      	ldrb	r3, [r7, #12]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d001      	beq.n	80061f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e03e      	b.n	8006274 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2202      	movs	r2, #2
 80061fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2202      	movs	r2, #2
 800620a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <HAL_TIM_Encoder_Start+0xc4>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2b04      	cmp	r3, #4
 8006220:	d008      	beq.n	8006234 <HAL_TIM_Encoder_Start+0xd4>
 8006222:	e00f      	b.n	8006244 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2201      	movs	r2, #1
 800622a:	2100      	movs	r1, #0
 800622c:	4618      	mov	r0, r3
 800622e:	f000 ff93 	bl	8007158 <TIM_CCxChannelCmd>
      break;
 8006232:	e016      	b.n	8006262 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2201      	movs	r2, #1
 800623a:	2104      	movs	r1, #4
 800623c:	4618      	mov	r0, r3
 800623e:	f000 ff8b 	bl	8007158 <TIM_CCxChannelCmd>
      break;
 8006242:	e00e      	b.n	8006262 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2201      	movs	r2, #1
 800624a:	2100      	movs	r1, #0
 800624c:	4618      	mov	r0, r3
 800624e:	f000 ff83 	bl	8007158 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2201      	movs	r2, #1
 8006258:	2104      	movs	r1, #4
 800625a:	4618      	mov	r0, r3
 800625c:	f000 ff7c 	bl	8007158 <TIM_CCxChannelCmd>
      break;
 8006260:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0201 	orr.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b02      	cmp	r3, #2
 8006290:	d122      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b02      	cmp	r3, #2
 800629e:	d11b      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f06f 0202 	mvn.w	r2, #2
 80062a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	f003 0303 	and.w	r3, r3, #3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fb12 	bl	80068e8 <HAL_TIM_IC_CaptureCallback>
 80062c4:	e005      	b.n	80062d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fb04 	bl	80068d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fb15 	bl	80068fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d122      	bne.n	800632c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d11b      	bne.n	800632c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0204 	mvn.w	r2, #4
 80062fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2202      	movs	r2, #2
 8006302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fae8 	bl	80068e8 <HAL_TIM_IC_CaptureCallback>
 8006318:	e005      	b.n	8006326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fada 	bl	80068d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 faeb 	bl	80068fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0308 	and.w	r3, r3, #8
 8006336:	2b08      	cmp	r3, #8
 8006338:	d122      	bne.n	8006380 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b08      	cmp	r3, #8
 8006346:	d11b      	bne.n	8006380 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0208 	mvn.w	r2, #8
 8006350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2204      	movs	r2, #4
 8006356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fabe 	bl	80068e8 <HAL_TIM_IC_CaptureCallback>
 800636c:	e005      	b.n	800637a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fab0 	bl	80068d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fac1 	bl	80068fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0310 	and.w	r3, r3, #16
 800638a:	2b10      	cmp	r3, #16
 800638c:	d122      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0310 	and.w	r3, r3, #16
 8006398:	2b10      	cmp	r3, #16
 800639a:	d11b      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0210 	mvn.w	r2, #16
 80063a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2208      	movs	r2, #8
 80063aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fa94 	bl	80068e8 <HAL_TIM_IC_CaptureCallback>
 80063c0:	e005      	b.n	80063ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fa86 	bl	80068d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fa97 	bl	80068fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d10e      	bne.n	8006400 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d107      	bne.n	8006400 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0201 	mvn.w	r2, #1
 80063f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fb f8e0 	bl	80015c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640a:	2b80      	cmp	r3, #128	; 0x80
 800640c:	d10e      	bne.n	800642c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006418:	2b80      	cmp	r3, #128	; 0x80
 800641a:	d107      	bne.n	800642c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 f802 	bl	8007430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800643a:	d10e      	bne.n	800645a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006446:	2b80      	cmp	r3, #128	; 0x80
 8006448:	d107      	bne.n	800645a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fff5 	bl	8007444 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b40      	cmp	r3, #64	; 0x40
 8006466:	d10e      	bne.n	8006486 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006472:	2b40      	cmp	r3, #64	; 0x40
 8006474:	d107      	bne.n	8006486 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800647e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fa45 	bl	8006910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 0320 	and.w	r3, r3, #32
 8006490:	2b20      	cmp	r3, #32
 8006492:	d10e      	bne.n	80064b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b20      	cmp	r3, #32
 80064a0:	d107      	bne.n	80064b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f06f 0220 	mvn.w	r2, #32
 80064aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 ffb5 	bl	800741c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064b2:	bf00      	nop
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064d6:	2302      	movs	r3, #2
 80064d8:	e0ff      	b.n	80066da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b14      	cmp	r3, #20
 80064e6:	f200 80f0 	bhi.w	80066ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064ea:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006545 	.word	0x08006545
 80064f4:	080066cb 	.word	0x080066cb
 80064f8:	080066cb 	.word	0x080066cb
 80064fc:	080066cb 	.word	0x080066cb
 8006500:	08006585 	.word	0x08006585
 8006504:	080066cb 	.word	0x080066cb
 8006508:	080066cb 	.word	0x080066cb
 800650c:	080066cb 	.word	0x080066cb
 8006510:	080065c7 	.word	0x080065c7
 8006514:	080066cb 	.word	0x080066cb
 8006518:	080066cb 	.word	0x080066cb
 800651c:	080066cb 	.word	0x080066cb
 8006520:	08006607 	.word	0x08006607
 8006524:	080066cb 	.word	0x080066cb
 8006528:	080066cb 	.word	0x080066cb
 800652c:	080066cb 	.word	0x080066cb
 8006530:	08006649 	.word	0x08006649
 8006534:	080066cb 	.word	0x080066cb
 8006538:	080066cb 	.word	0x080066cb
 800653c:	080066cb 	.word	0x080066cb
 8006540:	08006689 	.word	0x08006689
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fa90 	bl	8006a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699a      	ldr	r2, [r3, #24]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0208 	orr.w	r2, r2, #8
 800655e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0204 	bic.w	r2, r2, #4
 800656e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6999      	ldr	r1, [r3, #24]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	619a      	str	r2, [r3, #24]
      break;
 8006582:	e0a5      	b.n	80066d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68b9      	ldr	r1, [r7, #8]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fb00 	bl	8006b90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699a      	ldr	r2, [r3, #24]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800659e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699a      	ldr	r2, [r3, #24]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6999      	ldr	r1, [r3, #24]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	021a      	lsls	r2, r3, #8
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	619a      	str	r2, [r3, #24]
      break;
 80065c4:	e084      	b.n	80066d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68b9      	ldr	r1, [r7, #8]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fb69 	bl	8006ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69da      	ldr	r2, [r3, #28]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0208 	orr.w	r2, r2, #8
 80065e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0204 	bic.w	r2, r2, #4
 80065f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69d9      	ldr	r1, [r3, #28]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	61da      	str	r2, [r3, #28]
      break;
 8006604:	e064      	b.n	80066d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fbd1 	bl	8006db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69da      	ldr	r2, [r3, #28]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69da      	ldr	r2, [r3, #28]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69d9      	ldr	r1, [r3, #28]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	021a      	lsls	r2, r3, #8
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	61da      	str	r2, [r3, #28]
      break;
 8006646:	e043      	b.n	80066d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68b9      	ldr	r1, [r7, #8]
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fc1a 	bl	8006e88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0208 	orr.w	r2, r2, #8
 8006662:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0204 	bic.w	r2, r2, #4
 8006672:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	691a      	ldr	r2, [r3, #16]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006686:	e023      	b.n	80066d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fc5e 	bl	8006f50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	021a      	lsls	r2, r3, #8
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80066c8:	e002      	b.n	80066d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	75fb      	strb	r3, [r7, #23]
      break;
 80066ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop

080066e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_TIM_ConfigClockSource+0x1c>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e0dc      	b.n	80068ba <HAL_TIM_ConfigClockSource+0x1d6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	4b6a      	ldr	r3, [pc, #424]	; (80068c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800671c:	4013      	ands	r3, r2
 800671e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a64      	ldr	r2, [pc, #400]	; (80068c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	f000 80a9 	beq.w	800688e <HAL_TIM_ConfigClockSource+0x1aa>
 800673c:	4a62      	ldr	r2, [pc, #392]	; (80068c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800673e:	4293      	cmp	r3, r2
 8006740:	f200 80ae 	bhi.w	80068a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006744:	4a61      	ldr	r2, [pc, #388]	; (80068cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8006746:	4293      	cmp	r3, r2
 8006748:	f000 80a1 	beq.w	800688e <HAL_TIM_ConfigClockSource+0x1aa>
 800674c:	4a5f      	ldr	r2, [pc, #380]	; (80068cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	f200 80a6 	bhi.w	80068a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006754:	4a5e      	ldr	r2, [pc, #376]	; (80068d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006756:	4293      	cmp	r3, r2
 8006758:	f000 8099 	beq.w	800688e <HAL_TIM_ConfigClockSource+0x1aa>
 800675c:	4a5c      	ldr	r2, [pc, #368]	; (80068d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800675e:	4293      	cmp	r3, r2
 8006760:	f200 809e 	bhi.w	80068a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006764:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006768:	f000 8091 	beq.w	800688e <HAL_TIM_ConfigClockSource+0x1aa>
 800676c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006770:	f200 8096 	bhi.w	80068a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006778:	f000 8089 	beq.w	800688e <HAL_TIM_ConfigClockSource+0x1aa>
 800677c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006780:	f200 808e 	bhi.w	80068a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006788:	d03e      	beq.n	8006808 <HAL_TIM_ConfigClockSource+0x124>
 800678a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800678e:	f200 8087 	bhi.w	80068a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006796:	f000 8086 	beq.w	80068a6 <HAL_TIM_ConfigClockSource+0x1c2>
 800679a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679e:	d87f      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80067a0:	2b70      	cmp	r3, #112	; 0x70
 80067a2:	d01a      	beq.n	80067da <HAL_TIM_ConfigClockSource+0xf6>
 80067a4:	2b70      	cmp	r3, #112	; 0x70
 80067a6:	d87b      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80067a8:	2b60      	cmp	r3, #96	; 0x60
 80067aa:	d050      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x16a>
 80067ac:	2b60      	cmp	r3, #96	; 0x60
 80067ae:	d877      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80067b0:	2b50      	cmp	r3, #80	; 0x50
 80067b2:	d03c      	beq.n	800682e <HAL_TIM_ConfigClockSource+0x14a>
 80067b4:	2b50      	cmp	r3, #80	; 0x50
 80067b6:	d873      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80067b8:	2b40      	cmp	r3, #64	; 0x40
 80067ba:	d058      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x18a>
 80067bc:	2b40      	cmp	r3, #64	; 0x40
 80067be:	d86f      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80067c0:	2b30      	cmp	r3, #48	; 0x30
 80067c2:	d064      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x1aa>
 80067c4:	2b30      	cmp	r3, #48	; 0x30
 80067c6:	d86b      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d060      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x1aa>
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d867      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d05c      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x1aa>
 80067d4:	2b10      	cmp	r3, #16
 80067d6:	d05a      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x1aa>
 80067d8:	e062      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6899      	ldr	r1, [r3, #8]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f000 fc95 	bl	8007118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	609a      	str	r2, [r3, #8]
      break;
 8006806:	e04f      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	6899      	ldr	r1, [r3, #8]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f000 fc7e 	bl	8007118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800682a:	609a      	str	r2, [r3, #8]
      break;
 800682c:	e03c      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6859      	ldr	r1, [r3, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	461a      	mov	r2, r3
 800683c:	f000 fbee 	bl	800701c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2150      	movs	r1, #80	; 0x50
 8006846:	4618      	mov	r0, r3
 8006848:	f000 fc48 	bl	80070dc <TIM_ITRx_SetConfig>
      break;
 800684c:	e02c      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6859      	ldr	r1, [r3, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	461a      	mov	r2, r3
 800685c:	f000 fc0d 	bl	800707a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2160      	movs	r1, #96	; 0x60
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fc38 	bl	80070dc <TIM_ITRx_SetConfig>
      break;
 800686c:	e01c      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	461a      	mov	r2, r3
 800687c:	f000 fbce 	bl	800701c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2140      	movs	r1, #64	; 0x40
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fc28 	bl	80070dc <TIM_ITRx_SetConfig>
      break;
 800688c:	e00c      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f000 fc1f 	bl	80070dc <TIM_ITRx_SetConfig>
      break;
 800689e:	e003      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	73fb      	strb	r3, [r7, #15]
      break;
 80068a4:	e000      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80068a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	ffceff88 	.word	0xffceff88
 80068c8:	00100040 	.word	0x00100040
 80068cc:	00100030 	.word	0x00100030
 80068d0:	00100020 	.word	0x00100020

080068d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a44      	ldr	r2, [pc, #272]	; (8006a48 <TIM_Base_SetConfig+0x124>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d013      	beq.n	8006964 <TIM_Base_SetConfig+0x40>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006942:	d00f      	beq.n	8006964 <TIM_Base_SetConfig+0x40>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a41      	ldr	r2, [pc, #260]	; (8006a4c <TIM_Base_SetConfig+0x128>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00b      	beq.n	8006964 <TIM_Base_SetConfig+0x40>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a40      	ldr	r2, [pc, #256]	; (8006a50 <TIM_Base_SetConfig+0x12c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d007      	beq.n	8006964 <TIM_Base_SetConfig+0x40>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a3f      	ldr	r2, [pc, #252]	; (8006a54 <TIM_Base_SetConfig+0x130>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d003      	beq.n	8006964 <TIM_Base_SetConfig+0x40>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a3e      	ldr	r2, [pc, #248]	; (8006a58 <TIM_Base_SetConfig+0x134>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d108      	bne.n	8006976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a33      	ldr	r2, [pc, #204]	; (8006a48 <TIM_Base_SetConfig+0x124>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d027      	beq.n	80069ce <TIM_Base_SetConfig+0xaa>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006984:	d023      	beq.n	80069ce <TIM_Base_SetConfig+0xaa>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a30      	ldr	r2, [pc, #192]	; (8006a4c <TIM_Base_SetConfig+0x128>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d01f      	beq.n	80069ce <TIM_Base_SetConfig+0xaa>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a2f      	ldr	r2, [pc, #188]	; (8006a50 <TIM_Base_SetConfig+0x12c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d01b      	beq.n	80069ce <TIM_Base_SetConfig+0xaa>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a2e      	ldr	r2, [pc, #184]	; (8006a54 <TIM_Base_SetConfig+0x130>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d017      	beq.n	80069ce <TIM_Base_SetConfig+0xaa>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a2d      	ldr	r2, [pc, #180]	; (8006a58 <TIM_Base_SetConfig+0x134>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d013      	beq.n	80069ce <TIM_Base_SetConfig+0xaa>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a2c      	ldr	r2, [pc, #176]	; (8006a5c <TIM_Base_SetConfig+0x138>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00f      	beq.n	80069ce <TIM_Base_SetConfig+0xaa>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a2b      	ldr	r2, [pc, #172]	; (8006a60 <TIM_Base_SetConfig+0x13c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00b      	beq.n	80069ce <TIM_Base_SetConfig+0xaa>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a2a      	ldr	r2, [pc, #168]	; (8006a64 <TIM_Base_SetConfig+0x140>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d007      	beq.n	80069ce <TIM_Base_SetConfig+0xaa>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a29      	ldr	r2, [pc, #164]	; (8006a68 <TIM_Base_SetConfig+0x144>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d003      	beq.n	80069ce <TIM_Base_SetConfig+0xaa>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a28      	ldr	r2, [pc, #160]	; (8006a6c <TIM_Base_SetConfig+0x148>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d108      	bne.n	80069e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4313      	orrs	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a10      	ldr	r2, [pc, #64]	; (8006a48 <TIM_Base_SetConfig+0x124>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00f      	beq.n	8006a2c <TIM_Base_SetConfig+0x108>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a12      	ldr	r2, [pc, #72]	; (8006a58 <TIM_Base_SetConfig+0x134>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00b      	beq.n	8006a2c <TIM_Base_SetConfig+0x108>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a11      	ldr	r2, [pc, #68]	; (8006a5c <TIM_Base_SetConfig+0x138>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d007      	beq.n	8006a2c <TIM_Base_SetConfig+0x108>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a10      	ldr	r2, [pc, #64]	; (8006a60 <TIM_Base_SetConfig+0x13c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d003      	beq.n	8006a2c <TIM_Base_SetConfig+0x108>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a0f      	ldr	r2, [pc, #60]	; (8006a64 <TIM_Base_SetConfig+0x140>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d103      	bne.n	8006a34 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	691a      	ldr	r2, [r3, #16]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	615a      	str	r2, [r3, #20]
}
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40010000 	.word	0x40010000
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40000800 	.word	0x40000800
 8006a54:	40000c00 	.word	0x40000c00
 8006a58:	40010400 	.word	0x40010400
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	40014400 	.word	0x40014400
 8006a64:	40014800 	.word	0x40014800
 8006a68:	4000e000 	.word	0x4000e000
 8006a6c:	4000e400 	.word	0x4000e400

08006a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	f023 0201 	bic.w	r2, r3, #1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4b37      	ldr	r3, [pc, #220]	; (8006b78 <TIM_OC1_SetConfig+0x108>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0303 	bic.w	r3, r3, #3
 8006aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f023 0302 	bic.w	r3, r3, #2
 8006ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a2d      	ldr	r2, [pc, #180]	; (8006b7c <TIM_OC1_SetConfig+0x10c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d00f      	beq.n	8006aec <TIM_OC1_SetConfig+0x7c>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a2c      	ldr	r2, [pc, #176]	; (8006b80 <TIM_OC1_SetConfig+0x110>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00b      	beq.n	8006aec <TIM_OC1_SetConfig+0x7c>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a2b      	ldr	r2, [pc, #172]	; (8006b84 <TIM_OC1_SetConfig+0x114>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d007      	beq.n	8006aec <TIM_OC1_SetConfig+0x7c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a2a      	ldr	r2, [pc, #168]	; (8006b88 <TIM_OC1_SetConfig+0x118>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d003      	beq.n	8006aec <TIM_OC1_SetConfig+0x7c>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a29      	ldr	r2, [pc, #164]	; (8006b8c <TIM_OC1_SetConfig+0x11c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d10c      	bne.n	8006b06 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f023 0308 	bic.w	r3, r3, #8
 8006af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f023 0304 	bic.w	r3, r3, #4
 8006b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a1c      	ldr	r2, [pc, #112]	; (8006b7c <TIM_OC1_SetConfig+0x10c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d00f      	beq.n	8006b2e <TIM_OC1_SetConfig+0xbe>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a1b      	ldr	r2, [pc, #108]	; (8006b80 <TIM_OC1_SetConfig+0x110>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00b      	beq.n	8006b2e <TIM_OC1_SetConfig+0xbe>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a1a      	ldr	r2, [pc, #104]	; (8006b84 <TIM_OC1_SetConfig+0x114>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d007      	beq.n	8006b2e <TIM_OC1_SetConfig+0xbe>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a19      	ldr	r2, [pc, #100]	; (8006b88 <TIM_OC1_SetConfig+0x118>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d003      	beq.n	8006b2e <TIM_OC1_SetConfig+0xbe>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a18      	ldr	r2, [pc, #96]	; (8006b8c <TIM_OC1_SetConfig+0x11c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d111      	bne.n	8006b52 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	621a      	str	r2, [r3, #32]
}
 8006b6c:	bf00      	nop
 8006b6e:	371c      	adds	r7, #28
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	fffeff8f 	.word	0xfffeff8f
 8006b7c:	40010000 	.word	0x40010000
 8006b80:	40010400 	.word	0x40010400
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40014400 	.word	0x40014400
 8006b8c:	40014800 	.word	0x40014800

08006b90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	f023 0210 	bic.w	r2, r3, #16
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4b34      	ldr	r3, [pc, #208]	; (8006c8c <TIM_OC2_SetConfig+0xfc>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	021b      	lsls	r3, r3, #8
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f023 0320 	bic.w	r3, r3, #32
 8006bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a29      	ldr	r2, [pc, #164]	; (8006c90 <TIM_OC2_SetConfig+0x100>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d003      	beq.n	8006bf8 <TIM_OC2_SetConfig+0x68>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a28      	ldr	r2, [pc, #160]	; (8006c94 <TIM_OC2_SetConfig+0x104>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d10d      	bne.n	8006c14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a1e      	ldr	r2, [pc, #120]	; (8006c90 <TIM_OC2_SetConfig+0x100>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00f      	beq.n	8006c3c <TIM_OC2_SetConfig+0xac>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a1d      	ldr	r2, [pc, #116]	; (8006c94 <TIM_OC2_SetConfig+0x104>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00b      	beq.n	8006c3c <TIM_OC2_SetConfig+0xac>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a1c      	ldr	r2, [pc, #112]	; (8006c98 <TIM_OC2_SetConfig+0x108>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d007      	beq.n	8006c3c <TIM_OC2_SetConfig+0xac>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a1b      	ldr	r2, [pc, #108]	; (8006c9c <TIM_OC2_SetConfig+0x10c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d003      	beq.n	8006c3c <TIM_OC2_SetConfig+0xac>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a1a      	ldr	r2, [pc, #104]	; (8006ca0 <TIM_OC2_SetConfig+0x110>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d113      	bne.n	8006c64 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	feff8fff 	.word	0xfeff8fff
 8006c90:	40010000 	.word	0x40010000
 8006c94:	40010400 	.word	0x40010400
 8006c98:	40014000 	.word	0x40014000
 8006c9c:	40014400 	.word	0x40014400
 8006ca0:	40014800 	.word	0x40014800

08006ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4b33      	ldr	r3, [pc, #204]	; (8006d9c <TIM_OC3_SetConfig+0xf8>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0303 	bic.w	r3, r3, #3
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a28      	ldr	r2, [pc, #160]	; (8006da0 <TIM_OC3_SetConfig+0xfc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_OC3_SetConfig+0x66>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a27      	ldr	r2, [pc, #156]	; (8006da4 <TIM_OC3_SetConfig+0x100>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d10d      	bne.n	8006d26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a1d      	ldr	r2, [pc, #116]	; (8006da0 <TIM_OC3_SetConfig+0xfc>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00f      	beq.n	8006d4e <TIM_OC3_SetConfig+0xaa>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a1c      	ldr	r2, [pc, #112]	; (8006da4 <TIM_OC3_SetConfig+0x100>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d00b      	beq.n	8006d4e <TIM_OC3_SetConfig+0xaa>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a1b      	ldr	r2, [pc, #108]	; (8006da8 <TIM_OC3_SetConfig+0x104>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d007      	beq.n	8006d4e <TIM_OC3_SetConfig+0xaa>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a1a      	ldr	r2, [pc, #104]	; (8006dac <TIM_OC3_SetConfig+0x108>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_OC3_SetConfig+0xaa>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a19      	ldr	r2, [pc, #100]	; (8006db0 <TIM_OC3_SetConfig+0x10c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d113      	bne.n	8006d76 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	621a      	str	r2, [r3, #32]
}
 8006d90:	bf00      	nop
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	fffeff8f 	.word	0xfffeff8f
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40010400 	.word	0x40010400
 8006da8:	40014000 	.word	0x40014000
 8006dac:	40014400 	.word	0x40014400
 8006db0:	40014800 	.word	0x40014800

08006db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4b24      	ldr	r3, [pc, #144]	; (8006e70 <TIM_OC4_SetConfig+0xbc>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	021b      	lsls	r3, r3, #8
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	031b      	lsls	r3, r3, #12
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a19      	ldr	r2, [pc, #100]	; (8006e74 <TIM_OC4_SetConfig+0xc0>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00f      	beq.n	8006e34 <TIM_OC4_SetConfig+0x80>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a18      	ldr	r2, [pc, #96]	; (8006e78 <TIM_OC4_SetConfig+0xc4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d00b      	beq.n	8006e34 <TIM_OC4_SetConfig+0x80>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a17      	ldr	r2, [pc, #92]	; (8006e7c <TIM_OC4_SetConfig+0xc8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d007      	beq.n	8006e34 <TIM_OC4_SetConfig+0x80>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a16      	ldr	r2, [pc, #88]	; (8006e80 <TIM_OC4_SetConfig+0xcc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d003      	beq.n	8006e34 <TIM_OC4_SetConfig+0x80>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a15      	ldr	r2, [pc, #84]	; (8006e84 <TIM_OC4_SetConfig+0xd0>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d109      	bne.n	8006e48 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	019b      	lsls	r3, r3, #6
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	621a      	str	r2, [r3, #32]
}
 8006e62:	bf00      	nop
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	feff8fff 	.word	0xfeff8fff
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40010400 	.word	0x40010400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800

08006e88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4b21      	ldr	r3, [pc, #132]	; (8006f38 <TIM_OC5_SetConfig+0xb0>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ec8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	041b      	lsls	r3, r3, #16
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a18      	ldr	r2, [pc, #96]	; (8006f3c <TIM_OC5_SetConfig+0xb4>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d00f      	beq.n	8006efe <TIM_OC5_SetConfig+0x76>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a17      	ldr	r2, [pc, #92]	; (8006f40 <TIM_OC5_SetConfig+0xb8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00b      	beq.n	8006efe <TIM_OC5_SetConfig+0x76>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a16      	ldr	r2, [pc, #88]	; (8006f44 <TIM_OC5_SetConfig+0xbc>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d007      	beq.n	8006efe <TIM_OC5_SetConfig+0x76>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a15      	ldr	r2, [pc, #84]	; (8006f48 <TIM_OC5_SetConfig+0xc0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d003      	beq.n	8006efe <TIM_OC5_SetConfig+0x76>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a14      	ldr	r2, [pc, #80]	; (8006f4c <TIM_OC5_SetConfig+0xc4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d109      	bne.n	8006f12 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	021b      	lsls	r3, r3, #8
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	621a      	str	r2, [r3, #32]
}
 8006f2c:	bf00      	nop
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	fffeff8f 	.word	0xfffeff8f
 8006f3c:	40010000 	.word	0x40010000
 8006f40:	40010400 	.word	0x40010400
 8006f44:	40014000 	.word	0x40014000
 8006f48:	40014400 	.word	0x40014400
 8006f4c:	40014800 	.word	0x40014800

08006f50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4b22      	ldr	r3, [pc, #136]	; (8007004 <TIM_OC6_SetConfig+0xb4>)
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	051b      	lsls	r3, r3, #20
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a19      	ldr	r2, [pc, #100]	; (8007008 <TIM_OC6_SetConfig+0xb8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00f      	beq.n	8006fc8 <TIM_OC6_SetConfig+0x78>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a18      	ldr	r2, [pc, #96]	; (800700c <TIM_OC6_SetConfig+0xbc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00b      	beq.n	8006fc8 <TIM_OC6_SetConfig+0x78>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a17      	ldr	r2, [pc, #92]	; (8007010 <TIM_OC6_SetConfig+0xc0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d007      	beq.n	8006fc8 <TIM_OC6_SetConfig+0x78>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a16      	ldr	r2, [pc, #88]	; (8007014 <TIM_OC6_SetConfig+0xc4>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d003      	beq.n	8006fc8 <TIM_OC6_SetConfig+0x78>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a15      	ldr	r2, [pc, #84]	; (8007018 <TIM_OC6_SetConfig+0xc8>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d109      	bne.n	8006fdc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	029b      	lsls	r3, r3, #10
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	feff8fff 	.word	0xfeff8fff
 8007008:	40010000 	.word	0x40010000
 800700c:	40010400 	.word	0x40010400
 8007010:	40014000 	.word	0x40014000
 8007014:	40014400 	.word	0x40014400
 8007018:	40014800 	.word	0x40014800

0800701c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f023 0201 	bic.w	r2, r3, #1
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f023 030a 	bic.w	r3, r3, #10
 8007058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	621a      	str	r2, [r3, #32]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800707a:	b480      	push	{r7}
 800707c:	b087      	sub	sp, #28
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	f023 0210 	bic.w	r2, r3, #16
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	031b      	lsls	r3, r3, #12
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	621a      	str	r2, [r3, #32]
}
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
	...

080070dc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	4b09      	ldr	r3, [pc, #36]	; (8007114 <TIM_ITRx_SetConfig+0x38>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	f043 0307 	orr.w	r3, r3, #7
 80070fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	609a      	str	r2, [r3, #8]
}
 8007106:	bf00      	nop
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	ffcfff8f 	.word	0xffcfff8f

08007118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	021a      	lsls	r2, r3, #8
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	431a      	orrs	r2, r3
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	4313      	orrs	r3, r2
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	609a      	str	r2, [r3, #8]
}
 800714c:	bf00      	nop
 800714e:	371c      	adds	r7, #28
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	2201      	movs	r2, #1
 800716c:	fa02 f303 	lsl.w	r3, r2, r3
 8007170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6a1a      	ldr	r2, [r3, #32]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	43db      	mvns	r3, r3
 800717a:	401a      	ands	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a1a      	ldr	r2, [r3, #32]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f003 031f 	and.w	r3, r3, #31
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	fa01 f303 	lsl.w	r3, r1, r3
 8007190:	431a      	orrs	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	621a      	str	r2, [r3, #32]
}
 8007196:	bf00      	nop
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
	...

080071a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e077      	b.n	80072ac <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a35      	ldr	r2, [pc, #212]	; (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d004      	beq.n	80071f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a34      	ldr	r2, [pc, #208]	; (80072bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d108      	bne.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007208:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a25      	ldr	r2, [pc, #148]	; (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d02c      	beq.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800722e:	d027      	beq.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a22      	ldr	r2, [pc, #136]	; (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d022      	beq.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a21      	ldr	r2, [pc, #132]	; (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d01d      	beq.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a1f      	ldr	r2, [pc, #124]	; (80072c8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d018      	beq.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a1a      	ldr	r2, [pc, #104]	; (80072bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d013      	beq.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a1b      	ldr	r2, [pc, #108]	; (80072cc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00e      	beq.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a1a      	ldr	r2, [pc, #104]	; (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d009      	beq.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a18      	ldr	r2, [pc, #96]	; (80072d4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d004      	beq.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a17      	ldr	r2, [pc, #92]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d10c      	bne.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007286:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	4313      	orrs	r3, r2
 8007290:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	40010000 	.word	0x40010000
 80072bc:	40010400 	.word	0x40010400
 80072c0:	40000400 	.word	0x40000400
 80072c4:	40000800 	.word	0x40000800
 80072c8:	40000c00 	.word	0x40000c00
 80072cc:	40001800 	.word	0x40001800
 80072d0:	40014000 	.word	0x40014000
 80072d4:	4000e000 	.word	0x4000e000
 80072d8:	4000e400 	.word	0x4000e400

080072dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e087      	b.n	8007408 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	4313      	orrs	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4313      	orrs	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	041b      	lsls	r3, r3, #16
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a27      	ldr	r2, [pc, #156]	; (8007414 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d004      	beq.n	8007386 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a25      	ldr	r2, [pc, #148]	; (8007418 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d106      	bne.n	8007394 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a1e      	ldr	r2, [pc, #120]	; (8007414 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d004      	beq.n	80073a8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a1d      	ldr	r2, [pc, #116]	; (8007418 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d126      	bne.n	80073f6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b2:	051b      	lsls	r3, r3, #20
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a0e      	ldr	r2, [pc, #56]	; (8007414 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d004      	beq.n	80073e8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a0d      	ldr	r2, [pc, #52]	; (8007418 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d106      	bne.n	80073f6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	40010000 	.word	0x40010000
 8007418:	40010400 	.word	0x40010400

0800741c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e042      	b.n	80074f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007470:	2b00      	cmp	r3, #0
 8007472:	d106      	bne.n	8007482 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fa ffb5 	bl	80023ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2224      	movs	r2, #36	; 0x24
 8007486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0201 	bic.w	r2, r2, #1
 8007498:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f82c 	bl	80074f8 <UART_SetConfig>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d101      	bne.n	80074aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e022      	b.n	80074f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fe8c 	bl	80081d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f042 0201 	orr.w	r2, r2, #1
 80074e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 ff13 	bl	8008314 <UART_CheckIdleState>
 80074ee:	4603      	mov	r3, r0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074fc:	b092      	sub	sp, #72	; 0x48
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	431a      	orrs	r2, r3
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	431a      	orrs	r2, r3
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	4313      	orrs	r3, r2
 800751e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	4bbe      	ldr	r3, [pc, #760]	; (8007820 <UART_SetConfig+0x328>)
 8007528:	4013      	ands	r3, r2
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	6812      	ldr	r2, [r2, #0]
 800752e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007530:	430b      	orrs	r3, r1
 8007532:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4ab3      	ldr	r2, [pc, #716]	; (8007824 <UART_SetConfig+0x32c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d004      	beq.n	8007564 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007560:	4313      	orrs	r3, r2
 8007562:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689a      	ldr	r2, [r3, #8]
 800756a:	4baf      	ldr	r3, [pc, #700]	; (8007828 <UART_SetConfig+0x330>)
 800756c:	4013      	ands	r3, r2
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	6812      	ldr	r2, [r2, #0]
 8007572:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007574:	430b      	orrs	r3, r1
 8007576:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	f023 010f 	bic.w	r1, r3, #15
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4aa6      	ldr	r2, [pc, #664]	; (800782c <UART_SetConfig+0x334>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d177      	bne.n	8007688 <UART_SetConfig+0x190>
 8007598:	4ba5      	ldr	r3, [pc, #660]	; (8007830 <UART_SetConfig+0x338>)
 800759a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075a0:	2b28      	cmp	r3, #40	; 0x28
 80075a2:	d86d      	bhi.n	8007680 <UART_SetConfig+0x188>
 80075a4:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <UART_SetConfig+0xb4>)
 80075a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075aa:	bf00      	nop
 80075ac:	08007651 	.word	0x08007651
 80075b0:	08007681 	.word	0x08007681
 80075b4:	08007681 	.word	0x08007681
 80075b8:	08007681 	.word	0x08007681
 80075bc:	08007681 	.word	0x08007681
 80075c0:	08007681 	.word	0x08007681
 80075c4:	08007681 	.word	0x08007681
 80075c8:	08007681 	.word	0x08007681
 80075cc:	08007659 	.word	0x08007659
 80075d0:	08007681 	.word	0x08007681
 80075d4:	08007681 	.word	0x08007681
 80075d8:	08007681 	.word	0x08007681
 80075dc:	08007681 	.word	0x08007681
 80075e0:	08007681 	.word	0x08007681
 80075e4:	08007681 	.word	0x08007681
 80075e8:	08007681 	.word	0x08007681
 80075ec:	08007661 	.word	0x08007661
 80075f0:	08007681 	.word	0x08007681
 80075f4:	08007681 	.word	0x08007681
 80075f8:	08007681 	.word	0x08007681
 80075fc:	08007681 	.word	0x08007681
 8007600:	08007681 	.word	0x08007681
 8007604:	08007681 	.word	0x08007681
 8007608:	08007681 	.word	0x08007681
 800760c:	08007669 	.word	0x08007669
 8007610:	08007681 	.word	0x08007681
 8007614:	08007681 	.word	0x08007681
 8007618:	08007681 	.word	0x08007681
 800761c:	08007681 	.word	0x08007681
 8007620:	08007681 	.word	0x08007681
 8007624:	08007681 	.word	0x08007681
 8007628:	08007681 	.word	0x08007681
 800762c:	08007671 	.word	0x08007671
 8007630:	08007681 	.word	0x08007681
 8007634:	08007681 	.word	0x08007681
 8007638:	08007681 	.word	0x08007681
 800763c:	08007681 	.word	0x08007681
 8007640:	08007681 	.word	0x08007681
 8007644:	08007681 	.word	0x08007681
 8007648:	08007681 	.word	0x08007681
 800764c:	08007679 	.word	0x08007679
 8007650:	2301      	movs	r3, #1
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007656:	e326      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007658:	2304      	movs	r3, #4
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765e:	e322      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007660:	2308      	movs	r3, #8
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007666:	e31e      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007668:	2310      	movs	r3, #16
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766e:	e31a      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007670:	2320      	movs	r3, #32
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007676:	e316      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007678:	2340      	movs	r3, #64	; 0x40
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767e:	e312      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007680:	2380      	movs	r3, #128	; 0x80
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007686:	e30e      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a69      	ldr	r2, [pc, #420]	; (8007834 <UART_SetConfig+0x33c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d130      	bne.n	80076f4 <UART_SetConfig+0x1fc>
 8007692:	4b67      	ldr	r3, [pc, #412]	; (8007830 <UART_SetConfig+0x338>)
 8007694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007696:	f003 0307 	and.w	r3, r3, #7
 800769a:	2b05      	cmp	r3, #5
 800769c:	d826      	bhi.n	80076ec <UART_SetConfig+0x1f4>
 800769e:	a201      	add	r2, pc, #4	; (adr r2, 80076a4 <UART_SetConfig+0x1ac>)
 80076a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a4:	080076bd 	.word	0x080076bd
 80076a8:	080076c5 	.word	0x080076c5
 80076ac:	080076cd 	.word	0x080076cd
 80076b0:	080076d5 	.word	0x080076d5
 80076b4:	080076dd 	.word	0x080076dd
 80076b8:	080076e5 	.word	0x080076e5
 80076bc:	2300      	movs	r3, #0
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076c2:	e2f0      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80076c4:	2304      	movs	r3, #4
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ca:	e2ec      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80076cc:	2308      	movs	r3, #8
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d2:	e2e8      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80076d4:	2310      	movs	r3, #16
 80076d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076da:	e2e4      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80076dc:	2320      	movs	r3, #32
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e2:	e2e0      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80076e4:	2340      	movs	r3, #64	; 0x40
 80076e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ea:	e2dc      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80076ec:	2380      	movs	r3, #128	; 0x80
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f2:	e2d8      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a4f      	ldr	r2, [pc, #316]	; (8007838 <UART_SetConfig+0x340>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d130      	bne.n	8007760 <UART_SetConfig+0x268>
 80076fe:	4b4c      	ldr	r3, [pc, #304]	; (8007830 <UART_SetConfig+0x338>)
 8007700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	2b05      	cmp	r3, #5
 8007708:	d826      	bhi.n	8007758 <UART_SetConfig+0x260>
 800770a:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <UART_SetConfig+0x218>)
 800770c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007710:	08007729 	.word	0x08007729
 8007714:	08007731 	.word	0x08007731
 8007718:	08007739 	.word	0x08007739
 800771c:	08007741 	.word	0x08007741
 8007720:	08007749 	.word	0x08007749
 8007724:	08007751 	.word	0x08007751
 8007728:	2300      	movs	r3, #0
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772e:	e2ba      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007730:	2304      	movs	r3, #4
 8007732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007736:	e2b6      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007738:	2308      	movs	r3, #8
 800773a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800773e:	e2b2      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007740:	2310      	movs	r3, #16
 8007742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007746:	e2ae      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007748:	2320      	movs	r3, #32
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800774e:	e2aa      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007750:	2340      	movs	r3, #64	; 0x40
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007756:	e2a6      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007758:	2380      	movs	r3, #128	; 0x80
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800775e:	e2a2      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a35      	ldr	r2, [pc, #212]	; (800783c <UART_SetConfig+0x344>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d130      	bne.n	80077cc <UART_SetConfig+0x2d4>
 800776a:	4b31      	ldr	r3, [pc, #196]	; (8007830 <UART_SetConfig+0x338>)
 800776c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776e:	f003 0307 	and.w	r3, r3, #7
 8007772:	2b05      	cmp	r3, #5
 8007774:	d826      	bhi.n	80077c4 <UART_SetConfig+0x2cc>
 8007776:	a201      	add	r2, pc, #4	; (adr r2, 800777c <UART_SetConfig+0x284>)
 8007778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777c:	08007795 	.word	0x08007795
 8007780:	0800779d 	.word	0x0800779d
 8007784:	080077a5 	.word	0x080077a5
 8007788:	080077ad 	.word	0x080077ad
 800778c:	080077b5 	.word	0x080077b5
 8007790:	080077bd 	.word	0x080077bd
 8007794:	2300      	movs	r3, #0
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800779a:	e284      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 800779c:	2304      	movs	r3, #4
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077a2:	e280      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80077a4:	2308      	movs	r3, #8
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077aa:	e27c      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80077ac:	2310      	movs	r3, #16
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b2:	e278      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80077b4:	2320      	movs	r3, #32
 80077b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ba:	e274      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80077bc:	2340      	movs	r3, #64	; 0x40
 80077be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077c2:	e270      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80077c4:	2380      	movs	r3, #128	; 0x80
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ca:	e26c      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a1b      	ldr	r2, [pc, #108]	; (8007840 <UART_SetConfig+0x348>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d142      	bne.n	800785c <UART_SetConfig+0x364>
 80077d6:	4b16      	ldr	r3, [pc, #88]	; (8007830 <UART_SetConfig+0x338>)
 80077d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077da:	f003 0307 	and.w	r3, r3, #7
 80077de:	2b05      	cmp	r3, #5
 80077e0:	d838      	bhi.n	8007854 <UART_SetConfig+0x35c>
 80077e2:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <UART_SetConfig+0x2f0>)
 80077e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e8:	08007801 	.word	0x08007801
 80077ec:	08007809 	.word	0x08007809
 80077f0:	08007811 	.word	0x08007811
 80077f4:	08007819 	.word	0x08007819
 80077f8:	08007845 	.word	0x08007845
 80077fc:	0800784d 	.word	0x0800784d
 8007800:	2300      	movs	r3, #0
 8007802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007806:	e24e      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007808:	2304      	movs	r3, #4
 800780a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800780e:	e24a      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007810:	2308      	movs	r3, #8
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007816:	e246      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007818:	2310      	movs	r3, #16
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800781e:	e242      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007820:	cfff69f3 	.word	0xcfff69f3
 8007824:	58000c00 	.word	0x58000c00
 8007828:	11fff4ff 	.word	0x11fff4ff
 800782c:	40011000 	.word	0x40011000
 8007830:	58024400 	.word	0x58024400
 8007834:	40004400 	.word	0x40004400
 8007838:	40004800 	.word	0x40004800
 800783c:	40004c00 	.word	0x40004c00
 8007840:	40005000 	.word	0x40005000
 8007844:	2320      	movs	r3, #32
 8007846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800784a:	e22c      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 800784c:	2340      	movs	r3, #64	; 0x40
 800784e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007852:	e228      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007854:	2380      	movs	r3, #128	; 0x80
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785a:	e224      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4ab1      	ldr	r2, [pc, #708]	; (8007b28 <UART_SetConfig+0x630>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d176      	bne.n	8007954 <UART_SetConfig+0x45c>
 8007866:	4bb1      	ldr	r3, [pc, #708]	; (8007b2c <UART_SetConfig+0x634>)
 8007868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800786e:	2b28      	cmp	r3, #40	; 0x28
 8007870:	d86c      	bhi.n	800794c <UART_SetConfig+0x454>
 8007872:	a201      	add	r2, pc, #4	; (adr r2, 8007878 <UART_SetConfig+0x380>)
 8007874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007878:	0800791d 	.word	0x0800791d
 800787c:	0800794d 	.word	0x0800794d
 8007880:	0800794d 	.word	0x0800794d
 8007884:	0800794d 	.word	0x0800794d
 8007888:	0800794d 	.word	0x0800794d
 800788c:	0800794d 	.word	0x0800794d
 8007890:	0800794d 	.word	0x0800794d
 8007894:	0800794d 	.word	0x0800794d
 8007898:	08007925 	.word	0x08007925
 800789c:	0800794d 	.word	0x0800794d
 80078a0:	0800794d 	.word	0x0800794d
 80078a4:	0800794d 	.word	0x0800794d
 80078a8:	0800794d 	.word	0x0800794d
 80078ac:	0800794d 	.word	0x0800794d
 80078b0:	0800794d 	.word	0x0800794d
 80078b4:	0800794d 	.word	0x0800794d
 80078b8:	0800792d 	.word	0x0800792d
 80078bc:	0800794d 	.word	0x0800794d
 80078c0:	0800794d 	.word	0x0800794d
 80078c4:	0800794d 	.word	0x0800794d
 80078c8:	0800794d 	.word	0x0800794d
 80078cc:	0800794d 	.word	0x0800794d
 80078d0:	0800794d 	.word	0x0800794d
 80078d4:	0800794d 	.word	0x0800794d
 80078d8:	08007935 	.word	0x08007935
 80078dc:	0800794d 	.word	0x0800794d
 80078e0:	0800794d 	.word	0x0800794d
 80078e4:	0800794d 	.word	0x0800794d
 80078e8:	0800794d 	.word	0x0800794d
 80078ec:	0800794d 	.word	0x0800794d
 80078f0:	0800794d 	.word	0x0800794d
 80078f4:	0800794d 	.word	0x0800794d
 80078f8:	0800793d 	.word	0x0800793d
 80078fc:	0800794d 	.word	0x0800794d
 8007900:	0800794d 	.word	0x0800794d
 8007904:	0800794d 	.word	0x0800794d
 8007908:	0800794d 	.word	0x0800794d
 800790c:	0800794d 	.word	0x0800794d
 8007910:	0800794d 	.word	0x0800794d
 8007914:	0800794d 	.word	0x0800794d
 8007918:	08007945 	.word	0x08007945
 800791c:	2301      	movs	r3, #1
 800791e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007922:	e1c0      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007924:	2304      	movs	r3, #4
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800792a:	e1bc      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 800792c:	2308      	movs	r3, #8
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007932:	e1b8      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007934:	2310      	movs	r3, #16
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793a:	e1b4      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 800793c:	2320      	movs	r3, #32
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007942:	e1b0      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007944:	2340      	movs	r3, #64	; 0x40
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794a:	e1ac      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 800794c:	2380      	movs	r3, #128	; 0x80
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007952:	e1a8      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a75      	ldr	r2, [pc, #468]	; (8007b30 <UART_SetConfig+0x638>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d130      	bne.n	80079c0 <UART_SetConfig+0x4c8>
 800795e:	4b73      	ldr	r3, [pc, #460]	; (8007b2c <UART_SetConfig+0x634>)
 8007960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	2b05      	cmp	r3, #5
 8007968:	d826      	bhi.n	80079b8 <UART_SetConfig+0x4c0>
 800796a:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <UART_SetConfig+0x478>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	08007989 	.word	0x08007989
 8007974:	08007991 	.word	0x08007991
 8007978:	08007999 	.word	0x08007999
 800797c:	080079a1 	.word	0x080079a1
 8007980:	080079a9 	.word	0x080079a9
 8007984:	080079b1 	.word	0x080079b1
 8007988:	2300      	movs	r3, #0
 800798a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800798e:	e18a      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007990:	2304      	movs	r3, #4
 8007992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007996:	e186      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007998:	2308      	movs	r3, #8
 800799a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800799e:	e182      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80079a0:	2310      	movs	r3, #16
 80079a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079a6:	e17e      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80079a8:	2320      	movs	r3, #32
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ae:	e17a      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80079b0:	2340      	movs	r3, #64	; 0x40
 80079b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079b6:	e176      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80079b8:	2380      	movs	r3, #128	; 0x80
 80079ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079be:	e172      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a5b      	ldr	r2, [pc, #364]	; (8007b34 <UART_SetConfig+0x63c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d130      	bne.n	8007a2c <UART_SetConfig+0x534>
 80079ca:	4b58      	ldr	r3, [pc, #352]	; (8007b2c <UART_SetConfig+0x634>)
 80079cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ce:	f003 0307 	and.w	r3, r3, #7
 80079d2:	2b05      	cmp	r3, #5
 80079d4:	d826      	bhi.n	8007a24 <UART_SetConfig+0x52c>
 80079d6:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <UART_SetConfig+0x4e4>)
 80079d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079dc:	080079f5 	.word	0x080079f5
 80079e0:	080079fd 	.word	0x080079fd
 80079e4:	08007a05 	.word	0x08007a05
 80079e8:	08007a0d 	.word	0x08007a0d
 80079ec:	08007a15 	.word	0x08007a15
 80079f0:	08007a1d 	.word	0x08007a1d
 80079f4:	2300      	movs	r3, #0
 80079f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079fa:	e154      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 80079fc:	2304      	movs	r3, #4
 80079fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a02:	e150      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007a04:	2308      	movs	r3, #8
 8007a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a0a:	e14c      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007a0c:	2310      	movs	r3, #16
 8007a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a12:	e148      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007a14:	2320      	movs	r3, #32
 8007a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a1a:	e144      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007a1c:	2340      	movs	r3, #64	; 0x40
 8007a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a22:	e140      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007a24:	2380      	movs	r3, #128	; 0x80
 8007a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a2a:	e13c      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a41      	ldr	r2, [pc, #260]	; (8007b38 <UART_SetConfig+0x640>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	f040 8082 	bne.w	8007b3c <UART_SetConfig+0x644>
 8007a38:	4b3c      	ldr	r3, [pc, #240]	; (8007b2c <UART_SetConfig+0x634>)
 8007a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a40:	2b28      	cmp	r3, #40	; 0x28
 8007a42:	d86d      	bhi.n	8007b20 <UART_SetConfig+0x628>
 8007a44:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <UART_SetConfig+0x554>)
 8007a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4a:	bf00      	nop
 8007a4c:	08007af1 	.word	0x08007af1
 8007a50:	08007b21 	.word	0x08007b21
 8007a54:	08007b21 	.word	0x08007b21
 8007a58:	08007b21 	.word	0x08007b21
 8007a5c:	08007b21 	.word	0x08007b21
 8007a60:	08007b21 	.word	0x08007b21
 8007a64:	08007b21 	.word	0x08007b21
 8007a68:	08007b21 	.word	0x08007b21
 8007a6c:	08007af9 	.word	0x08007af9
 8007a70:	08007b21 	.word	0x08007b21
 8007a74:	08007b21 	.word	0x08007b21
 8007a78:	08007b21 	.word	0x08007b21
 8007a7c:	08007b21 	.word	0x08007b21
 8007a80:	08007b21 	.word	0x08007b21
 8007a84:	08007b21 	.word	0x08007b21
 8007a88:	08007b21 	.word	0x08007b21
 8007a8c:	08007b01 	.word	0x08007b01
 8007a90:	08007b21 	.word	0x08007b21
 8007a94:	08007b21 	.word	0x08007b21
 8007a98:	08007b21 	.word	0x08007b21
 8007a9c:	08007b21 	.word	0x08007b21
 8007aa0:	08007b21 	.word	0x08007b21
 8007aa4:	08007b21 	.word	0x08007b21
 8007aa8:	08007b21 	.word	0x08007b21
 8007aac:	08007b09 	.word	0x08007b09
 8007ab0:	08007b21 	.word	0x08007b21
 8007ab4:	08007b21 	.word	0x08007b21
 8007ab8:	08007b21 	.word	0x08007b21
 8007abc:	08007b21 	.word	0x08007b21
 8007ac0:	08007b21 	.word	0x08007b21
 8007ac4:	08007b21 	.word	0x08007b21
 8007ac8:	08007b21 	.word	0x08007b21
 8007acc:	08007b11 	.word	0x08007b11
 8007ad0:	08007b21 	.word	0x08007b21
 8007ad4:	08007b21 	.word	0x08007b21
 8007ad8:	08007b21 	.word	0x08007b21
 8007adc:	08007b21 	.word	0x08007b21
 8007ae0:	08007b21 	.word	0x08007b21
 8007ae4:	08007b21 	.word	0x08007b21
 8007ae8:	08007b21 	.word	0x08007b21
 8007aec:	08007b19 	.word	0x08007b19
 8007af0:	2301      	movs	r3, #1
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007af6:	e0d6      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007af8:	2304      	movs	r3, #4
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afe:	e0d2      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007b00:	2308      	movs	r3, #8
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b06:	e0ce      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007b08:	2310      	movs	r3, #16
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0e:	e0ca      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007b10:	2320      	movs	r3, #32
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b16:	e0c6      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007b18:	2340      	movs	r3, #64	; 0x40
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1e:	e0c2      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007b20:	2380      	movs	r3, #128	; 0x80
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b26:	e0be      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007b28:	40011400 	.word	0x40011400
 8007b2c:	58024400 	.word	0x58024400
 8007b30:	40007800 	.word	0x40007800
 8007b34:	40007c00 	.word	0x40007c00
 8007b38:	40011800 	.word	0x40011800
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4aad      	ldr	r2, [pc, #692]	; (8007df8 <UART_SetConfig+0x900>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d176      	bne.n	8007c34 <UART_SetConfig+0x73c>
 8007b46:	4bad      	ldr	r3, [pc, #692]	; (8007dfc <UART_SetConfig+0x904>)
 8007b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b4e:	2b28      	cmp	r3, #40	; 0x28
 8007b50:	d86c      	bhi.n	8007c2c <UART_SetConfig+0x734>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <UART_SetConfig+0x660>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007bfd 	.word	0x08007bfd
 8007b5c:	08007c2d 	.word	0x08007c2d
 8007b60:	08007c2d 	.word	0x08007c2d
 8007b64:	08007c2d 	.word	0x08007c2d
 8007b68:	08007c2d 	.word	0x08007c2d
 8007b6c:	08007c2d 	.word	0x08007c2d
 8007b70:	08007c2d 	.word	0x08007c2d
 8007b74:	08007c2d 	.word	0x08007c2d
 8007b78:	08007c05 	.word	0x08007c05
 8007b7c:	08007c2d 	.word	0x08007c2d
 8007b80:	08007c2d 	.word	0x08007c2d
 8007b84:	08007c2d 	.word	0x08007c2d
 8007b88:	08007c2d 	.word	0x08007c2d
 8007b8c:	08007c2d 	.word	0x08007c2d
 8007b90:	08007c2d 	.word	0x08007c2d
 8007b94:	08007c2d 	.word	0x08007c2d
 8007b98:	08007c0d 	.word	0x08007c0d
 8007b9c:	08007c2d 	.word	0x08007c2d
 8007ba0:	08007c2d 	.word	0x08007c2d
 8007ba4:	08007c2d 	.word	0x08007c2d
 8007ba8:	08007c2d 	.word	0x08007c2d
 8007bac:	08007c2d 	.word	0x08007c2d
 8007bb0:	08007c2d 	.word	0x08007c2d
 8007bb4:	08007c2d 	.word	0x08007c2d
 8007bb8:	08007c15 	.word	0x08007c15
 8007bbc:	08007c2d 	.word	0x08007c2d
 8007bc0:	08007c2d 	.word	0x08007c2d
 8007bc4:	08007c2d 	.word	0x08007c2d
 8007bc8:	08007c2d 	.word	0x08007c2d
 8007bcc:	08007c2d 	.word	0x08007c2d
 8007bd0:	08007c2d 	.word	0x08007c2d
 8007bd4:	08007c2d 	.word	0x08007c2d
 8007bd8:	08007c1d 	.word	0x08007c1d
 8007bdc:	08007c2d 	.word	0x08007c2d
 8007be0:	08007c2d 	.word	0x08007c2d
 8007be4:	08007c2d 	.word	0x08007c2d
 8007be8:	08007c2d 	.word	0x08007c2d
 8007bec:	08007c2d 	.word	0x08007c2d
 8007bf0:	08007c2d 	.word	0x08007c2d
 8007bf4:	08007c2d 	.word	0x08007c2d
 8007bf8:	08007c25 	.word	0x08007c25
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c02:	e050      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007c04:	2304      	movs	r3, #4
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0a:	e04c      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007c0c:	2308      	movs	r3, #8
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c12:	e048      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007c14:	2310      	movs	r3, #16
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c1a:	e044      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c22:	e040      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007c24:	2340      	movs	r3, #64	; 0x40
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2a:	e03c      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007c2c:	2380      	movs	r3, #128	; 0x80
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c32:	e038      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a71      	ldr	r2, [pc, #452]	; (8007e00 <UART_SetConfig+0x908>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d130      	bne.n	8007ca0 <UART_SetConfig+0x7a8>
 8007c3e:	4b6f      	ldr	r3, [pc, #444]	; (8007dfc <UART_SetConfig+0x904>)
 8007c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	2b05      	cmp	r3, #5
 8007c48:	d826      	bhi.n	8007c98 <UART_SetConfig+0x7a0>
 8007c4a:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <UART_SetConfig+0x758>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c69 	.word	0x08007c69
 8007c54:	08007c71 	.word	0x08007c71
 8007c58:	08007c79 	.word	0x08007c79
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007c89 	.word	0x08007c89
 8007c64:	08007c91 	.word	0x08007c91
 8007c68:	2302      	movs	r3, #2
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6e:	e01a      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007c70:	2304      	movs	r3, #4
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c76:	e016      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007c78:	2308      	movs	r3, #8
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7e:	e012      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007c80:	2310      	movs	r3, #16
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c86:	e00e      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007c88:	2320      	movs	r3, #32
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8e:	e00a      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007c90:	2340      	movs	r3, #64	; 0x40
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c96:	e006      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007c98:	2380      	movs	r3, #128	; 0x80
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9e:	e002      	b.n	8007ca6 <UART_SetConfig+0x7ae>
 8007ca0:	2380      	movs	r3, #128	; 0x80
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a55      	ldr	r2, [pc, #340]	; (8007e00 <UART_SetConfig+0x908>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	f040 80f8 	bne.w	8007ea2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	dc46      	bgt.n	8007d48 <UART_SetConfig+0x850>
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	db75      	blt.n	8007daa <UART_SetConfig+0x8b2>
 8007cbe:	3b02      	subs	r3, #2
 8007cc0:	2b1e      	cmp	r3, #30
 8007cc2:	d872      	bhi.n	8007daa <UART_SetConfig+0x8b2>
 8007cc4:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <UART_SetConfig+0x7d4>)
 8007cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cca:	bf00      	nop
 8007ccc:	08007d4f 	.word	0x08007d4f
 8007cd0:	08007dab 	.word	0x08007dab
 8007cd4:	08007d57 	.word	0x08007d57
 8007cd8:	08007dab 	.word	0x08007dab
 8007cdc:	08007dab 	.word	0x08007dab
 8007ce0:	08007dab 	.word	0x08007dab
 8007ce4:	08007d67 	.word	0x08007d67
 8007ce8:	08007dab 	.word	0x08007dab
 8007cec:	08007dab 	.word	0x08007dab
 8007cf0:	08007dab 	.word	0x08007dab
 8007cf4:	08007dab 	.word	0x08007dab
 8007cf8:	08007dab 	.word	0x08007dab
 8007cfc:	08007dab 	.word	0x08007dab
 8007d00:	08007dab 	.word	0x08007dab
 8007d04:	08007d77 	.word	0x08007d77
 8007d08:	08007dab 	.word	0x08007dab
 8007d0c:	08007dab 	.word	0x08007dab
 8007d10:	08007dab 	.word	0x08007dab
 8007d14:	08007dab 	.word	0x08007dab
 8007d18:	08007dab 	.word	0x08007dab
 8007d1c:	08007dab 	.word	0x08007dab
 8007d20:	08007dab 	.word	0x08007dab
 8007d24:	08007dab 	.word	0x08007dab
 8007d28:	08007dab 	.word	0x08007dab
 8007d2c:	08007dab 	.word	0x08007dab
 8007d30:	08007dab 	.word	0x08007dab
 8007d34:	08007dab 	.word	0x08007dab
 8007d38:	08007dab 	.word	0x08007dab
 8007d3c:	08007dab 	.word	0x08007dab
 8007d40:	08007dab 	.word	0x08007dab
 8007d44:	08007d9d 	.word	0x08007d9d
 8007d48:	2b40      	cmp	r3, #64	; 0x40
 8007d4a:	d02a      	beq.n	8007da2 <UART_SetConfig+0x8aa>
 8007d4c:	e02d      	b.n	8007daa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007d4e:	f7fd fa93 	bl	8005278 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d54:	e02f      	b.n	8007db6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fd faa2 	bl	80052a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d64:	e027      	b.n	8007db6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d66:	f107 0318 	add.w	r3, r7, #24
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fd fbee 	bl	800554c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d74:	e01f      	b.n	8007db6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d76:	4b21      	ldr	r3, [pc, #132]	; (8007dfc <UART_SetConfig+0x904>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d009      	beq.n	8007d96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d82:	4b1e      	ldr	r3, [pc, #120]	; (8007dfc <UART_SetConfig+0x904>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	08db      	lsrs	r3, r3, #3
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	4a1d      	ldr	r2, [pc, #116]	; (8007e04 <UART_SetConfig+0x90c>)
 8007d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d94:	e00f      	b.n	8007db6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007d96:	4b1b      	ldr	r3, [pc, #108]	; (8007e04 <UART_SetConfig+0x90c>)
 8007d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d9a:	e00c      	b.n	8007db6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d9c:	4b1a      	ldr	r3, [pc, #104]	; (8007e08 <UART_SetConfig+0x910>)
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007da0:	e009      	b.n	8007db6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007da8:	e005      	b.n	8007db6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007db4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 81ee 	beq.w	800819a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	4a12      	ldr	r2, [pc, #72]	; (8007e0c <UART_SetConfig+0x914>)
 8007dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dd0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	4413      	add	r3, r2
 8007ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d305      	bcc.n	8007dee <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d910      	bls.n	8007e10 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007df4:	e1d1      	b.n	800819a <UART_SetConfig+0xca2>
 8007df6:	bf00      	nop
 8007df8:	40011c00 	.word	0x40011c00
 8007dfc:	58024400 	.word	0x58024400
 8007e00:	58000c00 	.word	0x58000c00
 8007e04:	03d09000 	.word	0x03d09000
 8007e08:	003d0900 	.word	0x003d0900
 8007e0c:	080087c0 	.word	0x080087c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e12:	2200      	movs	r2, #0
 8007e14:	60bb      	str	r3, [r7, #8]
 8007e16:	60fa      	str	r2, [r7, #12]
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	4ac0      	ldr	r2, [pc, #768]	; (8008120 <UART_SetConfig+0xc28>)
 8007e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	2200      	movs	r2, #0
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	607a      	str	r2, [r7, #4]
 8007e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e32:	f7f8 fa6d 	bl	8000310 <__aeabi_uldivmod>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	f04f 0200 	mov.w	r2, #0
 8007e42:	f04f 0300 	mov.w	r3, #0
 8007e46:	020b      	lsls	r3, r1, #8
 8007e48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e4c:	0202      	lsls	r2, r0, #8
 8007e4e:	6979      	ldr	r1, [r7, #20]
 8007e50:	6849      	ldr	r1, [r1, #4]
 8007e52:	0849      	lsrs	r1, r1, #1
 8007e54:	2000      	movs	r0, #0
 8007e56:	460c      	mov	r4, r1
 8007e58:	4605      	mov	r5, r0
 8007e5a:	eb12 0804 	adds.w	r8, r2, r4
 8007e5e:	eb43 0905 	adc.w	r9, r3, r5
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	469a      	mov	sl, r3
 8007e6a:	4693      	mov	fp, r2
 8007e6c:	4652      	mov	r2, sl
 8007e6e:	465b      	mov	r3, fp
 8007e70:	4640      	mov	r0, r8
 8007e72:	4649      	mov	r1, r9
 8007e74:	f7f8 fa4c 	bl	8000310 <__aeabi_uldivmod>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e86:	d308      	bcc.n	8007e9a <UART_SetConfig+0x9a2>
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e8e:	d204      	bcs.n	8007e9a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e96:	60da      	str	r2, [r3, #12]
 8007e98:	e17f      	b.n	800819a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ea0:	e17b      	b.n	800819a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eaa:	f040 80bd 	bne.w	8008028 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007eae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	dc48      	bgt.n	8007f48 <UART_SetConfig+0xa50>
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	db7b      	blt.n	8007fb2 <UART_SetConfig+0xaba>
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	d879      	bhi.n	8007fb2 <UART_SetConfig+0xaba>
 8007ebe:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <UART_SetConfig+0x9cc>)
 8007ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec4:	08007f4f 	.word	0x08007f4f
 8007ec8:	08007f57 	.word	0x08007f57
 8007ecc:	08007fb3 	.word	0x08007fb3
 8007ed0:	08007fb3 	.word	0x08007fb3
 8007ed4:	08007f5f 	.word	0x08007f5f
 8007ed8:	08007fb3 	.word	0x08007fb3
 8007edc:	08007fb3 	.word	0x08007fb3
 8007ee0:	08007fb3 	.word	0x08007fb3
 8007ee4:	08007f6f 	.word	0x08007f6f
 8007ee8:	08007fb3 	.word	0x08007fb3
 8007eec:	08007fb3 	.word	0x08007fb3
 8007ef0:	08007fb3 	.word	0x08007fb3
 8007ef4:	08007fb3 	.word	0x08007fb3
 8007ef8:	08007fb3 	.word	0x08007fb3
 8007efc:	08007fb3 	.word	0x08007fb3
 8007f00:	08007fb3 	.word	0x08007fb3
 8007f04:	08007f7f 	.word	0x08007f7f
 8007f08:	08007fb3 	.word	0x08007fb3
 8007f0c:	08007fb3 	.word	0x08007fb3
 8007f10:	08007fb3 	.word	0x08007fb3
 8007f14:	08007fb3 	.word	0x08007fb3
 8007f18:	08007fb3 	.word	0x08007fb3
 8007f1c:	08007fb3 	.word	0x08007fb3
 8007f20:	08007fb3 	.word	0x08007fb3
 8007f24:	08007fb3 	.word	0x08007fb3
 8007f28:	08007fb3 	.word	0x08007fb3
 8007f2c:	08007fb3 	.word	0x08007fb3
 8007f30:	08007fb3 	.word	0x08007fb3
 8007f34:	08007fb3 	.word	0x08007fb3
 8007f38:	08007fb3 	.word	0x08007fb3
 8007f3c:	08007fb3 	.word	0x08007fb3
 8007f40:	08007fb3 	.word	0x08007fb3
 8007f44:	08007fa5 	.word	0x08007fa5
 8007f48:	2b40      	cmp	r3, #64	; 0x40
 8007f4a:	d02e      	beq.n	8007faa <UART_SetConfig+0xab2>
 8007f4c:	e031      	b.n	8007fb2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f4e:	f7fc fa6d 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 8007f52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f54:	e033      	b.n	8007fbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f56:	f7fc fa7f 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 8007f5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f5c:	e02f      	b.n	8007fbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fd f99e 	bl	80052a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f6c:	e027      	b.n	8007fbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f6e:	f107 0318 	add.w	r3, r7, #24
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fd faea 	bl	800554c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f7c:	e01f      	b.n	8007fbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f7e:	4b69      	ldr	r3, [pc, #420]	; (8008124 <UART_SetConfig+0xc2c>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d009      	beq.n	8007f9e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f8a:	4b66      	ldr	r3, [pc, #408]	; (8008124 <UART_SetConfig+0xc2c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	08db      	lsrs	r3, r3, #3
 8007f90:	f003 0303 	and.w	r3, r3, #3
 8007f94:	4a64      	ldr	r2, [pc, #400]	; (8008128 <UART_SetConfig+0xc30>)
 8007f96:	fa22 f303 	lsr.w	r3, r2, r3
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f9c:	e00f      	b.n	8007fbe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007f9e:	4b62      	ldr	r3, [pc, #392]	; (8008128 <UART_SetConfig+0xc30>)
 8007fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fa2:	e00c      	b.n	8007fbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fa4:	4b61      	ldr	r3, [pc, #388]	; (800812c <UART_SetConfig+0xc34>)
 8007fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fa8:	e009      	b.n	8007fbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fb0:	e005      	b.n	8007fbe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007fbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 80ea 	beq.w	800819a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	4a55      	ldr	r2, [pc, #340]	; (8008120 <UART_SetConfig+0xc28>)
 8007fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fd8:	005a      	lsls	r2, r3, #1
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	085b      	lsrs	r3, r3, #1
 8007fe0:	441a      	add	r2, r3
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	2b0f      	cmp	r3, #15
 8007ff0:	d916      	bls.n	8008020 <UART_SetConfig+0xb28>
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff8:	d212      	bcs.n	8008020 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	f023 030f 	bic.w	r3, r3, #15
 8008002:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008006:	085b      	lsrs	r3, r3, #1
 8008008:	b29b      	uxth	r3, r3
 800800a:	f003 0307 	and.w	r3, r3, #7
 800800e:	b29a      	uxth	r2, r3
 8008010:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008012:	4313      	orrs	r3, r2
 8008014:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800801c:	60da      	str	r2, [r3, #12]
 800801e:	e0bc      	b.n	800819a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008026:	e0b8      	b.n	800819a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008028:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800802c:	2b20      	cmp	r3, #32
 800802e:	dc4b      	bgt.n	80080c8 <UART_SetConfig+0xbd0>
 8008030:	2b00      	cmp	r3, #0
 8008032:	f2c0 8087 	blt.w	8008144 <UART_SetConfig+0xc4c>
 8008036:	2b20      	cmp	r3, #32
 8008038:	f200 8084 	bhi.w	8008144 <UART_SetConfig+0xc4c>
 800803c:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <UART_SetConfig+0xb4c>)
 800803e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008042:	bf00      	nop
 8008044:	080080cf 	.word	0x080080cf
 8008048:	080080d7 	.word	0x080080d7
 800804c:	08008145 	.word	0x08008145
 8008050:	08008145 	.word	0x08008145
 8008054:	080080df 	.word	0x080080df
 8008058:	08008145 	.word	0x08008145
 800805c:	08008145 	.word	0x08008145
 8008060:	08008145 	.word	0x08008145
 8008064:	080080ef 	.word	0x080080ef
 8008068:	08008145 	.word	0x08008145
 800806c:	08008145 	.word	0x08008145
 8008070:	08008145 	.word	0x08008145
 8008074:	08008145 	.word	0x08008145
 8008078:	08008145 	.word	0x08008145
 800807c:	08008145 	.word	0x08008145
 8008080:	08008145 	.word	0x08008145
 8008084:	080080ff 	.word	0x080080ff
 8008088:	08008145 	.word	0x08008145
 800808c:	08008145 	.word	0x08008145
 8008090:	08008145 	.word	0x08008145
 8008094:	08008145 	.word	0x08008145
 8008098:	08008145 	.word	0x08008145
 800809c:	08008145 	.word	0x08008145
 80080a0:	08008145 	.word	0x08008145
 80080a4:	08008145 	.word	0x08008145
 80080a8:	08008145 	.word	0x08008145
 80080ac:	08008145 	.word	0x08008145
 80080b0:	08008145 	.word	0x08008145
 80080b4:	08008145 	.word	0x08008145
 80080b8:	08008145 	.word	0x08008145
 80080bc:	08008145 	.word	0x08008145
 80080c0:	08008145 	.word	0x08008145
 80080c4:	08008137 	.word	0x08008137
 80080c8:	2b40      	cmp	r3, #64	; 0x40
 80080ca:	d037      	beq.n	800813c <UART_SetConfig+0xc44>
 80080cc:	e03a      	b.n	8008144 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080ce:	f7fc f9ad 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 80080d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080d4:	e03c      	b.n	8008150 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080d6:	f7fc f9bf 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 80080da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080dc:	e038      	b.n	8008150 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fd f8de 	bl	80052a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080ec:	e030      	b.n	8008150 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ee:	f107 0318 	add.w	r3, r7, #24
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fd fa2a 	bl	800554c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080fc:	e028      	b.n	8008150 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080fe:	4b09      	ldr	r3, [pc, #36]	; (8008124 <UART_SetConfig+0xc2c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0320 	and.w	r3, r3, #32
 8008106:	2b00      	cmp	r3, #0
 8008108:	d012      	beq.n	8008130 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800810a:	4b06      	ldr	r3, [pc, #24]	; (8008124 <UART_SetConfig+0xc2c>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	08db      	lsrs	r3, r3, #3
 8008110:	f003 0303 	and.w	r3, r3, #3
 8008114:	4a04      	ldr	r2, [pc, #16]	; (8008128 <UART_SetConfig+0xc30>)
 8008116:	fa22 f303 	lsr.w	r3, r2, r3
 800811a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800811c:	e018      	b.n	8008150 <UART_SetConfig+0xc58>
 800811e:	bf00      	nop
 8008120:	080087c0 	.word	0x080087c0
 8008124:	58024400 	.word	0x58024400
 8008128:	03d09000 	.word	0x03d09000
 800812c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008130:	4b24      	ldr	r3, [pc, #144]	; (80081c4 <UART_SetConfig+0xccc>)
 8008132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008134:	e00c      	b.n	8008150 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008136:	4b24      	ldr	r3, [pc, #144]	; (80081c8 <UART_SetConfig+0xcd0>)
 8008138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800813a:	e009      	b.n	8008150 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800813c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008142:	e005      	b.n	8008150 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800814e:	bf00      	nop
    }

    if (pclk != 0U)
 8008150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d021      	beq.n	800819a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	4a1c      	ldr	r2, [pc, #112]	; (80081cc <UART_SetConfig+0xcd4>)
 800815c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008160:	461a      	mov	r2, r3
 8008162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008164:	fbb3 f2f2 	udiv	r2, r3, r2
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	085b      	lsrs	r3, r3, #1
 800816e:	441a      	add	r2, r3
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	fbb2 f3f3 	udiv	r3, r2, r3
 8008178:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800817a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817c:	2b0f      	cmp	r3, #15
 800817e:	d909      	bls.n	8008194 <UART_SetConfig+0xc9c>
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008186:	d205      	bcs.n	8008194 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	b29a      	uxth	r2, r3
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	60da      	str	r2, [r3, #12]
 8008192:	e002      	b.n	800819a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2201      	movs	r2, #1
 800819e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	2200      	movs	r2, #0
 80081ae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	2200      	movs	r2, #0
 80081b4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80081b6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3748      	adds	r7, #72	; 0x48
 80081be:	46bd      	mov	sp, r7
 80081c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081c4:	03d09000 	.word	0x03d09000
 80081c8:	003d0900 	.word	0x003d0900
 80081cc:	080087c0 	.word	0x080087c0

080081d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00a      	beq.n	80081fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00a      	beq.n	800821c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	430a      	orrs	r2, r1
 800821a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00a      	beq.n	800823e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008242:	f003 0308 	and.w	r3, r3, #8
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008264:	f003 0310 	and.w	r3, r3, #16
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00a      	beq.n	8008282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00a      	beq.n	80082a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d01a      	beq.n	80082e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082ce:	d10a      	bne.n	80082e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	430a      	orrs	r2, r1
 80082e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00a      	beq.n	8008308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	605a      	str	r2, [r3, #4]
  }
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af02      	add	r7, sp, #8
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008324:	f7fa fa24 	bl	8002770 <HAL_GetTick>
 8008328:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0308 	and.w	r3, r3, #8
 8008334:	2b08      	cmp	r3, #8
 8008336:	d10e      	bne.n	8008356 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f82f 	bl	80083aa <UART_WaitOnFlagUntilTimeout>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e025      	b.n	80083a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0304 	and.w	r3, r3, #4
 8008360:	2b04      	cmp	r3, #4
 8008362:	d10e      	bne.n	8008382 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f819 	bl	80083aa <UART_WaitOnFlagUntilTimeout>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e00f      	b.n	80083a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2220      	movs	r2, #32
 8008386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2220      	movs	r2, #32
 800838e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b09c      	sub	sp, #112	; 0x70
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	603b      	str	r3, [r7, #0]
 80083b6:	4613      	mov	r3, r2
 80083b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ba:	e0a9      	b.n	8008510 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c2:	f000 80a5 	beq.w	8008510 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083c6:	f7fa f9d3 	bl	8002770 <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d302      	bcc.n	80083dc <UART_WaitOnFlagUntilTimeout+0x32>
 80083d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d140      	bne.n	800845e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e4:	e853 3f00 	ldrex	r3, [r3]
 80083e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80083ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083f0:	667b      	str	r3, [r7, #100]	; 0x64
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	461a      	mov	r2, r3
 80083f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008400:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008402:	e841 2300 	strex	r3, r2, [r1]
 8008406:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1e6      	bne.n	80083dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3308      	adds	r3, #8
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008418:	e853 3f00 	ldrex	r3, [r3]
 800841c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	f023 0301 	bic.w	r3, r3, #1
 8008424:	663b      	str	r3, [r7, #96]	; 0x60
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3308      	adds	r3, #8
 800842c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800842e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008430:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008432:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008436:	e841 2300 	strex	r3, r2, [r1]
 800843a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800843c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1e5      	bne.n	800840e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2220      	movs	r2, #32
 8008446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2220      	movs	r2, #32
 800844e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e069      	b.n	8008532 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0304 	and.w	r3, r3, #4
 8008468:	2b00      	cmp	r3, #0
 800846a:	d051      	beq.n	8008510 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800847a:	d149      	bne.n	8008510 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008484:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848e:	e853 3f00 	ldrex	r3, [r3]
 8008492:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008496:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800849a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	461a      	mov	r2, r3
 80084a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a4:	637b      	str	r3, [r7, #52]	; 0x34
 80084a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084ac:	e841 2300 	strex	r3, r2, [r1]
 80084b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1e6      	bne.n	8008486 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3308      	adds	r3, #8
 80084be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	613b      	str	r3, [r7, #16]
   return(result);
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f023 0301 	bic.w	r3, r3, #1
 80084ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3308      	adds	r3, #8
 80084d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084d8:	623a      	str	r2, [r7, #32]
 80084da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	69f9      	ldr	r1, [r7, #28]
 80084de:	6a3a      	ldr	r2, [r7, #32]
 80084e0:	e841 2300 	strex	r3, r2, [r1]
 80084e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e5      	bne.n	80084b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2220      	movs	r2, #32
 80084f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2220      	movs	r2, #32
 8008500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e010      	b.n	8008532 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	69da      	ldr	r2, [r3, #28]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	4013      	ands	r3, r2
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	429a      	cmp	r2, r3
 800851e:	bf0c      	ite	eq
 8008520:	2301      	moveq	r3, #1
 8008522:	2300      	movne	r3, #0
 8008524:	b2db      	uxtb	r3, r3
 8008526:	461a      	mov	r2, r3
 8008528:	79fb      	ldrb	r3, [r7, #7]
 800852a:	429a      	cmp	r2, r3
 800852c:	f43f af46 	beq.w	80083bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3770      	adds	r7, #112	; 0x70
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800853a:	b480      	push	{r7}
 800853c:	b085      	sub	sp, #20
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008548:	2b01      	cmp	r3, #1
 800854a:	d101      	bne.n	8008550 <HAL_UARTEx_DisableFifoMode+0x16>
 800854c:	2302      	movs	r3, #2
 800854e:	e027      	b.n	80085a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2224      	movs	r2, #36	; 0x24
 800855c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f022 0201 	bic.w	r2, r2, #1
 8008576:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800857e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2220      	movs	r2, #32
 8008592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d101      	bne.n	80085c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085c0:	2302      	movs	r3, #2
 80085c2:	e02d      	b.n	8008620 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2224      	movs	r2, #36	; 0x24
 80085d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 0201 	bic.w	r2, r2, #1
 80085ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f84f 	bl	80086a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2220      	movs	r2, #32
 8008612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008638:	2b01      	cmp	r3, #1
 800863a:	d101      	bne.n	8008640 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800863c:	2302      	movs	r3, #2
 800863e:	e02d      	b.n	800869c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2224      	movs	r2, #36	; 0x24
 800864c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f022 0201 	bic.w	r2, r2, #1
 8008666:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	430a      	orrs	r2, r1
 800867a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f811 	bl	80086a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2220      	movs	r2, #32
 800868e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d108      	bne.n	80086c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086c4:	e031      	b.n	800872a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086c6:	2310      	movs	r3, #16
 80086c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086ca:	2310      	movs	r3, #16
 80086cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	0e5b      	lsrs	r3, r3, #25
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	f003 0307 	and.w	r3, r3, #7
 80086dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	0f5b      	lsrs	r3, r3, #29
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	f003 0307 	and.w	r3, r3, #7
 80086ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	7b3a      	ldrb	r2, [r7, #12]
 80086f2:	4911      	ldr	r1, [pc, #68]	; (8008738 <UARTEx_SetNbDataToProcess+0x94>)
 80086f4:	5c8a      	ldrb	r2, [r1, r2]
 80086f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80086fa:	7b3a      	ldrb	r2, [r7, #12]
 80086fc:	490f      	ldr	r1, [pc, #60]	; (800873c <UARTEx_SetNbDataToProcess+0x98>)
 80086fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008700:	fb93 f3f2 	sdiv	r3, r3, r2
 8008704:	b29a      	uxth	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800870c:	7bfb      	ldrb	r3, [r7, #15]
 800870e:	7b7a      	ldrb	r2, [r7, #13]
 8008710:	4909      	ldr	r1, [pc, #36]	; (8008738 <UARTEx_SetNbDataToProcess+0x94>)
 8008712:	5c8a      	ldrb	r2, [r1, r2]
 8008714:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008718:	7b7a      	ldrb	r2, [r7, #13]
 800871a:	4908      	ldr	r1, [pc, #32]	; (800873c <UARTEx_SetNbDataToProcess+0x98>)
 800871c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800871e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008722:	b29a      	uxth	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800872a:	bf00      	nop
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	080087d8 	.word	0x080087d8
 800873c:	080087e0 	.word	0x080087e0

08008740 <__libc_init_array>:
 8008740:	b570      	push	{r4, r5, r6, lr}
 8008742:	4d0d      	ldr	r5, [pc, #52]	; (8008778 <__libc_init_array+0x38>)
 8008744:	4c0d      	ldr	r4, [pc, #52]	; (800877c <__libc_init_array+0x3c>)
 8008746:	1b64      	subs	r4, r4, r5
 8008748:	10a4      	asrs	r4, r4, #2
 800874a:	2600      	movs	r6, #0
 800874c:	42a6      	cmp	r6, r4
 800874e:	d109      	bne.n	8008764 <__libc_init_array+0x24>
 8008750:	4d0b      	ldr	r5, [pc, #44]	; (8008780 <__libc_init_array+0x40>)
 8008752:	4c0c      	ldr	r4, [pc, #48]	; (8008784 <__libc_init_array+0x44>)
 8008754:	f000 f820 	bl	8008798 <_init>
 8008758:	1b64      	subs	r4, r4, r5
 800875a:	10a4      	asrs	r4, r4, #2
 800875c:	2600      	movs	r6, #0
 800875e:	42a6      	cmp	r6, r4
 8008760:	d105      	bne.n	800876e <__libc_init_array+0x2e>
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	f855 3b04 	ldr.w	r3, [r5], #4
 8008768:	4798      	blx	r3
 800876a:	3601      	adds	r6, #1
 800876c:	e7ee      	b.n	800874c <__libc_init_array+0xc>
 800876e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008772:	4798      	blx	r3
 8008774:	3601      	adds	r6, #1
 8008776:	e7f2      	b.n	800875e <__libc_init_array+0x1e>
 8008778:	080087f0 	.word	0x080087f0
 800877c:	080087f0 	.word	0x080087f0
 8008780:	080087f0 	.word	0x080087f0
 8008784:	080087f4 	.word	0x080087f4

08008788 <memset>:
 8008788:	4402      	add	r2, r0
 800878a:	4603      	mov	r3, r0
 800878c:	4293      	cmp	r3, r2
 800878e:	d100      	bne.n	8008792 <memset+0xa>
 8008790:	4770      	bx	lr
 8008792:	f803 1b01 	strb.w	r1, [r3], #1
 8008796:	e7f9      	b.n	800878c <memset+0x4>

08008798 <_init>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	bf00      	nop
 800879c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879e:	bc08      	pop	{r3}
 80087a0:	469e      	mov	lr, r3
 80087a2:	4770      	bx	lr

080087a4 <_fini>:
 80087a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a6:	bf00      	nop
 80087a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087aa:	bc08      	pop	{r3}
 80087ac:	469e      	mov	lr, r3
 80087ae:	4770      	bx	lr
