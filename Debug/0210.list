
0210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef00  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800f1d0  0800f1d0  0001f1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f538  0800f538  0001f538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f540  0800f540  0001f540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f548  0800f548  0001f548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f54c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c88  24000078  0800f5c4  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001d00  0800f5c4  00021d00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001faad  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032a1  00000000  00000000  0003fb53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  00042df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c8  00000000  00000000  000442b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034db1  00000000  00000000  00045678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a62f  00000000  00000000  0007a429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153ff4  00000000  00000000  00094a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e8a4c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d94  00000000  00000000  001e8a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f1b8 	.word	0x0800f1b8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f1b8 	.word	0x0800f1b8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PV1 = 0, PV2 = 0, PV3 = 0, PV4 = 0;
 8000684:	49ac      	ldr	r1, [pc, #688]	; (8000938 <main+0x2b8>)
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c1 2300 	strd	r2, r3, [r1]
 8000692:	49aa      	ldr	r1, [pc, #680]	; (800093c <main+0x2bc>)
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c1 2300 	strd	r2, r3, [r1]
 80006a0:	49a7      	ldr	r1, [pc, #668]	; (8000940 <main+0x2c0>)
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e9c1 2300 	strd	r2, r3, [r1]
 80006ae:	49a5      	ldr	r1, [pc, #660]	; (8000944 <main+0x2c4>)
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	f04f 0300 	mov.w	r3, #0
 80006b8:	e9c1 2300 	strd	r2, r3, [r1]
	SP1 = 0, SP2 = 0, SP3 = 0, SP4 = 0;
 80006bc:	49a2      	ldr	r1, [pc, #648]	; (8000948 <main+0x2c8>)
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
 80006ca:	49a0      	ldr	r1, [pc, #640]	; (800094c <main+0x2cc>)
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c1 2300 	strd	r2, r3, [r1]
 80006d8:	499d      	ldr	r1, [pc, #628]	; (8000950 <main+0x2d0>)
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
 80006e6:	499b      	ldr	r1, [pc, #620]	; (8000954 <main+0x2d4>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]

	n = 0;
 80006f4:	4b98      	ldr	r3, [pc, #608]	; (8000958 <main+0x2d8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	kkk = 0;
 80006fa:	4b98      	ldr	r3, [pc, #608]	; (800095c <main+0x2dc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
	count = 0;
 8000700:	4b97      	ldr	r3, [pc, #604]	; (8000960 <main+0x2e0>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	error1 = PV1 - SP1;
 8000706:	4b8c      	ldr	r3, [pc, #560]	; (8000938 <main+0x2b8>)
 8000708:	ed93 6b00 	vldr	d6, [r3]
 800070c:	4b8e      	ldr	r3, [pc, #568]	; (8000948 <main+0x2c8>)
 800070e:	ed93 7b00 	vldr	d7, [r3]
 8000712:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000716:	4b93      	ldr	r3, [pc, #588]	; (8000964 <main+0x2e4>)
 8000718:	ed83 7b00 	vstr	d7, [r3]
	error2 = PV2 - SP2;
 800071c:	4b87      	ldr	r3, [pc, #540]	; (800093c <main+0x2bc>)
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	4b8a      	ldr	r3, [pc, #552]	; (800094c <main+0x2cc>)
 8000724:	ed93 7b00 	vldr	d7, [r3]
 8000728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072c:	4b8e      	ldr	r3, [pc, #568]	; (8000968 <main+0x2e8>)
 800072e:	ed83 7b00 	vstr	d7, [r3]
	error3 = PV3 - SP3;
 8000732:	4b83      	ldr	r3, [pc, #524]	; (8000940 <main+0x2c0>)
 8000734:	ed93 6b00 	vldr	d6, [r3]
 8000738:	4b85      	ldr	r3, [pc, #532]	; (8000950 <main+0x2d0>)
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000742:	4b8a      	ldr	r3, [pc, #552]	; (800096c <main+0x2ec>)
 8000744:	ed83 7b00 	vstr	d7, [r3]
	error4 = PV4 - SP4;
 8000748:	4b7e      	ldr	r3, [pc, #504]	; (8000944 <main+0x2c4>)
 800074a:	ed93 6b00 	vldr	d6, [r3]
 800074e:	4b81      	ldr	r3, [pc, #516]	; (8000954 <main+0x2d4>)
 8000750:	ed93 7b00 	vldr	d7, [r3]
 8000754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000758:	4b85      	ldr	r3, [pc, #532]	; (8000970 <main+0x2f0>)
 800075a:	ed83 7b00 	vstr	d7, [r3]
	enc1 = 0, enc2 = 0, enc3 = 0, enc4 = 0;
 800075e:	4b85      	ldr	r3, [pc, #532]	; (8000974 <main+0x2f4>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	4b84      	ldr	r3, [pc, #528]	; (8000978 <main+0x2f8>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	4b84      	ldr	r3, [pc, #528]	; (800097c <main+0x2fc>)
 800076c:	2200      	movs	r2, #0
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	4b83      	ldr	r3, [pc, #524]	; (8000980 <main+0x300>)
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]

	Kp1 = 1.314238; // blue
 8000776:	4983      	ldr	r1, [pc, #524]	; (8000984 <main+0x304>)
 8000778:	a367      	add	r3, pc, #412	; (adr r3, 8000918 <main+0x298>)
 800077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 = 37.12271; // blue
 8000782:	4981      	ldr	r1, [pc, #516]	; (8000988 <main+0x308>)
 8000784:	a366      	add	r3, pc, #408	; (adr r3, 8000920 <main+0x2a0>)
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 = 1.8217; // purple
 800078e:	497f      	ldr	r1, [pc, #508]	; (800098c <main+0x30c>)
 8000790:	a365      	add	r3, pc, #404	; (adr r3, 8000928 <main+0x2a8>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 = 48.293; // purple
 800079a:	497d      	ldr	r1, [pc, #500]	; (8000990 <main+0x310>)
 800079c:	a364      	add	r3, pc, #400	; (adr r3, 8000930 <main+0x2b0>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	e9c1 2300 	strd	r2, r3, [r1]
	Kp3 = 1;
 80007a6:	497b      	ldr	r1, [pc, #492]	; (8000994 <main+0x314>)
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	4b7a      	ldr	r3, [pc, #488]	; (8000998 <main+0x318>)
 80007ae:	e9c1 2300 	strd	r2, r3, [r1]
	Ki3 = 30;
 80007b2:	497a      	ldr	r1, [pc, #488]	; (800099c <main+0x31c>)
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	4b79      	ldr	r3, [pc, #484]	; (80009a0 <main+0x320>)
 80007ba:	e9c1 2300 	strd	r2, r3, [r1]
	Kp4 = 1;
 80007be:	4979      	ldr	r1, [pc, #484]	; (80009a4 <main+0x324>)
 80007c0:	f04f 0200 	mov.w	r2, #0
 80007c4:	4b74      	ldr	r3, [pc, #464]	; (8000998 <main+0x318>)
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
	Ki4 = 30;
 80007ca:	4977      	ldr	r1, [pc, #476]	; (80009a8 <main+0x328>)
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	4b73      	ldr	r3, [pc, #460]	; (80009a0 <main+0x320>)
 80007d2:	e9c1 2300 	strd	r2, r3, [r1]

	error_last1 = 0;
 80007d6:	4975      	ldr	r1, [pc, #468]	; (80009ac <main+0x32c>)
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c1 2300 	strd	r2, r3, [r1]
	error_last2 = 0;
 80007e4:	4972      	ldr	r1, [pc, #456]	; (80009b0 <main+0x330>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9c1 2300 	strd	r2, r3, [r1]
	error_last3 = 0;
 80007f2:	4970      	ldr	r1, [pc, #448]	; (80009b4 <main+0x334>)
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c1 2300 	strd	r2, r3, [r1]
	error_last4 = 0;
 8000800:	496d      	ldr	r1, [pc, #436]	; (80009b8 <main+0x338>)
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c1 2300 	strd	r2, r3, [r1]

	errorsum1 = 0;
 800080e:	496b      	ldr	r1, [pc, #428]	; (80009bc <main+0x33c>)
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum2 = 0;
 800081c:	4968      	ldr	r1, [pc, #416]	; (80009c0 <main+0x340>)
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum3 = 0;
 800082a:	4966      	ldr	r1, [pc, #408]	; (80009c4 <main+0x344>)
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum4 = 0;
 8000838:	4963      	ldr	r1, [pc, #396]	; (80009c8 <main+0x348>)
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2300 	strd	r2, r3, [r1]

	push_vel_x = 0;
 8000846:	4961      	ldr	r1, [pc, #388]	; (80009cc <main+0x34c>)
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_y = 0;
 8000854:	495e      	ldr	r1, [pc, #376]	; (80009d0 <main+0x350>)
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_z = 0;
 8000862:	495c      	ldr	r1, [pc, #368]	; (80009d4 <main+0x354>)
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e9c1 2300 	strd	r2, r3, [r1]

	lx = 23;
 8000870:	4959      	ldr	r1, [pc, #356]	; (80009d8 <main+0x358>)
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	4b59      	ldr	r3, [pc, #356]	; (80009dc <main+0x35c>)
 8000878:	e9c1 2300 	strd	r2, r3, [r1]
	ly = 25;
 800087c:	4958      	ldr	r1, [pc, #352]	; (80009e0 <main+0x360>)
 800087e:	f04f 0200 	mov.w	r2, #0
 8000882:	4b58      	ldr	r3, [pc, #352]	; (80009e4 <main+0x364>)
 8000884:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000888:	f005 f8a2 	bl	80059d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088c:	f000 f8be 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000890:	f000 fd8e 	bl	80013b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000894:	f000 fd64 	bl	8001360 <MX_DMA_Init>
  MX_TIM2_Init();
 8000898:	f000 f9b6 	bl	8000c08 <MX_TIM2_Init>
  MX_TIM3_Init();
 800089c:	f000 fa02 	bl	8000ca4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008a0:	f000 fa56 	bl	8000d50 <MX_TIM4_Init>
  MX_TIM6_Init();
 80008a4:	f000 fb0c 	bl	8000ec0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80008a8:	f000 fb4a 	bl	8000f40 <MX_TIM7_Init>
  MX_TIM1_Init();
 80008ac:	f000 f91c 	bl	8000ae8 <MX_TIM1_Init>
  MX_TIM5_Init();
 80008b0:	f000 faaa 	bl	8000e08 <MX_TIM5_Init>
  MX_TIM8_Init();
 80008b4:	f000 fb7a 	bl	8000fac <MX_TIM8_Init>
  MX_TIM15_Init();
 80008b8:	f000 fbd2 	bl	8001060 <MX_TIM15_Init>
  MX_TIM23_Init();
 80008bc:	f000 fc58 	bl	8001170 <MX_TIM23_Init>
  MX_TIM24_Init();
 80008c0:	f000 fcac 	bl	800121c <MX_TIM24_Init>
  MX_USART3_UART_Init();
 80008c4:	f000 fd00 	bl	80012c8 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80008c8:	4847      	ldr	r0, [pc, #284]	; (80009e8 <main+0x368>)
 80008ca:	f00a fd07 	bl	800b2dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80008ce:	2100      	movs	r1, #0
 80008d0:	4846      	ldr	r0, [pc, #280]	; (80009ec <main+0x36c>)
 80008d2:	f00a fffd 	bl	800b8d0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 80008d6:	2100      	movs	r1, #0
 80008d8:	4845      	ldr	r0, [pc, #276]	; (80009f0 <main+0x370>)
 80008da:	f00a fff9 	bl	800b8d0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80008de:	2100      	movs	r1, #0
 80008e0:	4844      	ldr	r0, [pc, #272]	; (80009f4 <main+0x374>)
 80008e2:	f00a fff5 	bl	800b8d0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80008e6:	2100      	movs	r1, #0
 80008e8:	4843      	ldr	r0, [pc, #268]	; (80009f8 <main+0x378>)
 80008ea:	f00a fff1 	bl	800b8d0 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80008ee:	2100      	movs	r1, #0
 80008f0:	4842      	ldr	r0, [pc, #264]	; (80009fc <main+0x37c>)
 80008f2:	f00a fdd1 	bl	800b498 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80008f6:	2100      	movs	r1, #0
 80008f8:	4841      	ldr	r0, [pc, #260]	; (8000a00 <main+0x380>)
 80008fa:	f00a fdcd 	bl	800b498 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80008fe:	2100      	movs	r1, #0
 8000900:	4840      	ldr	r0, [pc, #256]	; (8000a04 <main+0x384>)
 8000902:	f00a fdc9 	bl	800b498 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000906:	2100      	movs	r1, #0
 8000908:	483f      	ldr	r0, [pc, #252]	; (8000a08 <main+0x388>)
 800090a:	f00a fdc5 	bl	800b498 <HAL_TIM_PWM_Start>

  setup();
 800090e:	f003 fb99 	bl	8004044 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000912:	f003 fbb3 	bl	800407c <loop>
 8000916:	e7fc      	b.n	8000912 <main+0x292>
 8000918:	6cd29132 	.word	0x6cd29132
 800091c:	3ff5071e 	.word	0x3ff5071e
 8000920:	f6167232 	.word	0xf6167232
 8000924:	40428fb4 	.word	0x40428fb4
 8000928:	e631f8a1 	.word	0xe631f8a1
 800092c:	3ffd25ae 	.word	0x3ffd25ae
 8000930:	0624dd2f 	.word	0x0624dd2f
 8000934:	40482581 	.word	0x40482581
 8000938:	24000558 	.word	0x24000558
 800093c:	24000560 	.word	0x24000560
 8000940:	24000568 	.word	0x24000568
 8000944:	24000570 	.word	0x24000570
 8000948:	24000578 	.word	0x24000578
 800094c:	24000580 	.word	0x24000580
 8000950:	24000588 	.word	0x24000588
 8000954:	24000590 	.word	0x24000590
 8000958:	24000660 	.word	0x24000660
 800095c:	24000664 	.word	0x24000664
 8000960:	24000668 	.word	0x24000668
 8000964:	24000598 	.word	0x24000598
 8000968:	240005a0 	.word	0x240005a0
 800096c:	240005a8 	.word	0x240005a8
 8000970:	240005b0 	.word	0x240005b0
 8000974:	240005b8 	.word	0x240005b8
 8000978:	240005ba 	.word	0x240005ba
 800097c:	240005bc 	.word	0x240005bc
 8000980:	240005be 	.word	0x240005be
 8000984:	240005c0 	.word	0x240005c0
 8000988:	240005e0 	.word	0x240005e0
 800098c:	240005c8 	.word	0x240005c8
 8000990:	240005e8 	.word	0x240005e8
 8000994:	240005d0 	.word	0x240005d0
 8000998:	3ff00000 	.word	0x3ff00000
 800099c:	240005f0 	.word	0x240005f0
 80009a0:	403e0000 	.word	0x403e0000
 80009a4:	240005d8 	.word	0x240005d8
 80009a8:	240005f8 	.word	0x240005f8
 80009ac:	24000620 	.word	0x24000620
 80009b0:	24000628 	.word	0x24000628
 80009b4:	24000630 	.word	0x24000630
 80009b8:	24000638 	.word	0x24000638
 80009bc:	24000640 	.word	0x24000640
 80009c0:	24000648 	.word	0x24000648
 80009c4:	24000650 	.word	0x24000650
 80009c8:	24000658 	.word	0x24000658
 80009cc:	240006a0 	.word	0x240006a0
 80009d0:	240006a8 	.word	0x240006a8
 80009d4:	240006b0 	.word	0x240006b0
 80009d8:	24000670 	.word	0x24000670
 80009dc:	40370000 	.word	0x40370000
 80009e0:	24000678 	.word	0x24000678
 80009e4:	40390000 	.word	0x40390000
 80009e8:	240000e0 	.word	0x240000e0
 80009ec:	2400012c 	.word	0x2400012c
 80009f0:	240002a8 	.word	0x240002a8
 80009f4:	24000340 	.word	0x24000340
 80009f8:	2400038c 	.word	0x2400038c
 80009fc:	24000178 	.word	0x24000178
 8000a00:	240001c4 	.word	0x240001c4
 8000a04:	240002f4 	.word	0x240002f4
 8000a08:	24000094 	.word	0x24000094

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09c      	sub	sp, #112	; 0x70
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	224c      	movs	r2, #76	; 0x4c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00e fa42 	bl	800eea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00e fa3c 	bl	800eea4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f008 f96d 	bl	8008d0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <SystemClock_Config+0xd8>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a2a      	ldr	r2, [pc, #168]	; (8000ae4 <SystemClock_Config+0xd8>)
 8000a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <SystemClock_Config+0xd8>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a4e:	bf00      	nop
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <SystemClock_Config+0xd8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a5c:	d1f8      	bne.n	8000a50 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a62:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a70:	2304      	movs	r3, #4
 8000a72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a74:	23a8      	movs	r3, #168	; 0xa8
 8000a76:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a84:	2304      	movs	r3, #4
 8000a86:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	4618      	mov	r0, r3
 8000a96:	f008 f973 	bl	8008d80 <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000aa0:	f001 fac8 	bl	8002034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	233f      	movs	r3, #63	; 0x3f
 8000aa6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ab4:	2340      	movs	r3, #64	; 0x40
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ab8:	2340      	movs	r3, #64	; 0x40
 8000aba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ac2:	2340      	movs	r3, #64	; 0x40
 8000ac4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f008 fd06 	bl	80094dc <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000ad6:	f001 faad 	bl	8002034 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3770      	adds	r7, #112	; 0x70
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	58024800 	.word	0x58024800

08000ae8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b098      	sub	sp, #96	; 0x60
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
 8000b0a:	615a      	str	r2, [r3, #20]
 8000b0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2234      	movs	r2, #52	; 0x34
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f00e f9c5 	bl	800eea4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b1a:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b1c:	4a39      	ldr	r2, [pc, #228]	; (8000c04 <MX_TIM1_Init+0x11c>)
 8000b1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 274;
 8000b20:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b22:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000b26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b2e:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3c:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b48:	482d      	ldr	r0, [pc, #180]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b4a:	f00a fc4d 	bl	800b3e8 <HAL_TIM_PWM_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000b54:	f001 fa6e 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4825      	ldr	r0, [pc, #148]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b6c:	f00b fed2 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b76:	f001 fa5d 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7a:	2360      	movs	r3, #96	; 0x60
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b82:	2300      	movs	r3, #0
 8000b84:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b86:	2300      	movs	r3, #0
 8000b88:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b92:	2300      	movs	r3, #0
 8000b94:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4818      	ldr	r0, [pc, #96]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000ba0:	f00b f844 	bl	800bc2c <HAL_TIM_PWM_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000baa:	f001 fa43 	bl	8002034 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000be4:	f00b ff32 	bl	800ca4c <HAL_TIMEx_ConfigBreakDeadTime>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000bee:	f001 fa21 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000bf4:	f004 fc10 	bl	8005418 <HAL_TIM_MspPostInit>

}
 8000bf8:	bf00      	nop
 8000bfa:	3760      	adds	r7, #96	; 0x60
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	24000094 	.word	0x24000094
 8000c04:	40010000 	.word	0x40010000

08000c08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c26:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c30:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000c34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c50:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c52:	f00a faeb 	bl	800b22c <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c5c:	f001 f9ea 	bl	8002034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c6e:	f00b f8f1 	bl	800be54 <HAL_TIM_ConfigClockSource>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c78:	f001 f9dc 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c8a:	f00b fe43 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c94:	f001 f9ce 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	240000e0 	.word	0x240000e0

08000ca4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08c      	sub	sp, #48	; 0x30
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	2224      	movs	r2, #36	; 0x24
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f00e f8f6 	bl	800eea4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000cc4:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <MX_TIM3_Init+0xa8>)
 8000cc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d00:	2301      	movs	r3, #1
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4619      	mov	r1, r3
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000d14:	f00a fd36 	bl	800b784 <HAL_TIM_Encoder_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d1e:	f001 f989 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000d30:	f00b fdf0 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d3a:	f001 f97b 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	3730      	adds	r7, #48	; 0x30
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2400012c 	.word	0x2400012c
 8000d4c:	40000400 	.word	0x40000400

08000d50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000d76:	4a23      	ldr	r2, [pc, #140]	; (8000e04 <MX_TIM4_Init+0xb4>)
 8000d78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 274;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000d7c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000d80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000d8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d9c:	4818      	ldr	r0, [pc, #96]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000d9e:	f00a fb23 	bl	800b3e8 <HAL_TIM_PWM_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000da8:	f001 f944 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	4811      	ldr	r0, [pc, #68]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000dbc:	f00b fdaa 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000dc6:	f001 f935 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dca:	2360      	movs	r3, #96	; 0x60
 8000dcc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4619      	mov	r1, r3
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000de2:	f00a ff23 	bl	800bc2c <HAL_TIM_PWM_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000dec:	f001 f922 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000df2:	f004 fb11 	bl	8005418 <HAL_TIM_MspPostInit>

}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	; 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	24000178 	.word	0x24000178
 8000e04:	40000800 	.word	0x40000800

08000e08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
 8000e28:	615a      	str	r2, [r3, #20]
 8000e2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <MX_TIM5_Init+0xb4>)
 8000e30:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 274;
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e34:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000e38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e54:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e56:	f00a fac7 	bl	800b3e8 <HAL_TIM_PWM_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8000e60:	f001 f8e8 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e74:	f00b fd4e 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8000e7e:	f001 f8d9 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e82:	2360      	movs	r3, #96	; 0x60
 8000e84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	4619      	mov	r1, r3
 8000e98:	4807      	ldr	r0, [pc, #28]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e9a:	f00a fec7 	bl	800bc2c <HAL_TIM_PWM_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000ea4:	f001 f8c6 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ea8:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000eaa:	f004 fab5 	bl	8005418 <HAL_TIM_MspPostInit>

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	240001c4 	.word	0x240001c4
 8000ebc:	40000c00 	.word	0x40000c00

08000ec0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000ed2:	4a1a      	ldr	r2, [pc, #104]	; (8000f3c <MX_TIM6_Init+0x7c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ef0:	4811      	ldr	r0, [pc, #68]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000ef2:	f00a f99b 	bl	800b22c <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000efc:	f001 f89a 	bl	8002034 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f00:	2108      	movs	r1, #8
 8000f02:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000f04:	f00a fbe4 	bl	800b6d0 <HAL_TIM_OnePulse_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000f0e:	f001 f891 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000f20:	f00b fcf8 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000f2a:	f001 f883 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	24000210 	.word	0x24000210
 8000f3c:	40001000 	.word	0x40001000

08000f40 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_TIM7_Init+0x64>)
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <MX_TIM7_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_TIM7_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_TIM7_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_TIM7_Init+0x64>)
 8000f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f68:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_TIM7_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <MX_TIM7_Init+0x64>)
 8000f72:	f00a f95b 	bl	800b22c <HAL_TIM_Base_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f7c:	f001 f85a 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_TIM7_Init+0x64>)
 8000f8e:	f00b fcc1 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f98:	f001 f84c 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2400025c 	.word	0x2400025c
 8000fa8:	40001400 	.word	0x40001400

08000fac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	; 0x30
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2224      	movs	r2, #36	; 0x24
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f00d ff72 	bl	800eea4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <MX_TIM8_Init+0xac>)
 8000fcc:	4a23      	ldr	r2, [pc, #140]	; (800105c <MX_TIM8_Init+0xb0>)
 8000fce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fd0:	4b21      	ldr	r3, [pc, #132]	; (8001058 <MX_TIM8_Init+0xac>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <MX_TIM8_Init+0xac>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <MX_TIM8_Init+0xac>)
 8000fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fe2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <MX_TIM8_Init+0xac>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_TIM8_Init+0xac>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <MX_TIM8_Init+0xac>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ffe:	2301      	movs	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800100e:	2301      	movs	r3, #1
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4619      	mov	r1, r3
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_TIM8_Init+0xac>)
 8001022:	f00a fbaf 	bl	800b784 <HAL_TIM_Encoder_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800102c:	f001 f802 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_TIM8_Init+0xac>)
 8001042:	f00b fc67 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800104c:	f000 fff2 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3730      	adds	r7, #48	; 0x30
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	240002a8 	.word	0x240002a8
 800105c:	40010400 	.word	0x40010400

08001060 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b098      	sub	sp, #96	; 0x60
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001066:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001072:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]
 8001082:	615a      	str	r2, [r3, #20]
 8001084:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2234      	movs	r2, #52	; 0x34
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f00d ff09 	bl	800eea4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001092:	4b35      	ldr	r3, [pc, #212]	; (8001168 <MX_TIM15_Init+0x108>)
 8001094:	4a35      	ldr	r2, [pc, #212]	; (800116c <MX_TIM15_Init+0x10c>)
 8001096:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 274;
 8001098:	4b33      	ldr	r3, [pc, #204]	; (8001168 <MX_TIM15_Init+0x108>)
 800109a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800109e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <MX_TIM15_Init+0x108>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80010a6:	4b30      	ldr	r3, [pc, #192]	; (8001168 <MX_TIM15_Init+0x108>)
 80010a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ac:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <MX_TIM15_Init+0x108>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <MX_TIM15_Init+0x108>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <MX_TIM15_Init+0x108>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80010c0:	4829      	ldr	r0, [pc, #164]	; (8001168 <MX_TIM15_Init+0x108>)
 80010c2:	f00a f991 	bl	800b3e8 <HAL_TIM_PWM_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 80010cc:	f000 ffb2 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80010d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010dc:	4619      	mov	r1, r3
 80010de:	4822      	ldr	r0, [pc, #136]	; (8001168 <MX_TIM15_Init+0x108>)
 80010e0:	f00b fc18 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 80010ea:	f000 ffa3 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ee:	2360      	movs	r3, #96	; 0x60
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f6:	2300      	movs	r3, #0
 80010f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010fa:	2300      	movs	r3, #0
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800110a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800110e:	2200      	movs	r2, #0
 8001110:	4619      	mov	r1, r3
 8001112:	4815      	ldr	r0, [pc, #84]	; (8001168 <MX_TIM15_Init+0x108>)
 8001114:	f00a fd8a 	bl	800bc2c <HAL_TIM_PWM_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 800111e:	f000 ff89 	bl	8002034 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_TIM15_Init+0x108>)
 800114a:	f00b fc7f 	bl	800ca4c <HAL_TIMEx_ConfigBreakDeadTime>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8001154:	f000 ff6e 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <MX_TIM15_Init+0x108>)
 800115a:	f004 f95d 	bl	8005418 <HAL_TIM_MspPostInit>

}
 800115e:	bf00      	nop
 8001160:	3760      	adds	r7, #96	; 0x60
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	240002f4 	.word	0x240002f4
 800116c:	40014000 	.word	0x40014000

08001170 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	2224      	movs	r2, #36	; 0x24
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f00d fe90 	bl	800eea4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	463b      	mov	r3, r7
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <MX_TIM23_Init+0xa4>)
 8001190:	4a21      	ldr	r2, [pc, #132]	; (8001218 <MX_TIM23_Init+0xa8>)
 8001192:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_TIM23_Init+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <MX_TIM23_Init+0xa4>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 65535;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_TIM23_Init+0xa4>)
 80011a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a6:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_TIM23_Init+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <MX_TIM23_Init+0xa4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011b4:	2303      	movs	r3, #3
 80011b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011bc:	2301      	movs	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4619      	mov	r1, r3
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_TIM23_Init+0xa4>)
 80011e0:	f00a fad0 	bl	800b784 <HAL_TIM_Encoder_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 80011ea:	f000 ff23 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_TIM23_Init+0xa4>)
 80011fc:	f00b fb8a 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8001206:	f000 ff15 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	3730      	adds	r7, #48	; 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	24000340 	.word	0x24000340
 8001218:	4000e000 	.word	0x4000e000

0800121c <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2224      	movs	r2, #36	; 0x24
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f00d fe3a 	bl	800eea4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	463b      	mov	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <MX_TIM24_Init+0xa4>)
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <MX_TIM24_Init+0xa8>)
 800123e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <MX_TIM24_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_TIM24_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 65535;
 800124c:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_TIM24_Init+0xa4>)
 800124e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001252:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_TIM24_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_TIM24_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001260:	2303      	movs	r3, #3
 8001262:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001268:	2301      	movs	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001278:	2301      	movs	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4619      	mov	r1, r3
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <MX_TIM24_Init+0xa4>)
 800128c:	f00a fa7a 	bl	800b784 <HAL_TIM_Encoder_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 8001296:	f000 fecd 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80012a2:	463b      	mov	r3, r7
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <MX_TIM24_Init+0xa4>)
 80012a8:	f00b fb34 	bl	800c914 <HAL_TIMEx_MasterConfigSynchronization>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 80012b2:	f000 febf 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	3730      	adds	r7, #48	; 0x30
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2400038c 	.word	0x2400038c
 80012c4:	4000e400 	.word	0x4000e400

080012c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012cc:	4b22      	ldr	r3, [pc, #136]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012ce:	4a23      	ldr	r2, [pc, #140]	; (800135c <MX_USART3_UART_Init+0x94>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_USART3_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_USART3_UART_Init+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_USART3_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001310:	4811      	ldr	r0, [pc, #68]	; (8001358 <MX_USART3_UART_Init+0x90>)
 8001312:	f00b fc59 	bl	800cbc8 <HAL_UART_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800131c:	f000 fe8a 	bl	8002034 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001320:	2100      	movs	r1, #0
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_USART3_UART_Init+0x90>)
 8001324:	f00d fca0 	bl	800ec68 <HAL_UARTEx_SetTxFifoThreshold>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800132e:	f000 fe81 	bl	8002034 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001332:	2100      	movs	r1, #0
 8001334:	4808      	ldr	r0, [pc, #32]	; (8001358 <MX_USART3_UART_Init+0x90>)
 8001336:	f00d fcd5 	bl	800ece4 <HAL_UARTEx_SetRxFifoThreshold>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001340:	f000 fe78 	bl	8002034 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_USART3_UART_Init+0x90>)
 8001346:	f00d fc56 	bl	800ebf6 <HAL_UARTEx_DisableFifoMode>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001350:	f000 fe70 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	240003d8 	.word	0x240003d8
 800135c:	40004800 	.word	0x40004800

08001360 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_DMA_Init+0x4c>)
 8001368:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800136c:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <MX_DMA_Init+0x4c>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <MX_DMA_Init+0x4c>)
 8001378:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	200b      	movs	r0, #11
 800138a:	f004 fc8e 	bl	8005caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800138e:	200b      	movs	r0, #11
 8001390:	f004 fca5 	bl	8005cde <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	200c      	movs	r0, #12
 800139a:	f004 fc86 	bl	8005caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800139e:	200c      	movs	r0, #12
 80013a0:	f004 fc9d 	bl	8005cde <HAL_NVIC_EnableIRQ>

}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	58024400 	.word	0x58024400

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	; 0x38
 80013b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c6:	4ba7      	ldr	r3, [pc, #668]	; (8001664 <MX_GPIO_Init+0x2b4>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013cc:	4aa5      	ldr	r2, [pc, #660]	; (8001664 <MX_GPIO_Init+0x2b4>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d6:	4ba3      	ldr	r3, [pc, #652]	; (8001664 <MX_GPIO_Init+0x2b4>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	623b      	str	r3, [r7, #32]
 80013e2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e4:	4b9f      	ldr	r3, [pc, #636]	; (8001664 <MX_GPIO_Init+0x2b4>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ea:	4a9e      	ldr	r2, [pc, #632]	; (8001664 <MX_GPIO_Init+0x2b4>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f4:	4b9b      	ldr	r3, [pc, #620]	; (8001664 <MX_GPIO_Init+0x2b4>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001402:	4b98      	ldr	r3, [pc, #608]	; (8001664 <MX_GPIO_Init+0x2b4>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001408:	4a96      	ldr	r2, [pc, #600]	; (8001664 <MX_GPIO_Init+0x2b4>)
 800140a:	f043 0320 	orr.w	r3, r3, #32
 800140e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001412:	4b94      	ldr	r3, [pc, #592]	; (8001664 <MX_GPIO_Init+0x2b4>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001420:	4b90      	ldr	r3, [pc, #576]	; (8001664 <MX_GPIO_Init+0x2b4>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001426:	4a8f      	ldr	r2, [pc, #572]	; (8001664 <MX_GPIO_Init+0x2b4>)
 8001428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001430:	4b8c      	ldr	r3, [pc, #560]	; (8001664 <MX_GPIO_Init+0x2b4>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	4b89      	ldr	r3, [pc, #548]	; (8001664 <MX_GPIO_Init+0x2b4>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001444:	4a87      	ldr	r2, [pc, #540]	; (8001664 <MX_GPIO_Init+0x2b4>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144e:	4b85      	ldr	r3, [pc, #532]	; (8001664 <MX_GPIO_Init+0x2b4>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	4b81      	ldr	r3, [pc, #516]	; (8001664 <MX_GPIO_Init+0x2b4>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001462:	4a80      	ldr	r2, [pc, #512]	; (8001664 <MX_GPIO_Init+0x2b4>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146c:	4b7d      	ldr	r3, [pc, #500]	; (8001664 <MX_GPIO_Init+0x2b4>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147a:	4b7a      	ldr	r3, [pc, #488]	; (8001664 <MX_GPIO_Init+0x2b4>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001480:	4a78      	ldr	r2, [pc, #480]	; (8001664 <MX_GPIO_Init+0x2b4>)
 8001482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148a:	4b76      	ldr	r3, [pc, #472]	; (8001664 <MX_GPIO_Init+0x2b4>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001498:	4b72      	ldr	r3, [pc, #456]	; (8001664 <MX_GPIO_Init+0x2b4>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149e:	4a71      	ldr	r2, [pc, #452]	; (8001664 <MX_GPIO_Init+0x2b4>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a8:	4b6e      	ldr	r3, [pc, #440]	; (8001664 <MX_GPIO_Init+0x2b4>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2104      	movs	r1, #4
 80014ba:	486b      	ldr	r0, [pc, #428]	; (8001668 <MX_GPIO_Init+0x2b8>)
 80014bc:	f007 fc0c 	bl	8008cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f244 0105 	movw	r1, #16389	; 0x4005
 80014c6:	4869      	ldr	r0, [pc, #420]	; (800166c <MX_GPIO_Init+0x2bc>)
 80014c8:	f007 fc06 	bl	8008cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2103      	movs	r1, #3
 80014d0:	4867      	ldr	r0, [pc, #412]	; (8001670 <MX_GPIO_Init+0x2c0>)
 80014d2:	f007 fc01 	bl	8008cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f241 4102 	movw	r1, #5122	; 0x1402
 80014dc:	4865      	ldr	r0, [pc, #404]	; (8001674 <MX_GPIO_Init+0x2c4>)
 80014de:	f007 fbfb 	bl	8008cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f240 4103 	movw	r1, #1027	; 0x403
 80014e8:	4863      	ldr	r0, [pc, #396]	; (8001678 <MX_GPIO_Init+0x2c8>)
 80014ea:	f007 fbf5 	bl	8008cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	4619      	mov	r1, r3
 8001502:	485e      	ldr	r0, [pc, #376]	; (800167c <MX_GPIO_Init+0x2cc>)
 8001504:	f007 fa40 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001508:	2304      	movs	r3, #4
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	4619      	mov	r1, r3
 800151e:	4852      	ldr	r0, [pc, #328]	; (8001668 <MX_GPIO_Init+0x2b8>)
 8001520:	f007 fa32 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001524:	2332      	movs	r3, #50	; 0x32
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001534:	230b      	movs	r3, #11
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	4619      	mov	r1, r3
 800153e:	484f      	ldr	r0, [pc, #316]	; (800167c <MX_GPIO_Init+0x2cc>)
 8001540:	f007 fa22 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001544:	2386      	movs	r3, #134	; 0x86
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001554:	230b      	movs	r3, #11
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155c:	4619      	mov	r1, r3
 800155e:	4848      	ldr	r0, [pc, #288]	; (8001680 <MX_GPIO_Init+0x2d0>)
 8001560:	f007 fa12 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PB2 LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin;
 8001564:	f244 0305 	movw	r3, #16389	; 0x4005
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	483b      	ldr	r0, [pc, #236]	; (800166c <MX_GPIO_Init+0x2bc>)
 800157e:	f007 fa03 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001582:	2303      	movs	r3, #3
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	4835      	ldr	r0, [pc, #212]	; (8001670 <MX_GPIO_Init+0x2c0>)
 800159a:	f007 f9f5 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin;
 800159e:	f241 4302 	movw	r3, #5122	; 0x1402
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b4:	4619      	mov	r1, r3
 80015b6:	482f      	ldr	r0, [pc, #188]	; (8001674 <MX_GPIO_Init+0x2c4>)
 80015b8:	f007 f9e6 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ce:	230b      	movs	r3, #11
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	4824      	ldr	r0, [pc, #144]	; (800166c <MX_GPIO_Init+0x2bc>)
 80015da:	f007 f9d5 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD0 PD1 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1;
 80015de:	f240 4303 	movw	r3, #1027	; 0x403
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	4820      	ldr	r0, [pc, #128]	; (8001678 <MX_GPIO_Init+0x2c8>)
 80015f8:	f007 f9c6 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001600:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	4817      	ldr	r0, [pc, #92]	; (8001670 <MX_GPIO_Init+0x2c0>)
 8001612:	f007 f9b9 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001628:	230a      	movs	r3, #10
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	4813      	ldr	r0, [pc, #76]	; (8001680 <MX_GPIO_Init+0x2d0>)
 8001634:	f007 f9a8 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001638:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800164a:	230b      	movs	r3, #11
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	4806      	ldr	r0, [pc, #24]	; (8001670 <MX_GPIO_Init+0x2c0>)
 8001656:	f007 f997 	bl	8008988 <HAL_GPIO_Init>

}
 800165a:	bf00      	nop
 800165c:	3738      	adds	r7, #56	; 0x38
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	58024400 	.word	0x58024400
 8001668:	58021400 	.word	0x58021400
 800166c:	58020400 	.word	0x58020400
 8001670:	58021800 	.word	0x58021800
 8001674:	58021000 	.word	0x58021000
 8001678:	58020c00 	.word	0x58020c00
 800167c:	58020800 	.word	0x58020800
 8001680:	58020000 	.word	0x58020000
 8001684:	00000000 	.word	0x00000000

08001688 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
}
}
PID ?�度*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001698:	f040 8488 	bne.w	8001fac <HAL_TIM_PeriodElapsedCallback+0x924>

		SP1 = 1/r * (get_vel_x - get_vel_y - (lx + ly) * get_vel_z); // fl
 800169c:	4bc4      	ldr	r3, [pc, #784]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800169e:	ed93 7b00 	vldr	d7, [r3]
 80016a2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80016a6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016aa:	4bc2      	ldr	r3, [pc, #776]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016ac:	ed93 5b00 	vldr	d5, [r3]
 80016b0:	4bc1      	ldr	r3, [pc, #772]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016b2:	ed93 7b00 	vldr	d7, [r3]
 80016b6:	ee35 5b47 	vsub.f64	d5, d5, d7
 80016ba:	4bc0      	ldr	r3, [pc, #768]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 80016bc:	ed93 4b00 	vldr	d4, [r3]
 80016c0:	4bbf      	ldr	r3, [pc, #764]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80016c2:	ed93 7b00 	vldr	d7, [r3]
 80016c6:	ee34 4b07 	vadd.f64	d4, d4, d7
 80016ca:	4bbe      	ldr	r3, [pc, #760]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80016cc:	ed93 7b00 	vldr	d7, [r3]
 80016d0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80016d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80016d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80016dc:	4bba      	ldr	r3, [pc, #744]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80016de:	ed83 7b00 	vstr	d7, [r3]
		SP2 = 1/r * (get_vel_x + get_vel_y + (lx + ly) * get_vel_z); // fr
 80016e2:	4bb3      	ldr	r3, [pc, #716]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80016e4:	ed93 7b00 	vldr	d7, [r3]
 80016e8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80016ec:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016f0:	4bb0      	ldr	r3, [pc, #704]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016f2:	ed93 5b00 	vldr	d5, [r3]
 80016f6:	4bb0      	ldr	r3, [pc, #704]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016f8:	ed93 7b00 	vldr	d7, [r3]
 80016fc:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001700:	4bae      	ldr	r3, [pc, #696]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001702:	ed93 4b00 	vldr	d4, [r3]
 8001706:	4bae      	ldr	r3, [pc, #696]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001708:	ed93 7b00 	vldr	d7, [r3]
 800170c:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001710:	4bac      	ldr	r3, [pc, #688]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001712:	ed93 7b00 	vldr	d7, [r3]
 8001716:	ee24 7b07 	vmul.f64	d7, d4, d7
 800171a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800171e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001722:	4baa      	ldr	r3, [pc, #680]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001724:	ed83 7b00 	vstr	d7, [r3]
		SP3 = 1/r * (get_vel_x + get_vel_y - (lx + ly) * get_vel_z); // rl
 8001728:	4ba1      	ldr	r3, [pc, #644]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800172a:	ed93 7b00 	vldr	d7, [r3]
 800172e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001732:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001736:	4b9f      	ldr	r3, [pc, #636]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001738:	ed93 5b00 	vldr	d5, [r3]
 800173c:	4b9e      	ldr	r3, [pc, #632]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800173e:	ed93 7b00 	vldr	d7, [r3]
 8001742:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001746:	4b9d      	ldr	r3, [pc, #628]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001748:	ed93 4b00 	vldr	d4, [r3]
 800174c:	4b9c      	ldr	r3, [pc, #624]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800174e:	ed93 7b00 	vldr	d7, [r3]
 8001752:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001756:	4b9b      	ldr	r3, [pc, #620]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001758:	ed93 7b00 	vldr	d7, [r3]
 800175c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001760:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001764:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001768:	4b99      	ldr	r3, [pc, #612]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800176a:	ed83 7b00 	vstr	d7, [r3]
		SP4 = 1/r * (get_vel_x - get_vel_y + (lx + ly) * get_vel_z); // rr
 800176e:	4b90      	ldr	r3, [pc, #576]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001770:	ed93 7b00 	vldr	d7, [r3]
 8001774:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001778:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800177c:	4b8d      	ldr	r3, [pc, #564]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800177e:	ed93 5b00 	vldr	d5, [r3]
 8001782:	4b8d      	ldr	r3, [pc, #564]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001784:	ed93 7b00 	vldr	d7, [r3]
 8001788:	ee35 5b47 	vsub.f64	d5, d5, d7
 800178c:	4b8b      	ldr	r3, [pc, #556]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800178e:	ed93 4b00 	vldr	d4, [r3]
 8001792:	4b8b      	ldr	r3, [pc, #556]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001794:	ed93 7b00 	vldr	d7, [r3]
 8001798:	ee34 4b07 	vadd.f64	d4, d4, d7
 800179c:	4b89      	ldr	r3, [pc, #548]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800179e:	ed93 7b00 	vldr	d7, [r3]
 80017a2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80017a6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017ae:	4b89      	ldr	r3, [pc, #548]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017b0:	ed83 7b00 	vstr	d7, [r3]


		enc1 = __HAL_TIM_GetCounter(&htim3);
 80017b4:	4b88      	ldr	r3, [pc, #544]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	b21a      	sxth	r2, r3
 80017bc:	4b87      	ldr	r3, [pc, #540]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80017be:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim8);
 80017c0:	4b87      	ldr	r3, [pc, #540]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	4b86      	ldr	r3, [pc, #536]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80017ca:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim23);
 80017cc:	4b86      	ldr	r3, [pc, #536]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	4b85      	ldr	r3, [pc, #532]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x364>)
 80017d6:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim24);
 80017d8:	4b85      	ldr	r3, [pc, #532]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	b21a      	sxth	r2, r3
 80017e0:	4b84      	ldr	r3, [pc, #528]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80017e2:	801a      	strh	r2, [r3, #0]

		n++;
 80017e4:	4b84      	ldr	r3, [pc, #528]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	4a83      	ldr	r2, [pc, #524]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80017ec:	6013      	str	r3, [r2, #0]

		PV1 = (double) enc1 / (4 * 512 * 36 * 0.001);
 80017ee:	4b7b      	ldr	r3, [pc, #492]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80017f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80017fc:	ed9f 5b68 	vldr	d5, [pc, #416]	; 80019a0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001800:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001804:	4b7d      	ldr	r3, [pc, #500]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001806:	ed83 7b00 	vstr	d7, [r3]
		PV2 = (double) enc2 / (4 * 512 * 36 * 0.001);
 800180a:	4b76      	ldr	r3, [pc, #472]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800180c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001818:	ed9f 5b61 	vldr	d5, [pc, #388]	; 80019a0 <HAL_TIM_PeriodElapsedCallback+0x318>
 800181c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001820:	4b77      	ldr	r3, [pc, #476]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001822:	ed83 7b00 	vstr	d7, [r3]
		PV3 = (double) enc3 / (4 * 512 * 36 * 0.001);
 8001826:	4b71      	ldr	r3, [pc, #452]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001834:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 80019a0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001838:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800183c:	4b71      	ldr	r3, [pc, #452]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800183e:	ed83 7b00 	vstr	d7, [r3]
		PV4 = (double) enc4 / (4 * 512 * 36 * 0.001);
 8001842:	4b6c      	ldr	r3, [pc, #432]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001850:	ed9f 5b53 	vldr	d5, [pc, #332]	; 80019a0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001854:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001858:	4b6b      	ldr	r3, [pc, #428]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800185a:	ed83 7b00 	vstr	d7, [r3]

 		__HAL_TIM_SetCounter(&htim3, 0);
 800185e:	4b5e      	ldr	r3, [pc, #376]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim8, 0);
 8001866:	4b5e      	ldr	r3, [pc, #376]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim23, 0);
 800186e:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim24, 0);
 8001876:	4b5e      	ldr	r3, [pc, #376]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	; 0x24

		error1 = SP1 - PV1;
 800187e:	4b52      	ldr	r3, [pc, #328]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001880:	ed93 6b00 	vldr	d6, [r3]
 8001884:	4b5d      	ldr	r3, [pc, #372]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001886:	ed93 7b00 	vldr	d7, [r3]
 800188a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800188e:	4b5f      	ldr	r3, [pc, #380]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001890:	ed83 7b00 	vstr	d7, [r3]
		error2 = SP2 - PV2;
 8001894:	4b4d      	ldr	r3, [pc, #308]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001896:	ed93 6b00 	vldr	d6, [r3]
 800189a:	4b59      	ldr	r3, [pc, #356]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800189c:	ed93 7b00 	vldr	d7, [r3]
 80018a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018a4:	4b5a      	ldr	r3, [pc, #360]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80018a6:	ed83 7b00 	vstr	d7, [r3]
		error3 = SP3 - PV3;
 80018aa:	4b49      	ldr	r3, [pc, #292]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80018ac:	ed93 6b00 	vldr	d6, [r3]
 80018b0:	4b54      	ldr	r3, [pc, #336]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018b2:	ed93 7b00 	vldr	d7, [r3]
 80018b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018ba:	4b56      	ldr	r3, [pc, #344]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80018bc:	ed83 7b00 	vstr	d7, [r3]
		error4 = SP4 - PV4;
 80018c0:	4b44      	ldr	r3, [pc, #272]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80018c2:	ed93 6b00 	vldr	d6, [r3]
 80018c6:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80018c8:	ed93 7b00 	vldr	d7, [r3]
 80018cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018d0:	4b51      	ldr	r3, [pc, #324]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80018d2:	ed83 7b00 	vstr	d7, [r3]

		errorsum1 += error1;
 80018d6:	4b51      	ldr	r3, [pc, #324]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x394>)
 80018d8:	ed93 6b00 	vldr	d6, [r3]
 80018dc:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80018de:	ed93 7b00 	vldr	d7, [r3]
 80018e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018e6:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x394>)
 80018e8:	ed83 7b00 	vstr	d7, [r3]
		errorsum2 += error2;
 80018ec:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80018ee:	ed93 6b00 	vldr	d6, [r3]
 80018f2:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80018f4:	ed93 7b00 	vldr	d7, [r3]
 80018f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018fc:	4b48      	ldr	r3, [pc, #288]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80018fe:	ed83 7b00 	vstr	d7, [r3]
		errorsum3 += error3;
 8001902:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001904:	ed93 6b00 	vldr	d6, [r3]
 8001908:	4b42      	ldr	r3, [pc, #264]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800190a:	ed93 7b00 	vldr	d7, [r3]
 800190e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001912:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001914:	ed83 7b00 	vstr	d7, [r3]
		errorsum4 += error4;
 8001918:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800191a:	ed93 6b00 	vldr	d6, [r3]
 800191e:	4b3e      	ldr	r3, [pc, #248]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001920:	ed93 7b00 	vldr	d7, [r3]
 8001924:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001928:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800192a:	ed83 7b00 	vstr	d7, [r3]

		ut1 = Kp1 * error1 + Ki1 * errorsum1 * 0.001;
 800192e:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001930:	ed93 6b00 	vldr	d6, [r3]
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001936:	ed93 7b00 	vldr	d7, [r3]
 800193a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800193e:	4b3c      	ldr	r3, [pc, #240]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001940:	ed93 5b00 	vldr	d5, [r3]
 8001944:	4b35      	ldr	r3, [pc, #212]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001946:	ed93 7b00 	vldr	d7, [r3]
 800194a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800194e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80019a8 <HAL_TIM_PeriodElapsedCallback+0x320>
 8001952:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001956:	ee36 7b07 	vadd.f64	d7, d6, d7
 800195a:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800195c:	ed83 7b00 	vstr	d7, [r3]
		ut2 = Kp2 * error2 + Ki2 * errorsum2 * 0.001;
 8001960:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001962:	ed93 6b00 	vldr	d6, [r3]
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001968:	ed93 7b00 	vldr	d7, [r3]
 800196c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001970:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001972:	ed93 5b00 	vldr	d5, [r3]
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001978:	ed93 7b00 	vldr	d7, [r3]
 800197c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001980:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80019a8 <HAL_TIM_PeriodElapsedCallback+0x320>
 8001984:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001988:	ee36 7b07 	vadd.f64	d7, d6, d7
 800198c:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800198e:	ed83 7b00 	vstr	d7, [r3]
		ut3 = Kp3 * error3 + Ki3 * errorsum3 * 0.001;
 8001992:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001994:	ed93 6b00 	vldr	d6, [r3]
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800199a:	ed93 7b00 	vldr	d7, [r3]
 800199e:	e053      	b.n	8001a48 <HAL_TIM_PeriodElapsedCallback+0x3c0>
 80019a0:	8d4fdf3c 	.word	0x8d4fdf3c
 80019a4:	40526e97 	.word	0x40526e97
 80019a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019ac:	3f50624d 	.word	0x3f50624d
 80019b0:	24000680 	.word	0x24000680
 80019b4:	24000688 	.word	0x24000688
 80019b8:	24000690 	.word	0x24000690
 80019bc:	24000670 	.word	0x24000670
 80019c0:	24000678 	.word	0x24000678
 80019c4:	24000698 	.word	0x24000698
 80019c8:	24000578 	.word	0x24000578
 80019cc:	24000580 	.word	0x24000580
 80019d0:	24000588 	.word	0x24000588
 80019d4:	24000590 	.word	0x24000590
 80019d8:	2400012c 	.word	0x2400012c
 80019dc:	240005b8 	.word	0x240005b8
 80019e0:	240002a8 	.word	0x240002a8
 80019e4:	240005ba 	.word	0x240005ba
 80019e8:	24000340 	.word	0x24000340
 80019ec:	240005bc 	.word	0x240005bc
 80019f0:	2400038c 	.word	0x2400038c
 80019f4:	240005be 	.word	0x240005be
 80019f8:	24000660 	.word	0x24000660
 80019fc:	24000558 	.word	0x24000558
 8001a00:	24000560 	.word	0x24000560
 8001a04:	24000568 	.word	0x24000568
 8001a08:	24000570 	.word	0x24000570
 8001a0c:	24000598 	.word	0x24000598
 8001a10:	240005a0 	.word	0x240005a0
 8001a14:	240005a8 	.word	0x240005a8
 8001a18:	240005b0 	.word	0x240005b0
 8001a1c:	24000640 	.word	0x24000640
 8001a20:	24000648 	.word	0x24000648
 8001a24:	24000650 	.word	0x24000650
 8001a28:	24000658 	.word	0x24000658
 8001a2c:	240005c0 	.word	0x240005c0
 8001a30:	240005e0 	.word	0x240005e0
 8001a34:	24000600 	.word	0x24000600
 8001a38:	240005c8 	.word	0x240005c8
 8001a3c:	240005e8 	.word	0x240005e8
 8001a40:	24000608 	.word	0x24000608
 8001a44:	240005d0 	.word	0x240005d0
 8001a48:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a4c:	4bba      	ldr	r3, [pc, #744]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001a4e:	ed93 5b00 	vldr	d5, [r3]
 8001a52:	4bba      	ldr	r3, [pc, #744]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001a54:	ed93 7b00 	vldr	d7, [r3]
 8001a58:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001a5c:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8001d30 <HAL_TIM_PeriodElapsedCallback+0x6a8>
 8001a60:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a64:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a68:	4bb5      	ldr	r3, [pc, #724]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001a6a:	ed83 7b00 	vstr	d7, [r3]
		ut4 = Kp4 * error4 + Ki4 * errorsum4 * 0.001;
 8001a6e:	4bb5      	ldr	r3, [pc, #724]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001a70:	ed93 6b00 	vldr	d6, [r3]
 8001a74:	4bb4      	ldr	r3, [pc, #720]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001a76:	ed93 7b00 	vldr	d7, [r3]
 8001a7a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a7e:	4bb3      	ldr	r3, [pc, #716]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001a80:	ed93 5b00 	vldr	d5, [r3]
 8001a84:	4bb2      	ldr	r3, [pc, #712]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001a86:	ed93 7b00 	vldr	d7, [r3]
 8001a8a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001a8e:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8001d30 <HAL_TIM_PeriodElapsedCallback+0x6a8>
 8001a92:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a9a:	4bae      	ldr	r3, [pc, #696]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001a9c:	ed83 7b00 	vstr	d7, [r3]

		if(ut1 > 1){
 8001aa0:	4bad      	ldr	r3, [pc, #692]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001aa2:	ed93 7b00 	vldr	d7, [r3]
 8001aa6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001aaa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab2:	dd06      	ble.n	8001ac2 <HAL_TIM_PeriodElapsedCallback+0x43a>
			ut1 = 1;
 8001ab4:	49a8      	ldr	r1, [pc, #672]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	4ba8      	ldr	r3, [pc, #672]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001abc:	e9c1 2300 	strd	r2, r3, [r1]
 8001ac0:	e00f      	b.n	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x45a>
		}else if(ut1 < -1){
 8001ac2:	4ba5      	ldr	r3, [pc, #660]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001ac4:	ed93 7b00 	vldr	d7, [r3]
 8001ac8:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001acc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	d505      	bpl.n	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x45a>
			ut1 = -1;
 8001ad6:	49a0      	ldr	r1, [pc, #640]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4ba0      	ldr	r3, [pc, #640]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001ade:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut2 > 1){
 8001ae2:	4ba0      	ldr	r3, [pc, #640]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001ae4:	ed93 7b00 	vldr	d7, [r3]
 8001ae8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001aec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af4:	dd06      	ble.n	8001b04 <HAL_TIM_PeriodElapsedCallback+0x47c>
			ut2 = 1;
 8001af6:	499b      	ldr	r1, [pc, #620]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b97      	ldr	r3, [pc, #604]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001afe:	e9c1 2300 	strd	r2, r3, [r1]
 8001b02:	e00f      	b.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x49c>
		}else if(ut2 < -1){
 8001b04:	4b97      	ldr	r3, [pc, #604]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001b06:	ed93 7b00 	vldr	d7, [r3]
 8001b0a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b0e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	d505      	bpl.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x49c>
			ut2 = -1;
 8001b18:	4992      	ldr	r1, [pc, #584]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	4b90      	ldr	r3, [pc, #576]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001b20:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut3 > 1){
 8001b24:	4b86      	ldr	r3, [pc, #536]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b26:	ed93 7b00 	vldr	d7, [r3]
 8001b2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	dd06      	ble.n	8001b46 <HAL_TIM_PeriodElapsedCallback+0x4be>
			ut3 = 1;
 8001b38:	4981      	ldr	r1, [pc, #516]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4b87      	ldr	r3, [pc, #540]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001b40:	e9c1 2300 	strd	r2, r3, [r1]
 8001b44:	e00f      	b.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x4de>
		}else if(ut3 < -1){
 8001b46:	4b7e      	ldr	r3, [pc, #504]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b48:	ed93 7b00 	vldr	d7, [r3]
 8001b4c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b50:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	d505      	bpl.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x4de>
			ut3 = -1;
 8001b5a:	4979      	ldr	r1, [pc, #484]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4b7f      	ldr	r3, [pc, #508]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001b62:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut4 > 1){
 8001b66:	4b7b      	ldr	r3, [pc, #492]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b68:	ed93 7b00 	vldr	d7, [r3]
 8001b6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	dd06      	ble.n	8001b88 <HAL_TIM_PeriodElapsedCallback+0x500>
			ut4 = 1;
 8001b7a:	4976      	ldr	r1, [pc, #472]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b76      	ldr	r3, [pc, #472]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001b82:	e9c1 2300 	strd	r2, r3, [r1]
 8001b86:	e00f      	b.n	8001ba8 <HAL_TIM_PeriodElapsedCallback+0x520>
		}else if(ut4 < -1){
 8001b88:	4b72      	ldr	r3, [pc, #456]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b8a:	ed93 7b00 	vldr	d7, [r3]
 8001b8e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	d505      	bpl.n	8001ba8 <HAL_TIM_PeriodElapsedCallback+0x520>
			ut4 = -1;
 8001b9c:	496d      	ldr	r1, [pc, #436]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4b6f      	ldr	r3, [pc, #444]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001ba4:	e9c1 2300 	strd	r2, r3, [r1]
		}


		if(ut1 > 0){
 8001ba8:	4b6b      	ldr	r3, [pc, #428]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001baa:	ed93 7b00 	vldr	d7, [r3]
 8001bae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb6:	dd0a      	ble.n	8001bce <HAL_TIM_PeriodElapsedCallback+0x546>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2120      	movs	r1, #32
 8001bbc:	486a      	ldr	r0, [pc, #424]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001bbe:	f007 f88b 	bl	8008cd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2140      	movs	r1, #64	; 0x40
 8001bc6:	4868      	ldr	r0, [pc, #416]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001bc8:	f007 f886 	bl	8008cd8 <HAL_GPIO_WritePin>
 8001bcc:	e024      	b.n	8001c18 <HAL_TIM_PeriodElapsedCallback+0x590>
		}else if(ut1 < 0){
 8001bce:	4b62      	ldr	r3, [pc, #392]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001bd0:	ed93 7b00 	vldr	d7, [r3]
 8001bd4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d50a      	bpl.n	8001bf4 <HAL_TIM_PeriodElapsedCallback+0x56c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2120      	movs	r1, #32
 8001be2:	4861      	ldr	r0, [pc, #388]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001be4:	f007 f878 	bl	8008cd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	2140      	movs	r1, #64	; 0x40
 8001bec:	485e      	ldr	r0, [pc, #376]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001bee:	f007 f873 	bl	8008cd8 <HAL_GPIO_WritePin>
 8001bf2:	e011      	b.n	8001c18 <HAL_TIM_PeriodElapsedCallback+0x590>
		}else if(ut1 == 0){
 8001bf4:	4b58      	ldr	r3, [pc, #352]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001bf6:	ed93 7b00 	vldr	d7, [r3]
 8001bfa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	d109      	bne.n	8001c18 <HAL_TIM_PeriodElapsedCallback+0x590>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2120      	movs	r1, #32
 8001c08:	4857      	ldr	r0, [pc, #348]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c0a:	f007 f865 	bl	8008cd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2140      	movs	r1, #64	; 0x40
 8001c12:	4855      	ldr	r0, [pc, #340]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c14:	f007 f860 	bl	8008cd8 <HAL_GPIO_WritePin>
		}

		if(ut2 > 0){
 8001c18:	4b52      	ldr	r3, [pc, #328]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c1a:	ed93 7b00 	vldr	d7, [r3]
 8001c1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	dd0a      	ble.n	8001c3e <HAL_TIM_PeriodElapsedCallback+0x5b6>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	484e      	ldr	r0, [pc, #312]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c2e:	f007 f853 	bl	8008cd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2108      	movs	r1, #8
 8001c36:	484c      	ldr	r0, [pc, #304]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c38:	f007 f84e 	bl	8008cd8 <HAL_GPIO_WritePin>
 8001c3c:	e024      	b.n	8001c88 <HAL_TIM_PeriodElapsedCallback+0x600>
		}else if(ut2 < 0){
 8001c3e:	4b49      	ldr	r3, [pc, #292]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c40:	ed93 7b00 	vldr	d7, [r3]
 8001c44:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	d50a      	bpl.n	8001c64 <HAL_TIM_PeriodElapsedCallback+0x5dc>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2110      	movs	r1, #16
 8001c52:	4845      	ldr	r0, [pc, #276]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c54:	f007 f840 	bl	8008cd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2108      	movs	r1, #8
 8001c5c:	4842      	ldr	r0, [pc, #264]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c5e:	f007 f83b 	bl	8008cd8 <HAL_GPIO_WritePin>
 8001c62:	e011      	b.n	8001c88 <HAL_TIM_PeriodElapsedCallback+0x600>
		}else if(ut2 == 0){
 8001c64:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c66:	ed93 7b00 	vldr	d7, [r3]
 8001c6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	d109      	bne.n	8001c88 <HAL_TIM_PeriodElapsedCallback+0x600>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2110      	movs	r1, #16
 8001c78:	483b      	ldr	r0, [pc, #236]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c7a:	f007 f82d 	bl	8008cd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2108      	movs	r1, #8
 8001c82:	4839      	ldr	r0, [pc, #228]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c84:	f007 f828 	bl	8008cd8 <HAL_GPIO_WritePin>
		}

		if(ut3 > 0){
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001c8a:	ed93 7b00 	vldr	d7, [r3]
 8001c8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c96:	dd0c      	ble.n	8001cb2 <HAL_TIM_PeriodElapsedCallback+0x62a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c9e:	4833      	ldr	r0, [pc, #204]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001ca0:	f007 f81a 	bl	8008cd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001caa:	4830      	ldr	r0, [pc, #192]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001cac:	f007 f814 	bl	8008cd8 <HAL_GPIO_WritePin>
 8001cb0:	e028      	b.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x67c>
		}else if(ut3 < 0){
 8001cb2:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001cb4:	ed93 7b00 	vldr	d7, [r3]
 8001cb8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc0:	d50c      	bpl.n	8001cdc <HAL_TIM_PeriodElapsedCallback+0x654>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cc8:	4828      	ldr	r0, [pc, #160]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001cca:	f007 f805 	bl	8008cd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cd4:	4825      	ldr	r0, [pc, #148]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001cd6:	f006 ffff 	bl	8008cd8 <HAL_GPIO_WritePin>
 8001cda:	e013      	b.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x67c>
		}else if(ut3 == 0){
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001cde:	ed93 7b00 	vldr	d7, [r3]
 8001ce2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	d10b      	bne.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x67c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cf2:	481e      	ldr	r0, [pc, #120]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001cf4:	f006 fff0 	bl	8008cd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cfe:	481b      	ldr	r0, [pc, #108]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001d00:	f006 ffea 	bl	8008cd8 <HAL_GPIO_WritePin>
		}

		if(ut4 > 0){
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001d06:	ed93 7b00 	vldr	d7, [r3]
 8001d0a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d12:	dd31      	ble.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0x6f0>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001d14:	2201      	movs	r2, #1
 8001d16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d1a:	4815      	ldr	r0, [pc, #84]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001d1c:	f006 ffdc 	bl	8008cd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d26:	4813      	ldr	r0, [pc, #76]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001d28:	f006 ffd6 	bl	8008cd8 <HAL_GPIO_WritePin>
 8001d2c:	e04d      	b.n	8001dca <HAL_TIM_PeriodElapsedCallback+0x742>
 8001d2e:	bf00      	nop
 8001d30:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d34:	3f50624d 	.word	0x3f50624d
 8001d38:	240005f0 	.word	0x240005f0
 8001d3c:	24000650 	.word	0x24000650
 8001d40:	24000610 	.word	0x24000610
 8001d44:	240005d8 	.word	0x240005d8
 8001d48:	240005b0 	.word	0x240005b0
 8001d4c:	240005f8 	.word	0x240005f8
 8001d50:	24000658 	.word	0x24000658
 8001d54:	24000618 	.word	0x24000618
 8001d58:	24000600 	.word	0x24000600
 8001d5c:	3ff00000 	.word	0x3ff00000
 8001d60:	bff00000 	.word	0xbff00000
 8001d64:	24000608 	.word	0x24000608
 8001d68:	58021800 	.word	0x58021800
 8001d6c:	58020c00 	.word	0x58020c00
 8001d70:	58020000 	.word	0x58020000
 8001d74:	58020800 	.word	0x58020800
		}else if(ut4 < 0){
 8001d78:	4b91      	ldr	r3, [pc, #580]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001d7a:	ed93 7b00 	vldr	d7, [r3]
 8001d7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	d50c      	bpl.n	8001da2 <HAL_TIM_PeriodElapsedCallback+0x71a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d8e:	488d      	ldr	r0, [pc, #564]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8001d90:	f006 ffa2 	bl	8008cd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001d94:	2201      	movs	r2, #1
 8001d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d9a:	488b      	ldr	r0, [pc, #556]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8001d9c:	f006 ff9c 	bl	8008cd8 <HAL_GPIO_WritePin>
 8001da0:	e013      	b.n	8001dca <HAL_TIM_PeriodElapsedCallback+0x742>
		}else if(ut4 == 0){
 8001da2:	4b87      	ldr	r3, [pc, #540]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001da4:	ed93 7b00 	vldr	d7, [r3]
 8001da8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db0:	d10b      	bne.n	8001dca <HAL_TIM_PeriodElapsedCallback+0x742>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db8:	4882      	ldr	r0, [pc, #520]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8001dba:	f006 ff8d 	bl	8008cd8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc4:	4880      	ldr	r0, [pc, #512]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8001dc6:	f006 ff87 	bl	8008cd8 <HAL_GPIO_WritePin>
		}


		ut1 = fabs(ut1);
 8001dca:	4b80      	ldr	r3, [pc, #512]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001dcc:	ed93 7b00 	vldr	d7, [r3]
 8001dd0:	eeb0 7bc7 	vabs.f64	d7, d7
 8001dd4:	4b7d      	ldr	r3, [pc, #500]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001dd6:	ed83 7b00 	vstr	d7, [r3]
		ut2 = fabs(ut2);
 8001dda:	4b7d      	ldr	r3, [pc, #500]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001ddc:	ed93 7b00 	vldr	d7, [r3]
 8001de0:	eeb0 7bc7 	vabs.f64	d7, d7
 8001de4:	4b7a      	ldr	r3, [pc, #488]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001de6:	ed83 7b00 	vstr	d7, [r3]
		ut3 = fabs(ut3);
 8001dea:	4b7a      	ldr	r3, [pc, #488]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001dec:	ed93 7b00 	vldr	d7, [r3]
 8001df0:	eeb0 7bc7 	vabs.f64	d7, d7
 8001df4:	4b77      	ldr	r3, [pc, #476]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001df6:	ed83 7b00 	vstr	d7, [r3]
		ut4 = fabs(ut4);
 8001dfa:	4b71      	ldr	r3, [pc, #452]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001dfc:	ed93 7b00 	vldr	d7, [r3]
 8001e00:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e04:	4b6e      	ldr	r3, [pc, #440]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001e06:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ut1 * 1000);
 8001e0a:	4b70      	ldr	r3, [pc, #448]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001e0c:	ed93 7b00 	vldr	d7, [r3]
 8001e10:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001fb8 <HAL_TIM_PeriodElapsedCallback+0x930>
 8001e14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e18:	4b6f      	ldr	r3, [pc, #444]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e20:	ee17 2a90 	vmov	r2, s15
 8001e24:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ut2 * 1000);
 8001e26:	4b6a      	ldr	r3, [pc, #424]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001e28:	ed93 7b00 	vldr	d7, [r3]
 8001e2c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8001fb8 <HAL_TIM_PeriodElapsedCallback+0x930>
 8001e30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e34:	4b69      	ldr	r3, [pc, #420]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x954>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e3c:	ee17 2a90 	vmov	r2, s15
 8001e40:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ut3 * 1000);
 8001e42:	4b64      	ldr	r3, [pc, #400]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001e44:	ed93 7b00 	vldr	d7, [r3]
 8001e48:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8001fb8 <HAL_TIM_PeriodElapsedCallback+0x930>
 8001e4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e50:	4b63      	ldr	r3, [pc, #396]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e58:	ee17 2a90 	vmov	r2, s15
 8001e5c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ut4 * 1000);
 8001e5e:	4b58      	ldr	r3, [pc, #352]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001e60:	ed93 7b00 	vldr	d7, [r3]
 8001e64:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8001fb8 <HAL_TIM_PeriodElapsedCallback+0x930>
 8001e68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e6c:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e74:	ee17 2a90 	vmov	r2, s15
 8001e78:	635a      	str	r2, [r3, #52]	; 0x34

		error_last1 = error1;
 8001e7a:	4b5b      	ldr	r3, [pc, #364]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	495a      	ldr	r1, [pc, #360]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x964>)
 8001e82:	e9c1 2300 	strd	r2, r3, [r1]
		error_last2 = error2;
 8001e86:	4b5a      	ldr	r3, [pc, #360]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	4959      	ldr	r1, [pc, #356]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8001e8e:	e9c1 2300 	strd	r2, r3, [r1]
		error_last3 = error3;
 8001e92:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8001e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e98:	4958      	ldr	r1, [pc, #352]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x974>)
 8001e9a:	e9c1 2300 	strd	r2, r3, [r1]
		error_last4 = error4;
 8001e9e:	4b58      	ldr	r3, [pc, #352]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	4957      	ldr	r1, [pc, #348]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8001ea6:	e9c1 2300 	strd	r2, r3, [r1]

		push_vel_x = (PV1 + PV2 + PV3 + PV4) * r/4 ;
 8001eaa:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001eac:	ed93 6b00 	vldr	d6, [r3]
 8001eb0:	4b56      	ldr	r3, [pc, #344]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001eb2:	ed93 7b00 	vldr	d7, [r3]
 8001eb6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001eba:	4b55      	ldr	r3, [pc, #340]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001ebc:	ed93 7b00 	vldr	d7, [r3]
 8001ec0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001ec6:	ed93 7b00 	vldr	d7, [r3]
 8001eca:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ece:	4b52      	ldr	r3, [pc, #328]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001ed0:	ed93 7b00 	vldr	d7, [r3]
 8001ed4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ed8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001edc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ee0:	4b4e      	ldr	r3, [pc, #312]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001ee2:	ed83 7b00 	vstr	d7, [r3]
		push_vel_y = (-PV1 + PV2 + PV3 - PV4) * r/4 ;
 8001ee6:	4b49      	ldr	r3, [pc, #292]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001ee8:	ed93 6b00 	vldr	d6, [r3]
 8001eec:	4b46      	ldr	r3, [pc, #280]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001eee:	ed93 7b00 	vldr	d7, [r3]
 8001ef2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001ef6:	4b46      	ldr	r3, [pc, #280]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001ef8:	ed93 7b00 	vldr	d7, [r3]
 8001efc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f00:	4b44      	ldr	r3, [pc, #272]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001f02:	ed93 7b00 	vldr	d7, [r3]
 8001f06:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f0a:	4b43      	ldr	r3, [pc, #268]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001f0c:	ed93 7b00 	vldr	d7, [r3]
 8001f10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f14:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001f18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f1c:	4b40      	ldr	r3, [pc, #256]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001f1e:	ed83 7b00 	vstr	d7, [r3]
		push_vel_z = (-PV1 + PV2 - PV3 + PV4) * r/(4 * (lx + ly) );
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001f24:	ed93 6b00 	vldr	d6, [r3]
 8001f28:	4b37      	ldr	r3, [pc, #220]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001f2a:	ed93 7b00 	vldr	d7, [r3]
 8001f2e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f32:	4b37      	ldr	r3, [pc, #220]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001f34:	ed93 7b00 	vldr	d7, [r3]
 8001f38:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f3c:	4b35      	ldr	r3, [pc, #212]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001f3e:	ed93 7b00 	vldr	d7, [r3]
 8001f42:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f46:	4b34      	ldr	r3, [pc, #208]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001f48:	ed93 7b00 	vldr	d7, [r3]
 8001f4c:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001f50:	4b34      	ldr	r3, [pc, #208]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001f52:	ed93 6b00 	vldr	d6, [r3]
 8001f56:	4b34      	ldr	r3, [pc, #208]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001f58:	ed93 7b00 	vldr	d7, [r3]
 8001f5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f60:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001f64:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f68:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f6c:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001f6e:	ed83 7b00 	vstr	d7, [r3]

		kkk += 1;
 8001f72:	4b2f      	ldr	r3, [pc, #188]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4a2d      	ldr	r2, [pc, #180]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001f7a:	6013      	str	r3, [r2, #0]
		if(kkk == 10){
 8001f7c:	4b2c      	ldr	r3, [pc, #176]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b0a      	cmp	r3, #10
 8001f82:	d113      	bne.n	8001fac <HAL_TIM_PeriodElapsedCallback+0x924>
			// change parameter to real velocity
			 publish_vel(push_vel_x, push_vel_y, push_vel_z);
 8001f84:	4b25      	ldr	r3, [pc, #148]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001f86:	ed93 7b00 	vldr	d7, [r3]
 8001f8a:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001f8c:	ed93 6b00 	vldr	d6, [r3]
 8001f90:	4b26      	ldr	r3, [pc, #152]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001f92:	ed93 5b00 	vldr	d5, [r3]
 8001f96:	eeb0 2b45 	vmov.f64	d2, d5
 8001f9a:	eeb0 1b46 	vmov.f64	d1, d6
 8001f9e:	eeb0 0b47 	vmov.f64	d0, d7
 8001fa2:	f002 f875 	bl	8004090 <publish_vel>
//			publish_vel(get_vel_x, get_vel_y, get_vel_z);
			kkk = 0;
 8001fa6:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	f3af 8000 	nop.w
 8001fb8:	00000000 	.word	0x00000000
 8001fbc:	408f4000 	.word	0x408f4000
 8001fc0:	24000618 	.word	0x24000618
 8001fc4:	58020000 	.word	0x58020000
 8001fc8:	58020800 	.word	0x58020800
 8001fcc:	24000600 	.word	0x24000600
 8001fd0:	24000608 	.word	0x24000608
 8001fd4:	24000610 	.word	0x24000610
 8001fd8:	24000178 	.word	0x24000178
 8001fdc:	240001c4 	.word	0x240001c4
 8001fe0:	240002f4 	.word	0x240002f4
 8001fe4:	24000094 	.word	0x24000094
 8001fe8:	24000598 	.word	0x24000598
 8001fec:	24000620 	.word	0x24000620
 8001ff0:	240005a0 	.word	0x240005a0
 8001ff4:	24000628 	.word	0x24000628
 8001ff8:	240005a8 	.word	0x240005a8
 8001ffc:	24000630 	.word	0x24000630
 8002000:	240005b0 	.word	0x240005b0
 8002004:	24000638 	.word	0x24000638
 8002008:	24000558 	.word	0x24000558
 800200c:	24000560 	.word	0x24000560
 8002010:	24000568 	.word	0x24000568
 8002014:	24000570 	.word	0x24000570
 8002018:	24000680 	.word	0x24000680
 800201c:	240006a0 	.word	0x240006a0
 8002020:	240006a8 	.word	0x240006a8
 8002024:	24000670 	.word	0x24000670
 8002028:	24000678 	.word	0x24000678
 800202c:	240006b0 	.word	0x240006b0
 8002030:	24000664 	.word	0x24000664

08002034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002038:	b672      	cpsid	i
}
 800203a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800203c:	e7fe      	b.n	800203c <Error_Handler+0x8>

0800203e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	4a04      	ldr	r2, [pc, #16]	; (800207c <_ZN3ros3MsgC1Ev+0x1c>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	0800f4e8 	.word	0x0800f4e8

08002080 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
      data()
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ffe8 	bl	8002060 <_ZN3ros3MsgC1Ev>
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3304      	adds	r3, #4
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ffcf 	bl	800203e <_ZN3ros4TimeC1Ev>
    {
    }
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	0800f4d0 	.word	0x0800f4d0

080020b0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6859      	ldr	r1, [r3, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	b2ca      	uxtb	r2, r1
 80020ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	0a19      	lsrs	r1, r3, #8
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3301      	adds	r3, #1
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	b2ca      	uxtb	r2, r1
 80020dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	0c19      	lsrs	r1, r3, #16
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3302      	adds	r3, #2
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	b2ca      	uxtb	r2, r1
 80020ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	0e19      	lsrs	r1, r3, #24
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	3303      	adds	r3, #3
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	4413      	add	r3, r2
 80020fe:	b2ca      	uxtb	r2, r1
 8002100:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3304      	adds	r3, #4
 8002106:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6899      	ldr	r1, [r3, #8]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4413      	add	r3, r2
 8002112:	b2ca      	uxtb	r2, r1
 8002114:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	0a19      	lsrs	r1, r3, #8
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3301      	adds	r3, #1
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4413      	add	r3, r2
 8002124:	b2ca      	uxtb	r2, r1
 8002126:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	0c19      	lsrs	r1, r3, #16
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3302      	adds	r3, #2
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	4413      	add	r3, r2
 8002136:	b2ca      	uxtb	r2, r1
 8002138:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	0e19      	lsrs	r1, r3, #24
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3303      	adds	r3, #3
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	4413      	add	r3, r2
 8002148:	b2ca      	uxtb	r2, r1
 800214a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3304      	adds	r3, #4
 8002150:	60fb      	str	r3, [r7, #12]
      return offset;
 8002152:	68fb      	ldr	r3, [r7, #12]
    }
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	4413      	add	r3, r2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3301      	adds	r3, #1
 8002184:	6839      	ldr	r1, [r7, #0]
 8002186:	440b      	add	r3, r1
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3302      	adds	r3, #2
 800219a:	6839      	ldr	r1, [r7, #0]
 800219c:	440b      	add	r3, r1
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	041b      	lsls	r3, r3, #16
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3303      	adds	r3, #3
 80021b0:	6839      	ldr	r1, [r7, #0]
 80021b2:	440b      	add	r3, r1
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	061b      	lsls	r3, r3, #24
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3304      	adds	r3, #4
 80021c2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4413      	add	r3, r2
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3301      	adds	r3, #1
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	440b      	add	r3, r1
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3302      	adds	r3, #2
 80021f0:	6839      	ldr	r1, [r7, #0]
 80021f2:	440b      	add	r3, r1
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	041b      	lsls	r3, r3, #16
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3303      	adds	r3, #3
 8002206:	6839      	ldr	r1, [r7, #0]
 8002208:	440b      	add	r3, r1
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3304      	adds	r3, #4
 8002218:	60fb      	str	r3, [r7, #12]
     return offset;
 800221a:	68fb      	ldr	r3, [r7, #12]
    }
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	0800f1d0 	.word	0x0800f1d0

08002244 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	0800f1e0 	.word	0x0800f1e0

08002260 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fef8 	bl	8002060 <_ZN3ros3MsgC1Ev>
 8002270:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	809a      	strh	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002286:	60da      	str	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800228c:	611a      	str	r2, [r3, #16]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
    {
    }
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	0800f4b8 	.word	0x0800f4b8
 80022a4:	0800f204 	.word	0x0800f204

080022a8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	8899      	ldrh	r1, [r3, #4]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	b2ca      	uxtb	r2, r1
 80022c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	889b      	ldrh	r3, [r3, #4]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	b299      	uxth	r1, r3
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	3301      	adds	r3, #1
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	b2ca      	uxtb	r2, r1
 80022d6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3302      	adds	r3, #2
 80022dc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f814 	bl	8000310 <strlen>
 80022e8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	69b9      	ldr	r1, [r7, #24]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f001 fef0 	bl	80040d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	3304      	adds	r3, #4
 80022fc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	18d0      	adds	r0, r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4619      	mov	r1, r3
 800230c:	f00c fdbc 	bl	800ee88 <memcpy>
      offset += length_topic_name;
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	4413      	add	r3, r2
 8002316:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fd fff7 	bl	8000310 <strlen>
 8002322:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	4413      	add	r3, r2
 800232a:	6979      	ldr	r1, [r7, #20]
 800232c:	4618      	mov	r0, r3
 800232e:	f001 fed3 	bl	80040d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3304      	adds	r3, #4
 8002336:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	18d0      	adds	r0, r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4619      	mov	r1, r3
 8002346:	f00c fd9f 	bl	800ee88 <memcpy>
      offset += length_message_type;
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	4413      	add	r3, r2
 8002350:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fd ffda 	bl	8000310 <strlen>
 800235c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	4413      	add	r3, r2
 8002364:	6939      	ldr	r1, [r7, #16]
 8002366:	4618      	mov	r0, r3
 8002368:	f001 feb6 	bl	80040d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	3304      	adds	r3, #4
 8002370:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	18d0      	adds	r0, r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4619      	mov	r1, r3
 8002380:	f00c fd82 	bl	800ee88 <memcpy>
      offset += length_md5sum;
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4413      	add	r3, r2
 800238a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002392:	68f9      	ldr	r1, [r7, #12]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	4413      	add	r3, r2
 800239a:	b2ca      	uxtb	r2, r1
 800239c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	0a19      	lsrs	r1, r3, #8
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3301      	adds	r3, #1
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	4413      	add	r3, r2
 80023aa:	b2ca      	uxtb	r2, r1
 80023ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0c19      	lsrs	r1, r3, #16
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3302      	adds	r3, #2
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	b2ca      	uxtb	r2, r1
 80023bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	0e19      	lsrs	r1, r3, #24
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3303      	adds	r3, #3
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	b2ca      	uxtb	r2, r1
 80023cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3304      	adds	r3, #4
 80023d2:	61fb      	str	r3, [r7, #28]
      return offset;
 80023d4:	69fb      	ldr	r3, [r7, #28]
    }
 80023d6:	4618      	mov	r0, r3
 80023d8:	3720      	adds	r7, #32
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80023de:	b580      	push	{r7, lr}
 80023e0:	b08a      	sub	sp, #40	; 0x28
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	4413      	add	r3, r2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	889b      	ldrh	r3, [r3, #4]
 80023fe:	b21a      	sxth	r2, r3
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	3301      	adds	r3, #1
 8002404:	6839      	ldr	r1, [r7, #0]
 8002406:	440b      	add	r3, r1
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	b21b      	sxth	r3, r3
 800240e:	4313      	orrs	r3, r2
 8002410:	b21b      	sxth	r3, r3
 8002412:	b29a      	uxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	3302      	adds	r3, #2
 800241c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	441a      	add	r2, r3
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f001 fe72 	bl	8004114 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	3304      	adds	r3, #4
 8002434:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	4413      	add	r3, r2
 8002440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002442:	429a      	cmp	r2, r3
 8002444:	d20c      	bcs.n	8002460 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	441a      	add	r2, r3
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	3b01      	subs	r3, #1
 8002450:	6839      	ldr	r1, [r7, #0]
 8002452:	440b      	add	r3, r1
 8002454:	7812      	ldrb	r2, [r2, #0]
 8002456:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	3301      	adds	r3, #1
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
 800245e:	e7ec      	b.n	800243a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	4413      	add	r3, r2
 8002466:	3b01      	subs	r3, #1
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	4413      	add	r3, r2
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	3b01      	subs	r3, #1
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	441a      	add	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	4413      	add	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	441a      	add	r2, r3
 800248a:	f107 0310 	add.w	r3, r7, #16
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f001 fe3f 	bl	8004114 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	3304      	adds	r3, #4
 800249a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	623b      	str	r3, [r7, #32]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	6a3a      	ldr	r2, [r7, #32]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d20c      	bcs.n	80024c6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	441a      	add	r2, r3
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	6839      	ldr	r1, [r7, #0]
 80024b8:	440b      	add	r3, r1
 80024ba:	7812      	ldrb	r2, [r2, #0]
 80024bc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	3301      	adds	r3, #1
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	e7ec      	b.n	80024a0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	3b01      	subs	r3, #1
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	4413      	add	r3, r2
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	3b01      	subs	r3, #1
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	441a      	add	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	441a      	add	r2, r3
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f001 fe0c 	bl	8004114 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	3304      	adds	r3, #4
 8002500:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	429a      	cmp	r2, r3
 8002510:	d20c      	bcs.n	800252c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	441a      	add	r2, r3
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	3b01      	subs	r3, #1
 800251c:	6839      	ldr	r1, [r7, #0]
 800251e:	440b      	add	r3, r1
 8002520:	7812      	ldrb	r2, [r2, #0]
 8002522:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	3301      	adds	r3, #1
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e7ec      	b.n	8002506 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4413      	add	r3, r2
 8002532:	3b01      	subs	r3, #1
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	4413      	add	r3, r2
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	3b01      	subs	r3, #1
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	441a      	add	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4413      	add	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	6839      	ldr	r1, [r7, #0]
 800255a:	440a      	add	r2, r1
 800255c:	7812      	ldrb	r2, [r2, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	3301      	adds	r3, #1
 8002568:	6839      	ldr	r1, [r7, #0]
 800256a:	440b      	add	r3, r1
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	4313      	orrs	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	3302      	adds	r3, #2
 800257a:	6839      	ldr	r1, [r7, #0]
 800257c:	440b      	add	r3, r1
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	4313      	orrs	r3, r2
 8002584:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	3303      	adds	r3, #3
 800258c:	6839      	ldr	r1, [r7, #0]
 800258e:	440b      	add	r3, r1
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	061b      	lsls	r3, r3, #24
 8002594:	4313      	orrs	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	3304      	adds	r3, #4
 80025a2:	61bb      	str	r3, [r7, #24]
     return offset;
 80025a4:	69bb      	ldr	r3, [r7, #24]
    }
 80025a6:	4618      	mov	r0, r3
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	0800f208 	.word	0x0800f208

080025cc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	0800f224 	.word	0x0800f224

080025e8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fd34 	bl	8002060 <_ZN3ros3MsgC1Ev>
 80025f8:	4a06      	ldr	r2, [pc, #24]	; (8002614 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	711a      	strb	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a04      	ldr	r2, [pc, #16]	; (8002618 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002608:	609a      	str	r2, [r3, #8]
    {
    }
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	0800f4a0 	.word	0x0800f4a0
 8002618:	0800f204 	.word	0x0800f204

0800261c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	4413      	add	r3, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	7912      	ldrb	r2, [r2, #4]
 8002634:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3301      	adds	r3, #1
 800263a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd fe65 	bl	8000310 <strlen>
 8002646:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	4413      	add	r3, r2
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	4618      	mov	r0, r3
 8002652:	f001 fd41 	bl	80040d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3304      	adds	r3, #4
 800265a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	18d0      	adds	r0, r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	4619      	mov	r1, r3
 800266a:	f00c fc0d 	bl	800ee88 <memcpy>
      offset += length_msg;
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4413      	add	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
      return offset;
 8002676:	68fb      	ldr	r3, [r7, #12]
    }
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	4413      	add	r3, r2
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	3301      	adds	r3, #1
 800269e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	441a      	add	r2, r3
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f001 fd31 	bl	8004114 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	3304      	adds	r3, #4
 80026b6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4413      	add	r3, r2
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d20c      	bcs.n	80026e2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	441a      	add	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	6839      	ldr	r1, [r7, #0]
 80026d4:	440b      	add	r3, r1
 80026d6:	7812      	ldrb	r2, [r2, #0]
 80026d8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3301      	adds	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	e7ec      	b.n	80026bc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	3b01      	subs	r3, #1
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	4413      	add	r3, r2
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	441a      	add	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
     return offset;
 8002706:	693b      	ldr	r3, [r7, #16]
    }
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	0800f248 	.word	0x0800f248

0800272c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	0800f25c 	.word	0x0800f25c

08002748 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fc84 	bl	8002060 <_ZN3ros3MsgC1Ev>
 8002758:	4a0c      	ldr	r2, [pc, #48]	; (800278c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	619a      	str	r2, [r3, #24]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	61da      	str	r2, [r3, #28]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	0800f488 	.word	0x0800f488

08002790 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	b2ca      	uxtb	r2, r1
 80027aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	0a19      	lsrs	r1, r3, #8
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	3301      	adds	r3, #1
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	4413      	add	r3, r2
 80027ba:	b2ca      	uxtb	r2, r1
 80027bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	0c19      	lsrs	r1, r3, #16
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	3302      	adds	r3, #2
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	b2ca      	uxtb	r2, r1
 80027ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	0e19      	lsrs	r1, r3, #24
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	3303      	adds	r3, #3
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	4413      	add	r3, r2
 80027de:	b2ca      	uxtb	r2, r1
 80027e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	3304      	adds	r3, #4
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80027e8:	2300      	movs	r3, #0
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	6a3a      	ldr	r2, [r7, #32]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d22b      	bcs.n	800284e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002804:	6939      	ldr	r1, [r7, #16]
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	4413      	add	r3, r2
 800280c:	b2ca      	uxtb	r2, r1
 800280e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	0a19      	lsrs	r1, r3, #8
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	3301      	adds	r3, #1
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	4413      	add	r3, r2
 800281c:	b2ca      	uxtb	r2, r1
 800281e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	0c19      	lsrs	r1, r3, #16
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	3302      	adds	r3, #2
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	4413      	add	r3, r2
 800282c:	b2ca      	uxtb	r2, r1
 800282e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	0e19      	lsrs	r1, r3, #24
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	3303      	adds	r3, #3
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	4413      	add	r3, r2
 800283c:	b2ca      	uxtb	r2, r1
 800283e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	3304      	adds	r3, #4
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	3301      	adds	r3, #1
 800284a:	623b      	str	r3, [r7, #32]
 800284c:	e7ce      	b.n	80027ec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6919      	ldr	r1, [r3, #16]
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	4413      	add	r3, r2
 8002858:	b2ca      	uxtb	r2, r1
 800285a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	0a19      	lsrs	r1, r3, #8
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	3301      	adds	r3, #1
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	4413      	add	r3, r2
 800286a:	b2ca      	uxtb	r2, r1
 800286c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	0c19      	lsrs	r1, r3, #16
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	3302      	adds	r3, #2
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	4413      	add	r3, r2
 800287c:	b2ca      	uxtb	r2, r1
 800287e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	0e19      	lsrs	r1, r3, #24
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	3303      	adds	r3, #3
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	4413      	add	r3, r2
 800288e:	b2ca      	uxtb	r2, r1
 8002890:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	3304      	adds	r3, #4
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d22b      	bcs.n	80028fe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80028b4:	68f9      	ldr	r1, [r7, #12]
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	b2ca      	uxtb	r2, r1
 80028be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	0a19      	lsrs	r1, r3, #8
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	3301      	adds	r3, #1
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	b2ca      	uxtb	r2, r1
 80028ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	0c19      	lsrs	r1, r3, #16
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	3302      	adds	r3, #2
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	b2ca      	uxtb	r2, r1
 80028de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	0e19      	lsrs	r1, r3, #24
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	3303      	adds	r3, #3
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	b2ca      	uxtb	r2, r1
 80028ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	3304      	adds	r3, #4
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3301      	adds	r3, #1
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	e7ce      	b.n	800289c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69d9      	ldr	r1, [r3, #28]
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	4413      	add	r3, r2
 8002908:	b2ca      	uxtb	r2, r1
 800290a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	0a19      	lsrs	r1, r3, #8
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	3301      	adds	r3, #1
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	4413      	add	r3, r2
 800291a:	b2ca      	uxtb	r2, r1
 800291c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	0c19      	lsrs	r1, r3, #16
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	3302      	adds	r3, #2
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	4413      	add	r3, r2
 800292c:	b2ca      	uxtb	r2, r1
 800292e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	0e19      	lsrs	r1, r3, #24
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	3303      	adds	r3, #3
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	4413      	add	r3, r2
 800293e:	b2ca      	uxtb	r2, r1
 8002940:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	3304      	adds	r3, #4
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	429a      	cmp	r2, r3
 8002954:	d228      	bcs.n	80029a8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fcd4 	bl	8000310 <strlen>
 8002968:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	4413      	add	r3, r2
 8002970:	6979      	ldr	r1, [r7, #20]
 8002972:	4618      	mov	r0, r3
 8002974:	f001 fbb0 	bl	80040d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	3304      	adds	r3, #4
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	18d0      	adds	r0, r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4619      	mov	r1, r3
 8002994:	f00c fa78 	bl	800ee88 <memcpy>
      offset += length_stringsi;
 8002998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	4413      	add	r3, r2
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	3301      	adds	r3, #1
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e7d1      	b.n	800294c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80029aa:	4618      	mov	r0, r3
 80029ac:	3728      	adds	r7, #40	; 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b08e      	sub	sp, #56	; 0x38
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80029c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	4413      	add	r3, r2
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029cc:	3301      	adds	r3, #1
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	6a3a      	ldr	r2, [r7, #32]
 80029d8:	4313      	orrs	r3, r2
 80029da:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80029dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029de:	3302      	adds	r3, #2
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	041b      	lsls	r3, r3, #16
 80029e8:	6a3a      	ldr	r2, [r7, #32]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80029ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f0:	3303      	adds	r3, #3
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	4413      	add	r3, r2
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	061b      	lsls	r3, r3, #24
 80029fa:	6a3a      	ldr	r2, [r7, #32]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a02:	3304      	adds	r3, #4
 8002a04:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	6a3a      	ldr	r2, [r7, #32]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d90a      	bls.n	8002a26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f00c fa4a 	bl	800eeb4 <realloc>
 8002a20:	4602      	mov	r2, r0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a3a      	ldr	r2, [r7, #32]
 8002a2a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d236      	bcs.n	8002aa8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a42:	6839      	ldr	r1, [r7, #0]
 8002a44:	440a      	add	r2, r1
 8002a46:	7812      	ldrb	r2, [r2, #0]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a50:	3301      	adds	r3, #1
 8002a52:	6839      	ldr	r1, [r7, #0]
 8002a54:	440b      	add	r3, r1
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	021b      	lsls	r3, r3, #8
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a62:	3302      	adds	r3, #2
 8002a64:	6839      	ldr	r1, [r7, #0]
 8002a66:	440b      	add	r3, r1
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a74:	3303      	adds	r3, #3
 8002a76:	6839      	ldr	r1, [r7, #0]
 8002a78:	440b      	add	r3, r1
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	061b      	lsls	r3, r3, #24
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	3208      	adds	r2, #8
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa6:	e7c3      	b.n	8002a30 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	041b      	lsls	r3, r3, #16
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad8:	3303      	adds	r3, #3
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	4413      	add	r3, r2
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	061b      	lsls	r3, r3, #24
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aea:	3304      	adds	r3, #4
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d90a      	bls.n	8002b0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f00c f9d6 	bl	800eeb4 <realloc>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b14:	2300      	movs	r3, #0
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d236      	bcs.n	8002b90 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b2a:	6839      	ldr	r1, [r7, #0]
 8002b2c:	440a      	add	r2, r1
 8002b2e:	7812      	ldrb	r2, [r2, #0]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b38:	3301      	adds	r3, #1
 8002b3a:	6839      	ldr	r1, [r7, #0]
 8002b3c:	440b      	add	r3, r1
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	6839      	ldr	r1, [r7, #0]
 8002b4e:	440b      	add	r3, r1
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	6839      	ldr	r1, [r7, #0]
 8002b60:	440b      	add	r3, r1
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	061b      	lsls	r3, r3, #24
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	3304      	adds	r3, #4
 8002b74:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	3214      	adds	r2, #20
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b8e:	e7c3      	b.n	8002b18 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	4413      	add	r3, r2
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bae:	3302      	adds	r3, #2
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	041b      	lsls	r3, r3, #16
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc0:	3303      	adds	r3, #3
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	061b      	lsls	r3, r3, #24
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d90a      	bls.n	8002bf6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4619      	mov	r1, r3
 8002bea:	4610      	mov	r0, r2
 8002bec:	f00c f962 	bl	800eeb4 <realloc>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d23f      	bcs.n	8002c8a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	441a      	add	r2, r3
 8002c10:	f107 030c 	add.w	r3, r7, #12
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 fa7c 	bl	8004114 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1e:	3304      	adds	r3, #4
 8002c20:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
 8002c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d20c      	bcs.n	8002c4c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	441a      	add	r2, r3
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	6839      	ldr	r1, [r7, #0]
 8002c3e:	440b      	add	r3, r1
 8002c40:	7812      	ldrb	r2, [r2, #0]
 8002c42:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	3301      	adds	r3, #1
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4a:	e7ec      	b.n	8002c26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4413      	add	r3, r2
 8002c52:	3b01      	subs	r3, #1
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	441a      	add	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	3220      	adds	r2, #32
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	3301      	adds	r3, #1
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c88:	e7ba      	b.n	8002c00 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3738      	adds	r7, #56	; 0x38
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	0800f3ac 	.word	0x0800f3ac

08002cb0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	0800f280 	.word	0x0800f280

08002ccc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	611a      	str	r2, [r3, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68d8      	ldr	r0, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6891      	ldr	r1, [r2, #8]
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	4798      	blx	r3
 8002d18:	4603      	mov	r3, r0
  };
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
  }
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a42      	ldr	r2, [pc, #264]	; (8002e58 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d068      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a40      	ldr	r2, [pc, #256]	; (8002e5c <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d061      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a3d      	ldr	r2, [pc, #244]	; (8002e60 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d05a      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a3b      	ldr	r2, [pc, #236]	; (8002e64 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d053      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a38      	ldr	r2, [pc, #224]	; (8002e68 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d04c      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a36      	ldr	r2, [pc, #216]	; (8002e6c <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d045      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a33      	ldr	r2, [pc, #204]	; (8002e70 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d03e      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a31      	ldr	r2, [pc, #196]	; (8002e74 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d037      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a2e      	ldr	r2, [pc, #184]	; (8002e78 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d030      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a2c      	ldr	r2, [pc, #176]	; (8002e7c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d029      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a29      	ldr	r2, [pc, #164]	; (8002e80 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d022      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a27      	ldr	r2, [pc, #156]	; (8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d01b      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a24      	ldr	r2, [pc, #144]	; (8002e88 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d014      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00d      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1f      	ldr	r2, [pc, #124]	; (8002e90 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d006      	beq.n	8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d109      	bne.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e36:	e008      	b.n	8002e4a <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40020010 	.word	0x40020010
 8002e5c:	40020028 	.word	0x40020028
 8002e60:	40020040 	.word	0x40020040
 8002e64:	40020058 	.word	0x40020058
 8002e68:	40020070 	.word	0x40020070
 8002e6c:	40020088 	.word	0x40020088
 8002e70:	400200a0 	.word	0x400200a0
 8002e74:	400200b8 	.word	0x400200b8
 8002e78:	40020410 	.word	0x40020410
 8002e7c:	40020428 	.word	0x40020428
 8002e80:	40020440 	.word	0x40020440
 8002e84:	40020458 	.word	0x40020458
 8002e88:	40020470 	.word	0x40020470
 8002e8c:	40020488 	.word	0x40020488
 8002e90:	400204a0 	.word	0x400204a0
 8002e94:	400204b8 	.word	0x400204b8

08002e98 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a0c      	ldr	r2, [pc, #48]	; (8002ed4 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	6093      	str	r3, [r2, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60d3      	str	r3, [r2, #12]
    }
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	240003d8 	.word	0x240003d8

08002ed8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f804 	bl	8002eee <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3304      	adds	r3, #4
 8002efe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f02:	4619      	mov	r1, r3
 8002f04:	f009 ff42 	bl	800cd8c <HAL_UART_Receive_DMA>
    }
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f1c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff09 	bl	8002d3c <_ZN13STM32Hardware10getRdmaIndEv>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	429c      	cmp	r4, r3
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d012      	beq.n	8002f60 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002f40:	1c59      	adds	r1, r3, #1
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	791b      	ldrb	r3, [r3, #4]
 8002f4e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002f56:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002f60:	68fb      	ldr	r3, [r7, #12]
    }
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd90      	pop	{r4, r7, pc}
	...

08002f6c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d108      	bne.n	8002f92 <_ZN13STM32Hardware5flushEv+0x26>
 8002f80:	4b2c      	ldr	r3, [pc, #176]	; (8003034 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	f083 0301 	eor.w	r3, r3, #1
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <_ZN13STM32Hardware5flushEv+0x26>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <_ZN13STM32Hardware5flushEv+0x28>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d049      	beq.n	800302c <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002f98:	4b26      	ldr	r3, [pc, #152]	; (8003034 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d039      	beq.n	8003026 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d20c      	bcs.n	8002fe0 <_ZN13STM32Hardware5flushEv+0x74>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	e007      	b.n	8002ff0 <_ZN13STM32Hardware5flushEv+0x84>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	89fa      	ldrh	r2, [r7, #14]
 8003008:	4619      	mov	r1, r3
 800300a:	f009 fe2d 	bl	800cc68 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	89fb      	ldrh	r3, [r7, #14]
 8003018:	4413      	add	r3, r2
 800301a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003024:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8003026:	4b03      	ldr	r3, [pc, #12]	; (8003034 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
      }
    }
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	240006b8 	.word	0x240006b8

08003038 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
      int n = length;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304e:	bfa8      	it	ge
 8003050:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8003054:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	4293      	cmp	r3, r2
 8003066:	bf28      	it	cs
 8003068:	4613      	movcs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	4618      	mov	r0, r3
 8003082:	f00b ff01 	bl	800ee88 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	4413      	add	r3, r2
 8003092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800309c:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d00b      	beq.n	80030be <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f603 0008 	addw	r0, r3, #2056	; 0x808
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	18d1      	adds	r1, r2, r3
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	f00b fee5 	bl	800ee88 <memcpy>
      }

      flush();
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f7ff ff54 	bl	8002f6c <_ZN13STM32Hardware5flushEv>
    }
 80030c4:	bf00      	nop
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	f002 fd02 	bl	8005adc <HAL_GetTick>
 80030d8:	4603      	mov	r3, r0
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
      data(0)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe ffb6 	bl	8002060 <_ZN3ros3MsgC1Ev>
 80030f4:	4a07      	ldr	r2, [pc, #28]	; (8003114 <_ZN8std_msgs5Int64C1Ev+0x30>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	0800f444 	.word	0x0800f444

08003118 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800312c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003134:	6979      	ldr	r1, [r7, #20]
 8003136:	6838      	ldr	r0, [r7, #0]
 8003138:	4401      	add	r1, r0
 800313a:	b2d3      	uxtb	r3, r2
 800313c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800313e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	0a02      	lsrs	r2, r0, #8
 800314c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003150:	0a0b      	lsrs	r3, r1, #8
 8003152:	6979      	ldr	r1, [r7, #20]
 8003154:	3101      	adds	r1, #1
 8003156:	6838      	ldr	r0, [r7, #0]
 8003158:	4401      	add	r1, r0
 800315a:	b2d3      	uxtb	r3, r2
 800315c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800315e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	0c02      	lsrs	r2, r0, #16
 800316c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003170:	0c0b      	lsrs	r3, r1, #16
 8003172:	6979      	ldr	r1, [r7, #20]
 8003174:	3102      	adds	r1, #2
 8003176:	6838      	ldr	r0, [r7, #0]
 8003178:	4401      	add	r1, r0
 800317a:	b2d3      	uxtb	r3, r2
 800317c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800317e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	0e02      	lsrs	r2, r0, #24
 800318c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003190:	0e0b      	lsrs	r3, r1, #24
 8003192:	6979      	ldr	r1, [r7, #20]
 8003194:	3103      	adds	r1, #3
 8003196:	6838      	ldr	r0, [r7, #0]
 8003198:	4401      	add	r1, r0
 800319a:	b2d3      	uxtb	r3, r2
 800319c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 800319e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	000a      	movs	r2, r1
 80031ac:	2300      	movs	r3, #0
 80031ae:	6979      	ldr	r1, [r7, #20]
 80031b0:	3104      	adds	r1, #4
 80031b2:	6838      	ldr	r0, [r7, #0]
 80031b4:	4401      	add	r1, r0
 80031b6:	b2d3      	uxtb	r3, r2
 80031b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80031ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	0a0a      	lsrs	r2, r1, #8
 80031c8:	2300      	movs	r3, #0
 80031ca:	6979      	ldr	r1, [r7, #20]
 80031cc:	3105      	adds	r1, #5
 80031ce:	6838      	ldr	r0, [r7, #0]
 80031d0:	4401      	add	r1, r0
 80031d2:	b2d3      	uxtb	r3, r2
 80031d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80031d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	0c0a      	lsrs	r2, r1, #16
 80031e4:	2300      	movs	r3, #0
 80031e6:	6979      	ldr	r1, [r7, #20]
 80031e8:	3106      	adds	r1, #6
 80031ea:	6838      	ldr	r0, [r7, #0]
 80031ec:	4401      	add	r1, r0
 80031ee:	b2d3      	uxtb	r3, r2
 80031f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 80031f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	0e0a      	lsrs	r2, r1, #24
 8003200:	2300      	movs	r3, #0
 8003202:	6979      	ldr	r1, [r7, #20]
 8003204:	3107      	adds	r1, #7
 8003206:	6838      	ldr	r0, [r7, #0]
 8003208:	4401      	add	r1, r0
 800320a:	b2d3      	uxtb	r3, r2
 800320c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	3308      	adds	r3, #8
 8003212:	617b      	str	r3, [r7, #20]
      return offset;
 8003214:	697b      	ldr	r3, [r7, #20]
    }
 8003216:	4618      	mov	r0, r3
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003222:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003226:	b0a3      	sub	sp, #140	; 0x8c
 8003228:	af00      	add	r7, sp, #0
 800322a:	6778      	str	r0, [r7, #116]	; 0x74
 800322c:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003240:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003244:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2200      	movs	r2, #0
 8003252:	461c      	mov	r4, r3
 8003254:	4615      	mov	r5, r2
 8003256:	ea40 0804 	orr.w	r8, r0, r4
 800325a:	ea41 0905 	orr.w	r9, r1, r5
 800325e:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003262:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003266:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800326e:	4413      	add	r3, r2
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2200      	movs	r2, #0
 8003276:	469a      	mov	sl, r3
 8003278:	4693      	mov	fp, r2
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003286:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800328a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800328e:	ea40 0402 	orr.w	r4, r0, r2
 8003292:	66bc      	str	r4, [r7, #104]	; 0x68
 8003294:	430b      	orrs	r3, r1
 8003296:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003298:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800329c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80032a0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032a8:	1c9a      	adds	r2, r3, #2
 80032aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032ac:	4413      	add	r3, r2
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2200      	movs	r2, #0
 80032b4:	663b      	str	r3, [r7, #96]	; 0x60
 80032b6:	667a      	str	r2, [r7, #100]	; 0x64
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032c4:	464c      	mov	r4, r9
 80032c6:	0423      	lsls	r3, r4, #16
 80032c8:	4644      	mov	r4, r8
 80032ca:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80032ce:	4644      	mov	r4, r8
 80032d0:	0422      	lsls	r2, r4, #16
 80032d2:	ea40 0402 	orr.w	r4, r0, r2
 80032d6:	65bc      	str	r4, [r7, #88]	; 0x58
 80032d8:	430b      	orrs	r3, r1
 80032da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032dc:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80032e0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80032e4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032ec:	1cda      	adds	r2, r3, #3
 80032ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f0:	4413      	add	r3, r2
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2200      	movs	r2, #0
 80032f8:	653b      	str	r3, [r7, #80]	; 0x50
 80032fa:	657a      	str	r2, [r7, #84]	; 0x54
 80032fc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003300:	4623      	mov	r3, r4
 8003302:	0a1b      	lsrs	r3, r3, #8
 8003304:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003306:	4623      	mov	r3, r4
 8003308:	061b      	lsls	r3, r3, #24
 800330a:	64bb      	str	r3, [r7, #72]	; 0x48
 800330c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003310:	4623      	mov	r3, r4
 8003312:	4303      	orrs	r3, r0
 8003314:	643b      	str	r3, [r7, #64]	; 0x40
 8003316:	462b      	mov	r3, r5
 8003318:	430b      	orrs	r3, r1
 800331a:	647b      	str	r3, [r7, #68]	; 0x44
 800331c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003320:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003324:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800332c:	1d1a      	adds	r2, r3, #4
 800332e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003330:	4413      	add	r3, r2
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2200      	movs	r2, #0
 8003338:	63bb      	str	r3, [r7, #56]	; 0x38
 800333a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003346:	0023      	movs	r3, r4
 8003348:	2200      	movs	r2, #0
 800334a:	ea40 0402 	orr.w	r4, r0, r2
 800334e:	633c      	str	r4, [r7, #48]	; 0x30
 8003350:	430b      	orrs	r3, r1
 8003352:	637b      	str	r3, [r7, #52]	; 0x34
 8003354:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003358:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800335c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003364:	1d5a      	adds	r2, r3, #5
 8003366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003368:	4413      	add	r3, r2
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2200      	movs	r2, #0
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
 8003372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800337e:	0223      	lsls	r3, r4, #8
 8003380:	2200      	movs	r2, #0
 8003382:	ea40 0402 	orr.w	r4, r0, r2
 8003386:	623c      	str	r4, [r7, #32]
 8003388:	430b      	orrs	r3, r1
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
 800338c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003390:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003394:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800339c:	3306      	adds	r3, #6
 800339e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80033a0:	4413      	add	r3, r2
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2200      	movs	r2, #0
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	61fa      	str	r2, [r7, #28]
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	69bc      	ldr	r4, [r7, #24]
 80033b6:	0423      	lsls	r3, r4, #16
 80033b8:	2200      	movs	r2, #0
 80033ba:	ea40 0402 	orr.w	r4, r0, r2
 80033be:	613c      	str	r4, [r7, #16]
 80033c0:	430b      	orrs	r3, r1
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80033c8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80033cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033d4:	3307      	adds	r3, #7
 80033d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80033d8:	4413      	add	r3, r2
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2200      	movs	r2, #0
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	60fa      	str	r2, [r7, #12]
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	68bc      	ldr	r4, [r7, #8]
 80033ee:	0623      	lsls	r3, r4, #24
 80033f0:	2200      	movs	r2, #0
 80033f2:	ea40 0402 	orr.w	r4, r0, r2
 80033f6:	603c      	str	r4, [r7, #0]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003400:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003404:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003408:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800340a:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 800340e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003412:	3308      	adds	r3, #8
 8003414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003418:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 800341c:	4618      	mov	r0, r3
 800341e:	378c      	adds	r7, #140	; 0x8c
 8003420:	46bd      	mov	sp, r7
 8003422:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003426:	4770      	bx	lr

08003428 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	4b03      	ldr	r3, [pc, #12]	; (8003440 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	0800f2a4 	.word	0x0800f2a4

08003444 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	0800f2b4 	.word	0x0800f2b4

08003460 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fdf8 	bl	8002060 <_ZN3ros3MsgC1Ev>
 8003470:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	0800f42c 	.word	0x0800f42c

080034b0 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80034b0:	b480      	push	{r7}
 80034b2:	b08b      	sub	sp, #44	; 0x2c
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80034c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80034c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ce:	6838      	ldr	r0, [r7, #0]
 80034d0:	4401      	add	r1, r0
 80034d2:	b2d3      	uxtb	r3, r2
 80034d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80034d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	0a02      	lsrs	r2, r0, #8
 80034e4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80034e8:	0a0b      	lsrs	r3, r1, #8
 80034ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ec:	3101      	adds	r1, #1
 80034ee:	6838      	ldr	r0, [r7, #0]
 80034f0:	4401      	add	r1, r0
 80034f2:	b2d3      	uxtb	r3, r2
 80034f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80034f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	0c02      	lsrs	r2, r0, #16
 8003504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003508:	0c0b      	lsrs	r3, r1, #16
 800350a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800350c:	3102      	adds	r1, #2
 800350e:	6838      	ldr	r0, [r7, #0]
 8003510:	4401      	add	r1, r0
 8003512:	b2d3      	uxtb	r3, r2
 8003514:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003516:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	0e02      	lsrs	r2, r0, #24
 8003524:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003528:	0e0b      	lsrs	r3, r1, #24
 800352a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800352c:	3103      	adds	r1, #3
 800352e:	6838      	ldr	r0, [r7, #0]
 8003530:	4401      	add	r1, r0
 8003532:	b2d3      	uxtb	r3, r2
 8003534:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003536:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	000a      	movs	r2, r1
 8003544:	2300      	movs	r3, #0
 8003546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003548:	3104      	adds	r1, #4
 800354a:	6838      	ldr	r0, [r7, #0]
 800354c:	4401      	add	r1, r0
 800354e:	b2d3      	uxtb	r3, r2
 8003550:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003552:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	0a0a      	lsrs	r2, r1, #8
 8003560:	2300      	movs	r3, #0
 8003562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003564:	3105      	adds	r1, #5
 8003566:	6838      	ldr	r0, [r7, #0]
 8003568:	4401      	add	r1, r0
 800356a:	b2d3      	uxtb	r3, r2
 800356c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800356e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	0c0a      	lsrs	r2, r1, #16
 800357c:	2300      	movs	r3, #0
 800357e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003580:	3106      	adds	r1, #6
 8003582:	6838      	ldr	r0, [r7, #0]
 8003584:	4401      	add	r1, r0
 8003586:	b2d3      	uxtb	r3, r2
 8003588:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800358a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	0e0a      	lsrs	r2, r1, #24
 8003598:	2300      	movs	r3, #0
 800359a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800359c:	3107      	adds	r1, #7
 800359e:	6838      	ldr	r0, [r7, #0]
 80035a0:	4401      	add	r1, r0
 80035a2:	b2d3      	uxtb	r3, r2
 80035a4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	3308      	adds	r3, #8
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80035b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80035b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035bc:	6838      	ldr	r0, [r7, #0]
 80035be:	4401      	add	r1, r0
 80035c0:	b2d3      	uxtb	r3, r2
 80035c2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80035c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	0a02      	lsrs	r2, r0, #8
 80035d2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80035d6:	0a0b      	lsrs	r3, r1, #8
 80035d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035da:	3101      	adds	r1, #1
 80035dc:	6838      	ldr	r0, [r7, #0]
 80035de:	4401      	add	r1, r0
 80035e0:	b2d3      	uxtb	r3, r2
 80035e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80035e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	0c02      	lsrs	r2, r0, #16
 80035f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035f6:	0c0b      	lsrs	r3, r1, #16
 80035f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035fa:	3102      	adds	r1, #2
 80035fc:	6838      	ldr	r0, [r7, #0]
 80035fe:	4401      	add	r1, r0
 8003600:	b2d3      	uxtb	r3, r2
 8003602:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003604:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	0e02      	lsrs	r2, r0, #24
 8003612:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003616:	0e0b      	lsrs	r3, r1, #24
 8003618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800361a:	3103      	adds	r1, #3
 800361c:	6838      	ldr	r0, [r7, #0]
 800361e:	4401      	add	r1, r0
 8003620:	b2d3      	uxtb	r3, r2
 8003622:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003624:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	000a      	movs	r2, r1
 8003632:	2300      	movs	r3, #0
 8003634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003636:	3104      	adds	r1, #4
 8003638:	6838      	ldr	r0, [r7, #0]
 800363a:	4401      	add	r1, r0
 800363c:	b2d3      	uxtb	r3, r2
 800363e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003640:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	0a0a      	lsrs	r2, r1, #8
 800364e:	2300      	movs	r3, #0
 8003650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003652:	3105      	adds	r1, #5
 8003654:	6838      	ldr	r0, [r7, #0]
 8003656:	4401      	add	r1, r0
 8003658:	b2d3      	uxtb	r3, r2
 800365a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800365c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	0c0a      	lsrs	r2, r1, #16
 800366a:	2300      	movs	r3, #0
 800366c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800366e:	3106      	adds	r1, #6
 8003670:	6838      	ldr	r0, [r7, #0]
 8003672:	4401      	add	r1, r0
 8003674:	b2d3      	uxtb	r3, r2
 8003676:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003678:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	0e0a      	lsrs	r2, r1, #24
 8003686:	2300      	movs	r3, #0
 8003688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800368a:	3107      	adds	r1, #7
 800368c:	6838      	ldr	r0, [r7, #0]
 800368e:	4401      	add	r1, r0
 8003690:	b2d3      	uxtb	r3, r2
 8003692:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	3308      	adds	r3, #8
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80036a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80036a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036aa:	6838      	ldr	r0, [r7, #0]
 80036ac:	4401      	add	r1, r0
 80036ae:	b2d3      	uxtb	r3, r2
 80036b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80036b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	0a02      	lsrs	r2, r0, #8
 80036c0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80036c4:	0a0b      	lsrs	r3, r1, #8
 80036c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036c8:	3101      	adds	r1, #1
 80036ca:	6838      	ldr	r0, [r7, #0]
 80036cc:	4401      	add	r1, r0
 80036ce:	b2d3      	uxtb	r3, r2
 80036d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80036d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	0c02      	lsrs	r2, r0, #16
 80036e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036e4:	0c0b      	lsrs	r3, r1, #16
 80036e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e8:	3102      	adds	r1, #2
 80036ea:	6838      	ldr	r0, [r7, #0]
 80036ec:	4401      	add	r1, r0
 80036ee:	b2d3      	uxtb	r3, r2
 80036f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80036f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	0e02      	lsrs	r2, r0, #24
 8003700:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003704:	0e0b      	lsrs	r3, r1, #24
 8003706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003708:	3103      	adds	r1, #3
 800370a:	6838      	ldr	r0, [r7, #0]
 800370c:	4401      	add	r1, r0
 800370e:	b2d3      	uxtb	r3, r2
 8003710:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	000a      	movs	r2, r1
 8003720:	2300      	movs	r3, #0
 8003722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003724:	3104      	adds	r1, #4
 8003726:	6838      	ldr	r0, [r7, #0]
 8003728:	4401      	add	r1, r0
 800372a:	b2d3      	uxtb	r3, r2
 800372c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800372e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	0a0a      	lsrs	r2, r1, #8
 800373c:	2300      	movs	r3, #0
 800373e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003740:	3105      	adds	r1, #5
 8003742:	6838      	ldr	r0, [r7, #0]
 8003744:	4401      	add	r1, r0
 8003746:	b2d3      	uxtb	r3, r2
 8003748:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800374a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	0c0a      	lsrs	r2, r1, #16
 8003758:	2300      	movs	r3, #0
 800375a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800375c:	3106      	adds	r1, #6
 800375e:	6838      	ldr	r0, [r7, #0]
 8003760:	4401      	add	r1, r0
 8003762:	b2d3      	uxtb	r3, r2
 8003764:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003766:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	0e0a      	lsrs	r2, r1, #24
 8003774:	2300      	movs	r3, #0
 8003776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003778:	3107      	adds	r1, #7
 800377a:	6838      	ldr	r0, [r7, #0]
 800377c:	4401      	add	r1, r0
 800377e:	b2d3      	uxtb	r3, r2
 8003780:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	3308      	adds	r3, #8
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800378a:	4618      	mov	r0, r3
 800378c:	372c      	adds	r7, #44	; 0x2c
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003796:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800379a:	b0eb      	sub	sp, #428	; 0x1ac
 800379c:	af00      	add	r7, sp, #0
 800379e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80037a2:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037b8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037bc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80037c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037c4:	4413      	add	r3, r2
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2200      	movs	r2, #0
 80037cc:	461c      	mov	r4, r3
 80037ce:	4615      	mov	r5, r2
 80037d0:	ea40 0804 	orr.w	r8, r0, r4
 80037d4:	ea41 0905 	orr.w	r9, r1, r5
 80037d8:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037ea:	4413      	add	r3, r2
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2200      	movs	r2, #0
 80037f2:	469a      	mov	sl, r3
 80037f4:	4693      	mov	fp, r2
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003802:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003806:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800380a:	ea40 0402 	orr.w	r4, r0, r2
 800380e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8003812:	430b      	orrs	r3, r1
 8003814:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003818:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800381c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003820:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003824:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003828:	1c9a      	adds	r2, r3, #2
 800382a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800382e:	4413      	add	r3, r2
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2200      	movs	r2, #0
 8003836:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800383a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800384a:	464c      	mov	r4, r9
 800384c:	0423      	lsls	r3, r4, #16
 800384e:	4644      	mov	r4, r8
 8003850:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003854:	4644      	mov	r4, r8
 8003856:	0422      	lsls	r2, r4, #16
 8003858:	ea40 0402 	orr.w	r4, r0, r2
 800385c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8003860:	430b      	orrs	r3, r1
 8003862:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003866:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800386a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800386e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003872:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003876:	1cda      	adds	r2, r3, #3
 8003878:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800387c:	4413      	add	r3, r2
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2200      	movs	r2, #0
 8003884:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003888:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800388c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003890:	4623      	mov	r3, r4
 8003892:	0a1b      	lsrs	r3, r3, #8
 8003894:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003898:	4623      	mov	r3, r4
 800389a:	061b      	lsls	r3, r3, #24
 800389c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80038a0:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80038a4:	4623      	mov	r3, r4
 80038a6:	4303      	orrs	r3, r0
 80038a8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80038ac:	462b      	mov	r3, r5
 80038ae:	430b      	orrs	r3, r1
 80038b0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038b4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80038b8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80038bc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80038c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038c4:	1d1a      	adds	r2, r3, #4
 80038c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038ca:	4413      	add	r3, r2
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2200      	movs	r2, #0
 80038d2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80038d6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80038e6:	0023      	movs	r3, r4
 80038e8:	2200      	movs	r2, #0
 80038ea:	ea40 0402 	orr.w	r4, r0, r2
 80038ee:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80038f2:	430b      	orrs	r3, r1
 80038f4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80038f8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80038fc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003900:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003904:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003908:	1d5a      	adds	r2, r3, #5
 800390a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800390e:	4413      	add	r3, r2
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2200      	movs	r2, #0
 8003916:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800391a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800392a:	0223      	lsls	r3, r4, #8
 800392c:	2200      	movs	r2, #0
 800392e:	ea40 0402 	orr.w	r4, r0, r2
 8003932:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003936:	430b      	orrs	r3, r1
 8003938:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800393c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003940:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003944:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003948:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800394c:	1d9a      	adds	r2, r3, #6
 800394e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003952:	4413      	add	r3, r2
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2200      	movs	r2, #0
 800395a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800395e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800396e:	0423      	lsls	r3, r4, #16
 8003970:	2200      	movs	r2, #0
 8003972:	ea40 0402 	orr.w	r4, r0, r2
 8003976:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800397a:	430b      	orrs	r3, r1
 800397c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003980:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003984:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003988:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800398c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003990:	1dda      	adds	r2, r3, #7
 8003992:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003996:	4413      	add	r3, r2
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2200      	movs	r2, #0
 800399e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80039a2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80039b2:	0623      	lsls	r3, r4, #24
 80039b4:	2200      	movs	r2, #0
 80039b6:	ea40 0402 	orr.w	r4, r0, r2
 80039ba:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80039be:	430b      	orrs	r3, r1
 80039c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80039c4:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80039c8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80039cc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80039d4:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80039d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039dc:	3308      	adds	r3, #8
 80039de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80039ee:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039f2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80039f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039fa:	4413      	add	r3, r2
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2200      	movs	r2, #0
 8003a02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003a06:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003a0a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003a0e:	4623      	mov	r3, r4
 8003a10:	4303      	orrs	r3, r0
 8003a12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a16:	462b      	mov	r3, r5
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a1e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003a22:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a26:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a34:	4413      	add	r3, r2
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a40:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003a50:	464c      	mov	r4, r9
 8003a52:	0223      	lsls	r3, r4, #8
 8003a54:	4644      	mov	r4, r8
 8003a56:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a5a:	4644      	mov	r4, r8
 8003a5c:	0222      	lsls	r2, r4, #8
 8003a5e:	ea40 0402 	orr.w	r4, r0, r2
 8003a62:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003a66:	430b      	orrs	r3, r1
 8003a68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a6c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003a70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a7c:	1c9a      	adds	r2, r3, #2
 8003a7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a82:	4413      	add	r3, r2
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003a9e:	464c      	mov	r4, r9
 8003aa0:	0423      	lsls	r3, r4, #16
 8003aa2:	4644      	mov	r4, r8
 8003aa4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003aa8:	4644      	mov	r4, r8
 8003aaa:	0422      	lsls	r2, r4, #16
 8003aac:	ea40 0402 	orr.w	r4, r0, r2
 8003ab0:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003aba:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003abe:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ac2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ac6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003aca:	1cda      	adds	r2, r3, #3
 8003acc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ad0:	4413      	add	r3, r2
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003adc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ae0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003ae4:	4623      	mov	r3, r4
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003aec:	4623      	mov	r3, r4
 8003aee:	061b      	lsls	r3, r3, #24
 8003af0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003af4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003af8:	4623      	mov	r3, r4
 8003afa:	4303      	orrs	r3, r0
 8003afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b00:	462b      	mov	r3, r5
 8003b02:	430b      	orrs	r3, r1
 8003b04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b08:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003b0c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b10:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b14:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b18:	1d1a      	adds	r2, r3, #4
 8003b1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b1e:	4413      	add	r3, r2
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2200      	movs	r2, #0
 8003b26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b2a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003b3a:	0023      	movs	r3, r4
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	ea40 0402 	orr.w	r4, r0, r2
 8003b42:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003b46:	430b      	orrs	r3, r1
 8003b48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b4c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003b50:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b54:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b5c:	1d5a      	adds	r2, r3, #5
 8003b5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b62:	4413      	add	r3, r2
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b6e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003b7e:	0223      	lsls	r3, r4, #8
 8003b80:	2200      	movs	r2, #0
 8003b82:	ea40 0402 	orr.w	r4, r0, r2
 8003b86:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b90:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003b94:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b98:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ba0:	1d9a      	adds	r2, r3, #6
 8003ba2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ba6:	4413      	add	r3, r2
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2200      	movs	r2, #0
 8003bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003bc2:	0423      	lsls	r3, r4, #16
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	ea40 0402 	orr.w	r4, r0, r2
 8003bca:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bd4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003bd8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003bdc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003be0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003be4:	1dda      	adds	r2, r3, #7
 8003be6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bea:	4413      	add	r3, r2
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003c06:	0623      	lsls	r3, r4, #24
 8003c08:	2200      	movs	r2, #0
 8003c0a:	ea40 0402 	orr.w	r4, r0, r2
 8003c0e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003c12:	430b      	orrs	r3, r1
 8003c14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c18:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003c1c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003c20:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c24:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003c28:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003c2c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c30:	3308      	adds	r3, #8
 8003c32:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c42:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c46:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003c4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c4e:	4413      	add	r3, r2
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c5a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c5e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003c62:	4623      	mov	r3, r4
 8003c64:	4303      	orrs	r3, r0
 8003c66:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c68:	462b      	mov	r3, r5
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c6e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003c72:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c76:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c7a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c84:	4413      	add	r3, r2
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	673b      	str	r3, [r7, #112]	; 0x70
 8003c8e:	677a      	str	r2, [r7, #116]	; 0x74
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c9c:	464c      	mov	r4, r9
 8003c9e:	0223      	lsls	r3, r4, #8
 8003ca0:	4644      	mov	r4, r8
 8003ca2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ca6:	4644      	mov	r4, r8
 8003ca8:	0222      	lsls	r2, r4, #8
 8003caa:	ea40 0402 	orr.w	r4, r0, r2
 8003cae:	66bc      	str	r4, [r7, #104]	; 0x68
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cb4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003cb8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003cbc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003cc0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cc4:	1c9a      	adds	r2, r3, #2
 8003cc6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cca:	4413      	add	r3, r2
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	663b      	str	r3, [r7, #96]	; 0x60
 8003cd4:	667a      	str	r2, [r7, #100]	; 0x64
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ce2:	464c      	mov	r4, r9
 8003ce4:	0423      	lsls	r3, r4, #16
 8003ce6:	4644      	mov	r4, r8
 8003ce8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003cec:	4644      	mov	r4, r8
 8003cee:	0422      	lsls	r2, r4, #16
 8003cf0:	ea40 0402 	orr.w	r4, r0, r2
 8003cf4:	65bc      	str	r4, [r7, #88]	; 0x58
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cfa:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003cfe:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d02:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d06:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d0a:	1cda      	adds	r2, r3, #3
 8003d0c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d10:	4413      	add	r3, r2
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2200      	movs	r2, #0
 8003d18:	653b      	str	r3, [r7, #80]	; 0x50
 8003d1a:	657a      	str	r2, [r7, #84]	; 0x54
 8003d1c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003d20:	4623      	mov	r3, r4
 8003d22:	0a1b      	lsrs	r3, r3, #8
 8003d24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d26:	4623      	mov	r3, r4
 8003d28:	061b      	lsls	r3, r3, #24
 8003d2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d2c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003d30:	4623      	mov	r3, r4
 8003d32:	4303      	orrs	r3, r0
 8003d34:	643b      	str	r3, [r7, #64]	; 0x40
 8003d36:	462b      	mov	r3, r5
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d3c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003d40:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003d44:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d4c:	1d1a      	adds	r2, r3, #4
 8003d4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d52:	4413      	add	r3, r2
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2200      	movs	r2, #0
 8003d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003d68:	0023      	movs	r3, r4
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	ea40 0402 	orr.w	r4, r0, r2
 8003d70:	633c      	str	r4, [r7, #48]	; 0x30
 8003d72:	430b      	orrs	r3, r1
 8003d74:	637b      	str	r3, [r7, #52]	; 0x34
 8003d76:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003d7a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003d7e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d86:	1d5a      	adds	r2, r3, #5
 8003d88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d8c:	4413      	add	r3, r2
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2200      	movs	r2, #0
 8003d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003da2:	0223      	lsls	r3, r4, #8
 8003da4:	2200      	movs	r2, #0
 8003da6:	ea40 0402 	orr.w	r4, r0, r2
 8003daa:	623c      	str	r4, [r7, #32]
 8003dac:	430b      	orrs	r3, r1
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
 8003db0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003db4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003db8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003dbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003dc0:	3306      	adds	r3, #6
 8003dc2:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003dc6:	4413      	add	r3, r2
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2200      	movs	r2, #0
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	61fa      	str	r2, [r7, #28]
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	69bc      	ldr	r4, [r7, #24]
 8003ddc:	0423      	lsls	r3, r4, #16
 8003dde:	2200      	movs	r2, #0
 8003de0:	ea40 0402 	orr.w	r4, r0, r2
 8003de4:	613c      	str	r4, [r7, #16]
 8003de6:	430b      	orrs	r3, r1
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003dee:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003df2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003df6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003dfa:	3307      	adds	r3, #7
 8003dfc:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003e00:	4413      	add	r3, r2
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2200      	movs	r2, #0
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	60fa      	str	r2, [r7, #12]
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	68bc      	ldr	r4, [r7, #8]
 8003e16:	0623      	lsls	r3, r4, #24
 8003e18:	2200      	movs	r2, #0
 8003e1a:	ea40 0402 	orr.w	r4, r0, r2
 8003e1e:	603c      	str	r4, [r7, #0]
 8003e20:	430b      	orrs	r3, r1
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e28:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003e2c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003e30:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003e34:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003e38:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003e42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003e46:	4618      	mov	r0, r3
 8003e48:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003e52:	4770      	bx	lr

08003e54 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	0800f2d8 	.word	0x0800f2d8

08003e70 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	0800f2f0 	.word	0x0800f2f0

08003e8c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe f8e2 	bl	8002060 <_ZN3ros3MsgC1Ev>
 8003e9c:	4a08      	ldr	r2, [pc, #32]	; (8003ec0 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fada 	bl	8003460 <_ZN13geometry_msgs7Vector3C1Ev>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3328      	adds	r3, #40	; 0x28
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fad5 	bl	8003460 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	0800f414 	.word	0x0800f414

08003ec4 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f103 0008 	add.w	r0, r3, #8
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4413      	add	r3, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f7ff fae6 	bl	80034b0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4413      	add	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	f7ff fad9 	bl	80034b0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003efe:	4602      	mov	r2, r0
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
      return offset;
 8003f06:	68fb      	ldr	r3, [r7, #12]
    }
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f103 0008 	add.w	r0, r3, #8
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	4413      	add	r3, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f7ff fc33 	bl	8003796 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	4413      	add	r3, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	f7ff fc26 	bl	8003796 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
     return offset;
 8003f52:	68fb      	ldr	r3, [r7, #12]
    }
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003f66:	4618      	mov	r0, r3
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	0800f314 	.word	0x0800f314

08003f78 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	4b03      	ldr	r3, [pc, #12]	; (8003f90 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	0800f328 	.word	0x0800f328

08003f94 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE>:
#include "geometry_msgs/Point.h"
#include "STM32Hardware.h"

geometry_msgs::Twist pub_out_msg;
void sub_vel_cb(const geometry_msgs::Twist &msg)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
   get_vel_x = msg.linear.x;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003fa2:	490a      	ldr	r1, [pc, #40]	; (8003fcc <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8003fa4:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_y = msg.linear.y;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003fae:	4908      	ldr	r1, [pc, #32]	; (8003fd0 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8003fb0:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_z = msg.angular.z;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003fba:	4906      	ldr	r1, [pc, #24]	; (8003fd4 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x40>)
 8003fbc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	24000688 	.word	0x24000688
 8003fd0:	24000690 	.word	0x24000690
 8003fd4:	24000698 	.word	0x24000698

08003fd8 <_Z8callbackRKN8std_msgs5Int64E>:

void callback(const std_msgs::Int64 &msg)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
   count = msg.data;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003fe6:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 8003fe8:	601a      	str	r2, [r3, #0]
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	24000668 	.word	0x24000668

08003ffc <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
ros::Subscriber<std_msgs::Int64> sub("counting", callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8004004:	4805      	ldr	r0, [pc, #20]	; (800401c <HAL_UART_TxCpltCallback+0x20>)
 8004006:	f000 f9ad 	bl	8004364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800400a:	4603      	mov	r3, r0
 800400c:	4618      	mov	r0, r3
 800400e:	f7fe ffad 	bl	8002f6c <_ZN13STM32Hardware5flushEv>
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	24000708 	.word	0x24000708

08004020 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8004028:	4805      	ldr	r0, [pc, #20]	; (8004040 <HAL_UART_RxCpltCallback+0x20>)
 800402a:	f000 f99b 	bl	8004364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800402e:	4603      	mov	r3, r0
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe ff5c 	bl	8002eee <_ZN13STM32Hardware10reset_rbufEv>
}
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	24000708 	.word	0x24000708

08004044 <setup>:

void setup(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
    nh.initNode();
 8004048:	4808      	ldr	r0, [pc, #32]	; (800406c <setup+0x28>)
 800404a:	f000 f997 	bl	800437c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//    sub_vel = nh.subscribe("/cmd_vel", 1, sub_vel_cb);
//    pub_vel = nh.advertise<geometry_msgs::Twist>("/base_speed", 1);
    nh.subscribe(sub_vel);
 800404e:	4908      	ldr	r1, [pc, #32]	; (8004070 <setup+0x2c>)
 8004050:	4806      	ldr	r0, [pc, #24]	; (800406c <setup+0x28>)
 8004052:	f000 f9bc 	bl	80043ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(sub);
 8004056:	4907      	ldr	r1, [pc, #28]	; (8004074 <setup+0x30>)
 8004058:	4804      	ldr	r0, [pc, #16]	; (800406c <setup+0x28>)
 800405a:	f000 f9e3 	bl	8004424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
    nh.advertise(pub_vel);
 800405e:	4906      	ldr	r1, [pc, #24]	; (8004078 <setup+0x34>)
 8004060:	4802      	ldr	r0, [pc, #8]	; (800406c <setup+0x28>)
 8004062:	f000 fa0a 	bl	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	24000708 	.word	0x24000708
 8004070:	24001c48 	.word	0x24001c48
 8004074:	24001cc0 	.word	0x24001cc0
 8004078:	24001ca8 	.word	0x24001ca8

0800407c <loop>:
void loop(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8004080:	4802      	ldr	r0, [pc, #8]	; (800408c <loop+0x10>)
 8004082:	f000 fa2a 	bl	80044da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	24000708 	.word	0x24000708

08004090 <publish_vel>:

void publish_vel(double x, double y, double z)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	ed87 0b04 	vstr	d0, [r7, #16]
 800409a:	ed87 1b02 	vstr	d1, [r7, #8]
 800409e:	ed87 2b00 	vstr	d2, [r7]

	pub_out_msg.linear.x = x;
 80040a2:	490b      	ldr	r1, [pc, #44]	; (80040d0 <publish_vel+0x40>)
 80040a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pub_out_msg.linear.y = y;
 80040ac:	4908      	ldr	r1, [pc, #32]	; (80040d0 <publish_vel+0x40>)
 80040ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040b2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pub_out_msg.angular.z = z;
 80040b6:	4906      	ldr	r1, [pc, #24]	; (80040d0 <publish_vel+0x40>)
 80040b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040bc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pub_vel.publish(&pub_out_msg);
 80040c0:	4903      	ldr	r1, [pc, #12]	; (80040d0 <publish_vel+0x40>)
 80040c2:	4804      	ldr	r0, [pc, #16]	; (80040d4 <publish_vel+0x44>)
 80040c4:	f7fe fe19 	bl	8002cfa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80040c8:	bf00      	nop
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	240006c0 	.word	0x240006c0
 80040d4:	24001ca8 	.word	0x24001ca8

080040d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d80d      	bhi.n	8004108 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	fa22 f103 	lsr.w	r1, r2, r3
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	b2ca      	uxtb	r2, r1
 80040fe:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3301      	adds	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	e7ee      	b.n	80040e6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d811      	bhi.n	8004152 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6839      	ldr	r1, [r7, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	440a      	add	r2, r1
 8004138:	7812      	ldrb	r2, [r2, #0]
 800413a:	4611      	mov	r1, r2
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	00d2      	lsls	r2, r2, #3
 8004140:	fa01 f202 	lsl.w	r2, r1, r2
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3301      	adds	r3, #1
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	e7ea      	b.n	8004128 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
	...

08004160 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	4a04      	ldr	r2, [pc, #16]	; (800417c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	0800f474 	.word	0x0800f474

08004180 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff ffe8 	bl	8004160 <_ZN3ros15NodeHandleBase_C1Ev>
 8004190:	4a47      	ldr	r2, [pc, #284]	; (80042b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3304      	adds	r3, #4
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe fe7c 	bl	8002e98 <_ZN13STM32HardwareC1Ev>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	f241 5314 	movw	r3, #5396	; 0x1514
 80041b2:	4413      	add	r3, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fe fac7 	bl	8002748 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b18      	cmp	r3, #24
 80041c2:	d80b      	bhi.n	80041dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	2200      	movs	r2, #0
 80041d2:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	3301      	adds	r3, #1
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e7f0      	b.n	80041be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b18      	cmp	r3, #24
 80041e4:	d80a      	bhi.n	80041fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80041ee:	2100      	movs	r1, #0
 80041f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	3301      	adds	r3, #1
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	e7f1      	b.n	80041e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004206:	d20b      	bcs.n	8004220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	441a      	add	r2, r3
 800420e:	f241 0324 	movw	r3, #4132	; 0x1024
 8004212:	4413      	add	r3, r2
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3301      	adds	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	e7ef      	b.n	8004200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422a:	d20b      	bcs.n	8004244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	441a      	add	r2, r3
 8004232:	f241 2324 	movw	r3, #4644	; 0x1224
 8004236:	4413      	add	r3, r2
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	3301      	adds	r3, #1
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	e7ef      	b.n	8004224 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424a:	461a      	mov	r2, r3
 800424c:	2300      	movs	r3, #0
 800424e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004258:	461a      	mov	r2, r3
 800425a:	2300      	movs	r3, #0
 800425c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004266:	461a      	mov	r2, r3
 8004268:	2300      	movs	r3, #0
 800426a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004274:	461a      	mov	r2, r3
 8004276:	2300      	movs	r3, #0
 8004278:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004282:	461a      	mov	r2, r3
 8004284:	2300      	movs	r3, #0
 8004286:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004290:	461a      	mov	r2, r3
 8004292:	2300      	movs	r3, #0
 8004294:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429e:	461a      	mov	r2, r3
 80042a0:	2300      	movs	r3, #0
 80042a2:	6213      	str	r3, [r2, #32]
  }
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	0800f400 	.word	0x0800f400

080042b4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	0800f45c 	.word	0x0800f45c

080042d4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ffe5 	bl	80042b4 <_ZN3ros11Subscriber_C1Ev>
 80042ea:	4a0b      	ldr	r2, [pc, #44]	; (8004318 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3310      	adds	r3, #16
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fdc9 	bl	8003e8c <_ZN13geometry_msgs5TwistC1Ev>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	659a      	str	r2, [r3, #88]	; 0x58
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	609a      	str	r2, [r3, #8]
  };
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	0800f3e8 	.word	0x0800f3e8

0800431c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ffc1 	bl	80042b4 <_ZN3ros11Subscriber_C1Ev>
 8004332:	4a0b      	ldr	r2, [pc, #44]	; (8004360 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3310      	adds	r3, #16
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe fed1 	bl	80030e4 <_ZN8std_msgs5Int64C1Ev>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	621a      	str	r2, [r3, #32]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	609a      	str	r2, [r3, #8]
  };
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	0800f3d0 	.word	0x0800f3d0

08004364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
  }
 8004370:	4618      	mov	r0, r3
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	4618      	mov	r0, r3
 800438a:	f7fe fda5 	bl	8002ed8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004394:	461a      	mov	r2, r3
 8004396:	2300      	movs	r3, #0
 8004398:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a2:	461a      	mov	r2, r3
 80043a4:	2300      	movs	r3, #0
 80043a6:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b0:	461a      	mov	r2, r3
 80043b2:	2300      	movs	r3, #0
 80043b4:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043be:	461a      	mov	r2, r3
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80043ce:	b480      	push	{r7}
 80043d0:	b085      	sub	sp, #20
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b18      	cmp	r3, #24
 80043e0:	dc19      	bgt.n	8004416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80043ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10d      	bne.n	800440e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80043f2:	6839      	ldr	r1, [r7, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80043fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	605a      	str	r2, [r3, #4]
        return true;
 800440a:	2301      	movs	r3, #1
 800440c:	e004      	b.n	8004418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3301      	adds	r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	e7e2      	b.n	80043dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8004416:	2300      	movs	r3, #0
  }
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b18      	cmp	r3, #24
 8004436:	dc19      	bgt.n	800446c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10d      	bne.n	8004464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004448:	6839      	ldr	r1, [r7, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	605a      	str	r2, [r3, #4]
        return true;
 8004460:	2301      	movs	r3, #1
 8004462:	e004      	b.n	800446e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	e7e2      	b.n	8004432 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
    return false;
 800446c:	2300      	movs	r3, #0
  }
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b18      	cmp	r3, #24
 800448c:	dc1e      	bgt.n	80044cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d111      	bne.n	80044c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	60da      	str	r2, [r3, #12]
        return true;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e004      	b.n	80044ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3301      	adds	r3, #1
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e7dd      	b.n	8004488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80044cc:	2300      	movs	r3, #0
  }
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80044da:	b580      	push	{r7, lr}
 80044dc:	b084      	sub	sp, #16
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3304      	adds	r3, #4
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe fdf0 	bl	80030cc <_ZN13STM32Hardware4timeEv>
 80044ec:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004500:	4293      	cmp	r3, r2
 8004502:	d905      	bls.n	8004510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004516:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00e      	beq.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004524:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	429a      	cmp	r2, r3
 800452c:	d906      	bls.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004534:	461a      	mov	r2, r3
 8004536:	2300      	movs	r3, #0
 8004538:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d015      	beq.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3304      	adds	r3, #4
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe fdbd 	bl	80030cc <_ZN13STM32Hardware4timeEv>
 8004552:	4602      	mov	r2, r0
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1ad2      	subs	r2, r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	429a      	cmp	r2, r3
 8004562:	bf8c      	ite	hi
 8004564:	2301      	movhi	r3, #1
 8004566:	2300      	movls	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 800456e:	f06f 0301 	mvn.w	r3, #1
 8004572:	e226      	b.n	80049c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3304      	adds	r3, #4
 8004578:	4618      	mov	r0, r3
 800457a:	f7fe fcc9 	bl	8002f10 <_ZN13STM32Hardware4readEv>
 800457e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f2c0 81ff 	blt.w	8004986 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800458e:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	4413      	add	r3, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800459c:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045aa:	2b07      	cmp	r3, #7
 80045ac:	d12d      	bne.n	800460a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b4:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80045c0:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	b2d1      	uxtb	r1, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	441a      	add	r2, r3
 80045cc:	f241 0324 	movw	r3, #4132	; 0x1024
 80045d0:	4413      	add	r3, r2
 80045d2:	460a      	mov	r2, r1
 80045d4:	701a      	strb	r2, [r3, #0]
        bytes_--;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045dc:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80045e0:	3b01      	subs	r3, #1
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045e8:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f2:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1a0      	bne.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004600:	461a      	mov	r2, r3
 8004602:	2308      	movs	r3, #8
 8004604:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004608:	e798      	b.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004610:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004614:	2b00      	cmp	r3, #0
 8004616:	d130      	bne.n	800467a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2bff      	cmp	r3, #255	; 0xff
 800461c:	d112      	bne.n	8004644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004624:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004628:	3301      	adds	r3, #1
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004630:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	3314      	adds	r3, #20
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800463e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 8004642:	e77b      	b.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3304      	adds	r3, #4
 8004648:	4618      	mov	r0, r3
 800464a:	f7fe fd3f 	bl	80030cc <_ZN13STM32Hardware4timeEv>
 800464e:	4602      	mov	r2, r0
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	; 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	bf8c      	ite	hi
 800465c:	2301      	movhi	r3, #1
 800465e:	2300      	movls	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	f43f af6a 	beq.w	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 8004674:	f06f 0301 	mvn.w	r3, #1
 8004678:	e1a3      	b.n	80049c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004680:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004684:	2b01      	cmp	r3, #1
 8004686:	d121      	bne.n	80046cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2bfe      	cmp	r3, #254	; 0xfe
 800468c:	d10b      	bne.n	80046a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004694:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004698:	3301      	adds	r3, #1
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046a0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80046a4:	e74a      	b.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ac:	461a      	mov	r2, r3
 80046ae:	2300      	movs	r3, #0
 80046b0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ba:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f47f af3c 	bne.w	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f980 	bl	80049ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80046ca:	e737      	b.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d120      	bne.n	800471c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e0:	461a      	mov	r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ee:	461a      	mov	r2, r3
 80046f0:	2300      	movs	r3, #0
 80046f2:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004700:	3301      	adds	r3, #1
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004708:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004712:	461a      	mov	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800471a:	e70f      	b.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004722:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004726:	2b03      	cmp	r3, #3
 8004728:	d118      	bne.n	800475c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004730:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	4413      	add	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004740:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800474e:	3301      	adds	r3, #1
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004756:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800475a:	e6ef      	b.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004762:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004766:	2b04      	cmp	r3, #4
 8004768:	d11f      	bne.n	80047aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004770:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004774:	425a      	negs	r2, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	bf58      	it	pl
 800477c:	4253      	negpl	r3, r2
 800477e:	2bff      	cmp	r3, #255	; 0xff
 8004780:	d10b      	bne.n	800479a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004788:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800478c:	3301      	adds	r3, #1
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004794:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004798:	e6d0      	b.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a0:	461a      	mov	r2, r3
 80047a2:	2300      	movs	r3, #0
 80047a4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047a8:	e6c8      	b.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047b4:	2b05      	cmp	r3, #5
 80047b6:	d119      	bne.n	80047ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047be:	461a      	mov	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047cc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047d0:	3301      	adds	r3, #1
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047d8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e2:	461a      	mov	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 80047ea:	e6a7      	b.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047f6:	2b06      	cmp	r3, #6
 80047f8:	d123      	bne.n	8004842 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004800:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	4413      	add	r3, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004810:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800481a:	461a      	mov	r2, r3
 800481c:	2307      	movs	r3, #7
 800481e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004828:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800482c:	2b00      	cmp	r3, #0
 800482e:	f47f ae85 	bne.w	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004838:	461a      	mov	r2, r3
 800483a:	2308      	movs	r3, #8
 800483c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004840:	e67c      	b.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004848:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800484c:	2b08      	cmp	r3, #8
 800484e:	f47f ae75 	bne.w	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004858:	461a      	mov	r2, r3
 800485a:	2300      	movs	r3, #0
 800485c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004866:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800486a:	425a      	negs	r2, r3
 800486c:	b2db      	uxtb	r3, r3
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	bf58      	it	pl
 8004872:	4253      	negpl	r3, r2
 8004874:	2bff      	cmp	r3, #255	; 0xff
 8004876:	f47f ae61 	bne.w	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004880:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d116      	bne.n	80048b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f89e 	bl	80049ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f8ba 	bl	8004a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800489a:	461a      	mov	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a8:	461a      	mov	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 80048b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048b4:	e085      	b.n	80049c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048bc:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048c0:	2b0a      	cmp	r3, #10
 80048c2:	d108      	bne.n	80048d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	f241 0324 	movw	r3, #4132	; 0x1024
 80048ca:	4413      	add	r3, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f97c 	bl	8004bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80048d4:	e632      	b.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048dc:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048e0:	2b06      	cmp	r3, #6
 80048e2:	d112      	bne.n	800490a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	f241 5314 	movw	r3, #5396	; 0x1514
 80048ea:	4413      	add	r3, r2
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	f241 0224 	movw	r2, #4132	; 0x1024
 80048f2:	440a      	add	r2, r1
 80048f4:	4611      	mov	r1, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe f85b 	bl	80029b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004908:	e618      	b.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004910:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004914:	2b0b      	cmp	r3, #11
 8004916:	d106      	bne.n	8004926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004924:	e60a      	b.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004930:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800493a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f43f adfc 	beq.w	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800494e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004958:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004962:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004966:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	f241 0324 	movw	r3, #4132	; 0x1024
 800497e:	440b      	add	r3, r1
 8004980:	4619      	mov	r1, r3
 8004982:	4790      	blx	r2
    while (true)
 8004984:	e5da      	b.n	800453c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8004986:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498e:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004992:	2b00      	cmp	r3, #0
 8004994:	d014      	beq.n	80049c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800499c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d909      	bls.n	80049c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f80c 	bl	80049ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b8:	461a      	mov	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 80049c0:	2300      	movs	r3, #0
  }
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b086      	sub	sp, #24
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80049d2:	f107 030c 	add.w	r3, r7, #12
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fd fb52 	bl	8002080 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f107 020c 	add.w	r2, r7, #12
 80049e6:	210a      	movs	r1, #10
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
    rt_time = hardware_.time();
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe fb6b 	bl	80030cc <_ZN13STM32Hardware4timeEv>
 80049f6:	4602      	mov	r2, r0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fe:	615a      	str	r2, [r3, #20]
  }
 8004a00:	bf00      	nop
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b08b      	sub	sp, #44	; 0x2c
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004a10:	f107 030c 	add.w	r3, r7, #12
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fd fc23 	bl	8002260 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	2b18      	cmp	r3, #24
 8004a22:	dc63      	bgt.n	8004aec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d056      	beq.n	8004ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4608      	mov	r0, r1
 8004a84:	4798      	blx	r3
 8004a86:	4603      	mov	r3, r0
 8004a88:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	6859      	ldr	r1, [r3, #4]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	4798      	blx	r3
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004abc:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681c      	ldr	r4, [r3, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fe f925 	bl	8002d22 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004ad8:	4601      	mov	r1, r0
 8004ada:	f107 030c 	add.w	r3, r7, #12
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aea:	e798      	b.n	8004a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004aec:	2300      	movs	r3, #0
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	2b18      	cmp	r3, #24
 8004af4:	dc5f      	bgt.n	8004bb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afa:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d053      	beq.n	8004bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b38:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3308      	adds	r3, #8
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4608      	mov	r0, r1
 8004b48:	4798      	blx	r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b52:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	330c      	adds	r3, #12
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	4798      	blx	r3
 8004b70:	4603      	mov	r3, r0
 8004b72:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b78:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681c      	ldr	r4, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b84:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b90:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4608      	mov	r0, r1
 8004ba0:	4798      	blx	r3
 8004ba2:	4601      	mov	r1, r0
 8004ba4:	f107 030c 	add.w	r3, r7, #12
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb4:	e79c      	b.n	8004af0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004bc2:	bf00      	nop
 8004bc4:	372c      	adds	r7, #44	; 0x2c
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd90      	pop	{r4, r7, pc}
	...

08004bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004bd6:	f107 0308 	add.w	r3, r7, #8
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fd fa50 	bl	8002080 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3304      	adds	r3, #4
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fe fa71 	bl	80030cc <_ZN13STM32Hardware4timeEv>
 8004bea:	4602      	mov	r2, r0
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004bf8:	f107 0308 	add.w	r3, r7, #8
 8004bfc:	6839      	ldr	r1, [r7, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fd faae 	bl	8002160 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	4915      	ldr	r1, [pc, #84]	; (8004c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c0a:	fba1 1303 	umull	r1, r3, r1, r3
 8004c0e:	099b      	lsrs	r3, r3, #6
 8004c10:	4413      	add	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004c14:	6939      	ldr	r1, [r7, #16]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c1a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c1e:	099b      	lsrs	r3, r3, #6
 8004c20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c24:	fb00 f303 	mul.w	r3, r0, r3
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004c2c:	fb02 f303 	mul.w	r3, r2, r3
 8004c30:	440b      	add	r3, r1
 8004c32:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004c34:	f107 0308 	add.w	r3, r7, #8
 8004c38:	3304      	adds	r3, #4
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f8bf 	bl	8004dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe fa40 	bl	80030cc <_ZN13STM32Hardware4timeEv>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c54:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004c58:	bf00      	nop
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	10624dd3 	.word	0x10624dd3
 8004c64:	000f4240 	.word	0x000f4240

08004c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b63      	cmp	r3, #99	; 0x63
 8004c78:	dd0b      	ble.n	8004c92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c80:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004c84:	f083 0301 	eor.w	r3, r3, #1
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e090      	b.n	8004db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68f9      	ldr	r1, [r7, #12]
 8004c9a:	f241 2324 	movw	r3, #4644	; 0x1224
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3307      	adds	r3, #7
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	4790      	blx	r2
 8004ca8:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb0:	22ff      	movs	r2, #255	; 0xff
 8004cb2:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cbc:	22fe      	movs	r2, #254	; 0xfe
 8004cbe:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ccc:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	0a1b      	lsrs	r3, r3, #8
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce0:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cea:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf4:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004cf8:	4413      	add	r3, r2
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d06:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d14:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	b21b      	sxth	r3, r3
 8004d1c:	121b      	asrs	r3, r3, #8
 8004d1e:	b21b      	sxth	r3, r3
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d28:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d30:	2305      	movs	r3, #5
 8004d32:	61bb      	str	r3, [r7, #24]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	3306      	adds	r3, #6
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	dc0e      	bgt.n	8004d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	441a      	add	r2, r3
 8004d44:	f241 2324 	movw	r3, #4644	; 0x1224
 8004d48:	4413      	add	r3, r2
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	3301      	adds	r3, #1
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	e7eb      	b.n	8004d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	3307      	adds	r3, #7
 8004d60:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	425a      	negs	r2, r3
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	bf58      	it	pl
 8004d6c:	4253      	negpl	r3, r2
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	1c59      	adds	r1, r3, #1
 8004d74:	6179      	str	r1, [r7, #20]
 8004d76:	43d2      	mvns	r2, r2
 8004d78:	b2d1      	uxtb	r1, r2
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	441a      	add	r2, r3
 8004d7e:	f241 2324 	movw	r3, #4644	; 0x1224
 8004d82:	4413      	add	r3, r2
 8004d84:	460a      	mov	r2, r1
 8004d86:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8e:	dc0b      	bgt.n	8004da8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	1d18      	adds	r0, r3, #4
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	f241 2324 	movw	r3, #4644	; 0x1224
 8004d9a:	4413      	add	r3, r2
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f7fe f94a 	bl	8003038 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	e005      	b.n	8004db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004da8:	4904      	ldr	r1, [pc, #16]	; (8004dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f84c 	bl	8004e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004db4:	4618      	mov	r0, r3
 8004db6:	3720      	adds	r7, #32
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	0800f34c 	.word	0x0800f34c

08004dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe f97c 	bl	80030cc <_ZN13STM32Hardware4timeEv>
 8004dd4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4917      	ldr	r1, [pc, #92]	; (8004e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004dde:	fba1 1303 	umull	r1, r3, r1, r3
 8004de2:	099b      	lsrs	r3, r3, #6
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dee:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	6859      	ldr	r1, [r3, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004df8:	fba3 0302 	umull	r0, r3, r3, r2
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e02:	fb00 f303 	mul.w	r3, r0, r3
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	4a0d      	ldr	r2, [pc, #52]	; (8004e40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004e0a:	fb02 f303 	mul.w	r3, r2, r3
 8004e0e:	1aca      	subs	r2, r1, r3
 8004e10:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004e12:	4413      	add	r3, r2
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e1a:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e22:	4413      	add	r3, r2
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	f241 021c 	movw	r2, #4124	; 0x101c
 8004e2a:	440a      	add	r2, r1
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fb fbf8 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	10624dd3 	.word	0x10624dd3
 8004e40:	000f4240 	.word	0x000f4240
 8004e44:	3b9aca00 	.word	0x3b9aca00

08004e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	2103      	movs	r1, #3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f804 	bl	8004e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004e5c:	bf00      	nop
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004e72:	f107 0314 	add.w	r3, r7, #20
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fd fbb6 	bl	80025e8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004e7c:	7afb      	ldrb	r3, [r7, #11]
 8004e7e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f107 0214 	add.w	r2, r7, #20
 8004e8e:	2107      	movs	r1, #7
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	4798      	blx	r3
  }
 8004e94:	bf00      	nop
 8004e96:	3720      	adds	r7, #32
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <_Z41__static_initialization_and_destruction_0ii>:
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d11c      	bne.n	8004ee6 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d117      	bne.n	8004ee6 <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist pub_out_msg;
 8004eb6:	480e      	ldr	r0, [pc, #56]	; (8004ef0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004eb8:	f7fe ffe8 	bl	8003e8c <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004ebc:	480d      	ldr	r0, [pc, #52]	; (8004ef4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004ebe:	f7ff f95f 	bl	8004180 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4a0c      	ldr	r2, [pc, #48]	; (8004ef8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004ec6:	490d      	ldr	r1, [pc, #52]	; (8004efc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004ec8:	480d      	ldr	r0, [pc, #52]	; (8004f00 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004eca:	f7ff fa03 	bl	80042d4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
 8004ece:	2300      	movs	r3, #0
 8004ed0:	4a07      	ldr	r2, [pc, #28]	; (8004ef0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004ed2:	490c      	ldr	r1, [pc, #48]	; (8004f04 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004ed4:	480c      	ldr	r0, [pc, #48]	; (8004f08 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004ed6:	f7fd fef9 	bl	8002ccc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8004eda:	2301      	movs	r3, #1
 8004edc:	4a0b      	ldr	r2, [pc, #44]	; (8004f0c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004ede:	490c      	ldr	r1, [pc, #48]	; (8004f10 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004ee0:	480c      	ldr	r0, [pc, #48]	; (8004f14 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004ee2:	f7ff fa1b 	bl	800431c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	240006c0 	.word	0x240006c0
 8004ef4:	24000708 	.word	0x24000708
 8004ef8:	08003f95 	.word	0x08003f95
 8004efc:	0800f388 	.word	0x0800f388
 8004f00:	24001c48 	.word	0x24001c48
 8004f04:	0800f394 	.word	0x0800f394
 8004f08:	24001ca8 	.word	0x24001ca8
 8004f0c:	08003fd9 	.word	0x08003fd9
 8004f10:	0800f3a0 	.word	0x0800f3a0
 8004f14:	24001cc0 	.word	0x24001cc0

08004f18 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3310      	adds	r3, #16
 8004f26:	6839      	ldr	r1, [r7, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fe f97a 	bl	8003222 <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	3210      	adds	r2, #16
 8004f36:	4610      	mov	r0, r2
 8004f38:	4798      	blx	r3
  }
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3310      	adds	r3, #16
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe fa5e 	bl	8003428 <_ZN8std_msgs5Int647getTypeEv>
 8004f6c:	4603      	mov	r3, r0
  }
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3310      	adds	r3, #16
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe fa5e 	bl	8003444 <_ZN8std_msgs5Int646getMD5Ev>
 8004f88:	4603      	mov	r3, r0
  }
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3310      	adds	r3, #16
 8004fa0:	6839      	ldr	r1, [r7, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fe ffb4 	bl	8003f10 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	3210      	adds	r2, #16
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	4798      	blx	r3
  }
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3310      	adds	r3, #16
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fe ffbb 	bl	8003f5c <_ZN13geometry_msgs5Twist7getTypeEv>
 8004fe6:	4603      	mov	r3, r0
  }
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3310      	adds	r3, #16
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fe ffbb 	bl	8003f78 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8005002:	4603      	mov	r3, r0
  }
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
    return configured_;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800501a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <_GLOBAL__sub_I_pub_out_msg>:
 800502a:	b580      	push	{r7, lr}
 800502c:	af00      	add	r7, sp, #0
 800502e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005032:	2001      	movs	r0, #1
 8005034:	f7ff ff32 	bl	8004e9c <_Z41__static_initialization_and_destruction_0ii>
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005042:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <HAL_MspInit+0x3c>)
 8005044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005048:	4a0b      	ldr	r2, [pc, #44]	; (8005078 <HAL_MspInit+0x3c>)
 800504a:	f043 0302 	orr.w	r3, r3, #2
 800504e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <HAL_MspInit+0x3c>)
 8005054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	607b      	str	r3, [r7, #4]
 800505e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005060:	2200      	movs	r2, #0
 8005062:	2100      	movs	r1, #0
 8005064:	2005      	movs	r0, #5
 8005066:	f000 fe20 	bl	8005caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800506a:	2005      	movs	r0, #5
 800506c:	f000 fe37 	bl	8005cde <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	58024400 	.word	0x58024400

0800507c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a2b      	ldr	r2, [pc, #172]	; (8005138 <HAL_TIM_PWM_MspInit+0xbc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d10f      	bne.n	80050ae <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800508e:	4b2b      	ldr	r3, [pc, #172]	; (800513c <HAL_TIM_PWM_MspInit+0xc0>)
 8005090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005094:	4a29      	ldr	r2, [pc, #164]	; (800513c <HAL_TIM_PWM_MspInit+0xc0>)
 8005096:	f043 0301 	orr.w	r3, r3, #1
 800509a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800509e:	4b27      	ldr	r3, [pc, #156]	; (800513c <HAL_TIM_PWM_MspInit+0xc0>)
 80050a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80050ac:	e03d      	b.n	800512a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a23      	ldr	r2, [pc, #140]	; (8005140 <HAL_TIM_PWM_MspInit+0xc4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d10f      	bne.n	80050d8 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050b8:	4b20      	ldr	r3, [pc, #128]	; (800513c <HAL_TIM_PWM_MspInit+0xc0>)
 80050ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050be:	4a1f      	ldr	r2, [pc, #124]	; (800513c <HAL_TIM_PWM_MspInit+0xc0>)
 80050c0:	f043 0304 	orr.w	r3, r3, #4
 80050c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050c8:	4b1c      	ldr	r3, [pc, #112]	; (800513c <HAL_TIM_PWM_MspInit+0xc0>)
 80050ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	693b      	ldr	r3, [r7, #16]
}
 80050d6:	e028      	b.n	800512a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a19      	ldr	r2, [pc, #100]	; (8005144 <HAL_TIM_PWM_MspInit+0xc8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d10f      	bne.n	8005102 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80050e2:	4b16      	ldr	r3, [pc, #88]	; (800513c <HAL_TIM_PWM_MspInit+0xc0>)
 80050e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050e8:	4a14      	ldr	r2, [pc, #80]	; (800513c <HAL_TIM_PWM_MspInit+0xc0>)
 80050ea:	f043 0308 	orr.w	r3, r3, #8
 80050ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050f2:	4b12      	ldr	r3, [pc, #72]	; (800513c <HAL_TIM_PWM_MspInit+0xc0>)
 80050f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]
}
 8005100:	e013      	b.n	800512a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM15)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a10      	ldr	r2, [pc, #64]	; (8005148 <HAL_TIM_PWM_MspInit+0xcc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d10e      	bne.n	800512a <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <HAL_TIM_PWM_MspInit+0xc0>)
 800510e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005112:	4a0a      	ldr	r2, [pc, #40]	; (800513c <HAL_TIM_PWM_MspInit+0xc0>)
 8005114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005118:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800511c:	4b07      	ldr	r3, [pc, #28]	; (800513c <HAL_TIM_PWM_MspInit+0xc0>)
 800511e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	68bb      	ldr	r3, [r7, #8]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	58024400 	.word	0x58024400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40014000 	.word	0x40014000

0800514c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515c:	d117      	bne.n	800518e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800515e:	4b22      	ldr	r3, [pc, #136]	; (80051e8 <HAL_TIM_Base_MspInit+0x9c>)
 8005160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005164:	4a20      	ldr	r2, [pc, #128]	; (80051e8 <HAL_TIM_Base_MspInit+0x9c>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800516e:	4b1e      	ldr	r3, [pc, #120]	; (80051e8 <HAL_TIM_Base_MspInit+0x9c>)
 8005170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800517c:	2200      	movs	r2, #0
 800517e:	2100      	movs	r1, #0
 8005180:	201c      	movs	r0, #28
 8005182:	f000 fd92 	bl	8005caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005186:	201c      	movs	r0, #28
 8005188:	f000 fda9 	bl	8005cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800518c:	e028      	b.n	80051e0 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM6)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a16      	ldr	r2, [pc, #88]	; (80051ec <HAL_TIM_Base_MspInit+0xa0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d10f      	bne.n	80051b8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005198:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <HAL_TIM_Base_MspInit+0x9c>)
 800519a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800519e:	4a12      	ldr	r2, [pc, #72]	; (80051e8 <HAL_TIM_Base_MspInit+0x9c>)
 80051a0:	f043 0310 	orr.w	r3, r3, #16
 80051a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051a8:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <HAL_TIM_Base_MspInit+0x9c>)
 80051aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	693b      	ldr	r3, [r7, #16]
}
 80051b6:	e013      	b.n	80051e0 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM7)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a0c      	ldr	r2, [pc, #48]	; (80051f0 <HAL_TIM_Base_MspInit+0xa4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d10e      	bne.n	80051e0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <HAL_TIM_Base_MspInit+0x9c>)
 80051c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051c8:	4a07      	ldr	r2, [pc, #28]	; (80051e8 <HAL_TIM_Base_MspInit+0x9c>)
 80051ca:	f043 0320 	orr.w	r3, r3, #32
 80051ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <HAL_TIM_Base_MspInit+0x9c>)
 80051d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	68fb      	ldr	r3, [r7, #12]
}
 80051e0:	bf00      	nop
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	58024400 	.word	0x58024400
 80051ec:	40001000 	.word	0x40001000
 80051f0:	40001400 	.word	0x40001400

080051f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b090      	sub	sp, #64	; 0x40
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	609a      	str	r2, [r3, #8]
 8005208:	60da      	str	r2, [r3, #12]
 800520a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a78      	ldr	r2, [pc, #480]	; (80053f4 <HAL_TIM_Encoder_MspInit+0x200>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d14d      	bne.n	80052b2 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005216:	4b78      	ldr	r3, [pc, #480]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800521c:	4a76      	ldr	r2, [pc, #472]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 800521e:	f043 0302 	orr.w	r3, r3, #2
 8005222:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005226:	4b74      	ldr	r3, [pc, #464]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	62bb      	str	r3, [r7, #40]	; 0x28
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005234:	4b70      	ldr	r3, [pc, #448]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800523a:	4a6f      	ldr	r2, [pc, #444]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005244:	4b6c      	ldr	r3, [pc, #432]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005252:	4b69      	ldr	r3, [pc, #420]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005258:	4a67      	ldr	r2, [pc, #412]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 800525a:	f043 0302 	orr.w	r3, r3, #2
 800525e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005262:	4b65      	ldr	r3, [pc, #404]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	623b      	str	r3, [r7, #32]
 800526e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005270:	2340      	movs	r3, #64	; 0x40
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005274:	2302      	movs	r3, #2
 8005276:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	2300      	movs	r3, #0
 800527a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800527c:	2300      	movs	r3, #0
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005280:	2302      	movs	r3, #2
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005288:	4619      	mov	r1, r3
 800528a:	485c      	ldr	r0, [pc, #368]	; (80053fc <HAL_TIM_Encoder_MspInit+0x208>)
 800528c:	f003 fb7c 	bl	8008988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005290:	2320      	movs	r3, #32
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005294:	2302      	movs	r3, #2
 8005296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005298:	2300      	movs	r3, #0
 800529a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800529c:	2300      	movs	r3, #0
 800529e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052a0:	2302      	movs	r3, #2
 80052a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052a8:	4619      	mov	r1, r3
 80052aa:	4855      	ldr	r0, [pc, #340]	; (8005400 <HAL_TIM_Encoder_MspInit+0x20c>)
 80052ac:	f003 fb6c 	bl	8008988 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80052b0:	e09b      	b.n	80053ea <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a53      	ldr	r2, [pc, #332]	; (8005404 <HAL_TIM_Encoder_MspInit+0x210>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d12e      	bne.n	800531a <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80052bc:	4b4e      	ldr	r3, [pc, #312]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 80052be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052c2:	4a4d      	ldr	r2, [pc, #308]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 80052c4:	f043 0302 	orr.w	r3, r3, #2
 80052c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80052cc:	4b4a      	ldr	r3, [pc, #296]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 80052ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052da:	4b47      	ldr	r3, [pc, #284]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 80052dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052e0:	4a45      	ldr	r2, [pc, #276]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 80052e2:	f043 0304 	orr.w	r3, r3, #4
 80052e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052ea:	4b43      	ldr	r3, [pc, #268]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 80052ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	61bb      	str	r3, [r7, #24]
 80052f6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80052f8:	23c0      	movs	r3, #192	; 0xc0
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052fc:	2302      	movs	r3, #2
 80052fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005300:	2300      	movs	r3, #0
 8005302:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005304:	2300      	movs	r3, #0
 8005306:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005308:	2303      	movs	r3, #3
 800530a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800530c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005310:	4619      	mov	r1, r3
 8005312:	483d      	ldr	r0, [pc, #244]	; (8005408 <HAL_TIM_Encoder_MspInit+0x214>)
 8005314:	f003 fb38 	bl	8008988 <HAL_GPIO_Init>
}
 8005318:	e067      	b.n	80053ea <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM23)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a3b      	ldr	r2, [pc, #236]	; (800540c <HAL_TIM_Encoder_MspInit+0x218>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d12e      	bne.n	8005382 <HAL_TIM_Encoder_MspInit+0x18e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8005324:	4b34      	ldr	r3, [pc, #208]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005326:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800532a:	4a33      	ldr	r2, [pc, #204]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 800532c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005330:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005334:	4b30      	ldr	r3, [pc, #192]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005336:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800533a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005342:	4b2d      	ldr	r3, [pc, #180]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005348:	4a2b      	ldr	r2, [pc, #172]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 800534a:	f043 0320 	orr.w	r3, r3, #32
 800534e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005352:	4b29      	ldr	r3, [pc, #164]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005360:	2303      	movs	r3, #3
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005364:	2302      	movs	r3, #2
 8005366:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005368:	2300      	movs	r3, #0
 800536a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800536c:	2300      	movs	r3, #0
 800536e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8005370:	230d      	movs	r3, #13
 8005372:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005378:	4619      	mov	r1, r3
 800537a:	4825      	ldr	r0, [pc, #148]	; (8005410 <HAL_TIM_Encoder_MspInit+0x21c>)
 800537c:	f003 fb04 	bl	8008988 <HAL_GPIO_Init>
}
 8005380:	e033      	b.n	80053ea <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM24)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a23      	ldr	r2, [pc, #140]	; (8005414 <HAL_TIM_Encoder_MspInit+0x220>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d12e      	bne.n	80053ea <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM24_CLK_ENABLE();
 800538c:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 800538e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005392:	4a19      	ldr	r2, [pc, #100]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005394:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005398:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800539c:	4b16      	ldr	r3, [pc, #88]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 800539e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80053a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80053aa:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 80053ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053b0:	4a11      	ldr	r2, [pc, #68]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 80053b2:	f043 0320 	orr.w	r3, r3, #32
 80053b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053ba:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <HAL_TIM_Encoder_MspInit+0x204>)
 80053bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	60bb      	str	r3, [r7, #8]
 80053c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80053c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ce:	2302      	movs	r3, #2
 80053d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053d6:	2300      	movs	r3, #0
 80053d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 80053da:	230e      	movs	r3, #14
 80053dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053e2:	4619      	mov	r1, r3
 80053e4:	480a      	ldr	r0, [pc, #40]	; (8005410 <HAL_TIM_Encoder_MspInit+0x21c>)
 80053e6:	f003 facf 	bl	8008988 <HAL_GPIO_Init>
}
 80053ea:	bf00      	nop
 80053ec:	3740      	adds	r7, #64	; 0x40
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40000400 	.word	0x40000400
 80053f8:	58024400 	.word	0x58024400
 80053fc:	58020000 	.word	0x58020000
 8005400:	58020400 	.word	0x58020400
 8005404:	40010400 	.word	0x40010400
 8005408:	58020800 	.word	0x58020800
 800540c:	4000e000 	.word	0x4000e000
 8005410:	58021400 	.word	0x58021400
 8005414:	4000e400 	.word	0x4000e400

08005418 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08c      	sub	sp, #48	; 0x30
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005420:	f107 031c 	add.w	r3, r7, #28
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	609a      	str	r2, [r3, #8]
 800542c:	60da      	str	r2, [r3, #12]
 800542e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a4b      	ldr	r2, [pc, #300]	; (8005564 <HAL_TIM_MspPostInit+0x14c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d120      	bne.n	800547c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800543a:	4b4b      	ldr	r3, [pc, #300]	; (8005568 <HAL_TIM_MspPostInit+0x150>)
 800543c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005440:	4a49      	ldr	r2, [pc, #292]	; (8005568 <HAL_TIM_MspPostInit+0x150>)
 8005442:	f043 0310 	orr.w	r3, r3, #16
 8005446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800544a:	4b47      	ldr	r3, [pc, #284]	; (8005568 <HAL_TIM_MspPostInit+0x150>)
 800544c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800545c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800545e:	2302      	movs	r3, #2
 8005460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005462:	2300      	movs	r3, #0
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005466:	2300      	movs	r3, #0
 8005468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800546a:	2301      	movs	r3, #1
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800546e:	f107 031c 	add.w	r3, r7, #28
 8005472:	4619      	mov	r1, r3
 8005474:	483d      	ldr	r0, [pc, #244]	; (800556c <HAL_TIM_MspPostInit+0x154>)
 8005476:	f003 fa87 	bl	8008988 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800547a:	e06e      	b.n	800555a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a3b      	ldr	r2, [pc, #236]	; (8005570 <HAL_TIM_MspPostInit+0x158>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d120      	bne.n	80054c8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005486:	4b38      	ldr	r3, [pc, #224]	; (8005568 <HAL_TIM_MspPostInit+0x150>)
 8005488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800548c:	4a36      	ldr	r2, [pc, #216]	; (8005568 <HAL_TIM_MspPostInit+0x150>)
 800548e:	f043 0308 	orr.w	r3, r3, #8
 8005492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005496:	4b34      	ldr	r3, [pc, #208]	; (8005568 <HAL_TIM_MspPostInit+0x150>)
 8005498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80054a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054aa:	2302      	movs	r3, #2
 80054ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b2:	2300      	movs	r3, #0
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80054b6:	2302      	movs	r3, #2
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054ba:	f107 031c 	add.w	r3, r7, #28
 80054be:	4619      	mov	r1, r3
 80054c0:	482c      	ldr	r0, [pc, #176]	; (8005574 <HAL_TIM_MspPostInit+0x15c>)
 80054c2:	f003 fa61 	bl	8008988 <HAL_GPIO_Init>
}
 80054c6:	e048      	b.n	800555a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a2a      	ldr	r2, [pc, #168]	; (8005578 <HAL_TIM_MspPostInit+0x160>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d11f      	bne.n	8005512 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054d2:	4b25      	ldr	r3, [pc, #148]	; (8005568 <HAL_TIM_MspPostInit+0x150>)
 80054d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054d8:	4a23      	ldr	r2, [pc, #140]	; (8005568 <HAL_TIM_MspPostInit+0x150>)
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054e2:	4b21      	ldr	r3, [pc, #132]	; (8005568 <HAL_TIM_MspPostInit+0x150>)
 80054e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80054f0:	2301      	movs	r3, #1
 80054f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f4:	2302      	movs	r3, #2
 80054f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fc:	2300      	movs	r3, #0
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005500:	2302      	movs	r3, #2
 8005502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005504:	f107 031c 	add.w	r3, r7, #28
 8005508:	4619      	mov	r1, r3
 800550a:	481c      	ldr	r0, [pc, #112]	; (800557c <HAL_TIM_MspPostInit+0x164>)
 800550c:	f003 fa3c 	bl	8008988 <HAL_GPIO_Init>
}
 8005510:	e023      	b.n	800555a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a1a      	ldr	r2, [pc, #104]	; (8005580 <HAL_TIM_MspPostInit+0x168>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d11e      	bne.n	800555a <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800551c:	4b12      	ldr	r3, [pc, #72]	; (8005568 <HAL_TIM_MspPostInit+0x150>)
 800551e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005522:	4a11      	ldr	r2, [pc, #68]	; (8005568 <HAL_TIM_MspPostInit+0x150>)
 8005524:	f043 0310 	orr.w	r3, r3, #16
 8005528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800552c:	4b0e      	ldr	r3, [pc, #56]	; (8005568 <HAL_TIM_MspPostInit+0x150>)
 800552e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800553a:	2320      	movs	r3, #32
 800553c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800553e:	2302      	movs	r3, #2
 8005540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005542:	2300      	movs	r3, #0
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005546:	2300      	movs	r3, #0
 8005548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800554a:	2304      	movs	r3, #4
 800554c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800554e:	f107 031c 	add.w	r3, r7, #28
 8005552:	4619      	mov	r1, r3
 8005554:	4805      	ldr	r0, [pc, #20]	; (800556c <HAL_TIM_MspPostInit+0x154>)
 8005556:	f003 fa17 	bl	8008988 <HAL_GPIO_Init>
}
 800555a:	bf00      	nop
 800555c:	3730      	adds	r7, #48	; 0x30
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40010000 	.word	0x40010000
 8005568:	58024400 	.word	0x58024400
 800556c:	58021000 	.word	0x58021000
 8005570:	40000800 	.word	0x40000800
 8005574:	58020c00 	.word	0x58020c00
 8005578:	40000c00 	.word	0x40000c00
 800557c:	58020000 	.word	0x58020000
 8005580:	40014000 	.word	0x40014000

08005584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b0b6      	sub	sp, #216	; 0xd8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800558c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	605a      	str	r2, [r3, #4]
 8005596:	609a      	str	r2, [r3, #8]
 8005598:	60da      	str	r2, [r3, #12]
 800559a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800559c:	f107 0310 	add.w	r3, r7, #16
 80055a0:	22b4      	movs	r2, #180	; 0xb4
 80055a2:	2100      	movs	r1, #0
 80055a4:	4618      	mov	r0, r3
 80055a6:	f009 fc7d 	bl	800eea4 <memset>
  if(huart->Instance==USART3)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a57      	ldr	r2, [pc, #348]	; (800570c <HAL_UART_MspInit+0x188>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	f040 80a7 	bne.w	8005704 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80055b6:	2302      	movs	r3, #2
 80055b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80055ba:	2300      	movs	r3, #0
 80055bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055c0:	f107 0310 	add.w	r3, r7, #16
 80055c4:	4618      	mov	r0, r3
 80055c6:	f004 fb15 	bl	8009bf4 <HAL_RCCEx_PeriphCLKConfig>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80055d0:	f7fc fd30 	bl	8002034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80055d4:	4b4e      	ldr	r3, [pc, #312]	; (8005710 <HAL_UART_MspInit+0x18c>)
 80055d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055da:	4a4d      	ldr	r2, [pc, #308]	; (8005710 <HAL_UART_MspInit+0x18c>)
 80055dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80055e4:	4b4a      	ldr	r3, [pc, #296]	; (8005710 <HAL_UART_MspInit+0x18c>)
 80055e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055f2:	4b47      	ldr	r3, [pc, #284]	; (8005710 <HAL_UART_MspInit+0x18c>)
 80055f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055f8:	4a45      	ldr	r2, [pc, #276]	; (8005710 <HAL_UART_MspInit+0x18c>)
 80055fa:	f043 0302 	orr.w	r3, r3, #2
 80055fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005602:	4b43      	ldr	r3, [pc, #268]	; (8005710 <HAL_UART_MspInit+0x18c>)
 8005604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005610:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005614:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005618:	2302      	movs	r3, #2
 800561a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561e:	2300      	movs	r3, #0
 8005620:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005624:	2300      	movs	r3, #0
 8005626:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800562a:	2307      	movs	r3, #7
 800562c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005630:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005634:	4619      	mov	r1, r3
 8005636:	4837      	ldr	r0, [pc, #220]	; (8005714 <HAL_UART_MspInit+0x190>)
 8005638:	f003 f9a6 	bl	8008988 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800563c:	4b36      	ldr	r3, [pc, #216]	; (8005718 <HAL_UART_MspInit+0x194>)
 800563e:	4a37      	ldr	r2, [pc, #220]	; (800571c <HAL_UART_MspInit+0x198>)
 8005640:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005642:	4b35      	ldr	r3, [pc, #212]	; (8005718 <HAL_UART_MspInit+0x194>)
 8005644:	222d      	movs	r2, #45	; 0x2d
 8005646:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005648:	4b33      	ldr	r3, [pc, #204]	; (8005718 <HAL_UART_MspInit+0x194>)
 800564a:	2200      	movs	r2, #0
 800564c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800564e:	4b32      	ldr	r3, [pc, #200]	; (8005718 <HAL_UART_MspInit+0x194>)
 8005650:	2200      	movs	r2, #0
 8005652:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005654:	4b30      	ldr	r3, [pc, #192]	; (8005718 <HAL_UART_MspInit+0x194>)
 8005656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800565a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800565c:	4b2e      	ldr	r3, [pc, #184]	; (8005718 <HAL_UART_MspInit+0x194>)
 800565e:	2200      	movs	r2, #0
 8005660:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005662:	4b2d      	ldr	r3, [pc, #180]	; (8005718 <HAL_UART_MspInit+0x194>)
 8005664:	2200      	movs	r2, #0
 8005666:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005668:	4b2b      	ldr	r3, [pc, #172]	; (8005718 <HAL_UART_MspInit+0x194>)
 800566a:	2200      	movs	r2, #0
 800566c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800566e:	4b2a      	ldr	r3, [pc, #168]	; (8005718 <HAL_UART_MspInit+0x194>)
 8005670:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005674:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005676:	4b28      	ldr	r3, [pc, #160]	; (8005718 <HAL_UART_MspInit+0x194>)
 8005678:	2200      	movs	r2, #0
 800567a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800567c:	4826      	ldr	r0, [pc, #152]	; (8005718 <HAL_UART_MspInit+0x194>)
 800567e:	f000 fb49 	bl	8005d14 <HAL_DMA_Init>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8005688:	f7fc fcd4 	bl	8002034 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a22      	ldr	r2, [pc, #136]	; (8005718 <HAL_UART_MspInit+0x194>)
 8005690:	67da      	str	r2, [r3, #124]	; 0x7c
 8005692:	4a21      	ldr	r2, [pc, #132]	; (8005718 <HAL_UART_MspInit+0x194>)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8005698:	4b21      	ldr	r3, [pc, #132]	; (8005720 <HAL_UART_MspInit+0x19c>)
 800569a:	4a22      	ldr	r2, [pc, #136]	; (8005724 <HAL_UART_MspInit+0x1a0>)
 800569c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800569e:	4b20      	ldr	r3, [pc, #128]	; (8005720 <HAL_UART_MspInit+0x19c>)
 80056a0:	222e      	movs	r2, #46	; 0x2e
 80056a2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056a4:	4b1e      	ldr	r3, [pc, #120]	; (8005720 <HAL_UART_MspInit+0x19c>)
 80056a6:	2240      	movs	r2, #64	; 0x40
 80056a8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056aa:	4b1d      	ldr	r3, [pc, #116]	; (8005720 <HAL_UART_MspInit+0x19c>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056b0:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <HAL_UART_MspInit+0x19c>)
 80056b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056b6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056b8:	4b19      	ldr	r3, [pc, #100]	; (8005720 <HAL_UART_MspInit+0x19c>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056be:	4b18      	ldr	r3, [pc, #96]	; (8005720 <HAL_UART_MspInit+0x19c>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80056c4:	4b16      	ldr	r3, [pc, #88]	; (8005720 <HAL_UART_MspInit+0x19c>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80056ca:	4b15      	ldr	r3, [pc, #84]	; (8005720 <HAL_UART_MspInit+0x19c>)
 80056cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056d2:	4b13      	ldr	r3, [pc, #76]	; (8005720 <HAL_UART_MspInit+0x19c>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80056d8:	4811      	ldr	r0, [pc, #68]	; (8005720 <HAL_UART_MspInit+0x19c>)
 80056da:	f000 fb1b 	bl	8005d14 <HAL_DMA_Init>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80056e4:	f7fc fca6 	bl	8002034 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a0d      	ldr	r2, [pc, #52]	; (8005720 <HAL_UART_MspInit+0x19c>)
 80056ec:	679a      	str	r2, [r3, #120]	; 0x78
 80056ee:	4a0c      	ldr	r2, [pc, #48]	; (8005720 <HAL_UART_MspInit+0x19c>)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80056f4:	2200      	movs	r2, #0
 80056f6:	2100      	movs	r1, #0
 80056f8:	2027      	movs	r0, #39	; 0x27
 80056fa:	f000 fad6 	bl	8005caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80056fe:	2027      	movs	r0, #39	; 0x27
 8005700:	f000 faed 	bl	8005cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005704:	bf00      	nop
 8005706:	37d8      	adds	r7, #216	; 0xd8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40004800 	.word	0x40004800
 8005710:	58024400 	.word	0x58024400
 8005714:	58020400 	.word	0x58020400
 8005718:	24000468 	.word	0x24000468
 800571c:	40020010 	.word	0x40020010
 8005720:	240004e0 	.word	0x240004e0
 8005724:	40020028 	.word	0x40020028

08005728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800572c:	e7fe      	b.n	800572c <NMI_Handler+0x4>

0800572e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800572e:	b480      	push	{r7}
 8005730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005732:	e7fe      	b.n	8005732 <HardFault_Handler+0x4>

08005734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005738:	e7fe      	b.n	8005738 <MemManage_Handler+0x4>

0800573a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800573a:	b480      	push	{r7}
 800573c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800573e:	e7fe      	b.n	800573e <BusFault_Handler+0x4>

08005740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005744:	e7fe      	b.n	8005744 <UsageFault_Handler+0x4>

08005746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005746:	b480      	push	{r7}
 8005748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800574a:	bf00      	nop
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005758:	bf00      	nop
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005762:	b480      	push	{r7}
 8005764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005766:	bf00      	nop
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005774:	f000 f99e 	bl	8005ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005778:	bf00      	nop
 800577a:	bd80      	pop	{r7, pc}

0800577c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005780:	bf00      	nop
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005790:	4802      	ldr	r0, [pc, #8]	; (800579c <DMA1_Stream0_IRQHandler+0x10>)
 8005792:	f001 fde7 	bl	8007364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005796:	bf00      	nop
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	24000468 	.word	0x24000468

080057a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80057a4:	4802      	ldr	r0, [pc, #8]	; (80057b0 <DMA1_Stream1_IRQHandler+0x10>)
 80057a6:	f001 fddd 	bl	8007364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80057aa:	bf00      	nop
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	240004e0 	.word	0x240004e0

080057b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80057b8:	4802      	ldr	r0, [pc, #8]	; (80057c4 <TIM2_IRQHandler+0x10>)
 80057ba:	f006 f917 	bl	800b9ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	240000e0 	.word	0x240000e0

080057c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80057cc:	4802      	ldr	r0, [pc, #8]	; (80057d8 <USART3_IRQHandler+0x10>)
 80057ce:	f007 fb33 	bl	800ce38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80057d2:	bf00      	nop
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	240003d8 	.word	0x240003d8

080057dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
	return 1;
 80057e0:	2301      	movs	r3, #1
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <_kill>:

int _kill(int pid, int sig)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80057f6:	f009 fb1d 	bl	800ee34 <__errno>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2216      	movs	r2, #22
 80057fe:	601a      	str	r2, [r3, #0]
	return -1;
 8005800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <_exit>:

void _exit (int status)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff ffe7 	bl	80057ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800581e:	e7fe      	b.n	800581e <_exit+0x12>

08005820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005828:	4a14      	ldr	r2, [pc, #80]	; (800587c <_sbrk+0x5c>)
 800582a:	4b15      	ldr	r3, [pc, #84]	; (8005880 <_sbrk+0x60>)
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005834:	4b13      	ldr	r3, [pc, #76]	; (8005884 <_sbrk+0x64>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d102      	bne.n	8005842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800583c:	4b11      	ldr	r3, [pc, #68]	; (8005884 <_sbrk+0x64>)
 800583e:	4a12      	ldr	r2, [pc, #72]	; (8005888 <_sbrk+0x68>)
 8005840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005842:	4b10      	ldr	r3, [pc, #64]	; (8005884 <_sbrk+0x64>)
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4413      	add	r3, r2
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	429a      	cmp	r2, r3
 800584e:	d207      	bcs.n	8005860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005850:	f009 faf0 	bl	800ee34 <__errno>
 8005854:	4603      	mov	r3, r0
 8005856:	220c      	movs	r2, #12
 8005858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800585a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800585e:	e009      	b.n	8005874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005860:	4b08      	ldr	r3, [pc, #32]	; (8005884 <_sbrk+0x64>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005866:	4b07      	ldr	r3, [pc, #28]	; (8005884 <_sbrk+0x64>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4413      	add	r3, r2
 800586e:	4a05      	ldr	r2, [pc, #20]	; (8005884 <_sbrk+0x64>)
 8005870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005872:	68fb      	ldr	r3, [r7, #12]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	24050000 	.word	0x24050000
 8005880:	00000400 	.word	0x00000400
 8005884:	24001ce8 	.word	0x24001ce8
 8005888:	24001d00 	.word	0x24001d00

0800588c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005890:	4b32      	ldr	r3, [pc, #200]	; (800595c <SystemInit+0xd0>)
 8005892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005896:	4a31      	ldr	r2, [pc, #196]	; (800595c <SystemInit+0xd0>)
 8005898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800589c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80058a0:	4b2f      	ldr	r3, [pc, #188]	; (8005960 <SystemInit+0xd4>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	2b06      	cmp	r3, #6
 80058aa:	d807      	bhi.n	80058bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80058ac:	4b2c      	ldr	r3, [pc, #176]	; (8005960 <SystemInit+0xd4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f023 030f 	bic.w	r3, r3, #15
 80058b4:	4a2a      	ldr	r2, [pc, #168]	; (8005960 <SystemInit+0xd4>)
 80058b6:	f043 0307 	orr.w	r3, r3, #7
 80058ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80058bc:	4b29      	ldr	r3, [pc, #164]	; (8005964 <SystemInit+0xd8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a28      	ldr	r2, [pc, #160]	; (8005964 <SystemInit+0xd8>)
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80058c8:	4b26      	ldr	r3, [pc, #152]	; (8005964 <SystemInit+0xd8>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80058ce:	4b25      	ldr	r3, [pc, #148]	; (8005964 <SystemInit+0xd8>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	4924      	ldr	r1, [pc, #144]	; (8005964 <SystemInit+0xd8>)
 80058d4:	4b24      	ldr	r3, [pc, #144]	; (8005968 <SystemInit+0xdc>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80058da:	4b21      	ldr	r3, [pc, #132]	; (8005960 <SystemInit+0xd4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80058e6:	4b1e      	ldr	r3, [pc, #120]	; (8005960 <SystemInit+0xd4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f023 030f 	bic.w	r3, r3, #15
 80058ee:	4a1c      	ldr	r2, [pc, #112]	; (8005960 <SystemInit+0xd4>)
 80058f0:	f043 0307 	orr.w	r3, r3, #7
 80058f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80058f6:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <SystemInit+0xd8>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80058fc:	4b19      	ldr	r3, [pc, #100]	; (8005964 <SystemInit+0xd8>)
 80058fe:	2200      	movs	r2, #0
 8005900:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005902:	4b18      	ldr	r3, [pc, #96]	; (8005964 <SystemInit+0xd8>)
 8005904:	2200      	movs	r2, #0
 8005906:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005908:	4b16      	ldr	r3, [pc, #88]	; (8005964 <SystemInit+0xd8>)
 800590a:	4a18      	ldr	r2, [pc, #96]	; (800596c <SystemInit+0xe0>)
 800590c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800590e:	4b15      	ldr	r3, [pc, #84]	; (8005964 <SystemInit+0xd8>)
 8005910:	4a17      	ldr	r2, [pc, #92]	; (8005970 <SystemInit+0xe4>)
 8005912:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005914:	4b13      	ldr	r3, [pc, #76]	; (8005964 <SystemInit+0xd8>)
 8005916:	4a17      	ldr	r2, [pc, #92]	; (8005974 <SystemInit+0xe8>)
 8005918:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800591a:	4b12      	ldr	r3, [pc, #72]	; (8005964 <SystemInit+0xd8>)
 800591c:	2200      	movs	r2, #0
 800591e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005920:	4b10      	ldr	r3, [pc, #64]	; (8005964 <SystemInit+0xd8>)
 8005922:	4a14      	ldr	r2, [pc, #80]	; (8005974 <SystemInit+0xe8>)
 8005924:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005926:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <SystemInit+0xd8>)
 8005928:	2200      	movs	r2, #0
 800592a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800592c:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <SystemInit+0xd8>)
 800592e:	4a11      	ldr	r2, [pc, #68]	; (8005974 <SystemInit+0xe8>)
 8005930:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005932:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <SystemInit+0xd8>)
 8005934:	2200      	movs	r2, #0
 8005936:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005938:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <SystemInit+0xd8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a09      	ldr	r2, [pc, #36]	; (8005964 <SystemInit+0xd8>)
 800593e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005942:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005944:	4b07      	ldr	r3, [pc, #28]	; (8005964 <SystemInit+0xd8>)
 8005946:	2200      	movs	r2, #0
 8005948:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800594a:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <SystemInit+0xec>)
 800594c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005950:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005952:	bf00      	nop
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	e000ed00 	.word	0xe000ed00
 8005960:	52002000 	.word	0x52002000
 8005964:	58024400 	.word	0x58024400
 8005968:	eaf6ed7f 	.word	0xeaf6ed7f
 800596c:	02020200 	.word	0x02020200
 8005970:	01ff0000 	.word	0x01ff0000
 8005974:	01010280 	.word	0x01010280
 8005978:	52004000 	.word	0x52004000

0800597c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800597c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80059b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005980:	f7ff ff84 	bl	800588c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005984:	480c      	ldr	r0, [pc, #48]	; (80059b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005986:	490d      	ldr	r1, [pc, #52]	; (80059bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005988:	4a0d      	ldr	r2, [pc, #52]	; (80059c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800598a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800598c:	e002      	b.n	8005994 <LoopCopyDataInit>

0800598e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800598e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005992:	3304      	adds	r3, #4

08005994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005998:	d3f9      	bcc.n	800598e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800599a:	4a0a      	ldr	r2, [pc, #40]	; (80059c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800599c:	4c0a      	ldr	r4, [pc, #40]	; (80059c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800599e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059a0:	e001      	b.n	80059a6 <LoopFillZerobss>

080059a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059a4:	3204      	adds	r2, #4

080059a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059a8:	d3fb      	bcc.n	80059a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80059aa:	f009 fa49 	bl	800ee40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059ae:	f7fa fe67 	bl	8000680 <main>
  bx  lr
 80059b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80059b4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80059b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80059bc:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80059c0:	0800f54c 	.word	0x0800f54c
  ldr r2, =_sbss
 80059c4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80059c8:	24001d00 	.word	0x24001d00

080059cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80059cc:	e7fe      	b.n	80059cc <ADC3_IRQHandler>
	...

080059d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059d6:	2003      	movs	r0, #3
 80059d8:	f000 f95c 	bl	8005c94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80059dc:	f003 ff34 	bl	8009848 <HAL_RCC_GetSysClockFreq>
 80059e0:	4602      	mov	r2, r0
 80059e2:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <HAL_Init+0x68>)
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	0a1b      	lsrs	r3, r3, #8
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	4913      	ldr	r1, [pc, #76]	; (8005a3c <HAL_Init+0x6c>)
 80059ee:	5ccb      	ldrb	r3, [r1, r3]
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	fa22 f303 	lsr.w	r3, r2, r3
 80059f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059fa:	4b0f      	ldr	r3, [pc, #60]	; (8005a38 <HAL_Init+0x68>)
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	4a0e      	ldr	r2, [pc, #56]	; (8005a3c <HAL_Init+0x6c>)
 8005a04:	5cd3      	ldrb	r3, [r2, r3]
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a10:	4a0b      	ldr	r2, [pc, #44]	; (8005a40 <HAL_Init+0x70>)
 8005a12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a14:	4a0b      	ldr	r2, [pc, #44]	; (8005a44 <HAL_Init+0x74>)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	f000 f814 	bl	8005a48 <HAL_InitTick>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e002      	b.n	8005a30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005a2a:	f7ff fb07 	bl	800503c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	58024400 	.word	0x58024400
 8005a3c:	0800f4f8 	.word	0x0800f4f8
 8005a40:	24000004 	.word	0x24000004
 8005a44:	24000000 	.word	0x24000000

08005a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005a50:	4b15      	ldr	r3, [pc, #84]	; (8005aa8 <HAL_InitTick+0x60>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e021      	b.n	8005aa0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005a5c:	4b13      	ldr	r3, [pc, #76]	; (8005aac <HAL_InitTick+0x64>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <HAL_InitTick+0x60>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	4619      	mov	r1, r3
 8005a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f941 	bl	8005cfa <HAL_SYSTICK_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e00e      	b.n	8005aa0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b0f      	cmp	r3, #15
 8005a86:	d80a      	bhi.n	8005a9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a88:	2200      	movs	r2, #0
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a90:	f000 f90b 	bl	8005caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a94:	4a06      	ldr	r2, [pc, #24]	; (8005ab0 <HAL_InitTick+0x68>)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e000      	b.n	8005aa0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	2400000c 	.word	0x2400000c
 8005aac:	24000000 	.word	0x24000000
 8005ab0:	24000008 	.word	0x24000008

08005ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005ab8:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <HAL_IncTick+0x20>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <HAL_IncTick+0x24>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	4a04      	ldr	r2, [pc, #16]	; (8005ad8 <HAL_IncTick+0x24>)
 8005ac6:	6013      	str	r3, [r2, #0]
}
 8005ac8:	bf00      	nop
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	2400000c 	.word	0x2400000c
 8005ad8:	24001cec 	.word	0x24001cec

08005adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  return uwTick;
 8005ae0:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <HAL_GetTick+0x14>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	24001cec 	.word	0x24001cec

08005af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b04:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <__NVIC_SetPriorityGrouping+0x40>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b10:	4013      	ands	r3, r2
 8005b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <__NVIC_SetPriorityGrouping+0x44>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b22:	4a04      	ldr	r2, [pc, #16]	; (8005b34 <__NVIC_SetPriorityGrouping+0x40>)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	60d3      	str	r3, [r2, #12]
}
 8005b28:	bf00      	nop
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	e000ed00 	.word	0xe000ed00
 8005b38:	05fa0000 	.word	0x05fa0000

08005b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b40:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <__NVIC_GetPriorityGrouping+0x18>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	0a1b      	lsrs	r3, r3, #8
 8005b46:	f003 0307 	and.w	r3, r3, #7
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	e000ed00 	.word	0xe000ed00

08005b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	db0b      	blt.n	8005b82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	f003 021f 	and.w	r2, r3, #31
 8005b70:	4907      	ldr	r1, [pc, #28]	; (8005b90 <__NVIC_EnableIRQ+0x38>)
 8005b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	2001      	movs	r0, #1
 8005b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	e000e100 	.word	0xe000e100

08005b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	6039      	str	r1, [r7, #0]
 8005b9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	db0a      	blt.n	8005bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	490c      	ldr	r1, [pc, #48]	; (8005be0 <__NVIC_SetPriority+0x4c>)
 8005bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bb2:	0112      	lsls	r2, r2, #4
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bbc:	e00a      	b.n	8005bd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	4908      	ldr	r1, [pc, #32]	; (8005be4 <__NVIC_SetPriority+0x50>)
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	3b04      	subs	r3, #4
 8005bcc:	0112      	lsls	r2, r2, #4
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	761a      	strb	r2, [r3, #24]
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	e000e100 	.word	0xe000e100
 8005be4:	e000ed00 	.word	0xe000ed00

08005be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b089      	sub	sp, #36	; 0x24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	f1c3 0307 	rsb	r3, r3, #7
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	bf28      	it	cs
 8005c06:	2304      	movcs	r3, #4
 8005c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	2b06      	cmp	r3, #6
 8005c10:	d902      	bls.n	8005c18 <NVIC_EncodePriority+0x30>
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	3b03      	subs	r3, #3
 8005c16:	e000      	b.n	8005c1a <NVIC_EncodePriority+0x32>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	43da      	mvns	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	401a      	ands	r2, r3
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3a:	43d9      	mvns	r1, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c40:	4313      	orrs	r3, r2
         );
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3724      	adds	r7, #36	; 0x24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
	...

08005c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c60:	d301      	bcc.n	8005c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c62:	2301      	movs	r3, #1
 8005c64:	e00f      	b.n	8005c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c66:	4a0a      	ldr	r2, [pc, #40]	; (8005c90 <SysTick_Config+0x40>)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c6e:	210f      	movs	r1, #15
 8005c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c74:	f7ff ff8e 	bl	8005b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c78:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <SysTick_Config+0x40>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c7e:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <SysTick_Config+0x40>)
 8005c80:	2207      	movs	r2, #7
 8005c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	e000e010 	.word	0xe000e010

08005c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff ff29 	bl	8005af4 <__NVIC_SetPriorityGrouping>
}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b086      	sub	sp, #24
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cb8:	f7ff ff40 	bl	8005b3c <__NVIC_GetPriorityGrouping>
 8005cbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	6978      	ldr	r0, [r7, #20]
 8005cc4:	f7ff ff90 	bl	8005be8 <NVIC_EncodePriority>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005cce:	4611      	mov	r1, r2
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff ff5f 	bl	8005b94 <__NVIC_SetPriority>
}
 8005cd6:	bf00      	nop
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b082      	sub	sp, #8
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ce8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff ff33 	bl	8005b58 <__NVIC_EnableIRQ>
}
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b082      	sub	sp, #8
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff ffa4 	bl	8005c50 <SysTick_Config>
 8005d08:	4603      	mov	r3, r0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d1c:	f7ff fede 	bl	8005adc <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e314      	b.n	8006356 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a66      	ldr	r2, [pc, #408]	; (8005ecc <HAL_DMA_Init+0x1b8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d04a      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a65      	ldr	r2, [pc, #404]	; (8005ed0 <HAL_DMA_Init+0x1bc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d045      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a63      	ldr	r2, [pc, #396]	; (8005ed4 <HAL_DMA_Init+0x1c0>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d040      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a62      	ldr	r2, [pc, #392]	; (8005ed8 <HAL_DMA_Init+0x1c4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d03b      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a60      	ldr	r2, [pc, #384]	; (8005edc <HAL_DMA_Init+0x1c8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d036      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a5f      	ldr	r2, [pc, #380]	; (8005ee0 <HAL_DMA_Init+0x1cc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d031      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a5d      	ldr	r2, [pc, #372]	; (8005ee4 <HAL_DMA_Init+0x1d0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d02c      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a5c      	ldr	r2, [pc, #368]	; (8005ee8 <HAL_DMA_Init+0x1d4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d027      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a5a      	ldr	r2, [pc, #360]	; (8005eec <HAL_DMA_Init+0x1d8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d022      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a59      	ldr	r2, [pc, #356]	; (8005ef0 <HAL_DMA_Init+0x1dc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d01d      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a57      	ldr	r2, [pc, #348]	; (8005ef4 <HAL_DMA_Init+0x1e0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d018      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a56      	ldr	r2, [pc, #344]	; (8005ef8 <HAL_DMA_Init+0x1e4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d013      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a54      	ldr	r2, [pc, #336]	; (8005efc <HAL_DMA_Init+0x1e8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00e      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a53      	ldr	r2, [pc, #332]	; (8005f00 <HAL_DMA_Init+0x1ec>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d009      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a51      	ldr	r2, [pc, #324]	; (8005f04 <HAL_DMA_Init+0x1f0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d004      	beq.n	8005dcc <HAL_DMA_Init+0xb8>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a50      	ldr	r2, [pc, #320]	; (8005f08 <HAL_DMA_Init+0x1f4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d101      	bne.n	8005dd0 <HAL_DMA_Init+0xbc>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e000      	b.n	8005dd2 <HAL_DMA_Init+0xbe>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 813c 	beq.w	8006050 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a37      	ldr	r2, [pc, #220]	; (8005ecc <HAL_DMA_Init+0x1b8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d04a      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a36      	ldr	r2, [pc, #216]	; (8005ed0 <HAL_DMA_Init+0x1bc>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d045      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a34      	ldr	r2, [pc, #208]	; (8005ed4 <HAL_DMA_Init+0x1c0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d040      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a33      	ldr	r2, [pc, #204]	; (8005ed8 <HAL_DMA_Init+0x1c4>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d03b      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a31      	ldr	r2, [pc, #196]	; (8005edc <HAL_DMA_Init+0x1c8>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d036      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a30      	ldr	r2, [pc, #192]	; (8005ee0 <HAL_DMA_Init+0x1cc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d031      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a2e      	ldr	r2, [pc, #184]	; (8005ee4 <HAL_DMA_Init+0x1d0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d02c      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a2d      	ldr	r2, [pc, #180]	; (8005ee8 <HAL_DMA_Init+0x1d4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d027      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a2b      	ldr	r2, [pc, #172]	; (8005eec <HAL_DMA_Init+0x1d8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d022      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a2a      	ldr	r2, [pc, #168]	; (8005ef0 <HAL_DMA_Init+0x1dc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d01d      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a28      	ldr	r2, [pc, #160]	; (8005ef4 <HAL_DMA_Init+0x1e0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d018      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a27      	ldr	r2, [pc, #156]	; (8005ef8 <HAL_DMA_Init+0x1e4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d013      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a25      	ldr	r2, [pc, #148]	; (8005efc <HAL_DMA_Init+0x1e8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00e      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a24      	ldr	r2, [pc, #144]	; (8005f00 <HAL_DMA_Init+0x1ec>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d009      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a22      	ldr	r2, [pc, #136]	; (8005f04 <HAL_DMA_Init+0x1f0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d004      	beq.n	8005e88 <HAL_DMA_Init+0x174>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a21      	ldr	r2, [pc, #132]	; (8005f08 <HAL_DMA_Init+0x1f4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d108      	bne.n	8005e9a <HAL_DMA_Init+0x186>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	e007      	b.n	8005eaa <HAL_DMA_Init+0x196>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0201 	bic.w	r2, r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005eaa:	e02f      	b.n	8005f0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eac:	f7ff fe16 	bl	8005adc <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b05      	cmp	r3, #5
 8005eb8:	d928      	bls.n	8005f0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2203      	movs	r2, #3
 8005ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e244      	b.n	8006356 <HAL_DMA_Init+0x642>
 8005ecc:	40020010 	.word	0x40020010
 8005ed0:	40020028 	.word	0x40020028
 8005ed4:	40020040 	.word	0x40020040
 8005ed8:	40020058 	.word	0x40020058
 8005edc:	40020070 	.word	0x40020070
 8005ee0:	40020088 	.word	0x40020088
 8005ee4:	400200a0 	.word	0x400200a0
 8005ee8:	400200b8 	.word	0x400200b8
 8005eec:	40020410 	.word	0x40020410
 8005ef0:	40020428 	.word	0x40020428
 8005ef4:	40020440 	.word	0x40020440
 8005ef8:	40020458 	.word	0x40020458
 8005efc:	40020470 	.word	0x40020470
 8005f00:	40020488 	.word	0x40020488
 8005f04:	400204a0 	.word	0x400204a0
 8005f08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1c8      	bne.n	8005eac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4b84      	ldr	r3, [pc, #528]	; (8006138 <HAL_DMA_Init+0x424>)
 8005f26:	4013      	ands	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d107      	bne.n	8005f70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b28      	cmp	r3, #40	; 0x28
 8005f76:	d903      	bls.n	8005f80 <HAL_DMA_Init+0x26c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8005f7e:	d91f      	bls.n	8005fc0 <HAL_DMA_Init+0x2ac>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b3e      	cmp	r3, #62	; 0x3e
 8005f86:	d903      	bls.n	8005f90 <HAL_DMA_Init+0x27c>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2b42      	cmp	r3, #66	; 0x42
 8005f8e:	d917      	bls.n	8005fc0 <HAL_DMA_Init+0x2ac>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b46      	cmp	r3, #70	; 0x46
 8005f96:	d903      	bls.n	8005fa0 <HAL_DMA_Init+0x28c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b48      	cmp	r3, #72	; 0x48
 8005f9e:	d90f      	bls.n	8005fc0 <HAL_DMA_Init+0x2ac>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b4e      	cmp	r3, #78	; 0x4e
 8005fa6:	d903      	bls.n	8005fb0 <HAL_DMA_Init+0x29c>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2b52      	cmp	r3, #82	; 0x52
 8005fae:	d907      	bls.n	8005fc0 <HAL_DMA_Init+0x2ac>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b73      	cmp	r3, #115	; 0x73
 8005fb6:	d905      	bls.n	8005fc4 <HAL_DMA_Init+0x2b0>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b77      	cmp	r3, #119	; 0x77
 8005fbe:	d801      	bhi.n	8005fc4 <HAL_DMA_Init+0x2b0>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <HAL_DMA_Init+0x2b2>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fd0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f023 0307 	bic.w	r3, r3, #7
 8005fe8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d117      	bne.n	800602c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00e      	beq.n	800602c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f002 fb30 	bl	8008674 <DMA_CheckFifoParam>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d008      	beq.n	800602c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2240      	movs	r2, #64	; 0x40
 800601e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e194      	b.n	8006356 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f002 fa6b 	bl	8008510 <DMA_CalcBaseAndBitshift>
 800603a:	4603      	mov	r3, r0
 800603c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	223f      	movs	r2, #63	; 0x3f
 8006048:	409a      	lsls	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	609a      	str	r2, [r3, #8]
 800604e:	e0ca      	b.n	80061e6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a39      	ldr	r2, [pc, #228]	; (800613c <HAL_DMA_Init+0x428>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d022      	beq.n	80060a0 <HAL_DMA_Init+0x38c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a38      	ldr	r2, [pc, #224]	; (8006140 <HAL_DMA_Init+0x42c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d01d      	beq.n	80060a0 <HAL_DMA_Init+0x38c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a36      	ldr	r2, [pc, #216]	; (8006144 <HAL_DMA_Init+0x430>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d018      	beq.n	80060a0 <HAL_DMA_Init+0x38c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a35      	ldr	r2, [pc, #212]	; (8006148 <HAL_DMA_Init+0x434>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d013      	beq.n	80060a0 <HAL_DMA_Init+0x38c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a33      	ldr	r2, [pc, #204]	; (800614c <HAL_DMA_Init+0x438>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00e      	beq.n	80060a0 <HAL_DMA_Init+0x38c>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a32      	ldr	r2, [pc, #200]	; (8006150 <HAL_DMA_Init+0x43c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d009      	beq.n	80060a0 <HAL_DMA_Init+0x38c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a30      	ldr	r2, [pc, #192]	; (8006154 <HAL_DMA_Init+0x440>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d004      	beq.n	80060a0 <HAL_DMA_Init+0x38c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a2f      	ldr	r2, [pc, #188]	; (8006158 <HAL_DMA_Init+0x444>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d101      	bne.n	80060a4 <HAL_DMA_Init+0x390>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <HAL_DMA_Init+0x392>
 80060a4:	2300      	movs	r3, #0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 8094 	beq.w	80061d4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a22      	ldr	r2, [pc, #136]	; (800613c <HAL_DMA_Init+0x428>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d021      	beq.n	80060fa <HAL_DMA_Init+0x3e6>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a21      	ldr	r2, [pc, #132]	; (8006140 <HAL_DMA_Init+0x42c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d01c      	beq.n	80060fa <HAL_DMA_Init+0x3e6>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1f      	ldr	r2, [pc, #124]	; (8006144 <HAL_DMA_Init+0x430>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d017      	beq.n	80060fa <HAL_DMA_Init+0x3e6>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <HAL_DMA_Init+0x434>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d012      	beq.n	80060fa <HAL_DMA_Init+0x3e6>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1c      	ldr	r2, [pc, #112]	; (800614c <HAL_DMA_Init+0x438>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00d      	beq.n	80060fa <HAL_DMA_Init+0x3e6>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1b      	ldr	r2, [pc, #108]	; (8006150 <HAL_DMA_Init+0x43c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d008      	beq.n	80060fa <HAL_DMA_Init+0x3e6>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a19      	ldr	r2, [pc, #100]	; (8006154 <HAL_DMA_Init+0x440>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d003      	beq.n	80060fa <HAL_DMA_Init+0x3e6>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a18      	ldr	r2, [pc, #96]	; (8006158 <HAL_DMA_Init+0x444>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	4b11      	ldr	r3, [pc, #68]	; (800615c <HAL_DMA_Init+0x448>)
 8006118:	4013      	ands	r3, r2
 800611a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	d01d      	beq.n	8006160 <HAL_DMA_Init+0x44c>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b80      	cmp	r3, #128	; 0x80
 800612a:	d102      	bne.n	8006132 <HAL_DMA_Init+0x41e>
 800612c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006130:	e017      	b.n	8006162 <HAL_DMA_Init+0x44e>
 8006132:	2300      	movs	r3, #0
 8006134:	e015      	b.n	8006162 <HAL_DMA_Init+0x44e>
 8006136:	bf00      	nop
 8006138:	fe10803f 	.word	0xfe10803f
 800613c:	58025408 	.word	0x58025408
 8006140:	5802541c 	.word	0x5802541c
 8006144:	58025430 	.word	0x58025430
 8006148:	58025444 	.word	0x58025444
 800614c:	58025458 	.word	0x58025458
 8006150:	5802546c 	.word	0x5802546c
 8006154:	58025480 	.word	0x58025480
 8006158:	58025494 	.word	0x58025494
 800615c:	fffe000f 	.word	0xfffe000f
 8006160:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	68d2      	ldr	r2, [r2, #12]
 8006166:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006168:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006170:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006178:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006180:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006188:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006190:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4313      	orrs	r3, r2
 8006196:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	4b6e      	ldr	r3, [pc, #440]	; (8006360 <HAL_DMA_Init+0x64c>)
 80061a8:	4413      	add	r3, r2
 80061aa:	4a6e      	ldr	r2, [pc, #440]	; (8006364 <HAL_DMA_Init+0x650>)
 80061ac:	fba2 2303 	umull	r2, r3, r2, r3
 80061b0:	091b      	lsrs	r3, r3, #4
 80061b2:	009a      	lsls	r2, r3, #2
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f002 f9a9 	bl	8008510 <DMA_CalcBaseAndBitshift>
 80061be:	4603      	mov	r3, r0
 80061c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c6:	f003 031f 	and.w	r3, r3, #31
 80061ca:	2201      	movs	r2, #1
 80061cc:	409a      	lsls	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	e008      	b.n	80061e6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2240      	movs	r2, #64	; 0x40
 80061d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2203      	movs	r2, #3
 80061de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e0b7      	b.n	8006356 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a5f      	ldr	r2, [pc, #380]	; (8006368 <HAL_DMA_Init+0x654>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d072      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a5d      	ldr	r2, [pc, #372]	; (800636c <HAL_DMA_Init+0x658>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d06d      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a5c      	ldr	r2, [pc, #368]	; (8006370 <HAL_DMA_Init+0x65c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d068      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a5a      	ldr	r2, [pc, #360]	; (8006374 <HAL_DMA_Init+0x660>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d063      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a59      	ldr	r2, [pc, #356]	; (8006378 <HAL_DMA_Init+0x664>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d05e      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a57      	ldr	r2, [pc, #348]	; (800637c <HAL_DMA_Init+0x668>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d059      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a56      	ldr	r2, [pc, #344]	; (8006380 <HAL_DMA_Init+0x66c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d054      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a54      	ldr	r2, [pc, #336]	; (8006384 <HAL_DMA_Init+0x670>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d04f      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a53      	ldr	r2, [pc, #332]	; (8006388 <HAL_DMA_Init+0x674>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d04a      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a51      	ldr	r2, [pc, #324]	; (800638c <HAL_DMA_Init+0x678>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d045      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a50      	ldr	r2, [pc, #320]	; (8006390 <HAL_DMA_Init+0x67c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d040      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a4e      	ldr	r2, [pc, #312]	; (8006394 <HAL_DMA_Init+0x680>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d03b      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a4d      	ldr	r2, [pc, #308]	; (8006398 <HAL_DMA_Init+0x684>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d036      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a4b      	ldr	r2, [pc, #300]	; (800639c <HAL_DMA_Init+0x688>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d031      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a4a      	ldr	r2, [pc, #296]	; (80063a0 <HAL_DMA_Init+0x68c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d02c      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a48      	ldr	r2, [pc, #288]	; (80063a4 <HAL_DMA_Init+0x690>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d027      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a47      	ldr	r2, [pc, #284]	; (80063a8 <HAL_DMA_Init+0x694>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d022      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a45      	ldr	r2, [pc, #276]	; (80063ac <HAL_DMA_Init+0x698>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d01d      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a44      	ldr	r2, [pc, #272]	; (80063b0 <HAL_DMA_Init+0x69c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d018      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a42      	ldr	r2, [pc, #264]	; (80063b4 <HAL_DMA_Init+0x6a0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d013      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a41      	ldr	r2, [pc, #260]	; (80063b8 <HAL_DMA_Init+0x6a4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00e      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a3f      	ldr	r2, [pc, #252]	; (80063bc <HAL_DMA_Init+0x6a8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d009      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a3e      	ldr	r2, [pc, #248]	; (80063c0 <HAL_DMA_Init+0x6ac>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d004      	beq.n	80062d6 <HAL_DMA_Init+0x5c2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a3c      	ldr	r2, [pc, #240]	; (80063c4 <HAL_DMA_Init+0x6b0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d101      	bne.n	80062da <HAL_DMA_Init+0x5c6>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <HAL_DMA_Init+0x5c8>
 80062da:	2300      	movs	r3, #0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d032      	beq.n	8006346 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f002 fa43 	bl	800876c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	2b80      	cmp	r3, #128	; 0x80
 80062ec:	d102      	bne.n	80062f4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006308:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d010      	beq.n	8006334 <HAL_DMA_Init+0x620>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b08      	cmp	r3, #8
 8006318:	d80c      	bhi.n	8006334 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f002 fac0 	bl	80088a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006330:	605a      	str	r2, [r3, #4]
 8006332:	e008      	b.n	8006346 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	a7fdabf8 	.word	0xa7fdabf8
 8006364:	cccccccd 	.word	0xcccccccd
 8006368:	40020010 	.word	0x40020010
 800636c:	40020028 	.word	0x40020028
 8006370:	40020040 	.word	0x40020040
 8006374:	40020058 	.word	0x40020058
 8006378:	40020070 	.word	0x40020070
 800637c:	40020088 	.word	0x40020088
 8006380:	400200a0 	.word	0x400200a0
 8006384:	400200b8 	.word	0x400200b8
 8006388:	40020410 	.word	0x40020410
 800638c:	40020428 	.word	0x40020428
 8006390:	40020440 	.word	0x40020440
 8006394:	40020458 	.word	0x40020458
 8006398:	40020470 	.word	0x40020470
 800639c:	40020488 	.word	0x40020488
 80063a0:	400204a0 	.word	0x400204a0
 80063a4:	400204b8 	.word	0x400204b8
 80063a8:	58025408 	.word	0x58025408
 80063ac:	5802541c 	.word	0x5802541c
 80063b0:	58025430 	.word	0x58025430
 80063b4:	58025444 	.word	0x58025444
 80063b8:	58025458 	.word	0x58025458
 80063bc:	5802546c 	.word	0x5802546c
 80063c0:	58025480 	.word	0x58025480
 80063c4:	58025494 	.word	0x58025494

080063c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e226      	b.n	8006832 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_DMA_Start_IT+0x2a>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e21f      	b.n	8006832 <HAL_DMA_Start_IT+0x46a>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b01      	cmp	r3, #1
 8006404:	f040 820a 	bne.w	800681c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a68      	ldr	r2, [pc, #416]	; (80065bc <HAL_DMA_Start_IT+0x1f4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d04a      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a66      	ldr	r2, [pc, #408]	; (80065c0 <HAL_DMA_Start_IT+0x1f8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d045      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a65      	ldr	r2, [pc, #404]	; (80065c4 <HAL_DMA_Start_IT+0x1fc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d040      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a63      	ldr	r2, [pc, #396]	; (80065c8 <HAL_DMA_Start_IT+0x200>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d03b      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a62      	ldr	r2, [pc, #392]	; (80065cc <HAL_DMA_Start_IT+0x204>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d036      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a60      	ldr	r2, [pc, #384]	; (80065d0 <HAL_DMA_Start_IT+0x208>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d031      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a5f      	ldr	r2, [pc, #380]	; (80065d4 <HAL_DMA_Start_IT+0x20c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d02c      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a5d      	ldr	r2, [pc, #372]	; (80065d8 <HAL_DMA_Start_IT+0x210>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d027      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a5c      	ldr	r2, [pc, #368]	; (80065dc <HAL_DMA_Start_IT+0x214>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d022      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a5a      	ldr	r2, [pc, #360]	; (80065e0 <HAL_DMA_Start_IT+0x218>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01d      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a59      	ldr	r2, [pc, #356]	; (80065e4 <HAL_DMA_Start_IT+0x21c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a57      	ldr	r2, [pc, #348]	; (80065e8 <HAL_DMA_Start_IT+0x220>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a56      	ldr	r2, [pc, #344]	; (80065ec <HAL_DMA_Start_IT+0x224>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a54      	ldr	r2, [pc, #336]	; (80065f0 <HAL_DMA_Start_IT+0x228>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a53      	ldr	r2, [pc, #332]	; (80065f4 <HAL_DMA_Start_IT+0x22c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_DMA_Start_IT+0xee>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a51      	ldr	r2, [pc, #324]	; (80065f8 <HAL_DMA_Start_IT+0x230>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d108      	bne.n	80064c8 <HAL_DMA_Start_IT+0x100>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0201 	bic.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	e007      	b.n	80064d8 <HAL_DMA_Start_IT+0x110>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0201 	bic.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f001 fe6a 	bl	80081b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a34      	ldr	r2, [pc, #208]	; (80065bc <HAL_DMA_Start_IT+0x1f4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d04a      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a33      	ldr	r2, [pc, #204]	; (80065c0 <HAL_DMA_Start_IT+0x1f8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d045      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a31      	ldr	r2, [pc, #196]	; (80065c4 <HAL_DMA_Start_IT+0x1fc>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d040      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a30      	ldr	r2, [pc, #192]	; (80065c8 <HAL_DMA_Start_IT+0x200>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d03b      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a2e      	ldr	r2, [pc, #184]	; (80065cc <HAL_DMA_Start_IT+0x204>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d036      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a2d      	ldr	r2, [pc, #180]	; (80065d0 <HAL_DMA_Start_IT+0x208>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d031      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a2b      	ldr	r2, [pc, #172]	; (80065d4 <HAL_DMA_Start_IT+0x20c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d02c      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a2a      	ldr	r2, [pc, #168]	; (80065d8 <HAL_DMA_Start_IT+0x210>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d027      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a28      	ldr	r2, [pc, #160]	; (80065dc <HAL_DMA_Start_IT+0x214>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d022      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a27      	ldr	r2, [pc, #156]	; (80065e0 <HAL_DMA_Start_IT+0x218>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d01d      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a25      	ldr	r2, [pc, #148]	; (80065e4 <HAL_DMA_Start_IT+0x21c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d018      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a24      	ldr	r2, [pc, #144]	; (80065e8 <HAL_DMA_Start_IT+0x220>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d013      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a22      	ldr	r2, [pc, #136]	; (80065ec <HAL_DMA_Start_IT+0x224>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00e      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a21      	ldr	r2, [pc, #132]	; (80065f0 <HAL_DMA_Start_IT+0x228>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d009      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1f      	ldr	r2, [pc, #124]	; (80065f4 <HAL_DMA_Start_IT+0x22c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d004      	beq.n	8006584 <HAL_DMA_Start_IT+0x1bc>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a1e      	ldr	r2, [pc, #120]	; (80065f8 <HAL_DMA_Start_IT+0x230>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d101      	bne.n	8006588 <HAL_DMA_Start_IT+0x1c0>
 8006584:	2301      	movs	r3, #1
 8006586:	e000      	b.n	800658a <HAL_DMA_Start_IT+0x1c2>
 8006588:	2300      	movs	r3, #0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d036      	beq.n	80065fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f023 021e 	bic.w	r2, r3, #30
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0216 	orr.w	r2, r2, #22
 80065a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d03e      	beq.n	8006628 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 0208 	orr.w	r2, r2, #8
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	e035      	b.n	8006628 <HAL_DMA_Start_IT+0x260>
 80065bc:	40020010 	.word	0x40020010
 80065c0:	40020028 	.word	0x40020028
 80065c4:	40020040 	.word	0x40020040
 80065c8:	40020058 	.word	0x40020058
 80065cc:	40020070 	.word	0x40020070
 80065d0:	40020088 	.word	0x40020088
 80065d4:	400200a0 	.word	0x400200a0
 80065d8:	400200b8 	.word	0x400200b8
 80065dc:	40020410 	.word	0x40020410
 80065e0:	40020428 	.word	0x40020428
 80065e4:	40020440 	.word	0x40020440
 80065e8:	40020458 	.word	0x40020458
 80065ec:	40020470 	.word	0x40020470
 80065f0:	40020488 	.word	0x40020488
 80065f4:	400204a0 	.word	0x400204a0
 80065f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f023 020e 	bic.w	r2, r3, #14
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 020a 	orr.w	r2, r2, #10
 800660e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0204 	orr.w	r2, r2, #4
 8006626:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a83      	ldr	r2, [pc, #524]	; (800683c <HAL_DMA_Start_IT+0x474>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d072      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a82      	ldr	r2, [pc, #520]	; (8006840 <HAL_DMA_Start_IT+0x478>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d06d      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a80      	ldr	r2, [pc, #512]	; (8006844 <HAL_DMA_Start_IT+0x47c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d068      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a7f      	ldr	r2, [pc, #508]	; (8006848 <HAL_DMA_Start_IT+0x480>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d063      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a7d      	ldr	r2, [pc, #500]	; (800684c <HAL_DMA_Start_IT+0x484>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d05e      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a7c      	ldr	r2, [pc, #496]	; (8006850 <HAL_DMA_Start_IT+0x488>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d059      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a7a      	ldr	r2, [pc, #488]	; (8006854 <HAL_DMA_Start_IT+0x48c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d054      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a79      	ldr	r2, [pc, #484]	; (8006858 <HAL_DMA_Start_IT+0x490>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d04f      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a77      	ldr	r2, [pc, #476]	; (800685c <HAL_DMA_Start_IT+0x494>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d04a      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a76      	ldr	r2, [pc, #472]	; (8006860 <HAL_DMA_Start_IT+0x498>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d045      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a74      	ldr	r2, [pc, #464]	; (8006864 <HAL_DMA_Start_IT+0x49c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d040      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a73      	ldr	r2, [pc, #460]	; (8006868 <HAL_DMA_Start_IT+0x4a0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d03b      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a71      	ldr	r2, [pc, #452]	; (800686c <HAL_DMA_Start_IT+0x4a4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d036      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a70      	ldr	r2, [pc, #448]	; (8006870 <HAL_DMA_Start_IT+0x4a8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d031      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a6e      	ldr	r2, [pc, #440]	; (8006874 <HAL_DMA_Start_IT+0x4ac>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d02c      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a6d      	ldr	r2, [pc, #436]	; (8006878 <HAL_DMA_Start_IT+0x4b0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d027      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a6b      	ldr	r2, [pc, #428]	; (800687c <HAL_DMA_Start_IT+0x4b4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d022      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a6a      	ldr	r2, [pc, #424]	; (8006880 <HAL_DMA_Start_IT+0x4b8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d01d      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a68      	ldr	r2, [pc, #416]	; (8006884 <HAL_DMA_Start_IT+0x4bc>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d018      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a67      	ldr	r2, [pc, #412]	; (8006888 <HAL_DMA_Start_IT+0x4c0>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d013      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a65      	ldr	r2, [pc, #404]	; (800688c <HAL_DMA_Start_IT+0x4c4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00e      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a64      	ldr	r2, [pc, #400]	; (8006890 <HAL_DMA_Start_IT+0x4c8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d009      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a62      	ldr	r2, [pc, #392]	; (8006894 <HAL_DMA_Start_IT+0x4cc>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d004      	beq.n	8006718 <HAL_DMA_Start_IT+0x350>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a61      	ldr	r2, [pc, #388]	; (8006898 <HAL_DMA_Start_IT+0x4d0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d101      	bne.n	800671c <HAL_DMA_Start_IT+0x354>
 8006718:	2301      	movs	r3, #1
 800671a:	e000      	b.n	800671e <HAL_DMA_Start_IT+0x356>
 800671c:	2300      	movs	r3, #0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d01a      	beq.n	8006758 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d007      	beq.n	8006740 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800673e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006744:	2b00      	cmp	r3, #0
 8006746:	d007      	beq.n	8006758 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006756:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a37      	ldr	r2, [pc, #220]	; (800683c <HAL_DMA_Start_IT+0x474>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d04a      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a36      	ldr	r2, [pc, #216]	; (8006840 <HAL_DMA_Start_IT+0x478>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d045      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a34      	ldr	r2, [pc, #208]	; (8006844 <HAL_DMA_Start_IT+0x47c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d040      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a33      	ldr	r2, [pc, #204]	; (8006848 <HAL_DMA_Start_IT+0x480>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d03b      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a31      	ldr	r2, [pc, #196]	; (800684c <HAL_DMA_Start_IT+0x484>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d036      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a30      	ldr	r2, [pc, #192]	; (8006850 <HAL_DMA_Start_IT+0x488>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d031      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a2e      	ldr	r2, [pc, #184]	; (8006854 <HAL_DMA_Start_IT+0x48c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d02c      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a2d      	ldr	r2, [pc, #180]	; (8006858 <HAL_DMA_Start_IT+0x490>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d027      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a2b      	ldr	r2, [pc, #172]	; (800685c <HAL_DMA_Start_IT+0x494>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d022      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a2a      	ldr	r2, [pc, #168]	; (8006860 <HAL_DMA_Start_IT+0x498>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d01d      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a28      	ldr	r2, [pc, #160]	; (8006864 <HAL_DMA_Start_IT+0x49c>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d018      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a27      	ldr	r2, [pc, #156]	; (8006868 <HAL_DMA_Start_IT+0x4a0>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d013      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a25      	ldr	r2, [pc, #148]	; (800686c <HAL_DMA_Start_IT+0x4a4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00e      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a24      	ldr	r2, [pc, #144]	; (8006870 <HAL_DMA_Start_IT+0x4a8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d009      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a22      	ldr	r2, [pc, #136]	; (8006874 <HAL_DMA_Start_IT+0x4ac>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d004      	beq.n	80067f8 <HAL_DMA_Start_IT+0x430>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a21      	ldr	r2, [pc, #132]	; (8006878 <HAL_DMA_Start_IT+0x4b0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d108      	bne.n	800680a <HAL_DMA_Start_IT+0x442>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	e012      	b.n	8006830 <HAL_DMA_Start_IT+0x468>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0201 	orr.w	r2, r2, #1
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	e009      	b.n	8006830 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006822:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006830:	7dfb      	ldrb	r3, [r7, #23]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	40020010 	.word	0x40020010
 8006840:	40020028 	.word	0x40020028
 8006844:	40020040 	.word	0x40020040
 8006848:	40020058 	.word	0x40020058
 800684c:	40020070 	.word	0x40020070
 8006850:	40020088 	.word	0x40020088
 8006854:	400200a0 	.word	0x400200a0
 8006858:	400200b8 	.word	0x400200b8
 800685c:	40020410 	.word	0x40020410
 8006860:	40020428 	.word	0x40020428
 8006864:	40020440 	.word	0x40020440
 8006868:	40020458 	.word	0x40020458
 800686c:	40020470 	.word	0x40020470
 8006870:	40020488 	.word	0x40020488
 8006874:	400204a0 	.word	0x400204a0
 8006878:	400204b8 	.word	0x400204b8
 800687c:	58025408 	.word	0x58025408
 8006880:	5802541c 	.word	0x5802541c
 8006884:	58025430 	.word	0x58025430
 8006888:	58025444 	.word	0x58025444
 800688c:	58025458 	.word	0x58025458
 8006890:	5802546c 	.word	0x5802546c
 8006894:	58025480 	.word	0x58025480
 8006898:	58025494 	.word	0x58025494

0800689c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80068a4:	f7ff f91a 	bl	8005adc <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e2dc      	b.n	8006e6e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d008      	beq.n	80068d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2280      	movs	r2, #128	; 0x80
 80068c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e2cd      	b.n	8006e6e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a76      	ldr	r2, [pc, #472]	; (8006ab0 <HAL_DMA_Abort+0x214>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d04a      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a74      	ldr	r2, [pc, #464]	; (8006ab4 <HAL_DMA_Abort+0x218>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d045      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a73      	ldr	r2, [pc, #460]	; (8006ab8 <HAL_DMA_Abort+0x21c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d040      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a71      	ldr	r2, [pc, #452]	; (8006abc <HAL_DMA_Abort+0x220>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d03b      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a70      	ldr	r2, [pc, #448]	; (8006ac0 <HAL_DMA_Abort+0x224>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d036      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a6e      	ldr	r2, [pc, #440]	; (8006ac4 <HAL_DMA_Abort+0x228>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d031      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a6d      	ldr	r2, [pc, #436]	; (8006ac8 <HAL_DMA_Abort+0x22c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d02c      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a6b      	ldr	r2, [pc, #428]	; (8006acc <HAL_DMA_Abort+0x230>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d027      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a6a      	ldr	r2, [pc, #424]	; (8006ad0 <HAL_DMA_Abort+0x234>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d022      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a68      	ldr	r2, [pc, #416]	; (8006ad4 <HAL_DMA_Abort+0x238>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d01d      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a67      	ldr	r2, [pc, #412]	; (8006ad8 <HAL_DMA_Abort+0x23c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d018      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a65      	ldr	r2, [pc, #404]	; (8006adc <HAL_DMA_Abort+0x240>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d013      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a64      	ldr	r2, [pc, #400]	; (8006ae0 <HAL_DMA_Abort+0x244>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00e      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a62      	ldr	r2, [pc, #392]	; (8006ae4 <HAL_DMA_Abort+0x248>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d009      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a61      	ldr	r2, [pc, #388]	; (8006ae8 <HAL_DMA_Abort+0x24c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d004      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a5f      	ldr	r2, [pc, #380]	; (8006aec <HAL_DMA_Abort+0x250>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d101      	bne.n	8006976 <HAL_DMA_Abort+0xda>
 8006972:	2301      	movs	r3, #1
 8006974:	e000      	b.n	8006978 <HAL_DMA_Abort+0xdc>
 8006976:	2300      	movs	r3, #0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d013      	beq.n	80069a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 021e 	bic.w	r2, r2, #30
 800698a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695a      	ldr	r2, [r3, #20]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800699a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	e00a      	b.n	80069ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 020e 	bic.w	r2, r2, #14
 80069b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a3c      	ldr	r2, [pc, #240]	; (8006ab0 <HAL_DMA_Abort+0x214>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d072      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a3a      	ldr	r2, [pc, #232]	; (8006ab4 <HAL_DMA_Abort+0x218>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d06d      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a39      	ldr	r2, [pc, #228]	; (8006ab8 <HAL_DMA_Abort+0x21c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d068      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a37      	ldr	r2, [pc, #220]	; (8006abc <HAL_DMA_Abort+0x220>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d063      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a36      	ldr	r2, [pc, #216]	; (8006ac0 <HAL_DMA_Abort+0x224>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d05e      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a34      	ldr	r2, [pc, #208]	; (8006ac4 <HAL_DMA_Abort+0x228>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d059      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a33      	ldr	r2, [pc, #204]	; (8006ac8 <HAL_DMA_Abort+0x22c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d054      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a31      	ldr	r2, [pc, #196]	; (8006acc <HAL_DMA_Abort+0x230>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d04f      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a30      	ldr	r2, [pc, #192]	; (8006ad0 <HAL_DMA_Abort+0x234>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d04a      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2e      	ldr	r2, [pc, #184]	; (8006ad4 <HAL_DMA_Abort+0x238>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d045      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a2d      	ldr	r2, [pc, #180]	; (8006ad8 <HAL_DMA_Abort+0x23c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d040      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a2b      	ldr	r2, [pc, #172]	; (8006adc <HAL_DMA_Abort+0x240>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d03b      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a2a      	ldr	r2, [pc, #168]	; (8006ae0 <HAL_DMA_Abort+0x244>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d036      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a28      	ldr	r2, [pc, #160]	; (8006ae4 <HAL_DMA_Abort+0x248>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d031      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a27      	ldr	r2, [pc, #156]	; (8006ae8 <HAL_DMA_Abort+0x24c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d02c      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a25      	ldr	r2, [pc, #148]	; (8006aec <HAL_DMA_Abort+0x250>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d027      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a24      	ldr	r2, [pc, #144]	; (8006af0 <HAL_DMA_Abort+0x254>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d022      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a22      	ldr	r2, [pc, #136]	; (8006af4 <HAL_DMA_Abort+0x258>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d01d      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a21      	ldr	r2, [pc, #132]	; (8006af8 <HAL_DMA_Abort+0x25c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d018      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a1f      	ldr	r2, [pc, #124]	; (8006afc <HAL_DMA_Abort+0x260>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d013      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a1e      	ldr	r2, [pc, #120]	; (8006b00 <HAL_DMA_Abort+0x264>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00e      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1c      	ldr	r2, [pc, #112]	; (8006b04 <HAL_DMA_Abort+0x268>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d009      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1b      	ldr	r2, [pc, #108]	; (8006b08 <HAL_DMA_Abort+0x26c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d004      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <HAL_DMA_Abort+0x270>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d132      	bne.n	8006b10 <HAL_DMA_Abort+0x274>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e031      	b.n	8006b12 <HAL_DMA_Abort+0x276>
 8006aae:	bf00      	nop
 8006ab0:	40020010 	.word	0x40020010
 8006ab4:	40020028 	.word	0x40020028
 8006ab8:	40020040 	.word	0x40020040
 8006abc:	40020058 	.word	0x40020058
 8006ac0:	40020070 	.word	0x40020070
 8006ac4:	40020088 	.word	0x40020088
 8006ac8:	400200a0 	.word	0x400200a0
 8006acc:	400200b8 	.word	0x400200b8
 8006ad0:	40020410 	.word	0x40020410
 8006ad4:	40020428 	.word	0x40020428
 8006ad8:	40020440 	.word	0x40020440
 8006adc:	40020458 	.word	0x40020458
 8006ae0:	40020470 	.word	0x40020470
 8006ae4:	40020488 	.word	0x40020488
 8006ae8:	400204a0 	.word	0x400204a0
 8006aec:	400204b8 	.word	0x400204b8
 8006af0:	58025408 	.word	0x58025408
 8006af4:	5802541c 	.word	0x5802541c
 8006af8:	58025430 	.word	0x58025430
 8006afc:	58025444 	.word	0x58025444
 8006b00:	58025458 	.word	0x58025458
 8006b04:	5802546c 	.word	0x5802546c
 8006b08:	58025480 	.word	0x58025480
 8006b0c:	58025494 	.word	0x58025494
 8006b10:	2300      	movs	r3, #0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d007      	beq.n	8006b26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a6d      	ldr	r2, [pc, #436]	; (8006ce0 <HAL_DMA_Abort+0x444>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d04a      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a6b      	ldr	r2, [pc, #428]	; (8006ce4 <HAL_DMA_Abort+0x448>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d045      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a6a      	ldr	r2, [pc, #424]	; (8006ce8 <HAL_DMA_Abort+0x44c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d040      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a68      	ldr	r2, [pc, #416]	; (8006cec <HAL_DMA_Abort+0x450>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d03b      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a67      	ldr	r2, [pc, #412]	; (8006cf0 <HAL_DMA_Abort+0x454>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d036      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a65      	ldr	r2, [pc, #404]	; (8006cf4 <HAL_DMA_Abort+0x458>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d031      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a64      	ldr	r2, [pc, #400]	; (8006cf8 <HAL_DMA_Abort+0x45c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d02c      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a62      	ldr	r2, [pc, #392]	; (8006cfc <HAL_DMA_Abort+0x460>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d027      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a61      	ldr	r2, [pc, #388]	; (8006d00 <HAL_DMA_Abort+0x464>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d022      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a5f      	ldr	r2, [pc, #380]	; (8006d04 <HAL_DMA_Abort+0x468>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d01d      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a5e      	ldr	r2, [pc, #376]	; (8006d08 <HAL_DMA_Abort+0x46c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d018      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a5c      	ldr	r2, [pc, #368]	; (8006d0c <HAL_DMA_Abort+0x470>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d013      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a5b      	ldr	r2, [pc, #364]	; (8006d10 <HAL_DMA_Abort+0x474>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00e      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a59      	ldr	r2, [pc, #356]	; (8006d14 <HAL_DMA_Abort+0x478>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d009      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a58      	ldr	r2, [pc, #352]	; (8006d18 <HAL_DMA_Abort+0x47c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d004      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a56      	ldr	r2, [pc, #344]	; (8006d1c <HAL_DMA_Abort+0x480>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d108      	bne.n	8006bd8 <HAL_DMA_Abort+0x33c>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0201 	bic.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	e007      	b.n	8006be8 <HAL_DMA_Abort+0x34c>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0201 	bic.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006be8:	e013      	b.n	8006c12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bea:	f7fe ff77 	bl	8005adc <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	2b05      	cmp	r3, #5
 8006bf6:	d90c      	bls.n	8006c12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2203      	movs	r2, #3
 8006c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e12d      	b.n	8006e6e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e5      	bne.n	8006bea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a2f      	ldr	r2, [pc, #188]	; (8006ce0 <HAL_DMA_Abort+0x444>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d04a      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a2d      	ldr	r2, [pc, #180]	; (8006ce4 <HAL_DMA_Abort+0x448>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d045      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2c      	ldr	r2, [pc, #176]	; (8006ce8 <HAL_DMA_Abort+0x44c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d040      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a2a      	ldr	r2, [pc, #168]	; (8006cec <HAL_DMA_Abort+0x450>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d03b      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a29      	ldr	r2, [pc, #164]	; (8006cf0 <HAL_DMA_Abort+0x454>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d036      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a27      	ldr	r2, [pc, #156]	; (8006cf4 <HAL_DMA_Abort+0x458>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d031      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a26      	ldr	r2, [pc, #152]	; (8006cf8 <HAL_DMA_Abort+0x45c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d02c      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a24      	ldr	r2, [pc, #144]	; (8006cfc <HAL_DMA_Abort+0x460>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d027      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a23      	ldr	r2, [pc, #140]	; (8006d00 <HAL_DMA_Abort+0x464>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d022      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a21      	ldr	r2, [pc, #132]	; (8006d04 <HAL_DMA_Abort+0x468>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d01d      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a20      	ldr	r2, [pc, #128]	; (8006d08 <HAL_DMA_Abort+0x46c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d018      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a1e      	ldr	r2, [pc, #120]	; (8006d0c <HAL_DMA_Abort+0x470>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d013      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1d      	ldr	r2, [pc, #116]	; (8006d10 <HAL_DMA_Abort+0x474>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00e      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	; (8006d14 <HAL_DMA_Abort+0x478>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d009      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1a      	ldr	r2, [pc, #104]	; (8006d18 <HAL_DMA_Abort+0x47c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d004      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a18      	ldr	r2, [pc, #96]	; (8006d1c <HAL_DMA_Abort+0x480>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d101      	bne.n	8006cc2 <HAL_DMA_Abort+0x426>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e000      	b.n	8006cc4 <HAL_DMA_Abort+0x428>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d02b      	beq.n	8006d20 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ccc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	223f      	movs	r2, #63	; 0x3f
 8006cd8:	409a      	lsls	r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	609a      	str	r2, [r3, #8]
 8006cde:	e02a      	b.n	8006d36 <HAL_DMA_Abort+0x49a>
 8006ce0:	40020010 	.word	0x40020010
 8006ce4:	40020028 	.word	0x40020028
 8006ce8:	40020040 	.word	0x40020040
 8006cec:	40020058 	.word	0x40020058
 8006cf0:	40020070 	.word	0x40020070
 8006cf4:	40020088 	.word	0x40020088
 8006cf8:	400200a0 	.word	0x400200a0
 8006cfc:	400200b8 	.word	0x400200b8
 8006d00:	40020410 	.word	0x40020410
 8006d04:	40020428 	.word	0x40020428
 8006d08:	40020440 	.word	0x40020440
 8006d0c:	40020458 	.word	0x40020458
 8006d10:	40020470 	.word	0x40020470
 8006d14:	40020488 	.word	0x40020488
 8006d18:	400204a0 	.word	0x400204a0
 8006d1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d24:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	2201      	movs	r2, #1
 8006d30:	409a      	lsls	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a4f      	ldr	r2, [pc, #316]	; (8006e78 <HAL_DMA_Abort+0x5dc>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d072      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a4d      	ldr	r2, [pc, #308]	; (8006e7c <HAL_DMA_Abort+0x5e0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d06d      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a4c      	ldr	r2, [pc, #304]	; (8006e80 <HAL_DMA_Abort+0x5e4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d068      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a4a      	ldr	r2, [pc, #296]	; (8006e84 <HAL_DMA_Abort+0x5e8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d063      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a49      	ldr	r2, [pc, #292]	; (8006e88 <HAL_DMA_Abort+0x5ec>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d05e      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a47      	ldr	r2, [pc, #284]	; (8006e8c <HAL_DMA_Abort+0x5f0>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d059      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a46      	ldr	r2, [pc, #280]	; (8006e90 <HAL_DMA_Abort+0x5f4>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d054      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a44      	ldr	r2, [pc, #272]	; (8006e94 <HAL_DMA_Abort+0x5f8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d04f      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a43      	ldr	r2, [pc, #268]	; (8006e98 <HAL_DMA_Abort+0x5fc>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d04a      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a41      	ldr	r2, [pc, #260]	; (8006e9c <HAL_DMA_Abort+0x600>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d045      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a40      	ldr	r2, [pc, #256]	; (8006ea0 <HAL_DMA_Abort+0x604>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d040      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a3e      	ldr	r2, [pc, #248]	; (8006ea4 <HAL_DMA_Abort+0x608>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d03b      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a3d      	ldr	r2, [pc, #244]	; (8006ea8 <HAL_DMA_Abort+0x60c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d036      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a3b      	ldr	r2, [pc, #236]	; (8006eac <HAL_DMA_Abort+0x610>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d031      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a3a      	ldr	r2, [pc, #232]	; (8006eb0 <HAL_DMA_Abort+0x614>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d02c      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a38      	ldr	r2, [pc, #224]	; (8006eb4 <HAL_DMA_Abort+0x618>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d027      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a37      	ldr	r2, [pc, #220]	; (8006eb8 <HAL_DMA_Abort+0x61c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d022      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a35      	ldr	r2, [pc, #212]	; (8006ebc <HAL_DMA_Abort+0x620>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d01d      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a34      	ldr	r2, [pc, #208]	; (8006ec0 <HAL_DMA_Abort+0x624>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d018      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a32      	ldr	r2, [pc, #200]	; (8006ec4 <HAL_DMA_Abort+0x628>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d013      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a31      	ldr	r2, [pc, #196]	; (8006ec8 <HAL_DMA_Abort+0x62c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00e      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a2f      	ldr	r2, [pc, #188]	; (8006ecc <HAL_DMA_Abort+0x630>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d009      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a2e      	ldr	r2, [pc, #184]	; (8006ed0 <HAL_DMA_Abort+0x634>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d004      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a2c      	ldr	r2, [pc, #176]	; (8006ed4 <HAL_DMA_Abort+0x638>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d101      	bne.n	8006e2a <HAL_DMA_Abort+0x58e>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e000      	b.n	8006e2c <HAL_DMA_Abort+0x590>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d015      	beq.n	8006e5c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e38:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00c      	beq.n	8006e5c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e50:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e5a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	40020010 	.word	0x40020010
 8006e7c:	40020028 	.word	0x40020028
 8006e80:	40020040 	.word	0x40020040
 8006e84:	40020058 	.word	0x40020058
 8006e88:	40020070 	.word	0x40020070
 8006e8c:	40020088 	.word	0x40020088
 8006e90:	400200a0 	.word	0x400200a0
 8006e94:	400200b8 	.word	0x400200b8
 8006e98:	40020410 	.word	0x40020410
 8006e9c:	40020428 	.word	0x40020428
 8006ea0:	40020440 	.word	0x40020440
 8006ea4:	40020458 	.word	0x40020458
 8006ea8:	40020470 	.word	0x40020470
 8006eac:	40020488 	.word	0x40020488
 8006eb0:	400204a0 	.word	0x400204a0
 8006eb4:	400204b8 	.word	0x400204b8
 8006eb8:	58025408 	.word	0x58025408
 8006ebc:	5802541c 	.word	0x5802541c
 8006ec0:	58025430 	.word	0x58025430
 8006ec4:	58025444 	.word	0x58025444
 8006ec8:	58025458 	.word	0x58025458
 8006ecc:	5802546c 	.word	0x5802546c
 8006ed0:	58025480 	.word	0x58025480
 8006ed4:	58025494 	.word	0x58025494

08006ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e237      	b.n	800735a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d004      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2280      	movs	r2, #128	; 0x80
 8006efa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e22c      	b.n	800735a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a5c      	ldr	r2, [pc, #368]	; (8007078 <HAL_DMA_Abort_IT+0x1a0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d04a      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a5b      	ldr	r2, [pc, #364]	; (800707c <HAL_DMA_Abort_IT+0x1a4>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d045      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a59      	ldr	r2, [pc, #356]	; (8007080 <HAL_DMA_Abort_IT+0x1a8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d040      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a58      	ldr	r2, [pc, #352]	; (8007084 <HAL_DMA_Abort_IT+0x1ac>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d03b      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a56      	ldr	r2, [pc, #344]	; (8007088 <HAL_DMA_Abort_IT+0x1b0>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d036      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a55      	ldr	r2, [pc, #340]	; (800708c <HAL_DMA_Abort_IT+0x1b4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d031      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a53      	ldr	r2, [pc, #332]	; (8007090 <HAL_DMA_Abort_IT+0x1b8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d02c      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a52      	ldr	r2, [pc, #328]	; (8007094 <HAL_DMA_Abort_IT+0x1bc>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d027      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a50      	ldr	r2, [pc, #320]	; (8007098 <HAL_DMA_Abort_IT+0x1c0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d022      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a4f      	ldr	r2, [pc, #316]	; (800709c <HAL_DMA_Abort_IT+0x1c4>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d01d      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a4d      	ldr	r2, [pc, #308]	; (80070a0 <HAL_DMA_Abort_IT+0x1c8>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d018      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a4c      	ldr	r2, [pc, #304]	; (80070a4 <HAL_DMA_Abort_IT+0x1cc>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d013      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a4a      	ldr	r2, [pc, #296]	; (80070a8 <HAL_DMA_Abort_IT+0x1d0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00e      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a49      	ldr	r2, [pc, #292]	; (80070ac <HAL_DMA_Abort_IT+0x1d4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d009      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a47      	ldr	r2, [pc, #284]	; (80070b0 <HAL_DMA_Abort_IT+0x1d8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d004      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a46      	ldr	r2, [pc, #280]	; (80070b4 <HAL_DMA_Abort_IT+0x1dc>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d101      	bne.n	8006fa4 <HAL_DMA_Abort_IT+0xcc>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e000      	b.n	8006fa6 <HAL_DMA_Abort_IT+0xce>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 8086 	beq.w	80070b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2204      	movs	r2, #4
 8006fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a2f      	ldr	r2, [pc, #188]	; (8007078 <HAL_DMA_Abort_IT+0x1a0>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d04a      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a2e      	ldr	r2, [pc, #184]	; (800707c <HAL_DMA_Abort_IT+0x1a4>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d045      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a2c      	ldr	r2, [pc, #176]	; (8007080 <HAL_DMA_Abort_IT+0x1a8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d040      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a2b      	ldr	r2, [pc, #172]	; (8007084 <HAL_DMA_Abort_IT+0x1ac>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d03b      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a29      	ldr	r2, [pc, #164]	; (8007088 <HAL_DMA_Abort_IT+0x1b0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d036      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a28      	ldr	r2, [pc, #160]	; (800708c <HAL_DMA_Abort_IT+0x1b4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d031      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a26      	ldr	r2, [pc, #152]	; (8007090 <HAL_DMA_Abort_IT+0x1b8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d02c      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a25      	ldr	r2, [pc, #148]	; (8007094 <HAL_DMA_Abort_IT+0x1bc>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d027      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a23      	ldr	r2, [pc, #140]	; (8007098 <HAL_DMA_Abort_IT+0x1c0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d022      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a22      	ldr	r2, [pc, #136]	; (800709c <HAL_DMA_Abort_IT+0x1c4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d01d      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a20      	ldr	r2, [pc, #128]	; (80070a0 <HAL_DMA_Abort_IT+0x1c8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d018      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1f      	ldr	r2, [pc, #124]	; (80070a4 <HAL_DMA_Abort_IT+0x1cc>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d013      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a1d      	ldr	r2, [pc, #116]	; (80070a8 <HAL_DMA_Abort_IT+0x1d0>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00e      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1c      	ldr	r2, [pc, #112]	; (80070ac <HAL_DMA_Abort_IT+0x1d4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d009      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a1a      	ldr	r2, [pc, #104]	; (80070b0 <HAL_DMA_Abort_IT+0x1d8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <HAL_DMA_Abort_IT+0x17c>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a19      	ldr	r2, [pc, #100]	; (80070b4 <HAL_DMA_Abort_IT+0x1dc>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d108      	bne.n	8007066 <HAL_DMA_Abort_IT+0x18e>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0201 	bic.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	e178      	b.n	8007358 <HAL_DMA_Abort_IT+0x480>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0201 	bic.w	r2, r2, #1
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	e16f      	b.n	8007358 <HAL_DMA_Abort_IT+0x480>
 8007078:	40020010 	.word	0x40020010
 800707c:	40020028 	.word	0x40020028
 8007080:	40020040 	.word	0x40020040
 8007084:	40020058 	.word	0x40020058
 8007088:	40020070 	.word	0x40020070
 800708c:	40020088 	.word	0x40020088
 8007090:	400200a0 	.word	0x400200a0
 8007094:	400200b8 	.word	0x400200b8
 8007098:	40020410 	.word	0x40020410
 800709c:	40020428 	.word	0x40020428
 80070a0:	40020440 	.word	0x40020440
 80070a4:	40020458 	.word	0x40020458
 80070a8:	40020470 	.word	0x40020470
 80070ac:	40020488 	.word	0x40020488
 80070b0:	400204a0 	.word	0x400204a0
 80070b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 020e 	bic.w	r2, r2, #14
 80070c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a6c      	ldr	r2, [pc, #432]	; (8007280 <HAL_DMA_Abort_IT+0x3a8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d04a      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a6b      	ldr	r2, [pc, #428]	; (8007284 <HAL_DMA_Abort_IT+0x3ac>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d045      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a69      	ldr	r2, [pc, #420]	; (8007288 <HAL_DMA_Abort_IT+0x3b0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d040      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a68      	ldr	r2, [pc, #416]	; (800728c <HAL_DMA_Abort_IT+0x3b4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d03b      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a66      	ldr	r2, [pc, #408]	; (8007290 <HAL_DMA_Abort_IT+0x3b8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d036      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a65      	ldr	r2, [pc, #404]	; (8007294 <HAL_DMA_Abort_IT+0x3bc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d031      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a63      	ldr	r2, [pc, #396]	; (8007298 <HAL_DMA_Abort_IT+0x3c0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d02c      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a62      	ldr	r2, [pc, #392]	; (800729c <HAL_DMA_Abort_IT+0x3c4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d027      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a60      	ldr	r2, [pc, #384]	; (80072a0 <HAL_DMA_Abort_IT+0x3c8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d022      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a5f      	ldr	r2, [pc, #380]	; (80072a4 <HAL_DMA_Abort_IT+0x3cc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d01d      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a5d      	ldr	r2, [pc, #372]	; (80072a8 <HAL_DMA_Abort_IT+0x3d0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d018      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a5c      	ldr	r2, [pc, #368]	; (80072ac <HAL_DMA_Abort_IT+0x3d4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d013      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a5a      	ldr	r2, [pc, #360]	; (80072b0 <HAL_DMA_Abort_IT+0x3d8>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00e      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a59      	ldr	r2, [pc, #356]	; (80072b4 <HAL_DMA_Abort_IT+0x3dc>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d009      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a57      	ldr	r2, [pc, #348]	; (80072b8 <HAL_DMA_Abort_IT+0x3e0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d004      	beq.n	8007168 <HAL_DMA_Abort_IT+0x290>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a56      	ldr	r2, [pc, #344]	; (80072bc <HAL_DMA_Abort_IT+0x3e4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d108      	bne.n	800717a <HAL_DMA_Abort_IT+0x2a2>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0201 	bic.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	e007      	b.n	800718a <HAL_DMA_Abort_IT+0x2b2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0201 	bic.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a3c      	ldr	r2, [pc, #240]	; (8007280 <HAL_DMA_Abort_IT+0x3a8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d072      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a3a      	ldr	r2, [pc, #232]	; (8007284 <HAL_DMA_Abort_IT+0x3ac>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d06d      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a39      	ldr	r2, [pc, #228]	; (8007288 <HAL_DMA_Abort_IT+0x3b0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d068      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a37      	ldr	r2, [pc, #220]	; (800728c <HAL_DMA_Abort_IT+0x3b4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d063      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a36      	ldr	r2, [pc, #216]	; (8007290 <HAL_DMA_Abort_IT+0x3b8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d05e      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a34      	ldr	r2, [pc, #208]	; (8007294 <HAL_DMA_Abort_IT+0x3bc>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d059      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a33      	ldr	r2, [pc, #204]	; (8007298 <HAL_DMA_Abort_IT+0x3c0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d054      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a31      	ldr	r2, [pc, #196]	; (800729c <HAL_DMA_Abort_IT+0x3c4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d04f      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a30      	ldr	r2, [pc, #192]	; (80072a0 <HAL_DMA_Abort_IT+0x3c8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d04a      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a2e      	ldr	r2, [pc, #184]	; (80072a4 <HAL_DMA_Abort_IT+0x3cc>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d045      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2d      	ldr	r2, [pc, #180]	; (80072a8 <HAL_DMA_Abort_IT+0x3d0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d040      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a2b      	ldr	r2, [pc, #172]	; (80072ac <HAL_DMA_Abort_IT+0x3d4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d03b      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a2a      	ldr	r2, [pc, #168]	; (80072b0 <HAL_DMA_Abort_IT+0x3d8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d036      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a28      	ldr	r2, [pc, #160]	; (80072b4 <HAL_DMA_Abort_IT+0x3dc>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d031      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a27      	ldr	r2, [pc, #156]	; (80072b8 <HAL_DMA_Abort_IT+0x3e0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d02c      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a25      	ldr	r2, [pc, #148]	; (80072bc <HAL_DMA_Abort_IT+0x3e4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d027      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a24      	ldr	r2, [pc, #144]	; (80072c0 <HAL_DMA_Abort_IT+0x3e8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d022      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a22      	ldr	r2, [pc, #136]	; (80072c4 <HAL_DMA_Abort_IT+0x3ec>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d01d      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a21      	ldr	r2, [pc, #132]	; (80072c8 <HAL_DMA_Abort_IT+0x3f0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d018      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a1f      	ldr	r2, [pc, #124]	; (80072cc <HAL_DMA_Abort_IT+0x3f4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d013      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a1e      	ldr	r2, [pc, #120]	; (80072d0 <HAL_DMA_Abort_IT+0x3f8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00e      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a1c      	ldr	r2, [pc, #112]	; (80072d4 <HAL_DMA_Abort_IT+0x3fc>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d009      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a1b      	ldr	r2, [pc, #108]	; (80072d8 <HAL_DMA_Abort_IT+0x400>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d004      	beq.n	800727a <HAL_DMA_Abort_IT+0x3a2>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a19      	ldr	r2, [pc, #100]	; (80072dc <HAL_DMA_Abort_IT+0x404>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d132      	bne.n	80072e0 <HAL_DMA_Abort_IT+0x408>
 800727a:	2301      	movs	r3, #1
 800727c:	e031      	b.n	80072e2 <HAL_DMA_Abort_IT+0x40a>
 800727e:	bf00      	nop
 8007280:	40020010 	.word	0x40020010
 8007284:	40020028 	.word	0x40020028
 8007288:	40020040 	.word	0x40020040
 800728c:	40020058 	.word	0x40020058
 8007290:	40020070 	.word	0x40020070
 8007294:	40020088 	.word	0x40020088
 8007298:	400200a0 	.word	0x400200a0
 800729c:	400200b8 	.word	0x400200b8
 80072a0:	40020410 	.word	0x40020410
 80072a4:	40020428 	.word	0x40020428
 80072a8:	40020440 	.word	0x40020440
 80072ac:	40020458 	.word	0x40020458
 80072b0:	40020470 	.word	0x40020470
 80072b4:	40020488 	.word	0x40020488
 80072b8:	400204a0 	.word	0x400204a0
 80072bc:	400204b8 	.word	0x400204b8
 80072c0:	58025408 	.word	0x58025408
 80072c4:	5802541c 	.word	0x5802541c
 80072c8:	58025430 	.word	0x58025430
 80072cc:	58025444 	.word	0x58025444
 80072d0:	58025458 	.word	0x58025458
 80072d4:	5802546c 	.word	0x5802546c
 80072d8:	58025480 	.word	0x58025480
 80072dc:	58025494 	.word	0x58025494
 80072e0:	2300      	movs	r3, #0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d028      	beq.n	8007338 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	2201      	movs	r2, #1
 8007306:	409a      	lsls	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007314:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00c      	beq.n	8007338 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800732c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007336:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop

08007364 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	; 0x28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007370:	4b67      	ldr	r3, [pc, #412]	; (8007510 <HAL_DMA_IRQHandler+0x1ac>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a67      	ldr	r2, [pc, #412]	; (8007514 <HAL_DMA_IRQHandler+0x1b0>)
 8007376:	fba2 2303 	umull	r2, r3, r2, r3
 800737a:	0a9b      	lsrs	r3, r3, #10
 800737c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007382:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007388:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a5f      	ldr	r2, [pc, #380]	; (8007518 <HAL_DMA_IRQHandler+0x1b4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d04a      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a5d      	ldr	r2, [pc, #372]	; (800751c <HAL_DMA_IRQHandler+0x1b8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d045      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a5c      	ldr	r2, [pc, #368]	; (8007520 <HAL_DMA_IRQHandler+0x1bc>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d040      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a5a      	ldr	r2, [pc, #360]	; (8007524 <HAL_DMA_IRQHandler+0x1c0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d03b      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a59      	ldr	r2, [pc, #356]	; (8007528 <HAL_DMA_IRQHandler+0x1c4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d036      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a57      	ldr	r2, [pc, #348]	; (800752c <HAL_DMA_IRQHandler+0x1c8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d031      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a56      	ldr	r2, [pc, #344]	; (8007530 <HAL_DMA_IRQHandler+0x1cc>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d02c      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a54      	ldr	r2, [pc, #336]	; (8007534 <HAL_DMA_IRQHandler+0x1d0>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d027      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a53      	ldr	r2, [pc, #332]	; (8007538 <HAL_DMA_IRQHandler+0x1d4>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d022      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a51      	ldr	r2, [pc, #324]	; (800753c <HAL_DMA_IRQHandler+0x1d8>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d01d      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a50      	ldr	r2, [pc, #320]	; (8007540 <HAL_DMA_IRQHandler+0x1dc>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d018      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a4e      	ldr	r2, [pc, #312]	; (8007544 <HAL_DMA_IRQHandler+0x1e0>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d013      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a4d      	ldr	r2, [pc, #308]	; (8007548 <HAL_DMA_IRQHandler+0x1e4>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00e      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a4b      	ldr	r2, [pc, #300]	; (800754c <HAL_DMA_IRQHandler+0x1e8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d009      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a4a      	ldr	r2, [pc, #296]	; (8007550 <HAL_DMA_IRQHandler+0x1ec>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d004      	beq.n	8007436 <HAL_DMA_IRQHandler+0xd2>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a48      	ldr	r2, [pc, #288]	; (8007554 <HAL_DMA_IRQHandler+0x1f0>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d101      	bne.n	800743a <HAL_DMA_IRQHandler+0xd6>
 8007436:	2301      	movs	r3, #1
 8007438:	e000      	b.n	800743c <HAL_DMA_IRQHandler+0xd8>
 800743a:	2300      	movs	r3, #0
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 842b 	beq.w	8007c98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007446:	f003 031f 	and.w	r3, r3, #31
 800744a:	2208      	movs	r2, #8
 800744c:	409a      	lsls	r2, r3
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	4013      	ands	r3, r2
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 80a2 	beq.w	800759c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a2e      	ldr	r2, [pc, #184]	; (8007518 <HAL_DMA_IRQHandler+0x1b4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d04a      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a2d      	ldr	r2, [pc, #180]	; (800751c <HAL_DMA_IRQHandler+0x1b8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d045      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a2b      	ldr	r2, [pc, #172]	; (8007520 <HAL_DMA_IRQHandler+0x1bc>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d040      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a2a      	ldr	r2, [pc, #168]	; (8007524 <HAL_DMA_IRQHandler+0x1c0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d03b      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a28      	ldr	r2, [pc, #160]	; (8007528 <HAL_DMA_IRQHandler+0x1c4>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d036      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a27      	ldr	r2, [pc, #156]	; (800752c <HAL_DMA_IRQHandler+0x1c8>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d031      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a25      	ldr	r2, [pc, #148]	; (8007530 <HAL_DMA_IRQHandler+0x1cc>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d02c      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a24      	ldr	r2, [pc, #144]	; (8007534 <HAL_DMA_IRQHandler+0x1d0>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d027      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a22      	ldr	r2, [pc, #136]	; (8007538 <HAL_DMA_IRQHandler+0x1d4>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d022      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a21      	ldr	r2, [pc, #132]	; (800753c <HAL_DMA_IRQHandler+0x1d8>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d01d      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a1f      	ldr	r2, [pc, #124]	; (8007540 <HAL_DMA_IRQHandler+0x1dc>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d018      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a1e      	ldr	r2, [pc, #120]	; (8007544 <HAL_DMA_IRQHandler+0x1e0>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d013      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a1c      	ldr	r2, [pc, #112]	; (8007548 <HAL_DMA_IRQHandler+0x1e4>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00e      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a1b      	ldr	r2, [pc, #108]	; (800754c <HAL_DMA_IRQHandler+0x1e8>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d009      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a19      	ldr	r2, [pc, #100]	; (8007550 <HAL_DMA_IRQHandler+0x1ec>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d004      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x194>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a18      	ldr	r2, [pc, #96]	; (8007554 <HAL_DMA_IRQHandler+0x1f0>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d12f      	bne.n	8007558 <HAL_DMA_IRQHandler+0x1f4>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0304 	and.w	r3, r3, #4
 8007502:	2b00      	cmp	r3, #0
 8007504:	bf14      	ite	ne
 8007506:	2301      	movne	r3, #1
 8007508:	2300      	moveq	r3, #0
 800750a:	b2db      	uxtb	r3, r3
 800750c:	e02e      	b.n	800756c <HAL_DMA_IRQHandler+0x208>
 800750e:	bf00      	nop
 8007510:	24000000 	.word	0x24000000
 8007514:	1b4e81b5 	.word	0x1b4e81b5
 8007518:	40020010 	.word	0x40020010
 800751c:	40020028 	.word	0x40020028
 8007520:	40020040 	.word	0x40020040
 8007524:	40020058 	.word	0x40020058
 8007528:	40020070 	.word	0x40020070
 800752c:	40020088 	.word	0x40020088
 8007530:	400200a0 	.word	0x400200a0
 8007534:	400200b8 	.word	0x400200b8
 8007538:	40020410 	.word	0x40020410
 800753c:	40020428 	.word	0x40020428
 8007540:	40020440 	.word	0x40020440
 8007544:	40020458 	.word	0x40020458
 8007548:	40020470 	.word	0x40020470
 800754c:	40020488 	.word	0x40020488
 8007550:	400204a0 	.word	0x400204a0
 8007554:	400204b8 	.word	0x400204b8
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0308 	and.w	r3, r3, #8
 8007562:	2b00      	cmp	r3, #0
 8007564:	bf14      	ite	ne
 8007566:	2301      	movne	r3, #1
 8007568:	2300      	moveq	r3, #0
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d015      	beq.n	800759c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0204 	bic.w	r2, r2, #4
 800757e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007584:	f003 031f 	and.w	r3, r3, #31
 8007588:	2208      	movs	r2, #8
 800758a:	409a      	lsls	r2, r3
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007594:	f043 0201 	orr.w	r2, r3, #1
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075a0:	f003 031f 	and.w	r3, r3, #31
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	fa22 f303 	lsr.w	r3, r2, r3
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d06e      	beq.n	8007690 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a69      	ldr	r2, [pc, #420]	; (800775c <HAL_DMA_IRQHandler+0x3f8>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d04a      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a67      	ldr	r2, [pc, #412]	; (8007760 <HAL_DMA_IRQHandler+0x3fc>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d045      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a66      	ldr	r2, [pc, #408]	; (8007764 <HAL_DMA_IRQHandler+0x400>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d040      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a64      	ldr	r2, [pc, #400]	; (8007768 <HAL_DMA_IRQHandler+0x404>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d03b      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a63      	ldr	r2, [pc, #396]	; (800776c <HAL_DMA_IRQHandler+0x408>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d036      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a61      	ldr	r2, [pc, #388]	; (8007770 <HAL_DMA_IRQHandler+0x40c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d031      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a60      	ldr	r2, [pc, #384]	; (8007774 <HAL_DMA_IRQHandler+0x410>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d02c      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a5e      	ldr	r2, [pc, #376]	; (8007778 <HAL_DMA_IRQHandler+0x414>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d027      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a5d      	ldr	r2, [pc, #372]	; (800777c <HAL_DMA_IRQHandler+0x418>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d022      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a5b      	ldr	r2, [pc, #364]	; (8007780 <HAL_DMA_IRQHandler+0x41c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d01d      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a5a      	ldr	r2, [pc, #360]	; (8007784 <HAL_DMA_IRQHandler+0x420>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d018      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a58      	ldr	r2, [pc, #352]	; (8007788 <HAL_DMA_IRQHandler+0x424>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d013      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a57      	ldr	r2, [pc, #348]	; (800778c <HAL_DMA_IRQHandler+0x428>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d00e      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a55      	ldr	r2, [pc, #340]	; (8007790 <HAL_DMA_IRQHandler+0x42c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d009      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a54      	ldr	r2, [pc, #336]	; (8007794 <HAL_DMA_IRQHandler+0x430>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d004      	beq.n	8007652 <HAL_DMA_IRQHandler+0x2ee>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a52      	ldr	r2, [pc, #328]	; (8007798 <HAL_DMA_IRQHandler+0x434>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d10a      	bne.n	8007668 <HAL_DMA_IRQHandler+0x304>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765c:	2b00      	cmp	r3, #0
 800765e:	bf14      	ite	ne
 8007660:	2301      	movne	r3, #1
 8007662:	2300      	moveq	r3, #0
 8007664:	b2db      	uxtb	r3, r3
 8007666:	e003      	b.n	8007670 <HAL_DMA_IRQHandler+0x30c>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2300      	movs	r3, #0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00d      	beq.n	8007690 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	2201      	movs	r2, #1
 800767e:	409a      	lsls	r2, r3
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007688:	f043 0202 	orr.w	r2, r3, #2
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007694:	f003 031f 	and.w	r3, r3, #31
 8007698:	2204      	movs	r2, #4
 800769a:	409a      	lsls	r2, r3
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	4013      	ands	r3, r2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 808f 	beq.w	80077c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a2c      	ldr	r2, [pc, #176]	; (800775c <HAL_DMA_IRQHandler+0x3f8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d04a      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a2a      	ldr	r2, [pc, #168]	; (8007760 <HAL_DMA_IRQHandler+0x3fc>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d045      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a29      	ldr	r2, [pc, #164]	; (8007764 <HAL_DMA_IRQHandler+0x400>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d040      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a27      	ldr	r2, [pc, #156]	; (8007768 <HAL_DMA_IRQHandler+0x404>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d03b      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a26      	ldr	r2, [pc, #152]	; (800776c <HAL_DMA_IRQHandler+0x408>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d036      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a24      	ldr	r2, [pc, #144]	; (8007770 <HAL_DMA_IRQHandler+0x40c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d031      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a23      	ldr	r2, [pc, #140]	; (8007774 <HAL_DMA_IRQHandler+0x410>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d02c      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a21      	ldr	r2, [pc, #132]	; (8007778 <HAL_DMA_IRQHandler+0x414>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d027      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a20      	ldr	r2, [pc, #128]	; (800777c <HAL_DMA_IRQHandler+0x418>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d022      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a1e      	ldr	r2, [pc, #120]	; (8007780 <HAL_DMA_IRQHandler+0x41c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d01d      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a1d      	ldr	r2, [pc, #116]	; (8007784 <HAL_DMA_IRQHandler+0x420>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d018      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a1b      	ldr	r2, [pc, #108]	; (8007788 <HAL_DMA_IRQHandler+0x424>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d013      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a1a      	ldr	r2, [pc, #104]	; (800778c <HAL_DMA_IRQHandler+0x428>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d00e      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a18      	ldr	r2, [pc, #96]	; (8007790 <HAL_DMA_IRQHandler+0x42c>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d009      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a17      	ldr	r2, [pc, #92]	; (8007794 <HAL_DMA_IRQHandler+0x430>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d004      	beq.n	8007746 <HAL_DMA_IRQHandler+0x3e2>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a15      	ldr	r2, [pc, #84]	; (8007798 <HAL_DMA_IRQHandler+0x434>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d12a      	bne.n	800779c <HAL_DMA_IRQHandler+0x438>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0302 	and.w	r3, r3, #2
 8007750:	2b00      	cmp	r3, #0
 8007752:	bf14      	ite	ne
 8007754:	2301      	movne	r3, #1
 8007756:	2300      	moveq	r3, #0
 8007758:	b2db      	uxtb	r3, r3
 800775a:	e023      	b.n	80077a4 <HAL_DMA_IRQHandler+0x440>
 800775c:	40020010 	.word	0x40020010
 8007760:	40020028 	.word	0x40020028
 8007764:	40020040 	.word	0x40020040
 8007768:	40020058 	.word	0x40020058
 800776c:	40020070 	.word	0x40020070
 8007770:	40020088 	.word	0x40020088
 8007774:	400200a0 	.word	0x400200a0
 8007778:	400200b8 	.word	0x400200b8
 800777c:	40020410 	.word	0x40020410
 8007780:	40020428 	.word	0x40020428
 8007784:	40020440 	.word	0x40020440
 8007788:	40020458 	.word	0x40020458
 800778c:	40020470 	.word	0x40020470
 8007790:	40020488 	.word	0x40020488
 8007794:	400204a0 	.word	0x400204a0
 8007798:	400204b8 	.word	0x400204b8
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2300      	movs	r3, #0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00d      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ac:	f003 031f 	and.w	r3, r3, #31
 80077b0:	2204      	movs	r2, #4
 80077b2:	409a      	lsls	r2, r3
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077bc:	f043 0204 	orr.w	r2, r3, #4
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c8:	f003 031f 	and.w	r3, r3, #31
 80077cc:	2210      	movs	r2, #16
 80077ce:	409a      	lsls	r2, r3
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	4013      	ands	r3, r2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 80a6 	beq.w	8007926 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a85      	ldr	r2, [pc, #532]	; (80079f4 <HAL_DMA_IRQHandler+0x690>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d04a      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a83      	ldr	r2, [pc, #524]	; (80079f8 <HAL_DMA_IRQHandler+0x694>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d045      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a82      	ldr	r2, [pc, #520]	; (80079fc <HAL_DMA_IRQHandler+0x698>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d040      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a80      	ldr	r2, [pc, #512]	; (8007a00 <HAL_DMA_IRQHandler+0x69c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d03b      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a7f      	ldr	r2, [pc, #508]	; (8007a04 <HAL_DMA_IRQHandler+0x6a0>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d036      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a7d      	ldr	r2, [pc, #500]	; (8007a08 <HAL_DMA_IRQHandler+0x6a4>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d031      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a7c      	ldr	r2, [pc, #496]	; (8007a0c <HAL_DMA_IRQHandler+0x6a8>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d02c      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a7a      	ldr	r2, [pc, #488]	; (8007a10 <HAL_DMA_IRQHandler+0x6ac>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d027      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a79      	ldr	r2, [pc, #484]	; (8007a14 <HAL_DMA_IRQHandler+0x6b0>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d022      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a77      	ldr	r2, [pc, #476]	; (8007a18 <HAL_DMA_IRQHandler+0x6b4>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d01d      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a76      	ldr	r2, [pc, #472]	; (8007a1c <HAL_DMA_IRQHandler+0x6b8>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d018      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a74      	ldr	r2, [pc, #464]	; (8007a20 <HAL_DMA_IRQHandler+0x6bc>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d013      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a73      	ldr	r2, [pc, #460]	; (8007a24 <HAL_DMA_IRQHandler+0x6c0>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00e      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a71      	ldr	r2, [pc, #452]	; (8007a28 <HAL_DMA_IRQHandler+0x6c4>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d009      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a70      	ldr	r2, [pc, #448]	; (8007a2c <HAL_DMA_IRQHandler+0x6c8>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d004      	beq.n	800787a <HAL_DMA_IRQHandler+0x516>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a6e      	ldr	r2, [pc, #440]	; (8007a30 <HAL_DMA_IRQHandler+0x6cc>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d10a      	bne.n	8007890 <HAL_DMA_IRQHandler+0x52c>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0308 	and.w	r3, r3, #8
 8007884:	2b00      	cmp	r3, #0
 8007886:	bf14      	ite	ne
 8007888:	2301      	movne	r3, #1
 800788a:	2300      	moveq	r3, #0
 800788c:	b2db      	uxtb	r3, r3
 800788e:	e009      	b.n	80078a4 <HAL_DMA_IRQHandler+0x540>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	bf14      	ite	ne
 800789e:	2301      	movne	r3, #1
 80078a0:	2300      	moveq	r3, #0
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d03e      	beq.n	8007926 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ac:	f003 031f 	and.w	r3, r3, #31
 80078b0:	2210      	movs	r2, #16
 80078b2:	409a      	lsls	r2, r3
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d018      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d108      	bne.n	80078e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d024      	beq.n	8007926 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	4798      	blx	r3
 80078e4:	e01f      	b.n	8007926 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01b      	beq.n	8007926 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	4798      	blx	r3
 80078f6:	e016      	b.n	8007926 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007902:	2b00      	cmp	r3, #0
 8007904:	d107      	bne.n	8007916 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0208 	bic.w	r2, r2, #8
 8007914:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792a:	f003 031f 	and.w	r3, r3, #31
 800792e:	2220      	movs	r2, #32
 8007930:	409a      	lsls	r2, r3
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	4013      	ands	r3, r2
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 8110 	beq.w	8007b5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a2c      	ldr	r2, [pc, #176]	; (80079f4 <HAL_DMA_IRQHandler+0x690>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d04a      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a2b      	ldr	r2, [pc, #172]	; (80079f8 <HAL_DMA_IRQHandler+0x694>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d045      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a29      	ldr	r2, [pc, #164]	; (80079fc <HAL_DMA_IRQHandler+0x698>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d040      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a28      	ldr	r2, [pc, #160]	; (8007a00 <HAL_DMA_IRQHandler+0x69c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d03b      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a26      	ldr	r2, [pc, #152]	; (8007a04 <HAL_DMA_IRQHandler+0x6a0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d036      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a25      	ldr	r2, [pc, #148]	; (8007a08 <HAL_DMA_IRQHandler+0x6a4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d031      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a23      	ldr	r2, [pc, #140]	; (8007a0c <HAL_DMA_IRQHandler+0x6a8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d02c      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a22      	ldr	r2, [pc, #136]	; (8007a10 <HAL_DMA_IRQHandler+0x6ac>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d027      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a20      	ldr	r2, [pc, #128]	; (8007a14 <HAL_DMA_IRQHandler+0x6b0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d022      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a1f      	ldr	r2, [pc, #124]	; (8007a18 <HAL_DMA_IRQHandler+0x6b4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d01d      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a1d      	ldr	r2, [pc, #116]	; (8007a1c <HAL_DMA_IRQHandler+0x6b8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d018      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a1c      	ldr	r2, [pc, #112]	; (8007a20 <HAL_DMA_IRQHandler+0x6bc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d013      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a1a      	ldr	r2, [pc, #104]	; (8007a24 <HAL_DMA_IRQHandler+0x6c0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d00e      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a19      	ldr	r2, [pc, #100]	; (8007a28 <HAL_DMA_IRQHandler+0x6c4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d009      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a17      	ldr	r2, [pc, #92]	; (8007a2c <HAL_DMA_IRQHandler+0x6c8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d004      	beq.n	80079dc <HAL_DMA_IRQHandler+0x678>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a16      	ldr	r2, [pc, #88]	; (8007a30 <HAL_DMA_IRQHandler+0x6cc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d12b      	bne.n	8007a34 <HAL_DMA_IRQHandler+0x6d0>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0310 	and.w	r3, r3, #16
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	bf14      	ite	ne
 80079ea:	2301      	movne	r3, #1
 80079ec:	2300      	moveq	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	e02a      	b.n	8007a48 <HAL_DMA_IRQHandler+0x6e4>
 80079f2:	bf00      	nop
 80079f4:	40020010 	.word	0x40020010
 80079f8:	40020028 	.word	0x40020028
 80079fc:	40020040 	.word	0x40020040
 8007a00:	40020058 	.word	0x40020058
 8007a04:	40020070 	.word	0x40020070
 8007a08:	40020088 	.word	0x40020088
 8007a0c:	400200a0 	.word	0x400200a0
 8007a10:	400200b8 	.word	0x400200b8
 8007a14:	40020410 	.word	0x40020410
 8007a18:	40020428 	.word	0x40020428
 8007a1c:	40020440 	.word	0x40020440
 8007a20:	40020458 	.word	0x40020458
 8007a24:	40020470 	.word	0x40020470
 8007a28:	40020488 	.word	0x40020488
 8007a2c:	400204a0 	.word	0x400204a0
 8007a30:	400204b8 	.word	0x400204b8
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	bf14      	ite	ne
 8007a42:	2301      	movne	r3, #1
 8007a44:	2300      	moveq	r3, #0
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 8087 	beq.w	8007b5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a52:	f003 031f 	and.w	r3, r3, #31
 8007a56:	2220      	movs	r2, #32
 8007a58:	409a      	lsls	r2, r3
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	d139      	bne.n	8007ade <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 0216 	bic.w	r2, r2, #22
 8007a78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695a      	ldr	r2, [r3, #20]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d103      	bne.n	8007a9a <HAL_DMA_IRQHandler+0x736>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d007      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 0208 	bic.w	r2, r2, #8
 8007aa8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aae:	f003 031f 	and.w	r3, r3, #31
 8007ab2:	223f      	movs	r2, #63	; 0x3f
 8007ab4:	409a      	lsls	r2, r3
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 834a 	beq.w	8008168 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	4798      	blx	r3
          }
          return;
 8007adc:	e344      	b.n	8008168 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d018      	beq.n	8007b1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d108      	bne.n	8007b0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d02c      	beq.n	8007b5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	4798      	blx	r3
 8007b0a:	e027      	b.n	8007b5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d023      	beq.n	8007b5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	4798      	blx	r3
 8007b1c:	e01e      	b.n	8007b5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10f      	bne.n	8007b4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 0210 	bic.w	r2, r2, #16
 8007b3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d003      	beq.n	8007b5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8306 	beq.w	8008172 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 8088 	beq.w	8007c84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2204      	movs	r2, #4
 8007b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a7a      	ldr	r2, [pc, #488]	; (8007d6c <HAL_DMA_IRQHandler+0xa08>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d04a      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a79      	ldr	r2, [pc, #484]	; (8007d70 <HAL_DMA_IRQHandler+0xa0c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d045      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a77      	ldr	r2, [pc, #476]	; (8007d74 <HAL_DMA_IRQHandler+0xa10>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d040      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a76      	ldr	r2, [pc, #472]	; (8007d78 <HAL_DMA_IRQHandler+0xa14>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d03b      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a74      	ldr	r2, [pc, #464]	; (8007d7c <HAL_DMA_IRQHandler+0xa18>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d036      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a73      	ldr	r2, [pc, #460]	; (8007d80 <HAL_DMA_IRQHandler+0xa1c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d031      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a71      	ldr	r2, [pc, #452]	; (8007d84 <HAL_DMA_IRQHandler+0xa20>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d02c      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a70      	ldr	r2, [pc, #448]	; (8007d88 <HAL_DMA_IRQHandler+0xa24>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d027      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a6e      	ldr	r2, [pc, #440]	; (8007d8c <HAL_DMA_IRQHandler+0xa28>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d022      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a6d      	ldr	r2, [pc, #436]	; (8007d90 <HAL_DMA_IRQHandler+0xa2c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d01d      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a6b      	ldr	r2, [pc, #428]	; (8007d94 <HAL_DMA_IRQHandler+0xa30>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d018      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a6a      	ldr	r2, [pc, #424]	; (8007d98 <HAL_DMA_IRQHandler+0xa34>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d013      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a68      	ldr	r2, [pc, #416]	; (8007d9c <HAL_DMA_IRQHandler+0xa38>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d00e      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a67      	ldr	r2, [pc, #412]	; (8007da0 <HAL_DMA_IRQHandler+0xa3c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d009      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a65      	ldr	r2, [pc, #404]	; (8007da4 <HAL_DMA_IRQHandler+0xa40>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d004      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x8b8>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a64      	ldr	r2, [pc, #400]	; (8007da8 <HAL_DMA_IRQHandler+0xa44>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d108      	bne.n	8007c2e <HAL_DMA_IRQHandler+0x8ca>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0201 	bic.w	r2, r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	e007      	b.n	8007c3e <HAL_DMA_IRQHandler+0x8da>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0201 	bic.w	r2, r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3301      	adds	r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d307      	bcc.n	8007c5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1f2      	bne.n	8007c3e <HAL_DMA_IRQHandler+0x8da>
 8007c58:	e000      	b.n	8007c5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007c5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d004      	beq.n	8007c74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2203      	movs	r2, #3
 8007c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007c72:	e003      	b.n	8007c7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 8272 	beq.w	8008172 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	4798      	blx	r3
 8007c96:	e26c      	b.n	8008172 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a43      	ldr	r2, [pc, #268]	; (8007dac <HAL_DMA_IRQHandler+0xa48>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d022      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x984>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a42      	ldr	r2, [pc, #264]	; (8007db0 <HAL_DMA_IRQHandler+0xa4c>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d01d      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x984>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a40      	ldr	r2, [pc, #256]	; (8007db4 <HAL_DMA_IRQHandler+0xa50>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d018      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x984>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a3f      	ldr	r2, [pc, #252]	; (8007db8 <HAL_DMA_IRQHandler+0xa54>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d013      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x984>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a3d      	ldr	r2, [pc, #244]	; (8007dbc <HAL_DMA_IRQHandler+0xa58>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d00e      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x984>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a3c      	ldr	r2, [pc, #240]	; (8007dc0 <HAL_DMA_IRQHandler+0xa5c>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d009      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x984>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a3a      	ldr	r2, [pc, #232]	; (8007dc4 <HAL_DMA_IRQHandler+0xa60>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d004      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x984>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a39      	ldr	r2, [pc, #228]	; (8007dc8 <HAL_DMA_IRQHandler+0xa64>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d101      	bne.n	8007cec <HAL_DMA_IRQHandler+0x988>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e000      	b.n	8007cee <HAL_DMA_IRQHandler+0x98a>
 8007cec:	2300      	movs	r3, #0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 823f 	beq.w	8008172 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d00:	f003 031f 	and.w	r3, r3, #31
 8007d04:	2204      	movs	r2, #4
 8007d06:	409a      	lsls	r2, r3
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 80cd 	beq.w	8007eac <HAL_DMA_IRQHandler+0xb48>
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 80c7 	beq.w	8007eac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d22:	f003 031f 	and.w	r3, r3, #31
 8007d26:	2204      	movs	r2, #4
 8007d28:	409a      	lsls	r2, r3
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d049      	beq.n	8007dcc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d109      	bne.n	8007d56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 8210 	beq.w	800816c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d54:	e20a      	b.n	800816c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 8206 	beq.w	800816c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d68:	e200      	b.n	800816c <HAL_DMA_IRQHandler+0xe08>
 8007d6a:	bf00      	nop
 8007d6c:	40020010 	.word	0x40020010
 8007d70:	40020028 	.word	0x40020028
 8007d74:	40020040 	.word	0x40020040
 8007d78:	40020058 	.word	0x40020058
 8007d7c:	40020070 	.word	0x40020070
 8007d80:	40020088 	.word	0x40020088
 8007d84:	400200a0 	.word	0x400200a0
 8007d88:	400200b8 	.word	0x400200b8
 8007d8c:	40020410 	.word	0x40020410
 8007d90:	40020428 	.word	0x40020428
 8007d94:	40020440 	.word	0x40020440
 8007d98:	40020458 	.word	0x40020458
 8007d9c:	40020470 	.word	0x40020470
 8007da0:	40020488 	.word	0x40020488
 8007da4:	400204a0 	.word	0x400204a0
 8007da8:	400204b8 	.word	0x400204b8
 8007dac:	58025408 	.word	0x58025408
 8007db0:	5802541c 	.word	0x5802541c
 8007db4:	58025430 	.word	0x58025430
 8007db8:	58025444 	.word	0x58025444
 8007dbc:	58025458 	.word	0x58025458
 8007dc0:	5802546c 	.word	0x5802546c
 8007dc4:	58025480 	.word	0x58025480
 8007dc8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d160      	bne.n	8007e98 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a7f      	ldr	r2, [pc, #508]	; (8007fd8 <HAL_DMA_IRQHandler+0xc74>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d04a      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a7d      	ldr	r2, [pc, #500]	; (8007fdc <HAL_DMA_IRQHandler+0xc78>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d045      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a7c      	ldr	r2, [pc, #496]	; (8007fe0 <HAL_DMA_IRQHandler+0xc7c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d040      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a7a      	ldr	r2, [pc, #488]	; (8007fe4 <HAL_DMA_IRQHandler+0xc80>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d03b      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a79      	ldr	r2, [pc, #484]	; (8007fe8 <HAL_DMA_IRQHandler+0xc84>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d036      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a77      	ldr	r2, [pc, #476]	; (8007fec <HAL_DMA_IRQHandler+0xc88>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d031      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a76      	ldr	r2, [pc, #472]	; (8007ff0 <HAL_DMA_IRQHandler+0xc8c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d02c      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a74      	ldr	r2, [pc, #464]	; (8007ff4 <HAL_DMA_IRQHandler+0xc90>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d027      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a73      	ldr	r2, [pc, #460]	; (8007ff8 <HAL_DMA_IRQHandler+0xc94>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d022      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a71      	ldr	r2, [pc, #452]	; (8007ffc <HAL_DMA_IRQHandler+0xc98>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d01d      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a70      	ldr	r2, [pc, #448]	; (8008000 <HAL_DMA_IRQHandler+0xc9c>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d018      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a6e      	ldr	r2, [pc, #440]	; (8008004 <HAL_DMA_IRQHandler+0xca0>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d013      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a6d      	ldr	r2, [pc, #436]	; (8008008 <HAL_DMA_IRQHandler+0xca4>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00e      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a6b      	ldr	r2, [pc, #428]	; (800800c <HAL_DMA_IRQHandler+0xca8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d009      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a6a      	ldr	r2, [pc, #424]	; (8008010 <HAL_DMA_IRQHandler+0xcac>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d004      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xb12>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a68      	ldr	r2, [pc, #416]	; (8008014 <HAL_DMA_IRQHandler+0xcb0>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d108      	bne.n	8007e88 <HAL_DMA_IRQHandler+0xb24>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0208 	bic.w	r2, r2, #8
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	e007      	b.n	8007e98 <HAL_DMA_IRQHandler+0xb34>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0204 	bic.w	r2, r2, #4
 8007e96:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 8165 	beq.w	800816c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eaa:	e15f      	b.n	800816c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb0:	f003 031f 	and.w	r3, r3, #31
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	409a      	lsls	r2, r3
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	4013      	ands	r3, r2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 80c5 	beq.w	800804c <HAL_DMA_IRQHandler+0xce8>
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f003 0302 	and.w	r3, r3, #2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 80bf 	beq.w	800804c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed2:	f003 031f 	and.w	r3, r3, #31
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	409a      	lsls	r2, r3
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d018      	beq.n	8007f1a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d109      	bne.n	8007f06 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 813a 	beq.w	8008170 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f04:	e134      	b.n	8008170 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 8130 	beq.w	8008170 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f18:	e12a      	b.n	8008170 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f003 0320 	and.w	r3, r3, #32
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f040 8089 	bne.w	8008038 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a2b      	ldr	r2, [pc, #172]	; (8007fd8 <HAL_DMA_IRQHandler+0xc74>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d04a      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a29      	ldr	r2, [pc, #164]	; (8007fdc <HAL_DMA_IRQHandler+0xc78>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d045      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a28      	ldr	r2, [pc, #160]	; (8007fe0 <HAL_DMA_IRQHandler+0xc7c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d040      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a26      	ldr	r2, [pc, #152]	; (8007fe4 <HAL_DMA_IRQHandler+0xc80>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d03b      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a25      	ldr	r2, [pc, #148]	; (8007fe8 <HAL_DMA_IRQHandler+0xc84>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d036      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a23      	ldr	r2, [pc, #140]	; (8007fec <HAL_DMA_IRQHandler+0xc88>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d031      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a22      	ldr	r2, [pc, #136]	; (8007ff0 <HAL_DMA_IRQHandler+0xc8c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d02c      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a20      	ldr	r2, [pc, #128]	; (8007ff4 <HAL_DMA_IRQHandler+0xc90>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d027      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a1f      	ldr	r2, [pc, #124]	; (8007ff8 <HAL_DMA_IRQHandler+0xc94>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d022      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a1d      	ldr	r2, [pc, #116]	; (8007ffc <HAL_DMA_IRQHandler+0xc98>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d01d      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a1c      	ldr	r2, [pc, #112]	; (8008000 <HAL_DMA_IRQHandler+0xc9c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d018      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a1a      	ldr	r2, [pc, #104]	; (8008004 <HAL_DMA_IRQHandler+0xca0>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d013      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a19      	ldr	r2, [pc, #100]	; (8008008 <HAL_DMA_IRQHandler+0xca4>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d00e      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a17      	ldr	r2, [pc, #92]	; (800800c <HAL_DMA_IRQHandler+0xca8>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d009      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a16      	ldr	r2, [pc, #88]	; (8008010 <HAL_DMA_IRQHandler+0xcac>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d004      	beq.n	8007fc6 <HAL_DMA_IRQHandler+0xc62>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a14      	ldr	r2, [pc, #80]	; (8008014 <HAL_DMA_IRQHandler+0xcb0>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d128      	bne.n	8008018 <HAL_DMA_IRQHandler+0xcb4>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 0214 	bic.w	r2, r2, #20
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	e027      	b.n	8008028 <HAL_DMA_IRQHandler+0xcc4>
 8007fd8:	40020010 	.word	0x40020010
 8007fdc:	40020028 	.word	0x40020028
 8007fe0:	40020040 	.word	0x40020040
 8007fe4:	40020058 	.word	0x40020058
 8007fe8:	40020070 	.word	0x40020070
 8007fec:	40020088 	.word	0x40020088
 8007ff0:	400200a0 	.word	0x400200a0
 8007ff4:	400200b8 	.word	0x400200b8
 8007ff8:	40020410 	.word	0x40020410
 8007ffc:	40020428 	.word	0x40020428
 8008000:	40020440 	.word	0x40020440
 8008004:	40020458 	.word	0x40020458
 8008008:	40020470 	.word	0x40020470
 800800c:	40020488 	.word	0x40020488
 8008010:	400204a0 	.word	0x400204a0
 8008014:	400204b8 	.word	0x400204b8
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 020a 	bic.w	r2, r2, #10
 8008026:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8097 	beq.w	8008170 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800804a:	e091      	b.n	8008170 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008050:	f003 031f 	and.w	r3, r3, #31
 8008054:	2208      	movs	r2, #8
 8008056:	409a      	lsls	r2, r3
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	4013      	ands	r3, r2
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 8088 	beq.w	8008172 <HAL_DMA_IRQHandler+0xe0e>
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 8082 	beq.w	8008172 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a41      	ldr	r2, [pc, #260]	; (8008178 <HAL_DMA_IRQHandler+0xe14>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d04a      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a3f      	ldr	r2, [pc, #252]	; (800817c <HAL_DMA_IRQHandler+0xe18>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d045      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a3e      	ldr	r2, [pc, #248]	; (8008180 <HAL_DMA_IRQHandler+0xe1c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d040      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a3c      	ldr	r2, [pc, #240]	; (8008184 <HAL_DMA_IRQHandler+0xe20>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d03b      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a3b      	ldr	r2, [pc, #236]	; (8008188 <HAL_DMA_IRQHandler+0xe24>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d036      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a39      	ldr	r2, [pc, #228]	; (800818c <HAL_DMA_IRQHandler+0xe28>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d031      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a38      	ldr	r2, [pc, #224]	; (8008190 <HAL_DMA_IRQHandler+0xe2c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d02c      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a36      	ldr	r2, [pc, #216]	; (8008194 <HAL_DMA_IRQHandler+0xe30>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d027      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a35      	ldr	r2, [pc, #212]	; (8008198 <HAL_DMA_IRQHandler+0xe34>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d022      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a33      	ldr	r2, [pc, #204]	; (800819c <HAL_DMA_IRQHandler+0xe38>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d01d      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a32      	ldr	r2, [pc, #200]	; (80081a0 <HAL_DMA_IRQHandler+0xe3c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d018      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a30      	ldr	r2, [pc, #192]	; (80081a4 <HAL_DMA_IRQHandler+0xe40>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d013      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a2f      	ldr	r2, [pc, #188]	; (80081a8 <HAL_DMA_IRQHandler+0xe44>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00e      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a2d      	ldr	r2, [pc, #180]	; (80081ac <HAL_DMA_IRQHandler+0xe48>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d009      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a2c      	ldr	r2, [pc, #176]	; (80081b0 <HAL_DMA_IRQHandler+0xe4c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d004      	beq.n	800810e <HAL_DMA_IRQHandler+0xdaa>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a2a      	ldr	r2, [pc, #168]	; (80081b4 <HAL_DMA_IRQHandler+0xe50>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d108      	bne.n	8008120 <HAL_DMA_IRQHandler+0xdbc>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 021c 	bic.w	r2, r2, #28
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	e007      	b.n	8008130 <HAL_DMA_IRQHandler+0xdcc>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 020e 	bic.w	r2, r2, #14
 800812e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008134:	f003 031f 	and.w	r3, r3, #31
 8008138:	2201      	movs	r2, #1
 800813a:	409a      	lsls	r2, r3
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815a:	2b00      	cmp	r3, #0
 800815c:	d009      	beq.n	8008172 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	4798      	blx	r3
 8008166:	e004      	b.n	8008172 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008168:	bf00      	nop
 800816a:	e002      	b.n	8008172 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800816c:	bf00      	nop
 800816e:	e000      	b.n	8008172 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008170:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008172:	3728      	adds	r7, #40	; 0x28
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	40020010 	.word	0x40020010
 800817c:	40020028 	.word	0x40020028
 8008180:	40020040 	.word	0x40020040
 8008184:	40020058 	.word	0x40020058
 8008188:	40020070 	.word	0x40020070
 800818c:	40020088 	.word	0x40020088
 8008190:	400200a0 	.word	0x400200a0
 8008194:	400200b8 	.word	0x400200b8
 8008198:	40020410 	.word	0x40020410
 800819c:	40020428 	.word	0x40020428
 80081a0:	40020440 	.word	0x40020440
 80081a4:	40020458 	.word	0x40020458
 80081a8:	40020470 	.word	0x40020470
 80081ac:	40020488 	.word	0x40020488
 80081b0:	400204a0 	.word	0x400204a0
 80081b4:	400204b8 	.word	0x400204b8

080081b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a7f      	ldr	r2, [pc, #508]	; (80083d4 <DMA_SetConfig+0x21c>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d072      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a7d      	ldr	r2, [pc, #500]	; (80083d8 <DMA_SetConfig+0x220>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d06d      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a7c      	ldr	r2, [pc, #496]	; (80083dc <DMA_SetConfig+0x224>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d068      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a7a      	ldr	r2, [pc, #488]	; (80083e0 <DMA_SetConfig+0x228>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d063      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a79      	ldr	r2, [pc, #484]	; (80083e4 <DMA_SetConfig+0x22c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d05e      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a77      	ldr	r2, [pc, #476]	; (80083e8 <DMA_SetConfig+0x230>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d059      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a76      	ldr	r2, [pc, #472]	; (80083ec <DMA_SetConfig+0x234>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d054      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a74      	ldr	r2, [pc, #464]	; (80083f0 <DMA_SetConfig+0x238>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d04f      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a73      	ldr	r2, [pc, #460]	; (80083f4 <DMA_SetConfig+0x23c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d04a      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a71      	ldr	r2, [pc, #452]	; (80083f8 <DMA_SetConfig+0x240>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d045      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a70      	ldr	r2, [pc, #448]	; (80083fc <DMA_SetConfig+0x244>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d040      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a6e      	ldr	r2, [pc, #440]	; (8008400 <DMA_SetConfig+0x248>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d03b      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a6d      	ldr	r2, [pc, #436]	; (8008404 <DMA_SetConfig+0x24c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d036      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a6b      	ldr	r2, [pc, #428]	; (8008408 <DMA_SetConfig+0x250>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d031      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a6a      	ldr	r2, [pc, #424]	; (800840c <DMA_SetConfig+0x254>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d02c      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a68      	ldr	r2, [pc, #416]	; (8008410 <DMA_SetConfig+0x258>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d027      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a67      	ldr	r2, [pc, #412]	; (8008414 <DMA_SetConfig+0x25c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d022      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a65      	ldr	r2, [pc, #404]	; (8008418 <DMA_SetConfig+0x260>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d01d      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a64      	ldr	r2, [pc, #400]	; (800841c <DMA_SetConfig+0x264>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d018      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a62      	ldr	r2, [pc, #392]	; (8008420 <DMA_SetConfig+0x268>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d013      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a61      	ldr	r2, [pc, #388]	; (8008424 <DMA_SetConfig+0x26c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d00e      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a5f      	ldr	r2, [pc, #380]	; (8008428 <DMA_SetConfig+0x270>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d009      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a5e      	ldr	r2, [pc, #376]	; (800842c <DMA_SetConfig+0x274>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d004      	beq.n	80082c2 <DMA_SetConfig+0x10a>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a5c      	ldr	r2, [pc, #368]	; (8008430 <DMA_SetConfig+0x278>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d101      	bne.n	80082c6 <DMA_SetConfig+0x10e>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e000      	b.n	80082c8 <DMA_SetConfig+0x110>
 80082c6:	2300      	movs	r3, #0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00d      	beq.n	80082e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80082d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80082e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a39      	ldr	r2, [pc, #228]	; (80083d4 <DMA_SetConfig+0x21c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d04a      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a38      	ldr	r2, [pc, #224]	; (80083d8 <DMA_SetConfig+0x220>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d045      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a36      	ldr	r2, [pc, #216]	; (80083dc <DMA_SetConfig+0x224>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d040      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a35      	ldr	r2, [pc, #212]	; (80083e0 <DMA_SetConfig+0x228>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d03b      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a33      	ldr	r2, [pc, #204]	; (80083e4 <DMA_SetConfig+0x22c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d036      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a32      	ldr	r2, [pc, #200]	; (80083e8 <DMA_SetConfig+0x230>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d031      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a30      	ldr	r2, [pc, #192]	; (80083ec <DMA_SetConfig+0x234>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d02c      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a2f      	ldr	r2, [pc, #188]	; (80083f0 <DMA_SetConfig+0x238>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d027      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a2d      	ldr	r2, [pc, #180]	; (80083f4 <DMA_SetConfig+0x23c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d022      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a2c      	ldr	r2, [pc, #176]	; (80083f8 <DMA_SetConfig+0x240>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d01d      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a2a      	ldr	r2, [pc, #168]	; (80083fc <DMA_SetConfig+0x244>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d018      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a29      	ldr	r2, [pc, #164]	; (8008400 <DMA_SetConfig+0x248>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d013      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a27      	ldr	r2, [pc, #156]	; (8008404 <DMA_SetConfig+0x24c>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d00e      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a26      	ldr	r2, [pc, #152]	; (8008408 <DMA_SetConfig+0x250>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d009      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a24      	ldr	r2, [pc, #144]	; (800840c <DMA_SetConfig+0x254>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d004      	beq.n	8008388 <DMA_SetConfig+0x1d0>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a23      	ldr	r2, [pc, #140]	; (8008410 <DMA_SetConfig+0x258>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d101      	bne.n	800838c <DMA_SetConfig+0x1d4>
 8008388:	2301      	movs	r3, #1
 800838a:	e000      	b.n	800838e <DMA_SetConfig+0x1d6>
 800838c:	2300      	movs	r3, #0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d059      	beq.n	8008446 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008396:	f003 031f 	and.w	r3, r3, #31
 800839a:	223f      	movs	r2, #63	; 0x3f
 800839c:	409a      	lsls	r2, r3
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	2b40      	cmp	r3, #64	; 0x40
 80083c0:	d138      	bne.n	8008434 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80083d2:	e086      	b.n	80084e2 <DMA_SetConfig+0x32a>
 80083d4:	40020010 	.word	0x40020010
 80083d8:	40020028 	.word	0x40020028
 80083dc:	40020040 	.word	0x40020040
 80083e0:	40020058 	.word	0x40020058
 80083e4:	40020070 	.word	0x40020070
 80083e8:	40020088 	.word	0x40020088
 80083ec:	400200a0 	.word	0x400200a0
 80083f0:	400200b8 	.word	0x400200b8
 80083f4:	40020410 	.word	0x40020410
 80083f8:	40020428 	.word	0x40020428
 80083fc:	40020440 	.word	0x40020440
 8008400:	40020458 	.word	0x40020458
 8008404:	40020470 	.word	0x40020470
 8008408:	40020488 	.word	0x40020488
 800840c:	400204a0 	.word	0x400204a0
 8008410:	400204b8 	.word	0x400204b8
 8008414:	58025408 	.word	0x58025408
 8008418:	5802541c 	.word	0x5802541c
 800841c:	58025430 	.word	0x58025430
 8008420:	58025444 	.word	0x58025444
 8008424:	58025458 	.word	0x58025458
 8008428:	5802546c 	.word	0x5802546c
 800842c:	58025480 	.word	0x58025480
 8008430:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	60da      	str	r2, [r3, #12]
}
 8008444:	e04d      	b.n	80084e2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a29      	ldr	r2, [pc, #164]	; (80084f0 <DMA_SetConfig+0x338>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d022      	beq.n	8008496 <DMA_SetConfig+0x2de>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a27      	ldr	r2, [pc, #156]	; (80084f4 <DMA_SetConfig+0x33c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d01d      	beq.n	8008496 <DMA_SetConfig+0x2de>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a26      	ldr	r2, [pc, #152]	; (80084f8 <DMA_SetConfig+0x340>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d018      	beq.n	8008496 <DMA_SetConfig+0x2de>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a24      	ldr	r2, [pc, #144]	; (80084fc <DMA_SetConfig+0x344>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d013      	beq.n	8008496 <DMA_SetConfig+0x2de>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a23      	ldr	r2, [pc, #140]	; (8008500 <DMA_SetConfig+0x348>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d00e      	beq.n	8008496 <DMA_SetConfig+0x2de>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a21      	ldr	r2, [pc, #132]	; (8008504 <DMA_SetConfig+0x34c>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d009      	beq.n	8008496 <DMA_SetConfig+0x2de>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a20      	ldr	r2, [pc, #128]	; (8008508 <DMA_SetConfig+0x350>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d004      	beq.n	8008496 <DMA_SetConfig+0x2de>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a1e      	ldr	r2, [pc, #120]	; (800850c <DMA_SetConfig+0x354>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d101      	bne.n	800849a <DMA_SetConfig+0x2e2>
 8008496:	2301      	movs	r3, #1
 8008498:	e000      	b.n	800849c <DMA_SetConfig+0x2e4>
 800849a:	2300      	movs	r3, #0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d020      	beq.n	80084e2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a4:	f003 031f 	and.w	r3, r3, #31
 80084a8:	2201      	movs	r2, #1
 80084aa:	409a      	lsls	r2, r3
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	2b40      	cmp	r3, #64	; 0x40
 80084be:	d108      	bne.n	80084d2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	60da      	str	r2, [r3, #12]
}
 80084d0:	e007      	b.n	80084e2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	60da      	str	r2, [r3, #12]
}
 80084e2:	bf00      	nop
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	58025408 	.word	0x58025408
 80084f4:	5802541c 	.word	0x5802541c
 80084f8:	58025430 	.word	0x58025430
 80084fc:	58025444 	.word	0x58025444
 8008500:	58025458 	.word	0x58025458
 8008504:	5802546c 	.word	0x5802546c
 8008508:	58025480 	.word	0x58025480
 800850c:	58025494 	.word	0x58025494

08008510 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a42      	ldr	r2, [pc, #264]	; (8008628 <DMA_CalcBaseAndBitshift+0x118>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d04a      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a41      	ldr	r2, [pc, #260]	; (800862c <DMA_CalcBaseAndBitshift+0x11c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d045      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a3f      	ldr	r2, [pc, #252]	; (8008630 <DMA_CalcBaseAndBitshift+0x120>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d040      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a3e      	ldr	r2, [pc, #248]	; (8008634 <DMA_CalcBaseAndBitshift+0x124>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d03b      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a3c      	ldr	r2, [pc, #240]	; (8008638 <DMA_CalcBaseAndBitshift+0x128>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d036      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a3b      	ldr	r2, [pc, #236]	; (800863c <DMA_CalcBaseAndBitshift+0x12c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d031      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a39      	ldr	r2, [pc, #228]	; (8008640 <DMA_CalcBaseAndBitshift+0x130>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d02c      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a38      	ldr	r2, [pc, #224]	; (8008644 <DMA_CalcBaseAndBitshift+0x134>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d027      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a36      	ldr	r2, [pc, #216]	; (8008648 <DMA_CalcBaseAndBitshift+0x138>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d022      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a35      	ldr	r2, [pc, #212]	; (800864c <DMA_CalcBaseAndBitshift+0x13c>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d01d      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a33      	ldr	r2, [pc, #204]	; (8008650 <DMA_CalcBaseAndBitshift+0x140>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d018      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a32      	ldr	r2, [pc, #200]	; (8008654 <DMA_CalcBaseAndBitshift+0x144>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d013      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a30      	ldr	r2, [pc, #192]	; (8008658 <DMA_CalcBaseAndBitshift+0x148>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d00e      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a2f      	ldr	r2, [pc, #188]	; (800865c <DMA_CalcBaseAndBitshift+0x14c>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d009      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a2d      	ldr	r2, [pc, #180]	; (8008660 <DMA_CalcBaseAndBitshift+0x150>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d004      	beq.n	80085b8 <DMA_CalcBaseAndBitshift+0xa8>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a2c      	ldr	r2, [pc, #176]	; (8008664 <DMA_CalcBaseAndBitshift+0x154>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d101      	bne.n	80085bc <DMA_CalcBaseAndBitshift+0xac>
 80085b8:	2301      	movs	r3, #1
 80085ba:	e000      	b.n	80085be <DMA_CalcBaseAndBitshift+0xae>
 80085bc:	2300      	movs	r3, #0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d024      	beq.n	800860c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	3b10      	subs	r3, #16
 80085ca:	4a27      	ldr	r2, [pc, #156]	; (8008668 <DMA_CalcBaseAndBitshift+0x158>)
 80085cc:	fba2 2303 	umull	r2, r3, r2, r3
 80085d0:	091b      	lsrs	r3, r3, #4
 80085d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	4a24      	ldr	r2, [pc, #144]	; (800866c <DMA_CalcBaseAndBitshift+0x15c>)
 80085dc:	5cd3      	ldrb	r3, [r2, r3]
 80085de:	461a      	mov	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d908      	bls.n	80085fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	4b1f      	ldr	r3, [pc, #124]	; (8008670 <DMA_CalcBaseAndBitshift+0x160>)
 80085f2:	4013      	ands	r3, r2
 80085f4:	1d1a      	adds	r2, r3, #4
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	659a      	str	r2, [r3, #88]	; 0x58
 80085fa:	e00d      	b.n	8008618 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	4b1b      	ldr	r3, [pc, #108]	; (8008670 <DMA_CalcBaseAndBitshift+0x160>)
 8008604:	4013      	ands	r3, r2
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6593      	str	r3, [r2, #88]	; 0x58
 800860a:	e005      	b.n	8008618 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	40020010 	.word	0x40020010
 800862c:	40020028 	.word	0x40020028
 8008630:	40020040 	.word	0x40020040
 8008634:	40020058 	.word	0x40020058
 8008638:	40020070 	.word	0x40020070
 800863c:	40020088 	.word	0x40020088
 8008640:	400200a0 	.word	0x400200a0
 8008644:	400200b8 	.word	0x400200b8
 8008648:	40020410 	.word	0x40020410
 800864c:	40020428 	.word	0x40020428
 8008650:	40020440 	.word	0x40020440
 8008654:	40020458 	.word	0x40020458
 8008658:	40020470 	.word	0x40020470
 800865c:	40020488 	.word	0x40020488
 8008660:	400204a0 	.word	0x400204a0
 8008664:	400204b8 	.word	0x400204b8
 8008668:	aaaaaaab 	.word	0xaaaaaaab
 800866c:	0800f508 	.word	0x0800f508
 8008670:	fffffc00 	.word	0xfffffc00

08008674 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d120      	bne.n	80086ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868c:	2b03      	cmp	r3, #3
 800868e:	d858      	bhi.n	8008742 <DMA_CheckFifoParam+0xce>
 8008690:	a201      	add	r2, pc, #4	; (adr r2, 8008698 <DMA_CheckFifoParam+0x24>)
 8008692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008696:	bf00      	nop
 8008698:	080086a9 	.word	0x080086a9
 800869c:	080086bb 	.word	0x080086bb
 80086a0:	080086a9 	.word	0x080086a9
 80086a4:	08008743 	.word	0x08008743
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d048      	beq.n	8008746 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086b8:	e045      	b.n	8008746 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086c2:	d142      	bne.n	800874a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086c8:	e03f      	b.n	800874a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086d2:	d123      	bne.n	800871c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d838      	bhi.n	800874e <DMA_CheckFifoParam+0xda>
 80086dc:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <DMA_CheckFifoParam+0x70>)
 80086de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e2:	bf00      	nop
 80086e4:	080086f5 	.word	0x080086f5
 80086e8:	080086fb 	.word	0x080086fb
 80086ec:	080086f5 	.word	0x080086f5
 80086f0:	0800870d 	.word	0x0800870d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	73fb      	strb	r3, [r7, #15]
        break;
 80086f8:	e030      	b.n	800875c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d025      	beq.n	8008752 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800870a:	e022      	b.n	8008752 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008714:	d11f      	bne.n	8008756 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800871a:	e01c      	b.n	8008756 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008720:	2b02      	cmp	r3, #2
 8008722:	d902      	bls.n	800872a <DMA_CheckFifoParam+0xb6>
 8008724:	2b03      	cmp	r3, #3
 8008726:	d003      	beq.n	8008730 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008728:	e018      	b.n	800875c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	73fb      	strb	r3, [r7, #15]
        break;
 800872e:	e015      	b.n	800875c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00e      	beq.n	800875a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	73fb      	strb	r3, [r7, #15]
    break;
 8008740:	e00b      	b.n	800875a <DMA_CheckFifoParam+0xe6>
        break;
 8008742:	bf00      	nop
 8008744:	e00a      	b.n	800875c <DMA_CheckFifoParam+0xe8>
        break;
 8008746:	bf00      	nop
 8008748:	e008      	b.n	800875c <DMA_CheckFifoParam+0xe8>
        break;
 800874a:	bf00      	nop
 800874c:	e006      	b.n	800875c <DMA_CheckFifoParam+0xe8>
        break;
 800874e:	bf00      	nop
 8008750:	e004      	b.n	800875c <DMA_CheckFifoParam+0xe8>
        break;
 8008752:	bf00      	nop
 8008754:	e002      	b.n	800875c <DMA_CheckFifoParam+0xe8>
        break;
 8008756:	bf00      	nop
 8008758:	e000      	b.n	800875c <DMA_CheckFifoParam+0xe8>
    break;
 800875a:	bf00      	nop
    }
  }

  return status;
 800875c:	7bfb      	ldrb	r3, [r7, #15]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop

0800876c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a38      	ldr	r2, [pc, #224]	; (8008860 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d022      	beq.n	80087ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a36      	ldr	r2, [pc, #216]	; (8008864 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d01d      	beq.n	80087ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a35      	ldr	r2, [pc, #212]	; (8008868 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d018      	beq.n	80087ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a33      	ldr	r2, [pc, #204]	; (800886c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d013      	beq.n	80087ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a32      	ldr	r2, [pc, #200]	; (8008870 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d00e      	beq.n	80087ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a30      	ldr	r2, [pc, #192]	; (8008874 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d009      	beq.n	80087ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a2f      	ldr	r2, [pc, #188]	; (8008878 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d004      	beq.n	80087ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a2d      	ldr	r2, [pc, #180]	; (800887c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d101      	bne.n	80087ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80087ca:	2301      	movs	r3, #1
 80087cc:	e000      	b.n	80087d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80087ce:	2300      	movs	r3, #0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d01a      	beq.n	800880a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	3b08      	subs	r3, #8
 80087dc:	4a28      	ldr	r2, [pc, #160]	; (8008880 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80087de:	fba2 2303 	umull	r2, r3, r2, r3
 80087e2:	091b      	lsrs	r3, r3, #4
 80087e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	4b26      	ldr	r3, [pc, #152]	; (8008884 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80087ea:	4413      	add	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	461a      	mov	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a24      	ldr	r2, [pc, #144]	; (8008888 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80087f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f003 031f 	and.w	r3, r3, #31
 8008800:	2201      	movs	r2, #1
 8008802:	409a      	lsls	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008808:	e024      	b.n	8008854 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	b2db      	uxtb	r3, r3
 8008810:	3b10      	subs	r3, #16
 8008812:	4a1e      	ldr	r2, [pc, #120]	; (800888c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008814:	fba2 2303 	umull	r2, r3, r2, r3
 8008818:	091b      	lsrs	r3, r3, #4
 800881a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	4a1c      	ldr	r2, [pc, #112]	; (8008890 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d806      	bhi.n	8008832 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	4a1b      	ldr	r2, [pc, #108]	; (8008894 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d902      	bls.n	8008832 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3308      	adds	r3, #8
 8008830:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	4b18      	ldr	r3, [pc, #96]	; (8008898 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008836:	4413      	add	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	461a      	mov	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a16      	ldr	r2, [pc, #88]	; (800889c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008844:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f003 031f 	and.w	r3, r3, #31
 800884c:	2201      	movs	r2, #1
 800884e:	409a      	lsls	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008854:	bf00      	nop
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	58025408 	.word	0x58025408
 8008864:	5802541c 	.word	0x5802541c
 8008868:	58025430 	.word	0x58025430
 800886c:	58025444 	.word	0x58025444
 8008870:	58025458 	.word	0x58025458
 8008874:	5802546c 	.word	0x5802546c
 8008878:	58025480 	.word	0x58025480
 800887c:	58025494 	.word	0x58025494
 8008880:	cccccccd 	.word	0xcccccccd
 8008884:	16009600 	.word	0x16009600
 8008888:	58025880 	.word	0x58025880
 800888c:	aaaaaaab 	.word	0xaaaaaaab
 8008890:	400204b8 	.word	0x400204b8
 8008894:	4002040f 	.word	0x4002040f
 8008898:	10008200 	.word	0x10008200
 800889c:	40020880 	.word	0x40020880

080088a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d04a      	beq.n	800894c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b08      	cmp	r3, #8
 80088ba:	d847      	bhi.n	800894c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a25      	ldr	r2, [pc, #148]	; (8008958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d022      	beq.n	800890c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a24      	ldr	r2, [pc, #144]	; (800895c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d01d      	beq.n	800890c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a22      	ldr	r2, [pc, #136]	; (8008960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d018      	beq.n	800890c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a21      	ldr	r2, [pc, #132]	; (8008964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d013      	beq.n	800890c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a1f      	ldr	r2, [pc, #124]	; (8008968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d00e      	beq.n	800890c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a1e      	ldr	r2, [pc, #120]	; (800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d009      	beq.n	800890c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a1c      	ldr	r2, [pc, #112]	; (8008970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d004      	beq.n	800890c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a1b      	ldr	r2, [pc, #108]	; (8008974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d101      	bne.n	8008910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800890c:	2301      	movs	r3, #1
 800890e:	e000      	b.n	8008912 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008910:	2300      	movs	r3, #0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00a      	beq.n	800892c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	4b17      	ldr	r3, [pc, #92]	; (8008978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	461a      	mov	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a15      	ldr	r2, [pc, #84]	; (800897c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008928:	671a      	str	r2, [r3, #112]	; 0x70
 800892a:	e009      	b.n	8008940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	4b14      	ldr	r3, [pc, #80]	; (8008980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	461a      	mov	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a11      	ldr	r2, [pc, #68]	; (8008984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800893e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	3b01      	subs	r3, #1
 8008944:	2201      	movs	r2, #1
 8008946:	409a      	lsls	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800894c:	bf00      	nop
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	58025408 	.word	0x58025408
 800895c:	5802541c 	.word	0x5802541c
 8008960:	58025430 	.word	0x58025430
 8008964:	58025444 	.word	0x58025444
 8008968:	58025458 	.word	0x58025458
 800896c:	5802546c 	.word	0x5802546c
 8008970:	58025480 	.word	0x58025480
 8008974:	58025494 	.word	0x58025494
 8008978:	1600963f 	.word	0x1600963f
 800897c:	58025940 	.word	0x58025940
 8008980:	1000823f 	.word	0x1000823f
 8008984:	40020940 	.word	0x40020940

08008988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008988:	b480      	push	{r7}
 800898a:	b089      	sub	sp, #36	; 0x24
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008992:	2300      	movs	r3, #0
 8008994:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008996:	4b86      	ldr	r3, [pc, #536]	; (8008bb0 <HAL_GPIO_Init+0x228>)
 8008998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800899a:	e18c      	b.n	8008cb6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	2101      	movs	r1, #1
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	fa01 f303 	lsl.w	r3, r1, r3
 80089a8:	4013      	ands	r3, r2
 80089aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 817e 	beq.w	8008cb0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f003 0303 	and.w	r3, r3, #3
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d005      	beq.n	80089cc <HAL_GPIO_Init+0x44>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f003 0303 	and.w	r3, r3, #3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d130      	bne.n	8008a2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	2203      	movs	r2, #3
 80089d8:	fa02 f303 	lsl.w	r3, r2, r3
 80089dc:	43db      	mvns	r3, r3
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	4013      	ands	r3, r2
 80089e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	68da      	ldr	r2, [r3, #12]
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	fa02 f303 	lsl.w	r3, r2, r3
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a02:	2201      	movs	r2, #1
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0a:	43db      	mvns	r3, r3
 8008a0c:	69ba      	ldr	r2, [r7, #24]
 8008a0e:	4013      	ands	r3, r2
 8008a10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	091b      	lsrs	r3, r3, #4
 8008a18:	f003 0201 	and.w	r2, r3, #1
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d017      	beq.n	8008a6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	2203      	movs	r2, #3
 8008a46:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4a:	43db      	mvns	r3, r3
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	689a      	ldr	r2, [r3, #8]
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5e:	69ba      	ldr	r2, [r7, #24]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d123      	bne.n	8008abe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	08da      	lsrs	r2, r3, #3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3208      	adds	r2, #8
 8008a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	220f      	movs	r2, #15
 8008a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a92:	43db      	mvns	r3, r3
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	4013      	ands	r3, r2
 8008a98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	691a      	ldr	r2, [r3, #16]
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	f003 0307 	and.w	r3, r3, #7
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	08da      	lsrs	r2, r3, #3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3208      	adds	r2, #8
 8008ab8:	69b9      	ldr	r1, [r7, #24]
 8008aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	005b      	lsls	r3, r3, #1
 8008ac8:	2203      	movs	r2, #3
 8008aca:	fa02 f303 	lsl.w	r3, r2, r3
 8008ace:	43db      	mvns	r3, r3
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f003 0203 	and.w	r2, r3, #3
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae6:	69ba      	ldr	r2, [r7, #24]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 80d8 	beq.w	8008cb0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b00:	4b2c      	ldr	r3, [pc, #176]	; (8008bb4 <HAL_GPIO_Init+0x22c>)
 8008b02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b06:	4a2b      	ldr	r2, [pc, #172]	; (8008bb4 <HAL_GPIO_Init+0x22c>)
 8008b08:	f043 0302 	orr.w	r3, r3, #2
 8008b0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008b10:	4b28      	ldr	r3, [pc, #160]	; (8008bb4 <HAL_GPIO_Init+0x22c>)
 8008b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b1e:	4a26      	ldr	r2, [pc, #152]	; (8008bb8 <HAL_GPIO_Init+0x230>)
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	089b      	lsrs	r3, r3, #2
 8008b24:	3302      	adds	r3, #2
 8008b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	f003 0303 	and.w	r3, r3, #3
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	220f      	movs	r2, #15
 8008b36:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3a:	43db      	mvns	r3, r3
 8008b3c:	69ba      	ldr	r2, [r7, #24]
 8008b3e:	4013      	ands	r3, r2
 8008b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a1d      	ldr	r2, [pc, #116]	; (8008bbc <HAL_GPIO_Init+0x234>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d04a      	beq.n	8008be0 <HAL_GPIO_Init+0x258>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a1c      	ldr	r2, [pc, #112]	; (8008bc0 <HAL_GPIO_Init+0x238>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d02b      	beq.n	8008baa <HAL_GPIO_Init+0x222>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a1b      	ldr	r2, [pc, #108]	; (8008bc4 <HAL_GPIO_Init+0x23c>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d025      	beq.n	8008ba6 <HAL_GPIO_Init+0x21e>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a1a      	ldr	r2, [pc, #104]	; (8008bc8 <HAL_GPIO_Init+0x240>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d01f      	beq.n	8008ba2 <HAL_GPIO_Init+0x21a>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a19      	ldr	r2, [pc, #100]	; (8008bcc <HAL_GPIO_Init+0x244>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d019      	beq.n	8008b9e <HAL_GPIO_Init+0x216>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a18      	ldr	r2, [pc, #96]	; (8008bd0 <HAL_GPIO_Init+0x248>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d013      	beq.n	8008b9a <HAL_GPIO_Init+0x212>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a17      	ldr	r2, [pc, #92]	; (8008bd4 <HAL_GPIO_Init+0x24c>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d00d      	beq.n	8008b96 <HAL_GPIO_Init+0x20e>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a16      	ldr	r2, [pc, #88]	; (8008bd8 <HAL_GPIO_Init+0x250>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d007      	beq.n	8008b92 <HAL_GPIO_Init+0x20a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a15      	ldr	r2, [pc, #84]	; (8008bdc <HAL_GPIO_Init+0x254>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d101      	bne.n	8008b8e <HAL_GPIO_Init+0x206>
 8008b8a:	2309      	movs	r3, #9
 8008b8c:	e029      	b.n	8008be2 <HAL_GPIO_Init+0x25a>
 8008b8e:	230a      	movs	r3, #10
 8008b90:	e027      	b.n	8008be2 <HAL_GPIO_Init+0x25a>
 8008b92:	2307      	movs	r3, #7
 8008b94:	e025      	b.n	8008be2 <HAL_GPIO_Init+0x25a>
 8008b96:	2306      	movs	r3, #6
 8008b98:	e023      	b.n	8008be2 <HAL_GPIO_Init+0x25a>
 8008b9a:	2305      	movs	r3, #5
 8008b9c:	e021      	b.n	8008be2 <HAL_GPIO_Init+0x25a>
 8008b9e:	2304      	movs	r3, #4
 8008ba0:	e01f      	b.n	8008be2 <HAL_GPIO_Init+0x25a>
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e01d      	b.n	8008be2 <HAL_GPIO_Init+0x25a>
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e01b      	b.n	8008be2 <HAL_GPIO_Init+0x25a>
 8008baa:	2301      	movs	r3, #1
 8008bac:	e019      	b.n	8008be2 <HAL_GPIO_Init+0x25a>
 8008bae:	bf00      	nop
 8008bb0:	58000080 	.word	0x58000080
 8008bb4:	58024400 	.word	0x58024400
 8008bb8:	58000400 	.word	0x58000400
 8008bbc:	58020000 	.word	0x58020000
 8008bc0:	58020400 	.word	0x58020400
 8008bc4:	58020800 	.word	0x58020800
 8008bc8:	58020c00 	.word	0x58020c00
 8008bcc:	58021000 	.word	0x58021000
 8008bd0:	58021400 	.word	0x58021400
 8008bd4:	58021800 	.word	0x58021800
 8008bd8:	58021c00 	.word	0x58021c00
 8008bdc:	58022400 	.word	0x58022400
 8008be0:	2300      	movs	r3, #0
 8008be2:	69fa      	ldr	r2, [r7, #28]
 8008be4:	f002 0203 	and.w	r2, r2, #3
 8008be8:	0092      	lsls	r2, r2, #2
 8008bea:	4093      	lsls	r3, r2
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008bf2:	4938      	ldr	r1, [pc, #224]	; (8008cd4 <HAL_GPIO_Init+0x34c>)
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	089b      	lsrs	r3, r3, #2
 8008bf8:	3302      	adds	r3, #2
 8008bfa:	69ba      	ldr	r2, [r7, #24]
 8008bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	43db      	mvns	r3, r3
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	43db      	mvns	r3, r3
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d003      	beq.n	8008c54 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	43db      	mvns	r3, r3
 8008c66:	69ba      	ldr	r2, [r7, #24]
 8008c68:	4013      	ands	r3, r2
 8008c6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d003      	beq.n	8008c80 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	43db      	mvns	r3, r3
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	4013      	ands	r3, r2
 8008c94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f47f ae6b 	bne.w	800899c <HAL_GPIO_Init+0x14>
  }
}
 8008cc6:	bf00      	nop
 8008cc8:	bf00      	nop
 8008cca:	3724      	adds	r7, #36	; 0x24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	58000400 	.word	0x58000400

08008cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	807b      	strh	r3, [r7, #2]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ce8:	787b      	ldrb	r3, [r7, #1]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008cee:	887a      	ldrh	r2, [r7, #2]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008cf4:	e003      	b.n	8008cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008cf6:	887b      	ldrh	r3, [r7, #2]
 8008cf8:	041a      	lsls	r2, r3, #16
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	619a      	str	r2, [r3, #24]
}
 8008cfe:	bf00      	nop
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
	...

08008d0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d14:	4b19      	ldr	r3, [pc, #100]	; (8008d7c <HAL_PWREx_ConfigSupply+0x70>)
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d00a      	beq.n	8008d36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d20:	4b16      	ldr	r3, [pc, #88]	; (8008d7c <HAL_PWREx_ConfigSupply+0x70>)
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f003 0307 	and.w	r3, r3, #7
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d001      	beq.n	8008d32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e01f      	b.n	8008d72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	e01d      	b.n	8008d72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d36:	4b11      	ldr	r3, [pc, #68]	; (8008d7c <HAL_PWREx_ConfigSupply+0x70>)
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	f023 0207 	bic.w	r2, r3, #7
 8008d3e:	490f      	ldr	r1, [pc, #60]	; (8008d7c <HAL_PWREx_ConfigSupply+0x70>)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d46:	f7fc fec9 	bl	8005adc <HAL_GetTick>
 8008d4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d4c:	e009      	b.n	8008d62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d4e:	f7fc fec5 	bl	8005adc <HAL_GetTick>
 8008d52:	4602      	mov	r2, r0
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d5c:	d901      	bls.n	8008d62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e007      	b.n	8008d72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d62:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <HAL_PWREx_ConfigSupply+0x70>)
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d6e:	d1ee      	bne.n	8008d4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	58024800 	.word	0x58024800

08008d80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08c      	sub	sp, #48	; 0x30
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e39d      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 8087 	beq.w	8008eae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008da0:	4b88      	ldr	r3, [pc, #544]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008daa:	4b86      	ldr	r3, [pc, #536]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db2:	2b10      	cmp	r3, #16
 8008db4:	d007      	beq.n	8008dc6 <HAL_RCC_OscConfig+0x46>
 8008db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db8:	2b18      	cmp	r3, #24
 8008dba:	d110      	bne.n	8008dde <HAL_RCC_OscConfig+0x5e>
 8008dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d10b      	bne.n	8008dde <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dc6:	4b7f      	ldr	r3, [pc, #508]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d06c      	beq.n	8008eac <HAL_RCC_OscConfig+0x12c>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d168      	bne.n	8008eac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e377      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008de6:	d106      	bne.n	8008df6 <HAL_RCC_OscConfig+0x76>
 8008de8:	4b76      	ldr	r3, [pc, #472]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a75      	ldr	r2, [pc, #468]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	e02e      	b.n	8008e54 <HAL_RCC_OscConfig+0xd4>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10c      	bne.n	8008e18 <HAL_RCC_OscConfig+0x98>
 8008dfe:	4b71      	ldr	r3, [pc, #452]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a70      	ldr	r2, [pc, #448]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	4b6e      	ldr	r3, [pc, #440]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a6d      	ldr	r2, [pc, #436]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e14:	6013      	str	r3, [r2, #0]
 8008e16:	e01d      	b.n	8008e54 <HAL_RCC_OscConfig+0xd4>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e20:	d10c      	bne.n	8008e3c <HAL_RCC_OscConfig+0xbc>
 8008e22:	4b68      	ldr	r3, [pc, #416]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a67      	ldr	r2, [pc, #412]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	4b65      	ldr	r3, [pc, #404]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a64      	ldr	r2, [pc, #400]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	e00b      	b.n	8008e54 <HAL_RCC_OscConfig+0xd4>
 8008e3c:	4b61      	ldr	r3, [pc, #388]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a60      	ldr	r2, [pc, #384]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e46:	6013      	str	r3, [r2, #0]
 8008e48:	4b5e      	ldr	r3, [pc, #376]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a5d      	ldr	r2, [pc, #372]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d013      	beq.n	8008e84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e5c:	f7fc fe3e 	bl	8005adc <HAL_GetTick>
 8008e60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e62:	e008      	b.n	8008e76 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e64:	f7fc fe3a 	bl	8005adc <HAL_GetTick>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	2b64      	cmp	r3, #100	; 0x64
 8008e70:	d901      	bls.n	8008e76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e32b      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e76:	4b53      	ldr	r3, [pc, #332]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d0f0      	beq.n	8008e64 <HAL_RCC_OscConfig+0xe4>
 8008e82:	e014      	b.n	8008eae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e84:	f7fc fe2a 	bl	8005adc <HAL_GetTick>
 8008e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e8a:	e008      	b.n	8008e9e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e8c:	f7fc fe26 	bl	8005adc <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	2b64      	cmp	r3, #100	; 0x64
 8008e98:	d901      	bls.n	8008e9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e317      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e9e:	4b49      	ldr	r3, [pc, #292]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1f0      	bne.n	8008e8c <HAL_RCC_OscConfig+0x10c>
 8008eaa:	e000      	b.n	8008eae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0302 	and.w	r3, r3, #2
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 808c 	beq.w	8008fd4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ebc:	4b41      	ldr	r3, [pc, #260]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ec4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ec6:	4b3f      	ldr	r3, [pc, #252]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d007      	beq.n	8008ee2 <HAL_RCC_OscConfig+0x162>
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	2b18      	cmp	r3, #24
 8008ed6:	d137      	bne.n	8008f48 <HAL_RCC_OscConfig+0x1c8>
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	f003 0303 	and.w	r3, r3, #3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d132      	bne.n	8008f48 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ee2:	4b38      	ldr	r3, [pc, #224]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0304 	and.w	r3, r3, #4
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d005      	beq.n	8008efa <HAL_RCC_OscConfig+0x17a>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e2e9      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008efa:	4b32      	ldr	r3, [pc, #200]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f023 0219 	bic.w	r2, r3, #25
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	492f      	ldr	r1, [pc, #188]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f0c:	f7fc fde6 	bl	8005adc <HAL_GetTick>
 8008f10:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f12:	e008      	b.n	8008f26 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f14:	f7fc fde2 	bl	8005adc <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d901      	bls.n	8008f26 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e2d3      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f26:	4b27      	ldr	r3, [pc, #156]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0304 	and.w	r3, r3, #4
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0f0      	beq.n	8008f14 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f32:	4b24      	ldr	r3, [pc, #144]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	061b      	lsls	r3, r3, #24
 8008f40:	4920      	ldr	r1, [pc, #128]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f46:	e045      	b.n	8008fd4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d026      	beq.n	8008f9e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f50:	4b1c      	ldr	r3, [pc, #112]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f023 0219 	bic.w	r2, r3, #25
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	4919      	ldr	r1, [pc, #100]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f62:	f7fc fdbb 	bl	8005adc <HAL_GetTick>
 8008f66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f68:	e008      	b.n	8008f7c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f6a:	f7fc fdb7 	bl	8005adc <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d901      	bls.n	8008f7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e2a8      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f7c:	4b11      	ldr	r3, [pc, #68]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0f0      	beq.n	8008f6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f88:	4b0e      	ldr	r3, [pc, #56]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	061b      	lsls	r3, r3, #24
 8008f96:	490b      	ldr	r1, [pc, #44]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	604b      	str	r3, [r1, #4]
 8008f9c:	e01a      	b.n	8008fd4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f9e:	4b09      	ldr	r3, [pc, #36]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a08      	ldr	r2, [pc, #32]	; (8008fc4 <HAL_RCC_OscConfig+0x244>)
 8008fa4:	f023 0301 	bic.w	r3, r3, #1
 8008fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008faa:	f7fc fd97 	bl	8005adc <HAL_GetTick>
 8008fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008fb0:	e00a      	b.n	8008fc8 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fb2:	f7fc fd93 	bl	8005adc <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d903      	bls.n	8008fc8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e284      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
 8008fc4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008fc8:	4b96      	ldr	r3, [pc, #600]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0304 	and.w	r3, r3, #4
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1ee      	bne.n	8008fb2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0310 	and.w	r3, r3, #16
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d06a      	beq.n	80090b6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fe0:	4b90      	ldr	r3, [pc, #576]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fe8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fea:	4b8e      	ldr	r3, [pc, #568]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8008fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fee:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	2b08      	cmp	r3, #8
 8008ff4:	d007      	beq.n	8009006 <HAL_RCC_OscConfig+0x286>
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	2b18      	cmp	r3, #24
 8008ffa:	d11b      	bne.n	8009034 <HAL_RCC_OscConfig+0x2b4>
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	f003 0303 	and.w	r3, r3, #3
 8009002:	2b01      	cmp	r3, #1
 8009004:	d116      	bne.n	8009034 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009006:	4b87      	ldr	r3, [pc, #540]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800900e:	2b00      	cmp	r3, #0
 8009010:	d005      	beq.n	800901e <HAL_RCC_OscConfig+0x29e>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	2b80      	cmp	r3, #128	; 0x80
 8009018:	d001      	beq.n	800901e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e257      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800901e:	4b81      	ldr	r3, [pc, #516]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	061b      	lsls	r3, r3, #24
 800902c:	497d      	ldr	r1, [pc, #500]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800902e:	4313      	orrs	r3, r2
 8009030:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009032:	e040      	b.n	80090b6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	69db      	ldr	r3, [r3, #28]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d023      	beq.n	8009084 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800903c:	4b79      	ldr	r3, [pc, #484]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a78      	ldr	r2, [pc, #480]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009048:	f7fc fd48 	bl	8005adc <HAL_GetTick>
 800904c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800904e:	e008      	b.n	8009062 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009050:	f7fc fd44 	bl	8005adc <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	2b02      	cmp	r3, #2
 800905c:	d901      	bls.n	8009062 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e235      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009062:	4b70      	ldr	r3, [pc, #448]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0f0      	beq.n	8009050 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800906e:	4b6d      	ldr	r3, [pc, #436]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	061b      	lsls	r3, r3, #24
 800907c:	4969      	ldr	r1, [pc, #420]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800907e:	4313      	orrs	r3, r2
 8009080:	60cb      	str	r3, [r1, #12]
 8009082:	e018      	b.n	80090b6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009084:	4b67      	ldr	r3, [pc, #412]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a66      	ldr	r2, [pc, #408]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800908a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800908e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009090:	f7fc fd24 	bl	8005adc <HAL_GetTick>
 8009094:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009096:	e008      	b.n	80090aa <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009098:	f7fc fd20 	bl	8005adc <HAL_GetTick>
 800909c:	4602      	mov	r2, r0
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e211      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090aa:	4b5e      	ldr	r3, [pc, #376]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1f0      	bne.n	8009098 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0308 	and.w	r3, r3, #8
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d036      	beq.n	8009130 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d019      	beq.n	80090fe <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090ca:	4b56      	ldr	r3, [pc, #344]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 80090cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ce:	4a55      	ldr	r2, [pc, #340]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 80090d0:	f043 0301 	orr.w	r3, r3, #1
 80090d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090d6:	f7fc fd01 	bl	8005adc <HAL_GetTick>
 80090da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090dc:	e008      	b.n	80090f0 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80090de:	f7fc fcfd 	bl	8005adc <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d901      	bls.n	80090f0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e1ee      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090f0:	4b4c      	ldr	r3, [pc, #304]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 80090f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0f0      	beq.n	80090de <HAL_RCC_OscConfig+0x35e>
 80090fc:	e018      	b.n	8009130 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090fe:	4b49      	ldr	r3, [pc, #292]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009102:	4a48      	ldr	r2, [pc, #288]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009104:	f023 0301 	bic.w	r3, r3, #1
 8009108:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800910a:	f7fc fce7 	bl	8005adc <HAL_GetTick>
 800910e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009110:	e008      	b.n	8009124 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009112:	f7fc fce3 	bl	8005adc <HAL_GetTick>
 8009116:	4602      	mov	r2, r0
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	2b02      	cmp	r3, #2
 800911e:	d901      	bls.n	8009124 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009120:	2303      	movs	r3, #3
 8009122:	e1d4      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009124:	4b3f      	ldr	r3, [pc, #252]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009128:	f003 0302 	and.w	r3, r3, #2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1f0      	bne.n	8009112 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0320 	and.w	r3, r3, #32
 8009138:	2b00      	cmp	r3, #0
 800913a:	d036      	beq.n	80091aa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d019      	beq.n	8009178 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009144:	4b37      	ldr	r3, [pc, #220]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a36      	ldr	r2, [pc, #216]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800914a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800914e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009150:	f7fc fcc4 	bl	8005adc <HAL_GetTick>
 8009154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009156:	e008      	b.n	800916a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009158:	f7fc fcc0 	bl	8005adc <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	2b02      	cmp	r3, #2
 8009164:	d901      	bls.n	800916a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e1b1      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800916a:	4b2e      	ldr	r3, [pc, #184]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0f0      	beq.n	8009158 <HAL_RCC_OscConfig+0x3d8>
 8009176:	e018      	b.n	80091aa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009178:	4b2a      	ldr	r3, [pc, #168]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a29      	ldr	r2, [pc, #164]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800917e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009182:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009184:	f7fc fcaa 	bl	8005adc <HAL_GetTick>
 8009188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800918a:	e008      	b.n	800919e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800918c:	f7fc fca6 	bl	8005adc <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	2b02      	cmp	r3, #2
 8009198:	d901      	bls.n	800919e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e197      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800919e:	4b21      	ldr	r3, [pc, #132]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1f0      	bne.n	800918c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 8086 	beq.w	80092c4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80091b8:	4b1b      	ldr	r3, [pc, #108]	; (8009228 <HAL_RCC_OscConfig+0x4a8>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a1a      	ldr	r2, [pc, #104]	; (8009228 <HAL_RCC_OscConfig+0x4a8>)
 80091be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091c4:	f7fc fc8a 	bl	8005adc <HAL_GetTick>
 80091c8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091ca:	e008      	b.n	80091de <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80091cc:	f7fc fc86 	bl	8005adc <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	2b64      	cmp	r3, #100	; 0x64
 80091d8:	d901      	bls.n	80091de <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e177      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091de:	4b12      	ldr	r3, [pc, #72]	; (8009228 <HAL_RCC_OscConfig+0x4a8>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0f0      	beq.n	80091cc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d106      	bne.n	8009200 <HAL_RCC_OscConfig+0x480>
 80091f2:	4b0c      	ldr	r3, [pc, #48]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 80091f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f6:	4a0b      	ldr	r2, [pc, #44]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 80091f8:	f043 0301 	orr.w	r3, r3, #1
 80091fc:	6713      	str	r3, [r2, #112]	; 0x70
 80091fe:	e032      	b.n	8009266 <HAL_RCC_OscConfig+0x4e6>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d111      	bne.n	800922c <HAL_RCC_OscConfig+0x4ac>
 8009208:	4b06      	ldr	r3, [pc, #24]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800920a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800920c:	4a05      	ldr	r2, [pc, #20]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800920e:	f023 0301 	bic.w	r3, r3, #1
 8009212:	6713      	str	r3, [r2, #112]	; 0x70
 8009214:	4b03      	ldr	r3, [pc, #12]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 8009216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009218:	4a02      	ldr	r2, [pc, #8]	; (8009224 <HAL_RCC_OscConfig+0x4a4>)
 800921a:	f023 0304 	bic.w	r3, r3, #4
 800921e:	6713      	str	r3, [r2, #112]	; 0x70
 8009220:	e021      	b.n	8009266 <HAL_RCC_OscConfig+0x4e6>
 8009222:	bf00      	nop
 8009224:	58024400 	.word	0x58024400
 8009228:	58024800 	.word	0x58024800
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	2b05      	cmp	r3, #5
 8009232:	d10c      	bne.n	800924e <HAL_RCC_OscConfig+0x4ce>
 8009234:	4b83      	ldr	r3, [pc, #524]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009238:	4a82      	ldr	r2, [pc, #520]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800923a:	f043 0304 	orr.w	r3, r3, #4
 800923e:	6713      	str	r3, [r2, #112]	; 0x70
 8009240:	4b80      	ldr	r3, [pc, #512]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009244:	4a7f      	ldr	r2, [pc, #508]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009246:	f043 0301 	orr.w	r3, r3, #1
 800924a:	6713      	str	r3, [r2, #112]	; 0x70
 800924c:	e00b      	b.n	8009266 <HAL_RCC_OscConfig+0x4e6>
 800924e:	4b7d      	ldr	r3, [pc, #500]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009252:	4a7c      	ldr	r2, [pc, #496]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009254:	f023 0301 	bic.w	r3, r3, #1
 8009258:	6713      	str	r3, [r2, #112]	; 0x70
 800925a:	4b7a      	ldr	r3, [pc, #488]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800925c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925e:	4a79      	ldr	r2, [pc, #484]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009260:	f023 0304 	bic.w	r3, r3, #4
 8009264:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d015      	beq.n	800929a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800926e:	f7fc fc35 	bl	8005adc <HAL_GetTick>
 8009272:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009274:	e00a      	b.n	800928c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009276:	f7fc fc31 	bl	8005adc <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	f241 3288 	movw	r2, #5000	; 0x1388
 8009284:	4293      	cmp	r3, r2
 8009286:	d901      	bls.n	800928c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e120      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800928c:	4b6d      	ldr	r3, [pc, #436]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800928e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b00      	cmp	r3, #0
 8009296:	d0ee      	beq.n	8009276 <HAL_RCC_OscConfig+0x4f6>
 8009298:	e014      	b.n	80092c4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800929a:	f7fc fc1f 	bl	8005adc <HAL_GetTick>
 800929e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092a0:	e00a      	b.n	80092b8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092a2:	f7fc fc1b 	bl	8005adc <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d901      	bls.n	80092b8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e10a      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092b8:	4b62      	ldr	r3, [pc, #392]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80092ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092bc:	f003 0302 	and.w	r3, r3, #2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1ee      	bne.n	80092a2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 80ff 	beq.w	80094cc <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80092ce:	4b5d      	ldr	r3, [pc, #372]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092d6:	2b18      	cmp	r3, #24
 80092d8:	f000 80ba 	beq.w	8009450 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	f040 8095 	bne.w	8009410 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092e6:	4b57      	ldr	r3, [pc, #348]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a56      	ldr	r2, [pc, #344]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80092ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092f2:	f7fc fbf3 	bl	8005adc <HAL_GetTick>
 80092f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092f8:	e008      	b.n	800930c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092fa:	f7fc fbef 	bl	8005adc <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	2b02      	cmp	r3, #2
 8009306:	d901      	bls.n	800930c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e0e0      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800930c:	4b4d      	ldr	r3, [pc, #308]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1f0      	bne.n	80092fa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009318:	4b4a      	ldr	r3, [pc, #296]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800931a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800931c:	4b4a      	ldr	r3, [pc, #296]	; (8009448 <HAL_RCC_OscConfig+0x6c8>)
 800931e:	4013      	ands	r3, r2
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009328:	0112      	lsls	r2, r2, #4
 800932a:	430a      	orrs	r2, r1
 800932c:	4945      	ldr	r1, [pc, #276]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800932e:	4313      	orrs	r3, r2
 8009330:	628b      	str	r3, [r1, #40]	; 0x28
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009336:	3b01      	subs	r3, #1
 8009338:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009340:	3b01      	subs	r3, #1
 8009342:	025b      	lsls	r3, r3, #9
 8009344:	b29b      	uxth	r3, r3
 8009346:	431a      	orrs	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934c:	3b01      	subs	r3, #1
 800934e:	041b      	lsls	r3, r3, #16
 8009350:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009354:	431a      	orrs	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800935a:	3b01      	subs	r3, #1
 800935c:	061b      	lsls	r3, r3, #24
 800935e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009362:	4938      	ldr	r1, [pc, #224]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009364:	4313      	orrs	r3, r2
 8009366:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009368:	4b36      	ldr	r3, [pc, #216]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800936a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936c:	4a35      	ldr	r2, [pc, #212]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800936e:	f023 0301 	bic.w	r3, r3, #1
 8009372:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009374:	4b33      	ldr	r3, [pc, #204]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009378:	4b34      	ldr	r3, [pc, #208]	; (800944c <HAL_RCC_OscConfig+0x6cc>)
 800937a:	4013      	ands	r3, r2
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009380:	00d2      	lsls	r2, r2, #3
 8009382:	4930      	ldr	r1, [pc, #192]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009384:	4313      	orrs	r3, r2
 8009386:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009388:	4b2e      	ldr	r3, [pc, #184]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	f023 020c 	bic.w	r2, r3, #12
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009394:	492b      	ldr	r1, [pc, #172]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009396:	4313      	orrs	r3, r2
 8009398:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800939a:	4b2a      	ldr	r3, [pc, #168]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 800939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939e:	f023 0202 	bic.w	r2, r3, #2
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a6:	4927      	ldr	r1, [pc, #156]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80093ac:	4b25      	ldr	r3, [pc, #148]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	4a24      	ldr	r2, [pc, #144]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093b8:	4b22      	ldr	r3, [pc, #136]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093bc:	4a21      	ldr	r2, [pc, #132]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80093c4:	4b1f      	ldr	r3, [pc, #124]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	4a1e      	ldr	r2, [pc, #120]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80093d0:	4b1c      	ldr	r3, [pc, #112]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d4:	4a1b      	ldr	r2, [pc, #108]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093d6:	f043 0301 	orr.w	r3, r3, #1
 80093da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093dc:	4b19      	ldr	r3, [pc, #100]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a18      	ldr	r2, [pc, #96]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 80093e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093e8:	f7fc fb78 	bl	8005adc <HAL_GetTick>
 80093ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093ee:	e008      	b.n	8009402 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093f0:	f7fc fb74 	bl	8005adc <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d901      	bls.n	8009402 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e065      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009402:	4b10      	ldr	r3, [pc, #64]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0f0      	beq.n	80093f0 <HAL_RCC_OscConfig+0x670>
 800940e:	e05d      	b.n	80094cc <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009410:	4b0c      	ldr	r3, [pc, #48]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a0b      	ldr	r2, [pc, #44]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800941a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800941c:	f7fc fb5e 	bl	8005adc <HAL_GetTick>
 8009420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009422:	e008      	b.n	8009436 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009424:	f7fc fb5a 	bl	8005adc <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	2b02      	cmp	r3, #2
 8009430:	d901      	bls.n	8009436 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	e04b      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009436:	4b03      	ldr	r3, [pc, #12]	; (8009444 <HAL_RCC_OscConfig+0x6c4>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1f0      	bne.n	8009424 <HAL_RCC_OscConfig+0x6a4>
 8009442:	e043      	b.n	80094cc <HAL_RCC_OscConfig+0x74c>
 8009444:	58024400 	.word	0x58024400
 8009448:	fffffc0c 	.word	0xfffffc0c
 800944c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009450:	4b21      	ldr	r3, [pc, #132]	; (80094d8 <HAL_RCC_OscConfig+0x758>)
 8009452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009454:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009456:	4b20      	ldr	r3, [pc, #128]	; (80094d8 <HAL_RCC_OscConfig+0x758>)
 8009458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009460:	2b01      	cmp	r3, #1
 8009462:	d031      	beq.n	80094c8 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	f003 0203 	and.w	r2, r3, #3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800946e:	429a      	cmp	r2, r3
 8009470:	d12a      	bne.n	80094c8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	091b      	lsrs	r3, r3, #4
 8009476:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800947e:	429a      	cmp	r2, r3
 8009480:	d122      	bne.n	80094c8 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800948e:	429a      	cmp	r2, r3
 8009490:	d11a      	bne.n	80094c8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	0a5b      	lsrs	r3, r3, #9
 8009496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d111      	bne.n	80094c8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	0c1b      	lsrs	r3, r3, #16
 80094a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d108      	bne.n	80094c8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	0e1b      	lsrs	r3, r3, #24
 80094ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d001      	beq.n	80094cc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e000      	b.n	80094ce <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3730      	adds	r7, #48	; 0x30
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	58024400 	.word	0x58024400

080094dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e19c      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80094f0:	4b8a      	ldr	r3, [pc, #552]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 030f 	and.w	r3, r3, #15
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d910      	bls.n	8009520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094fe:	4b87      	ldr	r3, [pc, #540]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f023 020f 	bic.w	r2, r3, #15
 8009506:	4985      	ldr	r1, [pc, #532]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	4313      	orrs	r3, r2
 800950c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800950e:	4b83      	ldr	r3, [pc, #524]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 030f 	and.w	r3, r3, #15
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	429a      	cmp	r2, r3
 800951a:	d001      	beq.n	8009520 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	e184      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0304 	and.w	r3, r3, #4
 8009528:	2b00      	cmp	r3, #0
 800952a:	d010      	beq.n	800954e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691a      	ldr	r2, [r3, #16]
 8009530:	4b7b      	ldr	r3, [pc, #492]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009538:	429a      	cmp	r2, r3
 800953a:	d908      	bls.n	800954e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800953c:	4b78      	ldr	r3, [pc, #480]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	4975      	ldr	r1, [pc, #468]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800954a:	4313      	orrs	r3, r2
 800954c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 0308 	and.w	r3, r3, #8
 8009556:	2b00      	cmp	r3, #0
 8009558:	d010      	beq.n	800957c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	695a      	ldr	r2, [r3, #20]
 800955e:	4b70      	ldr	r3, [pc, #448]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009566:	429a      	cmp	r2, r3
 8009568:	d908      	bls.n	800957c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800956a:	4b6d      	ldr	r3, [pc, #436]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	496a      	ldr	r1, [pc, #424]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 8009578:	4313      	orrs	r3, r2
 800957a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0310 	and.w	r3, r3, #16
 8009584:	2b00      	cmp	r3, #0
 8009586:	d010      	beq.n	80095aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	699a      	ldr	r2, [r3, #24]
 800958c:	4b64      	ldr	r3, [pc, #400]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800958e:	69db      	ldr	r3, [r3, #28]
 8009590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009594:	429a      	cmp	r2, r3
 8009596:	d908      	bls.n	80095aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009598:	4b61      	ldr	r3, [pc, #388]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800959a:	69db      	ldr	r3, [r3, #28]
 800959c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	495e      	ldr	r1, [pc, #376]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0320 	and.w	r3, r3, #32
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d010      	beq.n	80095d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	69da      	ldr	r2, [r3, #28]
 80095ba:	4b59      	ldr	r3, [pc, #356]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d908      	bls.n	80095d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80095c6:	4b56      	ldr	r3, [pc, #344]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	4953      	ldr	r1, [pc, #332]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0302 	and.w	r3, r3, #2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d010      	beq.n	8009606 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68da      	ldr	r2, [r3, #12]
 80095e8:	4b4d      	ldr	r3, [pc, #308]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	f003 030f 	and.w	r3, r3, #15
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d908      	bls.n	8009606 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095f4:	4b4a      	ldr	r3, [pc, #296]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	f023 020f 	bic.w	r2, r3, #15
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	4947      	ldr	r1, [pc, #284]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 8009602:	4313      	orrs	r3, r2
 8009604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d055      	beq.n	80096be <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009612:	4b43      	ldr	r3, [pc, #268]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	4940      	ldr	r1, [pc, #256]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 8009620:	4313      	orrs	r3, r2
 8009622:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	2b02      	cmp	r3, #2
 800962a:	d107      	bne.n	800963c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800962c:	4b3c      	ldr	r3, [pc, #240]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d121      	bne.n	800967c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e0f6      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	2b03      	cmp	r3, #3
 8009642:	d107      	bne.n	8009654 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009644:	4b36      	ldr	r3, [pc, #216]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d115      	bne.n	800967c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e0ea      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d107      	bne.n	800966c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800965c:	4b30      	ldr	r3, [pc, #192]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009664:	2b00      	cmp	r3, #0
 8009666:	d109      	bne.n	800967c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e0de      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800966c:	4b2c      	ldr	r3, [pc, #176]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e0d6      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800967c:	4b28      	ldr	r3, [pc, #160]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	f023 0207 	bic.w	r2, r3, #7
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	4925      	ldr	r1, [pc, #148]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 800968a:	4313      	orrs	r3, r2
 800968c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800968e:	f7fc fa25 	bl	8005adc <HAL_GetTick>
 8009692:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009694:	e00a      	b.n	80096ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009696:	f7fc fa21 	bl	8005adc <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d901      	bls.n	80096ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e0be      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096ac:	4b1c      	ldr	r3, [pc, #112]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	00db      	lsls	r3, r3, #3
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d1eb      	bne.n	8009696 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0302 	and.w	r3, r3, #2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d010      	beq.n	80096ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68da      	ldr	r2, [r3, #12]
 80096ce:	4b14      	ldr	r3, [pc, #80]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	f003 030f 	and.w	r3, r3, #15
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d208      	bcs.n	80096ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096da:	4b11      	ldr	r3, [pc, #68]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	f023 020f 	bic.w	r2, r3, #15
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	490e      	ldr	r1, [pc, #56]	; (8009720 <HAL_RCC_ClockConfig+0x244>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80096ec:	4b0b      	ldr	r3, [pc, #44]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 030f 	and.w	r3, r3, #15
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d214      	bcs.n	8009724 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096fa:	4b08      	ldr	r3, [pc, #32]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f023 020f 	bic.w	r2, r3, #15
 8009702:	4906      	ldr	r1, [pc, #24]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	4313      	orrs	r3, r2
 8009708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800970a:	4b04      	ldr	r3, [pc, #16]	; (800971c <HAL_RCC_ClockConfig+0x240>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 030f 	and.w	r3, r3, #15
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	429a      	cmp	r2, r3
 8009716:	d005      	beq.n	8009724 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e086      	b.n	800982a <HAL_RCC_ClockConfig+0x34e>
 800971c:	52002000 	.word	0x52002000
 8009720:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 0304 	and.w	r3, r3, #4
 800972c:	2b00      	cmp	r3, #0
 800972e:	d010      	beq.n	8009752 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	691a      	ldr	r2, [r3, #16]
 8009734:	4b3f      	ldr	r3, [pc, #252]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800973c:	429a      	cmp	r2, r3
 800973e:	d208      	bcs.n	8009752 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009740:	4b3c      	ldr	r3, [pc, #240]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	4939      	ldr	r1, [pc, #228]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 800974e:	4313      	orrs	r3, r2
 8009750:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0308 	and.w	r3, r3, #8
 800975a:	2b00      	cmp	r3, #0
 800975c:	d010      	beq.n	8009780 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	695a      	ldr	r2, [r3, #20]
 8009762:	4b34      	ldr	r3, [pc, #208]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800976a:	429a      	cmp	r2, r3
 800976c:	d208      	bcs.n	8009780 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800976e:	4b31      	ldr	r3, [pc, #196]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	492e      	ldr	r1, [pc, #184]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 800977c:	4313      	orrs	r3, r2
 800977e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 0310 	and.w	r3, r3, #16
 8009788:	2b00      	cmp	r3, #0
 800978a:	d010      	beq.n	80097ae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699a      	ldr	r2, [r3, #24]
 8009790:	4b28      	ldr	r3, [pc, #160]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 8009792:	69db      	ldr	r3, [r3, #28]
 8009794:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009798:	429a      	cmp	r2, r3
 800979a:	d208      	bcs.n	80097ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800979c:	4b25      	ldr	r3, [pc, #148]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 800979e:	69db      	ldr	r3, [r3, #28]
 80097a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	4922      	ldr	r1, [pc, #136]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d010      	beq.n	80097dc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	69da      	ldr	r2, [r3, #28]
 80097be:	4b1d      	ldr	r3, [pc, #116]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d208      	bcs.n	80097dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80097ca:	4b1a      	ldr	r3, [pc, #104]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	4917      	ldr	r1, [pc, #92]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 80097d8:	4313      	orrs	r3, r2
 80097da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80097dc:	f000 f834 	bl	8009848 <HAL_RCC_GetSysClockFreq>
 80097e0:	4602      	mov	r2, r0
 80097e2:	4b14      	ldr	r3, [pc, #80]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	0a1b      	lsrs	r3, r3, #8
 80097e8:	f003 030f 	and.w	r3, r3, #15
 80097ec:	4912      	ldr	r1, [pc, #72]	; (8009838 <HAL_RCC_ClockConfig+0x35c>)
 80097ee:	5ccb      	ldrb	r3, [r1, r3]
 80097f0:	f003 031f 	and.w	r3, r3, #31
 80097f4:	fa22 f303 	lsr.w	r3, r2, r3
 80097f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80097fa:	4b0e      	ldr	r3, [pc, #56]	; (8009834 <HAL_RCC_ClockConfig+0x358>)
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	f003 030f 	and.w	r3, r3, #15
 8009802:	4a0d      	ldr	r2, [pc, #52]	; (8009838 <HAL_RCC_ClockConfig+0x35c>)
 8009804:	5cd3      	ldrb	r3, [r2, r3]
 8009806:	f003 031f 	and.w	r3, r3, #31
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	fa22 f303 	lsr.w	r3, r2, r3
 8009810:	4a0a      	ldr	r2, [pc, #40]	; (800983c <HAL_RCC_ClockConfig+0x360>)
 8009812:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009814:	4a0a      	ldr	r2, [pc, #40]	; (8009840 <HAL_RCC_ClockConfig+0x364>)
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800981a:	4b0a      	ldr	r3, [pc, #40]	; (8009844 <HAL_RCC_ClockConfig+0x368>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4618      	mov	r0, r3
 8009820:	f7fc f912 	bl	8005a48 <HAL_InitTick>
 8009824:	4603      	mov	r3, r0
 8009826:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009828:	7bfb      	ldrb	r3, [r7, #15]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3718      	adds	r7, #24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	58024400 	.word	0x58024400
 8009838:	0800f4f8 	.word	0x0800f4f8
 800983c:	24000004 	.word	0x24000004
 8009840:	24000000 	.word	0x24000000
 8009844:	24000008 	.word	0x24000008

08009848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009848:	b480      	push	{r7}
 800984a:	b089      	sub	sp, #36	; 0x24
 800984c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800984e:	4bb3      	ldr	r3, [pc, #716]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009856:	2b18      	cmp	r3, #24
 8009858:	f200 8155 	bhi.w	8009b06 <HAL_RCC_GetSysClockFreq+0x2be>
 800985c:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <HAL_RCC_GetSysClockFreq+0x1c>)
 800985e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009862:	bf00      	nop
 8009864:	080098c9 	.word	0x080098c9
 8009868:	08009b07 	.word	0x08009b07
 800986c:	08009b07 	.word	0x08009b07
 8009870:	08009b07 	.word	0x08009b07
 8009874:	08009b07 	.word	0x08009b07
 8009878:	08009b07 	.word	0x08009b07
 800987c:	08009b07 	.word	0x08009b07
 8009880:	08009b07 	.word	0x08009b07
 8009884:	080098ef 	.word	0x080098ef
 8009888:	08009b07 	.word	0x08009b07
 800988c:	08009b07 	.word	0x08009b07
 8009890:	08009b07 	.word	0x08009b07
 8009894:	08009b07 	.word	0x08009b07
 8009898:	08009b07 	.word	0x08009b07
 800989c:	08009b07 	.word	0x08009b07
 80098a0:	08009b07 	.word	0x08009b07
 80098a4:	080098f5 	.word	0x080098f5
 80098a8:	08009b07 	.word	0x08009b07
 80098ac:	08009b07 	.word	0x08009b07
 80098b0:	08009b07 	.word	0x08009b07
 80098b4:	08009b07 	.word	0x08009b07
 80098b8:	08009b07 	.word	0x08009b07
 80098bc:	08009b07 	.word	0x08009b07
 80098c0:	08009b07 	.word	0x08009b07
 80098c4:	080098fb 	.word	0x080098fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098c8:	4b94      	ldr	r3, [pc, #592]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 0320 	and.w	r3, r3, #32
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d009      	beq.n	80098e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098d4:	4b91      	ldr	r3, [pc, #580]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	08db      	lsrs	r3, r3, #3
 80098da:	f003 0303 	and.w	r3, r3, #3
 80098de:	4a90      	ldr	r2, [pc, #576]	; (8009b20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098e0:	fa22 f303 	lsr.w	r3, r2, r3
 80098e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80098e6:	e111      	b.n	8009b0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80098e8:	4b8d      	ldr	r3, [pc, #564]	; (8009b20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098ea:	61bb      	str	r3, [r7, #24]
    break;
 80098ec:	e10e      	b.n	8009b0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80098ee:	4b8d      	ldr	r3, [pc, #564]	; (8009b24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80098f0:	61bb      	str	r3, [r7, #24]
    break;
 80098f2:	e10b      	b.n	8009b0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80098f4:	4b8c      	ldr	r3, [pc, #560]	; (8009b28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80098f6:	61bb      	str	r3, [r7, #24]
    break;
 80098f8:	e108      	b.n	8009b0c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098fa:	4b88      	ldr	r3, [pc, #544]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fe:	f003 0303 	and.w	r3, r3, #3
 8009902:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009904:	4b85      	ldr	r3, [pc, #532]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009908:	091b      	lsrs	r3, r3, #4
 800990a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800990e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009910:	4b82      	ldr	r3, [pc, #520]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009914:	f003 0301 	and.w	r3, r3, #1
 8009918:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800991a:	4b80      	ldr	r3, [pc, #512]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800991c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800991e:	08db      	lsrs	r3, r3, #3
 8009920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	fb02 f303 	mul.w	r3, r2, r3
 800992a:	ee07 3a90 	vmov	s15, r3
 800992e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009932:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 80e1 	beq.w	8009b00 <HAL_RCC_GetSysClockFreq+0x2b8>
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	2b02      	cmp	r3, #2
 8009942:	f000 8083 	beq.w	8009a4c <HAL_RCC_GetSysClockFreq+0x204>
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2b02      	cmp	r3, #2
 800994a:	f200 80a1 	bhi.w	8009a90 <HAL_RCC_GetSysClockFreq+0x248>
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d003      	beq.n	800995c <HAL_RCC_GetSysClockFreq+0x114>
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d056      	beq.n	8009a08 <HAL_RCC_GetSysClockFreq+0x1c0>
 800995a:	e099      	b.n	8009a90 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800995c:	4b6f      	ldr	r3, [pc, #444]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 0320 	and.w	r3, r3, #32
 8009964:	2b00      	cmp	r3, #0
 8009966:	d02d      	beq.n	80099c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009968:	4b6c      	ldr	r3, [pc, #432]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	08db      	lsrs	r3, r3, #3
 800996e:	f003 0303 	and.w	r3, r3, #3
 8009972:	4a6b      	ldr	r2, [pc, #428]	; (8009b20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009974:	fa22 f303 	lsr.w	r3, r2, r3
 8009978:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	ee07 3a90 	vmov	s15, r3
 8009980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	ee07 3a90 	vmov	s15, r3
 800998a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009992:	4b62      	ldr	r3, [pc, #392]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80099a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 80099aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80099c2:	e087      	b.n	8009ad4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009b30 <HAL_RCC_GetSysClockFreq+0x2e8>
 80099d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099d6:	4b51      	ldr	r3, [pc, #324]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80099ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 80099ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a06:	e065      	b.n	8009ad4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009b34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a1a:	4b40      	ldr	r3, [pc, #256]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a4a:	e043      	b.n	8009ad4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	ee07 3a90 	vmov	s15, r3
 8009a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a56:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009b38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a5e:	4b2f      	ldr	r3, [pc, #188]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a66:	ee07 3a90 	vmov	s15, r3
 8009a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a72:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a8e:	e021      	b.n	8009ad4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	ee07 3a90 	vmov	s15, r3
 8009a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009b34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aa2:	4b1e      	ldr	r3, [pc, #120]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ab6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ad2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009ad4:	4b11      	ldr	r3, [pc, #68]	; (8009b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad8:	0a5b      	lsrs	r3, r3, #9
 8009ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ade:	3301      	adds	r3, #1
 8009ae0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	ee07 3a90 	vmov	s15, r3
 8009ae8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8009af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009af8:	ee17 3a90 	vmov	r3, s15
 8009afc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009afe:	e005      	b.n	8009b0c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	61bb      	str	r3, [r7, #24]
    break;
 8009b04:	e002      	b.n	8009b0c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009b06:	4b07      	ldr	r3, [pc, #28]	; (8009b24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b08:	61bb      	str	r3, [r7, #24]
    break;
 8009b0a:	bf00      	nop
  }

  return sysclockfreq;
 8009b0c:	69bb      	ldr	r3, [r7, #24]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3724      	adds	r7, #36	; 0x24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	58024400 	.word	0x58024400
 8009b20:	03d09000 	.word	0x03d09000
 8009b24:	003d0900 	.word	0x003d0900
 8009b28:	007a1200 	.word	0x007a1200
 8009b2c:	46000000 	.word	0x46000000
 8009b30:	4c742400 	.word	0x4c742400
 8009b34:	4a742400 	.word	0x4a742400
 8009b38:	4af42400 	.word	0x4af42400

08009b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b42:	f7ff fe81 	bl	8009848 <HAL_RCC_GetSysClockFreq>
 8009b46:	4602      	mov	r2, r0
 8009b48:	4b10      	ldr	r3, [pc, #64]	; (8009b8c <HAL_RCC_GetHCLKFreq+0x50>)
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	0a1b      	lsrs	r3, r3, #8
 8009b4e:	f003 030f 	and.w	r3, r3, #15
 8009b52:	490f      	ldr	r1, [pc, #60]	; (8009b90 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b54:	5ccb      	ldrb	r3, [r1, r3]
 8009b56:	f003 031f 	and.w	r3, r3, #31
 8009b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b60:	4b0a      	ldr	r3, [pc, #40]	; (8009b8c <HAL_RCC_GetHCLKFreq+0x50>)
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	f003 030f 	and.w	r3, r3, #15
 8009b68:	4a09      	ldr	r2, [pc, #36]	; (8009b90 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b6a:	5cd3      	ldrb	r3, [r2, r3]
 8009b6c:	f003 031f 	and.w	r3, r3, #31
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	fa22 f303 	lsr.w	r3, r2, r3
 8009b76:	4a07      	ldr	r2, [pc, #28]	; (8009b94 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b7a:	4a07      	ldr	r2, [pc, #28]	; (8009b98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009b80:	4b04      	ldr	r3, [pc, #16]	; (8009b94 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b82:	681b      	ldr	r3, [r3, #0]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	58024400 	.word	0x58024400
 8009b90:	0800f4f8 	.word	0x0800f4f8
 8009b94:	24000004 	.word	0x24000004
 8009b98:	24000000 	.word	0x24000000

08009b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009ba0:	f7ff ffcc 	bl	8009b3c <HAL_RCC_GetHCLKFreq>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ba8:	69db      	ldr	r3, [r3, #28]
 8009baa:	091b      	lsrs	r3, r3, #4
 8009bac:	f003 0307 	and.w	r3, r3, #7
 8009bb0:	4904      	ldr	r1, [pc, #16]	; (8009bc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009bb2:	5ccb      	ldrb	r3, [r1, r3]
 8009bb4:	f003 031f 	and.w	r3, r3, #31
 8009bb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	58024400 	.word	0x58024400
 8009bc4:	0800f4f8 	.word	0x0800f4f8

08009bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009bcc:	f7ff ffb6 	bl	8009b3c <HAL_RCC_GetHCLKFreq>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	4b06      	ldr	r3, [pc, #24]	; (8009bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	0a1b      	lsrs	r3, r3, #8
 8009bd8:	f003 0307 	and.w	r3, r3, #7
 8009bdc:	4904      	ldr	r1, [pc, #16]	; (8009bf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009bde:	5ccb      	ldrb	r3, [r1, r3]
 8009be0:	f003 031f 	and.w	r3, r3, #31
 8009be4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	58024400 	.word	0x58024400
 8009bf0:	0800f4f8 	.word	0x0800f4f8

08009bf4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009c00:	2300      	movs	r3, #0
 8009c02:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d03f      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c18:	d02a      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009c1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c1e:	d824      	bhi.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c24:	d018      	beq.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c2a:	d81e      	bhi.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d003      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c34:	d007      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009c36:	e018      	b.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c38:	4ba4      	ldr	r3, [pc, #656]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3c:	4aa3      	ldr	r2, [pc, #652]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009c44:	e015      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3304      	adds	r3, #4
 8009c4a:	2102      	movs	r1, #2
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f001 f989 	bl	800af64 <RCCEx_PLL2_Config>
 8009c52:	4603      	mov	r3, r0
 8009c54:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009c56:	e00c      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	3324      	adds	r3, #36	; 0x24
 8009c5c:	2102      	movs	r1, #2
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f001 fa32 	bl	800b0c8 <RCCEx_PLL3_Config>
 8009c64:	4603      	mov	r3, r0
 8009c66:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009c68:	e003      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c6e:	e000      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d109      	bne.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009c78:	4b94      	ldr	r3, [pc, #592]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c84:	4991      	ldr	r1, [pc, #580]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	650b      	str	r3, [r1, #80]	; 0x50
 8009c8a:	e001      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
 8009c8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d03d      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca0:	2b04      	cmp	r3, #4
 8009ca2:	d826      	bhi.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009ca4:	a201      	add	r2, pc, #4	; (adr r2, 8009cac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009caa:	bf00      	nop
 8009cac:	08009cc1 	.word	0x08009cc1
 8009cb0:	08009ccf 	.word	0x08009ccf
 8009cb4:	08009ce1 	.word	0x08009ce1
 8009cb8:	08009cf9 	.word	0x08009cf9
 8009cbc:	08009cf9 	.word	0x08009cf9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cc0:	4b82      	ldr	r3, [pc, #520]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc4:	4a81      	ldr	r2, [pc, #516]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ccc:	e015      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f001 f945 	bl	800af64 <RCCEx_PLL2_Config>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cde:	e00c      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	3324      	adds	r3, #36	; 0x24
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f001 f9ee 	bl	800b0c8 <RCCEx_PLL3_Config>
 8009cec:	4603      	mov	r3, r0
 8009cee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cf0:	e003      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8009cf6:	e000      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d109      	bne.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d00:	4b72      	ldr	r3, [pc, #456]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d04:	f023 0207 	bic.w	r2, r3, #7
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0c:	496f      	ldr	r1, [pc, #444]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	650b      	str	r3, [r1, #80]	; 0x50
 8009d12:	e001      	b.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d051      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d2a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009d2e:	d036      	beq.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009d30:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009d34:	d830      	bhi.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d3a:	d032      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009d3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d40:	d82a      	bhi.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d42:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d46:	d02e      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009d48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d4c:	d824      	bhi.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d52:	d018      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d58:	d81e      	bhi.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009d5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d62:	d007      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009d64:	e018      	b.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d66:	4b59      	ldr	r3, [pc, #356]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6a:	4a58      	ldr	r2, [pc, #352]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d72:	e019      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	3304      	adds	r3, #4
 8009d78:	2100      	movs	r1, #0
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f001 f8f2 	bl	800af64 <RCCEx_PLL2_Config>
 8009d80:	4603      	mov	r3, r0
 8009d82:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009d84:	e010      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3324      	adds	r3, #36	; 0x24
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f001 f99b 	bl	800b0c8 <RCCEx_PLL3_Config>
 8009d92:	4603      	mov	r3, r0
 8009d94:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d96:	e007      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d9c:	e004      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009d9e:	bf00      	nop
 8009da0:	e002      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009da2:	bf00      	nop
 8009da4:	e000      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10a      	bne.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009dae:	4b47      	ldr	r3, [pc, #284]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009dbc:	4943      	ldr	r1, [pc, #268]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	658b      	str	r3, [r1, #88]	; 0x58
 8009dc2:	e001      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
 8009dc6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d051      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009dda:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009dde:	d036      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009de0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009de4:	d830      	bhi.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009de6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009dea:	d032      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009dec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009df0:	d82a      	bhi.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009df2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009df6:	d02e      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009df8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009dfc:	d824      	bhi.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009dfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e02:	d018      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009e04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e08:	d81e      	bhi.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d003      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009e0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e12:	d007      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009e14:	e018      	b.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e16:	4b2d      	ldr	r3, [pc, #180]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1a:	4a2c      	ldr	r2, [pc, #176]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e22:	e019      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	3304      	adds	r3, #4
 8009e28:	2100      	movs	r1, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f001 f89a 	bl	800af64 <RCCEx_PLL2_Config>
 8009e30:	4603      	mov	r3, r0
 8009e32:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009e34:	e010      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	3324      	adds	r3, #36	; 0x24
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f001 f943 	bl	800b0c8 <RCCEx_PLL3_Config>
 8009e42:	4603      	mov	r3, r0
 8009e44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e46:	e007      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e4c:	e004      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009e4e:	bf00      	nop
 8009e50:	e002      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009e52:	bf00      	nop
 8009e54:	e000      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e58:	7dfb      	ldrb	r3, [r7, #23]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10a      	bne.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009e5e:	4b1b      	ldr	r3, [pc, #108]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e62:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e6c:	4917      	ldr	r1, [pc, #92]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	658b      	str	r3, [r1, #88]	; 0x58
 8009e72:	e001      	b.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d035      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e88:	2b30      	cmp	r3, #48	; 0x30
 8009e8a:	d01c      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009e8c:	2b30      	cmp	r3, #48	; 0x30
 8009e8e:	d817      	bhi.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009e90:	2b20      	cmp	r3, #32
 8009e92:	d00c      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	d813      	bhi.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d019      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009e9c:	2b10      	cmp	r3, #16
 8009e9e:	d10f      	bne.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ea0:	4b0a      	ldr	r3, [pc, #40]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea4:	4a09      	ldr	r2, [pc, #36]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009eac:	e011      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	2102      	movs	r1, #2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f001 f855 	bl	800af64 <RCCEx_PLL2_Config>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009ebe:	e008      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ec4:	e005      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009ec6:	bf00      	nop
 8009ec8:	e003      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009eca:	bf00      	nop
 8009ecc:	58024400 	.word	0x58024400
      break;
 8009ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d109      	bne.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009ed8:	4ba3      	ldr	r3, [pc, #652]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009edc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ee4:	49a0      	ldr	r1, [pc, #640]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009eea:	e001      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
 8009eee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d047      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f04:	d030      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009f06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f0a:	d82a      	bhi.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f10:	d02c      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009f12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f16:	d824      	bhi.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f1c:	d018      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f22:	d81e      	bhi.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d003      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f2c:	d007      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009f2e:	e018      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f30:	4b8d      	ldr	r3, [pc, #564]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f34:	4a8c      	ldr	r2, [pc, #560]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009f3c:	e017      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	3304      	adds	r3, #4
 8009f42:	2100      	movs	r1, #0
 8009f44:	4618      	mov	r0, r3
 8009f46:	f001 f80d 	bl	800af64 <RCCEx_PLL2_Config>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009f4e:	e00e      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3324      	adds	r3, #36	; 0x24
 8009f54:	2100      	movs	r1, #0
 8009f56:	4618      	mov	r0, r3
 8009f58:	f001 f8b6 	bl	800b0c8 <RCCEx_PLL3_Config>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009f60:	e005      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	75fb      	strb	r3, [r7, #23]
      break;
 8009f66:	e002      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009f68:	bf00      	nop
 8009f6a:	e000      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d109      	bne.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009f74:	4b7c      	ldr	r3, [pc, #496]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f78:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f80:	4979      	ldr	r1, [pc, #484]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f82:	4313      	orrs	r3, r2
 8009f84:	650b      	str	r3, [r1, #80]	; 0x50
 8009f86:	e001      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f88:	7dfb      	ldrb	r3, [r7, #23]
 8009f8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d049      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fa0:	d02e      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009fa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fa6:	d828      	bhi.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009fa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fac:	d02a      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009fae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fb2:	d822      	bhi.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009fb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009fb8:	d026      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009fba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009fbe:	d81c      	bhi.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fc4:	d010      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fca:	d816      	bhi.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d01d      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fd4:	d111      	bne.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	2101      	movs	r1, #1
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 ffc1 	bl	800af64 <RCCEx_PLL2_Config>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009fe6:	e012      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	3324      	adds	r3, #36	; 0x24
 8009fec:	2101      	movs	r1, #1
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f001 f86a 	bl	800b0c8 <RCCEx_PLL3_Config>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009ff8:	e009      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8009ffe:	e006      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a000:	bf00      	nop
 800a002:	e004      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a004:	bf00      	nop
 800a006:	e002      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a008:	bf00      	nop
 800a00a:	e000      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a00c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d109      	bne.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a014:	4b54      	ldr	r3, [pc, #336]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a018:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a020:	4951      	ldr	r1, [pc, #324]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a022:	4313      	orrs	r3, r2
 800a024:	650b      	str	r3, [r1, #80]	; 0x50
 800a026:	e001      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a028:	7dfb      	ldrb	r3, [r7, #23]
 800a02a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d04b      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a03e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a042:	d02e      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a048:	d828      	bhi.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a04a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a04e:	d02a      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a054:	d822      	bhi.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a056:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a05a:	d026      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a05c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a060:	d81c      	bhi.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a066:	d010      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a06c:	d816      	bhi.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d01d      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a076:	d111      	bne.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	3304      	adds	r3, #4
 800a07c:	2101      	movs	r1, #1
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 ff70 	bl	800af64 <RCCEx_PLL2_Config>
 800a084:	4603      	mov	r3, r0
 800a086:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a088:	e012      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	3324      	adds	r3, #36	; 0x24
 800a08e:	2101      	movs	r1, #1
 800a090:	4618      	mov	r0, r3
 800a092:	f001 f819 	bl	800b0c8 <RCCEx_PLL3_Config>
 800a096:	4603      	mov	r3, r0
 800a098:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a09a:	e009      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	75fb      	strb	r3, [r7, #23]
      break;
 800a0a0:	e006      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0a2:	bf00      	nop
 800a0a4:	e004      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0a6:	bf00      	nop
 800a0a8:	e002      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0aa:	bf00      	nop
 800a0ac:	e000      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0b0:	7dfb      	ldrb	r3, [r7, #23]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10a      	bne.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a0b6:	4b2c      	ldr	r3, [pc, #176]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a0c4:	4928      	ldr	r1, [pc, #160]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	658b      	str	r3, [r1, #88]	; 0x58
 800a0ca:	e001      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
 800a0ce:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d02f      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0e4:	d00e      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a0e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0ea:	d814      	bhi.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d015      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a0f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0f4:	d10f      	bne.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0f6:	4b1c      	ldr	r3, [pc, #112]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fa:	4a1b      	ldr	r2, [pc, #108]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a100:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a102:	e00c      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	3304      	adds	r3, #4
 800a108:	2101      	movs	r1, #1
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 ff2a 	bl	800af64 <RCCEx_PLL2_Config>
 800a110:	4603      	mov	r3, r0
 800a112:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a114:	e003      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	75fb      	strb	r3, [r7, #23]
      break;
 800a11a:	e000      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a11c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a11e:	7dfb      	ldrb	r3, [r7, #23]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d109      	bne.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a124:	4b10      	ldr	r3, [pc, #64]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a128:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a130:	490d      	ldr	r1, [pc, #52]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a132:	4313      	orrs	r3, r2
 800a134:	650b      	str	r3, [r1, #80]	; 0x50
 800a136:	e001      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a138:	7dfb      	ldrb	r3, [r7, #23]
 800a13a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d034      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a14c:	2b03      	cmp	r3, #3
 800a14e:	d81d      	bhi.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a150:	a201      	add	r2, pc, #4	; (adr r2, 800a158 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a156:	bf00      	nop
 800a158:	0800a193 	.word	0x0800a193
 800a15c:	0800a16d 	.word	0x0800a16d
 800a160:	0800a17b 	.word	0x0800a17b
 800a164:	0800a193 	.word	0x0800a193
 800a168:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a16c:	4bb1      	ldr	r3, [pc, #708]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a170:	4ab0      	ldr	r2, [pc, #704]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a176:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a178:	e00c      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3304      	adds	r3, #4
 800a17e:	2102      	movs	r1, #2
 800a180:	4618      	mov	r0, r3
 800a182:	f000 feef 	bl	800af64 <RCCEx_PLL2_Config>
 800a186:	4603      	mov	r3, r0
 800a188:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a18a:	e003      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	75fb      	strb	r3, [r7, #23]
      break;
 800a190:	e000      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a192:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a194:	7dfb      	ldrb	r3, [r7, #23]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d109      	bne.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a19a:	4ba6      	ldr	r3, [pc, #664]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a19c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a19e:	f023 0203 	bic.w	r2, r3, #3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a6:	49a3      	ldr	r1, [pc, #652]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a1ac:	e001      	b.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 8086 	beq.w	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1c0:	4b9d      	ldr	r3, [pc, #628]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a9c      	ldr	r2, [pc, #624]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a1c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a1cc:	f7fb fc86 	bl	8005adc <HAL_GetTick>
 800a1d0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1d2:	e009      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1d4:	f7fb fc82 	bl	8005adc <HAL_GetTick>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	2b64      	cmp	r3, #100	; 0x64
 800a1e0:	d902      	bls.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	75fb      	strb	r3, [r7, #23]
        break;
 800a1e6:	e005      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1e8:	4b93      	ldr	r3, [pc, #588]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d0ef      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a1f4:	7dfb      	ldrb	r3, [r7, #23]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d166      	bne.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a1fa:	4b8e      	ldr	r3, [pc, #568]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a204:	4053      	eors	r3, r2
 800a206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d013      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a20e:	4b89      	ldr	r3, [pc, #548]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a216:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a218:	4b86      	ldr	r3, [pc, #536]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a21a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a21c:	4a85      	ldr	r2, [pc, #532]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a21e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a222:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a224:	4b83      	ldr	r3, [pc, #524]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a228:	4a82      	ldr	r2, [pc, #520]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a22a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a22e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a230:	4a80      	ldr	r2, [pc, #512]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a23c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a240:	d115      	bne.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a242:	f7fb fc4b 	bl	8005adc <HAL_GetTick>
 800a246:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a248:	e00b      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a24a:	f7fb fc47 	bl	8005adc <HAL_GetTick>
 800a24e:	4602      	mov	r2, r0
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	f241 3288 	movw	r2, #5000	; 0x1388
 800a258:	4293      	cmp	r3, r2
 800a25a:	d902      	bls.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	75fb      	strb	r3, [r7, #23]
            break;
 800a260:	e005      	b.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a262:	4b74      	ldr	r3, [pc, #464]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a266:	f003 0302 	and.w	r3, r3, #2
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0ed      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a26e:	7dfb      	ldrb	r3, [r7, #23]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d126      	bne.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a27a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a27e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a282:	d10d      	bne.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a284:	4b6b      	ldr	r3, [pc, #428]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a292:	0919      	lsrs	r1, r3, #4
 800a294:	4b69      	ldr	r3, [pc, #420]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a296:	400b      	ands	r3, r1
 800a298:	4966      	ldr	r1, [pc, #408]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	610b      	str	r3, [r1, #16]
 800a29e:	e005      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a2a0:	4b64      	ldr	r3, [pc, #400]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	4a63      	ldr	r2, [pc, #396]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a2aa:	6113      	str	r3, [r2, #16]
 800a2ac:	4b61      	ldr	r3, [pc, #388]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2ba:	495e      	ldr	r1, [pc, #376]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	670b      	str	r3, [r1, #112]	; 0x70
 800a2c0:	e004      	b.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
 800a2c4:	75bb      	strb	r3, [r7, #22]
 800a2c6:	e001      	b.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2c8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d07e      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2dc:	2b28      	cmp	r3, #40	; 0x28
 800a2de:	d867      	bhi.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a2e0:	a201      	add	r2, pc, #4	; (adr r2, 800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e6:	bf00      	nop
 800a2e8:	0800a3b7 	.word	0x0800a3b7
 800a2ec:	0800a3b1 	.word	0x0800a3b1
 800a2f0:	0800a3b1 	.word	0x0800a3b1
 800a2f4:	0800a3b1 	.word	0x0800a3b1
 800a2f8:	0800a3b1 	.word	0x0800a3b1
 800a2fc:	0800a3b1 	.word	0x0800a3b1
 800a300:	0800a3b1 	.word	0x0800a3b1
 800a304:	0800a3b1 	.word	0x0800a3b1
 800a308:	0800a38d 	.word	0x0800a38d
 800a30c:	0800a3b1 	.word	0x0800a3b1
 800a310:	0800a3b1 	.word	0x0800a3b1
 800a314:	0800a3b1 	.word	0x0800a3b1
 800a318:	0800a3b1 	.word	0x0800a3b1
 800a31c:	0800a3b1 	.word	0x0800a3b1
 800a320:	0800a3b1 	.word	0x0800a3b1
 800a324:	0800a3b1 	.word	0x0800a3b1
 800a328:	0800a39f 	.word	0x0800a39f
 800a32c:	0800a3b1 	.word	0x0800a3b1
 800a330:	0800a3b1 	.word	0x0800a3b1
 800a334:	0800a3b1 	.word	0x0800a3b1
 800a338:	0800a3b1 	.word	0x0800a3b1
 800a33c:	0800a3b1 	.word	0x0800a3b1
 800a340:	0800a3b1 	.word	0x0800a3b1
 800a344:	0800a3b1 	.word	0x0800a3b1
 800a348:	0800a3b7 	.word	0x0800a3b7
 800a34c:	0800a3b1 	.word	0x0800a3b1
 800a350:	0800a3b1 	.word	0x0800a3b1
 800a354:	0800a3b1 	.word	0x0800a3b1
 800a358:	0800a3b1 	.word	0x0800a3b1
 800a35c:	0800a3b1 	.word	0x0800a3b1
 800a360:	0800a3b1 	.word	0x0800a3b1
 800a364:	0800a3b1 	.word	0x0800a3b1
 800a368:	0800a3b7 	.word	0x0800a3b7
 800a36c:	0800a3b1 	.word	0x0800a3b1
 800a370:	0800a3b1 	.word	0x0800a3b1
 800a374:	0800a3b1 	.word	0x0800a3b1
 800a378:	0800a3b1 	.word	0x0800a3b1
 800a37c:	0800a3b1 	.word	0x0800a3b1
 800a380:	0800a3b1 	.word	0x0800a3b1
 800a384:	0800a3b1 	.word	0x0800a3b1
 800a388:	0800a3b7 	.word	0x0800a3b7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3304      	adds	r3, #4
 800a390:	2101      	movs	r1, #1
 800a392:	4618      	mov	r0, r3
 800a394:	f000 fde6 	bl	800af64 <RCCEx_PLL2_Config>
 800a398:	4603      	mov	r3, r0
 800a39a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a39c:	e00c      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	3324      	adds	r3, #36	; 0x24
 800a3a2:	2101      	movs	r1, #1
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 fe8f 	bl	800b0c8 <RCCEx_PLL3_Config>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a3ae:	e003      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a3b4:	e000      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a3b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3b8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d109      	bne.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a3be:	4b1d      	ldr	r3, [pc, #116]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ca:	491a      	ldr	r1, [pc, #104]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	654b      	str	r3, [r1, #84]	; 0x54
 800a3d0:	e001      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d2:	7dfb      	ldrb	r3, [r7, #23]
 800a3d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d03e      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e6:	2b05      	cmp	r3, #5
 800a3e8:	d820      	bhi.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a3ea:	a201      	add	r2, pc, #4	; (adr r2, 800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f0:	0800a441 	.word	0x0800a441
 800a3f4:	0800a409 	.word	0x0800a409
 800a3f8:	0800a41b 	.word	0x0800a41b
 800a3fc:	0800a441 	.word	0x0800a441
 800a400:	0800a441 	.word	0x0800a441
 800a404:	0800a441 	.word	0x0800a441
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	3304      	adds	r3, #4
 800a40c:	2101      	movs	r1, #1
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 fda8 	bl	800af64 <RCCEx_PLL2_Config>
 800a414:	4603      	mov	r3, r0
 800a416:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a418:	e013      	b.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3324      	adds	r3, #36	; 0x24
 800a41e:	2101      	movs	r1, #1
 800a420:	4618      	mov	r0, r3
 800a422:	f000 fe51 	bl	800b0c8 <RCCEx_PLL3_Config>
 800a426:	4603      	mov	r3, r0
 800a428:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a42a:	e00a      	b.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	75fb      	strb	r3, [r7, #23]
      break;
 800a430:	e007      	b.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a432:	bf00      	nop
 800a434:	58024400 	.word	0x58024400
 800a438:	58024800 	.word	0x58024800
 800a43c:	00ffffcf 	.word	0x00ffffcf
      break;
 800a440:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a442:	7dfb      	ldrb	r3, [r7, #23]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d109      	bne.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a448:	4b9f      	ldr	r3, [pc, #636]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a44a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a44c:	f023 0207 	bic.w	r2, r3, #7
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a454:	499c      	ldr	r1, [pc, #624]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a456:	4313      	orrs	r3, r2
 800a458:	654b      	str	r3, [r1, #84]	; 0x54
 800a45a:	e001      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a45c:	7dfb      	ldrb	r3, [r7, #23]
 800a45e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d039      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a472:	2b05      	cmp	r3, #5
 800a474:	d820      	bhi.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a476:	a201      	add	r2, pc, #4	; (adr r2, 800a47c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47c:	0800a4bf 	.word	0x0800a4bf
 800a480:	0800a495 	.word	0x0800a495
 800a484:	0800a4a7 	.word	0x0800a4a7
 800a488:	0800a4bf 	.word	0x0800a4bf
 800a48c:	0800a4bf 	.word	0x0800a4bf
 800a490:	0800a4bf 	.word	0x0800a4bf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	3304      	adds	r3, #4
 800a498:	2101      	movs	r1, #1
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fd62 	bl	800af64 <RCCEx_PLL2_Config>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a4a4:	e00c      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	3324      	adds	r3, #36	; 0x24
 800a4aa:	2101      	movs	r1, #1
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f000 fe0b 	bl	800b0c8 <RCCEx_PLL3_Config>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a4b6:	e003      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a4bc:	e000      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a4be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4c0:	7dfb      	ldrb	r3, [r7, #23]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a4c6:	4b80      	ldr	r3, [pc, #512]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a4c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ca:	f023 0207 	bic.w	r2, r3, #7
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4d4:	497c      	ldr	r1, [pc, #496]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	658b      	str	r3, [r1, #88]	; 0x58
 800a4da:	e001      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4dc:	7dfb      	ldrb	r3, [r7, #23]
 800a4de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 0320 	and.w	r3, r3, #32
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d04b      	beq.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4f6:	d02e      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a4f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4fc:	d828      	bhi.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a502:	d02a      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a508:	d822      	bhi.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a50a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a50e:	d026      	beq.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a510:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a514:	d81c      	bhi.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a51a:	d010      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a51c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a520:	d816      	bhi.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a522:	2b00      	cmp	r3, #0
 800a524:	d01d      	beq.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a526:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a52a:	d111      	bne.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	3304      	adds	r3, #4
 800a530:	2100      	movs	r1, #0
 800a532:	4618      	mov	r0, r3
 800a534:	f000 fd16 	bl	800af64 <RCCEx_PLL2_Config>
 800a538:	4603      	mov	r3, r0
 800a53a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a53c:	e012      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	3324      	adds	r3, #36	; 0x24
 800a542:	2102      	movs	r1, #2
 800a544:	4618      	mov	r0, r3
 800a546:	f000 fdbf 	bl	800b0c8 <RCCEx_PLL3_Config>
 800a54a:	4603      	mov	r3, r0
 800a54c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a54e:	e009      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	75fb      	strb	r3, [r7, #23]
      break;
 800a554:	e006      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a556:	bf00      	nop
 800a558:	e004      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a55a:	bf00      	nop
 800a55c:	e002      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a55e:	bf00      	nop
 800a560:	e000      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a562:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a564:	7dfb      	ldrb	r3, [r7, #23]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10a      	bne.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a56a:	4b57      	ldr	r3, [pc, #348]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a56e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a578:	4953      	ldr	r1, [pc, #332]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a57a:	4313      	orrs	r3, r2
 800a57c:	654b      	str	r3, [r1, #84]	; 0x54
 800a57e:	e001      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a580:	7dfb      	ldrb	r3, [r7, #23]
 800a582:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d04b      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a596:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a59a:	d02e      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a59c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a5a0:	d828      	bhi.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a5a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5a6:	d02a      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a5a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ac:	d822      	bhi.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a5ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5b2:	d026      	beq.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a5b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5b8:	d81c      	bhi.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a5ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5be:	d010      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a5c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5c4:	d816      	bhi.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d01d      	beq.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a5ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ce:	d111      	bne.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 fcc4 	bl	800af64 <RCCEx_PLL2_Config>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a5e0:	e012      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	3324      	adds	r3, #36	; 0x24
 800a5e6:	2102      	movs	r1, #2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f000 fd6d 	bl	800b0c8 <RCCEx_PLL3_Config>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a5f2:	e009      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a5f8:	e006      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a5fa:	bf00      	nop
 800a5fc:	e004      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a5fe:	bf00      	nop
 800a600:	e002      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a602:	bf00      	nop
 800a604:	e000      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a606:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a608:	7dfb      	ldrb	r3, [r7, #23]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10a      	bne.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a60e:	4b2e      	ldr	r3, [pc, #184]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a612:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a61c:	492a      	ldr	r1, [pc, #168]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a61e:	4313      	orrs	r3, r2
 800a620:	658b      	str	r3, [r1, #88]	; 0x58
 800a622:	e001      	b.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a624:	7dfb      	ldrb	r3, [r7, #23]
 800a626:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a630:	2b00      	cmp	r3, #0
 800a632:	d04d      	beq.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a63a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a63e:	d02e      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a640:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a644:	d828      	bhi.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a64a:	d02a      	beq.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a64c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a650:	d822      	bhi.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a652:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a656:	d026      	beq.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a658:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a65c:	d81c      	bhi.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a65e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a662:	d010      	beq.n	800a686 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a668:	d816      	bhi.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d01d      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a66e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a672:	d111      	bne.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	3304      	adds	r3, #4
 800a678:	2100      	movs	r1, #0
 800a67a:	4618      	mov	r0, r3
 800a67c:	f000 fc72 	bl	800af64 <RCCEx_PLL2_Config>
 800a680:	4603      	mov	r3, r0
 800a682:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a684:	e012      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	3324      	adds	r3, #36	; 0x24
 800a68a:	2102      	movs	r1, #2
 800a68c:	4618      	mov	r0, r3
 800a68e:	f000 fd1b 	bl	800b0c8 <RCCEx_PLL3_Config>
 800a692:	4603      	mov	r3, r0
 800a694:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a696:	e009      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	75fb      	strb	r3, [r7, #23]
      break;
 800a69c:	e006      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a69e:	bf00      	nop
 800a6a0:	e004      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6a2:	bf00      	nop
 800a6a4:	e002      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6a6:	bf00      	nop
 800a6a8:	e000      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6ac:	7dfb      	ldrb	r3, [r7, #23]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10c      	bne.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a6b2:	4b05      	ldr	r3, [pc, #20]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6c0:	4901      	ldr	r1, [pc, #4]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	658b      	str	r3, [r1, #88]	; 0x58
 800a6c6:	e003      	b.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a6c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6cc:	7dfb      	ldrb	r3, [r7, #23]
 800a6ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 0308 	and.w	r3, r3, #8
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d018      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6e4:	d10a      	bne.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	3324      	adds	r3, #36	; 0x24
 800a6ea:	2102      	movs	r1, #2
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 fceb 	bl	800b0c8 <RCCEx_PLL3_Config>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a6fc:	4b8a      	ldr	r3, [pc, #552]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a6fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a700:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a708:	4987      	ldr	r1, [pc, #540]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a70a:	4313      	orrs	r3, r2
 800a70c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0310 	and.w	r3, r3, #16
 800a716:	2b00      	cmp	r3, #0
 800a718:	d01a      	beq.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a724:	d10a      	bne.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	3324      	adds	r3, #36	; 0x24
 800a72a:	2102      	movs	r1, #2
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 fccb 	bl	800b0c8 <RCCEx_PLL3_Config>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a73c:	4b7a      	ldr	r3, [pc, #488]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a73e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a74a:	4977      	ldr	r1, [pc, #476]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a74c:	4313      	orrs	r3, r2
 800a74e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d034      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a762:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a766:	d01d      	beq.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a76c:	d817      	bhi.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d003      	beq.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a776:	d009      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a778:	e011      	b.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	3304      	adds	r3, #4
 800a77e:	2100      	movs	r1, #0
 800a780:	4618      	mov	r0, r3
 800a782:	f000 fbef 	bl	800af64 <RCCEx_PLL2_Config>
 800a786:	4603      	mov	r3, r0
 800a788:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a78a:	e00c      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3324      	adds	r3, #36	; 0x24
 800a790:	2102      	movs	r1, #2
 800a792:	4618      	mov	r0, r3
 800a794:	f000 fc98 	bl	800b0c8 <RCCEx_PLL3_Config>
 800a798:	4603      	mov	r3, r0
 800a79a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a79c:	e003      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a7a2:	e000      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a7a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10a      	bne.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a7ac:	4b5e      	ldr	r3, [pc, #376]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7ba:	495b      	ldr	r1, [pc, #364]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	658b      	str	r3, [r1, #88]	; 0x58
 800a7c0:	e001      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7c2:	7dfb      	ldrb	r3, [r7, #23]
 800a7c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d033      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7dc:	d01c      	beq.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a7de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7e2:	d816      	bhi.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a7e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7e8:	d003      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a7ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7ee:	d007      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a7f0:	e00f      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7f2:	4b4d      	ldr	r3, [pc, #308]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f6:	4a4c      	ldr	r2, [pc, #304]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a7fe:	e00c      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3324      	adds	r3, #36	; 0x24
 800a804:	2101      	movs	r1, #1
 800a806:	4618      	mov	r0, r3
 800a808:	f000 fc5e 	bl	800b0c8 <RCCEx_PLL3_Config>
 800a80c:	4603      	mov	r3, r0
 800a80e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a810:	e003      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	75fb      	strb	r3, [r7, #23]
      break;
 800a816:	e000      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10a      	bne.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a820:	4b41      	ldr	r3, [pc, #260]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a824:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a82e:	493e      	ldr	r1, [pc, #248]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a830:	4313      	orrs	r3, r2
 800a832:	654b      	str	r3, [r1, #84]	; 0x54
 800a834:	e001      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a836:	7dfb      	ldrb	r3, [r7, #23]
 800a838:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a842:	2b00      	cmp	r3, #0
 800a844:	d029      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a84e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a852:	d007      	beq.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a854:	e00f      	b.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a856:	4b34      	ldr	r3, [pc, #208]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85a:	4a33      	ldr	r2, [pc, #204]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a85c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a860:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a862:	e00b      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3304      	adds	r3, #4
 800a868:	2102      	movs	r1, #2
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 fb7a 	bl	800af64 <RCCEx_PLL2_Config>
 800a870:	4603      	mov	r3, r0
 800a872:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a874:	e002      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	75fb      	strb	r3, [r7, #23]
      break;
 800a87a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d109      	bne.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a882:	4b29      	ldr	r3, [pc, #164]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a886:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a88e:	4926      	ldr	r1, [pc, #152]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a890:	4313      	orrs	r3, r2
 800a892:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a894:	e001      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a896:	7dfb      	ldrb	r3, [r7, #23]
 800a898:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00a      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	3324      	adds	r3, #36	; 0x24
 800a8aa:	2102      	movs	r1, #2
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f000 fc0b 	bl	800b0c8 <RCCEx_PLL3_Config>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d001      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d033      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8d0:	d017      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a8d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8d6:	d811      	bhi.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a8d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8dc:	d013      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a8de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8e2:	d80b      	bhi.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d010      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a8e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ec:	d106      	bne.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8ee:	4b0e      	ldr	r3, [pc, #56]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f2:	4a0d      	ldr	r2, [pc, #52]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a8fa:	e007      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a900:	e004      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a902:	bf00      	nop
 800a904:	e002      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a906:	bf00      	nop
 800a908:	e000      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a90a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10c      	bne.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a912:	4b05      	ldr	r3, [pc, #20]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a916:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a91e:	4902      	ldr	r1, [pc, #8]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a920:	4313      	orrs	r3, r2
 800a922:	654b      	str	r3, [r1, #84]	; 0x54
 800a924:	e004      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a926:	bf00      	nop
 800a928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d008      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a93c:	4b29      	ldr	r3, [pc, #164]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a93e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a940:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a948:	4926      	ldr	r1, [pc, #152]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a94a:	4313      	orrs	r3, r2
 800a94c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a956:	2b00      	cmp	r3, #0
 800a958:	d008      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a95a:	4b22      	ldr	r3, [pc, #136]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a95c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a95e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a966:	491f      	ldr	r1, [pc, #124]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a968:	4313      	orrs	r3, r2
 800a96a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00d      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a978:	4b1a      	ldr	r3, [pc, #104]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	4a19      	ldr	r2, [pc, #100]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a97e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a982:	6113      	str	r3, [r2, #16]
 800a984:	4b17      	ldr	r3, [pc, #92]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a986:	691a      	ldr	r2, [r3, #16]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a98e:	4915      	ldr	r1, [pc, #84]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a990:	4313      	orrs	r3, r2
 800a992:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	da08      	bge.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a99c:	4b11      	ldr	r3, [pc, #68]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a99e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a8:	490e      	ldr	r1, [pc, #56]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d009      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a9ba:	4b0a      	ldr	r3, [pc, #40]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9c8:	4906      	ldr	r1, [pc, #24]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a9ce:	7dbb      	ldrb	r3, [r7, #22]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	e000      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3718      	adds	r7, #24
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	58024400 	.word	0x58024400

0800a9e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a9ec:	f7ff f8a6 	bl	8009b3c <HAL_RCC_GetHCLKFreq>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	4b06      	ldr	r3, [pc, #24]	; (800aa0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	091b      	lsrs	r3, r3, #4
 800a9f8:	f003 0307 	and.w	r3, r3, #7
 800a9fc:	4904      	ldr	r1, [pc, #16]	; (800aa10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a9fe:	5ccb      	ldrb	r3, [r1, r3]
 800aa00:	f003 031f 	and.w	r3, r3, #31
 800aa04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	58024400 	.word	0x58024400
 800aa10:	0800f4f8 	.word	0x0800f4f8

0800aa14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b089      	sub	sp, #36	; 0x24
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa1c:	4ba1      	ldr	r3, [pc, #644]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa20:	f003 0303 	and.w	r3, r3, #3
 800aa24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800aa26:	4b9f      	ldr	r3, [pc, #636]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2a:	0b1b      	lsrs	r3, r3, #12
 800aa2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa32:	4b9c      	ldr	r3, [pc, #624]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa36:	091b      	lsrs	r3, r3, #4
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800aa3e:	4b99      	ldr	r3, [pc, #612]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa42:	08db      	lsrs	r3, r3, #3
 800aa44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	fb02 f303 	mul.w	r3, r2, r3
 800aa4e:	ee07 3a90 	vmov	s15, r3
 800aa52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 8111 	beq.w	800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	f000 8083 	beq.w	800ab70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	f200 80a1 	bhi.w	800abb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d003      	beq.n	800aa80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d056      	beq.n	800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa7e:	e099      	b.n	800abb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa80:	4b88      	ldr	r3, [pc, #544]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0320 	and.w	r3, r3, #32
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d02d      	beq.n	800aae8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa8c:	4b85      	ldr	r3, [pc, #532]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	08db      	lsrs	r3, r3, #3
 800aa92:	f003 0303 	and.w	r3, r3, #3
 800aa96:	4a84      	ldr	r2, [pc, #528]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa98:	fa22 f303 	lsr.w	r3, r2, r3
 800aa9c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	ee07 3a90 	vmov	s15, r3
 800aaa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab6:	4b7b      	ldr	r3, [pc, #492]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aabe:	ee07 3a90 	vmov	s15, r3
 800aac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800acac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aade:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aae6:	e087      	b.n	800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	ee07 3a90 	vmov	s15, r3
 800aaee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aaf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aafa:	4b6a      	ldr	r3, [pc, #424]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab02:	ee07 3a90 	vmov	s15, r3
 800ab06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800acac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab2a:	e065      	b.n	800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	ee07 3a90 	vmov	s15, r3
 800ab32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800acb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab3e:	4b59      	ldr	r3, [pc, #356]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab46:	ee07 3a90 	vmov	s15, r3
 800ab4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab52:	eddf 5a56 	vldr	s11, [pc, #344]	; 800acac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab6e:	e043      	b.n	800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800acb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab82:	4b48      	ldr	r3, [pc, #288]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8a:	ee07 3a90 	vmov	s15, r3
 800ab8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab96:	eddf 5a45 	vldr	s11, [pc, #276]	; 800acac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abb2:	e021      	b.n	800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	ee07 3a90 	vmov	s15, r3
 800abba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800acb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abc6:	4b37      	ldr	r3, [pc, #220]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abda:	eddf 5a34 	vldr	s11, [pc, #208]	; 800acac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abf6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800abf8:	4b2a      	ldr	r3, [pc, #168]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfc:	0a5b      	lsrs	r3, r3, #9
 800abfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac02:	ee07 3a90 	vmov	s15, r3
 800ac06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac12:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac1e:	ee17 2a90 	vmov	r2, s15
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ac26:	4b1f      	ldr	r3, [pc, #124]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2a:	0c1b      	lsrs	r3, r3, #16
 800ac2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac30:	ee07 3a90 	vmov	s15, r3
 800ac34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac40:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac4c:	ee17 2a90 	vmov	r2, s15
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ac54:	4b13      	ldr	r3, [pc, #76]	; (800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac58:	0e1b      	lsrs	r3, r3, #24
 800ac5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac7a:	ee17 2a90 	vmov	r2, s15
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac82:	e008      	b.n	800ac96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	609a      	str	r2, [r3, #8]
}
 800ac96:	bf00      	nop
 800ac98:	3724      	adds	r7, #36	; 0x24
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	58024400 	.word	0x58024400
 800aca8:	03d09000 	.word	0x03d09000
 800acac:	46000000 	.word	0x46000000
 800acb0:	4c742400 	.word	0x4c742400
 800acb4:	4a742400 	.word	0x4a742400
 800acb8:	4af42400 	.word	0x4af42400

0800acbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b089      	sub	sp, #36	; 0x24
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acc4:	4ba1      	ldr	r3, [pc, #644]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc8:	f003 0303 	and.w	r3, r3, #3
 800accc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800acce:	4b9f      	ldr	r3, [pc, #636]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd2:	0d1b      	lsrs	r3, r3, #20
 800acd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acd8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800acda:	4b9c      	ldr	r3, [pc, #624]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acde:	0a1b      	lsrs	r3, r3, #8
 800ace0:	f003 0301 	and.w	r3, r3, #1
 800ace4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ace6:	4b99      	ldr	r3, [pc, #612]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acea:	08db      	lsrs	r3, r3, #3
 800acec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	fb02 f303 	mul.w	r3, r2, r3
 800acf6:	ee07 3a90 	vmov	s15, r3
 800acfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 8111 	beq.w	800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	f000 8083 	beq.w	800ae18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	f200 80a1 	bhi.w	800ae5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d003      	beq.n	800ad28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d056      	beq.n	800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad26:	e099      	b.n	800ae5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad28:	4b88      	ldr	r3, [pc, #544]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 0320 	and.w	r3, r3, #32
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d02d      	beq.n	800ad90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad34:	4b85      	ldr	r3, [pc, #532]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	08db      	lsrs	r3, r3, #3
 800ad3a:	f003 0303 	and.w	r3, r3, #3
 800ad3e:	4a84      	ldr	r2, [pc, #528]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad40:	fa22 f303 	lsr.w	r3, r2, r3
 800ad44:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	ee07 3a90 	vmov	s15, r3
 800ad4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	ee07 3a90 	vmov	s15, r3
 800ad56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad5e:	4b7b      	ldr	r3, [pc, #492]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad66:	ee07 3a90 	vmov	s15, r3
 800ad6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad72:	eddf 5a78 	vldr	s11, [pc, #480]	; 800af54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ad8e:	e087      	b.n	800aea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ada2:	4b6a      	ldr	r3, [pc, #424]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ada4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adaa:	ee07 3a90 	vmov	s15, r3
 800adae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800adb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800af54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800add2:	e065      	b.n	800aea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	ee07 3a90 	vmov	s15, r3
 800adda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800af5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ade2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ade6:	4b59      	ldr	r3, [pc, #356]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ade8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adee:	ee07 3a90 	vmov	s15, r3
 800adf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adfa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae16:	e043      	b.n	800aea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	ee07 3a90 	vmov	s15, r3
 800ae1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800af60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae2a:	4b48      	ldr	r3, [pc, #288]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae32:	ee07 3a90 	vmov	s15, r3
 800ae36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800af54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae5a:	e021      	b.n	800aea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	ee07 3a90 	vmov	s15, r3
 800ae62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800af5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae6e:	4b37      	ldr	r3, [pc, #220]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae76:	ee07 3a90 	vmov	s15, r3
 800ae7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae82:	eddf 5a34 	vldr	s11, [pc, #208]	; 800af54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800aea0:	4b2a      	ldr	r3, [pc, #168]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea4:	0a5b      	lsrs	r3, r3, #9
 800aea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeaa:	ee07 3a90 	vmov	s15, r3
 800aeae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aeb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aeba:	edd7 6a07 	vldr	s13, [r7, #28]
 800aebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aec6:	ee17 2a90 	vmov	r2, s15
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800aece:	4b1f      	ldr	r3, [pc, #124]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed2:	0c1b      	lsrs	r3, r3, #16
 800aed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aed8:	ee07 3a90 	vmov	s15, r3
 800aedc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aee4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aee8:	edd7 6a07 	vldr	s13, [r7, #28]
 800aeec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aef4:	ee17 2a90 	vmov	r2, s15
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800aefc:	4b13      	ldr	r3, [pc, #76]	; (800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af00:	0e1b      	lsrs	r3, r3, #24
 800af02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af16:	edd7 6a07 	vldr	s13, [r7, #28]
 800af1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af22:	ee17 2a90 	vmov	r2, s15
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af2a:	e008      	b.n	800af3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	609a      	str	r2, [r3, #8]
}
 800af3e:	bf00      	nop
 800af40:	3724      	adds	r7, #36	; 0x24
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	58024400 	.word	0x58024400
 800af50:	03d09000 	.word	0x03d09000
 800af54:	46000000 	.word	0x46000000
 800af58:	4c742400 	.word	0x4c742400
 800af5c:	4a742400 	.word	0x4a742400
 800af60:	4af42400 	.word	0x4af42400

0800af64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af72:	4b53      	ldr	r3, [pc, #332]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800af74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af76:	f003 0303 	and.w	r3, r3, #3
 800af7a:	2b03      	cmp	r3, #3
 800af7c:	d101      	bne.n	800af82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	e099      	b.n	800b0b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800af82:	4b4f      	ldr	r3, [pc, #316]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a4e      	ldr	r2, [pc, #312]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800af88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800af8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af8e:	f7fa fda5 	bl	8005adc <HAL_GetTick>
 800af92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af94:	e008      	b.n	800afa8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800af96:	f7fa fda1 	bl	8005adc <HAL_GetTick>
 800af9a:	4602      	mov	r2, r0
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d901      	bls.n	800afa8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800afa4:	2303      	movs	r3, #3
 800afa6:	e086      	b.n	800b0b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800afa8:	4b45      	ldr	r3, [pc, #276]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1f0      	bne.n	800af96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800afb4:	4b42      	ldr	r3, [pc, #264]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800afb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	031b      	lsls	r3, r3, #12
 800afc2:	493f      	ldr	r1, [pc, #252]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800afc4:	4313      	orrs	r3, r2
 800afc6:	628b      	str	r3, [r1, #40]	; 0x28
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	3b01      	subs	r3, #1
 800afce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	3b01      	subs	r3, #1
 800afd8:	025b      	lsls	r3, r3, #9
 800afda:	b29b      	uxth	r3, r3
 800afdc:	431a      	orrs	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	041b      	lsls	r3, r3, #16
 800afe6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800afea:	431a      	orrs	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	3b01      	subs	r3, #1
 800aff2:	061b      	lsls	r3, r3, #24
 800aff4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aff8:	4931      	ldr	r1, [pc, #196]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800affa:	4313      	orrs	r3, r2
 800affc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800affe:	4b30      	ldr	r3, [pc, #192]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b002:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	695b      	ldr	r3, [r3, #20]
 800b00a:	492d      	ldr	r1, [pc, #180]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b00c:	4313      	orrs	r3, r2
 800b00e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b010:	4b2b      	ldr	r3, [pc, #172]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b014:	f023 0220 	bic.w	r2, r3, #32
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	699b      	ldr	r3, [r3, #24]
 800b01c:	4928      	ldr	r1, [pc, #160]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b01e:	4313      	orrs	r3, r2
 800b020:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b022:	4b27      	ldr	r3, [pc, #156]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b026:	4a26      	ldr	r2, [pc, #152]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b028:	f023 0310 	bic.w	r3, r3, #16
 800b02c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b02e:	4b24      	ldr	r3, [pc, #144]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b032:	4b24      	ldr	r3, [pc, #144]	; (800b0c4 <RCCEx_PLL2_Config+0x160>)
 800b034:	4013      	ands	r3, r2
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	69d2      	ldr	r2, [r2, #28]
 800b03a:	00d2      	lsls	r2, r2, #3
 800b03c:	4920      	ldr	r1, [pc, #128]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b03e:	4313      	orrs	r3, r2
 800b040:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b042:	4b1f      	ldr	r3, [pc, #124]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b046:	4a1e      	ldr	r2, [pc, #120]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b048:	f043 0310 	orr.w	r3, r3, #16
 800b04c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d106      	bne.n	800b062 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b054:	4b1a      	ldr	r3, [pc, #104]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b058:	4a19      	ldr	r2, [pc, #100]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b05a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b05e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b060:	e00f      	b.n	800b082 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d106      	bne.n	800b076 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b068:	4b15      	ldr	r3, [pc, #84]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06c:	4a14      	ldr	r2, [pc, #80]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b06e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b072:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b074:	e005      	b.n	800b082 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b076:	4b12      	ldr	r3, [pc, #72]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07a:	4a11      	ldr	r2, [pc, #68]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b07c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b080:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b082:	4b0f      	ldr	r3, [pc, #60]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a0e      	ldr	r2, [pc, #56]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b088:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b08c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b08e:	f7fa fd25 	bl	8005adc <HAL_GetTick>
 800b092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b094:	e008      	b.n	800b0a8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b096:	f7fa fd21 	bl	8005adc <HAL_GetTick>
 800b09a:	4602      	mov	r2, r0
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d901      	bls.n	800b0a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e006      	b.n	800b0b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b0a8:	4b05      	ldr	r3, [pc, #20]	; (800b0c0 <RCCEx_PLL2_Config+0x15c>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d0f0      	beq.n	800b096 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	58024400 	.word	0x58024400
 800b0c4:	ffff0007 	.word	0xffff0007

0800b0c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b0d6:	4b53      	ldr	r3, [pc, #332]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0da:	f003 0303 	and.w	r3, r3, #3
 800b0de:	2b03      	cmp	r3, #3
 800b0e0:	d101      	bne.n	800b0e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e099      	b.n	800b21a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b0e6:	4b4f      	ldr	r3, [pc, #316]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a4e      	ldr	r2, [pc, #312]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b0ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0f2:	f7fa fcf3 	bl	8005adc <HAL_GetTick>
 800b0f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b0f8:	e008      	b.n	800b10c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b0fa:	f7fa fcef 	bl	8005adc <HAL_GetTick>
 800b0fe:	4602      	mov	r2, r0
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	1ad3      	subs	r3, r2, r3
 800b104:	2b02      	cmp	r3, #2
 800b106:	d901      	bls.n	800b10c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b108:	2303      	movs	r3, #3
 800b10a:	e086      	b.n	800b21a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b10c:	4b45      	ldr	r3, [pc, #276]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1f0      	bne.n	800b0fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b118:	4b42      	ldr	r3, [pc, #264]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	051b      	lsls	r3, r3, #20
 800b126:	493f      	ldr	r1, [pc, #252]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b128:	4313      	orrs	r3, r2
 800b12a:	628b      	str	r3, [r1, #40]	; 0x28
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	3b01      	subs	r3, #1
 800b132:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	3b01      	subs	r3, #1
 800b13c:	025b      	lsls	r3, r3, #9
 800b13e:	b29b      	uxth	r3, r3
 800b140:	431a      	orrs	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	3b01      	subs	r3, #1
 800b148:	041b      	lsls	r3, r3, #16
 800b14a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b14e:	431a      	orrs	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	3b01      	subs	r3, #1
 800b156:	061b      	lsls	r3, r3, #24
 800b158:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b15c:	4931      	ldr	r1, [pc, #196]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b15e:	4313      	orrs	r3, r2
 800b160:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b162:	4b30      	ldr	r3, [pc, #192]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b166:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	695b      	ldr	r3, [r3, #20]
 800b16e:	492d      	ldr	r1, [pc, #180]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b170:	4313      	orrs	r3, r2
 800b172:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b174:	4b2b      	ldr	r3, [pc, #172]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b178:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	4928      	ldr	r1, [pc, #160]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b182:	4313      	orrs	r3, r2
 800b184:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b186:	4b27      	ldr	r3, [pc, #156]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18a:	4a26      	ldr	r2, [pc, #152]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b18c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b190:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b192:	4b24      	ldr	r3, [pc, #144]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b196:	4b24      	ldr	r3, [pc, #144]	; (800b228 <RCCEx_PLL3_Config+0x160>)
 800b198:	4013      	ands	r3, r2
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	69d2      	ldr	r2, [r2, #28]
 800b19e:	00d2      	lsls	r2, r2, #3
 800b1a0:	4920      	ldr	r1, [pc, #128]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b1a6:	4b1f      	ldr	r3, [pc, #124]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1aa:	4a1e      	ldr	r2, [pc, #120]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b1ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d106      	bne.n	800b1c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b1b8:	4b1a      	ldr	r3, [pc, #104]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1bc:	4a19      	ldr	r2, [pc, #100]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b1be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b1c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b1c4:	e00f      	b.n	800b1e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d106      	bne.n	800b1da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b1cc:	4b15      	ldr	r3, [pc, #84]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d0:	4a14      	ldr	r2, [pc, #80]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b1d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b1d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b1d8:	e005      	b.n	800b1e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b1da:	4b12      	ldr	r3, [pc, #72]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1de:	4a11      	ldr	r2, [pc, #68]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b1e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b1e6:	4b0f      	ldr	r3, [pc, #60]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a0e      	ldr	r2, [pc, #56]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b1ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1f2:	f7fa fc73 	bl	8005adc <HAL_GetTick>
 800b1f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b1f8:	e008      	b.n	800b20c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b1fa:	f7fa fc6f 	bl	8005adc <HAL_GetTick>
 800b1fe:	4602      	mov	r2, r0
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	2b02      	cmp	r3, #2
 800b206:	d901      	bls.n	800b20c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b208:	2303      	movs	r3, #3
 800b20a:	e006      	b.n	800b21a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b20c:	4b05      	ldr	r3, [pc, #20]	; (800b224 <RCCEx_PLL3_Config+0x15c>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d0f0      	beq.n	800b1fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b218:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	58024400 	.word	0x58024400
 800b228:	ffff0007 	.word	0xffff0007

0800b22c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d101      	bne.n	800b23e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	e049      	b.n	800b2d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b244:	b2db      	uxtb	r3, r3
 800b246:	2b00      	cmp	r3, #0
 800b248:	d106      	bne.n	800b258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7f9 ff7a 	bl	800514c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2202      	movs	r2, #2
 800b25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3304      	adds	r3, #4
 800b268:	4619      	mov	r1, r3
 800b26a:	4610      	mov	r0, r2
 800b26c:	f000 ff12 	bl	800c094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
	...

0800b2dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d001      	beq.n	800b2f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e05e      	b.n	800b3b2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68da      	ldr	r2, [r3, #12]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f042 0201 	orr.w	r2, r2, #1
 800b30a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a2b      	ldr	r2, [pc, #172]	; (800b3c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d02c      	beq.n	800b370 <HAL_TIM_Base_Start_IT+0x94>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b31e:	d027      	beq.n	800b370 <HAL_TIM_Base_Start_IT+0x94>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a27      	ldr	r2, [pc, #156]	; (800b3c4 <HAL_TIM_Base_Start_IT+0xe8>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d022      	beq.n	800b370 <HAL_TIM_Base_Start_IT+0x94>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a26      	ldr	r2, [pc, #152]	; (800b3c8 <HAL_TIM_Base_Start_IT+0xec>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d01d      	beq.n	800b370 <HAL_TIM_Base_Start_IT+0x94>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a24      	ldr	r2, [pc, #144]	; (800b3cc <HAL_TIM_Base_Start_IT+0xf0>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d018      	beq.n	800b370 <HAL_TIM_Base_Start_IT+0x94>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a23      	ldr	r2, [pc, #140]	; (800b3d0 <HAL_TIM_Base_Start_IT+0xf4>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d013      	beq.n	800b370 <HAL_TIM_Base_Start_IT+0x94>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a21      	ldr	r2, [pc, #132]	; (800b3d4 <HAL_TIM_Base_Start_IT+0xf8>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d00e      	beq.n	800b370 <HAL_TIM_Base_Start_IT+0x94>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a20      	ldr	r2, [pc, #128]	; (800b3d8 <HAL_TIM_Base_Start_IT+0xfc>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d009      	beq.n	800b370 <HAL_TIM_Base_Start_IT+0x94>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a1e      	ldr	r2, [pc, #120]	; (800b3dc <HAL_TIM_Base_Start_IT+0x100>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d004      	beq.n	800b370 <HAL_TIM_Base_Start_IT+0x94>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a1d      	ldr	r2, [pc, #116]	; (800b3e0 <HAL_TIM_Base_Start_IT+0x104>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d115      	bne.n	800b39c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	689a      	ldr	r2, [r3, #8]
 800b376:	4b1b      	ldr	r3, [pc, #108]	; (800b3e4 <HAL_TIM_Base_Start_IT+0x108>)
 800b378:	4013      	ands	r3, r2
 800b37a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2b06      	cmp	r3, #6
 800b380:	d015      	beq.n	800b3ae <HAL_TIM_Base_Start_IT+0xd2>
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b388:	d011      	beq.n	800b3ae <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f042 0201 	orr.w	r2, r2, #1
 800b398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b39a:	e008      	b.n	800b3ae <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f042 0201 	orr.w	r2, r2, #1
 800b3aa:	601a      	str	r2, [r3, #0]
 800b3ac:	e000      	b.n	800b3b0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3714      	adds	r7, #20
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	40010000 	.word	0x40010000
 800b3c4:	40000400 	.word	0x40000400
 800b3c8:	40000800 	.word	0x40000800
 800b3cc:	40000c00 	.word	0x40000c00
 800b3d0:	40010400 	.word	0x40010400
 800b3d4:	40001800 	.word	0x40001800
 800b3d8:	40014000 	.word	0x40014000
 800b3dc:	4000e000 	.word	0x4000e000
 800b3e0:	4000e400 	.word	0x4000e400
 800b3e4:	00010007 	.word	0x00010007

0800b3e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d101      	bne.n	800b3fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e049      	b.n	800b48e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b400:	b2db      	uxtb	r3, r3
 800b402:	2b00      	cmp	r3, #0
 800b404:	d106      	bne.n	800b414 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f7f9 fe34 	bl	800507c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2202      	movs	r2, #2
 800b418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	3304      	adds	r3, #4
 800b424:	4619      	mov	r1, r3
 800b426:	4610      	mov	r0, r2
 800b428:	f000 fe34 	bl	800c094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2201      	movs	r2, #1
 800b458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
	...

0800b498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d109      	bne.n	800b4bc <HAL_TIM_PWM_Start+0x24>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	bf14      	ite	ne
 800b4b4:	2301      	movne	r3, #1
 800b4b6:	2300      	moveq	r3, #0
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	e03c      	b.n	800b536 <HAL_TIM_PWM_Start+0x9e>
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	2b04      	cmp	r3, #4
 800b4c0:	d109      	bne.n	800b4d6 <HAL_TIM_PWM_Start+0x3e>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	bf14      	ite	ne
 800b4ce:	2301      	movne	r3, #1
 800b4d0:	2300      	moveq	r3, #0
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	e02f      	b.n	800b536 <HAL_TIM_PWM_Start+0x9e>
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2b08      	cmp	r3, #8
 800b4da:	d109      	bne.n	800b4f0 <HAL_TIM_PWM_Start+0x58>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	bf14      	ite	ne
 800b4e8:	2301      	movne	r3, #1
 800b4ea:	2300      	moveq	r3, #0
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	e022      	b.n	800b536 <HAL_TIM_PWM_Start+0x9e>
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	2b0c      	cmp	r3, #12
 800b4f4:	d109      	bne.n	800b50a <HAL_TIM_PWM_Start+0x72>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	bf14      	ite	ne
 800b502:	2301      	movne	r3, #1
 800b504:	2300      	moveq	r3, #0
 800b506:	b2db      	uxtb	r3, r3
 800b508:	e015      	b.n	800b536 <HAL_TIM_PWM_Start+0x9e>
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	2b10      	cmp	r3, #16
 800b50e:	d109      	bne.n	800b524 <HAL_TIM_PWM_Start+0x8c>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b516:	b2db      	uxtb	r3, r3
 800b518:	2b01      	cmp	r3, #1
 800b51a:	bf14      	ite	ne
 800b51c:	2301      	movne	r3, #1
 800b51e:	2300      	moveq	r3, #0
 800b520:	b2db      	uxtb	r3, r3
 800b522:	e008      	b.n	800b536 <HAL_TIM_PWM_Start+0x9e>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	bf14      	ite	ne
 800b530:	2301      	movne	r3, #1
 800b532:	2300      	moveq	r3, #0
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e0ab      	b.n	800b696 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d104      	bne.n	800b54e <HAL_TIM_PWM_Start+0xb6>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2202      	movs	r2, #2
 800b548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b54c:	e023      	b.n	800b596 <HAL_TIM_PWM_Start+0xfe>
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	2b04      	cmp	r3, #4
 800b552:	d104      	bne.n	800b55e <HAL_TIM_PWM_Start+0xc6>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2202      	movs	r2, #2
 800b558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b55c:	e01b      	b.n	800b596 <HAL_TIM_PWM_Start+0xfe>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b08      	cmp	r3, #8
 800b562:	d104      	bne.n	800b56e <HAL_TIM_PWM_Start+0xd6>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2202      	movs	r2, #2
 800b568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b56c:	e013      	b.n	800b596 <HAL_TIM_PWM_Start+0xfe>
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	2b0c      	cmp	r3, #12
 800b572:	d104      	bne.n	800b57e <HAL_TIM_PWM_Start+0xe6>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2202      	movs	r2, #2
 800b578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b57c:	e00b      	b.n	800b596 <HAL_TIM_PWM_Start+0xfe>
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	2b10      	cmp	r3, #16
 800b582:	d104      	bne.n	800b58e <HAL_TIM_PWM_Start+0xf6>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2202      	movs	r2, #2
 800b588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b58c:	e003      	b.n	800b596 <HAL_TIM_PWM_Start+0xfe>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2202      	movs	r2, #2
 800b592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2201      	movs	r2, #1
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f001 f992 	bl	800c8c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a3d      	ldr	r2, [pc, #244]	; (800b6a0 <HAL_TIM_PWM_Start+0x208>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d013      	beq.n	800b5d6 <HAL_TIM_PWM_Start+0x13e>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a3c      	ldr	r2, [pc, #240]	; (800b6a4 <HAL_TIM_PWM_Start+0x20c>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d00e      	beq.n	800b5d6 <HAL_TIM_PWM_Start+0x13e>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a3a      	ldr	r2, [pc, #232]	; (800b6a8 <HAL_TIM_PWM_Start+0x210>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d009      	beq.n	800b5d6 <HAL_TIM_PWM_Start+0x13e>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a39      	ldr	r2, [pc, #228]	; (800b6ac <HAL_TIM_PWM_Start+0x214>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d004      	beq.n	800b5d6 <HAL_TIM_PWM_Start+0x13e>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a37      	ldr	r2, [pc, #220]	; (800b6b0 <HAL_TIM_PWM_Start+0x218>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d101      	bne.n	800b5da <HAL_TIM_PWM_Start+0x142>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e000      	b.n	800b5dc <HAL_TIM_PWM_Start+0x144>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d007      	beq.n	800b5f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a2a      	ldr	r2, [pc, #168]	; (800b6a0 <HAL_TIM_PWM_Start+0x208>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d02c      	beq.n	800b654 <HAL_TIM_PWM_Start+0x1bc>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b602:	d027      	beq.n	800b654 <HAL_TIM_PWM_Start+0x1bc>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a2a      	ldr	r2, [pc, #168]	; (800b6b4 <HAL_TIM_PWM_Start+0x21c>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d022      	beq.n	800b654 <HAL_TIM_PWM_Start+0x1bc>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a29      	ldr	r2, [pc, #164]	; (800b6b8 <HAL_TIM_PWM_Start+0x220>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d01d      	beq.n	800b654 <HAL_TIM_PWM_Start+0x1bc>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a27      	ldr	r2, [pc, #156]	; (800b6bc <HAL_TIM_PWM_Start+0x224>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d018      	beq.n	800b654 <HAL_TIM_PWM_Start+0x1bc>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a1f      	ldr	r2, [pc, #124]	; (800b6a4 <HAL_TIM_PWM_Start+0x20c>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d013      	beq.n	800b654 <HAL_TIM_PWM_Start+0x1bc>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a23      	ldr	r2, [pc, #140]	; (800b6c0 <HAL_TIM_PWM_Start+0x228>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d00e      	beq.n	800b654 <HAL_TIM_PWM_Start+0x1bc>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a1b      	ldr	r2, [pc, #108]	; (800b6a8 <HAL_TIM_PWM_Start+0x210>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d009      	beq.n	800b654 <HAL_TIM_PWM_Start+0x1bc>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a1f      	ldr	r2, [pc, #124]	; (800b6c4 <HAL_TIM_PWM_Start+0x22c>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d004      	beq.n	800b654 <HAL_TIM_PWM_Start+0x1bc>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a1e      	ldr	r2, [pc, #120]	; (800b6c8 <HAL_TIM_PWM_Start+0x230>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d115      	bne.n	800b680 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	689a      	ldr	r2, [r3, #8]
 800b65a:	4b1c      	ldr	r3, [pc, #112]	; (800b6cc <HAL_TIM_PWM_Start+0x234>)
 800b65c:	4013      	ands	r3, r2
 800b65e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2b06      	cmp	r3, #6
 800b664:	d015      	beq.n	800b692 <HAL_TIM_PWM_Start+0x1fa>
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b66c:	d011      	beq.n	800b692 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f042 0201 	orr.w	r2, r2, #1
 800b67c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b67e:	e008      	b.n	800b692 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f042 0201 	orr.w	r2, r2, #1
 800b68e:	601a      	str	r2, [r3, #0]
 800b690:	e000      	b.n	800b694 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b692:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	40010000 	.word	0x40010000
 800b6a4:	40010400 	.word	0x40010400
 800b6a8:	40014000 	.word	0x40014000
 800b6ac:	40014400 	.word	0x40014400
 800b6b0:	40014800 	.word	0x40014800
 800b6b4:	40000400 	.word	0x40000400
 800b6b8:	40000800 	.word	0x40000800
 800b6bc:	40000c00 	.word	0x40000c00
 800b6c0:	40001800 	.word	0x40001800
 800b6c4:	4000e000 	.word	0x4000e000
 800b6c8:	4000e400 	.word	0x4000e400
 800b6cc:	00010007 	.word	0x00010007

0800b6d0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d101      	bne.n	800b6e4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e041      	b.n	800b768 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d106      	bne.n	800b6fe <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f839 	bl	800b770 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2202      	movs	r2, #2
 800b702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	3304      	adds	r3, #4
 800b70e:	4619      	mov	r1, r3
 800b710:	4610      	mov	r0, r2
 800b712:	f000 fcbf 	bl	800c094 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f022 0208 	bic.w	r2, r2, #8
 800b724:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6819      	ldr	r1, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	683a      	ldr	r2, [r7, #0]
 800b732:	430a      	orrs	r2, r1
 800b734:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2201      	movs	r2, #1
 800b762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3708      	adds	r7, #8
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b778:	bf00      	nop
 800b77a:	370c      	adds	r7, #12
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	e08f      	b.n	800b8b8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d106      	bne.n	800b7b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f7f9 fd21 	bl	80051f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2202      	movs	r2, #2
 800b7b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	6899      	ldr	r1, [r3, #8]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	4b3e      	ldr	r3, [pc, #248]	; (800b8c0 <HAL_TIM_Encoder_Init+0x13c>)
 800b7c6:	400b      	ands	r3, r1
 800b7c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	f000 fc5d 	bl	800c094 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	699b      	ldr	r3, [r3, #24]
 800b7e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	6a1b      	ldr	r3, [r3, #32]
 800b7f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b7fc:	693a      	ldr	r2, [r7, #16]
 800b7fe:	4b31      	ldr	r3, [pc, #196]	; (800b8c4 <HAL_TIM_Encoder_Init+0x140>)
 800b800:	4013      	ands	r3, r2
 800b802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	689a      	ldr	r2, [r3, #8]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	021b      	lsls	r3, r3, #8
 800b80e:	4313      	orrs	r3, r2
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	4313      	orrs	r3, r2
 800b814:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b816:	693a      	ldr	r2, [r7, #16]
 800b818:	4b2b      	ldr	r3, [pc, #172]	; (800b8c8 <HAL_TIM_Encoder_Init+0x144>)
 800b81a:	4013      	ands	r3, r2
 800b81c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b81e:	693a      	ldr	r2, [r7, #16]
 800b820:	4b2a      	ldr	r3, [pc, #168]	; (800b8cc <HAL_TIM_Encoder_Init+0x148>)
 800b822:	4013      	ands	r3, r2
 800b824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	68da      	ldr	r2, [r3, #12]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	69db      	ldr	r3, [r3, #28]
 800b82e:	021b      	lsls	r3, r3, #8
 800b830:	4313      	orrs	r3, r2
 800b832:	693a      	ldr	r2, [r7, #16]
 800b834:	4313      	orrs	r3, r2
 800b836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	011a      	lsls	r2, r3, #4
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	6a1b      	ldr	r3, [r3, #32]
 800b842:	031b      	lsls	r3, r3, #12
 800b844:	4313      	orrs	r3, r2
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	4313      	orrs	r3, r2
 800b84a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b852:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b85a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	685a      	ldr	r2, [r3, #4]
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	011b      	lsls	r3, r3, #4
 800b866:	4313      	orrs	r3, r2
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	697a      	ldr	r2, [r7, #20]
 800b874:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	693a      	ldr	r2, [r7, #16]
 800b87c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2201      	movs	r2, #1
 800b892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2201      	movs	r2, #1
 800b89a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	fffebff8 	.word	0xfffebff8
 800b8c4:	fffffcfc 	.word	0xfffffcfc
 800b8c8:	fffff3f3 	.word	0xfffff3f3
 800b8cc:	ffff0f0f 	.word	0xffff0f0f

0800b8d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b8e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d110      	bne.n	800b922 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d102      	bne.n	800b90c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b906:	7b7b      	ldrb	r3, [r7, #13]
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d001      	beq.n	800b910 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	e069      	b.n	800b9e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2202      	movs	r2, #2
 800b914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2202      	movs	r2, #2
 800b91c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b920:	e031      	b.n	800b986 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	2b04      	cmp	r3, #4
 800b926:	d110      	bne.n	800b94a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b928:	7bbb      	ldrb	r3, [r7, #14]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d102      	bne.n	800b934 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b92e:	7b3b      	ldrb	r3, [r7, #12]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d001      	beq.n	800b938 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	e055      	b.n	800b9e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2202      	movs	r2, #2
 800b93c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2202      	movs	r2, #2
 800b944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b948:	e01d      	b.n	800b986 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b94a:	7bfb      	ldrb	r3, [r7, #15]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d108      	bne.n	800b962 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b950:	7bbb      	ldrb	r3, [r7, #14]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d105      	bne.n	800b962 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b956:	7b7b      	ldrb	r3, [r7, #13]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d102      	bne.n	800b962 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b95c:	7b3b      	ldrb	r3, [r7, #12]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d001      	beq.n	800b966 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b962:	2301      	movs	r3, #1
 800b964:	e03e      	b.n	800b9e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2202      	movs	r2, #2
 800b96a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2202      	movs	r2, #2
 800b972:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2202      	movs	r2, #2
 800b97a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2202      	movs	r2, #2
 800b982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d003      	beq.n	800b994 <HAL_TIM_Encoder_Start+0xc4>
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	2b04      	cmp	r3, #4
 800b990:	d008      	beq.n	800b9a4 <HAL_TIM_Encoder_Start+0xd4>
 800b992:	e00f      	b.n	800b9b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2201      	movs	r2, #1
 800b99a:	2100      	movs	r1, #0
 800b99c:	4618      	mov	r0, r3
 800b99e:	f000 ff93 	bl	800c8c8 <TIM_CCxChannelCmd>
      break;
 800b9a2:	e016      	b.n	800b9d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	2104      	movs	r1, #4
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f000 ff8b 	bl	800c8c8 <TIM_CCxChannelCmd>
      break;
 800b9b2:	e00e      	b.n	800b9d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f000 ff83 	bl	800c8c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	2104      	movs	r1, #4
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f000 ff7c 	bl	800c8c8 <TIM_CCxChannelCmd>
      break;
 800b9d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f042 0201 	orr.w	r2, r2, #1
 800b9e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	691b      	ldr	r3, [r3, #16]
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d122      	bne.n	800ba48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	f003 0302 	and.w	r3, r3, #2
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d11b      	bne.n	800ba48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f06f 0202 	mvn.w	r2, #2
 800ba18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	699b      	ldr	r3, [r3, #24]
 800ba26:	f003 0303 	and.w	r3, r3, #3
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d003      	beq.n	800ba36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 fb12 	bl	800c058 <HAL_TIM_IC_CaptureCallback>
 800ba34:	e005      	b.n	800ba42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 fb04 	bl	800c044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 fb15 	bl	800c06c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	f003 0304 	and.w	r3, r3, #4
 800ba52:	2b04      	cmp	r3, #4
 800ba54:	d122      	bne.n	800ba9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	f003 0304 	and.w	r3, r3, #4
 800ba60:	2b04      	cmp	r3, #4
 800ba62:	d11b      	bne.n	800ba9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f06f 0204 	mvn.w	r2, #4
 800ba6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2202      	movs	r2, #2
 800ba72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d003      	beq.n	800ba8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fae8 	bl	800c058 <HAL_TIM_IC_CaptureCallback>
 800ba88:	e005      	b.n	800ba96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 fada 	bl	800c044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 faeb 	bl	800c06c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	f003 0308 	and.w	r3, r3, #8
 800baa6:	2b08      	cmp	r3, #8
 800baa8:	d122      	bne.n	800baf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	f003 0308 	and.w	r3, r3, #8
 800bab4:	2b08      	cmp	r3, #8
 800bab6:	d11b      	bne.n	800baf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f06f 0208 	mvn.w	r2, #8
 800bac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2204      	movs	r2, #4
 800bac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	69db      	ldr	r3, [r3, #28]
 800bace:	f003 0303 	and.w	r3, r3, #3
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d003      	beq.n	800bade <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 fabe 	bl	800c058 <HAL_TIM_IC_CaptureCallback>
 800badc:	e005      	b.n	800baea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fab0 	bl	800c044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fac1 	bl	800c06c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	f003 0310 	and.w	r3, r3, #16
 800bafa:	2b10      	cmp	r3, #16
 800bafc:	d122      	bne.n	800bb44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	f003 0310 	and.w	r3, r3, #16
 800bb08:	2b10      	cmp	r3, #16
 800bb0a:	d11b      	bne.n	800bb44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f06f 0210 	mvn.w	r2, #16
 800bb14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2208      	movs	r2, #8
 800bb1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	69db      	ldr	r3, [r3, #28]
 800bb22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d003      	beq.n	800bb32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fa94 	bl	800c058 <HAL_TIM_IC_CaptureCallback>
 800bb30:	e005      	b.n	800bb3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 fa86 	bl	800c044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fa97 	bl	800c06c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	f003 0301 	and.w	r3, r3, #1
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d10e      	bne.n	800bb70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	f003 0301 	and.w	r3, r3, #1
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d107      	bne.n	800bb70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f06f 0201 	mvn.w	r2, #1
 800bb68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7f5 fd8c 	bl	8001688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb7a:	2b80      	cmp	r3, #128	; 0x80
 800bb7c:	d10e      	bne.n	800bb9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb88:	2b80      	cmp	r3, #128	; 0x80
 800bb8a:	d107      	bne.n	800bb9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f001 f802 	bl	800cba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbaa:	d10e      	bne.n	800bbca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbb6:	2b80      	cmp	r3, #128	; 0x80
 800bbb8:	d107      	bne.n	800bbca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bbc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 fff5 	bl	800cbb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	691b      	ldr	r3, [r3, #16]
 800bbd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd4:	2b40      	cmp	r3, #64	; 0x40
 800bbd6:	d10e      	bne.n	800bbf6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe2:	2b40      	cmp	r3, #64	; 0x40
 800bbe4:	d107      	bne.n	800bbf6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bbee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fa45 	bl	800c080 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	f003 0320 	and.w	r3, r3, #32
 800bc00:	2b20      	cmp	r3, #32
 800bc02:	d10e      	bne.n	800bc22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	f003 0320 	and.w	r3, r3, #32
 800bc0e:	2b20      	cmp	r3, #32
 800bc10:	d107      	bne.n	800bc22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f06f 0220 	mvn.w	r2, #32
 800bc1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 ffb5 	bl	800cb8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc22:	bf00      	nop
 800bc24:	3708      	adds	r7, #8
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
	...

0800bc2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b086      	sub	sp, #24
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d101      	bne.n	800bc4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bc46:	2302      	movs	r3, #2
 800bc48:	e0ff      	b.n	800be4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2b14      	cmp	r3, #20
 800bc56:	f200 80f0 	bhi.w	800be3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bc5a:	a201      	add	r2, pc, #4	; (adr r2, 800bc60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bc5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc60:	0800bcb5 	.word	0x0800bcb5
 800bc64:	0800be3b 	.word	0x0800be3b
 800bc68:	0800be3b 	.word	0x0800be3b
 800bc6c:	0800be3b 	.word	0x0800be3b
 800bc70:	0800bcf5 	.word	0x0800bcf5
 800bc74:	0800be3b 	.word	0x0800be3b
 800bc78:	0800be3b 	.word	0x0800be3b
 800bc7c:	0800be3b 	.word	0x0800be3b
 800bc80:	0800bd37 	.word	0x0800bd37
 800bc84:	0800be3b 	.word	0x0800be3b
 800bc88:	0800be3b 	.word	0x0800be3b
 800bc8c:	0800be3b 	.word	0x0800be3b
 800bc90:	0800bd77 	.word	0x0800bd77
 800bc94:	0800be3b 	.word	0x0800be3b
 800bc98:	0800be3b 	.word	0x0800be3b
 800bc9c:	0800be3b 	.word	0x0800be3b
 800bca0:	0800bdb9 	.word	0x0800bdb9
 800bca4:	0800be3b 	.word	0x0800be3b
 800bca8:	0800be3b 	.word	0x0800be3b
 800bcac:	0800be3b 	.word	0x0800be3b
 800bcb0:	0800bdf9 	.word	0x0800bdf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68b9      	ldr	r1, [r7, #8]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f000 fa90 	bl	800c1e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	699a      	ldr	r2, [r3, #24]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f042 0208 	orr.w	r2, r2, #8
 800bcce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	699a      	ldr	r2, [r3, #24]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f022 0204 	bic.w	r2, r2, #4
 800bcde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6999      	ldr	r1, [r3, #24]
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	691a      	ldr	r2, [r3, #16]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	430a      	orrs	r2, r1
 800bcf0:	619a      	str	r2, [r3, #24]
      break;
 800bcf2:	e0a5      	b.n	800be40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	68b9      	ldr	r1, [r7, #8]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f000 fb00 	bl	800c300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	699a      	ldr	r2, [r3, #24]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	699a      	ldr	r2, [r3, #24]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6999      	ldr	r1, [r3, #24]
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	021a      	lsls	r2, r3, #8
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	430a      	orrs	r2, r1
 800bd32:	619a      	str	r2, [r3, #24]
      break;
 800bd34:	e084      	b.n	800be40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68b9      	ldr	r1, [r7, #8]
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f000 fb69 	bl	800c414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	69da      	ldr	r2, [r3, #28]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f042 0208 	orr.w	r2, r2, #8
 800bd50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	69da      	ldr	r2, [r3, #28]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f022 0204 	bic.w	r2, r2, #4
 800bd60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	69d9      	ldr	r1, [r3, #28]
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	691a      	ldr	r2, [r3, #16]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	430a      	orrs	r2, r1
 800bd72:	61da      	str	r2, [r3, #28]
      break;
 800bd74:	e064      	b.n	800be40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68b9      	ldr	r1, [r7, #8]
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f000 fbd1 	bl	800c524 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	69da      	ldr	r2, [r3, #28]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	69da      	ldr	r2, [r3, #28]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bda0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	69d9      	ldr	r1, [r3, #28]
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	021a      	lsls	r2, r3, #8
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	61da      	str	r2, [r3, #28]
      break;
 800bdb6:	e043      	b.n	800be40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68b9      	ldr	r1, [r7, #8]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f000 fc1a 	bl	800c5f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f042 0208 	orr.w	r2, r2, #8
 800bdd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f022 0204 	bic.w	r2, r2, #4
 800bde2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	691a      	ldr	r2, [r3, #16]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	430a      	orrs	r2, r1
 800bdf4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bdf6:	e023      	b.n	800be40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68b9      	ldr	r1, [r7, #8]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 fc5e 	bl	800c6c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	021a      	lsls	r2, r3, #8
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	430a      	orrs	r2, r1
 800be36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be38:	e002      	b.n	800be40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	75fb      	strb	r3, [r7, #23]
      break;
 800be3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2200      	movs	r2, #0
 800be44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be48:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop

0800be54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d101      	bne.n	800be70 <HAL_TIM_ConfigClockSource+0x1c>
 800be6c:	2302      	movs	r3, #2
 800be6e:	e0dc      	b.n	800c02a <HAL_TIM_ConfigClockSource+0x1d6>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2202      	movs	r2, #2
 800be7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	4b6a      	ldr	r3, [pc, #424]	; (800c034 <HAL_TIM_ConfigClockSource+0x1e0>)
 800be8c:	4013      	ands	r3, r2
 800be8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	68ba      	ldr	r2, [r7, #8]
 800be9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a64      	ldr	r2, [pc, #400]	; (800c038 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	f000 80a9 	beq.w	800bffe <HAL_TIM_ConfigClockSource+0x1aa>
 800beac:	4a62      	ldr	r2, [pc, #392]	; (800c038 <HAL_TIM_ConfigClockSource+0x1e4>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	f200 80ae 	bhi.w	800c010 <HAL_TIM_ConfigClockSource+0x1bc>
 800beb4:	4a61      	ldr	r2, [pc, #388]	; (800c03c <HAL_TIM_ConfigClockSource+0x1e8>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	f000 80a1 	beq.w	800bffe <HAL_TIM_ConfigClockSource+0x1aa>
 800bebc:	4a5f      	ldr	r2, [pc, #380]	; (800c03c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	f200 80a6 	bhi.w	800c010 <HAL_TIM_ConfigClockSource+0x1bc>
 800bec4:	4a5e      	ldr	r2, [pc, #376]	; (800c040 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	f000 8099 	beq.w	800bffe <HAL_TIM_ConfigClockSource+0x1aa>
 800becc:	4a5c      	ldr	r2, [pc, #368]	; (800c040 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	f200 809e 	bhi.w	800c010 <HAL_TIM_ConfigClockSource+0x1bc>
 800bed4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bed8:	f000 8091 	beq.w	800bffe <HAL_TIM_ConfigClockSource+0x1aa>
 800bedc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bee0:	f200 8096 	bhi.w	800c010 <HAL_TIM_ConfigClockSource+0x1bc>
 800bee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bee8:	f000 8089 	beq.w	800bffe <HAL_TIM_ConfigClockSource+0x1aa>
 800beec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bef0:	f200 808e 	bhi.w	800c010 <HAL_TIM_ConfigClockSource+0x1bc>
 800bef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bef8:	d03e      	beq.n	800bf78 <HAL_TIM_ConfigClockSource+0x124>
 800befa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800befe:	f200 8087 	bhi.w	800c010 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf06:	f000 8086 	beq.w	800c016 <HAL_TIM_ConfigClockSource+0x1c2>
 800bf0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf0e:	d87f      	bhi.n	800c010 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf10:	2b70      	cmp	r3, #112	; 0x70
 800bf12:	d01a      	beq.n	800bf4a <HAL_TIM_ConfigClockSource+0xf6>
 800bf14:	2b70      	cmp	r3, #112	; 0x70
 800bf16:	d87b      	bhi.n	800c010 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf18:	2b60      	cmp	r3, #96	; 0x60
 800bf1a:	d050      	beq.n	800bfbe <HAL_TIM_ConfigClockSource+0x16a>
 800bf1c:	2b60      	cmp	r3, #96	; 0x60
 800bf1e:	d877      	bhi.n	800c010 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf20:	2b50      	cmp	r3, #80	; 0x50
 800bf22:	d03c      	beq.n	800bf9e <HAL_TIM_ConfigClockSource+0x14a>
 800bf24:	2b50      	cmp	r3, #80	; 0x50
 800bf26:	d873      	bhi.n	800c010 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf28:	2b40      	cmp	r3, #64	; 0x40
 800bf2a:	d058      	beq.n	800bfde <HAL_TIM_ConfigClockSource+0x18a>
 800bf2c:	2b40      	cmp	r3, #64	; 0x40
 800bf2e:	d86f      	bhi.n	800c010 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf30:	2b30      	cmp	r3, #48	; 0x30
 800bf32:	d064      	beq.n	800bffe <HAL_TIM_ConfigClockSource+0x1aa>
 800bf34:	2b30      	cmp	r3, #48	; 0x30
 800bf36:	d86b      	bhi.n	800c010 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf38:	2b20      	cmp	r3, #32
 800bf3a:	d060      	beq.n	800bffe <HAL_TIM_ConfigClockSource+0x1aa>
 800bf3c:	2b20      	cmp	r3, #32
 800bf3e:	d867      	bhi.n	800c010 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d05c      	beq.n	800bffe <HAL_TIM_ConfigClockSource+0x1aa>
 800bf44:	2b10      	cmp	r3, #16
 800bf46:	d05a      	beq.n	800bffe <HAL_TIM_ConfigClockSource+0x1aa>
 800bf48:	e062      	b.n	800c010 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6818      	ldr	r0, [r3, #0]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	6899      	ldr	r1, [r3, #8]
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	f000 fc95 	bl	800c888 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bf6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	609a      	str	r2, [r3, #8]
      break;
 800bf76:	e04f      	b.n	800c018 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6818      	ldr	r0, [r3, #0]
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	6899      	ldr	r1, [r3, #8]
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	f000 fc7e 	bl	800c888 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	689a      	ldr	r2, [r3, #8]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf9a:	609a      	str	r2, [r3, #8]
      break;
 800bf9c:	e03c      	b.n	800c018 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6818      	ldr	r0, [r3, #0]
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	6859      	ldr	r1, [r3, #4]
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	461a      	mov	r2, r3
 800bfac:	f000 fbee 	bl	800c78c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2150      	movs	r1, #80	; 0x50
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f000 fc48 	bl	800c84c <TIM_ITRx_SetConfig>
      break;
 800bfbc:	e02c      	b.n	800c018 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6818      	ldr	r0, [r3, #0]
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	6859      	ldr	r1, [r3, #4]
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	461a      	mov	r2, r3
 800bfcc:	f000 fc0d 	bl	800c7ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2160      	movs	r1, #96	; 0x60
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f000 fc38 	bl	800c84c <TIM_ITRx_SetConfig>
      break;
 800bfdc:	e01c      	b.n	800c018 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6818      	ldr	r0, [r3, #0]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	6859      	ldr	r1, [r3, #4]
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	461a      	mov	r2, r3
 800bfec:	f000 fbce 	bl	800c78c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2140      	movs	r1, #64	; 0x40
 800bff6:	4618      	mov	r0, r3
 800bff8:	f000 fc28 	bl	800c84c <TIM_ITRx_SetConfig>
      break;
 800bffc:	e00c      	b.n	800c018 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4619      	mov	r1, r3
 800c008:	4610      	mov	r0, r2
 800c00a:	f000 fc1f 	bl	800c84c <TIM_ITRx_SetConfig>
      break;
 800c00e:	e003      	b.n	800c018 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	73fb      	strb	r3, [r7, #15]
      break;
 800c014:	e000      	b.n	800c018 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c028:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	ffceff88 	.word	0xffceff88
 800c038:	00100040 	.word	0x00100040
 800c03c:	00100030 	.word	0x00100030
 800c040:	00100020 	.word	0x00100020

0800c044 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c04c:	bf00      	nop
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c060:	bf00      	nop
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c074:	bf00      	nop
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c088:	bf00      	nop
 800c08a:	370c      	adds	r7, #12
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr

0800c094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	4a44      	ldr	r2, [pc, #272]	; (800c1b8 <TIM_Base_SetConfig+0x124>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d013      	beq.n	800c0d4 <TIM_Base_SetConfig+0x40>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0b2:	d00f      	beq.n	800c0d4 <TIM_Base_SetConfig+0x40>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	4a41      	ldr	r2, [pc, #260]	; (800c1bc <TIM_Base_SetConfig+0x128>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d00b      	beq.n	800c0d4 <TIM_Base_SetConfig+0x40>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	4a40      	ldr	r2, [pc, #256]	; (800c1c0 <TIM_Base_SetConfig+0x12c>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d007      	beq.n	800c0d4 <TIM_Base_SetConfig+0x40>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4a3f      	ldr	r2, [pc, #252]	; (800c1c4 <TIM_Base_SetConfig+0x130>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d003      	beq.n	800c0d4 <TIM_Base_SetConfig+0x40>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a3e      	ldr	r2, [pc, #248]	; (800c1c8 <TIM_Base_SetConfig+0x134>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d108      	bne.n	800c0e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a33      	ldr	r2, [pc, #204]	; (800c1b8 <TIM_Base_SetConfig+0x124>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d027      	beq.n	800c13e <TIM_Base_SetConfig+0xaa>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0f4:	d023      	beq.n	800c13e <TIM_Base_SetConfig+0xaa>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a30      	ldr	r2, [pc, #192]	; (800c1bc <TIM_Base_SetConfig+0x128>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d01f      	beq.n	800c13e <TIM_Base_SetConfig+0xaa>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a2f      	ldr	r2, [pc, #188]	; (800c1c0 <TIM_Base_SetConfig+0x12c>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d01b      	beq.n	800c13e <TIM_Base_SetConfig+0xaa>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a2e      	ldr	r2, [pc, #184]	; (800c1c4 <TIM_Base_SetConfig+0x130>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d017      	beq.n	800c13e <TIM_Base_SetConfig+0xaa>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4a2d      	ldr	r2, [pc, #180]	; (800c1c8 <TIM_Base_SetConfig+0x134>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d013      	beq.n	800c13e <TIM_Base_SetConfig+0xaa>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4a2c      	ldr	r2, [pc, #176]	; (800c1cc <TIM_Base_SetConfig+0x138>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d00f      	beq.n	800c13e <TIM_Base_SetConfig+0xaa>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a2b      	ldr	r2, [pc, #172]	; (800c1d0 <TIM_Base_SetConfig+0x13c>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d00b      	beq.n	800c13e <TIM_Base_SetConfig+0xaa>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a2a      	ldr	r2, [pc, #168]	; (800c1d4 <TIM_Base_SetConfig+0x140>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d007      	beq.n	800c13e <TIM_Base_SetConfig+0xaa>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a29      	ldr	r2, [pc, #164]	; (800c1d8 <TIM_Base_SetConfig+0x144>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d003      	beq.n	800c13e <TIM_Base_SetConfig+0xaa>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a28      	ldr	r2, [pc, #160]	; (800c1dc <TIM_Base_SetConfig+0x148>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d108      	bne.n	800c150 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	4313      	orrs	r3, r2
 800c15c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	689a      	ldr	r2, [r3, #8]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4a10      	ldr	r2, [pc, #64]	; (800c1b8 <TIM_Base_SetConfig+0x124>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d00f      	beq.n	800c19c <TIM_Base_SetConfig+0x108>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	4a12      	ldr	r2, [pc, #72]	; (800c1c8 <TIM_Base_SetConfig+0x134>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d00b      	beq.n	800c19c <TIM_Base_SetConfig+0x108>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a11      	ldr	r2, [pc, #68]	; (800c1cc <TIM_Base_SetConfig+0x138>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d007      	beq.n	800c19c <TIM_Base_SetConfig+0x108>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4a10      	ldr	r2, [pc, #64]	; (800c1d0 <TIM_Base_SetConfig+0x13c>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d003      	beq.n	800c19c <TIM_Base_SetConfig+0x108>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4a0f      	ldr	r2, [pc, #60]	; (800c1d4 <TIM_Base_SetConfig+0x140>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d103      	bne.n	800c1a4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	691a      	ldr	r2, [r3, #16]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	615a      	str	r2, [r3, #20]
}
 800c1aa:	bf00      	nop
 800c1ac:	3714      	adds	r7, #20
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	40010000 	.word	0x40010000
 800c1bc:	40000400 	.word	0x40000400
 800c1c0:	40000800 	.word	0x40000800
 800c1c4:	40000c00 	.word	0x40000c00
 800c1c8:	40010400 	.word	0x40010400
 800c1cc:	40014000 	.word	0x40014000
 800c1d0:	40014400 	.word	0x40014400
 800c1d4:	40014800 	.word	0x40014800
 800c1d8:	4000e000 	.word	0x4000e000
 800c1dc:	4000e400 	.word	0x4000e400

0800c1e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b087      	sub	sp, #28
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6a1b      	ldr	r3, [r3, #32]
 800c1ee:	f023 0201 	bic.w	r2, r3, #1
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	4b37      	ldr	r3, [pc, #220]	; (800c2e8 <TIM_OC1_SetConfig+0x108>)
 800c20c:	4013      	ands	r3, r2
 800c20e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f023 0303 	bic.w	r3, r3, #3
 800c216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	4313      	orrs	r3, r2
 800c220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	f023 0302 	bic.w	r3, r3, #2
 800c228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	697a      	ldr	r2, [r7, #20]
 800c230:	4313      	orrs	r3, r2
 800c232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a2d      	ldr	r2, [pc, #180]	; (800c2ec <TIM_OC1_SetConfig+0x10c>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d00f      	beq.n	800c25c <TIM_OC1_SetConfig+0x7c>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a2c      	ldr	r2, [pc, #176]	; (800c2f0 <TIM_OC1_SetConfig+0x110>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d00b      	beq.n	800c25c <TIM_OC1_SetConfig+0x7c>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a2b      	ldr	r2, [pc, #172]	; (800c2f4 <TIM_OC1_SetConfig+0x114>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d007      	beq.n	800c25c <TIM_OC1_SetConfig+0x7c>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a2a      	ldr	r2, [pc, #168]	; (800c2f8 <TIM_OC1_SetConfig+0x118>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d003      	beq.n	800c25c <TIM_OC1_SetConfig+0x7c>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a29      	ldr	r2, [pc, #164]	; (800c2fc <TIM_OC1_SetConfig+0x11c>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d10c      	bne.n	800c276 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	f023 0308 	bic.w	r3, r3, #8
 800c262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	697a      	ldr	r2, [r7, #20]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	f023 0304 	bic.w	r3, r3, #4
 800c274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4a1c      	ldr	r2, [pc, #112]	; (800c2ec <TIM_OC1_SetConfig+0x10c>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d00f      	beq.n	800c29e <TIM_OC1_SetConfig+0xbe>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a1b      	ldr	r2, [pc, #108]	; (800c2f0 <TIM_OC1_SetConfig+0x110>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d00b      	beq.n	800c29e <TIM_OC1_SetConfig+0xbe>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4a1a      	ldr	r2, [pc, #104]	; (800c2f4 <TIM_OC1_SetConfig+0x114>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d007      	beq.n	800c29e <TIM_OC1_SetConfig+0xbe>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4a19      	ldr	r2, [pc, #100]	; (800c2f8 <TIM_OC1_SetConfig+0x118>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d003      	beq.n	800c29e <TIM_OC1_SetConfig+0xbe>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a18      	ldr	r2, [pc, #96]	; (800c2fc <TIM_OC1_SetConfig+0x11c>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d111      	bne.n	800c2c2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c2ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	695b      	ldr	r3, [r3, #20]
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	699b      	ldr	r3, [r3, #24]
 800c2bc:	693a      	ldr	r2, [r7, #16]
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	693a      	ldr	r2, [r7, #16]
 800c2c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	685a      	ldr	r2, [r3, #4]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	697a      	ldr	r2, [r7, #20]
 800c2da:	621a      	str	r2, [r3, #32]
}
 800c2dc:	bf00      	nop
 800c2de:	371c      	adds	r7, #28
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	fffeff8f 	.word	0xfffeff8f
 800c2ec:	40010000 	.word	0x40010000
 800c2f0:	40010400 	.word	0x40010400
 800c2f4:	40014000 	.word	0x40014000
 800c2f8:	40014400 	.word	0x40014400
 800c2fc:	40014800 	.word	0x40014800

0800c300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c300:	b480      	push	{r7}
 800c302:	b087      	sub	sp, #28
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6a1b      	ldr	r3, [r3, #32]
 800c30e:	f023 0210 	bic.w	r2, r3, #16
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a1b      	ldr	r3, [r3, #32]
 800c31a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	699b      	ldr	r3, [r3, #24]
 800c326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	4b34      	ldr	r3, [pc, #208]	; (800c3fc <TIM_OC2_SetConfig+0xfc>)
 800c32c:	4013      	ands	r3, r2
 800c32e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	021b      	lsls	r3, r3, #8
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	4313      	orrs	r3, r2
 800c342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	f023 0320 	bic.w	r3, r3, #32
 800c34a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	011b      	lsls	r3, r3, #4
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	4313      	orrs	r3, r2
 800c356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	4a29      	ldr	r2, [pc, #164]	; (800c400 <TIM_OC2_SetConfig+0x100>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d003      	beq.n	800c368 <TIM_OC2_SetConfig+0x68>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4a28      	ldr	r2, [pc, #160]	; (800c404 <TIM_OC2_SetConfig+0x104>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d10d      	bne.n	800c384 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c36e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	011b      	lsls	r3, r3, #4
 800c376:	697a      	ldr	r2, [r7, #20]
 800c378:	4313      	orrs	r3, r2
 800c37a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c382:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	4a1e      	ldr	r2, [pc, #120]	; (800c400 <TIM_OC2_SetConfig+0x100>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d00f      	beq.n	800c3ac <TIM_OC2_SetConfig+0xac>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	4a1d      	ldr	r2, [pc, #116]	; (800c404 <TIM_OC2_SetConfig+0x104>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d00b      	beq.n	800c3ac <TIM_OC2_SetConfig+0xac>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4a1c      	ldr	r2, [pc, #112]	; (800c408 <TIM_OC2_SetConfig+0x108>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d007      	beq.n	800c3ac <TIM_OC2_SetConfig+0xac>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a1b      	ldr	r2, [pc, #108]	; (800c40c <TIM_OC2_SetConfig+0x10c>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d003      	beq.n	800c3ac <TIM_OC2_SetConfig+0xac>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4a1a      	ldr	r2, [pc, #104]	; (800c410 <TIM_OC2_SetConfig+0x110>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d113      	bne.n	800c3d4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c3b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	695b      	ldr	r3, [r3, #20]
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	693a      	ldr	r2, [r7, #16]
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	699b      	ldr	r3, [r3, #24]
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	693a      	ldr	r2, [r7, #16]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	693a      	ldr	r2, [r7, #16]
 800c3d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	68fa      	ldr	r2, [r7, #12]
 800c3de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	685a      	ldr	r2, [r3, #4]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	621a      	str	r2, [r3, #32]
}
 800c3ee:	bf00      	nop
 800c3f0:	371c      	adds	r7, #28
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	feff8fff 	.word	0xfeff8fff
 800c400:	40010000 	.word	0x40010000
 800c404:	40010400 	.word	0x40010400
 800c408:	40014000 	.word	0x40014000
 800c40c:	40014400 	.word	0x40014400
 800c410:	40014800 	.word	0x40014800

0800c414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c414:	b480      	push	{r7}
 800c416:	b087      	sub	sp, #28
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6a1b      	ldr	r3, [r3, #32]
 800c422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a1b      	ldr	r3, [r3, #32]
 800c42e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	69db      	ldr	r3, [r3, #28]
 800c43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	4b33      	ldr	r3, [pc, #204]	; (800c50c <TIM_OC3_SetConfig+0xf8>)
 800c440:	4013      	ands	r3, r2
 800c442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f023 0303 	bic.w	r3, r3, #3
 800c44a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	4313      	orrs	r3, r2
 800c454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c45c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	021b      	lsls	r3, r3, #8
 800c464:	697a      	ldr	r2, [r7, #20]
 800c466:	4313      	orrs	r3, r2
 800c468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4a28      	ldr	r2, [pc, #160]	; (800c510 <TIM_OC3_SetConfig+0xfc>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d003      	beq.n	800c47a <TIM_OC3_SetConfig+0x66>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4a27      	ldr	r2, [pc, #156]	; (800c514 <TIM_OC3_SetConfig+0x100>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d10d      	bne.n	800c496 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	021b      	lsls	r3, r3, #8
 800c488:	697a      	ldr	r2, [r7, #20]
 800c48a:	4313      	orrs	r3, r2
 800c48c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4a1d      	ldr	r2, [pc, #116]	; (800c510 <TIM_OC3_SetConfig+0xfc>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d00f      	beq.n	800c4be <TIM_OC3_SetConfig+0xaa>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4a1c      	ldr	r2, [pc, #112]	; (800c514 <TIM_OC3_SetConfig+0x100>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d00b      	beq.n	800c4be <TIM_OC3_SetConfig+0xaa>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4a1b      	ldr	r2, [pc, #108]	; (800c518 <TIM_OC3_SetConfig+0x104>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d007      	beq.n	800c4be <TIM_OC3_SetConfig+0xaa>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4a1a      	ldr	r2, [pc, #104]	; (800c51c <TIM_OC3_SetConfig+0x108>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d003      	beq.n	800c4be <TIM_OC3_SetConfig+0xaa>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4a19      	ldr	r2, [pc, #100]	; (800c520 <TIM_OC3_SetConfig+0x10c>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d113      	bne.n	800c4e6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c4cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	695b      	ldr	r3, [r3, #20]
 800c4d2:	011b      	lsls	r3, r3, #4
 800c4d4:	693a      	ldr	r2, [r7, #16]
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	699b      	ldr	r3, [r3, #24]
 800c4de:	011b      	lsls	r3, r3, #4
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	693a      	ldr	r2, [r7, #16]
 800c4ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	685a      	ldr	r2, [r3, #4]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	697a      	ldr	r2, [r7, #20]
 800c4fe:	621a      	str	r2, [r3, #32]
}
 800c500:	bf00      	nop
 800c502:	371c      	adds	r7, #28
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	fffeff8f 	.word	0xfffeff8f
 800c510:	40010000 	.word	0x40010000
 800c514:	40010400 	.word	0x40010400
 800c518:	40014000 	.word	0x40014000
 800c51c:	40014400 	.word	0x40014400
 800c520:	40014800 	.word	0x40014800

0800c524 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c524:	b480      	push	{r7}
 800c526:	b087      	sub	sp, #28
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6a1b      	ldr	r3, [r3, #32]
 800c532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a1b      	ldr	r3, [r3, #32]
 800c53e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	69db      	ldr	r3, [r3, #28]
 800c54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	4b24      	ldr	r3, [pc, #144]	; (800c5e0 <TIM_OC4_SetConfig+0xbc>)
 800c550:	4013      	ands	r3, r2
 800c552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c55a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	021b      	lsls	r3, r3, #8
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	4313      	orrs	r3, r2
 800c566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c56e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	031b      	lsls	r3, r3, #12
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	4313      	orrs	r3, r2
 800c57a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4a19      	ldr	r2, [pc, #100]	; (800c5e4 <TIM_OC4_SetConfig+0xc0>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d00f      	beq.n	800c5a4 <TIM_OC4_SetConfig+0x80>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4a18      	ldr	r2, [pc, #96]	; (800c5e8 <TIM_OC4_SetConfig+0xc4>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d00b      	beq.n	800c5a4 <TIM_OC4_SetConfig+0x80>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a17      	ldr	r2, [pc, #92]	; (800c5ec <TIM_OC4_SetConfig+0xc8>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d007      	beq.n	800c5a4 <TIM_OC4_SetConfig+0x80>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4a16      	ldr	r2, [pc, #88]	; (800c5f0 <TIM_OC4_SetConfig+0xcc>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d003      	beq.n	800c5a4 <TIM_OC4_SetConfig+0x80>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4a15      	ldr	r2, [pc, #84]	; (800c5f4 <TIM_OC4_SetConfig+0xd0>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d109      	bne.n	800c5b8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c5aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	019b      	lsls	r3, r3, #6
 800c5b2:	697a      	ldr	r2, [r7, #20]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	697a      	ldr	r2, [r7, #20]
 800c5bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	685a      	ldr	r2, [r3, #4]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	693a      	ldr	r2, [r7, #16]
 800c5d0:	621a      	str	r2, [r3, #32]
}
 800c5d2:	bf00      	nop
 800c5d4:	371c      	adds	r7, #28
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	feff8fff 	.word	0xfeff8fff
 800c5e4:	40010000 	.word	0x40010000
 800c5e8:	40010400 	.word	0x40010400
 800c5ec:	40014000 	.word	0x40014000
 800c5f0:	40014400 	.word	0x40014400
 800c5f4:	40014800 	.word	0x40014800

0800c5f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b087      	sub	sp, #28
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6a1b      	ldr	r3, [r3, #32]
 800c606:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c61e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c620:	68fa      	ldr	r2, [r7, #12]
 800c622:	4b21      	ldr	r3, [pc, #132]	; (800c6a8 <TIM_OC5_SetConfig+0xb0>)
 800c624:	4013      	ands	r3, r2
 800c626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	68fa      	ldr	r2, [r7, #12]
 800c62e:	4313      	orrs	r3, r2
 800c630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c638:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	041b      	lsls	r3, r3, #16
 800c640:	693a      	ldr	r2, [r7, #16]
 800c642:	4313      	orrs	r3, r2
 800c644:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a18      	ldr	r2, [pc, #96]	; (800c6ac <TIM_OC5_SetConfig+0xb4>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d00f      	beq.n	800c66e <TIM_OC5_SetConfig+0x76>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4a17      	ldr	r2, [pc, #92]	; (800c6b0 <TIM_OC5_SetConfig+0xb8>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d00b      	beq.n	800c66e <TIM_OC5_SetConfig+0x76>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a16      	ldr	r2, [pc, #88]	; (800c6b4 <TIM_OC5_SetConfig+0xbc>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d007      	beq.n	800c66e <TIM_OC5_SetConfig+0x76>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4a15      	ldr	r2, [pc, #84]	; (800c6b8 <TIM_OC5_SetConfig+0xc0>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d003      	beq.n	800c66e <TIM_OC5_SetConfig+0x76>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4a14      	ldr	r2, [pc, #80]	; (800c6bc <TIM_OC5_SetConfig+0xc4>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d109      	bne.n	800c682 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c674:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	695b      	ldr	r3, [r3, #20]
 800c67a:	021b      	lsls	r3, r3, #8
 800c67c:	697a      	ldr	r2, [r7, #20]
 800c67e:	4313      	orrs	r3, r2
 800c680:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	697a      	ldr	r2, [r7, #20]
 800c686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	685a      	ldr	r2, [r3, #4]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	693a      	ldr	r2, [r7, #16]
 800c69a:	621a      	str	r2, [r3, #32]
}
 800c69c:	bf00      	nop
 800c69e:	371c      	adds	r7, #28
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr
 800c6a8:	fffeff8f 	.word	0xfffeff8f
 800c6ac:	40010000 	.word	0x40010000
 800c6b0:	40010400 	.word	0x40010400
 800c6b4:	40014000 	.word	0x40014000
 800c6b8:	40014400 	.word	0x40014400
 800c6bc:	40014800 	.word	0x40014800

0800c6c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6a1b      	ldr	r3, [r3, #32]
 800c6ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c6e8:	68fa      	ldr	r2, [r7, #12]
 800c6ea:	4b22      	ldr	r3, [pc, #136]	; (800c774 <TIM_OC6_SetConfig+0xb4>)
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	021b      	lsls	r3, r3, #8
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c702:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	051b      	lsls	r3, r3, #20
 800c70a:	693a      	ldr	r2, [r7, #16]
 800c70c:	4313      	orrs	r3, r2
 800c70e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a19      	ldr	r2, [pc, #100]	; (800c778 <TIM_OC6_SetConfig+0xb8>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d00f      	beq.n	800c738 <TIM_OC6_SetConfig+0x78>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a18      	ldr	r2, [pc, #96]	; (800c77c <TIM_OC6_SetConfig+0xbc>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d00b      	beq.n	800c738 <TIM_OC6_SetConfig+0x78>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4a17      	ldr	r2, [pc, #92]	; (800c780 <TIM_OC6_SetConfig+0xc0>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d007      	beq.n	800c738 <TIM_OC6_SetConfig+0x78>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a16      	ldr	r2, [pc, #88]	; (800c784 <TIM_OC6_SetConfig+0xc4>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d003      	beq.n	800c738 <TIM_OC6_SetConfig+0x78>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4a15      	ldr	r2, [pc, #84]	; (800c788 <TIM_OC6_SetConfig+0xc8>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d109      	bne.n	800c74c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c73e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	695b      	ldr	r3, [r3, #20]
 800c744:	029b      	lsls	r3, r3, #10
 800c746:	697a      	ldr	r2, [r7, #20]
 800c748:	4313      	orrs	r3, r2
 800c74a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	697a      	ldr	r2, [r7, #20]
 800c750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	68fa      	ldr	r2, [r7, #12]
 800c756:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	693a      	ldr	r2, [r7, #16]
 800c764:	621a      	str	r2, [r3, #32]
}
 800c766:	bf00      	nop
 800c768:	371c      	adds	r7, #28
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	feff8fff 	.word	0xfeff8fff
 800c778:	40010000 	.word	0x40010000
 800c77c:	40010400 	.word	0x40010400
 800c780:	40014000 	.word	0x40014000
 800c784:	40014400 	.word	0x40014400
 800c788:	40014800 	.word	0x40014800

0800c78c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b087      	sub	sp, #28
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6a1b      	ldr	r3, [r3, #32]
 800c79c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6a1b      	ldr	r3, [r3, #32]
 800c7a2:	f023 0201 	bic.w	r2, r3, #1
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	699b      	ldr	r3, [r3, #24]
 800c7ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	011b      	lsls	r3, r3, #4
 800c7bc:	693a      	ldr	r2, [r7, #16]
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f023 030a 	bic.w	r3, r3, #10
 800c7c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c7ca:	697a      	ldr	r2, [r7, #20]
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	693a      	ldr	r2, [r7, #16]
 800c7d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	697a      	ldr	r2, [r7, #20]
 800c7dc:	621a      	str	r2, [r3, #32]
}
 800c7de:	bf00      	nop
 800c7e0:	371c      	adds	r7, #28
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b087      	sub	sp, #28
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	60f8      	str	r0, [r7, #12]
 800c7f2:	60b9      	str	r1, [r7, #8]
 800c7f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	6a1b      	ldr	r3, [r3, #32]
 800c7fa:	f023 0210 	bic.w	r2, r3, #16
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	699b      	ldr	r3, [r3, #24]
 800c806:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6a1b      	ldr	r3, [r3, #32]
 800c80c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c814:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	031b      	lsls	r3, r3, #12
 800c81a:	697a      	ldr	r2, [r7, #20]
 800c81c:	4313      	orrs	r3, r2
 800c81e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c826:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	011b      	lsls	r3, r3, #4
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	4313      	orrs	r3, r2
 800c830:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	697a      	ldr	r2, [r7, #20]
 800c836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	621a      	str	r2, [r3, #32]
}
 800c83e:	bf00      	nop
 800c840:	371c      	adds	r7, #28
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr
	...

0800c84c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	4b09      	ldr	r3, [pc, #36]	; (800c884 <TIM_ITRx_SetConfig+0x38>)
 800c860:	4013      	ands	r3, r2
 800c862:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c864:	683a      	ldr	r2, [r7, #0]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	4313      	orrs	r3, r2
 800c86a:	f043 0307 	orr.w	r3, r3, #7
 800c86e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	609a      	str	r2, [r3, #8]
}
 800c876:	bf00      	nop
 800c878:	3714      	adds	r7, #20
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	ffcfff8f 	.word	0xffcfff8f

0800c888 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c888:	b480      	push	{r7}
 800c88a:	b087      	sub	sp, #28
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
 800c894:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c8a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	021a      	lsls	r2, r3, #8
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	431a      	orrs	r2, r3
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	697a      	ldr	r2, [r7, #20]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	609a      	str	r2, [r3, #8]
}
 800c8bc:	bf00      	nop
 800c8be:	371c      	adds	r7, #28
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b087      	sub	sp, #28
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	f003 031f 	and.w	r3, r3, #31
 800c8da:	2201      	movs	r2, #1
 800c8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6a1a      	ldr	r2, [r3, #32]
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	43db      	mvns	r3, r3
 800c8ea:	401a      	ands	r2, r3
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6a1a      	ldr	r2, [r3, #32]
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	f003 031f 	and.w	r3, r3, #31
 800c8fa:	6879      	ldr	r1, [r7, #4]
 800c8fc:	fa01 f303 	lsl.w	r3, r1, r3
 800c900:	431a      	orrs	r2, r3
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	621a      	str	r2, [r3, #32]
}
 800c906:	bf00      	nop
 800c908:	371c      	adds	r7, #28
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
	...

0800c914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c924:	2b01      	cmp	r3, #1
 800c926:	d101      	bne.n	800c92c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c928:	2302      	movs	r3, #2
 800c92a:	e077      	b.n	800ca1c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2201      	movs	r2, #1
 800c930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2202      	movs	r2, #2
 800c938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a35      	ldr	r2, [pc, #212]	; (800ca28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d004      	beq.n	800c960 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a34      	ldr	r2, [pc, #208]	; (800ca2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d108      	bne.n	800c972 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c966:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	4313      	orrs	r3, r2
 800c970:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c978:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68fa      	ldr	r2, [r7, #12]
 800c980:	4313      	orrs	r3, r2
 800c982:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a25      	ldr	r2, [pc, #148]	; (800ca28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d02c      	beq.n	800c9f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c99e:	d027      	beq.n	800c9f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a22      	ldr	r2, [pc, #136]	; (800ca30 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d022      	beq.n	800c9f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4a21      	ldr	r2, [pc, #132]	; (800ca34 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d01d      	beq.n	800c9f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a1f      	ldr	r2, [pc, #124]	; (800ca38 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d018      	beq.n	800c9f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a1a      	ldr	r2, [pc, #104]	; (800ca2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d013      	beq.n	800c9f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a1b      	ldr	r2, [pc, #108]	; (800ca3c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d00e      	beq.n	800c9f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a1a      	ldr	r2, [pc, #104]	; (800ca40 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d009      	beq.n	800c9f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a18      	ldr	r2, [pc, #96]	; (800ca44 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d004      	beq.n	800c9f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a17      	ldr	r2, [pc, #92]	; (800ca48 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d10c      	bne.n	800ca0a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	68ba      	ldr	r2, [r7, #8]
 800ca08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2200      	movs	r2, #0
 800ca16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca1a:	2300      	movs	r3, #0
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	40010000 	.word	0x40010000
 800ca2c:	40010400 	.word	0x40010400
 800ca30:	40000400 	.word	0x40000400
 800ca34:	40000800 	.word	0x40000800
 800ca38:	40000c00 	.word	0x40000c00
 800ca3c:	40001800 	.word	0x40001800
 800ca40:	40014000 	.word	0x40014000
 800ca44:	4000e000 	.word	0x4000e000
 800ca48:	4000e400 	.word	0x4000e400

0800ca4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ca56:	2300      	movs	r3, #0
 800ca58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d101      	bne.n	800ca68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ca64:	2302      	movs	r3, #2
 800ca66:	e087      	b.n	800cb78 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	4313      	orrs	r3, r2
 800ca98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4313      	orrs	r3, r2
 800caa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	691b      	ldr	r3, [r3, #16]
 800cab2:	4313      	orrs	r3, r2
 800cab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	695b      	ldr	r3, [r3, #20]
 800cac0:	4313      	orrs	r3, r2
 800cac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cace:	4313      	orrs	r3, r2
 800cad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	699b      	ldr	r3, [r3, #24]
 800cadc:	041b      	lsls	r3, r3, #16
 800cade:	4313      	orrs	r3, r2
 800cae0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4a27      	ldr	r2, [pc, #156]	; (800cb84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d004      	beq.n	800caf6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a25      	ldr	r2, [pc, #148]	; (800cb88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d106      	bne.n	800cb04 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	69db      	ldr	r3, [r3, #28]
 800cb00:	4313      	orrs	r3, r2
 800cb02:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a1e      	ldr	r2, [pc, #120]	; (800cb84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d004      	beq.n	800cb18 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	4a1d      	ldr	r2, [pc, #116]	; (800cb88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d126      	bne.n	800cb66 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb22:	051b      	lsls	r3, r3, #20
 800cb24:	4313      	orrs	r3, r2
 800cb26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	6a1b      	ldr	r3, [r3, #32]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb40:	4313      	orrs	r3, r2
 800cb42:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a0e      	ldr	r2, [pc, #56]	; (800cb84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d004      	beq.n	800cb58 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4a0d      	ldr	r2, [pc, #52]	; (800cb88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d106      	bne.n	800cb66 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb62:	4313      	orrs	r3, r2
 800cb64:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3714      	adds	r7, #20
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr
 800cb84:	40010000 	.word	0x40010000
 800cb88:	40010400 	.word	0x40010400

0800cb8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cba8:	bf00      	nop
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cbbc:	bf00      	nop
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d101      	bne.n	800cbda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e042      	b.n	800cc60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d106      	bne.n	800cbf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7f8 fcc9 	bl	8005584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2224      	movs	r2, #36	; 0x24
 800cbf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f022 0201 	bic.w	r2, r2, #1
 800cc08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 fcdc 	bl	800d5c8 <UART_SetConfig>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d101      	bne.n	800cc1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cc16:	2301      	movs	r3, #1
 800cc18:	e022      	b.n	800cc60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d002      	beq.n	800cc28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f001 fb3c 	bl	800e2a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	685a      	ldr	r2, [r3, #4]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cc36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	689a      	ldr	r2, [r3, #8]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f042 0201 	orr.w	r2, r2, #1
 800cc56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f001 fbc3 	bl	800e3e4 <UART_CheckIdleState>
 800cc5e:	4603      	mov	r3, r0
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b08a      	sub	sp, #40	; 0x28
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	4613      	mov	r3, r2
 800cc74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc7c:	2b20      	cmp	r3, #32
 800cc7e:	d17a      	bne.n	800cd76 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d002      	beq.n	800cc8c <HAL_UART_Transmit_DMA+0x24>
 800cc86:	88fb      	ldrh	r3, [r7, #6]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d101      	bne.n	800cc90 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e073      	b.n	800cd78 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d101      	bne.n	800cc9e <HAL_UART_Transmit_DMA+0x36>
 800cc9a:	2302      	movs	r3, #2
 800cc9c:	e06c      	b.n	800cd78 <HAL_UART_Transmit_DMA+0x110>
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2201      	movs	r2, #1
 800cca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	68ba      	ldr	r2, [r7, #8]
 800ccaa:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	88fa      	ldrh	r2, [r7, #6]
 800ccb0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	88fa      	ldrh	r2, [r7, #6]
 800ccb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2221      	movs	r2, #33	; 0x21
 800ccc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d02c      	beq.n	800cd2e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccd8:	4a29      	ldr	r2, [pc, #164]	; (800cd80 <HAL_UART_Transmit_DMA+0x118>)
 800ccda:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cce0:	4a28      	ldr	r2, [pc, #160]	; (800cd84 <HAL_UART_Transmit_DMA+0x11c>)
 800cce2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cce8:	4a27      	ldr	r2, [pc, #156]	; (800cd88 <HAL_UART_Transmit_DMA+0x120>)
 800ccea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	3328      	adds	r3, #40	; 0x28
 800cd04:	461a      	mov	r2, r3
 800cd06:	88fb      	ldrh	r3, [r7, #6]
 800cd08:	f7f9 fb5e 	bl	80063c8 <HAL_DMA_Start_IT>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d00d      	beq.n	800cd2e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2210      	movs	r2, #16
 800cd16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2220      	movs	r2, #32
 800cd26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e024      	b.n	800cd78 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2240      	movs	r2, #64	; 0x40
 800cd34:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3308      	adds	r3, #8
 800cd44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	e853 3f00 	ldrex	r3, [r3]
 800cd4c:	613b      	str	r3, [r7, #16]
   return(result);
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd54:	627b      	str	r3, [r7, #36]	; 0x24
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	3308      	adds	r3, #8
 800cd5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd5e:	623a      	str	r2, [r7, #32]
 800cd60:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd62:	69f9      	ldr	r1, [r7, #28]
 800cd64:	6a3a      	ldr	r2, [r7, #32]
 800cd66:	e841 2300 	strex	r3, r2, [r1]
 800cd6a:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1e5      	bne.n	800cd3e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800cd72:	2300      	movs	r3, #0
 800cd74:	e000      	b.n	800cd78 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800cd76:	2302      	movs	r3, #2
  }
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3728      	adds	r7, #40	; 0x28
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	0800e8ad 	.word	0x0800e8ad
 800cd84:	0800e943 	.word	0x0800e943
 800cd88:	0800eab9 	.word	0x0800eab9

0800cd8c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08a      	sub	sp, #40	; 0x28
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	4613      	mov	r3, r2
 800cd98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cda0:	2b20      	cmp	r3, #32
 800cda2:	d142      	bne.n	800ce2a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d002      	beq.n	800cdb0 <HAL_UART_Receive_DMA+0x24>
 800cdaa:	88fb      	ldrh	r3, [r7, #6]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d101      	bne.n	800cdb4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e03b      	b.n	800ce2c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d101      	bne.n	800cdc2 <HAL_UART_Receive_DMA+0x36>
 800cdbe:	2302      	movs	r3, #2
 800cdc0:	e034      	b.n	800ce2c <HAL_UART_Receive_DMA+0xa0>
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a17      	ldr	r2, [pc, #92]	; (800ce34 <HAL_UART_Receive_DMA+0xa8>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d01f      	beq.n	800ce1a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d018      	beq.n	800ce1a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	e853 3f00 	ldrex	r3, [r3]
 800cdf4:	613b      	str	r3, [r7, #16]
   return(result);
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cdfc:	627b      	str	r3, [r7, #36]	; 0x24
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	461a      	mov	r2, r3
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	623b      	str	r3, [r7, #32]
 800ce08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce0a:	69f9      	ldr	r1, [r7, #28]
 800ce0c:	6a3a      	ldr	r2, [r7, #32]
 800ce0e:	e841 2300 	strex	r3, r2, [r1]
 800ce12:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d1e6      	bne.n	800cde8 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ce1a:	88fb      	ldrh	r3, [r7, #6]
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	68b9      	ldr	r1, [r7, #8]
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f001 fbf3 	bl	800e60c <UART_Start_Receive_DMA>
 800ce26:	4603      	mov	r3, r0
 800ce28:	e000      	b.n	800ce2c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ce2a:	2302      	movs	r3, #2
  }
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3728      	adds	r7, #40	; 0x28
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	58000c00 	.word	0x58000c00

0800ce38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b0ba      	sub	sp, #232	; 0xe8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	69db      	ldr	r3, [r3, #28]
 800ce46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ce5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ce62:	f640 030f 	movw	r3, #2063	; 0x80f
 800ce66:	4013      	ands	r3, r2
 800ce68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ce6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d11b      	bne.n	800ceac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ce74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce78:	f003 0320 	and.w	r3, r3, #32
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d015      	beq.n	800ceac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ce80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce84:	f003 0320 	and.w	r3, r3, #32
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d105      	bne.n	800ce98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d009      	beq.n	800ceac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f000 835a 	beq.w	800d556 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	4798      	blx	r3
      }
      return;
 800ceaa:	e354      	b.n	800d556 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ceac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f000 811f 	beq.w	800d0f4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ceb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ceba:	4b8b      	ldr	r3, [pc, #556]	; (800d0e8 <HAL_UART_IRQHandler+0x2b0>)
 800cebc:	4013      	ands	r3, r2
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d106      	bne.n	800ced0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cec2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cec6:	4b89      	ldr	r3, [pc, #548]	; (800d0ec <HAL_UART_IRQHandler+0x2b4>)
 800cec8:	4013      	ands	r3, r2
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f000 8112 	beq.w	800d0f4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ced0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ced4:	f003 0301 	and.w	r3, r3, #1
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d011      	beq.n	800cf00 <HAL_UART_IRQHandler+0xc8>
 800cedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00b      	beq.n	800cf00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2201      	movs	r2, #1
 800ceee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cef6:	f043 0201 	orr.w	r2, r3, #1
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf04:	f003 0302 	and.w	r3, r3, #2
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d011      	beq.n	800cf30 <HAL_UART_IRQHandler+0xf8>
 800cf0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf10:	f003 0301 	and.w	r3, r3, #1
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00b      	beq.n	800cf30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2202      	movs	r2, #2
 800cf1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf26:	f043 0204 	orr.w	r2, r3, #4
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf34:	f003 0304 	and.w	r3, r3, #4
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d011      	beq.n	800cf60 <HAL_UART_IRQHandler+0x128>
 800cf3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf40:	f003 0301 	and.w	r3, r3, #1
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00b      	beq.n	800cf60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2204      	movs	r2, #4
 800cf4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf56:	f043 0202 	orr.w	r2, r3, #2
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cf60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf64:	f003 0308 	and.w	r3, r3, #8
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d017      	beq.n	800cf9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf70:	f003 0320 	and.w	r3, r3, #32
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d105      	bne.n	800cf84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cf78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf7c:	4b5a      	ldr	r3, [pc, #360]	; (800d0e8 <HAL_UART_IRQHandler+0x2b0>)
 800cf7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d00b      	beq.n	800cf9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2208      	movs	r2, #8
 800cf8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf92:	f043 0208 	orr.w	r2, r3, #8
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cf9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d012      	beq.n	800cfce <HAL_UART_IRQHandler+0x196>
 800cfa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00c      	beq.n	800cfce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfc4:	f043 0220 	orr.w	r2, r3, #32
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f000 82c0 	beq.w	800d55a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cfda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfde:	f003 0320 	and.w	r3, r3, #32
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d013      	beq.n	800d00e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cfe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfea:	f003 0320 	and.w	r3, r3, #32
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d105      	bne.n	800cffe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d007      	beq.n	800d00e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d002:	2b00      	cmp	r3, #0
 800d004:	d003      	beq.n	800d00e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d014:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d022:	2b40      	cmp	r3, #64	; 0x40
 800d024:	d005      	beq.n	800d032 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d02a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d04f      	beq.n	800d0d2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f001 fbd4 	bl	800e7e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d042:	2b40      	cmp	r3, #64	; 0x40
 800d044:	d141      	bne.n	800d0ca <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3308      	adds	r3, #8
 800d04c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d050:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d054:	e853 3f00 	ldrex	r3, [r3]
 800d058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d05c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	3308      	adds	r3, #8
 800d06e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d072:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d076:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d07e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d082:	e841 2300 	strex	r3, r2, [r1]
 800d086:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d08a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d1d9      	bne.n	800d046 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d096:	2b00      	cmp	r3, #0
 800d098:	d013      	beq.n	800d0c2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d09e:	4a14      	ldr	r2, [pc, #80]	; (800d0f0 <HAL_UART_IRQHandler+0x2b8>)
 800d0a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7f9 ff16 	bl	8006ed8 <HAL_DMA_Abort_IT>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d017      	beq.n	800d0e2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d0bc:	4610      	mov	r0, r2
 800d0be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0c0:	e00f      	b.n	800d0e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 fa6a 	bl	800d59c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0c8:	e00b      	b.n	800d0e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 fa66 	bl	800d59c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0d0:	e007      	b.n	800d0e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 fa62 	bl	800d59c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d0e0:	e23b      	b.n	800d55a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0e2:	bf00      	nop
    return;
 800d0e4:	e239      	b.n	800d55a <HAL_UART_IRQHandler+0x722>
 800d0e6:	bf00      	nop
 800d0e8:	10000001 	.word	0x10000001
 800d0ec:	04000120 	.word	0x04000120
 800d0f0:	0800eb39 	.word	0x0800eb39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	f040 81ce 	bne.w	800d49a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d102:	f003 0310 	and.w	r3, r3, #16
 800d106:	2b00      	cmp	r3, #0
 800d108:	f000 81c7 	beq.w	800d49a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d110:	f003 0310 	and.w	r3, r3, #16
 800d114:	2b00      	cmp	r3, #0
 800d116:	f000 81c0 	beq.w	800d49a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2210      	movs	r2, #16
 800d120:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d12c:	2b40      	cmp	r3, #64	; 0x40
 800d12e:	f040 813b 	bne.w	800d3a8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a8b      	ldr	r2, [pc, #556]	; (800d368 <HAL_UART_IRQHandler+0x530>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d059      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a89      	ldr	r2, [pc, #548]	; (800d36c <HAL_UART_IRQHandler+0x534>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d053      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a87      	ldr	r2, [pc, #540]	; (800d370 <HAL_UART_IRQHandler+0x538>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d04d      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a85      	ldr	r2, [pc, #532]	; (800d374 <HAL_UART_IRQHandler+0x53c>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d047      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a83      	ldr	r2, [pc, #524]	; (800d378 <HAL_UART_IRQHandler+0x540>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d041      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a81      	ldr	r2, [pc, #516]	; (800d37c <HAL_UART_IRQHandler+0x544>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d03b      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a7f      	ldr	r2, [pc, #508]	; (800d380 <HAL_UART_IRQHandler+0x548>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d035      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a7d      	ldr	r2, [pc, #500]	; (800d384 <HAL_UART_IRQHandler+0x54c>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d02f      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a7b      	ldr	r2, [pc, #492]	; (800d388 <HAL_UART_IRQHandler+0x550>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d029      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a79      	ldr	r2, [pc, #484]	; (800d38c <HAL_UART_IRQHandler+0x554>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d023      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a77      	ldr	r2, [pc, #476]	; (800d390 <HAL_UART_IRQHandler+0x558>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d01d      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a75      	ldr	r2, [pc, #468]	; (800d394 <HAL_UART_IRQHandler+0x55c>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d017      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a73      	ldr	r2, [pc, #460]	; (800d398 <HAL_UART_IRQHandler+0x560>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d011      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a71      	ldr	r2, [pc, #452]	; (800d39c <HAL_UART_IRQHandler+0x564>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d00b      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a6f      	ldr	r2, [pc, #444]	; (800d3a0 <HAL_UART_IRQHandler+0x568>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d005      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x3ba>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a6d      	ldr	r2, [pc, #436]	; (800d3a4 <HAL_UART_IRQHandler+0x56c>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d105      	bne.n	800d1fe <HAL_UART_IRQHandler+0x3c6>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	e004      	b.n	800d208 <HAL_UART_IRQHandler+0x3d0>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	b29b      	uxth	r3, r3
 800d208:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d20c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d210:	2b00      	cmp	r3, #0
 800d212:	f000 81a4 	beq.w	800d55e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d21c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d220:	429a      	cmp	r2, r3
 800d222:	f080 819c 	bcs.w	800d55e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d22c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d234:	69db      	ldr	r3, [r3, #28]
 800d236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d23a:	f000 8086 	beq.w	800d34a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d246:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d24a:	e853 3f00 	ldrex	r3, [r3]
 800d24e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d25a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	461a      	mov	r2, r3
 800d264:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d26c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d270:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d274:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d278:	e841 2300 	strex	r3, r2, [r1]
 800d27c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d284:	2b00      	cmp	r3, #0
 800d286:	d1da      	bne.n	800d23e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	3308      	adds	r3, #8
 800d28e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d292:	e853 3f00 	ldrex	r3, [r3]
 800d296:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d29a:	f023 0301 	bic.w	r3, r3, #1
 800d29e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	3308      	adds	r3, #8
 800d2a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d2ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d2b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d2b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d2b8:	e841 2300 	strex	r3, r2, [r1]
 800d2bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d2be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1e1      	bne.n	800d288 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	3308      	adds	r3, #8
 800d2ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2ce:	e853 3f00 	ldrex	r3, [r3]
 800d2d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d2d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	3308      	adds	r3, #8
 800d2e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d2e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d2ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d2ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d2f0:	e841 2300 	strex	r3, r2, [r1]
 800d2f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d2f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1e3      	bne.n	800d2c4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2220      	movs	r2, #32
 800d300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d312:	e853 3f00 	ldrex	r3, [r3]
 800d316:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d31a:	f023 0310 	bic.w	r3, r3, #16
 800d31e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	461a      	mov	r2, r3
 800d328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d32c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d32e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d330:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d332:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d334:	e841 2300 	strex	r3, r2, [r1]
 800d338:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d33a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1e4      	bne.n	800d30a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d344:	4618      	mov	r0, r3
 800d346:	f7f9 faa9 	bl	800689c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d356:	b29b      	uxth	r3, r3
 800d358:	1ad3      	subs	r3, r2, r3
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	4619      	mov	r1, r3
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 f926 	bl	800d5b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d364:	e0fb      	b.n	800d55e <HAL_UART_IRQHandler+0x726>
 800d366:	bf00      	nop
 800d368:	40020010 	.word	0x40020010
 800d36c:	40020028 	.word	0x40020028
 800d370:	40020040 	.word	0x40020040
 800d374:	40020058 	.word	0x40020058
 800d378:	40020070 	.word	0x40020070
 800d37c:	40020088 	.word	0x40020088
 800d380:	400200a0 	.word	0x400200a0
 800d384:	400200b8 	.word	0x400200b8
 800d388:	40020410 	.word	0x40020410
 800d38c:	40020428 	.word	0x40020428
 800d390:	40020440 	.word	0x40020440
 800d394:	40020458 	.word	0x40020458
 800d398:	40020470 	.word	0x40020470
 800d39c:	40020488 	.word	0x40020488
 800d3a0:	400204a0 	.word	0x400204a0
 800d3a4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	1ad3      	subs	r3, r2, r3
 800d3b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	f000 80cc 	beq.w	800d562 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d3ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f000 80c7 	beq.w	800d562 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3dc:	e853 3f00 	ldrex	r3, [r3]
 800d3e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d3e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d3f6:	647b      	str	r3, [r7, #68]	; 0x44
 800d3f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d3fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3fe:	e841 2300 	strex	r3, r2, [r1]
 800d402:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1e4      	bne.n	800d3d4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	3308      	adds	r3, #8
 800d410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d414:	e853 3f00 	ldrex	r3, [r3]
 800d418:	623b      	str	r3, [r7, #32]
   return(result);
 800d41a:	6a3a      	ldr	r2, [r7, #32]
 800d41c:	4b54      	ldr	r3, [pc, #336]	; (800d570 <HAL_UART_IRQHandler+0x738>)
 800d41e:	4013      	ands	r3, r2
 800d420:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	3308      	adds	r3, #8
 800d42a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d42e:	633a      	str	r2, [r7, #48]	; 0x30
 800d430:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d436:	e841 2300 	strex	r3, r2, [r1]
 800d43a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1e3      	bne.n	800d40a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2220      	movs	r2, #32
 800d446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2200      	movs	r2, #0
 800d44e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	e853 3f00 	ldrex	r3, [r3]
 800d462:	60fb      	str	r3, [r7, #12]
   return(result);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f023 0310 	bic.w	r3, r3, #16
 800d46a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	461a      	mov	r2, r3
 800d474:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d478:	61fb      	str	r3, [r7, #28]
 800d47a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47c:	69b9      	ldr	r1, [r7, #24]
 800d47e:	69fa      	ldr	r2, [r7, #28]
 800d480:	e841 2300 	strex	r3, r2, [r1]
 800d484:	617b      	str	r3, [r7, #20]
   return(result);
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1e4      	bne.n	800d456 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d48c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d490:	4619      	mov	r1, r3
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 f88c 	bl	800d5b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d498:	e063      	b.n	800d562 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d49a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d49e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00e      	beq.n	800d4c4 <HAL_UART_IRQHandler+0x68c>
 800d4a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d008      	beq.n	800d4c4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d4ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f001 fb7c 	bl	800ebba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4c2:	e051      	b.n	800d568 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d4c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d014      	beq.n	800d4fa <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d4d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d105      	bne.n	800d4e8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d4dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d008      	beq.n	800d4fa <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d03a      	beq.n	800d566 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	4798      	blx	r3
    }
    return;
 800d4f8:	e035      	b.n	800d566 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d502:	2b00      	cmp	r3, #0
 800d504:	d009      	beq.n	800d51a <HAL_UART_IRQHandler+0x6e2>
 800d506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d50a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d003      	beq.n	800d51a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f001 fb26 	bl	800eb64 <UART_EndTransmit_IT>
    return;
 800d518:	e026      	b.n	800d568 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d51e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d522:	2b00      	cmp	r3, #0
 800d524:	d009      	beq.n	800d53a <HAL_UART_IRQHandler+0x702>
 800d526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d52a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d003      	beq.n	800d53a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f001 fb55 	bl	800ebe2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d538:	e016      	b.n	800d568 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d53a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d53e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d542:	2b00      	cmp	r3, #0
 800d544:	d010      	beq.n	800d568 <HAL_UART_IRQHandler+0x730>
 800d546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	da0c      	bge.n	800d568 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f001 fb3d 	bl	800ebce <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d554:	e008      	b.n	800d568 <HAL_UART_IRQHandler+0x730>
      return;
 800d556:	bf00      	nop
 800d558:	e006      	b.n	800d568 <HAL_UART_IRQHandler+0x730>
    return;
 800d55a:	bf00      	nop
 800d55c:	e004      	b.n	800d568 <HAL_UART_IRQHandler+0x730>
      return;
 800d55e:	bf00      	nop
 800d560:	e002      	b.n	800d568 <HAL_UART_IRQHandler+0x730>
      return;
 800d562:	bf00      	nop
 800d564:	e000      	b.n	800d568 <HAL_UART_IRQHandler+0x730>
    return;
 800d566:	bf00      	nop
  }
}
 800d568:	37e8      	adds	r7, #232	; 0xe8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	effffffe 	.word	0xeffffffe

0800d574 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d57c:	bf00      	nop
 800d57e:	370c      	adds	r7, #12
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d590:	bf00      	nop
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d5a4:	bf00      	nop
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b083      	sub	sp, #12
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d5bc:	bf00      	nop
 800d5be:	370c      	adds	r7, #12
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d5c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d5cc:	b092      	sub	sp, #72	; 0x48
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	689a      	ldr	r2, [r3, #8]
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	691b      	ldr	r3, [r3, #16]
 800d5e0:	431a      	orrs	r2, r3
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	695b      	ldr	r3, [r3, #20]
 800d5e6:	431a      	orrs	r2, r3
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	69db      	ldr	r3, [r3, #28]
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	4bbe      	ldr	r3, [pc, #760]	; (800d8f0 <UART_SetConfig+0x328>)
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	697a      	ldr	r2, [r7, #20]
 800d5fc:	6812      	ldr	r2, [r2, #0]
 800d5fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d600:	430b      	orrs	r3, r1
 800d602:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	68da      	ldr	r2, [r3, #12]
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	430a      	orrs	r2, r1
 800d618:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	699b      	ldr	r3, [r3, #24]
 800d61e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4ab3      	ldr	r2, [pc, #716]	; (800d8f4 <UART_SetConfig+0x32c>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d004      	beq.n	800d634 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	6a1b      	ldr	r3, [r3, #32]
 800d62e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d630:	4313      	orrs	r3, r2
 800d632:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	689a      	ldr	r2, [r3, #8]
 800d63a:	4baf      	ldr	r3, [pc, #700]	; (800d8f8 <UART_SetConfig+0x330>)
 800d63c:	4013      	ands	r3, r2
 800d63e:	697a      	ldr	r2, [r7, #20]
 800d640:	6812      	ldr	r2, [r2, #0]
 800d642:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d644:	430b      	orrs	r3, r1
 800d646:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64e:	f023 010f 	bic.w	r1, r3, #15
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	430a      	orrs	r2, r1
 800d65c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	4aa6      	ldr	r2, [pc, #664]	; (800d8fc <UART_SetConfig+0x334>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d177      	bne.n	800d758 <UART_SetConfig+0x190>
 800d668:	4ba5      	ldr	r3, [pc, #660]	; (800d900 <UART_SetConfig+0x338>)
 800d66a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d66c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d670:	2b28      	cmp	r3, #40	; 0x28
 800d672:	d86d      	bhi.n	800d750 <UART_SetConfig+0x188>
 800d674:	a201      	add	r2, pc, #4	; (adr r2, 800d67c <UART_SetConfig+0xb4>)
 800d676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d67a:	bf00      	nop
 800d67c:	0800d721 	.word	0x0800d721
 800d680:	0800d751 	.word	0x0800d751
 800d684:	0800d751 	.word	0x0800d751
 800d688:	0800d751 	.word	0x0800d751
 800d68c:	0800d751 	.word	0x0800d751
 800d690:	0800d751 	.word	0x0800d751
 800d694:	0800d751 	.word	0x0800d751
 800d698:	0800d751 	.word	0x0800d751
 800d69c:	0800d729 	.word	0x0800d729
 800d6a0:	0800d751 	.word	0x0800d751
 800d6a4:	0800d751 	.word	0x0800d751
 800d6a8:	0800d751 	.word	0x0800d751
 800d6ac:	0800d751 	.word	0x0800d751
 800d6b0:	0800d751 	.word	0x0800d751
 800d6b4:	0800d751 	.word	0x0800d751
 800d6b8:	0800d751 	.word	0x0800d751
 800d6bc:	0800d731 	.word	0x0800d731
 800d6c0:	0800d751 	.word	0x0800d751
 800d6c4:	0800d751 	.word	0x0800d751
 800d6c8:	0800d751 	.word	0x0800d751
 800d6cc:	0800d751 	.word	0x0800d751
 800d6d0:	0800d751 	.word	0x0800d751
 800d6d4:	0800d751 	.word	0x0800d751
 800d6d8:	0800d751 	.word	0x0800d751
 800d6dc:	0800d739 	.word	0x0800d739
 800d6e0:	0800d751 	.word	0x0800d751
 800d6e4:	0800d751 	.word	0x0800d751
 800d6e8:	0800d751 	.word	0x0800d751
 800d6ec:	0800d751 	.word	0x0800d751
 800d6f0:	0800d751 	.word	0x0800d751
 800d6f4:	0800d751 	.word	0x0800d751
 800d6f8:	0800d751 	.word	0x0800d751
 800d6fc:	0800d741 	.word	0x0800d741
 800d700:	0800d751 	.word	0x0800d751
 800d704:	0800d751 	.word	0x0800d751
 800d708:	0800d751 	.word	0x0800d751
 800d70c:	0800d751 	.word	0x0800d751
 800d710:	0800d751 	.word	0x0800d751
 800d714:	0800d751 	.word	0x0800d751
 800d718:	0800d751 	.word	0x0800d751
 800d71c:	0800d749 	.word	0x0800d749
 800d720:	2301      	movs	r3, #1
 800d722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d726:	e326      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d728:	2304      	movs	r3, #4
 800d72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72e:	e322      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d730:	2308      	movs	r3, #8
 800d732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d736:	e31e      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d738:	2310      	movs	r3, #16
 800d73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73e:	e31a      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d740:	2320      	movs	r3, #32
 800d742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d746:	e316      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d748:	2340      	movs	r3, #64	; 0x40
 800d74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d74e:	e312      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d750:	2380      	movs	r3, #128	; 0x80
 800d752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d756:	e30e      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a69      	ldr	r2, [pc, #420]	; (800d904 <UART_SetConfig+0x33c>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d130      	bne.n	800d7c4 <UART_SetConfig+0x1fc>
 800d762:	4b67      	ldr	r3, [pc, #412]	; (800d900 <UART_SetConfig+0x338>)
 800d764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d766:	f003 0307 	and.w	r3, r3, #7
 800d76a:	2b05      	cmp	r3, #5
 800d76c:	d826      	bhi.n	800d7bc <UART_SetConfig+0x1f4>
 800d76e:	a201      	add	r2, pc, #4	; (adr r2, 800d774 <UART_SetConfig+0x1ac>)
 800d770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d774:	0800d78d 	.word	0x0800d78d
 800d778:	0800d795 	.word	0x0800d795
 800d77c:	0800d79d 	.word	0x0800d79d
 800d780:	0800d7a5 	.word	0x0800d7a5
 800d784:	0800d7ad 	.word	0x0800d7ad
 800d788:	0800d7b5 	.word	0x0800d7b5
 800d78c:	2300      	movs	r3, #0
 800d78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d792:	e2f0      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d794:	2304      	movs	r3, #4
 800d796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79a:	e2ec      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d79c:	2308      	movs	r3, #8
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a2:	e2e8      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d7a4:	2310      	movs	r3, #16
 800d7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7aa:	e2e4      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d7ac:	2320      	movs	r3, #32
 800d7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7b2:	e2e0      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d7b4:	2340      	movs	r3, #64	; 0x40
 800d7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ba:	e2dc      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d7bc:	2380      	movs	r3, #128	; 0x80
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7c2:	e2d8      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a4f      	ldr	r2, [pc, #316]	; (800d908 <UART_SetConfig+0x340>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d130      	bne.n	800d830 <UART_SetConfig+0x268>
 800d7ce:	4b4c      	ldr	r3, [pc, #304]	; (800d900 <UART_SetConfig+0x338>)
 800d7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7d2:	f003 0307 	and.w	r3, r3, #7
 800d7d6:	2b05      	cmp	r3, #5
 800d7d8:	d826      	bhi.n	800d828 <UART_SetConfig+0x260>
 800d7da:	a201      	add	r2, pc, #4	; (adr r2, 800d7e0 <UART_SetConfig+0x218>)
 800d7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e0:	0800d7f9 	.word	0x0800d7f9
 800d7e4:	0800d801 	.word	0x0800d801
 800d7e8:	0800d809 	.word	0x0800d809
 800d7ec:	0800d811 	.word	0x0800d811
 800d7f0:	0800d819 	.word	0x0800d819
 800d7f4:	0800d821 	.word	0x0800d821
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fe:	e2ba      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d800:	2304      	movs	r3, #4
 800d802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d806:	e2b6      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d808:	2308      	movs	r3, #8
 800d80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80e:	e2b2      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d810:	2310      	movs	r3, #16
 800d812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d816:	e2ae      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d818:	2320      	movs	r3, #32
 800d81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d81e:	e2aa      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d820:	2340      	movs	r3, #64	; 0x40
 800d822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d826:	e2a6      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d828:	2380      	movs	r3, #128	; 0x80
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d82e:	e2a2      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a35      	ldr	r2, [pc, #212]	; (800d90c <UART_SetConfig+0x344>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d130      	bne.n	800d89c <UART_SetConfig+0x2d4>
 800d83a:	4b31      	ldr	r3, [pc, #196]	; (800d900 <UART_SetConfig+0x338>)
 800d83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d83e:	f003 0307 	and.w	r3, r3, #7
 800d842:	2b05      	cmp	r3, #5
 800d844:	d826      	bhi.n	800d894 <UART_SetConfig+0x2cc>
 800d846:	a201      	add	r2, pc, #4	; (adr r2, 800d84c <UART_SetConfig+0x284>)
 800d848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d84c:	0800d865 	.word	0x0800d865
 800d850:	0800d86d 	.word	0x0800d86d
 800d854:	0800d875 	.word	0x0800d875
 800d858:	0800d87d 	.word	0x0800d87d
 800d85c:	0800d885 	.word	0x0800d885
 800d860:	0800d88d 	.word	0x0800d88d
 800d864:	2300      	movs	r3, #0
 800d866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d86a:	e284      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d86c:	2304      	movs	r3, #4
 800d86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d872:	e280      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d874:	2308      	movs	r3, #8
 800d876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d87a:	e27c      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d87c:	2310      	movs	r3, #16
 800d87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d882:	e278      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d884:	2320      	movs	r3, #32
 800d886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d88a:	e274      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d88c:	2340      	movs	r3, #64	; 0x40
 800d88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d892:	e270      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d894:	2380      	movs	r3, #128	; 0x80
 800d896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d89a:	e26c      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a1b      	ldr	r2, [pc, #108]	; (800d910 <UART_SetConfig+0x348>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d142      	bne.n	800d92c <UART_SetConfig+0x364>
 800d8a6:	4b16      	ldr	r3, [pc, #88]	; (800d900 <UART_SetConfig+0x338>)
 800d8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8aa:	f003 0307 	and.w	r3, r3, #7
 800d8ae:	2b05      	cmp	r3, #5
 800d8b0:	d838      	bhi.n	800d924 <UART_SetConfig+0x35c>
 800d8b2:	a201      	add	r2, pc, #4	; (adr r2, 800d8b8 <UART_SetConfig+0x2f0>)
 800d8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b8:	0800d8d1 	.word	0x0800d8d1
 800d8bc:	0800d8d9 	.word	0x0800d8d9
 800d8c0:	0800d8e1 	.word	0x0800d8e1
 800d8c4:	0800d8e9 	.word	0x0800d8e9
 800d8c8:	0800d915 	.word	0x0800d915
 800d8cc:	0800d91d 	.word	0x0800d91d
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8d6:	e24e      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d8d8:	2304      	movs	r3, #4
 800d8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8de:	e24a      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d8e0:	2308      	movs	r3, #8
 800d8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8e6:	e246      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d8e8:	2310      	movs	r3, #16
 800d8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ee:	e242      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d8f0:	cfff69f3 	.word	0xcfff69f3
 800d8f4:	58000c00 	.word	0x58000c00
 800d8f8:	11fff4ff 	.word	0x11fff4ff
 800d8fc:	40011000 	.word	0x40011000
 800d900:	58024400 	.word	0x58024400
 800d904:	40004400 	.word	0x40004400
 800d908:	40004800 	.word	0x40004800
 800d90c:	40004c00 	.word	0x40004c00
 800d910:	40005000 	.word	0x40005000
 800d914:	2320      	movs	r3, #32
 800d916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d91a:	e22c      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d91c:	2340      	movs	r3, #64	; 0x40
 800d91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d922:	e228      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d924:	2380      	movs	r3, #128	; 0x80
 800d926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92a:	e224      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4ab1      	ldr	r2, [pc, #708]	; (800dbf8 <UART_SetConfig+0x630>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d176      	bne.n	800da24 <UART_SetConfig+0x45c>
 800d936:	4bb1      	ldr	r3, [pc, #708]	; (800dbfc <UART_SetConfig+0x634>)
 800d938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d93a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d93e:	2b28      	cmp	r3, #40	; 0x28
 800d940:	d86c      	bhi.n	800da1c <UART_SetConfig+0x454>
 800d942:	a201      	add	r2, pc, #4	; (adr r2, 800d948 <UART_SetConfig+0x380>)
 800d944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d948:	0800d9ed 	.word	0x0800d9ed
 800d94c:	0800da1d 	.word	0x0800da1d
 800d950:	0800da1d 	.word	0x0800da1d
 800d954:	0800da1d 	.word	0x0800da1d
 800d958:	0800da1d 	.word	0x0800da1d
 800d95c:	0800da1d 	.word	0x0800da1d
 800d960:	0800da1d 	.word	0x0800da1d
 800d964:	0800da1d 	.word	0x0800da1d
 800d968:	0800d9f5 	.word	0x0800d9f5
 800d96c:	0800da1d 	.word	0x0800da1d
 800d970:	0800da1d 	.word	0x0800da1d
 800d974:	0800da1d 	.word	0x0800da1d
 800d978:	0800da1d 	.word	0x0800da1d
 800d97c:	0800da1d 	.word	0x0800da1d
 800d980:	0800da1d 	.word	0x0800da1d
 800d984:	0800da1d 	.word	0x0800da1d
 800d988:	0800d9fd 	.word	0x0800d9fd
 800d98c:	0800da1d 	.word	0x0800da1d
 800d990:	0800da1d 	.word	0x0800da1d
 800d994:	0800da1d 	.word	0x0800da1d
 800d998:	0800da1d 	.word	0x0800da1d
 800d99c:	0800da1d 	.word	0x0800da1d
 800d9a0:	0800da1d 	.word	0x0800da1d
 800d9a4:	0800da1d 	.word	0x0800da1d
 800d9a8:	0800da05 	.word	0x0800da05
 800d9ac:	0800da1d 	.word	0x0800da1d
 800d9b0:	0800da1d 	.word	0x0800da1d
 800d9b4:	0800da1d 	.word	0x0800da1d
 800d9b8:	0800da1d 	.word	0x0800da1d
 800d9bc:	0800da1d 	.word	0x0800da1d
 800d9c0:	0800da1d 	.word	0x0800da1d
 800d9c4:	0800da1d 	.word	0x0800da1d
 800d9c8:	0800da0d 	.word	0x0800da0d
 800d9cc:	0800da1d 	.word	0x0800da1d
 800d9d0:	0800da1d 	.word	0x0800da1d
 800d9d4:	0800da1d 	.word	0x0800da1d
 800d9d8:	0800da1d 	.word	0x0800da1d
 800d9dc:	0800da1d 	.word	0x0800da1d
 800d9e0:	0800da1d 	.word	0x0800da1d
 800d9e4:	0800da1d 	.word	0x0800da1d
 800d9e8:	0800da15 	.word	0x0800da15
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f2:	e1c0      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d9f4:	2304      	movs	r3, #4
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fa:	e1bc      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800d9fc:	2308      	movs	r3, #8
 800d9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da02:	e1b8      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800da04:	2310      	movs	r3, #16
 800da06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0a:	e1b4      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800da0c:	2320      	movs	r3, #32
 800da0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da12:	e1b0      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800da14:	2340      	movs	r3, #64	; 0x40
 800da16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da1a:	e1ac      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800da1c:	2380      	movs	r3, #128	; 0x80
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da22:	e1a8      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a75      	ldr	r2, [pc, #468]	; (800dc00 <UART_SetConfig+0x638>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d130      	bne.n	800da90 <UART_SetConfig+0x4c8>
 800da2e:	4b73      	ldr	r3, [pc, #460]	; (800dbfc <UART_SetConfig+0x634>)
 800da30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da32:	f003 0307 	and.w	r3, r3, #7
 800da36:	2b05      	cmp	r3, #5
 800da38:	d826      	bhi.n	800da88 <UART_SetConfig+0x4c0>
 800da3a:	a201      	add	r2, pc, #4	; (adr r2, 800da40 <UART_SetConfig+0x478>)
 800da3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da40:	0800da59 	.word	0x0800da59
 800da44:	0800da61 	.word	0x0800da61
 800da48:	0800da69 	.word	0x0800da69
 800da4c:	0800da71 	.word	0x0800da71
 800da50:	0800da79 	.word	0x0800da79
 800da54:	0800da81 	.word	0x0800da81
 800da58:	2300      	movs	r3, #0
 800da5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5e:	e18a      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800da60:	2304      	movs	r3, #4
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da66:	e186      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800da68:	2308      	movs	r3, #8
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6e:	e182      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800da70:	2310      	movs	r3, #16
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da76:	e17e      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800da78:	2320      	movs	r3, #32
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7e:	e17a      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800da80:	2340      	movs	r3, #64	; 0x40
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da86:	e176      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800da88:	2380      	movs	r3, #128	; 0x80
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8e:	e172      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a5b      	ldr	r2, [pc, #364]	; (800dc04 <UART_SetConfig+0x63c>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d130      	bne.n	800dafc <UART_SetConfig+0x534>
 800da9a:	4b58      	ldr	r3, [pc, #352]	; (800dbfc <UART_SetConfig+0x634>)
 800da9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da9e:	f003 0307 	and.w	r3, r3, #7
 800daa2:	2b05      	cmp	r3, #5
 800daa4:	d826      	bhi.n	800daf4 <UART_SetConfig+0x52c>
 800daa6:	a201      	add	r2, pc, #4	; (adr r2, 800daac <UART_SetConfig+0x4e4>)
 800daa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daac:	0800dac5 	.word	0x0800dac5
 800dab0:	0800dacd 	.word	0x0800dacd
 800dab4:	0800dad5 	.word	0x0800dad5
 800dab8:	0800dadd 	.word	0x0800dadd
 800dabc:	0800dae5 	.word	0x0800dae5
 800dac0:	0800daed 	.word	0x0800daed
 800dac4:	2300      	movs	r3, #0
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daca:	e154      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dacc:	2304      	movs	r3, #4
 800dace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad2:	e150      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dad4:	2308      	movs	r3, #8
 800dad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dada:	e14c      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dadc:	2310      	movs	r3, #16
 800dade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dae2:	e148      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dae4:	2320      	movs	r3, #32
 800dae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daea:	e144      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800daec:	2340      	movs	r3, #64	; 0x40
 800daee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf2:	e140      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800daf4:	2380      	movs	r3, #128	; 0x80
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafa:	e13c      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a41      	ldr	r2, [pc, #260]	; (800dc08 <UART_SetConfig+0x640>)
 800db02:	4293      	cmp	r3, r2
 800db04:	f040 8082 	bne.w	800dc0c <UART_SetConfig+0x644>
 800db08:	4b3c      	ldr	r3, [pc, #240]	; (800dbfc <UART_SetConfig+0x634>)
 800db0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db10:	2b28      	cmp	r3, #40	; 0x28
 800db12:	d86d      	bhi.n	800dbf0 <UART_SetConfig+0x628>
 800db14:	a201      	add	r2, pc, #4	; (adr r2, 800db1c <UART_SetConfig+0x554>)
 800db16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db1a:	bf00      	nop
 800db1c:	0800dbc1 	.word	0x0800dbc1
 800db20:	0800dbf1 	.word	0x0800dbf1
 800db24:	0800dbf1 	.word	0x0800dbf1
 800db28:	0800dbf1 	.word	0x0800dbf1
 800db2c:	0800dbf1 	.word	0x0800dbf1
 800db30:	0800dbf1 	.word	0x0800dbf1
 800db34:	0800dbf1 	.word	0x0800dbf1
 800db38:	0800dbf1 	.word	0x0800dbf1
 800db3c:	0800dbc9 	.word	0x0800dbc9
 800db40:	0800dbf1 	.word	0x0800dbf1
 800db44:	0800dbf1 	.word	0x0800dbf1
 800db48:	0800dbf1 	.word	0x0800dbf1
 800db4c:	0800dbf1 	.word	0x0800dbf1
 800db50:	0800dbf1 	.word	0x0800dbf1
 800db54:	0800dbf1 	.word	0x0800dbf1
 800db58:	0800dbf1 	.word	0x0800dbf1
 800db5c:	0800dbd1 	.word	0x0800dbd1
 800db60:	0800dbf1 	.word	0x0800dbf1
 800db64:	0800dbf1 	.word	0x0800dbf1
 800db68:	0800dbf1 	.word	0x0800dbf1
 800db6c:	0800dbf1 	.word	0x0800dbf1
 800db70:	0800dbf1 	.word	0x0800dbf1
 800db74:	0800dbf1 	.word	0x0800dbf1
 800db78:	0800dbf1 	.word	0x0800dbf1
 800db7c:	0800dbd9 	.word	0x0800dbd9
 800db80:	0800dbf1 	.word	0x0800dbf1
 800db84:	0800dbf1 	.word	0x0800dbf1
 800db88:	0800dbf1 	.word	0x0800dbf1
 800db8c:	0800dbf1 	.word	0x0800dbf1
 800db90:	0800dbf1 	.word	0x0800dbf1
 800db94:	0800dbf1 	.word	0x0800dbf1
 800db98:	0800dbf1 	.word	0x0800dbf1
 800db9c:	0800dbe1 	.word	0x0800dbe1
 800dba0:	0800dbf1 	.word	0x0800dbf1
 800dba4:	0800dbf1 	.word	0x0800dbf1
 800dba8:	0800dbf1 	.word	0x0800dbf1
 800dbac:	0800dbf1 	.word	0x0800dbf1
 800dbb0:	0800dbf1 	.word	0x0800dbf1
 800dbb4:	0800dbf1 	.word	0x0800dbf1
 800dbb8:	0800dbf1 	.word	0x0800dbf1
 800dbbc:	0800dbe9 	.word	0x0800dbe9
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbc6:	e0d6      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dbc8:	2304      	movs	r3, #4
 800dbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbce:	e0d2      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dbd0:	2308      	movs	r3, #8
 800dbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbd6:	e0ce      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dbd8:	2310      	movs	r3, #16
 800dbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbde:	e0ca      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dbe0:	2320      	movs	r3, #32
 800dbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe6:	e0c6      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dbe8:	2340      	movs	r3, #64	; 0x40
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbee:	e0c2      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dbf0:	2380      	movs	r3, #128	; 0x80
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e0be      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dbf8:	40011400 	.word	0x40011400
 800dbfc:	58024400 	.word	0x58024400
 800dc00:	40007800 	.word	0x40007800
 800dc04:	40007c00 	.word	0x40007c00
 800dc08:	40011800 	.word	0x40011800
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4aad      	ldr	r2, [pc, #692]	; (800dec8 <UART_SetConfig+0x900>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d176      	bne.n	800dd04 <UART_SetConfig+0x73c>
 800dc16:	4bad      	ldr	r3, [pc, #692]	; (800decc <UART_SetConfig+0x904>)
 800dc18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc1e:	2b28      	cmp	r3, #40	; 0x28
 800dc20:	d86c      	bhi.n	800dcfc <UART_SetConfig+0x734>
 800dc22:	a201      	add	r2, pc, #4	; (adr r2, 800dc28 <UART_SetConfig+0x660>)
 800dc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc28:	0800dccd 	.word	0x0800dccd
 800dc2c:	0800dcfd 	.word	0x0800dcfd
 800dc30:	0800dcfd 	.word	0x0800dcfd
 800dc34:	0800dcfd 	.word	0x0800dcfd
 800dc38:	0800dcfd 	.word	0x0800dcfd
 800dc3c:	0800dcfd 	.word	0x0800dcfd
 800dc40:	0800dcfd 	.word	0x0800dcfd
 800dc44:	0800dcfd 	.word	0x0800dcfd
 800dc48:	0800dcd5 	.word	0x0800dcd5
 800dc4c:	0800dcfd 	.word	0x0800dcfd
 800dc50:	0800dcfd 	.word	0x0800dcfd
 800dc54:	0800dcfd 	.word	0x0800dcfd
 800dc58:	0800dcfd 	.word	0x0800dcfd
 800dc5c:	0800dcfd 	.word	0x0800dcfd
 800dc60:	0800dcfd 	.word	0x0800dcfd
 800dc64:	0800dcfd 	.word	0x0800dcfd
 800dc68:	0800dcdd 	.word	0x0800dcdd
 800dc6c:	0800dcfd 	.word	0x0800dcfd
 800dc70:	0800dcfd 	.word	0x0800dcfd
 800dc74:	0800dcfd 	.word	0x0800dcfd
 800dc78:	0800dcfd 	.word	0x0800dcfd
 800dc7c:	0800dcfd 	.word	0x0800dcfd
 800dc80:	0800dcfd 	.word	0x0800dcfd
 800dc84:	0800dcfd 	.word	0x0800dcfd
 800dc88:	0800dce5 	.word	0x0800dce5
 800dc8c:	0800dcfd 	.word	0x0800dcfd
 800dc90:	0800dcfd 	.word	0x0800dcfd
 800dc94:	0800dcfd 	.word	0x0800dcfd
 800dc98:	0800dcfd 	.word	0x0800dcfd
 800dc9c:	0800dcfd 	.word	0x0800dcfd
 800dca0:	0800dcfd 	.word	0x0800dcfd
 800dca4:	0800dcfd 	.word	0x0800dcfd
 800dca8:	0800dced 	.word	0x0800dced
 800dcac:	0800dcfd 	.word	0x0800dcfd
 800dcb0:	0800dcfd 	.word	0x0800dcfd
 800dcb4:	0800dcfd 	.word	0x0800dcfd
 800dcb8:	0800dcfd 	.word	0x0800dcfd
 800dcbc:	0800dcfd 	.word	0x0800dcfd
 800dcc0:	0800dcfd 	.word	0x0800dcfd
 800dcc4:	0800dcfd 	.word	0x0800dcfd
 800dcc8:	0800dcf5 	.word	0x0800dcf5
 800dccc:	2301      	movs	r3, #1
 800dcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd2:	e050      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dcd4:	2304      	movs	r3, #4
 800dcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcda:	e04c      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dcdc:	2308      	movs	r3, #8
 800dcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce2:	e048      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dce4:	2310      	movs	r3, #16
 800dce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcea:	e044      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dcec:	2320      	movs	r3, #32
 800dcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcf2:	e040      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dcf4:	2340      	movs	r3, #64	; 0x40
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfa:	e03c      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dcfc:	2380      	movs	r3, #128	; 0x80
 800dcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd02:	e038      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a71      	ldr	r2, [pc, #452]	; (800ded0 <UART_SetConfig+0x908>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d130      	bne.n	800dd70 <UART_SetConfig+0x7a8>
 800dd0e:	4b6f      	ldr	r3, [pc, #444]	; (800decc <UART_SetConfig+0x904>)
 800dd10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd12:	f003 0307 	and.w	r3, r3, #7
 800dd16:	2b05      	cmp	r3, #5
 800dd18:	d826      	bhi.n	800dd68 <UART_SetConfig+0x7a0>
 800dd1a:	a201      	add	r2, pc, #4	; (adr r2, 800dd20 <UART_SetConfig+0x758>)
 800dd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd20:	0800dd39 	.word	0x0800dd39
 800dd24:	0800dd41 	.word	0x0800dd41
 800dd28:	0800dd49 	.word	0x0800dd49
 800dd2c:	0800dd51 	.word	0x0800dd51
 800dd30:	0800dd59 	.word	0x0800dd59
 800dd34:	0800dd61 	.word	0x0800dd61
 800dd38:	2302      	movs	r3, #2
 800dd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd3e:	e01a      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dd40:	2304      	movs	r3, #4
 800dd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd46:	e016      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dd48:	2308      	movs	r3, #8
 800dd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4e:	e012      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dd50:	2310      	movs	r3, #16
 800dd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd56:	e00e      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dd58:	2320      	movs	r3, #32
 800dd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5e:	e00a      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dd60:	2340      	movs	r3, #64	; 0x40
 800dd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd66:	e006      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dd68:	2380      	movs	r3, #128	; 0x80
 800dd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6e:	e002      	b.n	800dd76 <UART_SetConfig+0x7ae>
 800dd70:	2380      	movs	r3, #128	; 0x80
 800dd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a55      	ldr	r2, [pc, #340]	; (800ded0 <UART_SetConfig+0x908>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	f040 80f8 	bne.w	800df72 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dd82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dd86:	2b20      	cmp	r3, #32
 800dd88:	dc46      	bgt.n	800de18 <UART_SetConfig+0x850>
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	db75      	blt.n	800de7a <UART_SetConfig+0x8b2>
 800dd8e:	3b02      	subs	r3, #2
 800dd90:	2b1e      	cmp	r3, #30
 800dd92:	d872      	bhi.n	800de7a <UART_SetConfig+0x8b2>
 800dd94:	a201      	add	r2, pc, #4	; (adr r2, 800dd9c <UART_SetConfig+0x7d4>)
 800dd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9a:	bf00      	nop
 800dd9c:	0800de1f 	.word	0x0800de1f
 800dda0:	0800de7b 	.word	0x0800de7b
 800dda4:	0800de27 	.word	0x0800de27
 800dda8:	0800de7b 	.word	0x0800de7b
 800ddac:	0800de7b 	.word	0x0800de7b
 800ddb0:	0800de7b 	.word	0x0800de7b
 800ddb4:	0800de37 	.word	0x0800de37
 800ddb8:	0800de7b 	.word	0x0800de7b
 800ddbc:	0800de7b 	.word	0x0800de7b
 800ddc0:	0800de7b 	.word	0x0800de7b
 800ddc4:	0800de7b 	.word	0x0800de7b
 800ddc8:	0800de7b 	.word	0x0800de7b
 800ddcc:	0800de7b 	.word	0x0800de7b
 800ddd0:	0800de7b 	.word	0x0800de7b
 800ddd4:	0800de47 	.word	0x0800de47
 800ddd8:	0800de7b 	.word	0x0800de7b
 800dddc:	0800de7b 	.word	0x0800de7b
 800dde0:	0800de7b 	.word	0x0800de7b
 800dde4:	0800de7b 	.word	0x0800de7b
 800dde8:	0800de7b 	.word	0x0800de7b
 800ddec:	0800de7b 	.word	0x0800de7b
 800ddf0:	0800de7b 	.word	0x0800de7b
 800ddf4:	0800de7b 	.word	0x0800de7b
 800ddf8:	0800de7b 	.word	0x0800de7b
 800ddfc:	0800de7b 	.word	0x0800de7b
 800de00:	0800de7b 	.word	0x0800de7b
 800de04:	0800de7b 	.word	0x0800de7b
 800de08:	0800de7b 	.word	0x0800de7b
 800de0c:	0800de7b 	.word	0x0800de7b
 800de10:	0800de7b 	.word	0x0800de7b
 800de14:	0800de6d 	.word	0x0800de6d
 800de18:	2b40      	cmp	r3, #64	; 0x40
 800de1a:	d02a      	beq.n	800de72 <UART_SetConfig+0x8aa>
 800de1c:	e02d      	b.n	800de7a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800de1e:	f7fc fde3 	bl	800a9e8 <HAL_RCCEx_GetD3PCLK1Freq>
 800de22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de24:	e02f      	b.n	800de86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fc fdf2 	bl	800aa14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de34:	e027      	b.n	800de86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de36:	f107 0318 	add.w	r3, r7, #24
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7fc ff3e 	bl	800acbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de44:	e01f      	b.n	800de86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de46:	4b21      	ldr	r3, [pc, #132]	; (800decc <UART_SetConfig+0x904>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f003 0320 	and.w	r3, r3, #32
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d009      	beq.n	800de66 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de52:	4b1e      	ldr	r3, [pc, #120]	; (800decc <UART_SetConfig+0x904>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	08db      	lsrs	r3, r3, #3
 800de58:	f003 0303 	and.w	r3, r3, #3
 800de5c:	4a1d      	ldr	r2, [pc, #116]	; (800ded4 <UART_SetConfig+0x90c>)
 800de5e:	fa22 f303 	lsr.w	r3, r2, r3
 800de62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de64:	e00f      	b.n	800de86 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800de66:	4b1b      	ldr	r3, [pc, #108]	; (800ded4 <UART_SetConfig+0x90c>)
 800de68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de6a:	e00c      	b.n	800de86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de6c:	4b1a      	ldr	r3, [pc, #104]	; (800ded8 <UART_SetConfig+0x910>)
 800de6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de70:	e009      	b.n	800de86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de78:	e005      	b.n	800de86 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800de7a:	2300      	movs	r3, #0
 800de7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800de7e:	2301      	movs	r3, #1
 800de80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800de84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800de86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f000 81ee 	beq.w	800e26a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de92:	4a12      	ldr	r2, [pc, #72]	; (800dedc <UART_SetConfig+0x914>)
 800de94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de98:	461a      	mov	r2, r3
 800de9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dea0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	685a      	ldr	r2, [r3, #4]
 800dea6:	4613      	mov	r3, r2
 800dea8:	005b      	lsls	r3, r3, #1
 800deaa:	4413      	add	r3, r2
 800deac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deae:	429a      	cmp	r2, r3
 800deb0:	d305      	bcc.n	800debe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800deb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deba:	429a      	cmp	r2, r3
 800debc:	d910      	bls.n	800dee0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800debe:	2301      	movs	r3, #1
 800dec0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dec4:	e1d1      	b.n	800e26a <UART_SetConfig+0xca2>
 800dec6:	bf00      	nop
 800dec8:	40011c00 	.word	0x40011c00
 800decc:	58024400 	.word	0x58024400
 800ded0:	58000c00 	.word	0x58000c00
 800ded4:	03d09000 	.word	0x03d09000
 800ded8:	003d0900 	.word	0x003d0900
 800dedc:	0800f510 	.word	0x0800f510
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dee2:	2200      	movs	r2, #0
 800dee4:	60bb      	str	r3, [r7, #8]
 800dee6:	60fa      	str	r2, [r7, #12]
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deec:	4ac0      	ldr	r2, [pc, #768]	; (800e1f0 <UART_SetConfig+0xc28>)
 800deee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800def2:	b29b      	uxth	r3, r3
 800def4:	2200      	movs	r2, #0
 800def6:	603b      	str	r3, [r7, #0]
 800def8:	607a      	str	r2, [r7, #4]
 800defa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800defe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800df02:	f7f2 fa0d 	bl	8000320 <__aeabi_uldivmod>
 800df06:	4602      	mov	r2, r0
 800df08:	460b      	mov	r3, r1
 800df0a:	4610      	mov	r0, r2
 800df0c:	4619      	mov	r1, r3
 800df0e:	f04f 0200 	mov.w	r2, #0
 800df12:	f04f 0300 	mov.w	r3, #0
 800df16:	020b      	lsls	r3, r1, #8
 800df18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800df1c:	0202      	lsls	r2, r0, #8
 800df1e:	6979      	ldr	r1, [r7, #20]
 800df20:	6849      	ldr	r1, [r1, #4]
 800df22:	0849      	lsrs	r1, r1, #1
 800df24:	2000      	movs	r0, #0
 800df26:	460c      	mov	r4, r1
 800df28:	4605      	mov	r5, r0
 800df2a:	eb12 0804 	adds.w	r8, r2, r4
 800df2e:	eb43 0905 	adc.w	r9, r3, r5
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	2200      	movs	r2, #0
 800df38:	469a      	mov	sl, r3
 800df3a:	4693      	mov	fp, r2
 800df3c:	4652      	mov	r2, sl
 800df3e:	465b      	mov	r3, fp
 800df40:	4640      	mov	r0, r8
 800df42:	4649      	mov	r1, r9
 800df44:	f7f2 f9ec 	bl	8000320 <__aeabi_uldivmod>
 800df48:	4602      	mov	r2, r0
 800df4a:	460b      	mov	r3, r1
 800df4c:	4613      	mov	r3, r2
 800df4e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800df50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df56:	d308      	bcc.n	800df6a <UART_SetConfig+0x9a2>
 800df58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df5e:	d204      	bcs.n	800df6a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df66:	60da      	str	r2, [r3, #12]
 800df68:	e17f      	b.n	800e26a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800df6a:	2301      	movs	r3, #1
 800df6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800df70:	e17b      	b.n	800e26a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	69db      	ldr	r3, [r3, #28]
 800df76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df7a:	f040 80bd 	bne.w	800e0f8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800df7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800df82:	2b20      	cmp	r3, #32
 800df84:	dc48      	bgt.n	800e018 <UART_SetConfig+0xa50>
 800df86:	2b00      	cmp	r3, #0
 800df88:	db7b      	blt.n	800e082 <UART_SetConfig+0xaba>
 800df8a:	2b20      	cmp	r3, #32
 800df8c:	d879      	bhi.n	800e082 <UART_SetConfig+0xaba>
 800df8e:	a201      	add	r2, pc, #4	; (adr r2, 800df94 <UART_SetConfig+0x9cc>)
 800df90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df94:	0800e01f 	.word	0x0800e01f
 800df98:	0800e027 	.word	0x0800e027
 800df9c:	0800e083 	.word	0x0800e083
 800dfa0:	0800e083 	.word	0x0800e083
 800dfa4:	0800e02f 	.word	0x0800e02f
 800dfa8:	0800e083 	.word	0x0800e083
 800dfac:	0800e083 	.word	0x0800e083
 800dfb0:	0800e083 	.word	0x0800e083
 800dfb4:	0800e03f 	.word	0x0800e03f
 800dfb8:	0800e083 	.word	0x0800e083
 800dfbc:	0800e083 	.word	0x0800e083
 800dfc0:	0800e083 	.word	0x0800e083
 800dfc4:	0800e083 	.word	0x0800e083
 800dfc8:	0800e083 	.word	0x0800e083
 800dfcc:	0800e083 	.word	0x0800e083
 800dfd0:	0800e083 	.word	0x0800e083
 800dfd4:	0800e04f 	.word	0x0800e04f
 800dfd8:	0800e083 	.word	0x0800e083
 800dfdc:	0800e083 	.word	0x0800e083
 800dfe0:	0800e083 	.word	0x0800e083
 800dfe4:	0800e083 	.word	0x0800e083
 800dfe8:	0800e083 	.word	0x0800e083
 800dfec:	0800e083 	.word	0x0800e083
 800dff0:	0800e083 	.word	0x0800e083
 800dff4:	0800e083 	.word	0x0800e083
 800dff8:	0800e083 	.word	0x0800e083
 800dffc:	0800e083 	.word	0x0800e083
 800e000:	0800e083 	.word	0x0800e083
 800e004:	0800e083 	.word	0x0800e083
 800e008:	0800e083 	.word	0x0800e083
 800e00c:	0800e083 	.word	0x0800e083
 800e010:	0800e083 	.word	0x0800e083
 800e014:	0800e075 	.word	0x0800e075
 800e018:	2b40      	cmp	r3, #64	; 0x40
 800e01a:	d02e      	beq.n	800e07a <UART_SetConfig+0xab2>
 800e01c:	e031      	b.n	800e082 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e01e:	f7fb fdbd 	bl	8009b9c <HAL_RCC_GetPCLK1Freq>
 800e022:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e024:	e033      	b.n	800e08e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e026:	f7fb fdcf 	bl	8009bc8 <HAL_RCC_GetPCLK2Freq>
 800e02a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e02c:	e02f      	b.n	800e08e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e02e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e032:	4618      	mov	r0, r3
 800e034:	f7fc fcee 	bl	800aa14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e03c:	e027      	b.n	800e08e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e03e:	f107 0318 	add.w	r3, r7, #24
 800e042:	4618      	mov	r0, r3
 800e044:	f7fc fe3a 	bl	800acbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e04c:	e01f      	b.n	800e08e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e04e:	4b69      	ldr	r3, [pc, #420]	; (800e1f4 <UART_SetConfig+0xc2c>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f003 0320 	and.w	r3, r3, #32
 800e056:	2b00      	cmp	r3, #0
 800e058:	d009      	beq.n	800e06e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e05a:	4b66      	ldr	r3, [pc, #408]	; (800e1f4 <UART_SetConfig+0xc2c>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	08db      	lsrs	r3, r3, #3
 800e060:	f003 0303 	and.w	r3, r3, #3
 800e064:	4a64      	ldr	r2, [pc, #400]	; (800e1f8 <UART_SetConfig+0xc30>)
 800e066:	fa22 f303 	lsr.w	r3, r2, r3
 800e06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e06c:	e00f      	b.n	800e08e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e06e:	4b62      	ldr	r3, [pc, #392]	; (800e1f8 <UART_SetConfig+0xc30>)
 800e070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e072:	e00c      	b.n	800e08e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e074:	4b61      	ldr	r3, [pc, #388]	; (800e1fc <UART_SetConfig+0xc34>)
 800e076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e078:	e009      	b.n	800e08e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e07a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e080:	e005      	b.n	800e08e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e082:	2300      	movs	r3, #0
 800e084:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e086:	2301      	movs	r3, #1
 800e088:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e08c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e090:	2b00      	cmp	r3, #0
 800e092:	f000 80ea 	beq.w	800e26a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e09a:	4a55      	ldr	r2, [pc, #340]	; (800e1f0 <UART_SetConfig+0xc28>)
 800e09c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0a8:	005a      	lsls	r2, r3, #1
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	085b      	lsrs	r3, r3, #1
 800e0b0:	441a      	add	r2, r3
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0be:	2b0f      	cmp	r3, #15
 800e0c0:	d916      	bls.n	800e0f0 <UART_SetConfig+0xb28>
 800e0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0c8:	d212      	bcs.n	800e0f0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	f023 030f 	bic.w	r3, r3, #15
 800e0d2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d6:	085b      	lsrs	r3, r3, #1
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	f003 0307 	and.w	r3, r3, #7
 800e0de:	b29a      	uxth	r2, r3
 800e0e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e0ec:	60da      	str	r2, [r3, #12]
 800e0ee:	e0bc      	b.n	800e26a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e0f6:	e0b8      	b.n	800e26a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e0f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e0fc:	2b20      	cmp	r3, #32
 800e0fe:	dc4b      	bgt.n	800e198 <UART_SetConfig+0xbd0>
 800e100:	2b00      	cmp	r3, #0
 800e102:	f2c0 8087 	blt.w	800e214 <UART_SetConfig+0xc4c>
 800e106:	2b20      	cmp	r3, #32
 800e108:	f200 8084 	bhi.w	800e214 <UART_SetConfig+0xc4c>
 800e10c:	a201      	add	r2, pc, #4	; (adr r2, 800e114 <UART_SetConfig+0xb4c>)
 800e10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e112:	bf00      	nop
 800e114:	0800e19f 	.word	0x0800e19f
 800e118:	0800e1a7 	.word	0x0800e1a7
 800e11c:	0800e215 	.word	0x0800e215
 800e120:	0800e215 	.word	0x0800e215
 800e124:	0800e1af 	.word	0x0800e1af
 800e128:	0800e215 	.word	0x0800e215
 800e12c:	0800e215 	.word	0x0800e215
 800e130:	0800e215 	.word	0x0800e215
 800e134:	0800e1bf 	.word	0x0800e1bf
 800e138:	0800e215 	.word	0x0800e215
 800e13c:	0800e215 	.word	0x0800e215
 800e140:	0800e215 	.word	0x0800e215
 800e144:	0800e215 	.word	0x0800e215
 800e148:	0800e215 	.word	0x0800e215
 800e14c:	0800e215 	.word	0x0800e215
 800e150:	0800e215 	.word	0x0800e215
 800e154:	0800e1cf 	.word	0x0800e1cf
 800e158:	0800e215 	.word	0x0800e215
 800e15c:	0800e215 	.word	0x0800e215
 800e160:	0800e215 	.word	0x0800e215
 800e164:	0800e215 	.word	0x0800e215
 800e168:	0800e215 	.word	0x0800e215
 800e16c:	0800e215 	.word	0x0800e215
 800e170:	0800e215 	.word	0x0800e215
 800e174:	0800e215 	.word	0x0800e215
 800e178:	0800e215 	.word	0x0800e215
 800e17c:	0800e215 	.word	0x0800e215
 800e180:	0800e215 	.word	0x0800e215
 800e184:	0800e215 	.word	0x0800e215
 800e188:	0800e215 	.word	0x0800e215
 800e18c:	0800e215 	.word	0x0800e215
 800e190:	0800e215 	.word	0x0800e215
 800e194:	0800e207 	.word	0x0800e207
 800e198:	2b40      	cmp	r3, #64	; 0x40
 800e19a:	d037      	beq.n	800e20c <UART_SetConfig+0xc44>
 800e19c:	e03a      	b.n	800e214 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e19e:	f7fb fcfd 	bl	8009b9c <HAL_RCC_GetPCLK1Freq>
 800e1a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1a4:	e03c      	b.n	800e220 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1a6:	f7fb fd0f 	bl	8009bc8 <HAL_RCC_GetPCLK2Freq>
 800e1aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1ac:	e038      	b.n	800e220 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fc fc2e 	bl	800aa14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1bc:	e030      	b.n	800e220 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1be:	f107 0318 	add.w	r3, r7, #24
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7fc fd7a 	bl	800acbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1cc:	e028      	b.n	800e220 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1ce:	4b09      	ldr	r3, [pc, #36]	; (800e1f4 <UART_SetConfig+0xc2c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f003 0320 	and.w	r3, r3, #32
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d012      	beq.n	800e200 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1da:	4b06      	ldr	r3, [pc, #24]	; (800e1f4 <UART_SetConfig+0xc2c>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	08db      	lsrs	r3, r3, #3
 800e1e0:	f003 0303 	and.w	r3, r3, #3
 800e1e4:	4a04      	ldr	r2, [pc, #16]	; (800e1f8 <UART_SetConfig+0xc30>)
 800e1e6:	fa22 f303 	lsr.w	r3, r2, r3
 800e1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1ec:	e018      	b.n	800e220 <UART_SetConfig+0xc58>
 800e1ee:	bf00      	nop
 800e1f0:	0800f510 	.word	0x0800f510
 800e1f4:	58024400 	.word	0x58024400
 800e1f8:	03d09000 	.word	0x03d09000
 800e1fc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e200:	4b24      	ldr	r3, [pc, #144]	; (800e294 <UART_SetConfig+0xccc>)
 800e202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e204:	e00c      	b.n	800e220 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e206:	4b24      	ldr	r3, [pc, #144]	; (800e298 <UART_SetConfig+0xcd0>)
 800e208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e20a:	e009      	b.n	800e220 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e20c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e212:	e005      	b.n	800e220 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e214:	2300      	movs	r3, #0
 800e216:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e218:	2301      	movs	r3, #1
 800e21a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e21e:	bf00      	nop
    }

    if (pclk != 0U)
 800e220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e222:	2b00      	cmp	r3, #0
 800e224:	d021      	beq.n	800e26a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e22a:	4a1c      	ldr	r2, [pc, #112]	; (800e29c <UART_SetConfig+0xcd4>)
 800e22c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e230:	461a      	mov	r2, r3
 800e232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e234:	fbb3 f2f2 	udiv	r2, r3, r2
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	085b      	lsrs	r3, r3, #1
 800e23e:	441a      	add	r2, r3
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	fbb2 f3f3 	udiv	r3, r2, r3
 800e248:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24c:	2b0f      	cmp	r3, #15
 800e24e:	d909      	bls.n	800e264 <UART_SetConfig+0xc9c>
 800e250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e256:	d205      	bcs.n	800e264 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25a:	b29a      	uxth	r2, r3
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	60da      	str	r2, [r3, #12]
 800e262:	e002      	b.n	800e26a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e264:	2301      	movs	r3, #1
 800e266:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	2201      	movs	r2, #1
 800e26e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	2201      	movs	r2, #1
 800e276:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	2200      	movs	r2, #0
 800e27e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	2200      	movs	r2, #0
 800e284:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e286:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3748      	adds	r7, #72	; 0x48
 800e28e:	46bd      	mov	sp, r7
 800e290:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e294:	03d09000 	.word	0x03d09000
 800e298:	003d0900 	.word	0x003d0900
 800e29c:	0800f510 	.word	0x0800f510

0800e2a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b083      	sub	sp, #12
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ac:	f003 0301 	and.w	r3, r3, #1
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d00a      	beq.n	800e2ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	430a      	orrs	r2, r1
 800e2c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ce:	f003 0302 	and.w	r3, r3, #2
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00a      	beq.n	800e2ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	430a      	orrs	r2, r1
 800e2ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2f0:	f003 0304 	and.w	r3, r3, #4
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d00a      	beq.n	800e30e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	430a      	orrs	r2, r1
 800e30c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e312:	f003 0308 	and.w	r3, r3, #8
 800e316:	2b00      	cmp	r3, #0
 800e318:	d00a      	beq.n	800e330 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	430a      	orrs	r2, r1
 800e32e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e334:	f003 0310 	and.w	r3, r3, #16
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00a      	beq.n	800e352 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	430a      	orrs	r2, r1
 800e350:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e356:	f003 0320 	and.w	r3, r3, #32
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d00a      	beq.n	800e374 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	689b      	ldr	r3, [r3, #8]
 800e364:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	430a      	orrs	r2, r1
 800e372:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d01a      	beq.n	800e3b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	430a      	orrs	r2, r1
 800e394:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e39a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e39e:	d10a      	bne.n	800e3b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	430a      	orrs	r2, r1
 800e3b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d00a      	beq.n	800e3d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	430a      	orrs	r2, r1
 800e3d6:	605a      	str	r2, [r3, #4]
  }
}
 800e3d8:	bf00      	nop
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b086      	sub	sp, #24
 800e3e8:	af02      	add	r7, sp, #8
 800e3ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e3f4:	f7f7 fb72 	bl	8005adc <HAL_GetTick>
 800e3f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f003 0308 	and.w	r3, r3, #8
 800e404:	2b08      	cmp	r3, #8
 800e406:	d10e      	bne.n	800e426 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e408:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e40c:	9300      	str	r3, [sp, #0]
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	2200      	movs	r2, #0
 800e412:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 f82f 	bl	800e47a <UART_WaitOnFlagUntilTimeout>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e422:	2303      	movs	r3, #3
 800e424:	e025      	b.n	800e472 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f003 0304 	and.w	r3, r3, #4
 800e430:	2b04      	cmp	r3, #4
 800e432:	d10e      	bne.n	800e452 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e438:	9300      	str	r3, [sp, #0]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2200      	movs	r2, #0
 800e43e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 f819 	bl	800e47a <UART_WaitOnFlagUntilTimeout>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d001      	beq.n	800e452 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e44e:	2303      	movs	r3, #3
 800e450:	e00f      	b.n	800e472 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2220      	movs	r2, #32
 800e456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2220      	movs	r2, #32
 800e45e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2200      	movs	r2, #0
 800e46c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e470:	2300      	movs	r3, #0
}
 800e472:	4618      	mov	r0, r3
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b09c      	sub	sp, #112	; 0x70
 800e47e:	af00      	add	r7, sp, #0
 800e480:	60f8      	str	r0, [r7, #12]
 800e482:	60b9      	str	r1, [r7, #8]
 800e484:	603b      	str	r3, [r7, #0]
 800e486:	4613      	mov	r3, r2
 800e488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e48a:	e0a9      	b.n	800e5e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e48c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e48e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e492:	f000 80a5 	beq.w	800e5e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e496:	f7f7 fb21 	bl	8005adc <HAL_GetTick>
 800e49a:	4602      	mov	r2, r0
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	1ad3      	subs	r3, r2, r3
 800e4a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d302      	bcc.n	800e4ac <UART_WaitOnFlagUntilTimeout+0x32>
 800e4a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d140      	bne.n	800e52e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4b4:	e853 3f00 	ldrex	r3, [r3]
 800e4b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e4ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e4c0:	667b      	str	r3, [r7, #100]	; 0x64
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e4d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e4d2:	e841 2300 	strex	r3, r2, [r1]
 800e4d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e4d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d1e6      	bne.n	800e4ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	3308      	adds	r3, #8
 800e4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4e8:	e853 3f00 	ldrex	r3, [r3]
 800e4ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f0:	f023 0301 	bic.w	r3, r3, #1
 800e4f4:	663b      	str	r3, [r7, #96]	; 0x60
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	3308      	adds	r3, #8
 800e4fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e4fe:	64ba      	str	r2, [r7, #72]	; 0x48
 800e500:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e502:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e506:	e841 2300 	strex	r3, r2, [r1]
 800e50a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1e5      	bne.n	800e4de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2220      	movs	r2, #32
 800e516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2220      	movs	r2, #32
 800e51e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2200      	movs	r2, #0
 800e526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e52a:	2303      	movs	r3, #3
 800e52c:	e069      	b.n	800e602 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f003 0304 	and.w	r3, r3, #4
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d051      	beq.n	800e5e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	69db      	ldr	r3, [r3, #28]
 800e542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e54a:	d149      	bne.n	800e5e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e554:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55e:	e853 3f00 	ldrex	r3, [r3]
 800e562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e566:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e56a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	461a      	mov	r2, r3
 800e572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e574:	637b      	str	r3, [r7, #52]	; 0x34
 800e576:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e57a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e57c:	e841 2300 	strex	r3, r2, [r1]
 800e580:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e584:	2b00      	cmp	r3, #0
 800e586:	d1e6      	bne.n	800e556 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	3308      	adds	r3, #8
 800e58e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	e853 3f00 	ldrex	r3, [r3]
 800e596:	613b      	str	r3, [r7, #16]
   return(result);
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	f023 0301 	bic.w	r3, r3, #1
 800e59e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	3308      	adds	r3, #8
 800e5a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e5a8:	623a      	str	r2, [r7, #32]
 800e5aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ac:	69f9      	ldr	r1, [r7, #28]
 800e5ae:	6a3a      	ldr	r2, [r7, #32]
 800e5b0:	e841 2300 	strex	r3, r2, [r1]
 800e5b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d1e5      	bne.n	800e588 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2220      	movs	r2, #32
 800e5c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2220      	movs	r2, #32
 800e5c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2220      	movs	r2, #32
 800e5d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e5dc:	2303      	movs	r3, #3
 800e5de:	e010      	b.n	800e602 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	69da      	ldr	r2, [r3, #28]
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	4013      	ands	r3, r2
 800e5ea:	68ba      	ldr	r2, [r7, #8]
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	bf0c      	ite	eq
 800e5f0:	2301      	moveq	r3, #1
 800e5f2:	2300      	movne	r3, #0
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	79fb      	ldrb	r3, [r7, #7]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	f43f af46 	beq.w	800e48c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	3770      	adds	r7, #112	; 0x70
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
	...

0800e60c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b096      	sub	sp, #88	; 0x58
 800e610:	af00      	add	r7, sp, #0
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	4613      	mov	r3, r2
 800e618:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	68ba      	ldr	r2, [r7, #8]
 800e61e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	88fa      	ldrh	r2, [r7, #6]
 800e624:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2222      	movs	r2, #34	; 0x22
 800e634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d02c      	beq.n	800e69a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e644:	4a42      	ldr	r2, [pc, #264]	; (800e750 <UART_Start_Receive_DMA+0x144>)
 800e646:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e64c:	4a41      	ldr	r2, [pc, #260]	; (800e754 <UART_Start_Receive_DMA+0x148>)
 800e64e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e654:	4a40      	ldr	r2, [pc, #256]	; (800e758 <UART_Start_Receive_DMA+0x14c>)
 800e656:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e65c:	2200      	movs	r2, #0
 800e65e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	3324      	adds	r3, #36	; 0x24
 800e66a:	4619      	mov	r1, r3
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e670:	461a      	mov	r2, r3
 800e672:	88fb      	ldrh	r3, [r7, #6]
 800e674:	f7f7 fea8 	bl	80063c8 <HAL_DMA_Start_IT>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00d      	beq.n	800e69a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2210      	movs	r2, #16
 800e682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2200      	movs	r2, #0
 800e68a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2220      	movs	r2, #32
 800e692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e696:	2301      	movs	r3, #1
 800e698:	e055      	b.n	800e746 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2200      	movs	r2, #0
 800e69e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	691b      	ldr	r3, [r3, #16]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d018      	beq.n	800e6dc <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6b2:	e853 3f00 	ldrex	r3, [r3]
 800e6b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6be:	657b      	str	r3, [r7, #84]	; 0x54
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6ca:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6d0:	e841 2300 	strex	r3, r2, [r1]
 800e6d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d1e6      	bne.n	800e6aa <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	3308      	adds	r3, #8
 800e6e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	e853 3f00 	ldrex	r3, [r3]
 800e6ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ee:	f043 0301 	orr.w	r3, r3, #1
 800e6f2:	653b      	str	r3, [r7, #80]	; 0x50
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	3308      	adds	r3, #8
 800e6fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6fc:	637a      	str	r2, [r7, #52]	; 0x34
 800e6fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e700:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e704:	e841 2300 	strex	r3, r2, [r1]
 800e708:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d1e5      	bne.n	800e6dc <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	3308      	adds	r3, #8
 800e716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	e853 3f00 	ldrex	r3, [r3]
 800e71e:	613b      	str	r3, [r7, #16]
   return(result);
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e726:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	3308      	adds	r3, #8
 800e72e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e730:	623a      	str	r2, [r7, #32]
 800e732:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e734:	69f9      	ldr	r1, [r7, #28]
 800e736:	6a3a      	ldr	r2, [r7, #32]
 800e738:	e841 2300 	strex	r3, r2, [r1]
 800e73c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e73e:	69bb      	ldr	r3, [r7, #24]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d1e5      	bne.n	800e710 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e744:	2300      	movs	r3, #0
}
 800e746:	4618      	mov	r0, r3
 800e748:	3758      	adds	r7, #88	; 0x58
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	0800e95f 	.word	0x0800e95f
 800e754:	0800ea81 	.word	0x0800ea81
 800e758:	0800eab9 	.word	0x0800eab9

0800e75c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b08f      	sub	sp, #60	; 0x3c
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e76a:	6a3b      	ldr	r3, [r7, #32]
 800e76c:	e853 3f00 	ldrex	r3, [r3]
 800e770:	61fb      	str	r3, [r7, #28]
   return(result);
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e778:	637b      	str	r3, [r7, #52]	; 0x34
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	461a      	mov	r2, r3
 800e780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e782:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e784:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e78a:	e841 2300 	strex	r3, r2, [r1]
 800e78e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e792:	2b00      	cmp	r3, #0
 800e794:	d1e6      	bne.n	800e764 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	3308      	adds	r3, #8
 800e79c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	e853 3f00 	ldrex	r3, [r3]
 800e7a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e7ac:	633b      	str	r3, [r7, #48]	; 0x30
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	3308      	adds	r3, #8
 800e7b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7b6:	61ba      	str	r2, [r7, #24]
 800e7b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ba:	6979      	ldr	r1, [r7, #20]
 800e7bc:	69ba      	ldr	r2, [r7, #24]
 800e7be:	e841 2300 	strex	r3, r2, [r1]
 800e7c2:	613b      	str	r3, [r7, #16]
   return(result);
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d1e5      	bne.n	800e796 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2220      	movs	r2, #32
 800e7ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e7d2:	bf00      	nop
 800e7d4:	373c      	adds	r7, #60	; 0x3c
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr
	...

0800e7e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b095      	sub	sp, #84	; 0x54
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7f0:	e853 3f00 	ldrex	r3, [r3]
 800e7f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	461a      	mov	r2, r3
 800e804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e806:	643b      	str	r3, [r7, #64]	; 0x40
 800e808:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e80a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e80c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e80e:	e841 2300 	strex	r3, r2, [r1]
 800e812:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e816:	2b00      	cmp	r3, #0
 800e818:	d1e6      	bne.n	800e7e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	3308      	adds	r3, #8
 800e820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	e853 3f00 	ldrex	r3, [r3]
 800e828:	61fb      	str	r3, [r7, #28]
   return(result);
 800e82a:	69fa      	ldr	r2, [r7, #28]
 800e82c:	4b1e      	ldr	r3, [pc, #120]	; (800e8a8 <UART_EndRxTransfer+0xc8>)
 800e82e:	4013      	ands	r3, r2
 800e830:	64bb      	str	r3, [r7, #72]	; 0x48
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	3308      	adds	r3, #8
 800e838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e83a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e83c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e83e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e842:	e841 2300 	strex	r3, r2, [r1]
 800e846:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d1e5      	bne.n	800e81a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e852:	2b01      	cmp	r3, #1
 800e854:	d118      	bne.n	800e888 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	e853 3f00 	ldrex	r3, [r3]
 800e862:	60bb      	str	r3, [r7, #8]
   return(result);
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	f023 0310 	bic.w	r3, r3, #16
 800e86a:	647b      	str	r3, [r7, #68]	; 0x44
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	461a      	mov	r2, r3
 800e872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e874:	61bb      	str	r3, [r7, #24]
 800e876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e878:	6979      	ldr	r1, [r7, #20]
 800e87a:	69ba      	ldr	r2, [r7, #24]
 800e87c:	e841 2300 	strex	r3, r2, [r1]
 800e880:	613b      	str	r3, [r7, #16]
   return(result);
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d1e6      	bne.n	800e856 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2220      	movs	r2, #32
 800e88c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2200      	movs	r2, #0
 800e894:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e89c:	bf00      	nop
 800e89e:	3754      	adds	r7, #84	; 0x54
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr
 800e8a8:	effffffe 	.word	0xeffffffe

0800e8ac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b090      	sub	sp, #64	; 0x40
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	69db      	ldr	r3, [r3, #28]
 800e8be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8c2:	d037      	beq.n	800e934 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	3308      	adds	r3, #8
 800e8d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d6:	e853 3f00 	ldrex	r3, [r3]
 800e8da:	623b      	str	r3, [r7, #32]
   return(result);
 800e8dc:	6a3b      	ldr	r3, [r7, #32]
 800e8de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	3308      	adds	r3, #8
 800e8ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8ec:	633a      	str	r2, [r7, #48]	; 0x30
 800e8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8f4:	e841 2300 	strex	r3, r2, [r1]
 800e8f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d1e5      	bne.n	800e8cc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	e853 3f00 	ldrex	r3, [r3]
 800e90c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e914:	637b      	str	r3, [r7, #52]	; 0x34
 800e916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	461a      	mov	r2, r3
 800e91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e91e:	61fb      	str	r3, [r7, #28]
 800e920:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e922:	69b9      	ldr	r1, [r7, #24]
 800e924:	69fa      	ldr	r2, [r7, #28]
 800e926:	e841 2300 	strex	r3, r2, [r1]
 800e92a:	617b      	str	r3, [r7, #20]
   return(result);
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d1e6      	bne.n	800e900 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e932:	e002      	b.n	800e93a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e934:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e936:	f7f5 fb61 	bl	8003ffc <HAL_UART_TxCpltCallback>
}
 800e93a:	bf00      	nop
 800e93c:	3740      	adds	r7, #64	; 0x40
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e942:	b580      	push	{r7, lr}
 800e944:	b084      	sub	sp, #16
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e94e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f7fe fe0f 	bl	800d574 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e956:	bf00      	nop
 800e958:	3710      	adds	r7, #16
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}

0800e95e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e95e:	b580      	push	{r7, lr}
 800e960:	b09c      	sub	sp, #112	; 0x70
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e96a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	69db      	ldr	r3, [r3, #28]
 800e970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e974:	d071      	beq.n	800ea5a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e978:	2200      	movs	r2, #0
 800e97a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e97e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e986:	e853 3f00 	ldrex	r3, [r3]
 800e98a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e98c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e98e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e992:	66bb      	str	r3, [r7, #104]	; 0x68
 800e994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	461a      	mov	r2, r3
 800e99a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e99c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e99e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e9a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9a4:	e841 2300 	strex	r3, r2, [r1]
 800e9a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d1e6      	bne.n	800e97e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	3308      	adds	r3, #8
 800e9b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ba:	e853 3f00 	ldrex	r3, [r3]
 800e9be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9c2:	f023 0301 	bic.w	r3, r3, #1
 800e9c6:	667b      	str	r3, [r7, #100]	; 0x64
 800e9c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	3308      	adds	r3, #8
 800e9ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e9d0:	647a      	str	r2, [r7, #68]	; 0x44
 800e9d2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9d8:	e841 2300 	strex	r3, r2, [r1]
 800e9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e9de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d1e5      	bne.n	800e9b0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	3308      	adds	r3, #8
 800e9ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ee:	e853 3f00 	ldrex	r3, [r3]
 800e9f2:	623b      	str	r3, [r7, #32]
   return(result);
 800e9f4:	6a3b      	ldr	r3, [r7, #32]
 800e9f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9fa:	663b      	str	r3, [r7, #96]	; 0x60
 800e9fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	3308      	adds	r3, #8
 800ea02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea04:	633a      	str	r2, [r7, #48]	; 0x30
 800ea06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea0c:	e841 2300 	strex	r3, r2, [r1]
 800ea10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1e5      	bne.n	800e9e4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ea18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea1a:	2220      	movs	r2, #32
 800ea1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	d118      	bne.n	800ea5a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	e853 3f00 	ldrex	r3, [r3]
 800ea34:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f023 0310 	bic.w	r3, r3, #16
 800ea3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	461a      	mov	r2, r3
 800ea44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea46:	61fb      	str	r3, [r7, #28]
 800ea48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea4a:	69b9      	ldr	r1, [r7, #24]
 800ea4c:	69fa      	ldr	r2, [r7, #28]
 800ea4e:	e841 2300 	strex	r3, r2, [r1]
 800ea52:	617b      	str	r3, [r7, #20]
   return(result);
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d1e6      	bne.n	800ea28 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d107      	bne.n	800ea72 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ea68:	4619      	mov	r1, r3
 800ea6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ea6c:	f7fe fda0 	bl	800d5b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ea70:	e002      	b.n	800ea78 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ea72:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ea74:	f7f5 fad4 	bl	8004020 <HAL_UART_RxCpltCallback>
}
 800ea78:	bf00      	nop
 800ea7a:	3770      	adds	r7, #112	; 0x70
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea8c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d109      	bne.n	800eaaa <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ea9c:	085b      	lsrs	r3, r3, #1
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	68f8      	ldr	r0, [r7, #12]
 800eaa4:	f7fe fd84 	bl	800d5b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eaa8:	e002      	b.n	800eab0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800eaaa:	68f8      	ldr	r0, [r7, #12]
 800eaac:	f7fe fd6c 	bl	800d588 <HAL_UART_RxHalfCpltCallback>
}
 800eab0:	bf00      	nop
 800eab2:	3710      	adds	r7, #16
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b086      	sub	sp, #24
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eac4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eacc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ead4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	689b      	ldr	r3, [r3, #8]
 800eadc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eae0:	2b80      	cmp	r3, #128	; 0x80
 800eae2:	d109      	bne.n	800eaf8 <UART_DMAError+0x40>
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	2b21      	cmp	r3, #33	; 0x21
 800eae8:	d106      	bne.n	800eaf8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	2200      	movs	r2, #0
 800eaee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800eaf2:	6978      	ldr	r0, [r7, #20]
 800eaf4:	f7ff fe32 	bl	800e75c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	689b      	ldr	r3, [r3, #8]
 800eafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb02:	2b40      	cmp	r3, #64	; 0x40
 800eb04:	d109      	bne.n	800eb1a <UART_DMAError+0x62>
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2b22      	cmp	r3, #34	; 0x22
 800eb0a:	d106      	bne.n	800eb1a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eb14:	6978      	ldr	r0, [r7, #20]
 800eb16:	f7ff fe63 	bl	800e7e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb20:	f043 0210 	orr.w	r2, r3, #16
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb2a:	6978      	ldr	r0, [r7, #20]
 800eb2c:	f7fe fd36 	bl	800d59c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb30:	bf00      	nop
 800eb32:	3718      	adds	r7, #24
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2200      	movs	r2, #0
 800eb52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb56:	68f8      	ldr	r0, [r7, #12]
 800eb58:	f7fe fd20 	bl	800d59c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb5c:	bf00      	nop
 800eb5e:	3710      	adds	r7, #16
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b088      	sub	sp, #32
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	e853 3f00 	ldrex	r3, [r3]
 800eb78:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb80:	61fb      	str	r3, [r7, #28]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	461a      	mov	r2, r3
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	61bb      	str	r3, [r7, #24]
 800eb8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb8e:	6979      	ldr	r1, [r7, #20]
 800eb90:	69ba      	ldr	r2, [r7, #24]
 800eb92:	e841 2300 	strex	r3, r2, [r1]
 800eb96:	613b      	str	r3, [r7, #16]
   return(result);
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1e6      	bne.n	800eb6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2220      	movs	r2, #32
 800eba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7f5 fa25 	bl	8003ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebb2:	bf00      	nop
 800ebb4:	3720      	adds	r7, #32
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}

0800ebba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ebba:	b480      	push	{r7}
 800ebbc:	b083      	sub	sp, #12
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ebc2:	bf00      	nop
 800ebc4:	370c      	adds	r7, #12
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr

0800ebce <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ebce:	b480      	push	{r7}
 800ebd0:	b083      	sub	sp, #12
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ebd6:	bf00      	nop
 800ebd8:	370c      	adds	r7, #12
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr

0800ebe2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ebe2:	b480      	push	{r7}
 800ebe4:	b083      	sub	sp, #12
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ebea:	bf00      	nop
 800ebec:	370c      	adds	r7, #12
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf4:	4770      	bx	lr

0800ebf6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ebf6:	b480      	push	{r7}
 800ebf8:	b085      	sub	sp, #20
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d101      	bne.n	800ec0c <HAL_UARTEx_DisableFifoMode+0x16>
 800ec08:	2302      	movs	r3, #2
 800ec0a:	e027      	b.n	800ec5c <HAL_UARTEx_DisableFifoMode+0x66>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2224      	movs	r2, #36	; 0x24
 800ec18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f022 0201 	bic.w	r2, r2, #1
 800ec32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ec3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	68fa      	ldr	r2, [r7, #12]
 800ec48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2220      	movs	r2, #32
 800ec4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2200      	movs	r2, #0
 800ec56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3714      	adds	r7, #20
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d101      	bne.n	800ec80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ec7c:	2302      	movs	r3, #2
 800ec7e:	e02d      	b.n	800ecdc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2201      	movs	r2, #1
 800ec84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2224      	movs	r2, #36	; 0x24
 800ec8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f022 0201 	bic.w	r2, r2, #1
 800eca6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	689b      	ldr	r3, [r3, #8]
 800ecae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	683a      	ldr	r2, [r7, #0]
 800ecb8:	430a      	orrs	r2, r1
 800ecba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f000 f84f 	bl	800ed60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	68fa      	ldr	r2, [r7, #12]
 800ecc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2220      	movs	r2, #32
 800ecce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3710      	adds	r7, #16
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d101      	bne.n	800ecfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ecf8:	2302      	movs	r3, #2
 800ecfa:	e02d      	b.n	800ed58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2224      	movs	r2, #36	; 0x24
 800ed08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f022 0201 	bic.w	r2, r2, #1
 800ed22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	683a      	ldr	r2, [r7, #0]
 800ed34:	430a      	orrs	r2, r1
 800ed36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 f811 	bl	800ed60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	68fa      	ldr	r2, [r7, #12]
 800ed44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2220      	movs	r2, #32
 800ed4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3710      	adds	r7, #16
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b085      	sub	sp, #20
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d108      	bne.n	800ed82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2201      	movs	r2, #1
 800ed74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ed80:	e031      	b.n	800ede6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ed82:	2310      	movs	r3, #16
 800ed84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ed86:	2310      	movs	r3, #16
 800ed88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	689b      	ldr	r3, [r3, #8]
 800ed90:	0e5b      	lsrs	r3, r3, #25
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	f003 0307 	and.w	r3, r3, #7
 800ed98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	689b      	ldr	r3, [r3, #8]
 800eda0:	0f5b      	lsrs	r3, r3, #29
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	f003 0307 	and.w	r3, r3, #7
 800eda8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800edaa:	7bbb      	ldrb	r3, [r7, #14]
 800edac:	7b3a      	ldrb	r2, [r7, #12]
 800edae:	4911      	ldr	r1, [pc, #68]	; (800edf4 <UARTEx_SetNbDataToProcess+0x94>)
 800edb0:	5c8a      	ldrb	r2, [r1, r2]
 800edb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800edb6:	7b3a      	ldrb	r2, [r7, #12]
 800edb8:	490f      	ldr	r1, [pc, #60]	; (800edf8 <UARTEx_SetNbDataToProcess+0x98>)
 800edba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800edbc:	fb93 f3f2 	sdiv	r3, r3, r2
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800edc8:	7bfb      	ldrb	r3, [r7, #15]
 800edca:	7b7a      	ldrb	r2, [r7, #13]
 800edcc:	4909      	ldr	r1, [pc, #36]	; (800edf4 <UARTEx_SetNbDataToProcess+0x94>)
 800edce:	5c8a      	ldrb	r2, [r1, r2]
 800edd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800edd4:	7b7a      	ldrb	r2, [r7, #13]
 800edd6:	4908      	ldr	r1, [pc, #32]	; (800edf8 <UARTEx_SetNbDataToProcess+0x98>)
 800edd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800edda:	fb93 f3f2 	sdiv	r3, r3, r2
 800edde:	b29a      	uxth	r2, r3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ede6:	bf00      	nop
 800ede8:	3714      	adds	r7, #20
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr
 800edf2:	bf00      	nop
 800edf4:	0800f528 	.word	0x0800f528
 800edf8:	0800f530 	.word	0x0800f530

0800edfc <__cxa_pure_virtual>:
 800edfc:	b508      	push	{r3, lr}
 800edfe:	f000 f80d 	bl	800ee1c <_ZSt9terminatev>

0800ee02 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ee02:	b508      	push	{r3, lr}
 800ee04:	4780      	blx	r0
 800ee06:	f000 f80e 	bl	800ee26 <abort>
	...

0800ee0c <_ZSt13get_terminatev>:
 800ee0c:	4b02      	ldr	r3, [pc, #8]	; (800ee18 <_ZSt13get_terminatev+0xc>)
 800ee0e:	6818      	ldr	r0, [r3, #0]
 800ee10:	f3bf 8f5b 	dmb	ish
 800ee14:	4770      	bx	lr
 800ee16:	bf00      	nop
 800ee18:	24000010 	.word	0x24000010

0800ee1c <_ZSt9terminatev>:
 800ee1c:	b508      	push	{r3, lr}
 800ee1e:	f7ff fff5 	bl	800ee0c <_ZSt13get_terminatev>
 800ee22:	f7ff ffee 	bl	800ee02 <_ZN10__cxxabiv111__terminateEPFvvE>

0800ee26 <abort>:
 800ee26:	b508      	push	{r3, lr}
 800ee28:	2006      	movs	r0, #6
 800ee2a:	f000 f873 	bl	800ef14 <raise>
 800ee2e:	2001      	movs	r0, #1
 800ee30:	f7f6 fcec 	bl	800580c <_exit>

0800ee34 <__errno>:
 800ee34:	4b01      	ldr	r3, [pc, #4]	; (800ee3c <__errno+0x8>)
 800ee36:	6818      	ldr	r0, [r3, #0]
 800ee38:	4770      	bx	lr
 800ee3a:	bf00      	nop
 800ee3c:	24000014 	.word	0x24000014

0800ee40 <__libc_init_array>:
 800ee40:	b570      	push	{r4, r5, r6, lr}
 800ee42:	4d0d      	ldr	r5, [pc, #52]	; (800ee78 <__libc_init_array+0x38>)
 800ee44:	4c0d      	ldr	r4, [pc, #52]	; (800ee7c <__libc_init_array+0x3c>)
 800ee46:	1b64      	subs	r4, r4, r5
 800ee48:	10a4      	asrs	r4, r4, #2
 800ee4a:	2600      	movs	r6, #0
 800ee4c:	42a6      	cmp	r6, r4
 800ee4e:	d109      	bne.n	800ee64 <__libc_init_array+0x24>
 800ee50:	4d0b      	ldr	r5, [pc, #44]	; (800ee80 <__libc_init_array+0x40>)
 800ee52:	4c0c      	ldr	r4, [pc, #48]	; (800ee84 <__libc_init_array+0x44>)
 800ee54:	f000 f9b0 	bl	800f1b8 <_init>
 800ee58:	1b64      	subs	r4, r4, r5
 800ee5a:	10a4      	asrs	r4, r4, #2
 800ee5c:	2600      	movs	r6, #0
 800ee5e:	42a6      	cmp	r6, r4
 800ee60:	d105      	bne.n	800ee6e <__libc_init_array+0x2e>
 800ee62:	bd70      	pop	{r4, r5, r6, pc}
 800ee64:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee68:	4798      	blx	r3
 800ee6a:	3601      	adds	r6, #1
 800ee6c:	e7ee      	b.n	800ee4c <__libc_init_array+0xc>
 800ee6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee72:	4798      	blx	r3
 800ee74:	3601      	adds	r6, #1
 800ee76:	e7f2      	b.n	800ee5e <__libc_init_array+0x1e>
 800ee78:	0800f540 	.word	0x0800f540
 800ee7c:	0800f540 	.word	0x0800f540
 800ee80:	0800f540 	.word	0x0800f540
 800ee84:	0800f548 	.word	0x0800f548

0800ee88 <memcpy>:
 800ee88:	440a      	add	r2, r1
 800ee8a:	4291      	cmp	r1, r2
 800ee8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ee90:	d100      	bne.n	800ee94 <memcpy+0xc>
 800ee92:	4770      	bx	lr
 800ee94:	b510      	push	{r4, lr}
 800ee96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee9e:	4291      	cmp	r1, r2
 800eea0:	d1f9      	bne.n	800ee96 <memcpy+0xe>
 800eea2:	bd10      	pop	{r4, pc}

0800eea4 <memset>:
 800eea4:	4402      	add	r2, r0
 800eea6:	4603      	mov	r3, r0
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d100      	bne.n	800eeae <memset+0xa>
 800eeac:	4770      	bx	lr
 800eeae:	f803 1b01 	strb.w	r1, [r3], #1
 800eeb2:	e7f9      	b.n	800eea8 <memset+0x4>

0800eeb4 <realloc>:
 800eeb4:	4b02      	ldr	r3, [pc, #8]	; (800eec0 <realloc+0xc>)
 800eeb6:	460a      	mov	r2, r1
 800eeb8:	4601      	mov	r1, r0
 800eeba:	6818      	ldr	r0, [r3, #0]
 800eebc:	f000 b8da 	b.w	800f074 <_realloc_r>
 800eec0:	24000014 	.word	0x24000014

0800eec4 <_raise_r>:
 800eec4:	291f      	cmp	r1, #31
 800eec6:	b538      	push	{r3, r4, r5, lr}
 800eec8:	4604      	mov	r4, r0
 800eeca:	460d      	mov	r5, r1
 800eecc:	d904      	bls.n	800eed8 <_raise_r+0x14>
 800eece:	2316      	movs	r3, #22
 800eed0:	6003      	str	r3, [r0, #0]
 800eed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eed6:	bd38      	pop	{r3, r4, r5, pc}
 800eed8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eeda:	b112      	cbz	r2, 800eee2 <_raise_r+0x1e>
 800eedc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eee0:	b94b      	cbnz	r3, 800eef6 <_raise_r+0x32>
 800eee2:	4620      	mov	r0, r4
 800eee4:	f000 f830 	bl	800ef48 <_getpid_r>
 800eee8:	462a      	mov	r2, r5
 800eeea:	4601      	mov	r1, r0
 800eeec:	4620      	mov	r0, r4
 800eeee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eef2:	f000 b817 	b.w	800ef24 <_kill_r>
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d00a      	beq.n	800ef10 <_raise_r+0x4c>
 800eefa:	1c59      	adds	r1, r3, #1
 800eefc:	d103      	bne.n	800ef06 <_raise_r+0x42>
 800eefe:	2316      	movs	r3, #22
 800ef00:	6003      	str	r3, [r0, #0]
 800ef02:	2001      	movs	r0, #1
 800ef04:	e7e7      	b.n	800eed6 <_raise_r+0x12>
 800ef06:	2400      	movs	r4, #0
 800ef08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef0c:	4628      	mov	r0, r5
 800ef0e:	4798      	blx	r3
 800ef10:	2000      	movs	r0, #0
 800ef12:	e7e0      	b.n	800eed6 <_raise_r+0x12>

0800ef14 <raise>:
 800ef14:	4b02      	ldr	r3, [pc, #8]	; (800ef20 <raise+0xc>)
 800ef16:	4601      	mov	r1, r0
 800ef18:	6818      	ldr	r0, [r3, #0]
 800ef1a:	f7ff bfd3 	b.w	800eec4 <_raise_r>
 800ef1e:	bf00      	nop
 800ef20:	24000014 	.word	0x24000014

0800ef24 <_kill_r>:
 800ef24:	b538      	push	{r3, r4, r5, lr}
 800ef26:	4d07      	ldr	r5, [pc, #28]	; (800ef44 <_kill_r+0x20>)
 800ef28:	2300      	movs	r3, #0
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	4608      	mov	r0, r1
 800ef2e:	4611      	mov	r1, r2
 800ef30:	602b      	str	r3, [r5, #0]
 800ef32:	f7f6 fc5b 	bl	80057ec <_kill>
 800ef36:	1c43      	adds	r3, r0, #1
 800ef38:	d102      	bne.n	800ef40 <_kill_r+0x1c>
 800ef3a:	682b      	ldr	r3, [r5, #0]
 800ef3c:	b103      	cbz	r3, 800ef40 <_kill_r+0x1c>
 800ef3e:	6023      	str	r3, [r4, #0]
 800ef40:	bd38      	pop	{r3, r4, r5, pc}
 800ef42:	bf00      	nop
 800ef44:	24001cf8 	.word	0x24001cf8

0800ef48 <_getpid_r>:
 800ef48:	f7f6 bc48 	b.w	80057dc <_getpid>

0800ef4c <sbrk_aligned>:
 800ef4c:	b570      	push	{r4, r5, r6, lr}
 800ef4e:	4e0e      	ldr	r6, [pc, #56]	; (800ef88 <sbrk_aligned+0x3c>)
 800ef50:	460c      	mov	r4, r1
 800ef52:	6831      	ldr	r1, [r6, #0]
 800ef54:	4605      	mov	r5, r0
 800ef56:	b911      	cbnz	r1, 800ef5e <sbrk_aligned+0x12>
 800ef58:	f000 f8bc 	bl	800f0d4 <_sbrk_r>
 800ef5c:	6030      	str	r0, [r6, #0]
 800ef5e:	4621      	mov	r1, r4
 800ef60:	4628      	mov	r0, r5
 800ef62:	f000 f8b7 	bl	800f0d4 <_sbrk_r>
 800ef66:	1c43      	adds	r3, r0, #1
 800ef68:	d00a      	beq.n	800ef80 <sbrk_aligned+0x34>
 800ef6a:	1cc4      	adds	r4, r0, #3
 800ef6c:	f024 0403 	bic.w	r4, r4, #3
 800ef70:	42a0      	cmp	r0, r4
 800ef72:	d007      	beq.n	800ef84 <sbrk_aligned+0x38>
 800ef74:	1a21      	subs	r1, r4, r0
 800ef76:	4628      	mov	r0, r5
 800ef78:	f000 f8ac 	bl	800f0d4 <_sbrk_r>
 800ef7c:	3001      	adds	r0, #1
 800ef7e:	d101      	bne.n	800ef84 <sbrk_aligned+0x38>
 800ef80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ef84:	4620      	mov	r0, r4
 800ef86:	bd70      	pop	{r4, r5, r6, pc}
 800ef88:	24001cf4 	.word	0x24001cf4

0800ef8c <_malloc_r>:
 800ef8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef90:	1ccd      	adds	r5, r1, #3
 800ef92:	f025 0503 	bic.w	r5, r5, #3
 800ef96:	3508      	adds	r5, #8
 800ef98:	2d0c      	cmp	r5, #12
 800ef9a:	bf38      	it	cc
 800ef9c:	250c      	movcc	r5, #12
 800ef9e:	2d00      	cmp	r5, #0
 800efa0:	4607      	mov	r7, r0
 800efa2:	db01      	blt.n	800efa8 <_malloc_r+0x1c>
 800efa4:	42a9      	cmp	r1, r5
 800efa6:	d905      	bls.n	800efb4 <_malloc_r+0x28>
 800efa8:	230c      	movs	r3, #12
 800efaa:	603b      	str	r3, [r7, #0]
 800efac:	2600      	movs	r6, #0
 800efae:	4630      	mov	r0, r6
 800efb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb4:	4e2e      	ldr	r6, [pc, #184]	; (800f070 <_malloc_r+0xe4>)
 800efb6:	f000 f89d 	bl	800f0f4 <__malloc_lock>
 800efba:	6833      	ldr	r3, [r6, #0]
 800efbc:	461c      	mov	r4, r3
 800efbe:	bb34      	cbnz	r4, 800f00e <_malloc_r+0x82>
 800efc0:	4629      	mov	r1, r5
 800efc2:	4638      	mov	r0, r7
 800efc4:	f7ff ffc2 	bl	800ef4c <sbrk_aligned>
 800efc8:	1c43      	adds	r3, r0, #1
 800efca:	4604      	mov	r4, r0
 800efcc:	d14d      	bne.n	800f06a <_malloc_r+0xde>
 800efce:	6834      	ldr	r4, [r6, #0]
 800efd0:	4626      	mov	r6, r4
 800efd2:	2e00      	cmp	r6, #0
 800efd4:	d140      	bne.n	800f058 <_malloc_r+0xcc>
 800efd6:	6823      	ldr	r3, [r4, #0]
 800efd8:	4631      	mov	r1, r6
 800efda:	4638      	mov	r0, r7
 800efdc:	eb04 0803 	add.w	r8, r4, r3
 800efe0:	f000 f878 	bl	800f0d4 <_sbrk_r>
 800efe4:	4580      	cmp	r8, r0
 800efe6:	d13a      	bne.n	800f05e <_malloc_r+0xd2>
 800efe8:	6821      	ldr	r1, [r4, #0]
 800efea:	3503      	adds	r5, #3
 800efec:	1a6d      	subs	r5, r5, r1
 800efee:	f025 0503 	bic.w	r5, r5, #3
 800eff2:	3508      	adds	r5, #8
 800eff4:	2d0c      	cmp	r5, #12
 800eff6:	bf38      	it	cc
 800eff8:	250c      	movcc	r5, #12
 800effa:	4629      	mov	r1, r5
 800effc:	4638      	mov	r0, r7
 800effe:	f7ff ffa5 	bl	800ef4c <sbrk_aligned>
 800f002:	3001      	adds	r0, #1
 800f004:	d02b      	beq.n	800f05e <_malloc_r+0xd2>
 800f006:	6823      	ldr	r3, [r4, #0]
 800f008:	442b      	add	r3, r5
 800f00a:	6023      	str	r3, [r4, #0]
 800f00c:	e00e      	b.n	800f02c <_malloc_r+0xa0>
 800f00e:	6822      	ldr	r2, [r4, #0]
 800f010:	1b52      	subs	r2, r2, r5
 800f012:	d41e      	bmi.n	800f052 <_malloc_r+0xc6>
 800f014:	2a0b      	cmp	r2, #11
 800f016:	d916      	bls.n	800f046 <_malloc_r+0xba>
 800f018:	1961      	adds	r1, r4, r5
 800f01a:	42a3      	cmp	r3, r4
 800f01c:	6025      	str	r5, [r4, #0]
 800f01e:	bf18      	it	ne
 800f020:	6059      	strne	r1, [r3, #4]
 800f022:	6863      	ldr	r3, [r4, #4]
 800f024:	bf08      	it	eq
 800f026:	6031      	streq	r1, [r6, #0]
 800f028:	5162      	str	r2, [r4, r5]
 800f02a:	604b      	str	r3, [r1, #4]
 800f02c:	4638      	mov	r0, r7
 800f02e:	f104 060b 	add.w	r6, r4, #11
 800f032:	f000 f865 	bl	800f100 <__malloc_unlock>
 800f036:	f026 0607 	bic.w	r6, r6, #7
 800f03a:	1d23      	adds	r3, r4, #4
 800f03c:	1af2      	subs	r2, r6, r3
 800f03e:	d0b6      	beq.n	800efae <_malloc_r+0x22>
 800f040:	1b9b      	subs	r3, r3, r6
 800f042:	50a3      	str	r3, [r4, r2]
 800f044:	e7b3      	b.n	800efae <_malloc_r+0x22>
 800f046:	6862      	ldr	r2, [r4, #4]
 800f048:	42a3      	cmp	r3, r4
 800f04a:	bf0c      	ite	eq
 800f04c:	6032      	streq	r2, [r6, #0]
 800f04e:	605a      	strne	r2, [r3, #4]
 800f050:	e7ec      	b.n	800f02c <_malloc_r+0xa0>
 800f052:	4623      	mov	r3, r4
 800f054:	6864      	ldr	r4, [r4, #4]
 800f056:	e7b2      	b.n	800efbe <_malloc_r+0x32>
 800f058:	4634      	mov	r4, r6
 800f05a:	6876      	ldr	r6, [r6, #4]
 800f05c:	e7b9      	b.n	800efd2 <_malloc_r+0x46>
 800f05e:	230c      	movs	r3, #12
 800f060:	603b      	str	r3, [r7, #0]
 800f062:	4638      	mov	r0, r7
 800f064:	f000 f84c 	bl	800f100 <__malloc_unlock>
 800f068:	e7a1      	b.n	800efae <_malloc_r+0x22>
 800f06a:	6025      	str	r5, [r4, #0]
 800f06c:	e7de      	b.n	800f02c <_malloc_r+0xa0>
 800f06e:	bf00      	nop
 800f070:	24001cf0 	.word	0x24001cf0

0800f074 <_realloc_r>:
 800f074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f078:	4680      	mov	r8, r0
 800f07a:	4614      	mov	r4, r2
 800f07c:	460e      	mov	r6, r1
 800f07e:	b921      	cbnz	r1, 800f08a <_realloc_r+0x16>
 800f080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f084:	4611      	mov	r1, r2
 800f086:	f7ff bf81 	b.w	800ef8c <_malloc_r>
 800f08a:	b92a      	cbnz	r2, 800f098 <_realloc_r+0x24>
 800f08c:	f000 f83e 	bl	800f10c <_free_r>
 800f090:	4625      	mov	r5, r4
 800f092:	4628      	mov	r0, r5
 800f094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f098:	f000 f884 	bl	800f1a4 <_malloc_usable_size_r>
 800f09c:	4284      	cmp	r4, r0
 800f09e:	4607      	mov	r7, r0
 800f0a0:	d802      	bhi.n	800f0a8 <_realloc_r+0x34>
 800f0a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f0a6:	d812      	bhi.n	800f0ce <_realloc_r+0x5a>
 800f0a8:	4621      	mov	r1, r4
 800f0aa:	4640      	mov	r0, r8
 800f0ac:	f7ff ff6e 	bl	800ef8c <_malloc_r>
 800f0b0:	4605      	mov	r5, r0
 800f0b2:	2800      	cmp	r0, #0
 800f0b4:	d0ed      	beq.n	800f092 <_realloc_r+0x1e>
 800f0b6:	42bc      	cmp	r4, r7
 800f0b8:	4622      	mov	r2, r4
 800f0ba:	4631      	mov	r1, r6
 800f0bc:	bf28      	it	cs
 800f0be:	463a      	movcs	r2, r7
 800f0c0:	f7ff fee2 	bl	800ee88 <memcpy>
 800f0c4:	4631      	mov	r1, r6
 800f0c6:	4640      	mov	r0, r8
 800f0c8:	f000 f820 	bl	800f10c <_free_r>
 800f0cc:	e7e1      	b.n	800f092 <_realloc_r+0x1e>
 800f0ce:	4635      	mov	r5, r6
 800f0d0:	e7df      	b.n	800f092 <_realloc_r+0x1e>
	...

0800f0d4 <_sbrk_r>:
 800f0d4:	b538      	push	{r3, r4, r5, lr}
 800f0d6:	4d06      	ldr	r5, [pc, #24]	; (800f0f0 <_sbrk_r+0x1c>)
 800f0d8:	2300      	movs	r3, #0
 800f0da:	4604      	mov	r4, r0
 800f0dc:	4608      	mov	r0, r1
 800f0de:	602b      	str	r3, [r5, #0]
 800f0e0:	f7f6 fb9e 	bl	8005820 <_sbrk>
 800f0e4:	1c43      	adds	r3, r0, #1
 800f0e6:	d102      	bne.n	800f0ee <_sbrk_r+0x1a>
 800f0e8:	682b      	ldr	r3, [r5, #0]
 800f0ea:	b103      	cbz	r3, 800f0ee <_sbrk_r+0x1a>
 800f0ec:	6023      	str	r3, [r4, #0]
 800f0ee:	bd38      	pop	{r3, r4, r5, pc}
 800f0f0:	24001cf8 	.word	0x24001cf8

0800f0f4 <__malloc_lock>:
 800f0f4:	4801      	ldr	r0, [pc, #4]	; (800f0fc <__malloc_lock+0x8>)
 800f0f6:	f000 b85d 	b.w	800f1b4 <__retarget_lock_acquire_recursive>
 800f0fa:	bf00      	nop
 800f0fc:	24001cfc 	.word	0x24001cfc

0800f100 <__malloc_unlock>:
 800f100:	4801      	ldr	r0, [pc, #4]	; (800f108 <__malloc_unlock+0x8>)
 800f102:	f000 b858 	b.w	800f1b6 <__retarget_lock_release_recursive>
 800f106:	bf00      	nop
 800f108:	24001cfc 	.word	0x24001cfc

0800f10c <_free_r>:
 800f10c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f10e:	2900      	cmp	r1, #0
 800f110:	d044      	beq.n	800f19c <_free_r+0x90>
 800f112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f116:	9001      	str	r0, [sp, #4]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f1a1 0404 	sub.w	r4, r1, #4
 800f11e:	bfb8      	it	lt
 800f120:	18e4      	addlt	r4, r4, r3
 800f122:	f7ff ffe7 	bl	800f0f4 <__malloc_lock>
 800f126:	4a1e      	ldr	r2, [pc, #120]	; (800f1a0 <_free_r+0x94>)
 800f128:	9801      	ldr	r0, [sp, #4]
 800f12a:	6813      	ldr	r3, [r2, #0]
 800f12c:	b933      	cbnz	r3, 800f13c <_free_r+0x30>
 800f12e:	6063      	str	r3, [r4, #4]
 800f130:	6014      	str	r4, [r2, #0]
 800f132:	b003      	add	sp, #12
 800f134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f138:	f7ff bfe2 	b.w	800f100 <__malloc_unlock>
 800f13c:	42a3      	cmp	r3, r4
 800f13e:	d908      	bls.n	800f152 <_free_r+0x46>
 800f140:	6825      	ldr	r5, [r4, #0]
 800f142:	1961      	adds	r1, r4, r5
 800f144:	428b      	cmp	r3, r1
 800f146:	bf01      	itttt	eq
 800f148:	6819      	ldreq	r1, [r3, #0]
 800f14a:	685b      	ldreq	r3, [r3, #4]
 800f14c:	1949      	addeq	r1, r1, r5
 800f14e:	6021      	streq	r1, [r4, #0]
 800f150:	e7ed      	b.n	800f12e <_free_r+0x22>
 800f152:	461a      	mov	r2, r3
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	b10b      	cbz	r3, 800f15c <_free_r+0x50>
 800f158:	42a3      	cmp	r3, r4
 800f15a:	d9fa      	bls.n	800f152 <_free_r+0x46>
 800f15c:	6811      	ldr	r1, [r2, #0]
 800f15e:	1855      	adds	r5, r2, r1
 800f160:	42a5      	cmp	r5, r4
 800f162:	d10b      	bne.n	800f17c <_free_r+0x70>
 800f164:	6824      	ldr	r4, [r4, #0]
 800f166:	4421      	add	r1, r4
 800f168:	1854      	adds	r4, r2, r1
 800f16a:	42a3      	cmp	r3, r4
 800f16c:	6011      	str	r1, [r2, #0]
 800f16e:	d1e0      	bne.n	800f132 <_free_r+0x26>
 800f170:	681c      	ldr	r4, [r3, #0]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	6053      	str	r3, [r2, #4]
 800f176:	4421      	add	r1, r4
 800f178:	6011      	str	r1, [r2, #0]
 800f17a:	e7da      	b.n	800f132 <_free_r+0x26>
 800f17c:	d902      	bls.n	800f184 <_free_r+0x78>
 800f17e:	230c      	movs	r3, #12
 800f180:	6003      	str	r3, [r0, #0]
 800f182:	e7d6      	b.n	800f132 <_free_r+0x26>
 800f184:	6825      	ldr	r5, [r4, #0]
 800f186:	1961      	adds	r1, r4, r5
 800f188:	428b      	cmp	r3, r1
 800f18a:	bf04      	itt	eq
 800f18c:	6819      	ldreq	r1, [r3, #0]
 800f18e:	685b      	ldreq	r3, [r3, #4]
 800f190:	6063      	str	r3, [r4, #4]
 800f192:	bf04      	itt	eq
 800f194:	1949      	addeq	r1, r1, r5
 800f196:	6021      	streq	r1, [r4, #0]
 800f198:	6054      	str	r4, [r2, #4]
 800f19a:	e7ca      	b.n	800f132 <_free_r+0x26>
 800f19c:	b003      	add	sp, #12
 800f19e:	bd30      	pop	{r4, r5, pc}
 800f1a0:	24001cf0 	.word	0x24001cf0

0800f1a4 <_malloc_usable_size_r>:
 800f1a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1a8:	1f18      	subs	r0, r3, #4
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	bfbc      	itt	lt
 800f1ae:	580b      	ldrlt	r3, [r1, r0]
 800f1b0:	18c0      	addlt	r0, r0, r3
 800f1b2:	4770      	bx	lr

0800f1b4 <__retarget_lock_acquire_recursive>:
 800f1b4:	4770      	bx	lr

0800f1b6 <__retarget_lock_release_recursive>:
 800f1b6:	4770      	bx	lr

0800f1b8 <_init>:
 800f1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ba:	bf00      	nop
 800f1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1be:	bc08      	pop	{r3}
 800f1c0:	469e      	mov	lr, r3
 800f1c2:	4770      	bx	lr

0800f1c4 <_fini>:
 800f1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c6:	bf00      	nop
 800f1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ca:	bc08      	pop	{r3}
 800f1cc:	469e      	mov	lr, r3
 800f1ce:	4770      	bx	lr
