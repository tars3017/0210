
0210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f07c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800f34c  0800f34c  0001f34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f6b4  0800f6b4  0001f6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f6bc  0800f6bc  0001f6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f6c4  0800f6c4  0001f6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f6c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001cb0  24000078  0800f740  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001d28  0800f740  00021d28  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fb07  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032a1  00000000  00000000  0003fbad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  00042e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c8  00000000  00000000  00044308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034db1  00000000  00000000  000456d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a676  00000000  00000000  0007a481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015402d  00000000  00000000  00094af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e8b24  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d94  00000000  00000000  001e8b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f334 	.word	0x0800f334

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f334 	.word	0x0800f334

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PV1 = 0, PV2 = 0, PV3 = 0, PV4 = 0;
 8000684:	49b4      	ldr	r1, [pc, #720]	; (8000958 <main+0x2d8>)
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c1 2300 	strd	r2, r3, [r1]
 8000692:	49b2      	ldr	r1, [pc, #712]	; (800095c <main+0x2dc>)
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c1 2300 	strd	r2, r3, [r1]
 80006a0:	49af      	ldr	r1, [pc, #700]	; (8000960 <main+0x2e0>)
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e9c1 2300 	strd	r2, r3, [r1]
 80006ae:	49ad      	ldr	r1, [pc, #692]	; (8000964 <main+0x2e4>)
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	f04f 0300 	mov.w	r3, #0
 80006b8:	e9c1 2300 	strd	r2, r3, [r1]
	SP1 = 0, SP2 = 0, SP3 = 0, SP4 = 0;
 80006bc:	49aa      	ldr	r1, [pc, #680]	; (8000968 <main+0x2e8>)
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
 80006ca:	49a8      	ldr	r1, [pc, #672]	; (800096c <main+0x2ec>)
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c1 2300 	strd	r2, r3, [r1]
 80006d8:	49a5      	ldr	r1, [pc, #660]	; (8000970 <main+0x2f0>)
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
 80006e6:	49a3      	ldr	r1, [pc, #652]	; (8000974 <main+0x2f4>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]

	n = 0;
 80006f4:	4ba0      	ldr	r3, [pc, #640]	; (8000978 <main+0x2f8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	kkk = 0;
 80006fa:	4ba0      	ldr	r3, [pc, #640]	; (800097c <main+0x2fc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
	count = 0;
 8000700:	4b9f      	ldr	r3, [pc, #636]	; (8000980 <main+0x300>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	error1 = PV1 - SP1;
 8000706:	4b94      	ldr	r3, [pc, #592]	; (8000958 <main+0x2d8>)
 8000708:	ed93 6b00 	vldr	d6, [r3]
 800070c:	4b96      	ldr	r3, [pc, #600]	; (8000968 <main+0x2e8>)
 800070e:	ed93 7b00 	vldr	d7, [r3]
 8000712:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000716:	4b9b      	ldr	r3, [pc, #620]	; (8000984 <main+0x304>)
 8000718:	ed83 7b00 	vstr	d7, [r3]
	error2 = PV2 - SP2;
 800071c:	4b8f      	ldr	r3, [pc, #572]	; (800095c <main+0x2dc>)
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	4b92      	ldr	r3, [pc, #584]	; (800096c <main+0x2ec>)
 8000724:	ed93 7b00 	vldr	d7, [r3]
 8000728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072c:	4b96      	ldr	r3, [pc, #600]	; (8000988 <main+0x308>)
 800072e:	ed83 7b00 	vstr	d7, [r3]
	error3 = PV3 - SP3;
 8000732:	4b8b      	ldr	r3, [pc, #556]	; (8000960 <main+0x2e0>)
 8000734:	ed93 6b00 	vldr	d6, [r3]
 8000738:	4b8d      	ldr	r3, [pc, #564]	; (8000970 <main+0x2f0>)
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000742:	4b92      	ldr	r3, [pc, #584]	; (800098c <main+0x30c>)
 8000744:	ed83 7b00 	vstr	d7, [r3]
	error4 = PV4 - SP4;
 8000748:	4b86      	ldr	r3, [pc, #536]	; (8000964 <main+0x2e4>)
 800074a:	ed93 6b00 	vldr	d6, [r3]
 800074e:	4b89      	ldr	r3, [pc, #548]	; (8000974 <main+0x2f4>)
 8000750:	ed93 7b00 	vldr	d7, [r3]
 8000754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000758:	4b8d      	ldr	r3, [pc, #564]	; (8000990 <main+0x310>)
 800075a:	ed83 7b00 	vstr	d7, [r3]
	enc1 = 0, enc2 = 0, enc3 = 0, enc4 = 0;
 800075e:	4b8d      	ldr	r3, [pc, #564]	; (8000994 <main+0x314>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	4b8c      	ldr	r3, [pc, #560]	; (8000998 <main+0x318>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	4b8c      	ldr	r3, [pc, #560]	; (800099c <main+0x31c>)
 800076c:	2200      	movs	r2, #0
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	4b8b      	ldr	r3, [pc, #556]	; (80009a0 <main+0x320>)
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]

	Kp1 = 0.361732063; // blue
 8000776:	498b      	ldr	r1, [pc, #556]	; (80009a4 <main+0x324>)
 8000778:	a359      	add	r3, pc, #356	; (adr r3, 80008e0 <main+0x260>)
 800077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 = 15.80374981; // blue
 8000782:	4989      	ldr	r1, [pc, #548]	; (80009a8 <main+0x328>)
 8000784:	a358      	add	r3, pc, #352	; (adr r3, 80008e8 <main+0x268>)
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 = 0.394239297; // purple
 800078e:	4987      	ldr	r1, [pc, #540]	; (80009ac <main+0x32c>)
 8000790:	a357      	add	r3, pc, #348	; (adr r3, 80008f0 <main+0x270>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 = 16.97823652; // purple
 800079a:	4985      	ldr	r1, [pc, #532]	; (80009b0 <main+0x330>)
 800079c:	a356      	add	r3, pc, #344	; (adr r3, 80008f8 <main+0x278>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	e9c1 2300 	strd	r2, r3, [r1]
	Kp3 = 0.408122176;  // 801 0.408122176
 80007a6:	4983      	ldr	r1, [pc, #524]	; (80009b4 <main+0x334>)
 80007a8:	a355      	add	r3, pc, #340	; (adr r3, 8000900 <main+0x280>)
 80007aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ae:	e9c1 2300 	strd	r2, r3, [r1]
	Ki3 = 15.83432596; // 801 15.83432596
 80007b2:	4981      	ldr	r1, [pc, #516]	; (80009b8 <main+0x338>)
 80007b4:	a354      	add	r3, pc, #336	; (adr r3, 8000908 <main+0x288>)
 80007b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ba:	e9c1 2300 	strd	r2, r3, [r1]
	Kp4 = 0.541670637;  // DC9 0.541670637
 80007be:	497f      	ldr	r1, [pc, #508]	; (80009bc <main+0x33c>)
 80007c0:	a353      	add	r3, pc, #332	; (adr r3, 8000910 <main+0x290>)
 80007c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
	Ki4 = 18.96397104;  // DC9 18.96397104
 80007ca:	497d      	ldr	r1, [pc, #500]	; (80009c0 <main+0x340>)
 80007cc:	a352      	add	r3, pc, #328	; (adr r3, 8000918 <main+0x298>)
 80007ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007d2:	e9c1 2300 	strd	r2, r3, [r1]

	error_last1 = 0;
 80007d6:	497b      	ldr	r1, [pc, #492]	; (80009c4 <main+0x344>)
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c1 2300 	strd	r2, r3, [r1]
	error_last2 = 0;
 80007e4:	4978      	ldr	r1, [pc, #480]	; (80009c8 <main+0x348>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9c1 2300 	strd	r2, r3, [r1]
	error_last3 = 0;
 80007f2:	4976      	ldr	r1, [pc, #472]	; (80009cc <main+0x34c>)
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c1 2300 	strd	r2, r3, [r1]
	error_last4 = 0;
 8000800:	4973      	ldr	r1, [pc, #460]	; (80009d0 <main+0x350>)
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c1 2300 	strd	r2, r3, [r1]

	errorsum1 = 0;
 800080e:	4971      	ldr	r1, [pc, #452]	; (80009d4 <main+0x354>)
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum2 = 0;
 800081c:	496e      	ldr	r1, [pc, #440]	; (80009d8 <main+0x358>)
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum3 = 0;
 800082a:	496c      	ldr	r1, [pc, #432]	; (80009dc <main+0x35c>)
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum4 = 0;
 8000838:	4969      	ldr	r1, [pc, #420]	; (80009e0 <main+0x360>)
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2300 	strd	r2, r3, [r1]

	push_vel_x = 0;
 8000846:	4967      	ldr	r1, [pc, #412]	; (80009e4 <main+0x364>)
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_y = 0;
 8000854:	4964      	ldr	r1, [pc, #400]	; (80009e8 <main+0x368>)
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_z = 0;
 8000862:	4962      	ldr	r1, [pc, #392]	; (80009ec <main+0x36c>)
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e9c1 2300 	strd	r2, r3, [r1]

	lx = 0.05825; // lx 58.25 mm(forward backward direction)
 8000870:	495f      	ldr	r1, [pc, #380]	; (80009f0 <main+0x370>)
 8000872:	a32b      	add	r3, pc, #172	; (adr r3, 8000920 <main+0x2a0>)
 8000874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000878:	e9c1 2300 	strd	r2, r3, [r1]
	ly = 0.10175; // ly 101.75 mm
 800087c:	495d      	ldr	r1, [pc, #372]	; (80009f4 <main+0x374>)
 800087e:	a32a      	add	r3, pc, #168	; (adr r3, 8000928 <main+0x2a8>)
 8000880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000884:	e9c1 2300 	strd	r2, r3, [r1]
	r = 0.05; // unit m(measure on 5/18)
 8000888:	495b      	ldr	r1, [pc, #364]	; (80009f8 <main+0x378>)
 800088a:	a329      	add	r3, pc, #164	; (adr r3, 8000930 <main+0x2b0>)
 800088c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000890:	e9c1 2300 	strd	r2, r3, [r1]

	gear = 75;
 8000894:	4b59      	ldr	r3, [pc, #356]	; (80009fc <main+0x37c>)
 8000896:	224b      	movs	r2, #75	; 0x4b
 8000898:	601a      	str	r2, [r3, #0]

	wheel_trans2 = 9.85413;
 800089a:	4959      	ldr	r1, [pc, #356]	; (8000a00 <main+0x380>)
 800089c:	a326      	add	r3, pc, #152	; (adr r3, 8000938 <main+0x2b8>)
 800089e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008a2:	e9c1 2300 	strd	r2, r3, [r1]
	wheel_trans1 = 9.77036;
 80008a6:	4957      	ldr	r1, [pc, #348]	; (8000a04 <main+0x384>)
 80008a8:	a325      	add	r3, pc, #148	; (adr r3, 8000940 <main+0x2c0>)
 80008aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ae:	e9c1 2300 	strd	r2, r3, [r1]
	wheel_trans4 = 10.0845;
 80008b2:	4955      	ldr	r1, [pc, #340]	; (8000a08 <main+0x388>)
 80008b4:	a324      	add	r3, pc, #144	; (adr r3, 8000948 <main+0x2c8>)
 80008b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ba:	e9c1 2300 	strd	r2, r3, [r1]
	wheel_trans3 = 9.86461;
 80008be:	4953      	ldr	r1, [pc, #332]	; (8000a0c <main+0x38c>)
 80008c0:	a323      	add	r3, pc, #140	; (adr r3, 8000950 <main+0x2d0>)
 80008c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008c6:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ca:	f005 f93f 	bl	8005b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ce:	f000 f8ef 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d2:	f000 fdb9 	bl	8001448 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d6:	f000 fd8f 	bl	80013f8 <MX_DMA_Init>
  MX_TIM2_Init();
 80008da:	f000 f9e7 	bl	8000cac <MX_TIM2_Init>
 80008de:	e097      	b.n	8000a10 <main+0x390>
 80008e0:	3d1ff9a3 	.word	0x3d1ff9a3
 80008e4:	3fd7269e 	.word	0x3fd7269e
 80008e8:	18583b80 	.word	0x18583b80
 80008ec:	402f9b85 	.word	0x402f9b85
 80008f0:	75da6f19 	.word	0x75da6f19
 80008f4:	3fd93b37 	.word	0x3fd93b37
 80008f8:	b5652721 	.word	0xb5652721
 80008fc:	4030fa6d 	.word	0x4030fa6d
 8000900:	79ac4f90 	.word	0x79ac4f90
 8000904:	3fda1eac 	.word	0x3fda1eac
 8000908:	c5b0cebf 	.word	0xc5b0cebf
 800090c:	402fab2c 	.word	0x402fab2c
 8000910:	a8e3caa6 	.word	0xa8e3caa6
 8000914:	3fe1555d 	.word	0x3fe1555d
 8000918:	ce5b1753 	.word	0xce5b1753
 800091c:	4032f6c6 	.word	0x4032f6c6
 8000920:	a9fbe76d 	.word	0xa9fbe76d
 8000924:	3fadd2f1 	.word	0x3fadd2f1
 8000928:	ba5e353f 	.word	0xba5e353f
 800092c:	3fba0c49 	.word	0x3fba0c49
 8000930:	9999999a 	.word	0x9999999a
 8000934:	3fa99999 	.word	0x3fa99999
 8000938:	870110a1 	.word	0x870110a1
 800093c:	4023b550 	.word	0x4023b550
 8000940:	a03c4b0a 	.word	0xa03c4b0a
 8000944:	40238a6c 	.word	0x40238a6c
 8000948:	95810625 	.word	0x95810625
 800094c:	40242b43 	.word	0x40242b43
 8000950:	297396d1 	.word	0x297396d1
 8000954:	4023baae 	.word	0x4023baae
 8000958:	24000558 	.word	0x24000558
 800095c:	24000560 	.word	0x24000560
 8000960:	24000568 	.word	0x24000568
 8000964:	24000570 	.word	0x24000570
 8000968:	24000578 	.word	0x24000578
 800096c:	24000580 	.word	0x24000580
 8000970:	24000588 	.word	0x24000588
 8000974:	24000590 	.word	0x24000590
 8000978:	24000660 	.word	0x24000660
 800097c:	24000664 	.word	0x24000664
 8000980:	24000668 	.word	0x24000668
 8000984:	24000598 	.word	0x24000598
 8000988:	240005a0 	.word	0x240005a0
 800098c:	240005a8 	.word	0x240005a8
 8000990:	240005b0 	.word	0x240005b0
 8000994:	240005b8 	.word	0x240005b8
 8000998:	240005ba 	.word	0x240005ba
 800099c:	240005bc 	.word	0x240005bc
 80009a0:	240005be 	.word	0x240005be
 80009a4:	240005c0 	.word	0x240005c0
 80009a8:	240005e0 	.word	0x240005e0
 80009ac:	240005c8 	.word	0x240005c8
 80009b0:	240005e8 	.word	0x240005e8
 80009b4:	240005d0 	.word	0x240005d0
 80009b8:	240005f0 	.word	0x240005f0
 80009bc:	240005d8 	.word	0x240005d8
 80009c0:	240005f8 	.word	0x240005f8
 80009c4:	24000620 	.word	0x24000620
 80009c8:	24000628 	.word	0x24000628
 80009cc:	24000630 	.word	0x24000630
 80009d0:	24000638 	.word	0x24000638
 80009d4:	24000640 	.word	0x24000640
 80009d8:	24000648 	.word	0x24000648
 80009dc:	24000650 	.word	0x24000650
 80009e0:	24000658 	.word	0x24000658
 80009e4:	240006a0 	.word	0x240006a0
 80009e8:	240006a8 	.word	0x240006a8
 80009ec:	240006b0 	.word	0x240006b0
 80009f0:	24000670 	.word	0x24000670
 80009f4:	24000678 	.word	0x24000678
 80009f8:	24000680 	.word	0x24000680
 80009fc:	240006b8 	.word	0x240006b8
 8000a00:	240006c8 	.word	0x240006c8
 8000a04:	240006c0 	.word	0x240006c0
 8000a08:	240006d8 	.word	0x240006d8
 8000a0c:	240006d0 	.word	0x240006d0
  MX_TIM3_Init();
 8000a10:	f000 f99a 	bl	8000d48 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a14:	f000 f9ee 	bl	8000df4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000a18:	f000 faa0 	bl	8000f5c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000a1c:	f000 fade 	bl	8000fdc <MX_TIM7_Init>
  MX_TIM1_Init();
 8000a20:	f000 f8b4 	bl	8000b8c <MX_TIM1_Init>
  MX_TIM5_Init();
 8000a24:	f000 fa40 	bl	8000ea8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a28:	f000 fb0e 	bl	8001048 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000a2c:	f000 fb66 	bl	80010fc <MX_TIM15_Init>
  MX_TIM23_Init();
 8000a30:	f000 fbea 	bl	8001208 <MX_TIM23_Init>
  MX_TIM24_Init();
 8000a34:	f000 fc3e 	bl	80012b4 <MX_TIM24_Init>
  MX_USART3_UART_Init();
 8000a38:	f000 fc92 	bl	8001360 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000a3c:	4813      	ldr	r0, [pc, #76]	; (8000a8c <main+0x40c>)
 8000a3e:	f00a fd0b 	bl	800b458 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000a42:	2100      	movs	r1, #0
 8000a44:	4812      	ldr	r0, [pc, #72]	; (8000a90 <main+0x410>)
 8000a46:	f00b f801 	bl	800ba4c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <main+0x414>)
 8000a4e:	f00a fffd 	bl	800ba4c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 8000a52:	2100      	movs	r1, #0
 8000a54:	4810      	ldr	r0, [pc, #64]	; (8000a98 <main+0x418>)
 8000a56:	f00a fff9 	bl	800ba4c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	480f      	ldr	r0, [pc, #60]	; (8000a9c <main+0x41c>)
 8000a5e:	f00a fff5 	bl	800ba4c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000a62:	2100      	movs	r1, #0
 8000a64:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <main+0x420>)
 8000a66:	f00a fdd5 	bl	800b614 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <main+0x424>)
 8000a6e:	f00a fdd1 	bl	800b614 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000a72:	2100      	movs	r1, #0
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <main+0x428>)
 8000a76:	f00a fdcd 	bl	800b614 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <main+0x42c>)
 8000a7e:	f00a fdc9 	bl	800b614 <HAL_TIM_PWM_Start>

  setup();
 8000a82:	f003 fb9d 	bl	80041c0 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000a86:	f003 fbb7 	bl	80041f8 <loop>
 8000a8a:	e7fc      	b.n	8000a86 <main+0x406>
 8000a8c:	240000e0 	.word	0x240000e0
 8000a90:	2400012c 	.word	0x2400012c
 8000a94:	240002a8 	.word	0x240002a8
 8000a98:	24000340 	.word	0x24000340
 8000a9c:	2400038c 	.word	0x2400038c
 8000aa0:	24000178 	.word	0x24000178
 8000aa4:	240001c4 	.word	0x240001c4
 8000aa8:	240002f4 	.word	0x240002f4
 8000aac:	24000094 	.word	0x24000094

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b09c      	sub	sp, #112	; 0x70
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	224c      	movs	r2, #76	; 0x4c
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f00e faae 	bl	800f020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2220      	movs	r2, #32
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f00e faa8 	bl	800f020 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f008 f9d9 	bl	8008e88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <SystemClock_Config+0xd8>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a2a      	ldr	r2, [pc, #168]	; (8000b88 <SystemClock_Config+0xd8>)
 8000ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ae4:	6193      	str	r3, [r2, #24]
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <SystemClock_Config+0xd8>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000af2:	bf00      	nop
 8000af4:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <SystemClock_Config+0xd8>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b00:	d1f8      	bne.n	8000af4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b02:	2301      	movs	r3, #1
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b06:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b10:	2302      	movs	r3, #2
 8000b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b14:	2304      	movs	r3, #4
 8000b16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b18:	23a8      	movs	r3, #168	; 0xa8
 8000b1a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b20:	2304      	movs	r3, #4
 8000b22:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f008 f9df 	bl	8008efc <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b44:	f001 fb34 	bl	80021b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	233f      	movs	r3, #63	; 0x3f
 8000b4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b54:	2308      	movs	r3, #8
 8000b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b58:	2340      	movs	r3, #64	; 0x40
 8000b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b5c:	2340      	movs	r3, #64	; 0x40
 8000b5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b66:	2340      	movs	r3, #64	; 0x40
 8000b68:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f008 fd72 	bl	8009658 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b7a:	f001 fb19 	bl	80021b0 <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3770      	adds	r7, #112	; 0x70
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	58024800 	.word	0x58024800

08000b8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b098      	sub	sp, #96	; 0x60
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
 8000bae:	615a      	str	r2, [r3, #20]
 8000bb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2234      	movs	r2, #52	; 0x34
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f00e fa31 	bl	800f020 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bbe:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <MX_TIM1_Init+0x118>)
 8000bc0:	4a39      	ldr	r2, [pc, #228]	; (8000ca8 <MX_TIM1_Init+0x11c>)
 8000bc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bc4:	4b37      	ldr	r3, [pc, #220]	; (8000ca4 <MX_TIM1_Init+0x118>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <MX_TIM1_Init+0x118>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000bd0:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <MX_TIM1_Init+0x118>)
 8000bd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <MX_TIM1_Init+0x118>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bde:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <MX_TIM1_Init+0x118>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <MX_TIM1_Init+0x118>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bea:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <MX_TIM1_Init+0x118>)
 8000bec:	f00a fcba 	bl	800b564 <HAL_TIM_PWM_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000bf6:	f001 fadb 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4825      	ldr	r0, [pc, #148]	; (8000ca4 <MX_TIM1_Init+0x118>)
 8000c0e:	f00b ff3f 	bl	800ca90 <HAL_TIMEx_MasterConfigSynchronization>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c18:	f001 faca 	bl	80021b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c1c:	2360      	movs	r3, #96	; 0x60
 8000c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c24:	2300      	movs	r3, #0
 8000c26:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <MX_TIM1_Init+0x118>)
 8000c42:	f00b f8b1 	bl	800bda8 <HAL_TIM_PWM_ConfigChannel>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c4c:	f001 fab0 	bl	80021b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <MX_TIM1_Init+0x118>)
 8000c86:	f00b ff9f 	bl	800cbc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000c90:	f001 fa8e 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <MX_TIM1_Init+0x118>)
 8000c96:	f004 fc7d 	bl	8005594 <HAL_TIM_MspPostInit>

}
 8000c9a:	bf00      	nop
 8000c9c:	3760      	adds	r7, #96	; 0x60
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	24000094 	.word	0x24000094
 8000ca8:	40010000 	.word	0x40010000

08000cac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000ccc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000cd4:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000cd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000ce2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ce6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf4:	4813      	ldr	r0, [pc, #76]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000cf6:	f00a fb57 	bl	800b3a8 <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000d00:	f001 fa56 	bl	80021b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000d12:	f00b f95d 	bl	800bfd0 <HAL_TIM_ConfigClockSource>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000d1c:	f001 fa48 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_TIM2_Init+0x98>)
 8000d2e:	f00b feaf 	bl	800ca90 <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d38:	f001 fa3a 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	3720      	adds	r7, #32
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	240000e0 	.word	0x240000e0

08000d48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	2224      	movs	r2, #36	; 0x24
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f00e f962 	bl	800f020 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_TIM3_Init+0xa4>)
 8000d68:	4a21      	ldr	r2, [pc, #132]	; (8000df0 <MX_TIM3_Init+0xa8>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <MX_TIM3_Init+0xa4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <MX_TIM3_Init+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d78:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <MX_TIM3_Init+0xa4>)
 8000d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_TIM3_Init+0xa4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <MX_TIM3_Init+0xa4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d94:	2301      	movs	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000da4:	2301      	movs	r3, #1
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	4619      	mov	r1, r3
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <MX_TIM3_Init+0xa4>)
 8000db8:	f00a fda2 	bl	800b900 <HAL_TIM_Encoder_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000dc2:	f001 f9f5 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <MX_TIM3_Init+0xa4>)
 8000dd4:	f00b fe5c 	bl	800ca90 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000dde:	f001 f9e7 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3730      	adds	r7, #48	; 0x30
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2400012c 	.word	0x2400012c
 8000df0:	40000400 	.word	0x40000400

08000df4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e06:	463b      	mov	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	615a      	str	r2, [r3, #20]
 8000e16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e18:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <MX_TIM4_Init+0xac>)
 8000e1a:	4a22      	ldr	r2, [pc, #136]	; (8000ea4 <MX_TIM4_Init+0xb0>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8000e1e:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <MX_TIM4_Init+0xac>)
 8000e20:	2202      	movs	r2, #2
 8000e22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <MX_TIM4_Init+0xac>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_TIM4_Init+0xac>)
 8000e2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_TIM4_Init+0xac>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <MX_TIM4_Init+0xac>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e3e:	4818      	ldr	r0, [pc, #96]	; (8000ea0 <MX_TIM4_Init+0xac>)
 8000e40:	f00a fb90 	bl	800b564 <HAL_TIM_PWM_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000e4a:	f001 f9b1 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <MX_TIM4_Init+0xac>)
 8000e5e:	f00b fe17 	bl	800ca90 <HAL_TIMEx_MasterConfigSynchronization>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000e68:	f001 f9a2 	bl	80021b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6c:	2360      	movs	r3, #96	; 0x60
 8000e6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <MX_TIM4_Init+0xac>)
 8000e84:	f00a ff90 	bl	800bda8 <HAL_TIM_PWM_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000e8e:	f001 f98f 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e92:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <MX_TIM4_Init+0xac>)
 8000e94:	f004 fb7e 	bl	8005594 <HAL_TIM_MspPostInit>

}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	24000178 	.word	0x24000178
 8000ea4:	40000800 	.word	0x40000800

08000ea8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ecc:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <MX_TIM5_Init+0xac>)
 8000ece:	4a22      	ldr	r2, [pc, #136]	; (8000f58 <MX_TIM5_Init+0xb0>)
 8000ed0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2;
 8000ed2:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <MX_TIM5_Init+0xac>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <MX_TIM5_Init+0xac>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <MX_TIM5_Init+0xac>)
 8000ee0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_TIM5_Init+0xac>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_TIM5_Init+0xac>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <MX_TIM5_Init+0xac>)
 8000ef4:	f00a fb36 	bl	800b564 <HAL_TIM_PWM_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8000efe:	f001 f957 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4810      	ldr	r0, [pc, #64]	; (8000f54 <MX_TIM5_Init+0xac>)
 8000f12:	f00b fdbd 	bl	800ca90 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8000f1c:	f001 f948 	bl	80021b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f20:	2360      	movs	r3, #96	; 0x60
 8000f22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <MX_TIM5_Init+0xac>)
 8000f38:	f00a ff36 	bl	800bda8 <HAL_TIM_PWM_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000f42:	f001 f935 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000f46:	4803      	ldr	r0, [pc, #12]	; (8000f54 <MX_TIM5_Init+0xac>)
 8000f48:	f004 fb24 	bl	8005594 <HAL_TIM_MspPostInit>

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	240001c4 	.word	0x240001c4
 8000f58:	40000c00 	.word	0x40000c00

08000f5c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_TIM6_Init+0x78>)
 8000f6e:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <MX_TIM6_Init+0x7c>)
 8000f70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <MX_TIM6_Init+0x78>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_TIM6_Init+0x78>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <MX_TIM6_Init+0x78>)
 8000f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f84:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_TIM6_Init+0x78>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f8c:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <MX_TIM6_Init+0x78>)
 8000f8e:	f00a fa0b 	bl	800b3a8 <HAL_TIM_Base_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f98:	f001 f90a 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <MX_TIM6_Init+0x78>)
 8000fa0:	f00a fc54 	bl	800b84c <HAL_TIM_OnePulse_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000faa:	f001 f901 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <MX_TIM6_Init+0x78>)
 8000fbc:	f00b fd68 	bl	800ca90 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000fc6:	f001 f8f3 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	24000210 	.word	0x24000210
 8000fd8:	40001000 	.word	0x40001000

08000fdc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_TIM7_Init+0x64>)
 8000fee:	4a15      	ldr	r2, [pc, #84]	; (8001044 <MX_TIM7_Init+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <MX_TIM7_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_TIM7_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_TIM7_Init+0x64>)
 8001000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001004:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_TIM7_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <MX_TIM7_Init+0x64>)
 800100e:	f00a f9cb 	bl	800b3a8 <HAL_TIM_Base_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001018:	f001 f8ca 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_TIM7_Init+0x64>)
 800102a:	f00b fd31 	bl	800ca90 <HAL_TIMEx_MasterConfigSynchronization>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001034:	f001 f8bc 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2400025c 	.word	0x2400025c
 8001044:	40001400 	.word	0x40001400

08001048 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2224      	movs	r2, #36	; 0x24
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f00d ffe2 	bl	800f020 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105c:	463b      	mov	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001066:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <MX_TIM8_Init+0xac>)
 8001068:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <MX_TIM8_Init+0xb0>)
 800106a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <MX_TIM8_Init+0xac>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <MX_TIM8_Init+0xac>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_TIM8_Init+0xac>)
 800107a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <MX_TIM8_Init+0xac>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_TIM8_Init+0xac>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_TIM8_Init+0xac>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001092:	2303      	movs	r3, #3
 8001094:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800109a:	2301      	movs	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010aa:	2301      	movs	r3, #1
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4619      	mov	r1, r3
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_TIM8_Init+0xac>)
 80010be:	f00a fc1f 	bl	800b900 <HAL_TIM_Encoder_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80010c8:	f001 f872 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_TIM8_Init+0xac>)
 80010de:	f00b fcd7 	bl	800ca90 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80010e8:	f001 f862 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3730      	adds	r7, #48	; 0x30
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	240002a8 	.word	0x240002a8
 80010f8:	40010400 	.word	0x40010400

080010fc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b098      	sub	sp, #96	; 0x60
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001102:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800110e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]
 800111e:	615a      	str	r2, [r3, #20]
 8001120:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2234      	movs	r2, #52	; 0x34
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f00d ff79 	bl	800f020 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800112e:	4b34      	ldr	r3, [pc, #208]	; (8001200 <MX_TIM15_Init+0x104>)
 8001130:	4a34      	ldr	r2, [pc, #208]	; (8001204 <MX_TIM15_Init+0x108>)
 8001132:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2;
 8001134:	4b32      	ldr	r3, [pc, #200]	; (8001200 <MX_TIM15_Init+0x104>)
 8001136:	2202      	movs	r2, #2
 8001138:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b31      	ldr	r3, [pc, #196]	; (8001200 <MX_TIM15_Init+0x104>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001140:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <MX_TIM15_Init+0x104>)
 8001142:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001146:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <MX_TIM15_Init+0x104>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <MX_TIM15_Init+0x104>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001154:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <MX_TIM15_Init+0x104>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800115a:	4829      	ldr	r0, [pc, #164]	; (8001200 <MX_TIM15_Init+0x104>)
 800115c:	f00a fa02 	bl	800b564 <HAL_TIM_PWM_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001166:	f001 f823 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001172:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001176:	4619      	mov	r1, r3
 8001178:	4821      	ldr	r0, [pc, #132]	; (8001200 <MX_TIM15_Init+0x104>)
 800117a:	f00b fc89 	bl	800ca90 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001184:	f001 f814 	bl	80021b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001188:	2360      	movs	r3, #96	; 0x60
 800118a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001190:	2300      	movs	r3, #0
 8001192:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001194:	2300      	movs	r3, #0
 8001196:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011a0:	2300      	movs	r3, #0
 80011a2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011a8:	2200      	movs	r2, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	4814      	ldr	r0, [pc, #80]	; (8001200 <MX_TIM15_Init+0x104>)
 80011ae:	f00a fdfb 	bl	800bda8 <HAL_TIM_PWM_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80011b8:	f000 fffa 	bl	80021b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4807      	ldr	r0, [pc, #28]	; (8001200 <MX_TIM15_Init+0x104>)
 80011e4:	f00b fcf0 	bl	800cbc8 <HAL_TIMEx_ConfigBreakDeadTime>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80011ee:	f000 ffdf 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80011f2:	4803      	ldr	r0, [pc, #12]	; (8001200 <MX_TIM15_Init+0x104>)
 80011f4:	f004 f9ce 	bl	8005594 <HAL_TIM_MspPostInit>

}
 80011f8:	bf00      	nop
 80011fa:	3760      	adds	r7, #96	; 0x60
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	240002f4 	.word	0x240002f4
 8001204:	40014000 	.word	0x40014000

08001208 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	; 0x30
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	2224      	movs	r2, #36	; 0x24
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f00d ff02 	bl	800f020 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	463b      	mov	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_TIM23_Init+0xa4>)
 8001228:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <MX_TIM23_Init+0xa8>)
 800122a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_TIM23_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_TIM23_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 65535;
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_TIM23_Init+0xa4>)
 800123a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800123e:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_TIM23_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_TIM23_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800124c:	2303      	movs	r3, #3
 800124e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001254:	2301      	movs	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001264:	2301      	movs	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_TIM23_Init+0xa4>)
 8001278:	f00a fb42 	bl	800b900 <HAL_TIM_Encoder_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8001282:	f000 ff95 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800128e:	463b      	mov	r3, r7
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <MX_TIM23_Init+0xa4>)
 8001294:	f00b fbfc 	bl	800ca90 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 800129e:	f000 ff87 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3730      	adds	r7, #48	; 0x30
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	24000340 	.word	0x24000340
 80012b0:	4000e000 	.word	0x4000e000

080012b4 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2224      	movs	r2, #36	; 0x24
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f00d feac 	bl	800f020 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_TIM24_Init+0xa4>)
 80012d4:	4a21      	ldr	r2, [pc, #132]	; (800135c <MX_TIM24_Init+0xa8>)
 80012d6:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <MX_TIM24_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <MX_TIM24_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 65535;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_TIM24_Init+0xa4>)
 80012e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ea:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_TIM24_Init+0xa4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_TIM24_Init+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012f8:	2303      	movs	r3, #3
 80012fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001300:	2301      	movs	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001310:	2301      	movs	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_TIM24_Init+0xa4>)
 8001324:	f00a faec 	bl	800b900 <HAL_TIM_Encoder_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 800132e:	f000 ff3f 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_TIM24_Init+0xa4>)
 8001340:	f00b fba6 	bl	800ca90 <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 800134a:	f000 ff31 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3730      	adds	r7, #48	; 0x30
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2400038c 	.word	0x2400038c
 800135c:	4000e400 	.word	0x4000e400

08001360 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 8001366:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <MX_USART3_UART_Init+0x94>)
 8001368:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013a8:	4811      	ldr	r0, [pc, #68]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 80013aa:	f00b fccb 	bl	800cd44 <HAL_UART_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013b4:	f000 fefc 	bl	80021b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b8:	2100      	movs	r1, #0
 80013ba:	480d      	ldr	r0, [pc, #52]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 80013bc:	f00d fd12 	bl	800ede4 <HAL_UARTEx_SetTxFifoThreshold>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013c6:	f000 fef3 	bl	80021b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ca:	2100      	movs	r1, #0
 80013cc:	4808      	ldr	r0, [pc, #32]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 80013ce:	f00d fd47 	bl	800ee60 <HAL_UARTEx_SetRxFifoThreshold>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013d8:	f000 feea 	bl	80021b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_USART3_UART_Init+0x90>)
 80013de:	f00d fcc8 	bl	800ed72 <HAL_UARTEx_DisableFifoMode>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013e8:	f000 fee2 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	240003d8 	.word	0x240003d8
 80013f4:	40004800 	.word	0x40004800

080013f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_DMA_Init+0x4c>)
 8001400:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001404:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <MX_DMA_Init+0x4c>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <MX_DMA_Init+0x4c>)
 8001410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	2100      	movs	r1, #0
 8001420:	200b      	movs	r0, #11
 8001422:	f004 fd00 	bl	8005e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001426:	200b      	movs	r0, #11
 8001428:	f004 fd17 	bl	8005e5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	200c      	movs	r0, #12
 8001432:	f004 fcf8 	bl	8005e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001436:	200c      	movs	r0, #12
 8001438:	f004 fd0f 	bl	8005e5a <HAL_NVIC_EnableIRQ>

}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	58024400 	.word	0x58024400

08001448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800145e:	4ba8      	ldr	r3, [pc, #672]	; (8001700 <MX_GPIO_Init+0x2b8>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001464:	4aa6      	ldr	r2, [pc, #664]	; (8001700 <MX_GPIO_Init+0x2b8>)
 8001466:	f043 0310 	orr.w	r3, r3, #16
 800146a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146e:	4ba4      	ldr	r3, [pc, #656]	; (8001700 <MX_GPIO_Init+0x2b8>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001474:	f003 0310 	and.w	r3, r3, #16
 8001478:	623b      	str	r3, [r7, #32]
 800147a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147c:	4ba0      	ldr	r3, [pc, #640]	; (8001700 <MX_GPIO_Init+0x2b8>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	4a9f      	ldr	r2, [pc, #636]	; (8001700 <MX_GPIO_Init+0x2b8>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148c:	4b9c      	ldr	r3, [pc, #624]	; (8001700 <MX_GPIO_Init+0x2b8>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	4b99      	ldr	r3, [pc, #612]	; (8001700 <MX_GPIO_Init+0x2b8>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	4a97      	ldr	r2, [pc, #604]	; (8001700 <MX_GPIO_Init+0x2b8>)
 80014a2:	f043 0320 	orr.w	r3, r3, #32
 80014a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014aa:	4b95      	ldr	r3, [pc, #596]	; (8001700 <MX_GPIO_Init+0x2b8>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b8:	4b91      	ldr	r3, [pc, #580]	; (8001700 <MX_GPIO_Init+0x2b8>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014be:	4a90      	ldr	r2, [pc, #576]	; (8001700 <MX_GPIO_Init+0x2b8>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c8:	4b8d      	ldr	r3, [pc, #564]	; (8001700 <MX_GPIO_Init+0x2b8>)
 80014ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b8a      	ldr	r3, [pc, #552]	; (8001700 <MX_GPIO_Init+0x2b8>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014dc:	4a88      	ldr	r2, [pc, #544]	; (8001700 <MX_GPIO_Init+0x2b8>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e6:	4b86      	ldr	r3, [pc, #536]	; (8001700 <MX_GPIO_Init+0x2b8>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4b82      	ldr	r3, [pc, #520]	; (8001700 <MX_GPIO_Init+0x2b8>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fa:	4a81      	ldr	r2, [pc, #516]	; (8001700 <MX_GPIO_Init+0x2b8>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001504:	4b7e      	ldr	r3, [pc, #504]	; (8001700 <MX_GPIO_Init+0x2b8>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001512:	4b7b      	ldr	r3, [pc, #492]	; (8001700 <MX_GPIO_Init+0x2b8>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001518:	4a79      	ldr	r2, [pc, #484]	; (8001700 <MX_GPIO_Init+0x2b8>)
 800151a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001522:	4b77      	ldr	r3, [pc, #476]	; (8001700 <MX_GPIO_Init+0x2b8>)
 8001524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001530:	4b73      	ldr	r3, [pc, #460]	; (8001700 <MX_GPIO_Init+0x2b8>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001536:	4a72      	ldr	r2, [pc, #456]	; (8001700 <MX_GPIO_Init+0x2b8>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001540:	4b6f      	ldr	r3, [pc, #444]	; (8001700 <MX_GPIO_Init+0x2b8>)
 8001542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f240 4104 	movw	r1, #1028	; 0x404
 8001554:	486b      	ldr	r0, [pc, #428]	; (8001704 <MX_GPIO_Init+0x2bc>)
 8001556:	f007 fc7d 	bl	8008e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f244 0105 	movw	r1, #16389	; 0x4005
 8001560:	4869      	ldr	r0, [pc, #420]	; (8001708 <MX_GPIO_Init+0x2c0>)
 8001562:	f007 fc77 	bl	8008e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2103      	movs	r1, #3
 800156a:	4868      	ldr	r0, [pc, #416]	; (800170c <MX_GPIO_Init+0x2c4>)
 800156c:	f007 fc72 	bl	8008e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f241 4102 	movw	r1, #5122	; 0x1402
 8001576:	4866      	ldr	r0, [pc, #408]	; (8001710 <MX_GPIO_Init+0x2c8>)
 8001578:	f007 fc6c 	bl	8008e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f240 4103 	movw	r1, #1027	; 0x403
 8001582:	4864      	ldr	r0, [pc, #400]	; (8001714 <MX_GPIO_Init+0x2cc>)
 8001584:	f007 fc66 	bl	8008e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	4619      	mov	r1, r3
 800159c:	485e      	ldr	r0, [pc, #376]	; (8001718 <MX_GPIO_Init+0x2d0>)
 800159e:	f007 fab1 	bl	8008b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80015a2:	f240 4304 	movw	r3, #1028	; 0x404
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	4852      	ldr	r0, [pc, #328]	; (8001704 <MX_GPIO_Init+0x2bc>)
 80015bc:	f007 faa2 	bl	8008b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015c0:	2332      	movs	r3, #50	; 0x32
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015d0:	230b      	movs	r3, #11
 80015d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	484f      	ldr	r0, [pc, #316]	; (8001718 <MX_GPIO_Init+0x2d0>)
 80015dc:	f007 fa92 	bl	8008b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015e0:	2386      	movs	r3, #134	; 0x86
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015f0:	230b      	movs	r3, #11
 80015f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	4619      	mov	r1, r3
 80015fa:	4848      	ldr	r0, [pc, #288]	; (800171c <MX_GPIO_Init+0x2d4>)
 80015fc:	f007 fa82 	bl	8008b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PB2 LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin;
 8001600:	f244 0305 	movw	r3, #16389	; 0x4005
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	483b      	ldr	r0, [pc, #236]	; (8001708 <MX_GPIO_Init+0x2c0>)
 800161a:	f007 fa73 	bl	8008b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800161e:	2303      	movs	r3, #3
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800162e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001632:	4619      	mov	r1, r3
 8001634:	4835      	ldr	r0, [pc, #212]	; (800170c <MX_GPIO_Init+0x2c4>)
 8001636:	f007 fa65 	bl	8008b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin;
 800163a:	f241 4302 	movw	r3, #5122	; 0x1402
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	482f      	ldr	r0, [pc, #188]	; (8001710 <MX_GPIO_Init+0x2c8>)
 8001654:	f007 fa56 	bl	8008b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800166a:	230b      	movs	r3, #11
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001672:	4619      	mov	r1, r3
 8001674:	4824      	ldr	r0, [pc, #144]	; (8001708 <MX_GPIO_Init+0x2c0>)
 8001676:	f007 fa45 	bl	8008b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD0 PD1 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1;
 800167a:	f240 4303 	movw	r3, #1027	; 0x403
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001690:	4619      	mov	r1, r3
 8001692:	4820      	ldr	r0, [pc, #128]	; (8001714 <MX_GPIO_Init+0x2cc>)
 8001694:	f007 fa36 	bl	8008b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800169c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	4817      	ldr	r0, [pc, #92]	; (800170c <MX_GPIO_Init+0x2c4>)
 80016ae:	f007 fa29 	bl	8008b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80016b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80016c4:	230a      	movs	r3, #10
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	4813      	ldr	r0, [pc, #76]	; (800171c <MX_GPIO_Init+0x2d4>)
 80016d0:	f007 fa18 	bl	8008b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80016d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e6:	230b      	movs	r3, #11
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <MX_GPIO_Init+0x2c4>)
 80016f2:	f007 fa07 	bl	8008b04 <HAL_GPIO_Init>

}
 80016f6:	bf00      	nop
 80016f8:	3738      	adds	r7, #56	; 0x38
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	58024400 	.word	0x58024400
 8001704:	58021400 	.word	0x58021400
 8001708:	58020400 	.word	0x58020400
 800170c:	58021800 	.word	0x58021800
 8001710:	58021000 	.word	0x58021000
 8001714:	58020c00 	.word	0x58020c00
 8001718:	58020800 	.word	0x58020800
 800171c:	58020000 	.word	0x58020000

08001720 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
}
}
PID ?�度*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001730:	f040 84f5 	bne.w	800211e <HAL_TIM_PeriodElapsedCallback+0x9fe>

		// rad/s to rpm
		SP2 = 1/r * (get_vel_x - get_vel_y - (lx + ly) * get_vel_z) / wheel_trans2; // fl
 8001734:	4bc4      	ldr	r3, [pc, #784]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001736:	ed93 7b00 	vldr	d7, [r3]
 800173a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800173e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001742:	4bc2      	ldr	r3, [pc, #776]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001744:	ed93 5b00 	vldr	d5, [r3]
 8001748:	4bc1      	ldr	r3, [pc, #772]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800174a:	ed93 7b00 	vldr	d7, [r3]
 800174e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001752:	4bc0      	ldr	r3, [pc, #768]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001754:	ed93 4b00 	vldr	d4, [r3]
 8001758:	4bbf      	ldr	r3, [pc, #764]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800175a:	ed93 7b00 	vldr	d7, [r3]
 800175e:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001762:	4bbe      	ldr	r3, [pc, #760]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001764:	ed93 7b00 	vldr	d7, [r3]
 8001768:	ee24 7b07 	vmul.f64	d7, d4, d7
 800176c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001770:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001774:	4bba      	ldr	r3, [pc, #744]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001776:	ed93 6b00 	vldr	d6, [r3]
 800177a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800177e:	4bb9      	ldr	r3, [pc, #740]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001780:	ed83 7b00 	vstr	d7, [r3]
		SP1 = 1/r * (get_vel_x + get_vel_y + (lx + ly) * get_vel_z) / wheel_trans1; // fr
 8001784:	4bb0      	ldr	r3, [pc, #704]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001786:	ed93 7b00 	vldr	d7, [r3]
 800178a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800178e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001792:	4bae      	ldr	r3, [pc, #696]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001794:	ed93 5b00 	vldr	d5, [r3]
 8001798:	4bad      	ldr	r3, [pc, #692]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800179a:	ed93 7b00 	vldr	d7, [r3]
 800179e:	ee35 5b07 	vadd.f64	d5, d5, d7
 80017a2:	4bac      	ldr	r3, [pc, #688]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80017a4:	ed93 4b00 	vldr	d4, [r3]
 80017a8:	4bab      	ldr	r3, [pc, #684]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80017aa:	ed93 7b00 	vldr	d7, [r3]
 80017ae:	ee34 4b07 	vadd.f64	d4, d4, d7
 80017b2:	4baa      	ldr	r3, [pc, #680]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80017b4:	ed93 7b00 	vldr	d7, [r3]
 80017b8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80017bc:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017c0:	ee26 5b07 	vmul.f64	d5, d6, d7
 80017c4:	4ba8      	ldr	r3, [pc, #672]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80017c6:	ed93 6b00 	vldr	d6, [r3]
 80017ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017ce:	4ba7      	ldr	r3, [pc, #668]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017d0:	ed83 7b00 	vstr	d7, [r3]
		SP4 = 1/r * (get_vel_x + get_vel_y - (lx + ly) * get_vel_z) / wheel_trans4; // rl
 80017d4:	4b9c      	ldr	r3, [pc, #624]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80017d6:	ed93 7b00 	vldr	d7, [r3]
 80017da:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80017de:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80017e2:	4b9a      	ldr	r3, [pc, #616]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80017e4:	ed93 5b00 	vldr	d5, [r3]
 80017e8:	4b99      	ldr	r3, [pc, #612]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80017ea:	ed93 7b00 	vldr	d7, [r3]
 80017ee:	ee35 5b07 	vadd.f64	d5, d5, d7
 80017f2:	4b98      	ldr	r3, [pc, #608]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80017f4:	ed93 4b00 	vldr	d4, [r3]
 80017f8:	4b97      	ldr	r3, [pc, #604]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80017fa:	ed93 7b00 	vldr	d7, [r3]
 80017fe:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001802:	4b96      	ldr	r3, [pc, #600]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001804:	ed93 7b00 	vldr	d7, [r3]
 8001808:	ee24 7b07 	vmul.f64	d7, d4, d7
 800180c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001810:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001814:	4b96      	ldr	r3, [pc, #600]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001816:	ed93 6b00 	vldr	d6, [r3]
 800181a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800181e:	4b95      	ldr	r3, [pc, #596]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001820:	ed83 7b00 	vstr	d7, [r3]
		SP3 = 1/r * (get_vel_x - get_vel_y + (lx + ly) * get_vel_z) / wheel_trans3; // rr
 8001824:	4b88      	ldr	r3, [pc, #544]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001826:	ed93 7b00 	vldr	d7, [r3]
 800182a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800182e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001832:	4b86      	ldr	r3, [pc, #536]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001834:	ed93 5b00 	vldr	d5, [r3]
 8001838:	4b85      	ldr	r3, [pc, #532]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800183a:	ed93 7b00 	vldr	d7, [r3]
 800183e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001842:	4b84      	ldr	r3, [pc, #528]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001844:	ed93 4b00 	vldr	d4, [r3]
 8001848:	4b83      	ldr	r3, [pc, #524]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800184a:	ed93 7b00 	vldr	d7, [r3]
 800184e:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001852:	4b82      	ldr	r3, [pc, #520]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001854:	ed93 7b00 	vldr	d7, [r3]
 8001858:	ee24 7b07 	vmul.f64	d7, d4, d7
 800185c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001860:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001864:	4b84      	ldr	r3, [pc, #528]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001866:	ed93 6b00 	vldr	d6, [r3]
 800186a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800186e:	4b83      	ldr	r3, [pc, #524]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001870:	ed83 7b00 	vstr	d7, [r3]
		// 2 -> front left
		// 3 -> back(rear) right
		// 4 -> back(rear) left


		enc1 = __HAL_TIM_GetCounter(&htim3) * (-1);
 8001874:	4b82      	ldr	r3, [pc, #520]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	b29b      	uxth	r3, r3
 800187c:	425b      	negs	r3, r3
 800187e:	b29b      	uxth	r3, r3
 8001880:	b21a      	sxth	r2, r3
 8001882:	4b80      	ldr	r3, [pc, #512]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001884:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim8);
 8001886:	4b80      	ldr	r3, [pc, #512]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	b21a      	sxth	r2, r3
 800188e:	4b7f      	ldr	r3, [pc, #508]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001890:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim23);
 8001892:	4b7f      	ldr	r3, [pc, #508]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	b21a      	sxth	r2, r3
 800189a:	4b7e      	ldr	r3, [pc, #504]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800189c:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim24);
 800189e:	4b7e      	ldr	r3, [pc, #504]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	b21a      	sxth	r2, r3
 80018a6:	4b7d      	ldr	r3, [pc, #500]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018a8:	801a      	strh	r2, [r3, #0]

		n++;
 80018aa:	4b7d      	ldr	r3, [pc, #500]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4a7b      	ldr	r2, [pc, #492]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80018b2:	6013      	str	r3, [r2, #0]

		PV1 = (double) enc1 / (4 * 512 * 27 * 0.001) ;
 80018b4:	4b73      	ldr	r3, [pc, #460]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	ee07 3a90 	vmov	s15, r3
 80018be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018c2:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8001a28 <HAL_TIM_PeriodElapsedCallback+0x308>
 80018c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ca:	4b76      	ldr	r3, [pc, #472]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80018cc:	ed83 7b00 	vstr	d7, [r3]
		PV2 = (double) enc2 / (4 * 512 * 27 * 0.001);
 80018d0:	4b6e      	ldr	r3, [pc, #440]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80018d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018de:	ed9f 5b52 	vldr	d5, [pc, #328]	; 8001a28 <HAL_TIM_PeriodElapsedCallback+0x308>
 80018e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018e6:	4b70      	ldr	r3, [pc, #448]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80018e8:	ed83 7b00 	vstr	d7, [r3]
		PV3 = (double) enc3 / (4 * 500 * 27 * 0.001);
 80018ec:	4b69      	ldr	r3, [pc, #420]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80018ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018fa:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8001a30 <HAL_TIM_PeriodElapsedCallback+0x310>
 80018fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001902:	4b6a      	ldr	r3, [pc, #424]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001904:	ed83 7b00 	vstr	d7, [r3]
		PV4 = (double) enc4 / (4 * 512 * 64 * 0.001);
 8001908:	4b64      	ldr	r3, [pc, #400]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800190a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001916:	ed9f 5b48 	vldr	d5, [pc, #288]	; 8001a38 <HAL_TIM_PeriodElapsedCallback+0x318>
 800191a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800191e:	4b64      	ldr	r3, [pc, #400]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001920:	ed83 7b00 	vstr	d7, [r3]

 		__HAL_TIM_SetCounter(&htim3, 0);
 8001924:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim8, 0);
 800192c:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2200      	movs	r2, #0
 8001932:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim23, 0);
 8001934:	4b56      	ldr	r3, [pc, #344]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2200      	movs	r2, #0
 800193a:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim24, 0);
 800193c:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2200      	movs	r2, #0
 8001942:	625a      	str	r2, [r3, #36]	; 0x24

		error1 = SP1 - PV1;
 8001944:	4b49      	ldr	r3, [pc, #292]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001946:	ed93 6b00 	vldr	d6, [r3]
 800194a:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800194c:	ed93 7b00 	vldr	d7, [r3]
 8001950:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001954:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001956:	ed83 7b00 	vstr	d7, [r3]
		error2 = SP2 - PV2;
 800195a:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800195c:	ed93 6b00 	vldr	d6, [r3]
 8001960:	4b51      	ldr	r3, [pc, #324]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001962:	ed93 7b00 	vldr	d7, [r3]
 8001966:	ee36 7b47 	vsub.f64	d7, d6, d7
 800196a:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800196c:	ed83 7b00 	vstr	d7, [r3]
		error3 = SP3 - PV3;
 8001970:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001972:	ed93 6b00 	vldr	d6, [r3]
 8001976:	4b4d      	ldr	r3, [pc, #308]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001978:	ed93 7b00 	vldr	d7, [r3]
 800197c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001980:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001982:	ed83 7b00 	vstr	d7, [r3]
		error4 = SP4 - PV4;
 8001986:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001988:	ed93 6b00 	vldr	d6, [r3]
 800198c:	4b48      	ldr	r3, [pc, #288]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800198e:	ed93 7b00 	vldr	d7, [r3]
 8001992:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001996:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001998:	ed83 7b00 	vstr	d7, [r3]

		errorsum1 += error1;
 800199c:	4b49      	ldr	r3, [pc, #292]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800199e:	ed93 6b00 	vldr	d6, [r3]
 80019a2:	4b44      	ldr	r3, [pc, #272]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80019a4:	ed93 7b00 	vldr	d7, [r3]
 80019a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019ac:	4b45      	ldr	r3, [pc, #276]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80019ae:	ed83 7b00 	vstr	d7, [r3]
		errorsum2 += error2;
 80019b2:	4b45      	ldr	r3, [pc, #276]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80019b4:	ed93 6b00 	vldr	d6, [r3]
 80019b8:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80019ba:	ed93 7b00 	vldr	d7, [r3]
 80019be:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80019c4:	ed83 7b00 	vstr	d7, [r3]
		errorsum3 += error3;
 80019c8:	4b40      	ldr	r3, [pc, #256]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80019ca:	ed93 6b00 	vldr	d6, [r3]
 80019ce:	4b3b      	ldr	r3, [pc, #236]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80019d0:	ed93 7b00 	vldr	d7, [r3]
 80019d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019d8:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80019da:	ed83 7b00 	vstr	d7, [r3]
		errorsum4 += error4;
 80019de:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80019e0:	ed93 6b00 	vldr	d6, [r3]
 80019e4:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80019e6:	ed93 7b00 	vldr	d7, [r3]
 80019ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019ee:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80019f0:	ed83 7b00 	vstr	d7, [r3]

		ut1 = Kp1 * error1 + Ki1 * errorsum1 * 0.001;
 80019f4:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80019f6:	ed93 6b00 	vldr	d6, [r3]
 80019fa:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80019fc:	ed93 7b00 	vldr	d7, [r3]
 8001a00:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a04:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001a06:	ed93 5b00 	vldr	d5, [r3]
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001a0c:	ed93 7b00 	vldr	d7, [r3]
 8001a10:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001a14:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8001a40 <HAL_TIM_PeriodElapsedCallback+0x320>
 8001a18:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a1c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a20:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001a22:	ed83 7b00 	vstr	d7, [r3]
 8001a26:	e05b      	b.n	8001ae0 <HAL_TIM_PeriodElapsedCallback+0x3c0>
 8001a28:	53f7ced9 	.word	0x53f7ced9
 8001a2c:	404ba5e3 	.word	0x404ba5e3
 8001a30:	00000000 	.word	0x00000000
 8001a34:	404b0000 	.word	0x404b0000
 8001a38:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a3c:	4060624d 	.word	0x4060624d
 8001a40:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a44:	3f50624d 	.word	0x3f50624d
 8001a48:	24000680 	.word	0x24000680
 8001a4c:	24000688 	.word	0x24000688
 8001a50:	24000690 	.word	0x24000690
 8001a54:	24000670 	.word	0x24000670
 8001a58:	24000678 	.word	0x24000678
 8001a5c:	24000698 	.word	0x24000698
 8001a60:	240006c8 	.word	0x240006c8
 8001a64:	24000580 	.word	0x24000580
 8001a68:	240006c0 	.word	0x240006c0
 8001a6c:	24000578 	.word	0x24000578
 8001a70:	240006d8 	.word	0x240006d8
 8001a74:	24000590 	.word	0x24000590
 8001a78:	240006d0 	.word	0x240006d0
 8001a7c:	24000588 	.word	0x24000588
 8001a80:	2400012c 	.word	0x2400012c
 8001a84:	240005b8 	.word	0x240005b8
 8001a88:	240002a8 	.word	0x240002a8
 8001a8c:	240005ba 	.word	0x240005ba
 8001a90:	24000340 	.word	0x24000340
 8001a94:	240005bc 	.word	0x240005bc
 8001a98:	2400038c 	.word	0x2400038c
 8001a9c:	240005be 	.word	0x240005be
 8001aa0:	24000660 	.word	0x24000660
 8001aa4:	24000558 	.word	0x24000558
 8001aa8:	24000560 	.word	0x24000560
 8001aac:	24000568 	.word	0x24000568
 8001ab0:	24000570 	.word	0x24000570
 8001ab4:	24000598 	.word	0x24000598
 8001ab8:	240005a0 	.word	0x240005a0
 8001abc:	240005a8 	.word	0x240005a8
 8001ac0:	240005b0 	.word	0x240005b0
 8001ac4:	24000640 	.word	0x24000640
 8001ac8:	24000648 	.word	0x24000648
 8001acc:	24000650 	.word	0x24000650
 8001ad0:	24000658 	.word	0x24000658
 8001ad4:	240005c0 	.word	0x240005c0
 8001ad8:	240005e0 	.word	0x240005e0
 8001adc:	24000600 	.word	0x24000600
		ut2 = Kp2 * error2 + Ki2 * errorsum2 * 0.001;
 8001ae0:	4bb5      	ldr	r3, [pc, #724]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001ae2:	ed93 6b00 	vldr	d6, [r3]
 8001ae6:	4bb5      	ldr	r3, [pc, #724]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001ae8:	ed93 7b00 	vldr	d7, [r3]
 8001aec:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001af0:	4bb3      	ldr	r3, [pc, #716]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001af2:	ed93 5b00 	vldr	d5, [r3]
 8001af6:	4bb3      	ldr	r3, [pc, #716]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001af8:	ed93 7b00 	vldr	d7, [r3]
 8001afc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b00:	ed9f 5bab 	vldr	d5, [pc, #684]	; 8001db0 <HAL_TIM_PeriodElapsedCallback+0x690>
 8001b04:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001b08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b0c:	4bae      	ldr	r3, [pc, #696]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001b0e:	ed83 7b00 	vstr	d7, [r3]
		ut3 = Kp3 * error3 + Ki3 * errorsum3 * 0.001;
 8001b12:	4bae      	ldr	r3, [pc, #696]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001b14:	ed93 6b00 	vldr	d6, [r3]
 8001b18:	4bad      	ldr	r3, [pc, #692]	; (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001b1a:	ed93 7b00 	vldr	d7, [r3]
 8001b1e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001b22:	4bac      	ldr	r3, [pc, #688]	; (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001b24:	ed93 5b00 	vldr	d5, [r3]
 8001b28:	4bab      	ldr	r3, [pc, #684]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b2a:	ed93 7b00 	vldr	d7, [r3]
 8001b2e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b32:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 8001db0 <HAL_TIM_PeriodElapsedCallback+0x690>
 8001b36:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001b3a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b3e:	4ba7      	ldr	r3, [pc, #668]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001b40:	ed83 7b00 	vstr	d7, [r3]
		ut4 = Kp4 * error4 + Ki4 * errorsum4 * 0.001;
 8001b44:	4ba6      	ldr	r3, [pc, #664]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001b46:	ed93 6b00 	vldr	d6, [r3]
 8001b4a:	4ba6      	ldr	r3, [pc, #664]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001b4c:	ed93 7b00 	vldr	d7, [r3]
 8001b50:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001b54:	4ba4      	ldr	r3, [pc, #656]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001b56:	ed93 5b00 	vldr	d5, [r3]
 8001b5a:	4ba4      	ldr	r3, [pc, #656]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b5c:	ed93 7b00 	vldr	d7, [r3]
 8001b60:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b64:	ed9f 5b92 	vldr	d5, [pc, #584]	; 8001db0 <HAL_TIM_PeriodElapsedCallback+0x690>
 8001b68:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001b6c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b70:	4b9f      	ldr	r3, [pc, #636]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001b72:	ed83 7b00 	vstr	d7, [r3]

		if(ut1 > 1){
 8001b76:	4b9f      	ldr	r3, [pc, #636]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001b78:	ed93 7b00 	vldr	d7, [r3]
 8001b7c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b80:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b88:	dd06      	ble.n	8001b98 <HAL_TIM_PeriodElapsedCallback+0x478>
			ut1 = 1;
 8001b8a:	499a      	ldr	r1, [pc, #616]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4b99      	ldr	r3, [pc, #612]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001b92:	e9c1 2300 	strd	r2, r3, [r1]
 8001b96:	e00f      	b.n	8001bb8 <HAL_TIM_PeriodElapsedCallback+0x498>
		}else if(ut1 < -1){
 8001b98:	4b96      	ldr	r3, [pc, #600]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001b9a:	ed93 7b00 	vldr	d7, [r3]
 8001b9e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001ba2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	d505      	bpl.n	8001bb8 <HAL_TIM_PeriodElapsedCallback+0x498>
			ut1 = -1;
 8001bac:	4991      	ldr	r1, [pc, #580]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	4b92      	ldr	r3, [pc, #584]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001bb4:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut2 > 1){
 8001bb8:	4b83      	ldr	r3, [pc, #524]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001bba:	ed93 7b00 	vldr	d7, [r3]
 8001bbe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001bc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	dd06      	ble.n	8001bda <HAL_TIM_PeriodElapsedCallback+0x4ba>
			ut2 = 1;
 8001bcc:	497e      	ldr	r1, [pc, #504]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	4b89      	ldr	r3, [pc, #548]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001bd4:	e9c1 2300 	strd	r2, r3, [r1]
 8001bd8:	e00f      	b.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x4da>
		}else if(ut2 < -1){
 8001bda:	4b7b      	ldr	r3, [pc, #492]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001bdc:	ed93 7b00 	vldr	d7, [r3]
 8001be0:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001be4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	d505      	bpl.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x4da>
			ut2 = -1;
 8001bee:	4976      	ldr	r1, [pc, #472]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b81      	ldr	r3, [pc, #516]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001bf6:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut3 > 1){
 8001bfa:	4b78      	ldr	r3, [pc, #480]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001bfc:	ed93 7b00 	vldr	d7, [r3]
 8001c00:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0c:	dd06      	ble.n	8001c1c <HAL_TIM_PeriodElapsedCallback+0x4fc>
			ut3 = 1;
 8001c0e:	4973      	ldr	r1, [pc, #460]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b78      	ldr	r3, [pc, #480]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001c16:	e9c1 2300 	strd	r2, r3, [r1]
 8001c1a:	e00f      	b.n	8001c3c <HAL_TIM_PeriodElapsedCallback+0x51c>
		}else if(ut3 < -1){
 8001c1c:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001c1e:	ed93 7b00 	vldr	d7, [r3]
 8001c22:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001c26:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	d505      	bpl.n	8001c3c <HAL_TIM_PeriodElapsedCallback+0x51c>
			ut3 = -1;
 8001c30:	496a      	ldr	r1, [pc, #424]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b71      	ldr	r3, [pc, #452]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c38:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut4 > 1){
 8001c3c:	4b6c      	ldr	r3, [pc, #432]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001c3e:	ed93 7b00 	vldr	d7, [r3]
 8001c42:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	dd06      	ble.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x53e>
			ut4 = 1;
 8001c50:	4967      	ldr	r1, [pc, #412]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4b68      	ldr	r3, [pc, #416]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001c58:	e9c1 2300 	strd	r2, r3, [r1]
 8001c5c:	e00f      	b.n	8001c7e <HAL_TIM_PeriodElapsedCallback+0x55e>
		}else if(ut4 < -1){
 8001c5e:	4b64      	ldr	r3, [pc, #400]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001c60:	ed93 7b00 	vldr	d7, [r3]
 8001c64:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001c68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	d505      	bpl.n	8001c7e <HAL_TIM_PeriodElapsedCallback+0x55e>
			ut4 = -1;
 8001c72:	495f      	ldr	r1, [pc, #380]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	4b60      	ldr	r3, [pc, #384]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c7a:	e9c1 2300 	strd	r2, r3, [r1]
		}


		if(ut1 < 0){
 8001c7e:	4b5d      	ldr	r3, [pc, #372]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001c80:	ed93 7b00 	vldr	d7, [r3]
 8001c84:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	d50b      	bpl.n	8001ca6 <HAL_TIM_PeriodElapsedCallback+0x586>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2104      	movs	r1, #4
 8001c92:	485b      	ldr	r0, [pc, #364]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c94:	f007 f8de 	bl	8008e54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c9e:	4858      	ldr	r0, [pc, #352]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001ca0:	f007 f8d8 	bl	8008e54 <HAL_GPIO_WritePin>
 8001ca4:	e026      	b.n	8001cf4 <HAL_TIM_PeriodElapsedCallback+0x5d4>
		}else if(ut1 > 0){
 8001ca6:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001ca8:	ed93 7b00 	vldr	d7, [r3]
 8001cac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb4:	dd0b      	ble.n	8001cce <HAL_TIM_PeriodElapsedCallback+0x5ae>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2104      	movs	r1, #4
 8001cba:	4851      	ldr	r0, [pc, #324]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001cbc:	f007 f8ca 	bl	8008e54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc6:	484e      	ldr	r0, [pc, #312]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001cc8:	f007 f8c4 	bl	8008e54 <HAL_GPIO_WritePin>
 8001ccc:	e012      	b.n	8001cf4 <HAL_TIM_PeriodElapsedCallback+0x5d4>
		}else if(ut1 == 0){
 8001cce:	4b49      	ldr	r3, [pc, #292]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001cd0:	ed93 7b00 	vldr	d7, [r3]
 8001cd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cdc:	d10a      	bne.n	8001cf4 <HAL_TIM_PeriodElapsedCallback+0x5d4>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	4847      	ldr	r0, [pc, #284]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001ce4:	f007 f8b6 	bl	8008e54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cee:	4844      	ldr	r0, [pc, #272]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001cf0:	f007 f8b0 	bl	8008e54 <HAL_GPIO_WritePin>
		}

		if(ut2 < 0){
 8001cf4:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001cf6:	ed93 7b00 	vldr	d7, [r3]
 8001cfa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d02:	d50a      	bpl.n	8001d1a <HAL_TIM_PeriodElapsedCallback+0x5fa>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2101      	movs	r1, #1
 8001d08:	483e      	ldr	r0, [pc, #248]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001d0a:	f007 f8a3 	bl	8008e54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8001d0e:	2201      	movs	r2, #1
 8001d10:	2102      	movs	r1, #2
 8001d12:	483c      	ldr	r0, [pc, #240]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001d14:	f007 f89e 	bl	8008e54 <HAL_GPIO_WritePin>
 8001d18:	e024      	b.n	8001d64 <HAL_TIM_PeriodElapsedCallback+0x644>
		}else if(ut2 > 0){
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001d1c:	ed93 7b00 	vldr	d7, [r3]
 8001d20:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d28:	dd0a      	ble.n	8001d40 <HAL_TIM_PeriodElapsedCallback+0x620>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	4835      	ldr	r0, [pc, #212]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001d30:	f007 f890 	bl	8008e54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2102      	movs	r1, #2
 8001d38:	4832      	ldr	r0, [pc, #200]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001d3a:	f007 f88b 	bl	8008e54 <HAL_GPIO_WritePin>
 8001d3e:	e011      	b.n	8001d64 <HAL_TIM_PeriodElapsedCallback+0x644>
		}else if(ut2 == 0){
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001d42:	ed93 7b00 	vldr	d7, [r3]
 8001d46:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d109      	bne.n	8001d64 <HAL_TIM_PeriodElapsedCallback+0x644>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2101      	movs	r1, #1
 8001d54:	482b      	ldr	r0, [pc, #172]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001d56:	f007 f87d 	bl	8008e54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	4829      	ldr	r0, [pc, #164]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001d60:	f007 f878 	bl	8008e54 <HAL_GPIO_WritePin>
		}

		if(ut3 > 0){
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001d66:	ed93 7b00 	vldr	d7, [r3]
 8001d6a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	dd0a      	ble.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x66a>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8001d74:	2201      	movs	r2, #1
 8001d76:	2101      	movs	r1, #1
 8001d78:	4823      	ldr	r0, [pc, #140]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001d7a:	f007 f86b 	bl	8008e54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2102      	movs	r1, #2
 8001d82:	4821      	ldr	r0, [pc, #132]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001d84:	f007 f866 	bl	8008e54 <HAL_GPIO_WritePin>
 8001d88:	e052      	b.n	8001e30 <HAL_TIM_PeriodElapsedCallback+0x710>
		}else if(ut3 < 0){
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001d8c:	ed93 7b00 	vldr	d7, [r3]
 8001d90:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d98:	d538      	bpl.n	8001e0c <HAL_TIM_PeriodElapsedCallback+0x6ec>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	481a      	ldr	r0, [pc, #104]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001da0:	f007 f858 	bl	8008e54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8001da4:	2201      	movs	r2, #1
 8001da6:	2102      	movs	r1, #2
 8001da8:	4817      	ldr	r0, [pc, #92]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001daa:	f007 f853 	bl	8008e54 <HAL_GPIO_WritePin>
 8001dae:	e03f      	b.n	8001e30 <HAL_TIM_PeriodElapsedCallback+0x710>
 8001db0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001db4:	3f50624d 	.word	0x3f50624d
 8001db8:	240005c8 	.word	0x240005c8
 8001dbc:	240005a0 	.word	0x240005a0
 8001dc0:	240005e8 	.word	0x240005e8
 8001dc4:	24000648 	.word	0x24000648
 8001dc8:	24000608 	.word	0x24000608
 8001dcc:	240005d0 	.word	0x240005d0
 8001dd0:	240005a8 	.word	0x240005a8
 8001dd4:	240005f0 	.word	0x240005f0
 8001dd8:	24000650 	.word	0x24000650
 8001ddc:	24000610 	.word	0x24000610
 8001de0:	240005d8 	.word	0x240005d8
 8001de4:	240005b0 	.word	0x240005b0
 8001de8:	240005f8 	.word	0x240005f8
 8001dec:	24000658 	.word	0x24000658
 8001df0:	24000618 	.word	0x24000618
 8001df4:	24000600 	.word	0x24000600
 8001df8:	3ff00000 	.word	0x3ff00000
 8001dfc:	bff00000 	.word	0xbff00000
 8001e00:	58021400 	.word	0x58021400
 8001e04:	58020c00 	.word	0x58020c00
 8001e08:	58021800 	.word	0x58021800
		}else if(ut3 == 0){
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x764>)
 8001e0e:	ed93 7b00 	vldr	d7, [r3]
 8001e12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1a:	d109      	bne.n	8001e30 <HAL_TIM_PeriodElapsedCallback+0x710>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2101      	movs	r1, #1
 8001e20:	4819      	ldr	r0, [pc, #100]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x768>)
 8001e22:	f007 f817 	bl	8008e54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2102      	movs	r1, #2
 8001e2a:	4817      	ldr	r0, [pc, #92]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x768>)
 8001e2c:	f007 f812 	bl	8008e54 <HAL_GPIO_WritePin>
		}

		if(ut4 > 0){
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8001e32:	ed93 7b00 	vldr	d7, [r3]
 8001e36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	dd0c      	ble.n	8001e5a <HAL_TIM_PeriodElapsedCallback+0x73a>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e46:	4812      	ldr	r0, [pc, #72]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x770>)
 8001e48:	f007 f804 	bl	8008e54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,  GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e52:	480f      	ldr	r0, [pc, #60]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x770>)
 8001e54:	f006 fffe 	bl	8008e54 <HAL_GPIO_WritePin>
 8001e58:	e030      	b.n	8001ebc <HAL_TIM_PeriodElapsedCallback+0x79c>
		}else if(ut4 < 0){
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8001e5c:	ed93 7b00 	vldr	d7, [r3]
 8001e60:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e68:	d514      	bpl.n	8001e94 <HAL_TIM_PeriodElapsedCallback+0x774>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e70:	4807      	ldr	r0, [pc, #28]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x770>)
 8001e72:	f006 ffef 	bl	8008e54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x770>)
 8001e7e:	f006 ffe9 	bl	8008e54 <HAL_GPIO_WritePin>
 8001e82:	e01b      	b.n	8001ebc <HAL_TIM_PeriodElapsedCallback+0x79c>
 8001e84:	24000610 	.word	0x24000610
 8001e88:	58021800 	.word	0x58021800
 8001e8c:	24000618 	.word	0x24000618
 8001e90:	58021000 	.word	0x58021000
		}else if(ut4 == 0){
 8001e94:	4ba6      	ldr	r3, [pc, #664]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001e96:	ed93 7b00 	vldr	d7, [r3]
 8001e9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	d10b      	bne.n	8001ebc <HAL_TIM_PeriodElapsedCallback+0x79c>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eaa:	48a2      	ldr	r0, [pc, #648]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8001eac:	f006 ffd2 	bl	8008e54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb6:	489f      	ldr	r0, [pc, #636]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8001eb8:	f006 ffcc 	bl	8008e54 <HAL_GPIO_WritePin>
		}


		ut1 = fabs(ut1);
 8001ebc:	4b9e      	ldr	r3, [pc, #632]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8001ebe:	ed93 7b00 	vldr	d7, [r3]
 8001ec2:	eeb0 7bc7 	vabs.f64	d7, d7
 8001ec6:	4b9c      	ldr	r3, [pc, #624]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8001ec8:	ed83 7b00 	vstr	d7, [r3]
		ut2 = fabs(ut2);
 8001ecc:	4b9b      	ldr	r3, [pc, #620]	; (800213c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8001ece:	ed93 7b00 	vldr	d7, [r3]
 8001ed2:	eeb0 7bc7 	vabs.f64	d7, d7
 8001ed6:	4b99      	ldr	r3, [pc, #612]	; (800213c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8001ed8:	ed83 7b00 	vstr	d7, [r3]
		ut3 = fabs(ut3);
 8001edc:	4b98      	ldr	r3, [pc, #608]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 8001ede:	ed93 7b00 	vldr	d7, [r3]
 8001ee2:	eeb0 7bc7 	vabs.f64	d7, d7
 8001ee6:	4b96      	ldr	r3, [pc, #600]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 8001ee8:	ed83 7b00 	vstr	d7, [r3]
		ut4 = fabs(ut4);
 8001eec:	4b90      	ldr	r3, [pc, #576]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001eee:	ed93 7b00 	vldr	d7, [r3]
 8001ef2:	eeb0 7bc7 	vabs.f64	d7, d7
 8001ef6:	4b8e      	ldr	r3, [pc, #568]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001ef8:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ut1 * 1000);
 8001efc:	4b8e      	ldr	r3, [pc, #568]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8001efe:	ed93 7b00 	vldr	d7, [r3]
 8001f02:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8002128 <HAL_TIM_PeriodElapsedCallback+0xa08>
 8001f06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f0a:	4b8e      	ldr	r3, [pc, #568]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0xa24>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f12:	ee17 2a90 	vmov	r2, s15
 8001f16:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ut2 * 1000);
 8001f18:	4b88      	ldr	r3, [pc, #544]	; (800213c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8001f1a:	ed93 7b00 	vldr	d7, [r3]
 8001f1e:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8002128 <HAL_TIM_PeriodElapsedCallback+0xa08>
 8001f22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f26:	4b88      	ldr	r3, [pc, #544]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f2e:	ee17 2a90 	vmov	r2, s15
 8001f32:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ut3 * 1000);
 8001f34:	4b82      	ldr	r3, [pc, #520]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 8001f36:	ed93 7b00 	vldr	d7, [r3]
 8001f3a:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 8002128 <HAL_TIM_PeriodElapsedCallback+0xa08>
 8001f3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f42:	4b82      	ldr	r3, [pc, #520]	; (800214c <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f4a:	ee17 2a90 	vmov	r2, s15
 8001f4e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ut4 * 1000);
 8001f50:	4b77      	ldr	r3, [pc, #476]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001f52:	ed93 7b00 	vldr	d7, [r3]
 8001f56:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8002128 <HAL_TIM_PeriodElapsedCallback+0xa08>
 8001f5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f5e:	4b7c      	ldr	r3, [pc, #496]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f66:	ee17 2a90 	vmov	r2, s15
 8001f6a:	635a      	str	r2, [r3, #52]	; 0x34

		error_last1 = error1;
 8001f6c:	4b79      	ldr	r3, [pc, #484]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	4979      	ldr	r1, [pc, #484]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8001f74:	e9c1 2300 	strd	r2, r3, [r1]
		error_last2 = error2;
 8001f78:	4b78      	ldr	r3, [pc, #480]	; (800215c <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	4978      	ldr	r1, [pc, #480]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8001f80:	e9c1 2300 	strd	r2, r3, [r1]
		error_last3 = error3;
 8001f84:	4b77      	ldr	r3, [pc, #476]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	4977      	ldr	r1, [pc, #476]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8001f8c:	e9c1 2300 	strd	r2, r3, [r1]
		error_last4 = error4;
 8001f90:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	4976      	ldr	r1, [pc, #472]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8001f98:	e9c1 2300 	strd	r2, r3, [r1]

		// rpm_to_radps
		push_vel_x = (PV1*wheel_trans1 + PV2*wheel_trans2 + PV3*wheel_trans3 + PV4*wheel_trans4) * r/4 ;
 8001f9c:	4b75      	ldr	r3, [pc, #468]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8001f9e:	ed93 6b00 	vldr	d6, [r3]
 8001fa2:	4b75      	ldr	r3, [pc, #468]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8001fa4:	ed93 7b00 	vldr	d7, [r3]
 8001fa8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001fac:	4b73      	ldr	r3, [pc, #460]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8001fae:	ed93 5b00 	vldr	d5, [r3]
 8001fb2:	4b73      	ldr	r3, [pc, #460]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8001fb4:	ed93 7b00 	vldr	d7, [r3]
 8001fb8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001fbc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001fc0:	4b70      	ldr	r3, [pc, #448]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 8001fc2:	ed93 5b00 	vldr	d5, [r3]
 8001fc6:	4b70      	ldr	r3, [pc, #448]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8001fc8:	ed93 7b00 	vldr	d7, [r3]
 8001fcc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001fd0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001fd4:	4b6d      	ldr	r3, [pc, #436]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8001fd6:	ed93 5b00 	vldr	d5, [r3]
 8001fda:	4b6d      	ldr	r3, [pc, #436]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8001fdc:	ed93 7b00 	vldr	d7, [r3]
 8001fe0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001fe4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001fe8:	4b6a      	ldr	r3, [pc, #424]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8001fea:	ed93 7b00 	vldr	d7, [r3]
 8001fee:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ff2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001ff6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ffa:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8001ffc:	ed83 7b00 	vstr	d7, [r3]
		push_vel_y = (-PV2*wheel_trans2 + PV1*wheel_trans1 + PV4*wheel_trans4 - PV3*wheel_trans3) * r/4 ;
 8002000:	4b5e      	ldr	r3, [pc, #376]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8002002:	ed93 7b00 	vldr	d7, [r3]
 8002006:	eeb1 6b47 	vneg.f64	d6, d7
 800200a:	4b5d      	ldr	r3, [pc, #372]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 800200c:	ed93 7b00 	vldr	d7, [r3]
 8002010:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002014:	4b57      	ldr	r3, [pc, #348]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8002016:	ed93 5b00 	vldr	d5, [r3]
 800201a:	4b57      	ldr	r3, [pc, #348]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 800201c:	ed93 7b00 	vldr	d7, [r3]
 8002020:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002024:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002028:	4b58      	ldr	r3, [pc, #352]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 800202a:	ed93 5b00 	vldr	d5, [r3]
 800202e:	4b58      	ldr	r3, [pc, #352]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002030:	ed93 7b00 	vldr	d7, [r3]
 8002034:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002038:	ee36 6b07 	vadd.f64	d6, d6, d7
 800203c:	4b51      	ldr	r3, [pc, #324]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 800203e:	ed93 5b00 	vldr	d5, [r3]
 8002042:	4b51      	ldr	r3, [pc, #324]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8002044:	ed93 7b00 	vldr	d7, [r3]
 8002048:	ee25 7b07 	vmul.f64	d7, d5, d7
 800204c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002050:	4b50      	ldr	r3, [pc, #320]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002052:	ed93 7b00 	vldr	d7, [r3]
 8002056:	ee26 6b07 	vmul.f64	d6, d6, d7
 800205a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800205e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002062:	4b4e      	ldr	r3, [pc, #312]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 8002064:	ed83 7b00 	vstr	d7, [r3]
		push_vel_z = (-PV2*wheel_trans2 + PV1*wheel_trans1 - PV4*wheel_trans4 + PV3*wheel_trans3) * r/(4 * (lx + ly) );
 8002068:	4b44      	ldr	r3, [pc, #272]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 800206a:	ed93 7b00 	vldr	d7, [r3]
 800206e:	eeb1 6b47 	vneg.f64	d6, d7
 8002072:	4b43      	ldr	r3, [pc, #268]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8002074:	ed93 7b00 	vldr	d7, [r3]
 8002078:	ee26 6b07 	vmul.f64	d6, d6, d7
 800207c:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800207e:	ed93 5b00 	vldr	d5, [r3]
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8002084:	ed93 7b00 	vldr	d7, [r3]
 8002088:	ee25 7b07 	vmul.f64	d7, d5, d7
 800208c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002090:	4b3e      	ldr	r3, [pc, #248]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8002092:	ed93 5b00 	vldr	d5, [r3]
 8002096:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002098:	ed93 7b00 	vldr	d7, [r3]
 800209c:	ee25 7b07 	vmul.f64	d7, d5, d7
 80020a0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80020a4:	4b37      	ldr	r3, [pc, #220]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 80020a6:	ed93 5b00 	vldr	d5, [r3]
 80020aa:	4b37      	ldr	r3, [pc, #220]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 80020ac:	ed93 7b00 	vldr	d7, [r3]
 80020b0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80020b4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80020b8:	4b36      	ldr	r3, [pc, #216]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 80020ba:	ed93 7b00 	vldr	d7, [r3]
 80020be:	ee26 5b07 	vmul.f64	d5, d6, d7
 80020c2:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 80020c4:	ed93 6b00 	vldr	d6, [r3]
 80020c8:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 80020ca:	ed93 7b00 	vldr	d7, [r3]
 80020ce:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020d2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80020d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020de:	4b32      	ldr	r3, [pc, #200]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 80020e0:	ed83 7b00 	vstr	d7, [r3]

		// 1 -> front right
		// 2 -> front left
		// 3 -> back(rear) right
		// 4 -> back(rear) left
		kkk += 1;
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	4a30      	ldr	r2, [pc, #192]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 80020ec:	6013      	str	r3, [r2, #0]
		if(kkk == 10){
 80020ee:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b0a      	cmp	r3, #10
 80020f4:	d113      	bne.n	800211e <HAL_TIM_PeriodElapsedCallback+0x9fe>
			// change parameter to real velocity
			 publish_vel(push_vel_x, push_vel_y, push_vel_z);
 80020f6:	4b28      	ldr	r3, [pc, #160]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 80020f8:	ed93 7b00 	vldr	d7, [r3]
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 80020fe:	ed93 6b00 	vldr	d6, [r3]
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8002104:	ed93 5b00 	vldr	d5, [r3]
 8002108:	eeb0 2b45 	vmov.f64	d2, d5
 800210c:	eeb0 1b46 	vmov.f64	d1, d6
 8002110:	eeb0 0b47 	vmov.f64	d0, d7
 8002114:	f002 f87a 	bl	800420c <publish_vel>
//			publish_vel(get_vel_x, get_vel_y, get_vel_z);
			kkk = 0;
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	00000000 	.word	0x00000000
 800212c:	408f4000 	.word	0x408f4000
 8002130:	24000618 	.word	0x24000618
 8002134:	58021000 	.word	0x58021000
 8002138:	24000600 	.word	0x24000600
 800213c:	24000608 	.word	0x24000608
 8002140:	24000610 	.word	0x24000610
 8002144:	24000178 	.word	0x24000178
 8002148:	240001c4 	.word	0x240001c4
 800214c:	240002f4 	.word	0x240002f4
 8002150:	24000094 	.word	0x24000094
 8002154:	24000598 	.word	0x24000598
 8002158:	24000620 	.word	0x24000620
 800215c:	240005a0 	.word	0x240005a0
 8002160:	24000628 	.word	0x24000628
 8002164:	240005a8 	.word	0x240005a8
 8002168:	24000630 	.word	0x24000630
 800216c:	240005b0 	.word	0x240005b0
 8002170:	24000638 	.word	0x24000638
 8002174:	24000558 	.word	0x24000558
 8002178:	240006c0 	.word	0x240006c0
 800217c:	24000560 	.word	0x24000560
 8002180:	240006c8 	.word	0x240006c8
 8002184:	24000568 	.word	0x24000568
 8002188:	240006d0 	.word	0x240006d0
 800218c:	24000570 	.word	0x24000570
 8002190:	240006d8 	.word	0x240006d8
 8002194:	24000680 	.word	0x24000680
 8002198:	240006a0 	.word	0x240006a0
 800219c:	240006a8 	.word	0x240006a8
 80021a0:	24000670 	.word	0x24000670
 80021a4:	24000678 	.word	0x24000678
 80021a8:	240006b0 	.word	0x240006b0
 80021ac:	24000664 	.word	0x24000664

080021b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b4:	b672      	cpsid	i
}
 80021b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <Error_Handler+0x8>

080021ba <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <_ZN3ros3MsgC1Ev+0x1c>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	0800f664 	.word	0x0800f664

080021fc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
      data()
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ffe8 	bl	80021dc <_ZN3ros3MsgC1Ev>
 800220c:	4a06      	ldr	r2, [pc, #24]	; (8002228 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3304      	adds	r3, #4
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ffcf 	bl	80021ba <_ZN3ros4TimeC1Ev>
    {
    }
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	0800f64c 	.word	0x0800f64c

0800222c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6859      	ldr	r1, [r3, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	4413      	add	r3, r2
 8002244:	b2ca      	uxtb	r2, r1
 8002246:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	0a19      	lsrs	r1, r3, #8
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3301      	adds	r3, #1
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	4413      	add	r3, r2
 8002256:	b2ca      	uxtb	r2, r1
 8002258:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	0c19      	lsrs	r1, r3, #16
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3302      	adds	r3, #2
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	4413      	add	r3, r2
 8002268:	b2ca      	uxtb	r2, r1
 800226a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	0e19      	lsrs	r1, r3, #24
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	3303      	adds	r3, #3
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	4413      	add	r3, r2
 800227a:	b2ca      	uxtb	r2, r1
 800227c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3304      	adds	r3, #4
 8002282:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6899      	ldr	r1, [r3, #8]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	b2ca      	uxtb	r2, r1
 8002290:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	0a19      	lsrs	r1, r3, #8
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3301      	adds	r3, #1
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	b2ca      	uxtb	r2, r1
 80022a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	0c19      	lsrs	r1, r3, #16
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3302      	adds	r3, #2
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	b2ca      	uxtb	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	0e19      	lsrs	r1, r3, #24
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3303      	adds	r3, #3
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	b2ca      	uxtb	r2, r1
 80022c6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3304      	adds	r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]
      return offset;
 80022ce:	68fb      	ldr	r3, [r7, #12]
    }
 80022d0:	4618      	mov	r0, r3
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3301      	adds	r3, #1
 8002300:	6839      	ldr	r1, [r7, #0]
 8002302:	440b      	add	r3, r1
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3302      	adds	r3, #2
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	440b      	add	r3, r1
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	041b      	lsls	r3, r3, #16
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	3303      	adds	r3, #3
 800232c:	6839      	ldr	r1, [r7, #0]
 800232e:	440b      	add	r3, r1
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	061b      	lsls	r3, r3, #24
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3304      	adds	r3, #4
 800233e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	4413      	add	r3, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3301      	adds	r3, #1
 8002356:	6839      	ldr	r1, [r7, #0]
 8002358:	440b      	add	r3, r1
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3302      	adds	r3, #2
 800236c:	6839      	ldr	r1, [r7, #0]
 800236e:	440b      	add	r3, r1
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	041b      	lsls	r3, r3, #16
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3303      	adds	r3, #3
 8002382:	6839      	ldr	r1, [r7, #0]
 8002384:	440b      	add	r3, r1
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3304      	adds	r3, #4
 8002394:	60fb      	str	r3, [r7, #12]
     return offset;
 8002396:	68fb      	ldr	r3, [r7, #12]
    }
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	0800f34c 	.word	0x0800f34c

080023c0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	0800f35c 	.word	0x0800f35c

080023dc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fef8 	bl	80021dc <_ZN3ros3MsgC1Ev>
 80023ec:	4a0b      	ldr	r2, [pc, #44]	; (800241c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	809a      	strh	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a09      	ldr	r2, [pc, #36]	; (8002420 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a07      	ldr	r2, [pc, #28]	; (8002420 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002402:	60da      	str	r2, [r3, #12]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a06      	ldr	r2, [pc, #24]	; (8002420 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002408:	611a      	str	r2, [r3, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
    {
    }
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	0800f634 	.word	0x0800f634
 8002420:	0800f380 	.word	0x0800f380

08002424 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	8899      	ldrh	r1, [r3, #4]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	4413      	add	r3, r2
 800243c:	b2ca      	uxtb	r2, r1
 800243e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	889b      	ldrh	r3, [r3, #4]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	b299      	uxth	r1, r3
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	3301      	adds	r3, #1
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4413      	add	r3, r2
 8002450:	b2ca      	uxtb	r2, r1
 8002452:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	3302      	adds	r3, #2
 8002458:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fd ff56 	bl	8000310 <strlen>
 8002464:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	4413      	add	r3, r2
 800246c:	69b9      	ldr	r1, [r7, #24]
 800246e:	4618      	mov	r0, r3
 8002470:	f001 fef0 	bl	8004254 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	3304      	adds	r3, #4
 8002478:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	18d0      	adds	r0, r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4619      	mov	r1, r3
 8002488:	f00c fdbc 	bl	800f004 <memcpy>
      offset += length_topic_name;
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4413      	add	r3, r2
 8002492:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4618      	mov	r0, r3
 800249a:	f7fd ff39 	bl	8000310 <strlen>
 800249e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	6979      	ldr	r1, [r7, #20]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f001 fed3 	bl	8004254 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3304      	adds	r3, #4
 80024b2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	18d0      	adds	r0, r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4619      	mov	r1, r3
 80024c2:	f00c fd9f 	bl	800f004 <memcpy>
      offset += length_message_type;
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	4413      	add	r3, r2
 80024cc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fd ff1c 	bl	8000310 <strlen>
 80024d8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	6939      	ldr	r1, [r7, #16]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f001 feb6 	bl	8004254 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	3304      	adds	r3, #4
 80024ec:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	18d0      	adds	r0, r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4619      	mov	r1, r3
 80024fc:	f00c fd82 	bl	800f004 <memcpy>
      offset += length_md5sum;
 8002500:	69fa      	ldr	r2, [r7, #28]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800250e:	68f9      	ldr	r1, [r7, #12]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	4413      	add	r3, r2
 8002516:	b2ca      	uxtb	r2, r1
 8002518:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	0a19      	lsrs	r1, r3, #8
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3301      	adds	r3, #1
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	4413      	add	r3, r2
 8002526:	b2ca      	uxtb	r2, r1
 8002528:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	0c19      	lsrs	r1, r3, #16
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3302      	adds	r3, #2
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	4413      	add	r3, r2
 8002536:	b2ca      	uxtb	r2, r1
 8002538:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	0e19      	lsrs	r1, r3, #24
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3303      	adds	r3, #3
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	4413      	add	r3, r2
 8002546:	b2ca      	uxtb	r2, r1
 8002548:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3304      	adds	r3, #4
 800254e:	61fb      	str	r3, [r7, #28]
      return offset;
 8002550:	69fb      	ldr	r3, [r7, #28]
    }
 8002552:	4618      	mov	r0, r3
 8002554:	3720      	adds	r7, #32
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800255a:	b580      	push	{r7, lr}
 800255c:	b08a      	sub	sp, #40	; 0x28
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	4413      	add	r3, r2
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b29a      	uxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	889b      	ldrh	r3, [r3, #4]
 800257a:	b21a      	sxth	r2, r3
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	3301      	adds	r3, #1
 8002580:	6839      	ldr	r1, [r7, #0]
 8002582:	440b      	add	r3, r1
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	b21b      	sxth	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	b21b      	sxth	r3, r3
 800258e:	b29a      	uxth	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	3302      	adds	r3, #2
 8002598:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	441a      	add	r2, r3
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 fe72 	bl	8004290 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	3304      	adds	r3, #4
 80025b0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	4413      	add	r3, r2
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	429a      	cmp	r2, r3
 80025c0:	d20c      	bcs.n	80025dc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	441a      	add	r2, r3
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	3b01      	subs	r3, #1
 80025cc:	6839      	ldr	r1, [r7, #0]
 80025ce:	440b      	add	r3, r1
 80025d0:	7812      	ldrb	r2, [r2, #0]
 80025d2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	3301      	adds	r3, #1
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
 80025da:	e7ec      	b.n	80025b6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	4413      	add	r3, r2
 80025e2:	3b01      	subs	r3, #1
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	441a      	add	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	4413      	add	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	441a      	add	r2, r3
 8002606:	f107 0310 	add.w	r3, r7, #16
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f001 fe3f 	bl	8004290 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	3304      	adds	r3, #4
 8002616:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	623b      	str	r3, [r7, #32]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4413      	add	r3, r2
 8002622:	6a3a      	ldr	r2, [r7, #32]
 8002624:	429a      	cmp	r2, r3
 8002626:	d20c      	bcs.n	8002642 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	441a      	add	r2, r3
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	3b01      	subs	r3, #1
 8002632:	6839      	ldr	r1, [r7, #0]
 8002634:	440b      	add	r3, r1
 8002636:	7812      	ldrb	r2, [r2, #0]
 8002638:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	3301      	adds	r3, #1
 800263e:	623b      	str	r3, [r7, #32]
 8002640:	e7ec      	b.n	800261c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	3b01      	subs	r3, #1
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	4413      	add	r3, r2
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	3b01      	subs	r3, #1
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	441a      	add	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	441a      	add	r2, r3
 800266c:	f107 030c 	add.w	r3, r7, #12
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f001 fe0c 	bl	8004290 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	3304      	adds	r3, #4
 800267c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4413      	add	r3, r2
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	429a      	cmp	r2, r3
 800268c:	d20c      	bcs.n	80026a8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	441a      	add	r2, r3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	3b01      	subs	r3, #1
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	440b      	add	r3, r1
 800269c:	7812      	ldrb	r2, [r2, #0]
 800269e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	3301      	adds	r3, #1
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e7ec      	b.n	8002682 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4413      	add	r3, r2
 80026ae:	3b01      	subs	r3, #1
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	441a      	add	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4413      	add	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	6839      	ldr	r1, [r7, #0]
 80026d6:	440a      	add	r2, r1
 80026d8:	7812      	ldrb	r2, [r2, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	3301      	adds	r3, #1
 80026e4:	6839      	ldr	r1, [r7, #0]
 80026e6:	440b      	add	r3, r1
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	3302      	adds	r3, #2
 80026f6:	6839      	ldr	r1, [r7, #0]
 80026f8:	440b      	add	r3, r1
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	041b      	lsls	r3, r3, #16
 80026fe:	4313      	orrs	r3, r2
 8002700:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	3303      	adds	r3, #3
 8002708:	6839      	ldr	r1, [r7, #0]
 800270a:	440b      	add	r3, r1
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	061b      	lsls	r3, r3, #24
 8002710:	4313      	orrs	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	3304      	adds	r3, #4
 800271e:	61bb      	str	r3, [r7, #24]
     return offset;
 8002720:	69bb      	ldr	r3, [r7, #24]
    }
 8002722:	4618      	mov	r0, r3
 8002724:	3728      	adds	r7, #40	; 0x28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	0800f384 	.word	0x0800f384

08002748 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	0800f3a0 	.word	0x0800f3a0

08002764 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fd34 	bl	80021dc <_ZN3ros3MsgC1Ev>
 8002774:	4a06      	ldr	r2, [pc, #24]	; (8002790 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	711a      	strb	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a04      	ldr	r2, [pc, #16]	; (8002794 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002784:	609a      	str	r2, [r3, #8]
    {
    }
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	0800f61c 	.word	0x0800f61c
 8002794:	0800f380 	.word	0x0800f380

08002798 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	7912      	ldrb	r2, [r2, #4]
 80027b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3301      	adds	r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fda7 	bl	8000310 <strlen>
 80027c2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	4413      	add	r3, r2
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 fd41 	bl	8004254 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3304      	adds	r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	18d0      	adds	r0, r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	4619      	mov	r1, r3
 80027e6:	f00c fc0d 	bl	800f004 <memcpy>
      offset += length_msg;
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4413      	add	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
      return offset;
 80027f2:	68fb      	ldr	r3, [r7, #12]
    }
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	4413      	add	r3, r2
 8002810:	781a      	ldrb	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	3301      	adds	r3, #1
 800281a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	441a      	add	r2, r3
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f001 fd31 	bl	8004290 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	3304      	adds	r3, #4
 8002832:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4413      	add	r3, r2
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	429a      	cmp	r2, r3
 8002842:	d20c      	bcs.n	800285e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	441a      	add	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3b01      	subs	r3, #1
 800284e:	6839      	ldr	r1, [r7, #0]
 8002850:	440b      	add	r3, r1
 8002852:	7812      	ldrb	r2, [r2, #0]
 8002854:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3301      	adds	r3, #1
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e7ec      	b.n	8002838 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4413      	add	r3, r2
 8002864:	3b01      	subs	r3, #1
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	4413      	add	r3, r2
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	3b01      	subs	r3, #1
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	441a      	add	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
     return offset;
 8002882:	693b      	ldr	r3, [r7, #16]
    }
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	0800f3c4 	.word	0x0800f3c4

080028a8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	0800f3d8 	.word	0x0800f3d8

080028c4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fc84 	bl	80021dc <_ZN3ros3MsgC1Ev>
 80028d4:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	61da      	str	r2, [r3, #28]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	0800f604 	.word	0x0800f604

0800290c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6859      	ldr	r1, [r3, #4]
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	4413      	add	r3, r2
 8002924:	b2ca      	uxtb	r2, r1
 8002926:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	0a19      	lsrs	r1, r3, #8
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	3301      	adds	r3, #1
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	4413      	add	r3, r2
 8002936:	b2ca      	uxtb	r2, r1
 8002938:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	0c19      	lsrs	r1, r3, #16
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	3302      	adds	r3, #2
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	4413      	add	r3, r2
 8002948:	b2ca      	uxtb	r2, r1
 800294a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	0e19      	lsrs	r1, r3, #24
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	3303      	adds	r3, #3
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	4413      	add	r3, r2
 800295a:	b2ca      	uxtb	r2, r1
 800295c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	3304      	adds	r3, #4
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002964:	2300      	movs	r3, #0
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	6a3a      	ldr	r2, [r7, #32]
 800296e:	429a      	cmp	r2, r3
 8002970:	d22b      	bcs.n	80029ca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002980:	6939      	ldr	r1, [r7, #16]
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	4413      	add	r3, r2
 8002988:	b2ca      	uxtb	r2, r1
 800298a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	0a19      	lsrs	r1, r3, #8
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	3301      	adds	r3, #1
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	4413      	add	r3, r2
 8002998:	b2ca      	uxtb	r2, r1
 800299a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	0c19      	lsrs	r1, r3, #16
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	3302      	adds	r3, #2
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	b2ca      	uxtb	r2, r1
 80029aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	0e19      	lsrs	r1, r3, #24
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	3303      	adds	r3, #3
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	b2ca      	uxtb	r2, r1
 80029ba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	3304      	adds	r3, #4
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	3301      	adds	r3, #1
 80029c6:	623b      	str	r3, [r7, #32]
 80029c8:	e7ce      	b.n	8002968 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6919      	ldr	r1, [r3, #16]
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	b2ca      	uxtb	r2, r1
 80029d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	0a19      	lsrs	r1, r3, #8
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	3301      	adds	r3, #1
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	b2ca      	uxtb	r2, r1
 80029e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	0c19      	lsrs	r1, r3, #16
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	3302      	adds	r3, #2
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	4413      	add	r3, r2
 80029f8:	b2ca      	uxtb	r2, r1
 80029fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	0e19      	lsrs	r1, r3, #24
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	3303      	adds	r3, #3
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	4413      	add	r3, r2
 8002a0a:	b2ca      	uxtb	r2, r1
 8002a0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	3304      	adds	r3, #4
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d22b      	bcs.n	8002a7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002a30:	68f9      	ldr	r1, [r7, #12]
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	4413      	add	r3, r2
 8002a38:	b2ca      	uxtb	r2, r1
 8002a3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	0a19      	lsrs	r1, r3, #8
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	3301      	adds	r3, #1
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	4413      	add	r3, r2
 8002a48:	b2ca      	uxtb	r2, r1
 8002a4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	0c19      	lsrs	r1, r3, #16
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	3302      	adds	r3, #2
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	b2ca      	uxtb	r2, r1
 8002a5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	0e19      	lsrs	r1, r3, #24
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	3303      	adds	r3, #3
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	b2ca      	uxtb	r2, r1
 8002a6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	3304      	adds	r3, #4
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	e7ce      	b.n	8002a18 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69d9      	ldr	r1, [r3, #28]
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	b2ca      	uxtb	r2, r1
 8002a86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	0a19      	lsrs	r1, r3, #8
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	3301      	adds	r3, #1
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	4413      	add	r3, r2
 8002a96:	b2ca      	uxtb	r2, r1
 8002a98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	0c19      	lsrs	r1, r3, #16
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	b2ca      	uxtb	r2, r1
 8002aaa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	0e19      	lsrs	r1, r3, #24
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	3303      	adds	r3, #3
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	b2ca      	uxtb	r2, r1
 8002abc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d228      	bcs.n	8002b24 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fc16 	bl	8000310 <strlen>
 8002ae4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	6979      	ldr	r1, [r7, #20]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 fbb0 	bl	8004254 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	3304      	adds	r3, #4
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	18d0      	adds	r0, r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f00c fa78 	bl	800f004 <memcpy>
      offset += length_stringsi;
 8002b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	4413      	add	r3, r2
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	e7d1      	b.n	8002ac8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002b26:	4618      	mov	r0, r3
 8002b28:	3728      	adds	r7, #40	; 0x28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b08e      	sub	sp, #56	; 0x38
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	4413      	add	r3, r2
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b48:	3301      	adds	r3, #1
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	6a3a      	ldr	r2, [r7, #32]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	041b      	lsls	r3, r3, #16
 8002b64:	6a3a      	ldr	r2, [r7, #32]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	3303      	adds	r3, #3
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	4413      	add	r3, r2
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	6a3a      	ldr	r2, [r7, #32]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7e:	3304      	adds	r3, #4
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	6a3a      	ldr	r2, [r7, #32]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d90a      	bls.n	8002ba2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f00c fa4a 	bl	800f030 <realloc>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a3a      	ldr	r2, [r7, #32]
 8002ba6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002ba8:	2300      	movs	r3, #0
 8002baa:	633b      	str	r3, [r7, #48]	; 0x30
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d236      	bcs.n	8002c24 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bbe:	6839      	ldr	r1, [r7, #0]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	7812      	ldrb	r2, [r2, #0]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	3301      	adds	r3, #1
 8002bce:	6839      	ldr	r1, [r7, #0]
 8002bd0:	440b      	add	r3, r1
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bde:	3302      	adds	r3, #2
 8002be0:	6839      	ldr	r1, [r7, #0]
 8002be2:	440b      	add	r3, r1
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	041b      	lsls	r3, r3, #16
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	3303      	adds	r3, #3
 8002bf2:	6839      	ldr	r1, [r7, #0]
 8002bf4:	440b      	add	r3, r1
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	061b      	lsls	r3, r3, #24
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c06:	3304      	adds	r3, #4
 8002c08:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	3208      	adds	r2, #8
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	3301      	adds	r3, #1
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30
 8002c22:	e7c3      	b.n	8002bac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	4413      	add	r3, r2
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c30:	3301      	adds	r3, #1
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c42:	3302      	adds	r3, #2
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	4413      	add	r3, r2
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	041b      	lsls	r3, r3, #16
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c54:	3303      	adds	r3, #3
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	4413      	add	r3, r2
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	3304      	adds	r3, #4
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d90a      	bls.n	8002c8a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699a      	ldr	r2, [r3, #24]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f00c f9d6 	bl	800f030 <realloc>
 8002c84:	4602      	mov	r2, r0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d236      	bcs.n	8002d0c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ca6:	6839      	ldr	r1, [r7, #0]
 8002ca8:	440a      	add	r2, r1
 8002caa:	7812      	ldrb	r2, [r2, #0]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	6839      	ldr	r1, [r7, #0]
 8002cb8:	440b      	add	r3, r1
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	6839      	ldr	r1, [r7, #0]
 8002cca:	440b      	add	r3, r1
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	041b      	lsls	r3, r3, #16
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	3303      	adds	r3, #3
 8002cda:	6839      	ldr	r1, [r7, #0]
 8002cdc:	440b      	add	r3, r1
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cee:	3304      	adds	r3, #4
 8002cf0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	3214      	adds	r2, #20
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	3301      	adds	r3, #1
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d0a:	e7c3      	b.n	8002c94 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	3301      	adds	r3, #1
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3c:	3303      	adds	r3, #3
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	4413      	add	r3, r2
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4e:	3304      	adds	r3, #4
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d90a      	bls.n	8002d72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4619      	mov	r1, r3
 8002d66:	4610      	mov	r0, r2
 8002d68:	f00c f962 	bl	800f030 <realloc>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002d78:	2300      	movs	r3, #0
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d23f      	bcs.n	8002e06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	441a      	add	r2, r3
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 fa7c 	bl	8004290 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
 8002da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4413      	add	r3, r2
 8002da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d20c      	bcs.n	8002dc8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	441a      	add	r2, r3
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	3b01      	subs	r3, #1
 8002db8:	6839      	ldr	r1, [r7, #0]
 8002dba:	440b      	add	r3, r1
 8002dbc:	7812      	ldrb	r2, [r2, #0]
 8002dbe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc6:	e7ec      	b.n	8002da2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4413      	add	r3, r2
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	441a      	add	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	3220      	adds	r2, #32
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	3301      	adds	r3, #1
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e04:	e7ba      	b.n	8002d7c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3738      	adds	r7, #56	; 0x38
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	0800f528 	.word	0x0800f528

08002e2c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	0800f3fc 	.word	0x0800f3fc

08002e48 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	611a      	str	r2, [r3, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68d8      	ldr	r0, [r3, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6891      	ldr	r1, [r2, #8]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	4798      	blx	r3
 8002e94:	4603      	mov	r3, r0
  };
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
  }
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a42      	ldr	r2, [pc, #264]	; (8002fd4 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d068      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a40      	ldr	r2, [pc, #256]	; (8002fd8 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d061      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a3d      	ldr	r2, [pc, #244]	; (8002fdc <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d05a      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a3b      	ldr	r2, [pc, #236]	; (8002fe0 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d053      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a38      	ldr	r2, [pc, #224]	; (8002fe4 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d04c      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a36      	ldr	r2, [pc, #216]	; (8002fe8 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d045      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a33      	ldr	r2, [pc, #204]	; (8002fec <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d03e      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a31      	ldr	r2, [pc, #196]	; (8002ff0 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d037      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a2e      	ldr	r2, [pc, #184]	; (8002ff4 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d030      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2c      	ldr	r2, [pc, #176]	; (8002ff8 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d029      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a29      	ldr	r2, [pc, #164]	; (8002ffc <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d022      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a27      	ldr	r2, [pc, #156]	; (8003000 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d01b      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a24      	ldr	r2, [pc, #144]	; (8003004 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d014      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a22      	ldr	r2, [pc, #136]	; (8003008 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00d      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	; (800300c <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d006      	beq.n	8002fa0 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a1d      	ldr	r2, [pc, #116]	; (8003010 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d109      	bne.n	8002fb4 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002fae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fb2:	e008      	b.n	8002fc6 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40020010 	.word	0x40020010
 8002fd8:	40020028 	.word	0x40020028
 8002fdc:	40020040 	.word	0x40020040
 8002fe0:	40020058 	.word	0x40020058
 8002fe4:	40020070 	.word	0x40020070
 8002fe8:	40020088 	.word	0x40020088
 8002fec:	400200a0 	.word	0x400200a0
 8002ff0:	400200b8 	.word	0x400200b8
 8002ff4:	40020410 	.word	0x40020410
 8002ff8:	40020428 	.word	0x40020428
 8002ffc:	40020440 	.word	0x40020440
 8003000:	40020458 	.word	0x40020458
 8003004:	40020470 	.word	0x40020470
 8003008:	40020488 	.word	0x40020488
 800300c:	400204a0 	.word	0x400204a0
 8003010:	400204b8 	.word	0x400204b8

08003014 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <_ZN13STM32HardwareC1Ev+0x3c>)
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003030:	461a      	mov	r2, r3
 8003032:	2300      	movs	r3, #0
 8003034:	6093      	str	r3, [r2, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800303c:	461a      	mov	r2, r3
 800303e:	2300      	movs	r3, #0
 8003040:	60d3      	str	r3, [r2, #12]
    }
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	240003d8 	.word	0x240003d8

08003054 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f804 	bl	800306a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3304      	adds	r3, #4
 800307a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800307e:	4619      	mov	r1, r3
 8003080:	f009 ff42 	bl	800cf08 <HAL_UART_Receive_DMA>
    }
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <_ZN13STM32Hardware4readEv>:

    int read(){
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
      int c = -1;
 8003094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003098:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ff09 	bl	8002eb8 <_ZN13STM32Hardware10getRdmaIndEv>
 80030a6:	4603      	mov	r3, r0
 80030a8:	429c      	cmp	r4, r3
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d012      	beq.n	80030dc <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80030bc:	1c59      	adds	r1, r3, #1
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	791b      	ldrb	r3, [r3, #4]
 80030ca:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80030d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 80030dc:	68fb      	ldr	r3, [r7, #12]
    }
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}
	...

080030e8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d108      	bne.n	800310e <_ZN13STM32Hardware5flushEv+0x26>
 80030fc:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <_ZN13STM32Hardware5flushEv+0xc8>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	f083 0301 	eor.w	r3, r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <_ZN13STM32Hardware5flushEv+0x26>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <_ZN13STM32Hardware5flushEv+0x28>
 800310e:	2300      	movs	r3, #0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d049      	beq.n	80031a8 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8003114:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	429a      	cmp	r2, r3
 800312c:	d039      	beq.n	80031a2 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	429a      	cmp	r2, r3
 8003140:	d20c      	bcs.n	800315c <_ZN13STM32Hardware5flushEv+0x74>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	b29a      	uxth	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	b29b      	uxth	r3, r3
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	b29b      	uxth	r3, r3
 800315a:	e007      	b.n	800316c <_ZN13STM32Hardware5flushEv+0x84>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	b29b      	uxth	r3, r3
 8003166:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800316a:	b29b      	uxth	r3, r3
 800316c:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	89fa      	ldrh	r2, [r7, #14]
 8003184:	4619      	mov	r1, r3
 8003186:	f009 fe2d 	bl	800cde4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	89fb      	ldrh	r3, [r7, #14]
 8003194:	4413      	add	r3, r2
 8003196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031a0:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 80031a2:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <_ZN13STM32Hardware5flushEv+0xc8>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
      }
    }
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	240006e0 	.word	0x240006e0

080031b4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
      int n = length;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ca:	bfa8      	it	ge
 80031cc:	f44f 6300 	movge.w	r3, #2048	; 0x800
 80031d0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	4293      	cmp	r3, r2
 80031e2:	bf28      	it	cs
 80031e4:	4613      	movcs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f00b ff01 	bl	800f004 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	4413      	add	r3, r2
 800320e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003218:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	429a      	cmp	r2, r3
 8003220:	d00b      	beq.n	800323a <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	18d1      	adds	r1, r2, r3
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	461a      	mov	r2, r3
 8003236:	f00b fee5 	bl	800f004 <memcpy>
      }

      flush();
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f7ff ff54 	bl	80030e8 <_ZN13STM32Hardware5flushEv>
    }
 8003240:	bf00      	nop
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	f002 fd02 	bl	8005c58 <HAL_GetTick>
 8003254:	4603      	mov	r3, r0
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
      data(0)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe ffb6 	bl	80021dc <_ZN3ros3MsgC1Ev>
 8003270:	4a07      	ldr	r2, [pc, #28]	; (8003290 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	0800f5c0 	.word	0x0800f5c0

08003294 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80032a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80032ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032b0:	6979      	ldr	r1, [r7, #20]
 80032b2:	6838      	ldr	r0, [r7, #0]
 80032b4:	4401      	add	r1, r0
 80032b6:	b2d3      	uxtb	r3, r2
 80032b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80032ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	0a02      	lsrs	r2, r0, #8
 80032c8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80032cc:	0a0b      	lsrs	r3, r1, #8
 80032ce:	6979      	ldr	r1, [r7, #20]
 80032d0:	3101      	adds	r1, #1
 80032d2:	6838      	ldr	r0, [r7, #0]
 80032d4:	4401      	add	r1, r0
 80032d6:	b2d3      	uxtb	r3, r2
 80032d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80032da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	0c02      	lsrs	r2, r0, #16
 80032e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80032ec:	0c0b      	lsrs	r3, r1, #16
 80032ee:	6979      	ldr	r1, [r7, #20]
 80032f0:	3102      	adds	r1, #2
 80032f2:	6838      	ldr	r0, [r7, #0]
 80032f4:	4401      	add	r1, r0
 80032f6:	b2d3      	uxtb	r3, r2
 80032f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80032fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	0e02      	lsrs	r2, r0, #24
 8003308:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800330c:	0e0b      	lsrs	r3, r1, #24
 800330e:	6979      	ldr	r1, [r7, #20]
 8003310:	3103      	adds	r1, #3
 8003312:	6838      	ldr	r0, [r7, #0]
 8003314:	4401      	add	r1, r0
 8003316:	b2d3      	uxtb	r3, r2
 8003318:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 800331a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	000a      	movs	r2, r1
 8003328:	2300      	movs	r3, #0
 800332a:	6979      	ldr	r1, [r7, #20]
 800332c:	3104      	adds	r1, #4
 800332e:	6838      	ldr	r0, [r7, #0]
 8003330:	4401      	add	r1, r0
 8003332:	b2d3      	uxtb	r3, r2
 8003334:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8003336:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	0a0a      	lsrs	r2, r1, #8
 8003344:	2300      	movs	r3, #0
 8003346:	6979      	ldr	r1, [r7, #20]
 8003348:	3105      	adds	r1, #5
 800334a:	6838      	ldr	r0, [r7, #0]
 800334c:	4401      	add	r1, r0
 800334e:	b2d3      	uxtb	r3, r2
 8003350:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8003352:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	0c0a      	lsrs	r2, r1, #16
 8003360:	2300      	movs	r3, #0
 8003362:	6979      	ldr	r1, [r7, #20]
 8003364:	3106      	adds	r1, #6
 8003366:	6838      	ldr	r0, [r7, #0]
 8003368:	4401      	add	r1, r0
 800336a:	b2d3      	uxtb	r3, r2
 800336c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 800336e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	0e0a      	lsrs	r2, r1, #24
 800337c:	2300      	movs	r3, #0
 800337e:	6979      	ldr	r1, [r7, #20]
 8003380:	3107      	adds	r1, #7
 8003382:	6838      	ldr	r0, [r7, #0]
 8003384:	4401      	add	r1, r0
 8003386:	b2d3      	uxtb	r3, r2
 8003388:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	3308      	adds	r3, #8
 800338e:	617b      	str	r3, [r7, #20]
      return offset;
 8003390:	697b      	ldr	r3, [r7, #20]
    }
 8003392:	4618      	mov	r0, r3
 8003394:	371c      	adds	r7, #28
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800339e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80033a2:	b0a3      	sub	sp, #140	; 0x8c
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6778      	str	r0, [r7, #116]	; 0x74
 80033a8:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80033bc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80033c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033c6:	4413      	add	r3, r2
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2200      	movs	r2, #0
 80033ce:	461c      	mov	r4, r3
 80033d0:	4615      	mov	r5, r2
 80033d2:	ea40 0804 	orr.w	r8, r0, r4
 80033d6:	ea41 0905 	orr.w	r9, r1, r5
 80033da:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033de:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033ea:	4413      	add	r3, r2
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2200      	movs	r2, #0
 80033f2:	469a      	mov	sl, r3
 80033f4:	4693      	mov	fp, r2
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003402:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003406:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800340a:	ea40 0402 	orr.w	r4, r0, r2
 800340e:	66bc      	str	r4, [r7, #104]	; 0x68
 8003410:	430b      	orrs	r3, r1
 8003412:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003414:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003418:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800341c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003424:	1c9a      	adds	r2, r3, #2
 8003426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003428:	4413      	add	r3, r2
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2200      	movs	r2, #0
 8003430:	663b      	str	r3, [r7, #96]	; 0x60
 8003432:	667a      	str	r2, [r7, #100]	; 0x64
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003440:	464c      	mov	r4, r9
 8003442:	0423      	lsls	r3, r4, #16
 8003444:	4644      	mov	r4, r8
 8003446:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800344a:	4644      	mov	r4, r8
 800344c:	0422      	lsls	r2, r4, #16
 800344e:	ea40 0402 	orr.w	r4, r0, r2
 8003452:	65bc      	str	r4, [r7, #88]	; 0x58
 8003454:	430b      	orrs	r3, r1
 8003456:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003458:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800345c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003460:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003468:	1cda      	adds	r2, r3, #3
 800346a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800346c:	4413      	add	r3, r2
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2200      	movs	r2, #0
 8003474:	653b      	str	r3, [r7, #80]	; 0x50
 8003476:	657a      	str	r2, [r7, #84]	; 0x54
 8003478:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800347c:	4623      	mov	r3, r4
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003482:	4623      	mov	r3, r4
 8003484:	061b      	lsls	r3, r3, #24
 8003486:	64bb      	str	r3, [r7, #72]	; 0x48
 8003488:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800348c:	4623      	mov	r3, r4
 800348e:	4303      	orrs	r3, r0
 8003490:	643b      	str	r3, [r7, #64]	; 0x40
 8003492:	462b      	mov	r3, r5
 8003494:	430b      	orrs	r3, r1
 8003496:	647b      	str	r3, [r7, #68]	; 0x44
 8003498:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800349c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80034a0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80034a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034a8:	1d1a      	adds	r2, r3, #4
 80034aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ac:	4413      	add	r3, r2
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2200      	movs	r2, #0
 80034b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80034b6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80034c2:	0023      	movs	r3, r4
 80034c4:	2200      	movs	r2, #0
 80034c6:	ea40 0402 	orr.w	r4, r0, r2
 80034ca:	633c      	str	r4, [r7, #48]	; 0x30
 80034cc:	430b      	orrs	r3, r1
 80034ce:	637b      	str	r3, [r7, #52]	; 0x34
 80034d0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80034d4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80034d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80034dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034e0:	1d5a      	adds	r2, r3, #5
 80034e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034e4:	4413      	add	r3, r2
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2200      	movs	r2, #0
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80034fa:	0223      	lsls	r3, r4, #8
 80034fc:	2200      	movs	r2, #0
 80034fe:	ea40 0402 	orr.w	r4, r0, r2
 8003502:	623c      	str	r4, [r7, #32]
 8003504:	430b      	orrs	r3, r1
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
 8003508:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800350c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003510:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003514:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003518:	3306      	adds	r3, #6
 800351a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800351c:	4413      	add	r3, r2
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2200      	movs	r2, #0
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	61fa      	str	r2, [r7, #28]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	69bc      	ldr	r4, [r7, #24]
 8003532:	0423      	lsls	r3, r4, #16
 8003534:	2200      	movs	r2, #0
 8003536:	ea40 0402 	orr.w	r4, r0, r2
 800353a:	613c      	str	r4, [r7, #16]
 800353c:	430b      	orrs	r3, r1
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003544:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003548:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800354c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003550:	3307      	adds	r3, #7
 8003552:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003554:	4413      	add	r3, r2
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2200      	movs	r2, #0
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	60fa      	str	r2, [r7, #12]
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	68bc      	ldr	r4, [r7, #8]
 800356a:	0623      	lsls	r3, r4, #24
 800356c:	2200      	movs	r2, #0
 800356e:	ea40 0402 	orr.w	r4, r0, r2
 8003572:	603c      	str	r4, [r7, #0]
 8003574:	430b      	orrs	r3, r1
 8003576:	607b      	str	r3, [r7, #4]
 8003578:	e9d7 3400 	ldrd	r3, r4, [r7]
 800357c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003580:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003584:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003586:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 800358a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800358e:	3308      	adds	r3, #8
 8003590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8003598:	4618      	mov	r0, r3
 800359a:	378c      	adds	r7, #140	; 0x8c
 800359c:	46bd      	mov	sp, r7
 800359e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80035a2:	4770      	bx	lr

080035a4 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <_ZN8std_msgs5Int647getTypeEv+0x18>)
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	0800f420 	.word	0x0800f420

080035c0 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	0800f430 	.word	0x0800f430

080035dc <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe fdf8 	bl	80021dc <_ZN3ros3MsgC1Ev>
 80035ec:	4a0e      	ldr	r2, [pc, #56]	; (8003628 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	0800f5a8 	.word	0x0800f5a8

0800362c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800362c:	b480      	push	{r7}
 800362e:	b08b      	sub	sp, #44	; 0x2c
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003640:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800364a:	6838      	ldr	r0, [r7, #0]
 800364c:	4401      	add	r1, r0
 800364e:	b2d3      	uxtb	r3, r2
 8003650:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003652:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	0a02      	lsrs	r2, r0, #8
 8003660:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003664:	0a0b      	lsrs	r3, r1, #8
 8003666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003668:	3101      	adds	r1, #1
 800366a:	6838      	ldr	r0, [r7, #0]
 800366c:	4401      	add	r1, r0
 800366e:	b2d3      	uxtb	r3, r2
 8003670:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003672:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	0c02      	lsrs	r2, r0, #16
 8003680:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003684:	0c0b      	lsrs	r3, r1, #16
 8003686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003688:	3102      	adds	r1, #2
 800368a:	6838      	ldr	r0, [r7, #0]
 800368c:	4401      	add	r1, r0
 800368e:	b2d3      	uxtb	r3, r2
 8003690:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003692:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	0e02      	lsrs	r2, r0, #24
 80036a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80036a4:	0e0b      	lsrs	r3, r1, #24
 80036a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036a8:	3103      	adds	r1, #3
 80036aa:	6838      	ldr	r0, [r7, #0]
 80036ac:	4401      	add	r1, r0
 80036ae:	b2d3      	uxtb	r3, r2
 80036b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80036b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	000a      	movs	r2, r1
 80036c0:	2300      	movs	r3, #0
 80036c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036c4:	3104      	adds	r1, #4
 80036c6:	6838      	ldr	r0, [r7, #0]
 80036c8:	4401      	add	r1, r0
 80036ca:	b2d3      	uxtb	r3, r2
 80036cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80036ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	0a0a      	lsrs	r2, r1, #8
 80036dc:	2300      	movs	r3, #0
 80036de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e0:	3105      	adds	r1, #5
 80036e2:	6838      	ldr	r0, [r7, #0]
 80036e4:	4401      	add	r1, r0
 80036e6:	b2d3      	uxtb	r3, r2
 80036e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80036ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	0c0a      	lsrs	r2, r1, #16
 80036f8:	2300      	movs	r3, #0
 80036fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036fc:	3106      	adds	r1, #6
 80036fe:	6838      	ldr	r0, [r7, #0]
 8003700:	4401      	add	r1, r0
 8003702:	b2d3      	uxtb	r3, r2
 8003704:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003706:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	0e0a      	lsrs	r2, r1, #24
 8003714:	2300      	movs	r3, #0
 8003716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003718:	3107      	adds	r1, #7
 800371a:	6838      	ldr	r0, [r7, #0]
 800371c:	4401      	add	r1, r0
 800371e:	b2d3      	uxtb	r3, r2
 8003720:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	3308      	adds	r3, #8
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800372e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003732:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003738:	6838      	ldr	r0, [r7, #0]
 800373a:	4401      	add	r1, r0
 800373c:	b2d3      	uxtb	r3, r2
 800373e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003740:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	0a02      	lsrs	r2, r0, #8
 800374e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003752:	0a0b      	lsrs	r3, r1, #8
 8003754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003756:	3101      	adds	r1, #1
 8003758:	6838      	ldr	r0, [r7, #0]
 800375a:	4401      	add	r1, r0
 800375c:	b2d3      	uxtb	r3, r2
 800375e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003760:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	0c02      	lsrs	r2, r0, #16
 800376e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003772:	0c0b      	lsrs	r3, r1, #16
 8003774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003776:	3102      	adds	r1, #2
 8003778:	6838      	ldr	r0, [r7, #0]
 800377a:	4401      	add	r1, r0
 800377c:	b2d3      	uxtb	r3, r2
 800377e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003780:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	0e02      	lsrs	r2, r0, #24
 800378e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003792:	0e0b      	lsrs	r3, r1, #24
 8003794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003796:	3103      	adds	r1, #3
 8003798:	6838      	ldr	r0, [r7, #0]
 800379a:	4401      	add	r1, r0
 800379c:	b2d3      	uxtb	r3, r2
 800379e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80037a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	000a      	movs	r2, r1
 80037ae:	2300      	movs	r3, #0
 80037b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b2:	3104      	adds	r1, #4
 80037b4:	6838      	ldr	r0, [r7, #0]
 80037b6:	4401      	add	r1, r0
 80037b8:	b2d3      	uxtb	r3, r2
 80037ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80037bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	0a0a      	lsrs	r2, r1, #8
 80037ca:	2300      	movs	r3, #0
 80037cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ce:	3105      	adds	r1, #5
 80037d0:	6838      	ldr	r0, [r7, #0]
 80037d2:	4401      	add	r1, r0
 80037d4:	b2d3      	uxtb	r3, r2
 80037d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80037d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	0c0a      	lsrs	r2, r1, #16
 80037e6:	2300      	movs	r3, #0
 80037e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ea:	3106      	adds	r1, #6
 80037ec:	6838      	ldr	r0, [r7, #0]
 80037ee:	4401      	add	r1, r0
 80037f0:	b2d3      	uxtb	r3, r2
 80037f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80037f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	0e0a      	lsrs	r2, r1, #24
 8003802:	2300      	movs	r3, #0
 8003804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003806:	3107      	adds	r1, #7
 8003808:	6838      	ldr	r0, [r7, #0]
 800380a:	4401      	add	r1, r0
 800380c:	b2d3      	uxtb	r3, r2
 800380e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	3308      	adds	r3, #8
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800381c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003820:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003826:	6838      	ldr	r0, [r7, #0]
 8003828:	4401      	add	r1, r0
 800382a:	b2d3      	uxtb	r3, r2
 800382c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800382e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	0a02      	lsrs	r2, r0, #8
 800383c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003840:	0a0b      	lsrs	r3, r1, #8
 8003842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003844:	3101      	adds	r1, #1
 8003846:	6838      	ldr	r0, [r7, #0]
 8003848:	4401      	add	r1, r0
 800384a:	b2d3      	uxtb	r3, r2
 800384c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800384e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	0c02      	lsrs	r2, r0, #16
 800385c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003860:	0c0b      	lsrs	r3, r1, #16
 8003862:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003864:	3102      	adds	r1, #2
 8003866:	6838      	ldr	r0, [r7, #0]
 8003868:	4401      	add	r1, r0
 800386a:	b2d3      	uxtb	r3, r2
 800386c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800386e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	0e02      	lsrs	r2, r0, #24
 800387c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003880:	0e0b      	lsrs	r3, r1, #24
 8003882:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003884:	3103      	adds	r1, #3
 8003886:	6838      	ldr	r0, [r7, #0]
 8003888:	4401      	add	r1, r0
 800388a:	b2d3      	uxtb	r3, r2
 800388c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800388e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	000a      	movs	r2, r1
 800389c:	2300      	movs	r3, #0
 800389e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038a0:	3104      	adds	r1, #4
 80038a2:	6838      	ldr	r0, [r7, #0]
 80038a4:	4401      	add	r1, r0
 80038a6:	b2d3      	uxtb	r3, r2
 80038a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80038aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	0a0a      	lsrs	r2, r1, #8
 80038b8:	2300      	movs	r3, #0
 80038ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038bc:	3105      	adds	r1, #5
 80038be:	6838      	ldr	r0, [r7, #0]
 80038c0:	4401      	add	r1, r0
 80038c2:	b2d3      	uxtb	r3, r2
 80038c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80038c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	0c0a      	lsrs	r2, r1, #16
 80038d4:	2300      	movs	r3, #0
 80038d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d8:	3106      	adds	r1, #6
 80038da:	6838      	ldr	r0, [r7, #0]
 80038dc:	4401      	add	r1, r0
 80038de:	b2d3      	uxtb	r3, r2
 80038e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80038e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	0e0a      	lsrs	r2, r1, #24
 80038f0:	2300      	movs	r3, #0
 80038f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f4:	3107      	adds	r1, #7
 80038f6:	6838      	ldr	r0, [r7, #0]
 80038f8:	4401      	add	r1, r0
 80038fa:	b2d3      	uxtb	r3, r2
 80038fc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	3308      	adds	r3, #8
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003906:	4618      	mov	r0, r3
 8003908:	372c      	adds	r7, #44	; 0x2c
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003912:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003916:	b0eb      	sub	sp, #428	; 0x1ac
 8003918:	af00      	add	r7, sp, #0
 800391a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800391e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003934:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003938:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800393c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003940:	4413      	add	r3, r2
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2200      	movs	r2, #0
 8003948:	461c      	mov	r4, r3
 800394a:	4615      	mov	r5, r2
 800394c:	ea40 0804 	orr.w	r8, r0, r4
 8003950:	ea41 0905 	orr.w	r9, r1, r5
 8003954:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003958:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800395c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003966:	4413      	add	r3, r2
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2200      	movs	r2, #0
 800396e:	469a      	mov	sl, r3
 8003970:	4693      	mov	fp, r2
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800397e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003982:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003986:	ea40 0402 	orr.w	r4, r0, r2
 800398a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800398e:	430b      	orrs	r3, r1
 8003990:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003994:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003998:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800399c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039a4:	1c9a      	adds	r2, r3, #2
 80039a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039aa:	4413      	add	r3, r2
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2200      	movs	r2, #0
 80039b2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80039b6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80039c6:	464c      	mov	r4, r9
 80039c8:	0423      	lsls	r3, r4, #16
 80039ca:	4644      	mov	r4, r8
 80039cc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80039d0:	4644      	mov	r4, r8
 80039d2:	0422      	lsls	r2, r4, #16
 80039d4:	ea40 0402 	orr.w	r4, r0, r2
 80039d8:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80039dc:	430b      	orrs	r3, r1
 80039de:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80039e2:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80039e6:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039ea:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039f2:	1cda      	adds	r2, r3, #3
 80039f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039f8:	4413      	add	r3, r2
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003a04:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003a08:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003a0c:	4623      	mov	r3, r4
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003a14:	4623      	mov	r3, r4
 8003a16:	061b      	lsls	r3, r3, #24
 8003a18:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003a1c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003a20:	4623      	mov	r3, r4
 8003a22:	4303      	orrs	r3, r0
 8003a24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003a28:	462b      	mov	r3, r5
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003a30:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003a34:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003a38:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a40:	1d1a      	adds	r2, r3, #4
 8003a42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a46:	4413      	add	r3, r2
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003a52:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003a62:	0023      	movs	r3, r4
 8003a64:	2200      	movs	r2, #0
 8003a66:	ea40 0402 	orr.w	r4, r0, r2
 8003a6a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003a6e:	430b      	orrs	r3, r1
 8003a70:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003a74:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003a78:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a7c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a80:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a84:	1d5a      	adds	r2, r3, #5
 8003a86:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a8a:	4413      	add	r3, r2
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2200      	movs	r2, #0
 8003a92:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003a96:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003aa6:	0223      	lsls	r3, r4, #8
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	ea40 0402 	orr.w	r4, r0, r2
 8003aae:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003ab8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003abc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003ac0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003ac4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ac8:	1d9a      	adds	r2, r3, #6
 8003aca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ace:	4413      	add	r3, r2
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003ada:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8003aea:	0423      	lsls	r3, r4, #16
 8003aec:	2200      	movs	r2, #0
 8003aee:	ea40 0402 	orr.w	r4, r0, r2
 8003af2:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003af6:	430b      	orrs	r3, r1
 8003af8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003afc:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003b00:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b04:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003b08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b0c:	1dda      	adds	r2, r3, #7
 8003b0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b12:	4413      	add	r3, r2
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003b1e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003b2e:	0623      	lsls	r3, r4, #24
 8003b30:	2200      	movs	r2, #0
 8003b32:	ea40 0402 	orr.w	r4, r0, r2
 8003b36:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003b40:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003b44:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003b48:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003b4c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003b50:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003b54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b58:	3308      	adds	r3, #8
 8003b5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b6a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b6e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003b72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b76:	4413      	add	r3, r2
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003b82:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003b86:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003b8a:	4623      	mov	r3, r4
 8003b8c:	4303      	orrs	r3, r0
 8003b8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b92:	462b      	mov	r3, r5
 8003b94:	430b      	orrs	r3, r1
 8003b96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b9a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003b9e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ba2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ba6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bb0:	4413      	add	r3, r2
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003bbc:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003bcc:	464c      	mov	r4, r9
 8003bce:	0223      	lsls	r3, r4, #8
 8003bd0:	4644      	mov	r4, r8
 8003bd2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003bd6:	4644      	mov	r4, r8
 8003bd8:	0222      	lsls	r2, r4, #8
 8003bda:	ea40 0402 	orr.w	r4, r0, r2
 8003bde:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003be2:	430b      	orrs	r3, r1
 8003be4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003be8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003bec:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003bf0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003bf4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bf8:	1c9a      	adds	r2, r3, #2
 8003bfa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bfe:	4413      	add	r3, r2
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003c1a:	464c      	mov	r4, r9
 8003c1c:	0423      	lsls	r3, r4, #16
 8003c1e:	4644      	mov	r4, r8
 8003c20:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003c24:	4644      	mov	r4, r8
 8003c26:	0422      	lsls	r2, r4, #16
 8003c28:	ea40 0402 	orr.w	r4, r0, r2
 8003c2c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003c30:	430b      	orrs	r3, r1
 8003c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c36:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003c3a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c3e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c46:	1cda      	adds	r2, r3, #3
 8003c48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c4c:	4413      	add	r3, r2
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c58:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c5c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003c60:	4623      	mov	r3, r4
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c68:	4623      	mov	r3, r4
 8003c6a:	061b      	lsls	r3, r3, #24
 8003c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c70:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003c74:	4623      	mov	r3, r4
 8003c76:	4303      	orrs	r3, r0
 8003c78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c7c:	462b      	mov	r3, r5
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c84:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003c88:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003c8c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c94:	1d1a      	adds	r2, r3, #4
 8003c96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c9a:	4413      	add	r3, r2
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ca6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003cb6:	0023      	movs	r3, r4
 8003cb8:	2200      	movs	r2, #0
 8003cba:	ea40 0402 	orr.w	r4, r0, r2
 8003cbe:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003cc8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003ccc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003cd0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003cd4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cd8:	1d5a      	adds	r2, r3, #5
 8003cda:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cde:	4413      	add	r3, r2
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cea:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003cfa:	0223      	lsls	r3, r4, #8
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	ea40 0402 	orr.w	r4, r0, r2
 8003d02:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003d06:	430b      	orrs	r3, r1
 8003d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d0c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003d10:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003d14:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003d18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d1c:	1d9a      	adds	r2, r3, #6
 8003d1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d22:	4413      	add	r3, r2
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003d3e:	0423      	lsls	r3, r4, #16
 8003d40:	2200      	movs	r2, #0
 8003d42:	ea40 0402 	orr.w	r4, r0, r2
 8003d46:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d50:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003d54:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003d58:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003d5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d60:	1dda      	adds	r2, r3, #7
 8003d62:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d66:	4413      	add	r3, r2
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003d82:	0623      	lsls	r3, r4, #24
 8003d84:	2200      	movs	r2, #0
 8003d86:	ea40 0402 	orr.w	r4, r0, r2
 8003d8a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003d94:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003d98:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003d9c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003da0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003da4:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003da8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003dac:	3308      	adds	r3, #8
 8003dae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003dbe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003dc2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003dc6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dca:	4413      	add	r3, r2
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dd6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003dda:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003dde:	4623      	mov	r3, r4
 8003de0:	4303      	orrs	r3, r0
 8003de2:	67bb      	str	r3, [r7, #120]	; 0x78
 8003de4:	462b      	mov	r3, r5
 8003de6:	430b      	orrs	r3, r1
 8003de8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dea:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003dee:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003df2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003df6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e00:	4413      	add	r3, r2
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2200      	movs	r2, #0
 8003e08:	673b      	str	r3, [r7, #112]	; 0x70
 8003e0a:	677a      	str	r2, [r7, #116]	; 0x74
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e18:	464c      	mov	r4, r9
 8003e1a:	0223      	lsls	r3, r4, #8
 8003e1c:	4644      	mov	r4, r8
 8003e1e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e22:	4644      	mov	r4, r8
 8003e24:	0222      	lsls	r2, r4, #8
 8003e26:	ea40 0402 	orr.w	r4, r0, r2
 8003e2a:	66bc      	str	r4, [r7, #104]	; 0x68
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e30:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003e34:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e38:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e40:	1c9a      	adds	r2, r3, #2
 8003e42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e46:	4413      	add	r3, r2
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e50:	667a      	str	r2, [r7, #100]	; 0x64
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e5e:	464c      	mov	r4, r9
 8003e60:	0423      	lsls	r3, r4, #16
 8003e62:	4644      	mov	r4, r8
 8003e64:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003e68:	4644      	mov	r4, r8
 8003e6a:	0422      	lsls	r2, r4, #16
 8003e6c:	ea40 0402 	orr.w	r4, r0, r2
 8003e70:	65bc      	str	r4, [r7, #88]	; 0x58
 8003e72:	430b      	orrs	r3, r1
 8003e74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e76:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003e7a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e7e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e86:	1cda      	adds	r2, r3, #3
 8003e88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e8c:	4413      	add	r3, r2
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2200      	movs	r2, #0
 8003e94:	653b      	str	r3, [r7, #80]	; 0x50
 8003e96:	657a      	str	r2, [r7, #84]	; 0x54
 8003e98:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003e9c:	4623      	mov	r3, r4
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea2:	4623      	mov	r3, r4
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ea8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003eac:	4623      	mov	r3, r4
 8003eae:	4303      	orrs	r3, r0
 8003eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8003eb2:	462b      	mov	r3, r5
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003ebc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003ec0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ec4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ec8:	1d1a      	adds	r2, r3, #4
 8003eca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ece:	4413      	add	r3, r2
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ed8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003ee4:	0023      	movs	r3, r4
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	ea40 0402 	orr.w	r4, r0, r2
 8003eec:	633c      	str	r4, [r7, #48]	; 0x30
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003ef6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003efa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003efe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f02:	1d5a      	adds	r2, r3, #5
 8003f04:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f08:	4413      	add	r3, r2
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2200      	movs	r2, #0
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003f1e:	0223      	lsls	r3, r4, #8
 8003f20:	2200      	movs	r2, #0
 8003f22:	ea40 0402 	orr.w	r4, r0, r2
 8003f26:	623c      	str	r4, [r7, #32]
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003f30:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003f34:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003f38:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f3c:	3306      	adds	r3, #6
 8003f3e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003f42:	4413      	add	r3, r2
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2200      	movs	r2, #0
 8003f4a:	61bb      	str	r3, [r7, #24]
 8003f4c:	61fa      	str	r2, [r7, #28]
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	69bc      	ldr	r4, [r7, #24]
 8003f58:	0423      	lsls	r3, r4, #16
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	ea40 0402 	orr.w	r4, r0, r2
 8003f60:	613c      	str	r4, [r7, #16]
 8003f62:	430b      	orrs	r3, r1
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003f6a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003f6e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003f72:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f76:	3307      	adds	r3, #7
 8003f78:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003f7c:	4413      	add	r3, r2
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2200      	movs	r2, #0
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	60fa      	str	r2, [r7, #12]
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	68bc      	ldr	r4, [r7, #8]
 8003f92:	0623      	lsls	r3, r4, #24
 8003f94:	2200      	movs	r2, #0
 8003f96:	ea40 0402 	orr.w	r4, r0, r2
 8003f9a:	603c      	str	r4, [r7, #0]
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	607b      	str	r3, [r7, #4]
 8003fa0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003fa4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003fa8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003fac:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003fb0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003fb4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003fb8:	3308      	adds	r3, #8
 8003fba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003fbe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003fce:	4770      	bx	lr

08003fd0 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003fda:	4618      	mov	r0, r3
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	0800f454 	.word	0x0800f454

08003fec <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	0800f46c 	.word	0x0800f46c

08004008 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4618      	mov	r0, r3
 8004014:	f7fe f8e2 	bl	80021dc <_ZN3ros3MsgC1Ev>
 8004018:	4a08      	ldr	r2, [pc, #32]	; (800403c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3308      	adds	r3, #8
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fada 	bl	80035dc <_ZN13geometry_msgs7Vector3C1Ev>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3328      	adds	r3, #40	; 0x28
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fad5 	bl	80035dc <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4618      	mov	r0, r3
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	0800f590 	.word	0x0800f590

08004040 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f103 0008 	add.w	r0, r3, #8
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	4413      	add	r3, r2
 800405a:	4619      	mov	r1, r3
 800405c:	f7ff fae6 	bl	800362c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004060:	4602      	mov	r2, r0
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4413      	add	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	4413      	add	r3, r2
 8004074:	4619      	mov	r1, r3
 8004076:	f7ff fad9 	bl	800362c <_ZNK13geometry_msgs7Vector39serializeEPh>
 800407a:	4602      	mov	r2, r0
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
      return offset;
 8004082:	68fb      	ldr	r3, [r7, #12]
    }
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f103 0008 	add.w	r0, r3, #8
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	4413      	add	r3, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	f7ff fc33 	bl	8003912 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80040ac:	4602      	mov	r2, r0
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4413      	add	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	4413      	add	r3, r2
 80040c0:	4619      	mov	r1, r3
 80040c2:	f7ff fc26 	bl	8003912 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80040c6:	4602      	mov	r2, r0
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
     return offset;
 80040ce:	68fb      	ldr	r3, [r7, #12]
    }
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	0800f490 	.word	0x0800f490

080040f4 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80040fe:	4618      	mov	r0, r3
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	0800f4a4 	.word	0x0800f4a4

08004110 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE>:
#include "geometry_msgs/Point.h"
#include "STM32Hardware.h"

geometry_msgs::Twist pub_out_msg;
void sub_vel_cb(const geometry_msgs::Twist &msg)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
   get_vel_x = msg.linear.x;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800411e:	490a      	ldr	r1, [pc, #40]	; (8004148 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8004120:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_y = msg.linear.y;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800412a:	4908      	ldr	r1, [pc, #32]	; (800414c <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 800412c:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_z = msg.angular.z;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004136:	4906      	ldr	r1, [pc, #24]	; (8004150 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x40>)
 8004138:	e9c1 2300 	strd	r2, r3, [r1]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	24000688 	.word	0x24000688
 800414c:	24000690 	.word	0x24000690
 8004150:	24000698 	.word	0x24000698

08004154 <_Z8callbackRKN8std_msgs5Int64E>:

void callback(const std_msgs::Int64 &msg)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
   count = msg.data;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004162:	4b04      	ldr	r3, [pc, #16]	; (8004174 <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 8004164:	601a      	str	r2, [r3, #0]
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	24000668 	.word	0x24000668

08004178 <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
ros::Subscriber<std_msgs::Int64> sub("counting", callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8004180:	4805      	ldr	r0, [pc, #20]	; (8004198 <HAL_UART_TxCpltCallback+0x20>)
 8004182:	f000 f9ad 	bl	80044e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004186:	4603      	mov	r3, r0
 8004188:	4618      	mov	r0, r3
 800418a:	f7fe ffad 	bl	80030e8 <_ZN13STM32Hardware5flushEv>
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	24000730 	.word	0x24000730

0800419c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 80041a4:	4805      	ldr	r0, [pc, #20]	; (80041bc <HAL_UART_RxCpltCallback+0x20>)
 80041a6:	f000 f99b 	bl	80044e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80041aa:	4603      	mov	r3, r0
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe ff5c 	bl	800306a <_ZN13STM32Hardware10reset_rbufEv>
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	24000730 	.word	0x24000730

080041c0 <setup>:

void setup(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
    nh.initNode();
 80041c4:	4808      	ldr	r0, [pc, #32]	; (80041e8 <setup+0x28>)
 80041c6:	f000 f997 	bl	80044f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//    sub_vel = nh.subscribe("/cmd_vel", 1, sub_vel_cb);
//    pub_vel = nh.advertise<geometry_msgs::Twist>("/base_speed", 1);
    nh.subscribe(sub_vel);
 80041ca:	4908      	ldr	r1, [pc, #32]	; (80041ec <setup+0x2c>)
 80041cc:	4806      	ldr	r0, [pc, #24]	; (80041e8 <setup+0x28>)
 80041ce:	f000 f9bc 	bl	800454a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(sub);
 80041d2:	4907      	ldr	r1, [pc, #28]	; (80041f0 <setup+0x30>)
 80041d4:	4804      	ldr	r0, [pc, #16]	; (80041e8 <setup+0x28>)
 80041d6:	f000 f9e3 	bl	80045a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
    nh.advertise(pub_vel);
 80041da:	4906      	ldr	r1, [pc, #24]	; (80041f4 <setup+0x34>)
 80041dc:	4802      	ldr	r0, [pc, #8]	; (80041e8 <setup+0x28>)
 80041de:	f000 fa0a 	bl	80045f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	24000730 	.word	0x24000730
 80041ec:	24001c70 	.word	0x24001c70
 80041f0:	24001ce8 	.word	0x24001ce8
 80041f4:	24001cd0 	.word	0x24001cd0

080041f8 <loop>:
void loop(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
    nh.spinOnce();
 80041fc:	4802      	ldr	r0, [pc, #8]	; (8004208 <loop+0x10>)
 80041fe:	f000 fa2a 	bl	8004656 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	24000730 	.word	0x24000730

0800420c <publish_vel>:

void publish_vel(double x, double y, double z)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	ed87 0b04 	vstr	d0, [r7, #16]
 8004216:	ed87 1b02 	vstr	d1, [r7, #8]
 800421a:	ed87 2b00 	vstr	d2, [r7]

	pub_out_msg.linear.x = x;
 800421e:	490b      	ldr	r1, [pc, #44]	; (800424c <publish_vel+0x40>)
 8004220:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004224:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pub_out_msg.linear.y = y;
 8004228:	4908      	ldr	r1, [pc, #32]	; (800424c <publish_vel+0x40>)
 800422a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800422e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pub_out_msg.angular.z = z;
 8004232:	4906      	ldr	r1, [pc, #24]	; (800424c <publish_vel+0x40>)
 8004234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004238:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pub_vel.publish(&pub_out_msg);
 800423c:	4903      	ldr	r1, [pc, #12]	; (800424c <publish_vel+0x40>)
 800423e:	4804      	ldr	r0, [pc, #16]	; (8004250 <publish_vel+0x44>)
 8004240:	f7fe fe19 	bl	8002e76 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8004244:	bf00      	nop
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	240006e8 	.word	0x240006e8
 8004250:	24001cd0 	.word	0x24001cd0

08004254 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d80d      	bhi.n	8004284 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	fa22 f103 	lsr.w	r1, r2, r3
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	b2ca      	uxtb	r2, r1
 800427a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3301      	adds	r3, #1
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	e7ee      	b.n	8004262 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004284:	bf00      	nop
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d811      	bhi.n	80042ce <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6839      	ldr	r1, [r7, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	440a      	add	r2, r1
 80042b4:	7812      	ldrb	r2, [r2, #0]
 80042b6:	4611      	mov	r1, r2
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	00d2      	lsls	r2, r2, #3
 80042bc:	fa01 f202 	lsl.w	r2, r1, r2
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e7ea      	b.n	80042a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
	...

080042dc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	4a04      	ldr	r2, [pc, #16]	; (80042f8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4618      	mov	r0, r3
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	0800f5f0 	.word	0x0800f5f0

080042fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff ffe8 	bl	80042dc <_ZN3ros15NodeHandleBase_C1Ev>
 800430c:	4a47      	ldr	r2, [pc, #284]	; (800442c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3304      	adds	r3, #4
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe fe7c 	bl	8003014 <_ZN13STM32HardwareC1Ev>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	f241 5314 	movw	r3, #5396	; 0x1514
 800432e:	4413      	add	r3, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe fac7 	bl	80028c4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b18      	cmp	r3, #24
 800433e:	d80b      	bhi.n	8004358 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	2200      	movs	r2, #0
 800434e:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	3301      	adds	r3, #1
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	e7f0      	b.n	800433a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004358:	2300      	movs	r3, #0
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b18      	cmp	r3, #24
 8004360:	d80a      	bhi.n	8004378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800436a:	2100      	movs	r1, #0
 800436c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	3301      	adds	r3, #1
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	e7f1      	b.n	800435c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004382:	d20b      	bcs.n	800439c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	441a      	add	r2, r3
 800438a:	f241 0324 	movw	r3, #4132	; 0x1024
 800438e:	4413      	add	r3, r2
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3301      	adds	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	e7ef      	b.n	800437c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800439c:	2300      	movs	r3, #0
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a6:	d20b      	bcs.n	80043c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	441a      	add	r2, r3
 80043ae:	f241 2324 	movw	r3, #4644	; 0x1224
 80043b2:	4413      	add	r3, r2
 80043b4:	2200      	movs	r2, #0
 80043b6:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	3301      	adds	r3, #1
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	e7ef      	b.n	80043a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c6:	461a      	mov	r2, r3
 80043c8:	2300      	movs	r3, #0
 80043ca:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d4:	461a      	mov	r2, r3
 80043d6:	2300      	movs	r3, #0
 80043d8:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e2:	461a      	mov	r2, r3
 80043e4:	2300      	movs	r3, #0
 80043e6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f0:	461a      	mov	r2, r3
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fe:	461a      	mov	r2, r3
 8004400:	2300      	movs	r3, #0
 8004402:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440c:	461a      	mov	r2, r3
 800440e:	2300      	movs	r3, #0
 8004410:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441a:	461a      	mov	r2, r3
 800441c:	2300      	movs	r3, #0
 800441e:	6213      	str	r3, [r2, #32]
  }
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	0800f57c 	.word	0x0800f57c

08004430 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	0800f5d8 	.word	0x0800f5d8

08004450 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ffe5 	bl	8004430 <_ZN3ros11Subscriber_C1Ev>
 8004466:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3310      	adds	r3, #16
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff fdc9 	bl	8004008 <_ZN13geometry_msgs5TwistC1Ev>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	659a      	str	r2, [r3, #88]	; 0x58
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	609a      	str	r2, [r3, #8]
  };
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	0800f564 	.word	0x0800f564

08004498 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff ffc1 	bl	8004430 <_ZN3ros11Subscriber_C1Ev>
 80044ae:	4a0b      	ldr	r2, [pc, #44]	; (80044dc <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3310      	adds	r3, #16
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fe fed1 	bl	8003260 <_ZN8std_msgs5Int64C1Ev>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	621a      	str	r2, [r3, #32]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	609a      	str	r2, [r3, #8]
  };
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	0800f54c 	.word	0x0800f54c

080044e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
  }
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	4618      	mov	r0, r3
 8004506:	f7fe fda5 	bl	8003054 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004510:	461a      	mov	r2, r3
 8004512:	2300      	movs	r3, #0
 8004514:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800451e:	461a      	mov	r2, r3
 8004520:	2300      	movs	r3, #0
 8004522:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800452c:	461a      	mov	r2, r3
 800452e:	2300      	movs	r3, #0
 8004530:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800453a:	461a      	mov	r2, r3
 800453c:	2300      	movs	r3, #0
 800453e:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800454a:	b480      	push	{r7}
 800454c:	b085      	sub	sp, #20
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b18      	cmp	r3, #24
 800455c:	dc19      	bgt.n	8004592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10d      	bne.n	800458a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800456e:	6839      	ldr	r1, [r7, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	605a      	str	r2, [r3, #4]
        return true;
 8004586:	2301      	movs	r3, #1
 8004588:	e004      	b.n	8004594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3301      	adds	r3, #1
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	e7e2      	b.n	8004558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8004592:	2300      	movs	r3, #0
  }
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b18      	cmp	r3, #24
 80045b2:	dc19      	bgt.n	80045e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80045bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10d      	bne.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80045c4:	6839      	ldr	r1, [r7, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80045ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	605a      	str	r2, [r3, #4]
        return true;
 80045dc:	2301      	movs	r3, #1
 80045de:	e004      	b.n	80045ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	e7e2      	b.n	80045ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
    return false;
 80045e8:	2300      	movs	r3, #0
  }
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80045f6:	b480      	push	{r7}
 80045f8:	b085      	sub	sp, #20
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b18      	cmp	r3, #24
 8004608:	dc1e      	bgt.n	8004648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d111      	bne.n	8004640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	60da      	str	r2, [r3, #12]
        return true;
 800463c:	2301      	movs	r3, #1
 800463e:	e004      	b.n	800464a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3301      	adds	r3, #1
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	e7dd      	b.n	8004604 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8004648:	2300      	movs	r3, #0
  }
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3304      	adds	r3, #4
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fdf0 	bl	8003248 <_ZN13STM32Hardware4timeEv>
 8004668:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004670:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800467c:	4293      	cmp	r3, r2
 800467e:	d905      	bls.n	800468c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004692:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00e      	beq.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a0:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d906      	bls.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b0:	461a      	mov	r2, r3
 80046b2:	2300      	movs	r3, #0
 80046b4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3304      	adds	r3, #4
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe fdbd 	bl	8003248 <_ZN13STM32Hardware4timeEv>
 80046ce:	4602      	mov	r2, r0
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	429a      	cmp	r2, r3
 80046de:	bf8c      	ite	hi
 80046e0:	2301      	movhi	r3, #1
 80046e2:	2300      	movls	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80046ea:	f06f 0301 	mvn.w	r3, #1
 80046ee:	e226      	b.n	8004b3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fe fcc9 	bl	800308c <_ZN13STM32Hardware4readEv>
 80046fa:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f2c0 81ff 	blt.w	8004b02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470a:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4413      	add	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004718:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004722:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004726:	2b07      	cmp	r3, #7
 8004728:	d12d      	bne.n	8004786 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004730:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800473c:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	b2d1      	uxtb	r1, r2
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	441a      	add	r2, r3
 8004748:	f241 0324 	movw	r3, #4132	; 0x1024
 800474c:	4413      	add	r3, r2
 800474e:	460a      	mov	r2, r1
 8004750:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004758:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800475c:	3b01      	subs	r3, #1
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004764:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476e:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1a0      	bne.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477c:	461a      	mov	r2, r3
 800477e:	2308      	movs	r3, #8
 8004780:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004784:	e798      	b.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004790:	2b00      	cmp	r3, #0
 8004792:	d130      	bne.n	80047f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2bff      	cmp	r3, #255	; 0xff
 8004798:	d112      	bne.n	80047c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047a4:	3301      	adds	r3, #1
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047ac:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3314      	adds	r3, #20
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047ba:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 80047be:	e77b      	b.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fe fd3f 	bl	8003248 <_ZN13STM32Hardware4timeEv>
 80047ca:	4602      	mov	r2, r0
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d4:	4293      	cmp	r3, r2
 80047d6:	bf8c      	ite	hi
 80047d8:	2301      	movhi	r3, #1
 80047da:	2300      	movls	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f43f af6a 	beq.w	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 80047f0:	f06f 0301 	mvn.w	r3, #1
 80047f4:	e1a3      	b.n	8004b3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004800:	2b01      	cmp	r3, #1
 8004802:	d121      	bne.n	8004848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2bfe      	cmp	r3, #254	; 0xfe
 8004808:	d10b      	bne.n	8004822 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004810:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004814:	3301      	adds	r3, #1
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800481c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004820:	e74a      	b.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004828:	461a      	mov	r2, r3
 800482a:	2300      	movs	r3, #0
 800482c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004836:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800483a:	2b00      	cmp	r3, #0
 800483c:	f47f af3c 	bne.w	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f980 	bl	8004b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004846:	e737      	b.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800484e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004852:	2b02      	cmp	r3, #2
 8004854:	d120      	bne.n	8004898 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485c:	461a      	mov	r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800486a:	461a      	mov	r2, r3
 800486c:	2300      	movs	r3, #0
 800486e:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004878:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800487c:	3301      	adds	r3, #1
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004884:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488e:	461a      	mov	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004896:	e70f      	b.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800489e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d118      	bne.n	80048d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ac:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	021b      	lsls	r3, r3, #8
 80048b4:	4413      	add	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048bc:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80048ca:	3301      	adds	r3, #1
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048d2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80048d6:	e6ef      	b.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048de:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d11f      	bne.n	8004926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ec:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80048f0:	425a      	negs	r2, r3
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	bf58      	it	pl
 80048f8:	4253      	negpl	r3, r2
 80048fa:	2bff      	cmp	r3, #255	; 0xff
 80048fc:	d10b      	bne.n	8004916 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004904:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004908:	3301      	adds	r3, #1
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004910:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004914:	e6d0      	b.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491c:	461a      	mov	r2, r3
 800491e:	2300      	movs	r3, #0
 8004920:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004924:	e6c8      	b.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004930:	2b05      	cmp	r3, #5
 8004932:	d119      	bne.n	8004968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493a:	461a      	mov	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004948:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800494c:	3301      	adds	r3, #1
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004954:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495e:	461a      	mov	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004966:	e6a7      	b.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004972:	2b06      	cmp	r3, #6
 8004974:	d123      	bne.n	80049be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497c:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	4413      	add	r3, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800498c:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004996:	461a      	mov	r2, r3
 8004998:	2307      	movs	r3, #7
 800499a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a4:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f47f ae85 	bne.w	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b4:	461a      	mov	r2, r3
 80049b6:	2308      	movs	r3, #8
 80049b8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80049bc:	e67c      	b.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	f47f ae75 	bne.w	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d4:	461a      	mov	r2, r3
 80049d6:	2300      	movs	r3, #0
 80049d8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80049e6:	425a      	negs	r2, r3
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	bf58      	it	pl
 80049ee:	4253      	negpl	r3, r2
 80049f0:	2bff      	cmp	r3, #255	; 0xff
 80049f2:	f47f ae61 	bne.w	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fc:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d116      	bne.n	8004a32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f89e 	bl	8004b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f8ba 	bl	8004b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a16:	461a      	mov	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a24:	461a      	mov	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 8004a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a30:	e085      	b.n	8004b3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a38:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004a3c:	2b0a      	cmp	r3, #10
 8004a3e:	d108      	bne.n	8004a52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	f241 0324 	movw	r3, #4132	; 0x1024
 8004a46:	4413      	add	r3, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f97c 	bl	8004d48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004a50:	e632      	b.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a58:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004a5c:	2b06      	cmp	r3, #6
 8004a5e:	d112      	bne.n	8004a86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	f241 5314 	movw	r3, #5396	; 0x1514
 8004a66:	4413      	add	r3, r2
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	f241 0224 	movw	r2, #4132	; 0x1024
 8004a6e:	440a      	add	r2, r1
 8004a70:	4611      	mov	r1, r2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe f85b 	bl	8002b2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004a84:	e618      	b.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004a90:	2b0b      	cmp	r3, #11
 8004a92:	d106      	bne.n	8004aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004aa0:	e60a      	b.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004aac:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f43f adfc 	beq.w	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004aca:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004ad4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ade:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004ae2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	f241 0324 	movw	r3, #4132	; 0x1024
 8004afa:	440b      	add	r3, r1
 8004afc:	4619      	mov	r1, r3
 8004afe:	4790      	blx	r2
    while (true)
 8004b00:	e5da      	b.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8004b02:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b0a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d014      	beq.n	8004b3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b18:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d909      	bls.n	8004b3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f80c 	bl	8004b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b34:	461a      	mov	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8004b3c:	2300      	movs	r3, #0
  }
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004b4e:	f107 030c 	add.w	r3, r7, #12
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fb52 	bl	80021fc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f107 020c 	add.w	r2, r7, #12
 8004b62:	210a      	movs	r1, #10
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
    rt_time = hardware_.time();
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe fb6b 	bl	8003248 <_ZN13STM32Hardware4timeEv>
 8004b72:	4602      	mov	r2, r0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7a:	615a      	str	r2, [r3, #20]
  }
 8004b7c:	bf00      	nop
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004b84:	b590      	push	{r4, r7, lr}
 8004b86:	b08b      	sub	sp, #44	; 0x2c
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004b8c:	f107 030c 	add.w	r3, r7, #12
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fd fc23 	bl	80023dc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	2b18      	cmp	r3, #24
 8004b9e:	dc63      	bgt.n	8004c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d056      	beq.n	8004c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	6859      	ldr	r1, [r3, #4]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4608      	mov	r0, r1
 8004c00:	4798      	blx	r3
 8004c02:	4603      	mov	r3, r0
 8004c04:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	6859      	ldr	r1, [r3, #4]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	4798      	blx	r3
 8004c30:	4603      	mov	r3, r0
 8004c32:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c38:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681c      	ldr	r4, [r3, #0]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe f925 	bl	8002e9e <_ZN3ros9Publisher15getEndpointTypeEv>
 8004c54:	4601      	mov	r1, r0
 8004c56:	f107 030c 	add.w	r3, r7, #12
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	3301      	adds	r3, #1
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
 8004c66:	e798      	b.n	8004b9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	2b18      	cmp	r3, #24
 8004c70:	dc5f      	bgt.n	8004d32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c76:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d053      	beq.n	8004d2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c98:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004cac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4608      	mov	r0, r1
 8004cc4:	4798      	blx	r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cce:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004cd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cda:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4608      	mov	r0, r1
 8004cea:	4798      	blx	r3
 8004cec:	4603      	mov	r3, r0
 8004cee:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cf4:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681c      	ldr	r4, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d00:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3304      	adds	r3, #4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4608      	mov	r0, r1
 8004d1c:	4798      	blx	r3
 8004d1e:	4601      	mov	r1, r0
 8004d20:	f107 030c 	add.w	r3, r7, #12
 8004d24:	461a      	mov	r2, r3
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d30:	e79c      	b.n	8004c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004d3e:	bf00      	nop
 8004d40:	372c      	adds	r7, #44	; 0x2c
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd90      	pop	{r4, r7, pc}
	...

08004d48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004d52:	f107 0308 	add.w	r3, r7, #8
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fd fa50 	bl	80021fc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fe fa71 	bl	8003248 <_ZN13STM32Hardware4timeEv>
 8004d66:	4602      	mov	r2, r0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004d74:	f107 0308 	add.w	r3, r7, #8
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fd faae 	bl	80022dc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	4915      	ldr	r1, [pc, #84]	; (8004ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004d86:	fba1 1303 	umull	r1, r3, r1, r3
 8004d8a:	099b      	lsrs	r3, r3, #6
 8004d8c:	4413      	add	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004d90:	6939      	ldr	r1, [r7, #16]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004d96:	fba3 0302 	umull	r0, r3, r3, r2
 8004d9a:	099b      	lsrs	r3, r3, #6
 8004d9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004da0:	fb00 f303 	mul.w	r3, r0, r3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	4a0e      	ldr	r2, [pc, #56]	; (8004de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004da8:	fb02 f303 	mul.w	r3, r2, r3
 8004dac:	440b      	add	r3, r1
 8004dae:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004db0:	f107 0308 	add.w	r3, r7, #8
 8004db4:	3304      	adds	r3, #4
 8004db6:	4619      	mov	r1, r3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f8bf 	bl	8004f3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fe fa40 	bl	8003248 <_ZN13STM32Hardware4timeEv>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004dd4:	bf00      	nop
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	10624dd3 	.word	0x10624dd3
 8004de0:	000f4240 	.word	0x000f4240

08004de4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b63      	cmp	r3, #99	; 0x63
 8004df4:	dd0b      	ble.n	8004e0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dfc:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004e00:	f083 0301 	eor.w	r3, r3, #1
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e090      	b.n	8004f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68f9      	ldr	r1, [r7, #12]
 8004e16:	f241 2324 	movw	r3, #4644	; 0x1224
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3307      	adds	r3, #7
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	4790      	blx	r2
 8004e24:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e2c:	22ff      	movs	r2, #255	; 0xff
 8004e2e:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e38:	22fe      	movs	r2, #254	; 0xfe
 8004e3a:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e48:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	0a1b      	lsrs	r3, r3, #8
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e5c:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e66:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e70:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004e74:	4413      	add	r3, r2
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e82:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e90:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	b21b      	sxth	r3, r3
 8004e98:	121b      	asrs	r3, r3, #8
 8004e9a:	b21b      	sxth	r3, r3
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea4:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004eac:	2305      	movs	r3, #5
 8004eae:	61bb      	str	r3, [r7, #24]
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	3306      	adds	r3, #6
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	dc0e      	bgt.n	8004ed8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	441a      	add	r2, r3
 8004ec0:	f241 2324 	movw	r3, #4644	; 0x1224
 8004ec4:	4413      	add	r3, r2
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	e7eb      	b.n	8004eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	3307      	adds	r3, #7
 8004edc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	425a      	negs	r2, r3
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	bf58      	it	pl
 8004ee8:	4253      	negpl	r3, r2
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	1c59      	adds	r1, r3, #1
 8004ef0:	6179      	str	r1, [r7, #20]
 8004ef2:	43d2      	mvns	r2, r2
 8004ef4:	b2d1      	uxtb	r1, r2
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	441a      	add	r2, r3
 8004efa:	f241 2324 	movw	r3, #4644	; 0x1224
 8004efe:	4413      	add	r3, r2
 8004f00:	460a      	mov	r2, r1
 8004f02:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f0a:	dc0b      	bgt.n	8004f24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	1d18      	adds	r0, r3, #4
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	f241 2324 	movw	r3, #4644	; 0x1224
 8004f16:	4413      	add	r3, r2
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f7fe f94a 	bl	80031b4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	e005      	b.n	8004f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004f24:	4904      	ldr	r1, [pc, #16]	; (8004f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f84c 	bl	8004fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004f30:	4618      	mov	r0, r3
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	0800f4c8 	.word	0x0800f4c8

08004f3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe f97c 	bl	8003248 <_ZN13STM32Hardware4timeEv>
 8004f50:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4917      	ldr	r1, [pc, #92]	; (8004fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004f5a:	fba1 1303 	umull	r1, r3, r1, r3
 8004f5e:	099b      	lsrs	r3, r3, #6
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f6a:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	6859      	ldr	r1, [r3, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4b11      	ldr	r3, [pc, #68]	; (8004fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004f74:	fba3 0302 	umull	r0, r3, r3, r2
 8004f78:	099b      	lsrs	r3, r3, #6
 8004f7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f7e:	fb00 f303 	mul.w	r3, r0, r3
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	4a0d      	ldr	r2, [pc, #52]	; (8004fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004f86:	fb02 f303 	mul.w	r3, r2, r3
 8004f8a:	1aca      	subs	r2, r1, r3
 8004f8c:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004f8e:	4413      	add	r3, r2
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f96:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	f241 0318 	movw	r3, #4120	; 0x1018
 8004f9e:	4413      	add	r3, r2
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	f241 021c 	movw	r2, #4124	; 0x101c
 8004fa6:	440a      	add	r2, r1
 8004fa8:	4611      	mov	r1, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fb fb3a 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	10624dd3 	.word	0x10624dd3
 8004fbc:	000f4240 	.word	0x000f4240
 8004fc0:	3b9aca00 	.word	0x3b9aca00

08004fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	2103      	movs	r1, #3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f804 	bl	8004fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004fd8:	bf00      	nop
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004fee:	f107 0314 	add.w	r3, r7, #20
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fd fbb6 	bl	8002764 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004ff8:	7afb      	ldrb	r3, [r7, #11]
 8004ffa:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f107 0214 	add.w	r2, r7, #20
 800500a:	2107      	movs	r1, #7
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	4798      	blx	r3
  }
 8005010:	bf00      	nop
 8005012:	3720      	adds	r7, #32
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <_Z41__static_initialization_and_destruction_0ii>:
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d11c      	bne.n	8005062 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800502e:	4293      	cmp	r3, r2
 8005030:	d117      	bne.n	8005062 <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist pub_out_msg;
 8005032:	480e      	ldr	r0, [pc, #56]	; (800506c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8005034:	f7fe ffe8 	bl	8004008 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8005038:	480d      	ldr	r0, [pc, #52]	; (8005070 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800503a:	f7ff f95f 	bl	80042fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
 800503e:	2301      	movs	r3, #1
 8005040:	4a0c      	ldr	r2, [pc, #48]	; (8005074 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005042:	490d      	ldr	r1, [pc, #52]	; (8005078 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8005044:	480d      	ldr	r0, [pc, #52]	; (800507c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005046:	f7ff fa03 	bl	8004450 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
 800504a:	2300      	movs	r3, #0
 800504c:	4a07      	ldr	r2, [pc, #28]	; (800506c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800504e:	490c      	ldr	r1, [pc, #48]	; (8005080 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8005050:	480c      	ldr	r0, [pc, #48]	; (8005084 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005052:	f7fd fef9 	bl	8002e48 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8005056:	2301      	movs	r3, #1
 8005058:	4a0b      	ldr	r2, [pc, #44]	; (8005088 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800505a:	490c      	ldr	r1, [pc, #48]	; (800508c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800505c:	480c      	ldr	r0, [pc, #48]	; (8005090 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800505e:	f7ff fa1b 	bl	8004498 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	240006e8 	.word	0x240006e8
 8005070:	24000730 	.word	0x24000730
 8005074:	08004111 	.word	0x08004111
 8005078:	0800f504 	.word	0x0800f504
 800507c:	24001c70 	.word	0x24001c70
 8005080:	0800f510 	.word	0x0800f510
 8005084:	24001cd0 	.word	0x24001cd0
 8005088:	08004155 	.word	0x08004155
 800508c:	0800f51c 	.word	0x0800f51c
 8005090:	24001ce8 	.word	0x24001ce8

08005094 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3310      	adds	r3, #16
 80050a2:	6839      	ldr	r1, [r7, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe f97a 	bl	800339e <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	3210      	adds	r2, #16
 80050b2:	4610      	mov	r0, r2
 80050b4:	4798      	blx	r3
  }
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 80050ca:	4618      	mov	r0, r3
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3310      	adds	r3, #16
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe fa5e 	bl	80035a4 <_ZN8std_msgs5Int647getTypeEv>
 80050e8:	4603      	mov	r3, r0
  }
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3310      	adds	r3, #16
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe fa5e 	bl	80035c0 <_ZN8std_msgs5Int646getMD5Ev>
 8005104:	4603      	mov	r3, r0
  }
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 800510e:	b580      	push	{r7, lr}
 8005110:	b082      	sub	sp, #8
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3310      	adds	r3, #16
 800511c:	6839      	ldr	r1, [r7, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f7fe ffb4 	bl	800408c <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	3210      	adds	r2, #16
 800512c:	4610      	mov	r0, r2
 800512e:	4798      	blx	r3
  }
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3310      	adds	r3, #16
 800515c:	4618      	mov	r0, r3
 800515e:	f7fe ffbb 	bl	80040d8 <_ZN13geometry_msgs5Twist7getTypeEv>
 8005162:	4603      	mov	r3, r0
  }
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3310      	adds	r3, #16
 8005178:	4618      	mov	r0, r3
 800517a:	f7fe ffbb 	bl	80040f4 <_ZN13geometry_msgs5Twist6getMD5Ev>
 800517e:	4603      	mov	r3, r0
  }
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
    return configured_;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005196:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 800519a:	4618      	mov	r0, r3
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <_GLOBAL__sub_I_pub_out_msg>:
 80051a6:	b580      	push	{r7, lr}
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80051ae:	2001      	movs	r0, #1
 80051b0:	f7ff ff32 	bl	8005018 <_Z41__static_initialization_and_destruction_0ii>
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051be:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <HAL_MspInit+0x3c>)
 80051c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051c4:	4a0b      	ldr	r2, [pc, #44]	; (80051f4 <HAL_MspInit+0x3c>)
 80051c6:	f043 0302 	orr.w	r3, r3, #2
 80051ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80051ce:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_MspInit+0x3c>)
 80051d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	607b      	str	r3, [r7, #4]
 80051da:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80051dc:	2200      	movs	r2, #0
 80051de:	2100      	movs	r1, #0
 80051e0:	2005      	movs	r0, #5
 80051e2:	f000 fe20 	bl	8005e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80051e6:	2005      	movs	r0, #5
 80051e8:	f000 fe37 	bl	8005e5a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	58024400 	.word	0x58024400

080051f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a2b      	ldr	r2, [pc, #172]	; (80052b4 <HAL_TIM_PWM_MspInit+0xbc>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d10f      	bne.n	800522a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800520a:	4b2b      	ldr	r3, [pc, #172]	; (80052b8 <HAL_TIM_PWM_MspInit+0xc0>)
 800520c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005210:	4a29      	ldr	r2, [pc, #164]	; (80052b8 <HAL_TIM_PWM_MspInit+0xc0>)
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800521a:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <HAL_TIM_PWM_MspInit+0xc0>)
 800521c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8005228:	e03d      	b.n	80052a6 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a23      	ldr	r2, [pc, #140]	; (80052bc <HAL_TIM_PWM_MspInit+0xc4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d10f      	bne.n	8005254 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005234:	4b20      	ldr	r3, [pc, #128]	; (80052b8 <HAL_TIM_PWM_MspInit+0xc0>)
 8005236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800523a:	4a1f      	ldr	r2, [pc, #124]	; (80052b8 <HAL_TIM_PWM_MspInit+0xc0>)
 800523c:	f043 0304 	orr.w	r3, r3, #4
 8005240:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005244:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <HAL_TIM_PWM_MspInit+0xc0>)
 8005246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	693b      	ldr	r3, [r7, #16]
}
 8005252:	e028      	b.n	80052a6 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a19      	ldr	r2, [pc, #100]	; (80052c0 <HAL_TIM_PWM_MspInit+0xc8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d10f      	bne.n	800527e <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <HAL_TIM_PWM_MspInit+0xc0>)
 8005260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005264:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <HAL_TIM_PWM_MspInit+0xc0>)
 8005266:	f043 0308 	orr.w	r3, r3, #8
 800526a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800526e:	4b12      	ldr	r3, [pc, #72]	; (80052b8 <HAL_TIM_PWM_MspInit+0xc0>)
 8005270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	68fb      	ldr	r3, [r7, #12]
}
 800527c:	e013      	b.n	80052a6 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM15)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a10      	ldr	r2, [pc, #64]	; (80052c4 <HAL_TIM_PWM_MspInit+0xcc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d10e      	bne.n	80052a6 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_TIM_PWM_MspInit+0xc0>)
 800528a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800528e:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <HAL_TIM_PWM_MspInit+0xc0>)
 8005290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005294:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005298:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <HAL_TIM_PWM_MspInit+0xc0>)
 800529a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800529e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a2:	60bb      	str	r3, [r7, #8]
 80052a4:	68bb      	ldr	r3, [r7, #8]
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40010000 	.word	0x40010000
 80052b8:	58024400 	.word	0x58024400
 80052bc:	40000800 	.word	0x40000800
 80052c0:	40000c00 	.word	0x40000c00
 80052c4:	40014000 	.word	0x40014000

080052c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d8:	d117      	bne.n	800530a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052da:	4b22      	ldr	r3, [pc, #136]	; (8005364 <HAL_TIM_Base_MspInit+0x9c>)
 80052dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052e0:	4a20      	ldr	r2, [pc, #128]	; (8005364 <HAL_TIM_Base_MspInit+0x9c>)
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80052ea:	4b1e      	ldr	r3, [pc, #120]	; (8005364 <HAL_TIM_Base_MspInit+0x9c>)
 80052ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80052f8:	2200      	movs	r2, #0
 80052fa:	2100      	movs	r1, #0
 80052fc:	201c      	movs	r0, #28
 80052fe:	f000 fd92 	bl	8005e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005302:	201c      	movs	r0, #28
 8005304:	f000 fda9 	bl	8005e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005308:	e028      	b.n	800535c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM6)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a16      	ldr	r2, [pc, #88]	; (8005368 <HAL_TIM_Base_MspInit+0xa0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d10f      	bne.n	8005334 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005314:	4b13      	ldr	r3, [pc, #76]	; (8005364 <HAL_TIM_Base_MspInit+0x9c>)
 8005316:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800531a:	4a12      	ldr	r2, [pc, #72]	; (8005364 <HAL_TIM_Base_MspInit+0x9c>)
 800531c:	f043 0310 	orr.w	r3, r3, #16
 8005320:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005324:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <HAL_TIM_Base_MspInit+0x9c>)
 8005326:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	693b      	ldr	r3, [r7, #16]
}
 8005332:	e013      	b.n	800535c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM7)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a0c      	ldr	r2, [pc, #48]	; (800536c <HAL_TIM_Base_MspInit+0xa4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10e      	bne.n	800535c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_TIM_Base_MspInit+0x9c>)
 8005340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005344:	4a07      	ldr	r2, [pc, #28]	; (8005364 <HAL_TIM_Base_MspInit+0x9c>)
 8005346:	f043 0320 	orr.w	r3, r3, #32
 800534a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800534e:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_TIM_Base_MspInit+0x9c>)
 8005350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
}
 800535c:	bf00      	nop
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	58024400 	.word	0x58024400
 8005368:	40001000 	.word	0x40001000
 800536c:	40001400 	.word	0x40001400

08005370 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b090      	sub	sp, #64	; 0x40
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	605a      	str	r2, [r3, #4]
 8005382:	609a      	str	r2, [r3, #8]
 8005384:	60da      	str	r2, [r3, #12]
 8005386:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a78      	ldr	r2, [pc, #480]	; (8005570 <HAL_TIM_Encoder_MspInit+0x200>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d14d      	bne.n	800542e <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005392:	4b78      	ldr	r3, [pc, #480]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 8005394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005398:	4a76      	ldr	r2, [pc, #472]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 800539a:	f043 0302 	orr.w	r3, r3, #2
 800539e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80053a2:	4b74      	ldr	r3, [pc, #464]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 80053a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b0:	4b70      	ldr	r3, [pc, #448]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 80053b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053b6:	4a6f      	ldr	r2, [pc, #444]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 80053b8:	f043 0301 	orr.w	r3, r3, #1
 80053bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053c0:	4b6c      	ldr	r3, [pc, #432]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 80053c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ce:	4b69      	ldr	r3, [pc, #420]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 80053d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053d4:	4a67      	ldr	r2, [pc, #412]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 80053d6:	f043 0302 	orr.w	r3, r3, #2
 80053da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053de:	4b65      	ldr	r3, [pc, #404]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 80053e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	623b      	str	r3, [r7, #32]
 80053ea:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80053ec:	2340      	movs	r3, #64	; 0x40
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f0:	2302      	movs	r3, #2
 80053f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f8:	2300      	movs	r3, #0
 80053fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80053fc:	2302      	movs	r3, #2
 80053fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005404:	4619      	mov	r1, r3
 8005406:	485c      	ldr	r0, [pc, #368]	; (8005578 <HAL_TIM_Encoder_MspInit+0x208>)
 8005408:	f003 fb7c 	bl	8008b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800540c:	2320      	movs	r3, #32
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005410:	2302      	movs	r3, #2
 8005412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005414:	2300      	movs	r3, #0
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005418:	2300      	movs	r3, #0
 800541a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800541c:	2302      	movs	r3, #2
 800541e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005424:	4619      	mov	r1, r3
 8005426:	4855      	ldr	r0, [pc, #340]	; (800557c <HAL_TIM_Encoder_MspInit+0x20c>)
 8005428:	f003 fb6c 	bl	8008b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 800542c:	e09b      	b.n	8005566 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a53      	ldr	r2, [pc, #332]	; (8005580 <HAL_TIM_Encoder_MspInit+0x210>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d12e      	bne.n	8005496 <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005438:	4b4e      	ldr	r3, [pc, #312]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 800543a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800543e:	4a4d      	ldr	r2, [pc, #308]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 8005440:	f043 0302 	orr.w	r3, r3, #2
 8005444:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005448:	4b4a      	ldr	r3, [pc, #296]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 800544a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005456:	4b47      	ldr	r3, [pc, #284]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 8005458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800545c:	4a45      	ldr	r2, [pc, #276]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 800545e:	f043 0304 	orr.w	r3, r3, #4
 8005462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005466:	4b43      	ldr	r3, [pc, #268]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 8005468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005474:	23c0      	movs	r3, #192	; 0xc0
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005478:	2302      	movs	r3, #2
 800547a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547c:	2300      	movs	r3, #0
 800547e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005480:	2300      	movs	r3, #0
 8005482:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005484:	2303      	movs	r3, #3
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800548c:	4619      	mov	r1, r3
 800548e:	483d      	ldr	r0, [pc, #244]	; (8005584 <HAL_TIM_Encoder_MspInit+0x214>)
 8005490:	f003 fb38 	bl	8008b04 <HAL_GPIO_Init>
}
 8005494:	e067      	b.n	8005566 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM23)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a3b      	ldr	r2, [pc, #236]	; (8005588 <HAL_TIM_Encoder_MspInit+0x218>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d12e      	bne.n	80054fe <HAL_TIM_Encoder_MspInit+0x18e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80054a0:	4b34      	ldr	r3, [pc, #208]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 80054a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80054a6:	4a33      	ldr	r2, [pc, #204]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 80054a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80054b0:	4b30      	ldr	r3, [pc, #192]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 80054b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80054b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80054be:	4b2d      	ldr	r3, [pc, #180]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 80054c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054c4:	4a2b      	ldr	r2, [pc, #172]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 80054c6:	f043 0320 	orr.w	r3, r3, #32
 80054ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054ce:	4b29      	ldr	r3, [pc, #164]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 80054d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054dc:	2303      	movs	r3, #3
 80054de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e0:	2302      	movs	r3, #2
 80054e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e8:	2300      	movs	r3, #0
 80054ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80054ec:	230d      	movs	r3, #13
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80054f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054f4:	4619      	mov	r1, r3
 80054f6:	4825      	ldr	r0, [pc, #148]	; (800558c <HAL_TIM_Encoder_MspInit+0x21c>)
 80054f8:	f003 fb04 	bl	8008b04 <HAL_GPIO_Init>
}
 80054fc:	e033      	b.n	8005566 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM24)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a23      	ldr	r2, [pc, #140]	; (8005590 <HAL_TIM_Encoder_MspInit+0x220>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d12e      	bne.n	8005566 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8005508:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 800550a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800550e:	4a19      	ldr	r2, [pc, #100]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 8005510:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005514:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005518:	4b16      	ldr	r3, [pc, #88]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 800551a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800551e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005526:	4b13      	ldr	r3, [pc, #76]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 8005528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800552c:	4a11      	ldr	r2, [pc, #68]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 800552e:	f043 0320 	orr.w	r3, r3, #32
 8005532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005536:	4b0f      	ldr	r3, [pc, #60]	; (8005574 <HAL_TIM_Encoder_MspInit+0x204>)
 8005538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005544:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800554a:	2302      	movs	r3, #2
 800554c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	2300      	movs	r3, #0
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005552:	2300      	movs	r3, #0
 8005554:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8005556:	230e      	movs	r3, #14
 8005558:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800555a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800555e:	4619      	mov	r1, r3
 8005560:	480a      	ldr	r0, [pc, #40]	; (800558c <HAL_TIM_Encoder_MspInit+0x21c>)
 8005562:	f003 facf 	bl	8008b04 <HAL_GPIO_Init>
}
 8005566:	bf00      	nop
 8005568:	3740      	adds	r7, #64	; 0x40
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	40000400 	.word	0x40000400
 8005574:	58024400 	.word	0x58024400
 8005578:	58020000 	.word	0x58020000
 800557c:	58020400 	.word	0x58020400
 8005580:	40010400 	.word	0x40010400
 8005584:	58020800 	.word	0x58020800
 8005588:	4000e000 	.word	0x4000e000
 800558c:	58021400 	.word	0x58021400
 8005590:	4000e400 	.word	0x4000e400

08005594 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08c      	sub	sp, #48	; 0x30
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800559c:	f107 031c 	add.w	r3, r7, #28
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	605a      	str	r2, [r3, #4]
 80055a6:	609a      	str	r2, [r3, #8]
 80055a8:	60da      	str	r2, [r3, #12]
 80055aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a4b      	ldr	r2, [pc, #300]	; (80056e0 <HAL_TIM_MspPostInit+0x14c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d120      	bne.n	80055f8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80055b6:	4b4b      	ldr	r3, [pc, #300]	; (80056e4 <HAL_TIM_MspPostInit+0x150>)
 80055b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055bc:	4a49      	ldr	r2, [pc, #292]	; (80056e4 <HAL_TIM_MspPostInit+0x150>)
 80055be:	f043 0310 	orr.w	r3, r3, #16
 80055c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055c6:	4b47      	ldr	r3, [pc, #284]	; (80056e4 <HAL_TIM_MspPostInit+0x150>)
 80055c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055da:	2302      	movs	r3, #2
 80055dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055e2:	2300      	movs	r3, #0
 80055e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80055e6:	2301      	movs	r3, #1
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055ea:	f107 031c 	add.w	r3, r7, #28
 80055ee:	4619      	mov	r1, r3
 80055f0:	483d      	ldr	r0, [pc, #244]	; (80056e8 <HAL_TIM_MspPostInit+0x154>)
 80055f2:	f003 fa87 	bl	8008b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80055f6:	e06e      	b.n	80056d6 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a3b      	ldr	r2, [pc, #236]	; (80056ec <HAL_TIM_MspPostInit+0x158>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d120      	bne.n	8005644 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005602:	4b38      	ldr	r3, [pc, #224]	; (80056e4 <HAL_TIM_MspPostInit+0x150>)
 8005604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005608:	4a36      	ldr	r2, [pc, #216]	; (80056e4 <HAL_TIM_MspPostInit+0x150>)
 800560a:	f043 0308 	orr.w	r3, r3, #8
 800560e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005612:	4b34      	ldr	r3, [pc, #208]	; (80056e4 <HAL_TIM_MspPostInit+0x150>)
 8005614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005626:	2302      	movs	r3, #2
 8005628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562a:	2300      	movs	r3, #0
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800562e:	2300      	movs	r3, #0
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005632:	2302      	movs	r3, #2
 8005634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005636:	f107 031c 	add.w	r3, r7, #28
 800563a:	4619      	mov	r1, r3
 800563c:	482c      	ldr	r0, [pc, #176]	; (80056f0 <HAL_TIM_MspPostInit+0x15c>)
 800563e:	f003 fa61 	bl	8008b04 <HAL_GPIO_Init>
}
 8005642:	e048      	b.n	80056d6 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a2a      	ldr	r2, [pc, #168]	; (80056f4 <HAL_TIM_MspPostInit+0x160>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d11f      	bne.n	800568e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800564e:	4b25      	ldr	r3, [pc, #148]	; (80056e4 <HAL_TIM_MspPostInit+0x150>)
 8005650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005654:	4a23      	ldr	r2, [pc, #140]	; (80056e4 <HAL_TIM_MspPostInit+0x150>)
 8005656:	f043 0301 	orr.w	r3, r3, #1
 800565a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800565e:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <HAL_TIM_MspPostInit+0x150>)
 8005660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800566c:	2301      	movs	r3, #1
 800566e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005670:	2302      	movs	r3, #2
 8005672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005674:	2300      	movs	r3, #0
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005678:	2300      	movs	r3, #0
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800567c:	2302      	movs	r3, #2
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005680:	f107 031c 	add.w	r3, r7, #28
 8005684:	4619      	mov	r1, r3
 8005686:	481c      	ldr	r0, [pc, #112]	; (80056f8 <HAL_TIM_MspPostInit+0x164>)
 8005688:	f003 fa3c 	bl	8008b04 <HAL_GPIO_Init>
}
 800568c:	e023      	b.n	80056d6 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1a      	ldr	r2, [pc, #104]	; (80056fc <HAL_TIM_MspPostInit+0x168>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d11e      	bne.n	80056d6 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005698:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <HAL_TIM_MspPostInit+0x150>)
 800569a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800569e:	4a11      	ldr	r2, [pc, #68]	; (80056e4 <HAL_TIM_MspPostInit+0x150>)
 80056a0:	f043 0310 	orr.w	r3, r3, #16
 80056a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056a8:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <HAL_TIM_MspPostInit+0x150>)
 80056aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80056b6:	2320      	movs	r3, #32
 80056b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ba:	2302      	movs	r3, #2
 80056bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056c2:	2300      	movs	r3, #0
 80056c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80056c6:	2304      	movs	r3, #4
 80056c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80056ca:	f107 031c 	add.w	r3, r7, #28
 80056ce:	4619      	mov	r1, r3
 80056d0:	4805      	ldr	r0, [pc, #20]	; (80056e8 <HAL_TIM_MspPostInit+0x154>)
 80056d2:	f003 fa17 	bl	8008b04 <HAL_GPIO_Init>
}
 80056d6:	bf00      	nop
 80056d8:	3730      	adds	r7, #48	; 0x30
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40010000 	.word	0x40010000
 80056e4:	58024400 	.word	0x58024400
 80056e8:	58021000 	.word	0x58021000
 80056ec:	40000800 	.word	0x40000800
 80056f0:	58020c00 	.word	0x58020c00
 80056f4:	40000c00 	.word	0x40000c00
 80056f8:	58020000 	.word	0x58020000
 80056fc:	40014000 	.word	0x40014000

08005700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b0b6      	sub	sp, #216	; 0xd8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005708:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	609a      	str	r2, [r3, #8]
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005718:	f107 0310 	add.w	r3, r7, #16
 800571c:	22b4      	movs	r2, #180	; 0xb4
 800571e:	2100      	movs	r1, #0
 8005720:	4618      	mov	r0, r3
 8005722:	f009 fc7d 	bl	800f020 <memset>
  if(huart->Instance==USART3)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a57      	ldr	r2, [pc, #348]	; (8005888 <HAL_UART_MspInit+0x188>)
 800572c:	4293      	cmp	r3, r2
 800572e:	f040 80a7 	bne.w	8005880 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005732:	2302      	movs	r3, #2
 8005734:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005736:	2300      	movs	r3, #0
 8005738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800573c:	f107 0310 	add.w	r3, r7, #16
 8005740:	4618      	mov	r0, r3
 8005742:	f004 fb15 	bl	8009d70 <HAL_RCCEx_PeriphCLKConfig>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800574c:	f7fc fd30 	bl	80021b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005750:	4b4e      	ldr	r3, [pc, #312]	; (800588c <HAL_UART_MspInit+0x18c>)
 8005752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005756:	4a4d      	ldr	r2, [pc, #308]	; (800588c <HAL_UART_MspInit+0x18c>)
 8005758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800575c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005760:	4b4a      	ldr	r3, [pc, #296]	; (800588c <HAL_UART_MspInit+0x18c>)
 8005762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800576e:	4b47      	ldr	r3, [pc, #284]	; (800588c <HAL_UART_MspInit+0x18c>)
 8005770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005774:	4a45      	ldr	r2, [pc, #276]	; (800588c <HAL_UART_MspInit+0x18c>)
 8005776:	f043 0302 	orr.w	r3, r3, #2
 800577a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800577e:	4b43      	ldr	r3, [pc, #268]	; (800588c <HAL_UART_MspInit+0x18c>)
 8005780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800578c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005790:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005794:	2302      	movs	r3, #2
 8005796:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800579a:	2300      	movs	r3, #0
 800579c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80057a6:	2307      	movs	r3, #7
 80057a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4837      	ldr	r0, [pc, #220]	; (8005890 <HAL_UART_MspInit+0x190>)
 80057b4:	f003 f9a6 	bl	8008b04 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80057b8:	4b36      	ldr	r3, [pc, #216]	; (8005894 <HAL_UART_MspInit+0x194>)
 80057ba:	4a37      	ldr	r2, [pc, #220]	; (8005898 <HAL_UART_MspInit+0x198>)
 80057bc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80057be:	4b35      	ldr	r3, [pc, #212]	; (8005894 <HAL_UART_MspInit+0x194>)
 80057c0:	222d      	movs	r2, #45	; 0x2d
 80057c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057c4:	4b33      	ldr	r3, [pc, #204]	; (8005894 <HAL_UART_MspInit+0x194>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057ca:	4b32      	ldr	r3, [pc, #200]	; (8005894 <HAL_UART_MspInit+0x194>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057d0:	4b30      	ldr	r3, [pc, #192]	; (8005894 <HAL_UART_MspInit+0x194>)
 80057d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057d8:	4b2e      	ldr	r3, [pc, #184]	; (8005894 <HAL_UART_MspInit+0x194>)
 80057da:	2200      	movs	r2, #0
 80057dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057de:	4b2d      	ldr	r3, [pc, #180]	; (8005894 <HAL_UART_MspInit+0x194>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80057e4:	4b2b      	ldr	r3, [pc, #172]	; (8005894 <HAL_UART_MspInit+0x194>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80057ea:	4b2a      	ldr	r3, [pc, #168]	; (8005894 <HAL_UART_MspInit+0x194>)
 80057ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057f0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057f2:	4b28      	ldr	r3, [pc, #160]	; (8005894 <HAL_UART_MspInit+0x194>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80057f8:	4826      	ldr	r0, [pc, #152]	; (8005894 <HAL_UART_MspInit+0x194>)
 80057fa:	f000 fb49 	bl	8005e90 <HAL_DMA_Init>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8005804:	f7fc fcd4 	bl	80021b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a22      	ldr	r2, [pc, #136]	; (8005894 <HAL_UART_MspInit+0x194>)
 800580c:	67da      	str	r2, [r3, #124]	; 0x7c
 800580e:	4a21      	ldr	r2, [pc, #132]	; (8005894 <HAL_UART_MspInit+0x194>)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8005814:	4b21      	ldr	r3, [pc, #132]	; (800589c <HAL_UART_MspInit+0x19c>)
 8005816:	4a22      	ldr	r2, [pc, #136]	; (80058a0 <HAL_UART_MspInit+0x1a0>)
 8005818:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800581a:	4b20      	ldr	r3, [pc, #128]	; (800589c <HAL_UART_MspInit+0x19c>)
 800581c:	222e      	movs	r2, #46	; 0x2e
 800581e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005820:	4b1e      	ldr	r3, [pc, #120]	; (800589c <HAL_UART_MspInit+0x19c>)
 8005822:	2240      	movs	r2, #64	; 0x40
 8005824:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005826:	4b1d      	ldr	r3, [pc, #116]	; (800589c <HAL_UART_MspInit+0x19c>)
 8005828:	2200      	movs	r2, #0
 800582a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800582c:	4b1b      	ldr	r3, [pc, #108]	; (800589c <HAL_UART_MspInit+0x19c>)
 800582e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005832:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005834:	4b19      	ldr	r3, [pc, #100]	; (800589c <HAL_UART_MspInit+0x19c>)
 8005836:	2200      	movs	r2, #0
 8005838:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800583a:	4b18      	ldr	r3, [pc, #96]	; (800589c <HAL_UART_MspInit+0x19c>)
 800583c:	2200      	movs	r2, #0
 800583e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005840:	4b16      	ldr	r3, [pc, #88]	; (800589c <HAL_UART_MspInit+0x19c>)
 8005842:	2200      	movs	r2, #0
 8005844:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005846:	4b15      	ldr	r3, [pc, #84]	; (800589c <HAL_UART_MspInit+0x19c>)
 8005848:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800584c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800584e:	4b13      	ldr	r3, [pc, #76]	; (800589c <HAL_UART_MspInit+0x19c>)
 8005850:	2200      	movs	r2, #0
 8005852:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005854:	4811      	ldr	r0, [pc, #68]	; (800589c <HAL_UART_MspInit+0x19c>)
 8005856:	f000 fb1b 	bl	8005e90 <HAL_DMA_Init>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8005860:	f7fc fca6 	bl	80021b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a0d      	ldr	r2, [pc, #52]	; (800589c <HAL_UART_MspInit+0x19c>)
 8005868:	679a      	str	r2, [r3, #120]	; 0x78
 800586a:	4a0c      	ldr	r2, [pc, #48]	; (800589c <HAL_UART_MspInit+0x19c>)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005870:	2200      	movs	r2, #0
 8005872:	2100      	movs	r1, #0
 8005874:	2027      	movs	r0, #39	; 0x27
 8005876:	f000 fad6 	bl	8005e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800587a:	2027      	movs	r0, #39	; 0x27
 800587c:	f000 faed 	bl	8005e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005880:	bf00      	nop
 8005882:	37d8      	adds	r7, #216	; 0xd8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40004800 	.word	0x40004800
 800588c:	58024400 	.word	0x58024400
 8005890:	58020400 	.word	0x58020400
 8005894:	24000468 	.word	0x24000468
 8005898:	40020010 	.word	0x40020010
 800589c:	240004e0 	.word	0x240004e0
 80058a0:	40020028 	.word	0x40020028

080058a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058a8:	e7fe      	b.n	80058a8 <NMI_Handler+0x4>

080058aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058aa:	b480      	push	{r7}
 80058ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058ae:	e7fe      	b.n	80058ae <HardFault_Handler+0x4>

080058b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058b4:	e7fe      	b.n	80058b4 <MemManage_Handler+0x4>

080058b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058b6:	b480      	push	{r7}
 80058b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058ba:	e7fe      	b.n	80058ba <BusFault_Handler+0x4>

080058bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058c0:	e7fe      	b.n	80058c0 <UsageFault_Handler+0x4>

080058c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058c2:	b480      	push	{r7}
 80058c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80058c6:	bf00      	nop
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058d4:	bf00      	nop
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058de:	b480      	push	{r7}
 80058e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058e2:	bf00      	nop
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058f0:	f000 f99e 	bl	8005c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058f4:	bf00      	nop
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80058fc:	bf00      	nop
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
	...

08005908 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800590c:	4802      	ldr	r0, [pc, #8]	; (8005918 <DMA1_Stream0_IRQHandler+0x10>)
 800590e:	f001 fde7 	bl	80074e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005912:	bf00      	nop
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	24000468 	.word	0x24000468

0800591c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005920:	4802      	ldr	r0, [pc, #8]	; (800592c <DMA1_Stream1_IRQHandler+0x10>)
 8005922:	f001 fddd 	bl	80074e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005926:	bf00      	nop
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	240004e0 	.word	0x240004e0

08005930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005934:	4802      	ldr	r0, [pc, #8]	; (8005940 <TIM2_IRQHandler+0x10>)
 8005936:	f006 f917 	bl	800bb68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800593a:	bf00      	nop
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	240000e0 	.word	0x240000e0

08005944 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005948:	4802      	ldr	r0, [pc, #8]	; (8005954 <USART3_IRQHandler+0x10>)
 800594a:	f007 fb33 	bl	800cfb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800594e:	bf00      	nop
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	240003d8 	.word	0x240003d8

08005958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
	return 1;
 800595c:	2301      	movs	r3, #1
}
 800595e:	4618      	mov	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <_kill>:

int _kill(int pid, int sig)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005972:	f009 fb1d 	bl	800efb0 <__errno>
 8005976:	4603      	mov	r3, r0
 8005978:	2216      	movs	r2, #22
 800597a:	601a      	str	r2, [r3, #0]
	return -1;
 800597c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <_exit>:

void _exit (int status)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005990:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff ffe7 	bl	8005968 <_kill>
	while (1) {}		/* Make sure we hang here */
 800599a:	e7fe      	b.n	800599a <_exit+0x12>

0800599c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059a4:	4a14      	ldr	r2, [pc, #80]	; (80059f8 <_sbrk+0x5c>)
 80059a6:	4b15      	ldr	r3, [pc, #84]	; (80059fc <_sbrk+0x60>)
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059b0:	4b13      	ldr	r3, [pc, #76]	; (8005a00 <_sbrk+0x64>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059b8:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <_sbrk+0x64>)
 80059ba:	4a12      	ldr	r2, [pc, #72]	; (8005a04 <_sbrk+0x68>)
 80059bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059be:	4b10      	ldr	r3, [pc, #64]	; (8005a00 <_sbrk+0x64>)
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4413      	add	r3, r2
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d207      	bcs.n	80059dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80059cc:	f009 faf0 	bl	800efb0 <__errno>
 80059d0:	4603      	mov	r3, r0
 80059d2:	220c      	movs	r2, #12
 80059d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059da:	e009      	b.n	80059f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80059dc:	4b08      	ldr	r3, [pc, #32]	; (8005a00 <_sbrk+0x64>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80059e2:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <_sbrk+0x64>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4413      	add	r3, r2
 80059ea:	4a05      	ldr	r2, [pc, #20]	; (8005a00 <_sbrk+0x64>)
 80059ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80059ee:	68fb      	ldr	r3, [r7, #12]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	24050000 	.word	0x24050000
 80059fc:	00000400 	.word	0x00000400
 8005a00:	24001d10 	.word	0x24001d10
 8005a04:	24001d28 	.word	0x24001d28

08005a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005a0c:	4b32      	ldr	r3, [pc, #200]	; (8005ad8 <SystemInit+0xd0>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a12:	4a31      	ldr	r2, [pc, #196]	; (8005ad8 <SystemInit+0xd0>)
 8005a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005a1c:	4b2f      	ldr	r3, [pc, #188]	; (8005adc <SystemInit+0xd4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	2b06      	cmp	r3, #6
 8005a26:	d807      	bhi.n	8005a38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005a28:	4b2c      	ldr	r3, [pc, #176]	; (8005adc <SystemInit+0xd4>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f023 030f 	bic.w	r3, r3, #15
 8005a30:	4a2a      	ldr	r2, [pc, #168]	; (8005adc <SystemInit+0xd4>)
 8005a32:	f043 0307 	orr.w	r3, r3, #7
 8005a36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005a38:	4b29      	ldr	r3, [pc, #164]	; (8005ae0 <SystemInit+0xd8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a28      	ldr	r2, [pc, #160]	; (8005ae0 <SystemInit+0xd8>)
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005a44:	4b26      	ldr	r3, [pc, #152]	; (8005ae0 <SystemInit+0xd8>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005a4a:	4b25      	ldr	r3, [pc, #148]	; (8005ae0 <SystemInit+0xd8>)
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	4924      	ldr	r1, [pc, #144]	; (8005ae0 <SystemInit+0xd8>)
 8005a50:	4b24      	ldr	r3, [pc, #144]	; (8005ae4 <SystemInit+0xdc>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005a56:	4b21      	ldr	r3, [pc, #132]	; (8005adc <SystemInit+0xd4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0308 	and.w	r3, r3, #8
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d007      	beq.n	8005a72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005a62:	4b1e      	ldr	r3, [pc, #120]	; (8005adc <SystemInit+0xd4>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f023 030f 	bic.w	r3, r3, #15
 8005a6a:	4a1c      	ldr	r2, [pc, #112]	; (8005adc <SystemInit+0xd4>)
 8005a6c:	f043 0307 	orr.w	r3, r3, #7
 8005a70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005a72:	4b1b      	ldr	r3, [pc, #108]	; (8005ae0 <SystemInit+0xd8>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005a78:	4b19      	ldr	r3, [pc, #100]	; (8005ae0 <SystemInit+0xd8>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005a7e:	4b18      	ldr	r3, [pc, #96]	; (8005ae0 <SystemInit+0xd8>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005a84:	4b16      	ldr	r3, [pc, #88]	; (8005ae0 <SystemInit+0xd8>)
 8005a86:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <SystemInit+0xe0>)
 8005a88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005a8a:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <SystemInit+0xd8>)
 8005a8c:	4a17      	ldr	r2, [pc, #92]	; (8005aec <SystemInit+0xe4>)
 8005a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005a90:	4b13      	ldr	r3, [pc, #76]	; (8005ae0 <SystemInit+0xd8>)
 8005a92:	4a17      	ldr	r2, [pc, #92]	; (8005af0 <SystemInit+0xe8>)
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005a96:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <SystemInit+0xd8>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005a9c:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <SystemInit+0xd8>)
 8005a9e:	4a14      	ldr	r2, [pc, #80]	; (8005af0 <SystemInit+0xe8>)
 8005aa0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005aa2:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <SystemInit+0xd8>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005aa8:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <SystemInit+0xd8>)
 8005aaa:	4a11      	ldr	r2, [pc, #68]	; (8005af0 <SystemInit+0xe8>)
 8005aac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <SystemInit+0xd8>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005ab4:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <SystemInit+0xd8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <SystemInit+0xd8>)
 8005aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005abe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005ac0:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <SystemInit+0xd8>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <SystemInit+0xec>)
 8005ac8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005acc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005ace:	bf00      	nop
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	e000ed00 	.word	0xe000ed00
 8005adc:	52002000 	.word	0x52002000
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	eaf6ed7f 	.word	0xeaf6ed7f
 8005ae8:	02020200 	.word	0x02020200
 8005aec:	01ff0000 	.word	0x01ff0000
 8005af0:	01010280 	.word	0x01010280
 8005af4:	52004000 	.word	0x52004000

08005af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005afc:	f7ff ff84 	bl	8005a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b00:	480c      	ldr	r0, [pc, #48]	; (8005b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b02:	490d      	ldr	r1, [pc, #52]	; (8005b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b04:	4a0d      	ldr	r2, [pc, #52]	; (8005b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b08:	e002      	b.n	8005b10 <LoopCopyDataInit>

08005b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b0e:	3304      	adds	r3, #4

08005b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b14:	d3f9      	bcc.n	8005b0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b16:	4a0a      	ldr	r2, [pc, #40]	; (8005b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005b18:	4c0a      	ldr	r4, [pc, #40]	; (8005b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b1c:	e001      	b.n	8005b22 <LoopFillZerobss>

08005b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b20:	3204      	adds	r2, #4

08005b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b24:	d3fb      	bcc.n	8005b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005b26:	f009 fa49 	bl	800efbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b2a:	f7fa fda9 	bl	8000680 <main>
  bx  lr
 8005b2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b30:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005b34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005b38:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8005b3c:	0800f6c8 	.word	0x0800f6c8
  ldr r2, =_sbss
 8005b40:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8005b44:	24001d28 	.word	0x24001d28

08005b48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b48:	e7fe      	b.n	8005b48 <ADC3_IRQHandler>
	...

08005b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b52:	2003      	movs	r0, #3
 8005b54:	f000 f95c 	bl	8005e10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b58:	f003 ff34 	bl	80099c4 <HAL_RCC_GetSysClockFreq>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	4b15      	ldr	r3, [pc, #84]	; (8005bb4 <HAL_Init+0x68>)
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	0a1b      	lsrs	r3, r3, #8
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	4913      	ldr	r1, [pc, #76]	; (8005bb8 <HAL_Init+0x6c>)
 8005b6a:	5ccb      	ldrb	r3, [r1, r3]
 8005b6c:	f003 031f 	and.w	r3, r3, #31
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
 8005b74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b76:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <HAL_Init+0x68>)
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	4a0e      	ldr	r2, [pc, #56]	; (8005bb8 <HAL_Init+0x6c>)
 8005b80:	5cd3      	ldrb	r3, [r2, r3]
 8005b82:	f003 031f 	and.w	r3, r3, #31
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8c:	4a0b      	ldr	r2, [pc, #44]	; (8005bbc <HAL_Init+0x70>)
 8005b8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b90:	4a0b      	ldr	r2, [pc, #44]	; (8005bc0 <HAL_Init+0x74>)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b96:	2000      	movs	r0, #0
 8005b98:	f000 f814 	bl	8005bc4 <HAL_InitTick>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e002      	b.n	8005bac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005ba6:	f7ff fb07 	bl	80051b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	58024400 	.word	0x58024400
 8005bb8:	0800f674 	.word	0x0800f674
 8005bbc:	24000004 	.word	0x24000004
 8005bc0:	24000000 	.word	0x24000000

08005bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005bcc:	4b15      	ldr	r3, [pc, #84]	; (8005c24 <HAL_InitTick+0x60>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e021      	b.n	8005c1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005bd8:	4b13      	ldr	r3, [pc, #76]	; (8005c28 <HAL_InitTick+0x64>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	4b11      	ldr	r3, [pc, #68]	; (8005c24 <HAL_InitTick+0x60>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	4619      	mov	r1, r3
 8005be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 f941 	bl	8005e76 <HAL_SYSTICK_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e00e      	b.n	8005c1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b0f      	cmp	r3, #15
 8005c02:	d80a      	bhi.n	8005c1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c04:	2200      	movs	r2, #0
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c0c:	f000 f90b 	bl	8005e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c10:	4a06      	ldr	r2, [pc, #24]	; (8005c2c <HAL_InitTick+0x68>)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	e000      	b.n	8005c1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	2400000c 	.word	0x2400000c
 8005c28:	24000000 	.word	0x24000000
 8005c2c:	24000008 	.word	0x24000008

08005c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005c34:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <HAL_IncTick+0x20>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <HAL_IncTick+0x24>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4413      	add	r3, r2
 8005c40:	4a04      	ldr	r2, [pc, #16]	; (8005c54 <HAL_IncTick+0x24>)
 8005c42:	6013      	str	r3, [r2, #0]
}
 8005c44:	bf00      	nop
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	2400000c 	.word	0x2400000c
 8005c54:	24001d14 	.word	0x24001d14

08005c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8005c5c:	4b03      	ldr	r3, [pc, #12]	; (8005c6c <HAL_GetTick+0x14>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	24001d14 	.word	0x24001d14

08005c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c80:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <__NVIC_SetPriorityGrouping+0x40>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c98:	4b06      	ldr	r3, [pc, #24]	; (8005cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c9e:	4a04      	ldr	r2, [pc, #16]	; (8005cb0 <__NVIC_SetPriorityGrouping+0x40>)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	60d3      	str	r3, [r2, #12]
}
 8005ca4:	bf00      	nop
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	e000ed00 	.word	0xe000ed00
 8005cb4:	05fa0000 	.word	0x05fa0000

08005cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cbc:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	0a1b      	lsrs	r3, r3, #8
 8005cc2:	f003 0307 	and.w	r3, r3, #7
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	e000ed00 	.word	0xe000ed00

08005cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	db0b      	blt.n	8005cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	f003 021f 	and.w	r2, r3, #31
 8005cec:	4907      	ldr	r1, [pc, #28]	; (8005d0c <__NVIC_EnableIRQ+0x38>)
 8005cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8005cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	e000e100 	.word	0xe000e100

08005d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	6039      	str	r1, [r7, #0]
 8005d1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	db0a      	blt.n	8005d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	490c      	ldr	r1, [pc, #48]	; (8005d5c <__NVIC_SetPriority+0x4c>)
 8005d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d2e:	0112      	lsls	r2, r2, #4
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	440b      	add	r3, r1
 8005d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d38:	e00a      	b.n	8005d50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	4908      	ldr	r1, [pc, #32]	; (8005d60 <__NVIC_SetPriority+0x50>)
 8005d40:	88fb      	ldrh	r3, [r7, #6]
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	3b04      	subs	r3, #4
 8005d48:	0112      	lsls	r2, r2, #4
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	761a      	strb	r2, [r3, #24]
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	e000e100 	.word	0xe000e100
 8005d60:	e000ed00 	.word	0xe000ed00

08005d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b089      	sub	sp, #36	; 0x24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f1c3 0307 	rsb	r3, r3, #7
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	bf28      	it	cs
 8005d82:	2304      	movcs	r3, #4
 8005d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	2b06      	cmp	r3, #6
 8005d8c:	d902      	bls.n	8005d94 <NVIC_EncodePriority+0x30>
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	3b03      	subs	r3, #3
 8005d92:	e000      	b.n	8005d96 <NVIC_EncodePriority+0x32>
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43da      	mvns	r2, r3
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	401a      	ands	r2, r3
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	fa01 f303 	lsl.w	r3, r1, r3
 8005db6:	43d9      	mvns	r1, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dbc:	4313      	orrs	r3, r2
         );
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3724      	adds	r7, #36	; 0x24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
	...

08005dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ddc:	d301      	bcc.n	8005de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dde:	2301      	movs	r3, #1
 8005de0:	e00f      	b.n	8005e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005de2:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <SysTick_Config+0x40>)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dea:	210f      	movs	r1, #15
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005df0:	f7ff ff8e 	bl	8005d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005df4:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <SysTick_Config+0x40>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dfa:	4b04      	ldr	r3, [pc, #16]	; (8005e0c <SysTick_Config+0x40>)
 8005dfc:	2207      	movs	r2, #7
 8005dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	e000e010 	.word	0xe000e010

08005e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ff29 	bl	8005c70 <__NVIC_SetPriorityGrouping>
}
 8005e1e:	bf00      	nop
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b086      	sub	sp, #24
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
 8005e32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e34:	f7ff ff40 	bl	8005cb8 <__NVIC_GetPriorityGrouping>
 8005e38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	68b9      	ldr	r1, [r7, #8]
 8005e3e:	6978      	ldr	r0, [r7, #20]
 8005e40:	f7ff ff90 	bl	8005d64 <NVIC_EncodePriority>
 8005e44:	4602      	mov	r2, r0
 8005e46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff ff5f 	bl	8005d10 <__NVIC_SetPriority>
}
 8005e52:	bf00      	nop
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b082      	sub	sp, #8
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	4603      	mov	r3, r0
 8005e62:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff ff33 	bl	8005cd4 <__NVIC_EnableIRQ>
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7ff ffa4 	bl	8005dcc <SysTick_Config>
 8005e84:	4603      	mov	r3, r0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005e98:	f7ff fede 	bl	8005c58 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e314      	b.n	80064d2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a66      	ldr	r2, [pc, #408]	; (8006048 <HAL_DMA_Init+0x1b8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d04a      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a65      	ldr	r2, [pc, #404]	; (800604c <HAL_DMA_Init+0x1bc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d045      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a63      	ldr	r2, [pc, #396]	; (8006050 <HAL_DMA_Init+0x1c0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d040      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a62      	ldr	r2, [pc, #392]	; (8006054 <HAL_DMA_Init+0x1c4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d03b      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a60      	ldr	r2, [pc, #384]	; (8006058 <HAL_DMA_Init+0x1c8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d036      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a5f      	ldr	r2, [pc, #380]	; (800605c <HAL_DMA_Init+0x1cc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d031      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a5d      	ldr	r2, [pc, #372]	; (8006060 <HAL_DMA_Init+0x1d0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d02c      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a5c      	ldr	r2, [pc, #368]	; (8006064 <HAL_DMA_Init+0x1d4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d027      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a5a      	ldr	r2, [pc, #360]	; (8006068 <HAL_DMA_Init+0x1d8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d022      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a59      	ldr	r2, [pc, #356]	; (800606c <HAL_DMA_Init+0x1dc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d01d      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a57      	ldr	r2, [pc, #348]	; (8006070 <HAL_DMA_Init+0x1e0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d018      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a56      	ldr	r2, [pc, #344]	; (8006074 <HAL_DMA_Init+0x1e4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d013      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a54      	ldr	r2, [pc, #336]	; (8006078 <HAL_DMA_Init+0x1e8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00e      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a53      	ldr	r2, [pc, #332]	; (800607c <HAL_DMA_Init+0x1ec>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d009      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a51      	ldr	r2, [pc, #324]	; (8006080 <HAL_DMA_Init+0x1f0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d004      	beq.n	8005f48 <HAL_DMA_Init+0xb8>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a50      	ldr	r2, [pc, #320]	; (8006084 <HAL_DMA_Init+0x1f4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d101      	bne.n	8005f4c <HAL_DMA_Init+0xbc>
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e000      	b.n	8005f4e <HAL_DMA_Init+0xbe>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 813c 	beq.w	80061cc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a37      	ldr	r2, [pc, #220]	; (8006048 <HAL_DMA_Init+0x1b8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d04a      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a36      	ldr	r2, [pc, #216]	; (800604c <HAL_DMA_Init+0x1bc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d045      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a34      	ldr	r2, [pc, #208]	; (8006050 <HAL_DMA_Init+0x1c0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d040      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a33      	ldr	r2, [pc, #204]	; (8006054 <HAL_DMA_Init+0x1c4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d03b      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a31      	ldr	r2, [pc, #196]	; (8006058 <HAL_DMA_Init+0x1c8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d036      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a30      	ldr	r2, [pc, #192]	; (800605c <HAL_DMA_Init+0x1cc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d031      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a2e      	ldr	r2, [pc, #184]	; (8006060 <HAL_DMA_Init+0x1d0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d02c      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a2d      	ldr	r2, [pc, #180]	; (8006064 <HAL_DMA_Init+0x1d4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d027      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a2b      	ldr	r2, [pc, #172]	; (8006068 <HAL_DMA_Init+0x1d8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d022      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a2a      	ldr	r2, [pc, #168]	; (800606c <HAL_DMA_Init+0x1dc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d01d      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a28      	ldr	r2, [pc, #160]	; (8006070 <HAL_DMA_Init+0x1e0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d018      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a27      	ldr	r2, [pc, #156]	; (8006074 <HAL_DMA_Init+0x1e4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d013      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a25      	ldr	r2, [pc, #148]	; (8006078 <HAL_DMA_Init+0x1e8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00e      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a24      	ldr	r2, [pc, #144]	; (800607c <HAL_DMA_Init+0x1ec>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d009      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a22      	ldr	r2, [pc, #136]	; (8006080 <HAL_DMA_Init+0x1f0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d004      	beq.n	8006004 <HAL_DMA_Init+0x174>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a21      	ldr	r2, [pc, #132]	; (8006084 <HAL_DMA_Init+0x1f4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d108      	bne.n	8006016 <HAL_DMA_Init+0x186>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0201 	bic.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	e007      	b.n	8006026 <HAL_DMA_Init+0x196>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0201 	bic.w	r2, r2, #1
 8006024:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006026:	e02f      	b.n	8006088 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006028:	f7ff fe16 	bl	8005c58 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b05      	cmp	r3, #5
 8006034:	d928      	bls.n	8006088 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2203      	movs	r2, #3
 8006040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e244      	b.n	80064d2 <HAL_DMA_Init+0x642>
 8006048:	40020010 	.word	0x40020010
 800604c:	40020028 	.word	0x40020028
 8006050:	40020040 	.word	0x40020040
 8006054:	40020058 	.word	0x40020058
 8006058:	40020070 	.word	0x40020070
 800605c:	40020088 	.word	0x40020088
 8006060:	400200a0 	.word	0x400200a0
 8006064:	400200b8 	.word	0x400200b8
 8006068:	40020410 	.word	0x40020410
 800606c:	40020428 	.word	0x40020428
 8006070:	40020440 	.word	0x40020440
 8006074:	40020458 	.word	0x40020458
 8006078:	40020470 	.word	0x40020470
 800607c:	40020488 	.word	0x40020488
 8006080:	400204a0 	.word	0x400204a0
 8006084:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1c8      	bne.n	8006028 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4b84      	ldr	r3, [pc, #528]	; (80062b4 <HAL_DMA_Init+0x424>)
 80060a2:	4013      	ands	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80060ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d107      	bne.n	80060ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e4:	4313      	orrs	r3, r2
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b28      	cmp	r3, #40	; 0x28
 80060f2:	d903      	bls.n	80060fc <HAL_DMA_Init+0x26c>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	2b2e      	cmp	r3, #46	; 0x2e
 80060fa:	d91f      	bls.n	800613c <HAL_DMA_Init+0x2ac>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b3e      	cmp	r3, #62	; 0x3e
 8006102:	d903      	bls.n	800610c <HAL_DMA_Init+0x27c>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b42      	cmp	r3, #66	; 0x42
 800610a:	d917      	bls.n	800613c <HAL_DMA_Init+0x2ac>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b46      	cmp	r3, #70	; 0x46
 8006112:	d903      	bls.n	800611c <HAL_DMA_Init+0x28c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b48      	cmp	r3, #72	; 0x48
 800611a:	d90f      	bls.n	800613c <HAL_DMA_Init+0x2ac>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b4e      	cmp	r3, #78	; 0x4e
 8006122:	d903      	bls.n	800612c <HAL_DMA_Init+0x29c>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b52      	cmp	r3, #82	; 0x52
 800612a:	d907      	bls.n	800613c <HAL_DMA_Init+0x2ac>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2b73      	cmp	r3, #115	; 0x73
 8006132:	d905      	bls.n	8006140 <HAL_DMA_Init+0x2b0>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b77      	cmp	r3, #119	; 0x77
 800613a:	d801      	bhi.n	8006140 <HAL_DMA_Init+0x2b0>
 800613c:	2301      	movs	r3, #1
 800613e:	e000      	b.n	8006142 <HAL_DMA_Init+0x2b2>
 8006140:	2300      	movs	r3, #0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800614c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f023 0307 	bic.w	r3, r3, #7
 8006164:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	2b04      	cmp	r3, #4
 8006176:	d117      	bne.n	80061a8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00e      	beq.n	80061a8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f002 fb30 	bl	80087f0 <DMA_CheckFifoParam>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d008      	beq.n	80061a8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2240      	movs	r2, #64	; 0x40
 800619a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e194      	b.n	80064d2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f002 fa6b 	bl	800868c <DMA_CalcBaseAndBitshift>
 80061b6:	4603      	mov	r3, r0
 80061b8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	223f      	movs	r2, #63	; 0x3f
 80061c4:	409a      	lsls	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	609a      	str	r2, [r3, #8]
 80061ca:	e0ca      	b.n	8006362 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a39      	ldr	r2, [pc, #228]	; (80062b8 <HAL_DMA_Init+0x428>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d022      	beq.n	800621c <HAL_DMA_Init+0x38c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a38      	ldr	r2, [pc, #224]	; (80062bc <HAL_DMA_Init+0x42c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d01d      	beq.n	800621c <HAL_DMA_Init+0x38c>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a36      	ldr	r2, [pc, #216]	; (80062c0 <HAL_DMA_Init+0x430>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d018      	beq.n	800621c <HAL_DMA_Init+0x38c>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a35      	ldr	r2, [pc, #212]	; (80062c4 <HAL_DMA_Init+0x434>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d013      	beq.n	800621c <HAL_DMA_Init+0x38c>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a33      	ldr	r2, [pc, #204]	; (80062c8 <HAL_DMA_Init+0x438>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00e      	beq.n	800621c <HAL_DMA_Init+0x38c>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a32      	ldr	r2, [pc, #200]	; (80062cc <HAL_DMA_Init+0x43c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d009      	beq.n	800621c <HAL_DMA_Init+0x38c>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a30      	ldr	r2, [pc, #192]	; (80062d0 <HAL_DMA_Init+0x440>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d004      	beq.n	800621c <HAL_DMA_Init+0x38c>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a2f      	ldr	r2, [pc, #188]	; (80062d4 <HAL_DMA_Init+0x444>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d101      	bne.n	8006220 <HAL_DMA_Init+0x390>
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <HAL_DMA_Init+0x392>
 8006220:	2300      	movs	r3, #0
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 8094 	beq.w	8006350 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a22      	ldr	r2, [pc, #136]	; (80062b8 <HAL_DMA_Init+0x428>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d021      	beq.n	8006276 <HAL_DMA_Init+0x3e6>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a21      	ldr	r2, [pc, #132]	; (80062bc <HAL_DMA_Init+0x42c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d01c      	beq.n	8006276 <HAL_DMA_Init+0x3e6>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a1f      	ldr	r2, [pc, #124]	; (80062c0 <HAL_DMA_Init+0x430>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d017      	beq.n	8006276 <HAL_DMA_Init+0x3e6>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1e      	ldr	r2, [pc, #120]	; (80062c4 <HAL_DMA_Init+0x434>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d012      	beq.n	8006276 <HAL_DMA_Init+0x3e6>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <HAL_DMA_Init+0x438>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00d      	beq.n	8006276 <HAL_DMA_Init+0x3e6>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1b      	ldr	r2, [pc, #108]	; (80062cc <HAL_DMA_Init+0x43c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d008      	beq.n	8006276 <HAL_DMA_Init+0x3e6>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a19      	ldr	r2, [pc, #100]	; (80062d0 <HAL_DMA_Init+0x440>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d003      	beq.n	8006276 <HAL_DMA_Init+0x3e6>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a18      	ldr	r2, [pc, #96]	; (80062d4 <HAL_DMA_Init+0x444>)
 8006274:	4293      	cmp	r3, r2
 8006276:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <HAL_DMA_Init+0x448>)
 8006294:	4013      	ands	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2b40      	cmp	r3, #64	; 0x40
 800629e:	d01d      	beq.n	80062dc <HAL_DMA_Init+0x44c>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	2b80      	cmp	r3, #128	; 0x80
 80062a6:	d102      	bne.n	80062ae <HAL_DMA_Init+0x41e>
 80062a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062ac:	e017      	b.n	80062de <HAL_DMA_Init+0x44e>
 80062ae:	2300      	movs	r3, #0
 80062b0:	e015      	b.n	80062de <HAL_DMA_Init+0x44e>
 80062b2:	bf00      	nop
 80062b4:	fe10803f 	.word	0xfe10803f
 80062b8:	58025408 	.word	0x58025408
 80062bc:	5802541c 	.word	0x5802541c
 80062c0:	58025430 	.word	0x58025430
 80062c4:	58025444 	.word	0x58025444
 80062c8:	58025458 	.word	0x58025458
 80062cc:	5802546c 	.word	0x5802546c
 80062d0:	58025480 	.word	0x58025480
 80062d4:	58025494 	.word	0x58025494
 80062d8:	fffe000f 	.word	0xfffe000f
 80062dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68d2      	ldr	r2, [r2, #12]
 80062e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80062e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80062ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80062f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80062fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006304:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800630c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	4b6e      	ldr	r3, [pc, #440]	; (80064dc <HAL_DMA_Init+0x64c>)
 8006324:	4413      	add	r3, r2
 8006326:	4a6e      	ldr	r2, [pc, #440]	; (80064e0 <HAL_DMA_Init+0x650>)
 8006328:	fba2 2303 	umull	r2, r3, r2, r3
 800632c:	091b      	lsrs	r3, r3, #4
 800632e:	009a      	lsls	r2, r3, #2
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f002 f9a9 	bl	800868c <DMA_CalcBaseAndBitshift>
 800633a:	4603      	mov	r3, r0
 800633c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006342:	f003 031f 	and.w	r3, r3, #31
 8006346:	2201      	movs	r2, #1
 8006348:	409a      	lsls	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	605a      	str	r2, [r3, #4]
 800634e:	e008      	b.n	8006362 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2240      	movs	r2, #64	; 0x40
 8006354:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2203      	movs	r2, #3
 800635a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e0b7      	b.n	80064d2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a5f      	ldr	r2, [pc, #380]	; (80064e4 <HAL_DMA_Init+0x654>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d072      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a5d      	ldr	r2, [pc, #372]	; (80064e8 <HAL_DMA_Init+0x658>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d06d      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a5c      	ldr	r2, [pc, #368]	; (80064ec <HAL_DMA_Init+0x65c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d068      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a5a      	ldr	r2, [pc, #360]	; (80064f0 <HAL_DMA_Init+0x660>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d063      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a59      	ldr	r2, [pc, #356]	; (80064f4 <HAL_DMA_Init+0x664>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d05e      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a57      	ldr	r2, [pc, #348]	; (80064f8 <HAL_DMA_Init+0x668>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d059      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a56      	ldr	r2, [pc, #344]	; (80064fc <HAL_DMA_Init+0x66c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d054      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a54      	ldr	r2, [pc, #336]	; (8006500 <HAL_DMA_Init+0x670>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d04f      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a53      	ldr	r2, [pc, #332]	; (8006504 <HAL_DMA_Init+0x674>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d04a      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a51      	ldr	r2, [pc, #324]	; (8006508 <HAL_DMA_Init+0x678>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d045      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a50      	ldr	r2, [pc, #320]	; (800650c <HAL_DMA_Init+0x67c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d040      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a4e      	ldr	r2, [pc, #312]	; (8006510 <HAL_DMA_Init+0x680>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d03b      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a4d      	ldr	r2, [pc, #308]	; (8006514 <HAL_DMA_Init+0x684>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d036      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a4b      	ldr	r2, [pc, #300]	; (8006518 <HAL_DMA_Init+0x688>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d031      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a4a      	ldr	r2, [pc, #296]	; (800651c <HAL_DMA_Init+0x68c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d02c      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a48      	ldr	r2, [pc, #288]	; (8006520 <HAL_DMA_Init+0x690>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d027      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a47      	ldr	r2, [pc, #284]	; (8006524 <HAL_DMA_Init+0x694>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d022      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a45      	ldr	r2, [pc, #276]	; (8006528 <HAL_DMA_Init+0x698>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d01d      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a44      	ldr	r2, [pc, #272]	; (800652c <HAL_DMA_Init+0x69c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d018      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a42      	ldr	r2, [pc, #264]	; (8006530 <HAL_DMA_Init+0x6a0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d013      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a41      	ldr	r2, [pc, #260]	; (8006534 <HAL_DMA_Init+0x6a4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00e      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a3f      	ldr	r2, [pc, #252]	; (8006538 <HAL_DMA_Init+0x6a8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d009      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a3e      	ldr	r2, [pc, #248]	; (800653c <HAL_DMA_Init+0x6ac>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d004      	beq.n	8006452 <HAL_DMA_Init+0x5c2>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a3c      	ldr	r2, [pc, #240]	; (8006540 <HAL_DMA_Init+0x6b0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d101      	bne.n	8006456 <HAL_DMA_Init+0x5c6>
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <HAL_DMA_Init+0x5c8>
 8006456:	2300      	movs	r3, #0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d032      	beq.n	80064c2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f002 fa43 	bl	80088e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	2b80      	cmp	r3, #128	; 0x80
 8006468:	d102      	bne.n	8006470 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006484:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d010      	beq.n	80064b0 <HAL_DMA_Init+0x620>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b08      	cmp	r3, #8
 8006494:	d80c      	bhi.n	80064b0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f002 fac0 	bl	8008a1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	e008      	b.n	80064c2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	a7fdabf8 	.word	0xa7fdabf8
 80064e0:	cccccccd 	.word	0xcccccccd
 80064e4:	40020010 	.word	0x40020010
 80064e8:	40020028 	.word	0x40020028
 80064ec:	40020040 	.word	0x40020040
 80064f0:	40020058 	.word	0x40020058
 80064f4:	40020070 	.word	0x40020070
 80064f8:	40020088 	.word	0x40020088
 80064fc:	400200a0 	.word	0x400200a0
 8006500:	400200b8 	.word	0x400200b8
 8006504:	40020410 	.word	0x40020410
 8006508:	40020428 	.word	0x40020428
 800650c:	40020440 	.word	0x40020440
 8006510:	40020458 	.word	0x40020458
 8006514:	40020470 	.word	0x40020470
 8006518:	40020488 	.word	0x40020488
 800651c:	400204a0 	.word	0x400204a0
 8006520:	400204b8 	.word	0x400204b8
 8006524:	58025408 	.word	0x58025408
 8006528:	5802541c 	.word	0x5802541c
 800652c:	58025430 	.word	0x58025430
 8006530:	58025444 	.word	0x58025444
 8006534:	58025458 	.word	0x58025458
 8006538:	5802546c 	.word	0x5802546c
 800653c:	58025480 	.word	0x58025480
 8006540:	58025494 	.word	0x58025494

08006544 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e226      	b.n	80069ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_DMA_Start_IT+0x2a>
 800656a:	2302      	movs	r3, #2
 800656c:	e21f      	b.n	80069ae <HAL_DMA_Start_IT+0x46a>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b01      	cmp	r3, #1
 8006580:	f040 820a 	bne.w	8006998 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a68      	ldr	r2, [pc, #416]	; (8006738 <HAL_DMA_Start_IT+0x1f4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d04a      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a66      	ldr	r2, [pc, #408]	; (800673c <HAL_DMA_Start_IT+0x1f8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d045      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a65      	ldr	r2, [pc, #404]	; (8006740 <HAL_DMA_Start_IT+0x1fc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d040      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a63      	ldr	r2, [pc, #396]	; (8006744 <HAL_DMA_Start_IT+0x200>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d03b      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a62      	ldr	r2, [pc, #392]	; (8006748 <HAL_DMA_Start_IT+0x204>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d036      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a60      	ldr	r2, [pc, #384]	; (800674c <HAL_DMA_Start_IT+0x208>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d031      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a5f      	ldr	r2, [pc, #380]	; (8006750 <HAL_DMA_Start_IT+0x20c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d02c      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a5d      	ldr	r2, [pc, #372]	; (8006754 <HAL_DMA_Start_IT+0x210>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d027      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a5c      	ldr	r2, [pc, #368]	; (8006758 <HAL_DMA_Start_IT+0x214>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d022      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a5a      	ldr	r2, [pc, #360]	; (800675c <HAL_DMA_Start_IT+0x218>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d01d      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a59      	ldr	r2, [pc, #356]	; (8006760 <HAL_DMA_Start_IT+0x21c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d018      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a57      	ldr	r2, [pc, #348]	; (8006764 <HAL_DMA_Start_IT+0x220>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d013      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a56      	ldr	r2, [pc, #344]	; (8006768 <HAL_DMA_Start_IT+0x224>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00e      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a54      	ldr	r2, [pc, #336]	; (800676c <HAL_DMA_Start_IT+0x228>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d009      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a53      	ldr	r2, [pc, #332]	; (8006770 <HAL_DMA_Start_IT+0x22c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d004      	beq.n	8006632 <HAL_DMA_Start_IT+0xee>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a51      	ldr	r2, [pc, #324]	; (8006774 <HAL_DMA_Start_IT+0x230>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d108      	bne.n	8006644 <HAL_DMA_Start_IT+0x100>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0201 	bic.w	r2, r2, #1
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	e007      	b.n	8006654 <HAL_DMA_Start_IT+0x110>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0201 	bic.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f001 fe6a 	bl	8008334 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a34      	ldr	r2, [pc, #208]	; (8006738 <HAL_DMA_Start_IT+0x1f4>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d04a      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a33      	ldr	r2, [pc, #204]	; (800673c <HAL_DMA_Start_IT+0x1f8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d045      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a31      	ldr	r2, [pc, #196]	; (8006740 <HAL_DMA_Start_IT+0x1fc>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d040      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a30      	ldr	r2, [pc, #192]	; (8006744 <HAL_DMA_Start_IT+0x200>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d03b      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a2e      	ldr	r2, [pc, #184]	; (8006748 <HAL_DMA_Start_IT+0x204>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d036      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a2d      	ldr	r2, [pc, #180]	; (800674c <HAL_DMA_Start_IT+0x208>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d031      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a2b      	ldr	r2, [pc, #172]	; (8006750 <HAL_DMA_Start_IT+0x20c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d02c      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a2a      	ldr	r2, [pc, #168]	; (8006754 <HAL_DMA_Start_IT+0x210>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d027      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a28      	ldr	r2, [pc, #160]	; (8006758 <HAL_DMA_Start_IT+0x214>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d022      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a27      	ldr	r2, [pc, #156]	; (800675c <HAL_DMA_Start_IT+0x218>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d01d      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a25      	ldr	r2, [pc, #148]	; (8006760 <HAL_DMA_Start_IT+0x21c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d018      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a24      	ldr	r2, [pc, #144]	; (8006764 <HAL_DMA_Start_IT+0x220>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d013      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a22      	ldr	r2, [pc, #136]	; (8006768 <HAL_DMA_Start_IT+0x224>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00e      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a21      	ldr	r2, [pc, #132]	; (800676c <HAL_DMA_Start_IT+0x228>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d009      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1f      	ldr	r2, [pc, #124]	; (8006770 <HAL_DMA_Start_IT+0x22c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d004      	beq.n	8006700 <HAL_DMA_Start_IT+0x1bc>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a1e      	ldr	r2, [pc, #120]	; (8006774 <HAL_DMA_Start_IT+0x230>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d101      	bne.n	8006704 <HAL_DMA_Start_IT+0x1c0>
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <HAL_DMA_Start_IT+0x1c2>
 8006704:	2300      	movs	r3, #0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d036      	beq.n	8006778 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f023 021e 	bic.w	r2, r3, #30
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0216 	orr.w	r2, r2, #22
 800671c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d03e      	beq.n	80067a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f042 0208 	orr.w	r2, r2, #8
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	e035      	b.n	80067a4 <HAL_DMA_Start_IT+0x260>
 8006738:	40020010 	.word	0x40020010
 800673c:	40020028 	.word	0x40020028
 8006740:	40020040 	.word	0x40020040
 8006744:	40020058 	.word	0x40020058
 8006748:	40020070 	.word	0x40020070
 800674c:	40020088 	.word	0x40020088
 8006750:	400200a0 	.word	0x400200a0
 8006754:	400200b8 	.word	0x400200b8
 8006758:	40020410 	.word	0x40020410
 800675c:	40020428 	.word	0x40020428
 8006760:	40020440 	.word	0x40020440
 8006764:	40020458 	.word	0x40020458
 8006768:	40020470 	.word	0x40020470
 800676c:	40020488 	.word	0x40020488
 8006770:	400204a0 	.word	0x400204a0
 8006774:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f023 020e 	bic.w	r2, r3, #14
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 020a 	orr.w	r2, r2, #10
 800678a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d007      	beq.n	80067a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0204 	orr.w	r2, r2, #4
 80067a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a83      	ldr	r2, [pc, #524]	; (80069b8 <HAL_DMA_Start_IT+0x474>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d072      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a82      	ldr	r2, [pc, #520]	; (80069bc <HAL_DMA_Start_IT+0x478>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d06d      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a80      	ldr	r2, [pc, #512]	; (80069c0 <HAL_DMA_Start_IT+0x47c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d068      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a7f      	ldr	r2, [pc, #508]	; (80069c4 <HAL_DMA_Start_IT+0x480>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d063      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a7d      	ldr	r2, [pc, #500]	; (80069c8 <HAL_DMA_Start_IT+0x484>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d05e      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a7c      	ldr	r2, [pc, #496]	; (80069cc <HAL_DMA_Start_IT+0x488>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d059      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a7a      	ldr	r2, [pc, #488]	; (80069d0 <HAL_DMA_Start_IT+0x48c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d054      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a79      	ldr	r2, [pc, #484]	; (80069d4 <HAL_DMA_Start_IT+0x490>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d04f      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a77      	ldr	r2, [pc, #476]	; (80069d8 <HAL_DMA_Start_IT+0x494>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d04a      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a76      	ldr	r2, [pc, #472]	; (80069dc <HAL_DMA_Start_IT+0x498>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d045      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a74      	ldr	r2, [pc, #464]	; (80069e0 <HAL_DMA_Start_IT+0x49c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d040      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a73      	ldr	r2, [pc, #460]	; (80069e4 <HAL_DMA_Start_IT+0x4a0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d03b      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a71      	ldr	r2, [pc, #452]	; (80069e8 <HAL_DMA_Start_IT+0x4a4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d036      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a70      	ldr	r2, [pc, #448]	; (80069ec <HAL_DMA_Start_IT+0x4a8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d031      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a6e      	ldr	r2, [pc, #440]	; (80069f0 <HAL_DMA_Start_IT+0x4ac>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d02c      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a6d      	ldr	r2, [pc, #436]	; (80069f4 <HAL_DMA_Start_IT+0x4b0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d027      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a6b      	ldr	r2, [pc, #428]	; (80069f8 <HAL_DMA_Start_IT+0x4b4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d022      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a6a      	ldr	r2, [pc, #424]	; (80069fc <HAL_DMA_Start_IT+0x4b8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d01d      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a68      	ldr	r2, [pc, #416]	; (8006a00 <HAL_DMA_Start_IT+0x4bc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d018      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a67      	ldr	r2, [pc, #412]	; (8006a04 <HAL_DMA_Start_IT+0x4c0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d013      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a65      	ldr	r2, [pc, #404]	; (8006a08 <HAL_DMA_Start_IT+0x4c4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00e      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a64      	ldr	r2, [pc, #400]	; (8006a0c <HAL_DMA_Start_IT+0x4c8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d009      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a62      	ldr	r2, [pc, #392]	; (8006a10 <HAL_DMA_Start_IT+0x4cc>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d004      	beq.n	8006894 <HAL_DMA_Start_IT+0x350>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a61      	ldr	r2, [pc, #388]	; (8006a14 <HAL_DMA_Start_IT+0x4d0>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d101      	bne.n	8006898 <HAL_DMA_Start_IT+0x354>
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <HAL_DMA_Start_IT+0x356>
 8006898:	2300      	movs	r3, #0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d01a      	beq.n	80068d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d007      	beq.n	80068bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d007      	beq.n	80068d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a37      	ldr	r2, [pc, #220]	; (80069b8 <HAL_DMA_Start_IT+0x474>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d04a      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a36      	ldr	r2, [pc, #216]	; (80069bc <HAL_DMA_Start_IT+0x478>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d045      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a34      	ldr	r2, [pc, #208]	; (80069c0 <HAL_DMA_Start_IT+0x47c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d040      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a33      	ldr	r2, [pc, #204]	; (80069c4 <HAL_DMA_Start_IT+0x480>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d03b      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a31      	ldr	r2, [pc, #196]	; (80069c8 <HAL_DMA_Start_IT+0x484>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d036      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a30      	ldr	r2, [pc, #192]	; (80069cc <HAL_DMA_Start_IT+0x488>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d031      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a2e      	ldr	r2, [pc, #184]	; (80069d0 <HAL_DMA_Start_IT+0x48c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d02c      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a2d      	ldr	r2, [pc, #180]	; (80069d4 <HAL_DMA_Start_IT+0x490>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d027      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a2b      	ldr	r2, [pc, #172]	; (80069d8 <HAL_DMA_Start_IT+0x494>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d022      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a2a      	ldr	r2, [pc, #168]	; (80069dc <HAL_DMA_Start_IT+0x498>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d01d      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a28      	ldr	r2, [pc, #160]	; (80069e0 <HAL_DMA_Start_IT+0x49c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d018      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a27      	ldr	r2, [pc, #156]	; (80069e4 <HAL_DMA_Start_IT+0x4a0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d013      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a25      	ldr	r2, [pc, #148]	; (80069e8 <HAL_DMA_Start_IT+0x4a4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00e      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a24      	ldr	r2, [pc, #144]	; (80069ec <HAL_DMA_Start_IT+0x4a8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d009      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a22      	ldr	r2, [pc, #136]	; (80069f0 <HAL_DMA_Start_IT+0x4ac>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d004      	beq.n	8006974 <HAL_DMA_Start_IT+0x430>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a21      	ldr	r2, [pc, #132]	; (80069f4 <HAL_DMA_Start_IT+0x4b0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d108      	bne.n	8006986 <HAL_DMA_Start_IT+0x442>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0201 	orr.w	r2, r2, #1
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	e012      	b.n	80069ac <HAL_DMA_Start_IT+0x468>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0201 	orr.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	e009      	b.n	80069ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800699e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	40020010 	.word	0x40020010
 80069bc:	40020028 	.word	0x40020028
 80069c0:	40020040 	.word	0x40020040
 80069c4:	40020058 	.word	0x40020058
 80069c8:	40020070 	.word	0x40020070
 80069cc:	40020088 	.word	0x40020088
 80069d0:	400200a0 	.word	0x400200a0
 80069d4:	400200b8 	.word	0x400200b8
 80069d8:	40020410 	.word	0x40020410
 80069dc:	40020428 	.word	0x40020428
 80069e0:	40020440 	.word	0x40020440
 80069e4:	40020458 	.word	0x40020458
 80069e8:	40020470 	.word	0x40020470
 80069ec:	40020488 	.word	0x40020488
 80069f0:	400204a0 	.word	0x400204a0
 80069f4:	400204b8 	.word	0x400204b8
 80069f8:	58025408 	.word	0x58025408
 80069fc:	5802541c 	.word	0x5802541c
 8006a00:	58025430 	.word	0x58025430
 8006a04:	58025444 	.word	0x58025444
 8006a08:	58025458 	.word	0x58025458
 8006a0c:	5802546c 	.word	0x5802546c
 8006a10:	58025480 	.word	0x58025480
 8006a14:	58025494 	.word	0x58025494

08006a18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006a20:	f7ff f91a 	bl	8005c58 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e2dc      	b.n	8006fea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d008      	beq.n	8006a4e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2280      	movs	r2, #128	; 0x80
 8006a40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e2cd      	b.n	8006fea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a76      	ldr	r2, [pc, #472]	; (8006c2c <HAL_DMA_Abort+0x214>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d04a      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a74      	ldr	r2, [pc, #464]	; (8006c30 <HAL_DMA_Abort+0x218>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d045      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a73      	ldr	r2, [pc, #460]	; (8006c34 <HAL_DMA_Abort+0x21c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d040      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a71      	ldr	r2, [pc, #452]	; (8006c38 <HAL_DMA_Abort+0x220>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d03b      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a70      	ldr	r2, [pc, #448]	; (8006c3c <HAL_DMA_Abort+0x224>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d036      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a6e      	ldr	r2, [pc, #440]	; (8006c40 <HAL_DMA_Abort+0x228>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d031      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a6d      	ldr	r2, [pc, #436]	; (8006c44 <HAL_DMA_Abort+0x22c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d02c      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a6b      	ldr	r2, [pc, #428]	; (8006c48 <HAL_DMA_Abort+0x230>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d027      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a6a      	ldr	r2, [pc, #424]	; (8006c4c <HAL_DMA_Abort+0x234>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d022      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a68      	ldr	r2, [pc, #416]	; (8006c50 <HAL_DMA_Abort+0x238>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d01d      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a67      	ldr	r2, [pc, #412]	; (8006c54 <HAL_DMA_Abort+0x23c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d018      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a65      	ldr	r2, [pc, #404]	; (8006c58 <HAL_DMA_Abort+0x240>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d013      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a64      	ldr	r2, [pc, #400]	; (8006c5c <HAL_DMA_Abort+0x244>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00e      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a62      	ldr	r2, [pc, #392]	; (8006c60 <HAL_DMA_Abort+0x248>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d009      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a61      	ldr	r2, [pc, #388]	; (8006c64 <HAL_DMA_Abort+0x24c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d004      	beq.n	8006aee <HAL_DMA_Abort+0xd6>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a5f      	ldr	r2, [pc, #380]	; (8006c68 <HAL_DMA_Abort+0x250>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d101      	bne.n	8006af2 <HAL_DMA_Abort+0xda>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <HAL_DMA_Abort+0xdc>
 8006af2:	2300      	movs	r3, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d013      	beq.n	8006b20 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 021e 	bic.w	r2, r2, #30
 8006b06:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695a      	ldr	r2, [r3, #20]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b16:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	e00a      	b.n	8006b36 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 020e 	bic.w	r2, r2, #14
 8006b2e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a3c      	ldr	r2, [pc, #240]	; (8006c2c <HAL_DMA_Abort+0x214>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d072      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a3a      	ldr	r2, [pc, #232]	; (8006c30 <HAL_DMA_Abort+0x218>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d06d      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a39      	ldr	r2, [pc, #228]	; (8006c34 <HAL_DMA_Abort+0x21c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d068      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a37      	ldr	r2, [pc, #220]	; (8006c38 <HAL_DMA_Abort+0x220>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d063      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a36      	ldr	r2, [pc, #216]	; (8006c3c <HAL_DMA_Abort+0x224>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d05e      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a34      	ldr	r2, [pc, #208]	; (8006c40 <HAL_DMA_Abort+0x228>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d059      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a33      	ldr	r2, [pc, #204]	; (8006c44 <HAL_DMA_Abort+0x22c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d054      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a31      	ldr	r2, [pc, #196]	; (8006c48 <HAL_DMA_Abort+0x230>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d04f      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a30      	ldr	r2, [pc, #192]	; (8006c4c <HAL_DMA_Abort+0x234>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d04a      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a2e      	ldr	r2, [pc, #184]	; (8006c50 <HAL_DMA_Abort+0x238>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d045      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a2d      	ldr	r2, [pc, #180]	; (8006c54 <HAL_DMA_Abort+0x23c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d040      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a2b      	ldr	r2, [pc, #172]	; (8006c58 <HAL_DMA_Abort+0x240>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d03b      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a2a      	ldr	r2, [pc, #168]	; (8006c5c <HAL_DMA_Abort+0x244>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d036      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a28      	ldr	r2, [pc, #160]	; (8006c60 <HAL_DMA_Abort+0x248>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d031      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a27      	ldr	r2, [pc, #156]	; (8006c64 <HAL_DMA_Abort+0x24c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d02c      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a25      	ldr	r2, [pc, #148]	; (8006c68 <HAL_DMA_Abort+0x250>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d027      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a24      	ldr	r2, [pc, #144]	; (8006c6c <HAL_DMA_Abort+0x254>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d022      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a22      	ldr	r2, [pc, #136]	; (8006c70 <HAL_DMA_Abort+0x258>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01d      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a21      	ldr	r2, [pc, #132]	; (8006c74 <HAL_DMA_Abort+0x25c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d018      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1f      	ldr	r2, [pc, #124]	; (8006c78 <HAL_DMA_Abort+0x260>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1e      	ldr	r2, [pc, #120]	; (8006c7c <HAL_DMA_Abort+0x264>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1c      	ldr	r2, [pc, #112]	; (8006c80 <HAL_DMA_Abort+0x268>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a1b      	ldr	r2, [pc, #108]	; (8006c84 <HAL_DMA_Abort+0x26c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_DMA_Abort+0x20e>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a19      	ldr	r2, [pc, #100]	; (8006c88 <HAL_DMA_Abort+0x270>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d132      	bne.n	8006c8c <HAL_DMA_Abort+0x274>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e031      	b.n	8006c8e <HAL_DMA_Abort+0x276>
 8006c2a:	bf00      	nop
 8006c2c:	40020010 	.word	0x40020010
 8006c30:	40020028 	.word	0x40020028
 8006c34:	40020040 	.word	0x40020040
 8006c38:	40020058 	.word	0x40020058
 8006c3c:	40020070 	.word	0x40020070
 8006c40:	40020088 	.word	0x40020088
 8006c44:	400200a0 	.word	0x400200a0
 8006c48:	400200b8 	.word	0x400200b8
 8006c4c:	40020410 	.word	0x40020410
 8006c50:	40020428 	.word	0x40020428
 8006c54:	40020440 	.word	0x40020440
 8006c58:	40020458 	.word	0x40020458
 8006c5c:	40020470 	.word	0x40020470
 8006c60:	40020488 	.word	0x40020488
 8006c64:	400204a0 	.word	0x400204a0
 8006c68:	400204b8 	.word	0x400204b8
 8006c6c:	58025408 	.word	0x58025408
 8006c70:	5802541c 	.word	0x5802541c
 8006c74:	58025430 	.word	0x58025430
 8006c78:	58025444 	.word	0x58025444
 8006c7c:	58025458 	.word	0x58025458
 8006c80:	5802546c 	.word	0x5802546c
 8006c84:	58025480 	.word	0x58025480
 8006c88:	58025494 	.word	0x58025494
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d007      	beq.n	8006ca2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ca0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a6d      	ldr	r2, [pc, #436]	; (8006e5c <HAL_DMA_Abort+0x444>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d04a      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a6b      	ldr	r2, [pc, #428]	; (8006e60 <HAL_DMA_Abort+0x448>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d045      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a6a      	ldr	r2, [pc, #424]	; (8006e64 <HAL_DMA_Abort+0x44c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d040      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a68      	ldr	r2, [pc, #416]	; (8006e68 <HAL_DMA_Abort+0x450>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d03b      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a67      	ldr	r2, [pc, #412]	; (8006e6c <HAL_DMA_Abort+0x454>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d036      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a65      	ldr	r2, [pc, #404]	; (8006e70 <HAL_DMA_Abort+0x458>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d031      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a64      	ldr	r2, [pc, #400]	; (8006e74 <HAL_DMA_Abort+0x45c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d02c      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a62      	ldr	r2, [pc, #392]	; (8006e78 <HAL_DMA_Abort+0x460>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d027      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a61      	ldr	r2, [pc, #388]	; (8006e7c <HAL_DMA_Abort+0x464>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d022      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a5f      	ldr	r2, [pc, #380]	; (8006e80 <HAL_DMA_Abort+0x468>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d01d      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a5e      	ldr	r2, [pc, #376]	; (8006e84 <HAL_DMA_Abort+0x46c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d018      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a5c      	ldr	r2, [pc, #368]	; (8006e88 <HAL_DMA_Abort+0x470>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d013      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a5b      	ldr	r2, [pc, #364]	; (8006e8c <HAL_DMA_Abort+0x474>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00e      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a59      	ldr	r2, [pc, #356]	; (8006e90 <HAL_DMA_Abort+0x478>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d009      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a58      	ldr	r2, [pc, #352]	; (8006e94 <HAL_DMA_Abort+0x47c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d004      	beq.n	8006d42 <HAL_DMA_Abort+0x32a>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a56      	ldr	r2, [pc, #344]	; (8006e98 <HAL_DMA_Abort+0x480>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d108      	bne.n	8006d54 <HAL_DMA_Abort+0x33c>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0201 	bic.w	r2, r2, #1
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	e007      	b.n	8006d64 <HAL_DMA_Abort+0x34c>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0201 	bic.w	r2, r2, #1
 8006d62:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006d64:	e013      	b.n	8006d8e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d66:	f7fe ff77 	bl	8005c58 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b05      	cmp	r3, #5
 8006d72:	d90c      	bls.n	8006d8e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2203      	movs	r2, #3
 8006d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e12d      	b.n	8006fea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1e5      	bne.n	8006d66 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a2f      	ldr	r2, [pc, #188]	; (8006e5c <HAL_DMA_Abort+0x444>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d04a      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a2d      	ldr	r2, [pc, #180]	; (8006e60 <HAL_DMA_Abort+0x448>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d045      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a2c      	ldr	r2, [pc, #176]	; (8006e64 <HAL_DMA_Abort+0x44c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d040      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a2a      	ldr	r2, [pc, #168]	; (8006e68 <HAL_DMA_Abort+0x450>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d03b      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a29      	ldr	r2, [pc, #164]	; (8006e6c <HAL_DMA_Abort+0x454>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d036      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a27      	ldr	r2, [pc, #156]	; (8006e70 <HAL_DMA_Abort+0x458>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d031      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a26      	ldr	r2, [pc, #152]	; (8006e74 <HAL_DMA_Abort+0x45c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d02c      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a24      	ldr	r2, [pc, #144]	; (8006e78 <HAL_DMA_Abort+0x460>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d027      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a23      	ldr	r2, [pc, #140]	; (8006e7c <HAL_DMA_Abort+0x464>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d022      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a21      	ldr	r2, [pc, #132]	; (8006e80 <HAL_DMA_Abort+0x468>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d01d      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a20      	ldr	r2, [pc, #128]	; (8006e84 <HAL_DMA_Abort+0x46c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d018      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a1e      	ldr	r2, [pc, #120]	; (8006e88 <HAL_DMA_Abort+0x470>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d013      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1d      	ldr	r2, [pc, #116]	; (8006e8c <HAL_DMA_Abort+0x474>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d00e      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1b      	ldr	r2, [pc, #108]	; (8006e90 <HAL_DMA_Abort+0x478>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d009      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a1a      	ldr	r2, [pc, #104]	; (8006e94 <HAL_DMA_Abort+0x47c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d004      	beq.n	8006e3a <HAL_DMA_Abort+0x422>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a18      	ldr	r2, [pc, #96]	; (8006e98 <HAL_DMA_Abort+0x480>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d101      	bne.n	8006e3e <HAL_DMA_Abort+0x426>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <HAL_DMA_Abort+0x428>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d02b      	beq.n	8006e9c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e48:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	223f      	movs	r2, #63	; 0x3f
 8006e54:	409a      	lsls	r2, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	609a      	str	r2, [r3, #8]
 8006e5a:	e02a      	b.n	8006eb2 <HAL_DMA_Abort+0x49a>
 8006e5c:	40020010 	.word	0x40020010
 8006e60:	40020028 	.word	0x40020028
 8006e64:	40020040 	.word	0x40020040
 8006e68:	40020058 	.word	0x40020058
 8006e6c:	40020070 	.word	0x40020070
 8006e70:	40020088 	.word	0x40020088
 8006e74:	400200a0 	.word	0x400200a0
 8006e78:	400200b8 	.word	0x400200b8
 8006e7c:	40020410 	.word	0x40020410
 8006e80:	40020428 	.word	0x40020428
 8006e84:	40020440 	.word	0x40020440
 8006e88:	40020458 	.word	0x40020458
 8006e8c:	40020470 	.word	0x40020470
 8006e90:	40020488 	.word	0x40020488
 8006e94:	400204a0 	.word	0x400204a0
 8006e98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea6:	f003 031f 	and.w	r3, r3, #31
 8006eaa:	2201      	movs	r2, #1
 8006eac:	409a      	lsls	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a4f      	ldr	r2, [pc, #316]	; (8006ff4 <HAL_DMA_Abort+0x5dc>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d072      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a4d      	ldr	r2, [pc, #308]	; (8006ff8 <HAL_DMA_Abort+0x5e0>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d06d      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a4c      	ldr	r2, [pc, #304]	; (8006ffc <HAL_DMA_Abort+0x5e4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d068      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a4a      	ldr	r2, [pc, #296]	; (8007000 <HAL_DMA_Abort+0x5e8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d063      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a49      	ldr	r2, [pc, #292]	; (8007004 <HAL_DMA_Abort+0x5ec>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d05e      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a47      	ldr	r2, [pc, #284]	; (8007008 <HAL_DMA_Abort+0x5f0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d059      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a46      	ldr	r2, [pc, #280]	; (800700c <HAL_DMA_Abort+0x5f4>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d054      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a44      	ldr	r2, [pc, #272]	; (8007010 <HAL_DMA_Abort+0x5f8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d04f      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a43      	ldr	r2, [pc, #268]	; (8007014 <HAL_DMA_Abort+0x5fc>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d04a      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a41      	ldr	r2, [pc, #260]	; (8007018 <HAL_DMA_Abort+0x600>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d045      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a40      	ldr	r2, [pc, #256]	; (800701c <HAL_DMA_Abort+0x604>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d040      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a3e      	ldr	r2, [pc, #248]	; (8007020 <HAL_DMA_Abort+0x608>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d03b      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a3d      	ldr	r2, [pc, #244]	; (8007024 <HAL_DMA_Abort+0x60c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d036      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a3b      	ldr	r2, [pc, #236]	; (8007028 <HAL_DMA_Abort+0x610>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d031      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a3a      	ldr	r2, [pc, #232]	; (800702c <HAL_DMA_Abort+0x614>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d02c      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a38      	ldr	r2, [pc, #224]	; (8007030 <HAL_DMA_Abort+0x618>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d027      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a37      	ldr	r2, [pc, #220]	; (8007034 <HAL_DMA_Abort+0x61c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d022      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a35      	ldr	r2, [pc, #212]	; (8007038 <HAL_DMA_Abort+0x620>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01d      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a34      	ldr	r2, [pc, #208]	; (800703c <HAL_DMA_Abort+0x624>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d018      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a32      	ldr	r2, [pc, #200]	; (8007040 <HAL_DMA_Abort+0x628>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a31      	ldr	r2, [pc, #196]	; (8007044 <HAL_DMA_Abort+0x62c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00e      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a2f      	ldr	r2, [pc, #188]	; (8007048 <HAL_DMA_Abort+0x630>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d009      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a2e      	ldr	r2, [pc, #184]	; (800704c <HAL_DMA_Abort+0x634>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_DMA_Abort+0x58a>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a2c      	ldr	r2, [pc, #176]	; (8007050 <HAL_DMA_Abort+0x638>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d101      	bne.n	8006fa6 <HAL_DMA_Abort+0x58e>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <HAL_DMA_Abort+0x590>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d015      	beq.n	8006fd8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fb4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00c      	beq.n	8006fd8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fcc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006fd6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	40020010 	.word	0x40020010
 8006ff8:	40020028 	.word	0x40020028
 8006ffc:	40020040 	.word	0x40020040
 8007000:	40020058 	.word	0x40020058
 8007004:	40020070 	.word	0x40020070
 8007008:	40020088 	.word	0x40020088
 800700c:	400200a0 	.word	0x400200a0
 8007010:	400200b8 	.word	0x400200b8
 8007014:	40020410 	.word	0x40020410
 8007018:	40020428 	.word	0x40020428
 800701c:	40020440 	.word	0x40020440
 8007020:	40020458 	.word	0x40020458
 8007024:	40020470 	.word	0x40020470
 8007028:	40020488 	.word	0x40020488
 800702c:	400204a0 	.word	0x400204a0
 8007030:	400204b8 	.word	0x400204b8
 8007034:	58025408 	.word	0x58025408
 8007038:	5802541c 	.word	0x5802541c
 800703c:	58025430 	.word	0x58025430
 8007040:	58025444 	.word	0x58025444
 8007044:	58025458 	.word	0x58025458
 8007048:	5802546c 	.word	0x5802546c
 800704c:	58025480 	.word	0x58025480
 8007050:	58025494 	.word	0x58025494

08007054 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e237      	b.n	80074d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d004      	beq.n	800707c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2280      	movs	r2, #128	; 0x80
 8007076:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e22c      	b.n	80074d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a5c      	ldr	r2, [pc, #368]	; (80071f4 <HAL_DMA_Abort_IT+0x1a0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d04a      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a5b      	ldr	r2, [pc, #364]	; (80071f8 <HAL_DMA_Abort_IT+0x1a4>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d045      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a59      	ldr	r2, [pc, #356]	; (80071fc <HAL_DMA_Abort_IT+0x1a8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d040      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a58      	ldr	r2, [pc, #352]	; (8007200 <HAL_DMA_Abort_IT+0x1ac>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d03b      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a56      	ldr	r2, [pc, #344]	; (8007204 <HAL_DMA_Abort_IT+0x1b0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d036      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a55      	ldr	r2, [pc, #340]	; (8007208 <HAL_DMA_Abort_IT+0x1b4>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d031      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a53      	ldr	r2, [pc, #332]	; (800720c <HAL_DMA_Abort_IT+0x1b8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d02c      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a52      	ldr	r2, [pc, #328]	; (8007210 <HAL_DMA_Abort_IT+0x1bc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d027      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a50      	ldr	r2, [pc, #320]	; (8007214 <HAL_DMA_Abort_IT+0x1c0>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d022      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a4f      	ldr	r2, [pc, #316]	; (8007218 <HAL_DMA_Abort_IT+0x1c4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d01d      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a4d      	ldr	r2, [pc, #308]	; (800721c <HAL_DMA_Abort_IT+0x1c8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d018      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a4c      	ldr	r2, [pc, #304]	; (8007220 <HAL_DMA_Abort_IT+0x1cc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d013      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a4a      	ldr	r2, [pc, #296]	; (8007224 <HAL_DMA_Abort_IT+0x1d0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00e      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a49      	ldr	r2, [pc, #292]	; (8007228 <HAL_DMA_Abort_IT+0x1d4>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d009      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a47      	ldr	r2, [pc, #284]	; (800722c <HAL_DMA_Abort_IT+0x1d8>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d004      	beq.n	800711c <HAL_DMA_Abort_IT+0xc8>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a46      	ldr	r2, [pc, #280]	; (8007230 <HAL_DMA_Abort_IT+0x1dc>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d101      	bne.n	8007120 <HAL_DMA_Abort_IT+0xcc>
 800711c:	2301      	movs	r3, #1
 800711e:	e000      	b.n	8007122 <HAL_DMA_Abort_IT+0xce>
 8007120:	2300      	movs	r3, #0
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 8086 	beq.w	8007234 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2204      	movs	r2, #4
 800712c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a2f      	ldr	r2, [pc, #188]	; (80071f4 <HAL_DMA_Abort_IT+0x1a0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d04a      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a2e      	ldr	r2, [pc, #184]	; (80071f8 <HAL_DMA_Abort_IT+0x1a4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d045      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a2c      	ldr	r2, [pc, #176]	; (80071fc <HAL_DMA_Abort_IT+0x1a8>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d040      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a2b      	ldr	r2, [pc, #172]	; (8007200 <HAL_DMA_Abort_IT+0x1ac>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d03b      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a29      	ldr	r2, [pc, #164]	; (8007204 <HAL_DMA_Abort_IT+0x1b0>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d036      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a28      	ldr	r2, [pc, #160]	; (8007208 <HAL_DMA_Abort_IT+0x1b4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d031      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a26      	ldr	r2, [pc, #152]	; (800720c <HAL_DMA_Abort_IT+0x1b8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d02c      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a25      	ldr	r2, [pc, #148]	; (8007210 <HAL_DMA_Abort_IT+0x1bc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d027      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a23      	ldr	r2, [pc, #140]	; (8007214 <HAL_DMA_Abort_IT+0x1c0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d022      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a22      	ldr	r2, [pc, #136]	; (8007218 <HAL_DMA_Abort_IT+0x1c4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d01d      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a20      	ldr	r2, [pc, #128]	; (800721c <HAL_DMA_Abort_IT+0x1c8>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d018      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1f      	ldr	r2, [pc, #124]	; (8007220 <HAL_DMA_Abort_IT+0x1cc>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d013      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1d      	ldr	r2, [pc, #116]	; (8007224 <HAL_DMA_Abort_IT+0x1d0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d00e      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a1c      	ldr	r2, [pc, #112]	; (8007228 <HAL_DMA_Abort_IT+0x1d4>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d009      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a1a      	ldr	r2, [pc, #104]	; (800722c <HAL_DMA_Abort_IT+0x1d8>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d004      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x17c>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a19      	ldr	r2, [pc, #100]	; (8007230 <HAL_DMA_Abort_IT+0x1dc>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d108      	bne.n	80071e2 <HAL_DMA_Abort_IT+0x18e>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0201 	bic.w	r2, r2, #1
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	e178      	b.n	80074d4 <HAL_DMA_Abort_IT+0x480>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0201 	bic.w	r2, r2, #1
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	e16f      	b.n	80074d4 <HAL_DMA_Abort_IT+0x480>
 80071f4:	40020010 	.word	0x40020010
 80071f8:	40020028 	.word	0x40020028
 80071fc:	40020040 	.word	0x40020040
 8007200:	40020058 	.word	0x40020058
 8007204:	40020070 	.word	0x40020070
 8007208:	40020088 	.word	0x40020088
 800720c:	400200a0 	.word	0x400200a0
 8007210:	400200b8 	.word	0x400200b8
 8007214:	40020410 	.word	0x40020410
 8007218:	40020428 	.word	0x40020428
 800721c:	40020440 	.word	0x40020440
 8007220:	40020458 	.word	0x40020458
 8007224:	40020470 	.word	0x40020470
 8007228:	40020488 	.word	0x40020488
 800722c:	400204a0 	.word	0x400204a0
 8007230:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 020e 	bic.w	r2, r2, #14
 8007242:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a6c      	ldr	r2, [pc, #432]	; (80073fc <HAL_DMA_Abort_IT+0x3a8>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d04a      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a6b      	ldr	r2, [pc, #428]	; (8007400 <HAL_DMA_Abort_IT+0x3ac>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d045      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a69      	ldr	r2, [pc, #420]	; (8007404 <HAL_DMA_Abort_IT+0x3b0>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d040      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a68      	ldr	r2, [pc, #416]	; (8007408 <HAL_DMA_Abort_IT+0x3b4>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d03b      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a66      	ldr	r2, [pc, #408]	; (800740c <HAL_DMA_Abort_IT+0x3b8>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d036      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a65      	ldr	r2, [pc, #404]	; (8007410 <HAL_DMA_Abort_IT+0x3bc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d031      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a63      	ldr	r2, [pc, #396]	; (8007414 <HAL_DMA_Abort_IT+0x3c0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d02c      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a62      	ldr	r2, [pc, #392]	; (8007418 <HAL_DMA_Abort_IT+0x3c4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d027      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a60      	ldr	r2, [pc, #384]	; (800741c <HAL_DMA_Abort_IT+0x3c8>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d022      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a5f      	ldr	r2, [pc, #380]	; (8007420 <HAL_DMA_Abort_IT+0x3cc>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d01d      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a5d      	ldr	r2, [pc, #372]	; (8007424 <HAL_DMA_Abort_IT+0x3d0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d018      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a5c      	ldr	r2, [pc, #368]	; (8007428 <HAL_DMA_Abort_IT+0x3d4>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d013      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a5a      	ldr	r2, [pc, #360]	; (800742c <HAL_DMA_Abort_IT+0x3d8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00e      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a59      	ldr	r2, [pc, #356]	; (8007430 <HAL_DMA_Abort_IT+0x3dc>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d009      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a57      	ldr	r2, [pc, #348]	; (8007434 <HAL_DMA_Abort_IT+0x3e0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d004      	beq.n	80072e4 <HAL_DMA_Abort_IT+0x290>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a56      	ldr	r2, [pc, #344]	; (8007438 <HAL_DMA_Abort_IT+0x3e4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d108      	bne.n	80072f6 <HAL_DMA_Abort_IT+0x2a2>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0201 	bic.w	r2, r2, #1
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e007      	b.n	8007306 <HAL_DMA_Abort_IT+0x2b2>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0201 	bic.w	r2, r2, #1
 8007304:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a3c      	ldr	r2, [pc, #240]	; (80073fc <HAL_DMA_Abort_IT+0x3a8>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d072      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a3a      	ldr	r2, [pc, #232]	; (8007400 <HAL_DMA_Abort_IT+0x3ac>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d06d      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a39      	ldr	r2, [pc, #228]	; (8007404 <HAL_DMA_Abort_IT+0x3b0>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d068      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a37      	ldr	r2, [pc, #220]	; (8007408 <HAL_DMA_Abort_IT+0x3b4>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d063      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a36      	ldr	r2, [pc, #216]	; (800740c <HAL_DMA_Abort_IT+0x3b8>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d05e      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a34      	ldr	r2, [pc, #208]	; (8007410 <HAL_DMA_Abort_IT+0x3bc>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d059      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a33      	ldr	r2, [pc, #204]	; (8007414 <HAL_DMA_Abort_IT+0x3c0>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d054      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a31      	ldr	r2, [pc, #196]	; (8007418 <HAL_DMA_Abort_IT+0x3c4>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d04f      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a30      	ldr	r2, [pc, #192]	; (800741c <HAL_DMA_Abort_IT+0x3c8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d04a      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a2e      	ldr	r2, [pc, #184]	; (8007420 <HAL_DMA_Abort_IT+0x3cc>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d045      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a2d      	ldr	r2, [pc, #180]	; (8007424 <HAL_DMA_Abort_IT+0x3d0>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d040      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2b      	ldr	r2, [pc, #172]	; (8007428 <HAL_DMA_Abort_IT+0x3d4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d03b      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a2a      	ldr	r2, [pc, #168]	; (800742c <HAL_DMA_Abort_IT+0x3d8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d036      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a28      	ldr	r2, [pc, #160]	; (8007430 <HAL_DMA_Abort_IT+0x3dc>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d031      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a27      	ldr	r2, [pc, #156]	; (8007434 <HAL_DMA_Abort_IT+0x3e0>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d02c      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a25      	ldr	r2, [pc, #148]	; (8007438 <HAL_DMA_Abort_IT+0x3e4>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d027      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a24      	ldr	r2, [pc, #144]	; (800743c <HAL_DMA_Abort_IT+0x3e8>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d022      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a22      	ldr	r2, [pc, #136]	; (8007440 <HAL_DMA_Abort_IT+0x3ec>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d01d      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a21      	ldr	r2, [pc, #132]	; (8007444 <HAL_DMA_Abort_IT+0x3f0>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d018      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a1f      	ldr	r2, [pc, #124]	; (8007448 <HAL_DMA_Abort_IT+0x3f4>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d013      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a1e      	ldr	r2, [pc, #120]	; (800744c <HAL_DMA_Abort_IT+0x3f8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00e      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a1c      	ldr	r2, [pc, #112]	; (8007450 <HAL_DMA_Abort_IT+0x3fc>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d009      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a1b      	ldr	r2, [pc, #108]	; (8007454 <HAL_DMA_Abort_IT+0x400>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d004      	beq.n	80073f6 <HAL_DMA_Abort_IT+0x3a2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a19      	ldr	r2, [pc, #100]	; (8007458 <HAL_DMA_Abort_IT+0x404>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d132      	bne.n	800745c <HAL_DMA_Abort_IT+0x408>
 80073f6:	2301      	movs	r3, #1
 80073f8:	e031      	b.n	800745e <HAL_DMA_Abort_IT+0x40a>
 80073fa:	bf00      	nop
 80073fc:	40020010 	.word	0x40020010
 8007400:	40020028 	.word	0x40020028
 8007404:	40020040 	.word	0x40020040
 8007408:	40020058 	.word	0x40020058
 800740c:	40020070 	.word	0x40020070
 8007410:	40020088 	.word	0x40020088
 8007414:	400200a0 	.word	0x400200a0
 8007418:	400200b8 	.word	0x400200b8
 800741c:	40020410 	.word	0x40020410
 8007420:	40020428 	.word	0x40020428
 8007424:	40020440 	.word	0x40020440
 8007428:	40020458 	.word	0x40020458
 800742c:	40020470 	.word	0x40020470
 8007430:	40020488 	.word	0x40020488
 8007434:	400204a0 	.word	0x400204a0
 8007438:	400204b8 	.word	0x400204b8
 800743c:	58025408 	.word	0x58025408
 8007440:	5802541c 	.word	0x5802541c
 8007444:	58025430 	.word	0x58025430
 8007448:	58025444 	.word	0x58025444
 800744c:	58025458 	.word	0x58025458
 8007450:	5802546c 	.word	0x5802546c
 8007454:	58025480 	.word	0x58025480
 8007458:	58025494 	.word	0x58025494
 800745c:	2300      	movs	r3, #0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d028      	beq.n	80074b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007470:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007476:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747c:	f003 031f 	and.w	r3, r3, #31
 8007480:	2201      	movs	r2, #1
 8007482:	409a      	lsls	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007490:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00c      	beq.n	80074b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80074b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop

080074e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08a      	sub	sp, #40	; 0x28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80074ec:	4b67      	ldr	r3, [pc, #412]	; (800768c <HAL_DMA_IRQHandler+0x1ac>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a67      	ldr	r2, [pc, #412]	; (8007690 <HAL_DMA_IRQHandler+0x1b0>)
 80074f2:	fba2 2303 	umull	r2, r3, r2, r3
 80074f6:	0a9b      	lsrs	r3, r3, #10
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007504:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a5f      	ldr	r2, [pc, #380]	; (8007694 <HAL_DMA_IRQHandler+0x1b4>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d04a      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a5d      	ldr	r2, [pc, #372]	; (8007698 <HAL_DMA_IRQHandler+0x1b8>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d045      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a5c      	ldr	r2, [pc, #368]	; (800769c <HAL_DMA_IRQHandler+0x1bc>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d040      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a5a      	ldr	r2, [pc, #360]	; (80076a0 <HAL_DMA_IRQHandler+0x1c0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d03b      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a59      	ldr	r2, [pc, #356]	; (80076a4 <HAL_DMA_IRQHandler+0x1c4>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d036      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a57      	ldr	r2, [pc, #348]	; (80076a8 <HAL_DMA_IRQHandler+0x1c8>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d031      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a56      	ldr	r2, [pc, #344]	; (80076ac <HAL_DMA_IRQHandler+0x1cc>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d02c      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a54      	ldr	r2, [pc, #336]	; (80076b0 <HAL_DMA_IRQHandler+0x1d0>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d027      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a53      	ldr	r2, [pc, #332]	; (80076b4 <HAL_DMA_IRQHandler+0x1d4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d022      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a51      	ldr	r2, [pc, #324]	; (80076b8 <HAL_DMA_IRQHandler+0x1d8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d01d      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a50      	ldr	r2, [pc, #320]	; (80076bc <HAL_DMA_IRQHandler+0x1dc>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d018      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a4e      	ldr	r2, [pc, #312]	; (80076c0 <HAL_DMA_IRQHandler+0x1e0>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d013      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a4d      	ldr	r2, [pc, #308]	; (80076c4 <HAL_DMA_IRQHandler+0x1e4>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d00e      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a4b      	ldr	r2, [pc, #300]	; (80076c8 <HAL_DMA_IRQHandler+0x1e8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d009      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a4a      	ldr	r2, [pc, #296]	; (80076cc <HAL_DMA_IRQHandler+0x1ec>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d004      	beq.n	80075b2 <HAL_DMA_IRQHandler+0xd2>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a48      	ldr	r2, [pc, #288]	; (80076d0 <HAL_DMA_IRQHandler+0x1f0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d101      	bne.n	80075b6 <HAL_DMA_IRQHandler+0xd6>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e000      	b.n	80075b8 <HAL_DMA_IRQHandler+0xd8>
 80075b6:	2300      	movs	r3, #0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 842b 	beq.w	8007e14 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c2:	f003 031f 	and.w	r3, r3, #31
 80075c6:	2208      	movs	r2, #8
 80075c8:	409a      	lsls	r2, r3
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	4013      	ands	r3, r2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f000 80a2 	beq.w	8007718 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a2e      	ldr	r2, [pc, #184]	; (8007694 <HAL_DMA_IRQHandler+0x1b4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d04a      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a2d      	ldr	r2, [pc, #180]	; (8007698 <HAL_DMA_IRQHandler+0x1b8>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d045      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a2b      	ldr	r2, [pc, #172]	; (800769c <HAL_DMA_IRQHandler+0x1bc>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d040      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a2a      	ldr	r2, [pc, #168]	; (80076a0 <HAL_DMA_IRQHandler+0x1c0>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d03b      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a28      	ldr	r2, [pc, #160]	; (80076a4 <HAL_DMA_IRQHandler+0x1c4>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d036      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a27      	ldr	r2, [pc, #156]	; (80076a8 <HAL_DMA_IRQHandler+0x1c8>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d031      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a25      	ldr	r2, [pc, #148]	; (80076ac <HAL_DMA_IRQHandler+0x1cc>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d02c      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a24      	ldr	r2, [pc, #144]	; (80076b0 <HAL_DMA_IRQHandler+0x1d0>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d027      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a22      	ldr	r2, [pc, #136]	; (80076b4 <HAL_DMA_IRQHandler+0x1d4>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d022      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a21      	ldr	r2, [pc, #132]	; (80076b8 <HAL_DMA_IRQHandler+0x1d8>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d01d      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1f      	ldr	r2, [pc, #124]	; (80076bc <HAL_DMA_IRQHandler+0x1dc>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d018      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1e      	ldr	r2, [pc, #120]	; (80076c0 <HAL_DMA_IRQHandler+0x1e0>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d013      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a1c      	ldr	r2, [pc, #112]	; (80076c4 <HAL_DMA_IRQHandler+0x1e4>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00e      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a1b      	ldr	r2, [pc, #108]	; (80076c8 <HAL_DMA_IRQHandler+0x1e8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d009      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a19      	ldr	r2, [pc, #100]	; (80076cc <HAL_DMA_IRQHandler+0x1ec>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <HAL_DMA_IRQHandler+0x194>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a18      	ldr	r2, [pc, #96]	; (80076d0 <HAL_DMA_IRQHandler+0x1f0>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d12f      	bne.n	80076d4 <HAL_DMA_IRQHandler+0x1f4>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0304 	and.w	r3, r3, #4
 800767e:	2b00      	cmp	r3, #0
 8007680:	bf14      	ite	ne
 8007682:	2301      	movne	r3, #1
 8007684:	2300      	moveq	r3, #0
 8007686:	b2db      	uxtb	r3, r3
 8007688:	e02e      	b.n	80076e8 <HAL_DMA_IRQHandler+0x208>
 800768a:	bf00      	nop
 800768c:	24000000 	.word	0x24000000
 8007690:	1b4e81b5 	.word	0x1b4e81b5
 8007694:	40020010 	.word	0x40020010
 8007698:	40020028 	.word	0x40020028
 800769c:	40020040 	.word	0x40020040
 80076a0:	40020058 	.word	0x40020058
 80076a4:	40020070 	.word	0x40020070
 80076a8:	40020088 	.word	0x40020088
 80076ac:	400200a0 	.word	0x400200a0
 80076b0:	400200b8 	.word	0x400200b8
 80076b4:	40020410 	.word	0x40020410
 80076b8:	40020428 	.word	0x40020428
 80076bc:	40020440 	.word	0x40020440
 80076c0:	40020458 	.word	0x40020458
 80076c4:	40020470 	.word	0x40020470
 80076c8:	40020488 	.word	0x40020488
 80076cc:	400204a0 	.word	0x400204a0
 80076d0:	400204b8 	.word	0x400204b8
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0308 	and.w	r3, r3, #8
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bf14      	ite	ne
 80076e2:	2301      	movne	r3, #1
 80076e4:	2300      	moveq	r3, #0
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d015      	beq.n	8007718 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0204 	bic.w	r2, r2, #4
 80076fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007700:	f003 031f 	and.w	r3, r3, #31
 8007704:	2208      	movs	r2, #8
 8007706:	409a      	lsls	r2, r3
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007710:	f043 0201 	orr.w	r2, r3, #1
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800771c:	f003 031f 	and.w	r3, r3, #31
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	fa22 f303 	lsr.w	r3, r2, r3
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d06e      	beq.n	800780c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a69      	ldr	r2, [pc, #420]	; (80078d8 <HAL_DMA_IRQHandler+0x3f8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d04a      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a67      	ldr	r2, [pc, #412]	; (80078dc <HAL_DMA_IRQHandler+0x3fc>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d045      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a66      	ldr	r2, [pc, #408]	; (80078e0 <HAL_DMA_IRQHandler+0x400>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d040      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a64      	ldr	r2, [pc, #400]	; (80078e4 <HAL_DMA_IRQHandler+0x404>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d03b      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a63      	ldr	r2, [pc, #396]	; (80078e8 <HAL_DMA_IRQHandler+0x408>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d036      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a61      	ldr	r2, [pc, #388]	; (80078ec <HAL_DMA_IRQHandler+0x40c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d031      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a60      	ldr	r2, [pc, #384]	; (80078f0 <HAL_DMA_IRQHandler+0x410>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d02c      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a5e      	ldr	r2, [pc, #376]	; (80078f4 <HAL_DMA_IRQHandler+0x414>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d027      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a5d      	ldr	r2, [pc, #372]	; (80078f8 <HAL_DMA_IRQHandler+0x418>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d022      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a5b      	ldr	r2, [pc, #364]	; (80078fc <HAL_DMA_IRQHandler+0x41c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d01d      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a5a      	ldr	r2, [pc, #360]	; (8007900 <HAL_DMA_IRQHandler+0x420>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d018      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a58      	ldr	r2, [pc, #352]	; (8007904 <HAL_DMA_IRQHandler+0x424>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d013      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a57      	ldr	r2, [pc, #348]	; (8007908 <HAL_DMA_IRQHandler+0x428>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d00e      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a55      	ldr	r2, [pc, #340]	; (800790c <HAL_DMA_IRQHandler+0x42c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d009      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a54      	ldr	r2, [pc, #336]	; (8007910 <HAL_DMA_IRQHandler+0x430>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d004      	beq.n	80077ce <HAL_DMA_IRQHandler+0x2ee>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a52      	ldr	r2, [pc, #328]	; (8007914 <HAL_DMA_IRQHandler+0x434>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d10a      	bne.n	80077e4 <HAL_DMA_IRQHandler+0x304>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d8:	2b00      	cmp	r3, #0
 80077da:	bf14      	ite	ne
 80077dc:	2301      	movne	r3, #1
 80077de:	2300      	moveq	r3, #0
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	e003      	b.n	80077ec <HAL_DMA_IRQHandler+0x30c>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2300      	movs	r3, #0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00d      	beq.n	800780c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f4:	f003 031f 	and.w	r3, r3, #31
 80077f8:	2201      	movs	r2, #1
 80077fa:	409a      	lsls	r2, r3
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007804:	f043 0202 	orr.w	r2, r3, #2
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007810:	f003 031f 	and.w	r3, r3, #31
 8007814:	2204      	movs	r2, #4
 8007816:	409a      	lsls	r2, r3
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	4013      	ands	r3, r2
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 808f 	beq.w	8007940 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a2c      	ldr	r2, [pc, #176]	; (80078d8 <HAL_DMA_IRQHandler+0x3f8>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d04a      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a2a      	ldr	r2, [pc, #168]	; (80078dc <HAL_DMA_IRQHandler+0x3fc>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d045      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a29      	ldr	r2, [pc, #164]	; (80078e0 <HAL_DMA_IRQHandler+0x400>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d040      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a27      	ldr	r2, [pc, #156]	; (80078e4 <HAL_DMA_IRQHandler+0x404>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d03b      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a26      	ldr	r2, [pc, #152]	; (80078e8 <HAL_DMA_IRQHandler+0x408>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d036      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a24      	ldr	r2, [pc, #144]	; (80078ec <HAL_DMA_IRQHandler+0x40c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d031      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a23      	ldr	r2, [pc, #140]	; (80078f0 <HAL_DMA_IRQHandler+0x410>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d02c      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a21      	ldr	r2, [pc, #132]	; (80078f4 <HAL_DMA_IRQHandler+0x414>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d027      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a20      	ldr	r2, [pc, #128]	; (80078f8 <HAL_DMA_IRQHandler+0x418>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d022      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a1e      	ldr	r2, [pc, #120]	; (80078fc <HAL_DMA_IRQHandler+0x41c>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d01d      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a1d      	ldr	r2, [pc, #116]	; (8007900 <HAL_DMA_IRQHandler+0x420>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d018      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a1b      	ldr	r2, [pc, #108]	; (8007904 <HAL_DMA_IRQHandler+0x424>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d013      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a1a      	ldr	r2, [pc, #104]	; (8007908 <HAL_DMA_IRQHandler+0x428>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d00e      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a18      	ldr	r2, [pc, #96]	; (800790c <HAL_DMA_IRQHandler+0x42c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d009      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a17      	ldr	r2, [pc, #92]	; (8007910 <HAL_DMA_IRQHandler+0x430>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d004      	beq.n	80078c2 <HAL_DMA_IRQHandler+0x3e2>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a15      	ldr	r2, [pc, #84]	; (8007914 <HAL_DMA_IRQHandler+0x434>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d12a      	bne.n	8007918 <HAL_DMA_IRQHandler+0x438>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bf14      	ite	ne
 80078d0:	2301      	movne	r3, #1
 80078d2:	2300      	moveq	r3, #0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	e023      	b.n	8007920 <HAL_DMA_IRQHandler+0x440>
 80078d8:	40020010 	.word	0x40020010
 80078dc:	40020028 	.word	0x40020028
 80078e0:	40020040 	.word	0x40020040
 80078e4:	40020058 	.word	0x40020058
 80078e8:	40020070 	.word	0x40020070
 80078ec:	40020088 	.word	0x40020088
 80078f0:	400200a0 	.word	0x400200a0
 80078f4:	400200b8 	.word	0x400200b8
 80078f8:	40020410 	.word	0x40020410
 80078fc:	40020428 	.word	0x40020428
 8007900:	40020440 	.word	0x40020440
 8007904:	40020458 	.word	0x40020458
 8007908:	40020470 	.word	0x40020470
 800790c:	40020488 	.word	0x40020488
 8007910:	400204a0 	.word	0x400204a0
 8007914:	400204b8 	.word	0x400204b8
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2300      	movs	r3, #0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00d      	beq.n	8007940 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007928:	f003 031f 	and.w	r3, r3, #31
 800792c:	2204      	movs	r2, #4
 800792e:	409a      	lsls	r2, r3
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007938:	f043 0204 	orr.w	r2, r3, #4
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007944:	f003 031f 	and.w	r3, r3, #31
 8007948:	2210      	movs	r2, #16
 800794a:	409a      	lsls	r2, r3
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	4013      	ands	r3, r2
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 80a6 	beq.w	8007aa2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a85      	ldr	r2, [pc, #532]	; (8007b70 <HAL_DMA_IRQHandler+0x690>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d04a      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a83      	ldr	r2, [pc, #524]	; (8007b74 <HAL_DMA_IRQHandler+0x694>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d045      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a82      	ldr	r2, [pc, #520]	; (8007b78 <HAL_DMA_IRQHandler+0x698>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d040      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a80      	ldr	r2, [pc, #512]	; (8007b7c <HAL_DMA_IRQHandler+0x69c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d03b      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a7f      	ldr	r2, [pc, #508]	; (8007b80 <HAL_DMA_IRQHandler+0x6a0>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d036      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a7d      	ldr	r2, [pc, #500]	; (8007b84 <HAL_DMA_IRQHandler+0x6a4>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d031      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a7c      	ldr	r2, [pc, #496]	; (8007b88 <HAL_DMA_IRQHandler+0x6a8>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d02c      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a7a      	ldr	r2, [pc, #488]	; (8007b8c <HAL_DMA_IRQHandler+0x6ac>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d027      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a79      	ldr	r2, [pc, #484]	; (8007b90 <HAL_DMA_IRQHandler+0x6b0>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d022      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a77      	ldr	r2, [pc, #476]	; (8007b94 <HAL_DMA_IRQHandler+0x6b4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d01d      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a76      	ldr	r2, [pc, #472]	; (8007b98 <HAL_DMA_IRQHandler+0x6b8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d018      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a74      	ldr	r2, [pc, #464]	; (8007b9c <HAL_DMA_IRQHandler+0x6bc>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d013      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a73      	ldr	r2, [pc, #460]	; (8007ba0 <HAL_DMA_IRQHandler+0x6c0>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d00e      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a71      	ldr	r2, [pc, #452]	; (8007ba4 <HAL_DMA_IRQHandler+0x6c4>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d009      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a70      	ldr	r2, [pc, #448]	; (8007ba8 <HAL_DMA_IRQHandler+0x6c8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d004      	beq.n	80079f6 <HAL_DMA_IRQHandler+0x516>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a6e      	ldr	r2, [pc, #440]	; (8007bac <HAL_DMA_IRQHandler+0x6cc>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d10a      	bne.n	8007a0c <HAL_DMA_IRQHandler+0x52c>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0308 	and.w	r3, r3, #8
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bf14      	ite	ne
 8007a04:	2301      	movne	r3, #1
 8007a06:	2300      	moveq	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	e009      	b.n	8007a20 <HAL_DMA_IRQHandler+0x540>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0304 	and.w	r3, r3, #4
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	bf14      	ite	ne
 8007a1a:	2301      	movne	r3, #1
 8007a1c:	2300      	moveq	r3, #0
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d03e      	beq.n	8007aa2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a28:	f003 031f 	and.w	r3, r3, #31
 8007a2c:	2210      	movs	r2, #16
 8007a2e:	409a      	lsls	r2, r3
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d018      	beq.n	8007a74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d108      	bne.n	8007a62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d024      	beq.n	8007aa2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
 8007a60:	e01f      	b.n	8007aa2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d01b      	beq.n	8007aa2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	4798      	blx	r3
 8007a72:	e016      	b.n	8007aa2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d107      	bne.n	8007a92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 0208 	bic.w	r2, r2, #8
 8007a90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa6:	f003 031f 	and.w	r3, r3, #31
 8007aaa:	2220      	movs	r2, #32
 8007aac:	409a      	lsls	r2, r3
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 8110 	beq.w	8007cd8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a2c      	ldr	r2, [pc, #176]	; (8007b70 <HAL_DMA_IRQHandler+0x690>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d04a      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a2b      	ldr	r2, [pc, #172]	; (8007b74 <HAL_DMA_IRQHandler+0x694>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d045      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a29      	ldr	r2, [pc, #164]	; (8007b78 <HAL_DMA_IRQHandler+0x698>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d040      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a28      	ldr	r2, [pc, #160]	; (8007b7c <HAL_DMA_IRQHandler+0x69c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d03b      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a26      	ldr	r2, [pc, #152]	; (8007b80 <HAL_DMA_IRQHandler+0x6a0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d036      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a25      	ldr	r2, [pc, #148]	; (8007b84 <HAL_DMA_IRQHandler+0x6a4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d031      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a23      	ldr	r2, [pc, #140]	; (8007b88 <HAL_DMA_IRQHandler+0x6a8>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d02c      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a22      	ldr	r2, [pc, #136]	; (8007b8c <HAL_DMA_IRQHandler+0x6ac>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d027      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a20      	ldr	r2, [pc, #128]	; (8007b90 <HAL_DMA_IRQHandler+0x6b0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d022      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a1f      	ldr	r2, [pc, #124]	; (8007b94 <HAL_DMA_IRQHandler+0x6b4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d01d      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1d      	ldr	r2, [pc, #116]	; (8007b98 <HAL_DMA_IRQHandler+0x6b8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d018      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a1c      	ldr	r2, [pc, #112]	; (8007b9c <HAL_DMA_IRQHandler+0x6bc>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d013      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a1a      	ldr	r2, [pc, #104]	; (8007ba0 <HAL_DMA_IRQHandler+0x6c0>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d00e      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a19      	ldr	r2, [pc, #100]	; (8007ba4 <HAL_DMA_IRQHandler+0x6c4>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d009      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a17      	ldr	r2, [pc, #92]	; (8007ba8 <HAL_DMA_IRQHandler+0x6c8>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d004      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x678>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a16      	ldr	r2, [pc, #88]	; (8007bac <HAL_DMA_IRQHandler+0x6cc>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d12b      	bne.n	8007bb0 <HAL_DMA_IRQHandler+0x6d0>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0310 	and.w	r3, r3, #16
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bf14      	ite	ne
 8007b66:	2301      	movne	r3, #1
 8007b68:	2300      	moveq	r3, #0
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	e02a      	b.n	8007bc4 <HAL_DMA_IRQHandler+0x6e4>
 8007b6e:	bf00      	nop
 8007b70:	40020010 	.word	0x40020010
 8007b74:	40020028 	.word	0x40020028
 8007b78:	40020040 	.word	0x40020040
 8007b7c:	40020058 	.word	0x40020058
 8007b80:	40020070 	.word	0x40020070
 8007b84:	40020088 	.word	0x40020088
 8007b88:	400200a0 	.word	0x400200a0
 8007b8c:	400200b8 	.word	0x400200b8
 8007b90:	40020410 	.word	0x40020410
 8007b94:	40020428 	.word	0x40020428
 8007b98:	40020440 	.word	0x40020440
 8007b9c:	40020458 	.word	0x40020458
 8007ba0:	40020470 	.word	0x40020470
 8007ba4:	40020488 	.word	0x40020488
 8007ba8:	400204a0 	.word	0x400204a0
 8007bac:	400204b8 	.word	0x400204b8
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bf14      	ite	ne
 8007bbe:	2301      	movne	r3, #1
 8007bc0:	2300      	moveq	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 8087 	beq.w	8007cd8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bce:	f003 031f 	and.w	r3, r3, #31
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	409a      	lsls	r2, r3
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	d139      	bne.n	8007c5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0216 	bic.w	r2, r2, #22
 8007bf4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	695a      	ldr	r2, [r3, #20]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d103      	bne.n	8007c16 <HAL_DMA_IRQHandler+0x736>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d007      	beq.n	8007c26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 0208 	bic.w	r2, r2, #8
 8007c24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c2a:	f003 031f 	and.w	r3, r3, #31
 8007c2e:	223f      	movs	r2, #63	; 0x3f
 8007c30:	409a      	lsls	r2, r3
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 834a 	beq.w	80082e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	4798      	blx	r3
          }
          return;
 8007c58:	e344      	b.n	80082e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d018      	beq.n	8007c9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d108      	bne.n	8007c88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d02c      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	4798      	blx	r3
 8007c86:	e027      	b.n	8007cd8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d023      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	4798      	blx	r3
 8007c98:	e01e      	b.n	8007cd8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10f      	bne.n	8007cc8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0210 	bic.w	r2, r2, #16
 8007cb6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 8306 	beq.w	80082ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 8088 	beq.w	8007e00 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a7a      	ldr	r2, [pc, #488]	; (8007ee8 <HAL_DMA_IRQHandler+0xa08>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d04a      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a79      	ldr	r2, [pc, #484]	; (8007eec <HAL_DMA_IRQHandler+0xa0c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d045      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a77      	ldr	r2, [pc, #476]	; (8007ef0 <HAL_DMA_IRQHandler+0xa10>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d040      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a76      	ldr	r2, [pc, #472]	; (8007ef4 <HAL_DMA_IRQHandler+0xa14>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d03b      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a74      	ldr	r2, [pc, #464]	; (8007ef8 <HAL_DMA_IRQHandler+0xa18>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d036      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a73      	ldr	r2, [pc, #460]	; (8007efc <HAL_DMA_IRQHandler+0xa1c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d031      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a71      	ldr	r2, [pc, #452]	; (8007f00 <HAL_DMA_IRQHandler+0xa20>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d02c      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a70      	ldr	r2, [pc, #448]	; (8007f04 <HAL_DMA_IRQHandler+0xa24>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d027      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a6e      	ldr	r2, [pc, #440]	; (8007f08 <HAL_DMA_IRQHandler+0xa28>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d022      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a6d      	ldr	r2, [pc, #436]	; (8007f0c <HAL_DMA_IRQHandler+0xa2c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d01d      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a6b      	ldr	r2, [pc, #428]	; (8007f10 <HAL_DMA_IRQHandler+0xa30>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d018      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a6a      	ldr	r2, [pc, #424]	; (8007f14 <HAL_DMA_IRQHandler+0xa34>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d013      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a68      	ldr	r2, [pc, #416]	; (8007f18 <HAL_DMA_IRQHandler+0xa38>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d00e      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a67      	ldr	r2, [pc, #412]	; (8007f1c <HAL_DMA_IRQHandler+0xa3c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d009      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a65      	ldr	r2, [pc, #404]	; (8007f20 <HAL_DMA_IRQHandler+0xa40>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d004      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x8b8>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a64      	ldr	r2, [pc, #400]	; (8007f24 <HAL_DMA_IRQHandler+0xa44>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d108      	bne.n	8007daa <HAL_DMA_IRQHandler+0x8ca>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 0201 	bic.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	e007      	b.n	8007dba <HAL_DMA_IRQHandler+0x8da>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0201 	bic.w	r2, r2, #1
 8007db8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d307      	bcc.n	8007dd6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1f2      	bne.n	8007dba <HAL_DMA_IRQHandler+0x8da>
 8007dd4:	e000      	b.n	8007dd8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007dd6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2203      	movs	r2, #3
 8007dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007dee:	e003      	b.n	8007df8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 8272 	beq.w	80082ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	4798      	blx	r3
 8007e12:	e26c      	b.n	80082ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a43      	ldr	r2, [pc, #268]	; (8007f28 <HAL_DMA_IRQHandler+0xa48>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d022      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x984>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a42      	ldr	r2, [pc, #264]	; (8007f2c <HAL_DMA_IRQHandler+0xa4c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d01d      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x984>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a40      	ldr	r2, [pc, #256]	; (8007f30 <HAL_DMA_IRQHandler+0xa50>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d018      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x984>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a3f      	ldr	r2, [pc, #252]	; (8007f34 <HAL_DMA_IRQHandler+0xa54>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d013      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x984>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a3d      	ldr	r2, [pc, #244]	; (8007f38 <HAL_DMA_IRQHandler+0xa58>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d00e      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x984>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a3c      	ldr	r2, [pc, #240]	; (8007f3c <HAL_DMA_IRQHandler+0xa5c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d009      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x984>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a3a      	ldr	r2, [pc, #232]	; (8007f40 <HAL_DMA_IRQHandler+0xa60>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d004      	beq.n	8007e64 <HAL_DMA_IRQHandler+0x984>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a39      	ldr	r2, [pc, #228]	; (8007f44 <HAL_DMA_IRQHandler+0xa64>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d101      	bne.n	8007e68 <HAL_DMA_IRQHandler+0x988>
 8007e64:	2301      	movs	r3, #1
 8007e66:	e000      	b.n	8007e6a <HAL_DMA_IRQHandler+0x98a>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 823f 	beq.w	80082ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e7c:	f003 031f 	and.w	r3, r3, #31
 8007e80:	2204      	movs	r2, #4
 8007e82:	409a      	lsls	r2, r3
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	4013      	ands	r3, r2
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 80cd 	beq.w	8008028 <HAL_DMA_IRQHandler+0xb48>
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 80c7 	beq.w	8008028 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e9e:	f003 031f 	and.w	r3, r3, #31
 8007ea2:	2204      	movs	r2, #4
 8007ea4:	409a      	lsls	r2, r3
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d049      	beq.n	8007f48 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d109      	bne.n	8007ed2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 8210 	beq.w	80082e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ed0:	e20a      	b.n	80082e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 8206 	beq.w	80082e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ee4:	e200      	b.n	80082e8 <HAL_DMA_IRQHandler+0xe08>
 8007ee6:	bf00      	nop
 8007ee8:	40020010 	.word	0x40020010
 8007eec:	40020028 	.word	0x40020028
 8007ef0:	40020040 	.word	0x40020040
 8007ef4:	40020058 	.word	0x40020058
 8007ef8:	40020070 	.word	0x40020070
 8007efc:	40020088 	.word	0x40020088
 8007f00:	400200a0 	.word	0x400200a0
 8007f04:	400200b8 	.word	0x400200b8
 8007f08:	40020410 	.word	0x40020410
 8007f0c:	40020428 	.word	0x40020428
 8007f10:	40020440 	.word	0x40020440
 8007f14:	40020458 	.word	0x40020458
 8007f18:	40020470 	.word	0x40020470
 8007f1c:	40020488 	.word	0x40020488
 8007f20:	400204a0 	.word	0x400204a0
 8007f24:	400204b8 	.word	0x400204b8
 8007f28:	58025408 	.word	0x58025408
 8007f2c:	5802541c 	.word	0x5802541c
 8007f30:	58025430 	.word	0x58025430
 8007f34:	58025444 	.word	0x58025444
 8007f38:	58025458 	.word	0x58025458
 8007f3c:	5802546c 	.word	0x5802546c
 8007f40:	58025480 	.word	0x58025480
 8007f44:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f003 0320 	and.w	r3, r3, #32
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d160      	bne.n	8008014 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a7f      	ldr	r2, [pc, #508]	; (8008154 <HAL_DMA_IRQHandler+0xc74>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d04a      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a7d      	ldr	r2, [pc, #500]	; (8008158 <HAL_DMA_IRQHandler+0xc78>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d045      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a7c      	ldr	r2, [pc, #496]	; (800815c <HAL_DMA_IRQHandler+0xc7c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d040      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a7a      	ldr	r2, [pc, #488]	; (8008160 <HAL_DMA_IRQHandler+0xc80>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d03b      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a79      	ldr	r2, [pc, #484]	; (8008164 <HAL_DMA_IRQHandler+0xc84>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d036      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a77      	ldr	r2, [pc, #476]	; (8008168 <HAL_DMA_IRQHandler+0xc88>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d031      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a76      	ldr	r2, [pc, #472]	; (800816c <HAL_DMA_IRQHandler+0xc8c>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d02c      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a74      	ldr	r2, [pc, #464]	; (8008170 <HAL_DMA_IRQHandler+0xc90>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d027      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a73      	ldr	r2, [pc, #460]	; (8008174 <HAL_DMA_IRQHandler+0xc94>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d022      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a71      	ldr	r2, [pc, #452]	; (8008178 <HAL_DMA_IRQHandler+0xc98>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d01d      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a70      	ldr	r2, [pc, #448]	; (800817c <HAL_DMA_IRQHandler+0xc9c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d018      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a6e      	ldr	r2, [pc, #440]	; (8008180 <HAL_DMA_IRQHandler+0xca0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d013      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a6d      	ldr	r2, [pc, #436]	; (8008184 <HAL_DMA_IRQHandler+0xca4>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00e      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a6b      	ldr	r2, [pc, #428]	; (8008188 <HAL_DMA_IRQHandler+0xca8>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d009      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a6a      	ldr	r2, [pc, #424]	; (800818c <HAL_DMA_IRQHandler+0xcac>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d004      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0xb12>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a68      	ldr	r2, [pc, #416]	; (8008190 <HAL_DMA_IRQHandler+0xcb0>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d108      	bne.n	8008004 <HAL_DMA_IRQHandler+0xb24>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0208 	bic.w	r2, r2, #8
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	e007      	b.n	8008014 <HAL_DMA_IRQHandler+0xb34>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0204 	bic.w	r2, r2, #4
 8008012:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 8165 	beq.w	80082e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008026:	e15f      	b.n	80082e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802c:	f003 031f 	and.w	r3, r3, #31
 8008030:	2202      	movs	r2, #2
 8008032:	409a      	lsls	r2, r3
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	4013      	ands	r3, r2
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 80c5 	beq.w	80081c8 <HAL_DMA_IRQHandler+0xce8>
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 80bf 	beq.w	80081c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804e:	f003 031f 	and.w	r3, r3, #31
 8008052:	2202      	movs	r2, #2
 8008054:	409a      	lsls	r2, r3
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d018      	beq.n	8008096 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 813a 	beq.w	80082ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008080:	e134      	b.n	80082ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 8130 	beq.w	80082ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008094:	e12a      	b.n	80082ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b00      	cmp	r3, #0
 800809e:	f040 8089 	bne.w	80081b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a2b      	ldr	r2, [pc, #172]	; (8008154 <HAL_DMA_IRQHandler+0xc74>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d04a      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a29      	ldr	r2, [pc, #164]	; (8008158 <HAL_DMA_IRQHandler+0xc78>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d045      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a28      	ldr	r2, [pc, #160]	; (800815c <HAL_DMA_IRQHandler+0xc7c>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d040      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a26      	ldr	r2, [pc, #152]	; (8008160 <HAL_DMA_IRQHandler+0xc80>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d03b      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a25      	ldr	r2, [pc, #148]	; (8008164 <HAL_DMA_IRQHandler+0xc84>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d036      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a23      	ldr	r2, [pc, #140]	; (8008168 <HAL_DMA_IRQHandler+0xc88>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d031      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a22      	ldr	r2, [pc, #136]	; (800816c <HAL_DMA_IRQHandler+0xc8c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d02c      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a20      	ldr	r2, [pc, #128]	; (8008170 <HAL_DMA_IRQHandler+0xc90>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d027      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a1f      	ldr	r2, [pc, #124]	; (8008174 <HAL_DMA_IRQHandler+0xc94>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d022      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a1d      	ldr	r2, [pc, #116]	; (8008178 <HAL_DMA_IRQHandler+0xc98>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d01d      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a1c      	ldr	r2, [pc, #112]	; (800817c <HAL_DMA_IRQHandler+0xc9c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d018      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a1a      	ldr	r2, [pc, #104]	; (8008180 <HAL_DMA_IRQHandler+0xca0>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d013      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a19      	ldr	r2, [pc, #100]	; (8008184 <HAL_DMA_IRQHandler+0xca4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d00e      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a17      	ldr	r2, [pc, #92]	; (8008188 <HAL_DMA_IRQHandler+0xca8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d009      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a16      	ldr	r2, [pc, #88]	; (800818c <HAL_DMA_IRQHandler+0xcac>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d004      	beq.n	8008142 <HAL_DMA_IRQHandler+0xc62>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a14      	ldr	r2, [pc, #80]	; (8008190 <HAL_DMA_IRQHandler+0xcb0>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d128      	bne.n	8008194 <HAL_DMA_IRQHandler+0xcb4>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0214 	bic.w	r2, r2, #20
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	e027      	b.n	80081a4 <HAL_DMA_IRQHandler+0xcc4>
 8008154:	40020010 	.word	0x40020010
 8008158:	40020028 	.word	0x40020028
 800815c:	40020040 	.word	0x40020040
 8008160:	40020058 	.word	0x40020058
 8008164:	40020070 	.word	0x40020070
 8008168:	40020088 	.word	0x40020088
 800816c:	400200a0 	.word	0x400200a0
 8008170:	400200b8 	.word	0x400200b8
 8008174:	40020410 	.word	0x40020410
 8008178:	40020428 	.word	0x40020428
 800817c:	40020440 	.word	0x40020440
 8008180:	40020458 	.word	0x40020458
 8008184:	40020470 	.word	0x40020470
 8008188:	40020488 	.word	0x40020488
 800818c:	400204a0 	.word	0x400204a0
 8008190:	400204b8 	.word	0x400204b8
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 020a 	bic.w	r2, r2, #10
 80081a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 8097 	beq.w	80082ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081c6:	e091      	b.n	80082ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081cc:	f003 031f 	and.w	r3, r3, #31
 80081d0:	2208      	movs	r2, #8
 80081d2:	409a      	lsls	r2, r3
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	4013      	ands	r3, r2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 8088 	beq.w	80082ee <HAL_DMA_IRQHandler+0xe0e>
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8082 	beq.w	80082ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a41      	ldr	r2, [pc, #260]	; (80082f4 <HAL_DMA_IRQHandler+0xe14>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d04a      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a3f      	ldr	r2, [pc, #252]	; (80082f8 <HAL_DMA_IRQHandler+0xe18>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d045      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a3e      	ldr	r2, [pc, #248]	; (80082fc <HAL_DMA_IRQHandler+0xe1c>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d040      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a3c      	ldr	r2, [pc, #240]	; (8008300 <HAL_DMA_IRQHandler+0xe20>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d03b      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a3b      	ldr	r2, [pc, #236]	; (8008304 <HAL_DMA_IRQHandler+0xe24>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d036      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a39      	ldr	r2, [pc, #228]	; (8008308 <HAL_DMA_IRQHandler+0xe28>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d031      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a38      	ldr	r2, [pc, #224]	; (800830c <HAL_DMA_IRQHandler+0xe2c>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d02c      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a36      	ldr	r2, [pc, #216]	; (8008310 <HAL_DMA_IRQHandler+0xe30>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d027      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a35      	ldr	r2, [pc, #212]	; (8008314 <HAL_DMA_IRQHandler+0xe34>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d022      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a33      	ldr	r2, [pc, #204]	; (8008318 <HAL_DMA_IRQHandler+0xe38>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d01d      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a32      	ldr	r2, [pc, #200]	; (800831c <HAL_DMA_IRQHandler+0xe3c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d018      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a30      	ldr	r2, [pc, #192]	; (8008320 <HAL_DMA_IRQHandler+0xe40>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d013      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a2f      	ldr	r2, [pc, #188]	; (8008324 <HAL_DMA_IRQHandler+0xe44>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d00e      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a2d      	ldr	r2, [pc, #180]	; (8008328 <HAL_DMA_IRQHandler+0xe48>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d009      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a2c      	ldr	r2, [pc, #176]	; (800832c <HAL_DMA_IRQHandler+0xe4c>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d004      	beq.n	800828a <HAL_DMA_IRQHandler+0xdaa>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a2a      	ldr	r2, [pc, #168]	; (8008330 <HAL_DMA_IRQHandler+0xe50>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d108      	bne.n	800829c <HAL_DMA_IRQHandler+0xdbc>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 021c 	bic.w	r2, r2, #28
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	e007      	b.n	80082ac <HAL_DMA_IRQHandler+0xdcc>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 020e 	bic.w	r2, r2, #14
 80082aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b0:	f003 031f 	and.w	r3, r3, #31
 80082b4:	2201      	movs	r2, #1
 80082b6:	409a      	lsls	r2, r3
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d009      	beq.n	80082ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	4798      	blx	r3
 80082e2:	e004      	b.n	80082ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80082e4:	bf00      	nop
 80082e6:	e002      	b.n	80082ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082e8:	bf00      	nop
 80082ea:	e000      	b.n	80082ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80082ee:	3728      	adds	r7, #40	; 0x28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	40020010 	.word	0x40020010
 80082f8:	40020028 	.word	0x40020028
 80082fc:	40020040 	.word	0x40020040
 8008300:	40020058 	.word	0x40020058
 8008304:	40020070 	.word	0x40020070
 8008308:	40020088 	.word	0x40020088
 800830c:	400200a0 	.word	0x400200a0
 8008310:	400200b8 	.word	0x400200b8
 8008314:	40020410 	.word	0x40020410
 8008318:	40020428 	.word	0x40020428
 800831c:	40020440 	.word	0x40020440
 8008320:	40020458 	.word	0x40020458
 8008324:	40020470 	.word	0x40020470
 8008328:	40020488 	.word	0x40020488
 800832c:	400204a0 	.word	0x400204a0
 8008330:	400204b8 	.word	0x400204b8

08008334 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008346:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a7f      	ldr	r2, [pc, #508]	; (8008550 <DMA_SetConfig+0x21c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d072      	beq.n	800843e <DMA_SetConfig+0x10a>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a7d      	ldr	r2, [pc, #500]	; (8008554 <DMA_SetConfig+0x220>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d06d      	beq.n	800843e <DMA_SetConfig+0x10a>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a7c      	ldr	r2, [pc, #496]	; (8008558 <DMA_SetConfig+0x224>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d068      	beq.n	800843e <DMA_SetConfig+0x10a>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a7a      	ldr	r2, [pc, #488]	; (800855c <DMA_SetConfig+0x228>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d063      	beq.n	800843e <DMA_SetConfig+0x10a>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a79      	ldr	r2, [pc, #484]	; (8008560 <DMA_SetConfig+0x22c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d05e      	beq.n	800843e <DMA_SetConfig+0x10a>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a77      	ldr	r2, [pc, #476]	; (8008564 <DMA_SetConfig+0x230>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d059      	beq.n	800843e <DMA_SetConfig+0x10a>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a76      	ldr	r2, [pc, #472]	; (8008568 <DMA_SetConfig+0x234>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d054      	beq.n	800843e <DMA_SetConfig+0x10a>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a74      	ldr	r2, [pc, #464]	; (800856c <DMA_SetConfig+0x238>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d04f      	beq.n	800843e <DMA_SetConfig+0x10a>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a73      	ldr	r2, [pc, #460]	; (8008570 <DMA_SetConfig+0x23c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d04a      	beq.n	800843e <DMA_SetConfig+0x10a>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a71      	ldr	r2, [pc, #452]	; (8008574 <DMA_SetConfig+0x240>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d045      	beq.n	800843e <DMA_SetConfig+0x10a>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a70      	ldr	r2, [pc, #448]	; (8008578 <DMA_SetConfig+0x244>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d040      	beq.n	800843e <DMA_SetConfig+0x10a>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a6e      	ldr	r2, [pc, #440]	; (800857c <DMA_SetConfig+0x248>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d03b      	beq.n	800843e <DMA_SetConfig+0x10a>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a6d      	ldr	r2, [pc, #436]	; (8008580 <DMA_SetConfig+0x24c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d036      	beq.n	800843e <DMA_SetConfig+0x10a>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a6b      	ldr	r2, [pc, #428]	; (8008584 <DMA_SetConfig+0x250>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d031      	beq.n	800843e <DMA_SetConfig+0x10a>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a6a      	ldr	r2, [pc, #424]	; (8008588 <DMA_SetConfig+0x254>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d02c      	beq.n	800843e <DMA_SetConfig+0x10a>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a68      	ldr	r2, [pc, #416]	; (800858c <DMA_SetConfig+0x258>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d027      	beq.n	800843e <DMA_SetConfig+0x10a>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a67      	ldr	r2, [pc, #412]	; (8008590 <DMA_SetConfig+0x25c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d022      	beq.n	800843e <DMA_SetConfig+0x10a>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a65      	ldr	r2, [pc, #404]	; (8008594 <DMA_SetConfig+0x260>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d01d      	beq.n	800843e <DMA_SetConfig+0x10a>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a64      	ldr	r2, [pc, #400]	; (8008598 <DMA_SetConfig+0x264>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d018      	beq.n	800843e <DMA_SetConfig+0x10a>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a62      	ldr	r2, [pc, #392]	; (800859c <DMA_SetConfig+0x268>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d013      	beq.n	800843e <DMA_SetConfig+0x10a>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a61      	ldr	r2, [pc, #388]	; (80085a0 <DMA_SetConfig+0x26c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d00e      	beq.n	800843e <DMA_SetConfig+0x10a>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a5f      	ldr	r2, [pc, #380]	; (80085a4 <DMA_SetConfig+0x270>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d009      	beq.n	800843e <DMA_SetConfig+0x10a>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a5e      	ldr	r2, [pc, #376]	; (80085a8 <DMA_SetConfig+0x274>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d004      	beq.n	800843e <DMA_SetConfig+0x10a>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a5c      	ldr	r2, [pc, #368]	; (80085ac <DMA_SetConfig+0x278>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d101      	bne.n	8008442 <DMA_SetConfig+0x10e>
 800843e:	2301      	movs	r3, #1
 8008440:	e000      	b.n	8008444 <DMA_SetConfig+0x110>
 8008442:	2300      	movs	r3, #0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00d      	beq.n	8008464 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008450:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d004      	beq.n	8008464 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008462:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a39      	ldr	r2, [pc, #228]	; (8008550 <DMA_SetConfig+0x21c>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d04a      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a38      	ldr	r2, [pc, #224]	; (8008554 <DMA_SetConfig+0x220>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d045      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a36      	ldr	r2, [pc, #216]	; (8008558 <DMA_SetConfig+0x224>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d040      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a35      	ldr	r2, [pc, #212]	; (800855c <DMA_SetConfig+0x228>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d03b      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a33      	ldr	r2, [pc, #204]	; (8008560 <DMA_SetConfig+0x22c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d036      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a32      	ldr	r2, [pc, #200]	; (8008564 <DMA_SetConfig+0x230>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d031      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a30      	ldr	r2, [pc, #192]	; (8008568 <DMA_SetConfig+0x234>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d02c      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a2f      	ldr	r2, [pc, #188]	; (800856c <DMA_SetConfig+0x238>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d027      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a2d      	ldr	r2, [pc, #180]	; (8008570 <DMA_SetConfig+0x23c>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d022      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a2c      	ldr	r2, [pc, #176]	; (8008574 <DMA_SetConfig+0x240>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d01d      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a2a      	ldr	r2, [pc, #168]	; (8008578 <DMA_SetConfig+0x244>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d018      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a29      	ldr	r2, [pc, #164]	; (800857c <DMA_SetConfig+0x248>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d013      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a27      	ldr	r2, [pc, #156]	; (8008580 <DMA_SetConfig+0x24c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d00e      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a26      	ldr	r2, [pc, #152]	; (8008584 <DMA_SetConfig+0x250>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d009      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a24      	ldr	r2, [pc, #144]	; (8008588 <DMA_SetConfig+0x254>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d004      	beq.n	8008504 <DMA_SetConfig+0x1d0>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a23      	ldr	r2, [pc, #140]	; (800858c <DMA_SetConfig+0x258>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d101      	bne.n	8008508 <DMA_SetConfig+0x1d4>
 8008504:	2301      	movs	r3, #1
 8008506:	e000      	b.n	800850a <DMA_SetConfig+0x1d6>
 8008508:	2300      	movs	r3, #0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d059      	beq.n	80085c2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008512:	f003 031f 	and.w	r3, r3, #31
 8008516:	223f      	movs	r2, #63	; 0x3f
 8008518:	409a      	lsls	r2, r3
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800852c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	d138      	bne.n	80085b0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800854e:	e086      	b.n	800865e <DMA_SetConfig+0x32a>
 8008550:	40020010 	.word	0x40020010
 8008554:	40020028 	.word	0x40020028
 8008558:	40020040 	.word	0x40020040
 800855c:	40020058 	.word	0x40020058
 8008560:	40020070 	.word	0x40020070
 8008564:	40020088 	.word	0x40020088
 8008568:	400200a0 	.word	0x400200a0
 800856c:	400200b8 	.word	0x400200b8
 8008570:	40020410 	.word	0x40020410
 8008574:	40020428 	.word	0x40020428
 8008578:	40020440 	.word	0x40020440
 800857c:	40020458 	.word	0x40020458
 8008580:	40020470 	.word	0x40020470
 8008584:	40020488 	.word	0x40020488
 8008588:	400204a0 	.word	0x400204a0
 800858c:	400204b8 	.word	0x400204b8
 8008590:	58025408 	.word	0x58025408
 8008594:	5802541c 	.word	0x5802541c
 8008598:	58025430 	.word	0x58025430
 800859c:	58025444 	.word	0x58025444
 80085a0:	58025458 	.word	0x58025458
 80085a4:	5802546c 	.word	0x5802546c
 80085a8:	58025480 	.word	0x58025480
 80085ac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	60da      	str	r2, [r3, #12]
}
 80085c0:	e04d      	b.n	800865e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a29      	ldr	r2, [pc, #164]	; (800866c <DMA_SetConfig+0x338>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d022      	beq.n	8008612 <DMA_SetConfig+0x2de>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a27      	ldr	r2, [pc, #156]	; (8008670 <DMA_SetConfig+0x33c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d01d      	beq.n	8008612 <DMA_SetConfig+0x2de>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a26      	ldr	r2, [pc, #152]	; (8008674 <DMA_SetConfig+0x340>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d018      	beq.n	8008612 <DMA_SetConfig+0x2de>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a24      	ldr	r2, [pc, #144]	; (8008678 <DMA_SetConfig+0x344>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d013      	beq.n	8008612 <DMA_SetConfig+0x2de>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a23      	ldr	r2, [pc, #140]	; (800867c <DMA_SetConfig+0x348>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d00e      	beq.n	8008612 <DMA_SetConfig+0x2de>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a21      	ldr	r2, [pc, #132]	; (8008680 <DMA_SetConfig+0x34c>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d009      	beq.n	8008612 <DMA_SetConfig+0x2de>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a20      	ldr	r2, [pc, #128]	; (8008684 <DMA_SetConfig+0x350>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d004      	beq.n	8008612 <DMA_SetConfig+0x2de>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a1e      	ldr	r2, [pc, #120]	; (8008688 <DMA_SetConfig+0x354>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d101      	bne.n	8008616 <DMA_SetConfig+0x2e2>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <DMA_SetConfig+0x2e4>
 8008616:	2300      	movs	r3, #0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d020      	beq.n	800865e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008620:	f003 031f 	and.w	r3, r3, #31
 8008624:	2201      	movs	r2, #1
 8008626:	409a      	lsls	r2, r3
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	2b40      	cmp	r3, #64	; 0x40
 800863a:	d108      	bne.n	800864e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	60da      	str	r2, [r3, #12]
}
 800864c:	e007      	b.n	800865e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	60da      	str	r2, [r3, #12]
}
 800865e:	bf00      	nop
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	58025408 	.word	0x58025408
 8008670:	5802541c 	.word	0x5802541c
 8008674:	58025430 	.word	0x58025430
 8008678:	58025444 	.word	0x58025444
 800867c:	58025458 	.word	0x58025458
 8008680:	5802546c 	.word	0x5802546c
 8008684:	58025480 	.word	0x58025480
 8008688:	58025494 	.word	0x58025494

0800868c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a42      	ldr	r2, [pc, #264]	; (80087a4 <DMA_CalcBaseAndBitshift+0x118>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d04a      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a41      	ldr	r2, [pc, #260]	; (80087a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d045      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a3f      	ldr	r2, [pc, #252]	; (80087ac <DMA_CalcBaseAndBitshift+0x120>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d040      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a3e      	ldr	r2, [pc, #248]	; (80087b0 <DMA_CalcBaseAndBitshift+0x124>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d03b      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a3c      	ldr	r2, [pc, #240]	; (80087b4 <DMA_CalcBaseAndBitshift+0x128>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d036      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a3b      	ldr	r2, [pc, #236]	; (80087b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d031      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a39      	ldr	r2, [pc, #228]	; (80087bc <DMA_CalcBaseAndBitshift+0x130>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d02c      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a38      	ldr	r2, [pc, #224]	; (80087c0 <DMA_CalcBaseAndBitshift+0x134>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d027      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a36      	ldr	r2, [pc, #216]	; (80087c4 <DMA_CalcBaseAndBitshift+0x138>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d022      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a35      	ldr	r2, [pc, #212]	; (80087c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d01d      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a33      	ldr	r2, [pc, #204]	; (80087cc <DMA_CalcBaseAndBitshift+0x140>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d018      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a32      	ldr	r2, [pc, #200]	; (80087d0 <DMA_CalcBaseAndBitshift+0x144>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d013      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a30      	ldr	r2, [pc, #192]	; (80087d4 <DMA_CalcBaseAndBitshift+0x148>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00e      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a2f      	ldr	r2, [pc, #188]	; (80087d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d009      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a2d      	ldr	r2, [pc, #180]	; (80087dc <DMA_CalcBaseAndBitshift+0x150>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d004      	beq.n	8008734 <DMA_CalcBaseAndBitshift+0xa8>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a2c      	ldr	r2, [pc, #176]	; (80087e0 <DMA_CalcBaseAndBitshift+0x154>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d101      	bne.n	8008738 <DMA_CalcBaseAndBitshift+0xac>
 8008734:	2301      	movs	r3, #1
 8008736:	e000      	b.n	800873a <DMA_CalcBaseAndBitshift+0xae>
 8008738:	2300      	movs	r3, #0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d024      	beq.n	8008788 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	b2db      	uxtb	r3, r3
 8008744:	3b10      	subs	r3, #16
 8008746:	4a27      	ldr	r2, [pc, #156]	; (80087e4 <DMA_CalcBaseAndBitshift+0x158>)
 8008748:	fba2 2303 	umull	r2, r3, r2, r3
 800874c:	091b      	lsrs	r3, r3, #4
 800874e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	4a24      	ldr	r2, [pc, #144]	; (80087e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8008758:	5cd3      	ldrb	r3, [r2, r3]
 800875a:	461a      	mov	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b03      	cmp	r3, #3
 8008764:	d908      	bls.n	8008778 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	4b1f      	ldr	r3, [pc, #124]	; (80087ec <DMA_CalcBaseAndBitshift+0x160>)
 800876e:	4013      	ands	r3, r2
 8008770:	1d1a      	adds	r2, r3, #4
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	659a      	str	r2, [r3, #88]	; 0x58
 8008776:	e00d      	b.n	8008794 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	461a      	mov	r2, r3
 800877e:	4b1b      	ldr	r3, [pc, #108]	; (80087ec <DMA_CalcBaseAndBitshift+0x160>)
 8008780:	4013      	ands	r3, r2
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	6593      	str	r3, [r2, #88]	; 0x58
 8008786:	e005      	b.n	8008794 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008798:	4618      	mov	r0, r3
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	40020010 	.word	0x40020010
 80087a8:	40020028 	.word	0x40020028
 80087ac:	40020040 	.word	0x40020040
 80087b0:	40020058 	.word	0x40020058
 80087b4:	40020070 	.word	0x40020070
 80087b8:	40020088 	.word	0x40020088
 80087bc:	400200a0 	.word	0x400200a0
 80087c0:	400200b8 	.word	0x400200b8
 80087c4:	40020410 	.word	0x40020410
 80087c8:	40020428 	.word	0x40020428
 80087cc:	40020440 	.word	0x40020440
 80087d0:	40020458 	.word	0x40020458
 80087d4:	40020470 	.word	0x40020470
 80087d8:	40020488 	.word	0x40020488
 80087dc:	400204a0 	.word	0x400204a0
 80087e0:	400204b8 	.word	0x400204b8
 80087e4:	aaaaaaab 	.word	0xaaaaaaab
 80087e8:	0800f684 	.word	0x0800f684
 80087ec:	fffffc00 	.word	0xfffffc00

080087f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d120      	bne.n	8008846 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008808:	2b03      	cmp	r3, #3
 800880a:	d858      	bhi.n	80088be <DMA_CheckFifoParam+0xce>
 800880c:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <DMA_CheckFifoParam+0x24>)
 800880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008812:	bf00      	nop
 8008814:	08008825 	.word	0x08008825
 8008818:	08008837 	.word	0x08008837
 800881c:	08008825 	.word	0x08008825
 8008820:	080088bf 	.word	0x080088bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d048      	beq.n	80088c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008834:	e045      	b.n	80088c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800883e:	d142      	bne.n	80088c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008844:	e03f      	b.n	80088c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800884e:	d123      	bne.n	8008898 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008854:	2b03      	cmp	r3, #3
 8008856:	d838      	bhi.n	80088ca <DMA_CheckFifoParam+0xda>
 8008858:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <DMA_CheckFifoParam+0x70>)
 800885a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885e:	bf00      	nop
 8008860:	08008871 	.word	0x08008871
 8008864:	08008877 	.word	0x08008877
 8008868:	08008871 	.word	0x08008871
 800886c:	08008889 	.word	0x08008889
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	73fb      	strb	r3, [r7, #15]
        break;
 8008874:	e030      	b.n	80088d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d025      	beq.n	80088ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008886:	e022      	b.n	80088ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008890:	d11f      	bne.n	80088d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008896:	e01c      	b.n	80088d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889c:	2b02      	cmp	r3, #2
 800889e:	d902      	bls.n	80088a6 <DMA_CheckFifoParam+0xb6>
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d003      	beq.n	80088ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80088a4:	e018      	b.n	80088d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	73fb      	strb	r3, [r7, #15]
        break;
 80088aa:	e015      	b.n	80088d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00e      	beq.n	80088d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	73fb      	strb	r3, [r7, #15]
    break;
 80088bc:	e00b      	b.n	80088d6 <DMA_CheckFifoParam+0xe6>
        break;
 80088be:	bf00      	nop
 80088c0:	e00a      	b.n	80088d8 <DMA_CheckFifoParam+0xe8>
        break;
 80088c2:	bf00      	nop
 80088c4:	e008      	b.n	80088d8 <DMA_CheckFifoParam+0xe8>
        break;
 80088c6:	bf00      	nop
 80088c8:	e006      	b.n	80088d8 <DMA_CheckFifoParam+0xe8>
        break;
 80088ca:	bf00      	nop
 80088cc:	e004      	b.n	80088d8 <DMA_CheckFifoParam+0xe8>
        break;
 80088ce:	bf00      	nop
 80088d0:	e002      	b.n	80088d8 <DMA_CheckFifoParam+0xe8>
        break;
 80088d2:	bf00      	nop
 80088d4:	e000      	b.n	80088d8 <DMA_CheckFifoParam+0xe8>
    break;
 80088d6:	bf00      	nop
    }
  }

  return status;
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop

080088e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a38      	ldr	r2, [pc, #224]	; (80089dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d022      	beq.n	8008946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a36      	ldr	r2, [pc, #216]	; (80089e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d01d      	beq.n	8008946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a35      	ldr	r2, [pc, #212]	; (80089e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d018      	beq.n	8008946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a33      	ldr	r2, [pc, #204]	; (80089e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d013      	beq.n	8008946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a32      	ldr	r2, [pc, #200]	; (80089ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d00e      	beq.n	8008946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a30      	ldr	r2, [pc, #192]	; (80089f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d009      	beq.n	8008946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a2f      	ldr	r2, [pc, #188]	; (80089f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d004      	beq.n	8008946 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a2d      	ldr	r2, [pc, #180]	; (80089f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d101      	bne.n	800894a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008946:	2301      	movs	r3, #1
 8008948:	e000      	b.n	800894c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800894a:	2300      	movs	r3, #0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d01a      	beq.n	8008986 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	b2db      	uxtb	r3, r3
 8008956:	3b08      	subs	r3, #8
 8008958:	4a28      	ldr	r2, [pc, #160]	; (80089fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800895a:	fba2 2303 	umull	r2, r3, r2, r3
 800895e:	091b      	lsrs	r3, r3, #4
 8008960:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	4b26      	ldr	r3, [pc, #152]	; (8008a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	461a      	mov	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a24      	ldr	r2, [pc, #144]	; (8008a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008974:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f003 031f 	and.w	r3, r3, #31
 800897c:	2201      	movs	r2, #1
 800897e:	409a      	lsls	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008984:	e024      	b.n	80089d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	3b10      	subs	r3, #16
 800898e:	4a1e      	ldr	r2, [pc, #120]	; (8008a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008990:	fba2 2303 	umull	r2, r3, r2, r3
 8008994:	091b      	lsrs	r3, r3, #4
 8008996:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4a1c      	ldr	r2, [pc, #112]	; (8008a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d806      	bhi.n	80089ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4a1b      	ldr	r2, [pc, #108]	; (8008a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d902      	bls.n	80089ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	3308      	adds	r3, #8
 80089ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	4b18      	ldr	r3, [pc, #96]	; (8008a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	461a      	mov	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a16      	ldr	r2, [pc, #88]	; (8008a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80089c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f003 031f 	and.w	r3, r3, #31
 80089c8:	2201      	movs	r2, #1
 80089ca:	409a      	lsls	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80089d0:	bf00      	nop
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	58025408 	.word	0x58025408
 80089e0:	5802541c 	.word	0x5802541c
 80089e4:	58025430 	.word	0x58025430
 80089e8:	58025444 	.word	0x58025444
 80089ec:	58025458 	.word	0x58025458
 80089f0:	5802546c 	.word	0x5802546c
 80089f4:	58025480 	.word	0x58025480
 80089f8:	58025494 	.word	0x58025494
 80089fc:	cccccccd 	.word	0xcccccccd
 8008a00:	16009600 	.word	0x16009600
 8008a04:	58025880 	.word	0x58025880
 8008a08:	aaaaaaab 	.word	0xaaaaaaab
 8008a0c:	400204b8 	.word	0x400204b8
 8008a10:	4002040f 	.word	0x4002040f
 8008a14:	10008200 	.word	0x10008200
 8008a18:	40020880 	.word	0x40020880

08008a1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d04a      	beq.n	8008ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b08      	cmp	r3, #8
 8008a36:	d847      	bhi.n	8008ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a25      	ldr	r2, [pc, #148]	; (8008ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d022      	beq.n	8008a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a24      	ldr	r2, [pc, #144]	; (8008ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d01d      	beq.n	8008a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a22      	ldr	r2, [pc, #136]	; (8008adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d018      	beq.n	8008a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a21      	ldr	r2, [pc, #132]	; (8008ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d013      	beq.n	8008a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a1f      	ldr	r2, [pc, #124]	; (8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00e      	beq.n	8008a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a1e      	ldr	r2, [pc, #120]	; (8008ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d009      	beq.n	8008a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a1c      	ldr	r2, [pc, #112]	; (8008aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d004      	beq.n	8008a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a1b      	ldr	r2, [pc, #108]	; (8008af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d101      	bne.n	8008a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e000      	b.n	8008a8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00a      	beq.n	8008aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	4b17      	ldr	r3, [pc, #92]	; (8008af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008a96:	4413      	add	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a15      	ldr	r2, [pc, #84]	; (8008af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008aa4:	671a      	str	r2, [r3, #112]	; 0x70
 8008aa6:	e009      	b.n	8008abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	4b14      	ldr	r3, [pc, #80]	; (8008afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a11      	ldr	r2, [pc, #68]	; (8008b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008aba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	409a      	lsls	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008ac8:	bf00      	nop
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	58025408 	.word	0x58025408
 8008ad8:	5802541c 	.word	0x5802541c
 8008adc:	58025430 	.word	0x58025430
 8008ae0:	58025444 	.word	0x58025444
 8008ae4:	58025458 	.word	0x58025458
 8008ae8:	5802546c 	.word	0x5802546c
 8008aec:	58025480 	.word	0x58025480
 8008af0:	58025494 	.word	0x58025494
 8008af4:	1600963f 	.word	0x1600963f
 8008af8:	58025940 	.word	0x58025940
 8008afc:	1000823f 	.word	0x1000823f
 8008b00:	40020940 	.word	0x40020940

08008b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b089      	sub	sp, #36	; 0x24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008b12:	4b86      	ldr	r3, [pc, #536]	; (8008d2c <HAL_GPIO_Init+0x228>)
 8008b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b16:	e18c      	b.n	8008e32 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	fa01 f303 	lsl.w	r3, r1, r3
 8008b24:	4013      	ands	r3, r2
 8008b26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 817e 	beq.w	8008e2c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f003 0303 	and.w	r3, r3, #3
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d005      	beq.n	8008b48 <HAL_GPIO_Init+0x44>
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f003 0303 	and.w	r3, r3, #3
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d130      	bne.n	8008baa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	2203      	movs	r2, #3
 8008b54:	fa02 f303 	lsl.w	r3, r2, r3
 8008b58:	43db      	mvns	r3, r3
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	68da      	ldr	r2, [r3, #12]
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b7e:	2201      	movs	r2, #1
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	fa02 f303 	lsl.w	r3, r2, r3
 8008b86:	43db      	mvns	r3, r3
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	091b      	lsrs	r3, r3, #4
 8008b94:	f003 0201 	and.w	r2, r3, #1
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f003 0303 	and.w	r3, r3, #3
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	d017      	beq.n	8008be6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	2203      	movs	r2, #3
 8008bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc6:	43db      	mvns	r3, r3
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	4013      	ands	r3, r2
 8008bcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	689a      	ldr	r2, [r3, #8]
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d123      	bne.n	8008c3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	08da      	lsrs	r2, r3, #3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	3208      	adds	r2, #8
 8008bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	220f      	movs	r2, #15
 8008c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0e:	43db      	mvns	r3, r3
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	4013      	ands	r3, r2
 8008c14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	691a      	ldr	r2, [r3, #16]
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	f003 0307 	and.w	r3, r3, #7
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	fa02 f303 	lsl.w	r3, r2, r3
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	08da      	lsrs	r2, r3, #3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3208      	adds	r2, #8
 8008c34:	69b9      	ldr	r1, [r7, #24]
 8008c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	2203      	movs	r2, #3
 8008c46:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4a:	43db      	mvns	r3, r3
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	4013      	ands	r3, r2
 8008c50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f003 0203 	and.w	r2, r3, #3
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	69ba      	ldr	r2, [r7, #24]
 8008c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 80d8 	beq.w	8008e2c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c7c:	4b2c      	ldr	r3, [pc, #176]	; (8008d30 <HAL_GPIO_Init+0x22c>)
 8008c7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008c82:	4a2b      	ldr	r2, [pc, #172]	; (8008d30 <HAL_GPIO_Init+0x22c>)
 8008c84:	f043 0302 	orr.w	r3, r3, #2
 8008c88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008c8c:	4b28      	ldr	r3, [pc, #160]	; (8008d30 <HAL_GPIO_Init+0x22c>)
 8008c8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c9a:	4a26      	ldr	r2, [pc, #152]	; (8008d34 <HAL_GPIO_Init+0x230>)
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	089b      	lsrs	r3, r3, #2
 8008ca0:	3302      	adds	r3, #2
 8008ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	f003 0303 	and.w	r3, r3, #3
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	220f      	movs	r2, #15
 8008cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb6:	43db      	mvns	r3, r3
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a1d      	ldr	r2, [pc, #116]	; (8008d38 <HAL_GPIO_Init+0x234>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d04a      	beq.n	8008d5c <HAL_GPIO_Init+0x258>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a1c      	ldr	r2, [pc, #112]	; (8008d3c <HAL_GPIO_Init+0x238>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d02b      	beq.n	8008d26 <HAL_GPIO_Init+0x222>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a1b      	ldr	r2, [pc, #108]	; (8008d40 <HAL_GPIO_Init+0x23c>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d025      	beq.n	8008d22 <HAL_GPIO_Init+0x21e>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a1a      	ldr	r2, [pc, #104]	; (8008d44 <HAL_GPIO_Init+0x240>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d01f      	beq.n	8008d1e <HAL_GPIO_Init+0x21a>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a19      	ldr	r2, [pc, #100]	; (8008d48 <HAL_GPIO_Init+0x244>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d019      	beq.n	8008d1a <HAL_GPIO_Init+0x216>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a18      	ldr	r2, [pc, #96]	; (8008d4c <HAL_GPIO_Init+0x248>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d013      	beq.n	8008d16 <HAL_GPIO_Init+0x212>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a17      	ldr	r2, [pc, #92]	; (8008d50 <HAL_GPIO_Init+0x24c>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00d      	beq.n	8008d12 <HAL_GPIO_Init+0x20e>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a16      	ldr	r2, [pc, #88]	; (8008d54 <HAL_GPIO_Init+0x250>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d007      	beq.n	8008d0e <HAL_GPIO_Init+0x20a>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a15      	ldr	r2, [pc, #84]	; (8008d58 <HAL_GPIO_Init+0x254>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d101      	bne.n	8008d0a <HAL_GPIO_Init+0x206>
 8008d06:	2309      	movs	r3, #9
 8008d08:	e029      	b.n	8008d5e <HAL_GPIO_Init+0x25a>
 8008d0a:	230a      	movs	r3, #10
 8008d0c:	e027      	b.n	8008d5e <HAL_GPIO_Init+0x25a>
 8008d0e:	2307      	movs	r3, #7
 8008d10:	e025      	b.n	8008d5e <HAL_GPIO_Init+0x25a>
 8008d12:	2306      	movs	r3, #6
 8008d14:	e023      	b.n	8008d5e <HAL_GPIO_Init+0x25a>
 8008d16:	2305      	movs	r3, #5
 8008d18:	e021      	b.n	8008d5e <HAL_GPIO_Init+0x25a>
 8008d1a:	2304      	movs	r3, #4
 8008d1c:	e01f      	b.n	8008d5e <HAL_GPIO_Init+0x25a>
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e01d      	b.n	8008d5e <HAL_GPIO_Init+0x25a>
 8008d22:	2302      	movs	r3, #2
 8008d24:	e01b      	b.n	8008d5e <HAL_GPIO_Init+0x25a>
 8008d26:	2301      	movs	r3, #1
 8008d28:	e019      	b.n	8008d5e <HAL_GPIO_Init+0x25a>
 8008d2a:	bf00      	nop
 8008d2c:	58000080 	.word	0x58000080
 8008d30:	58024400 	.word	0x58024400
 8008d34:	58000400 	.word	0x58000400
 8008d38:	58020000 	.word	0x58020000
 8008d3c:	58020400 	.word	0x58020400
 8008d40:	58020800 	.word	0x58020800
 8008d44:	58020c00 	.word	0x58020c00
 8008d48:	58021000 	.word	0x58021000
 8008d4c:	58021400 	.word	0x58021400
 8008d50:	58021800 	.word	0x58021800
 8008d54:	58021c00 	.word	0x58021c00
 8008d58:	58022400 	.word	0x58022400
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	69fa      	ldr	r2, [r7, #28]
 8008d60:	f002 0203 	and.w	r2, r2, #3
 8008d64:	0092      	lsls	r2, r2, #2
 8008d66:	4093      	lsls	r3, r2
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d6e:	4938      	ldr	r1, [pc, #224]	; (8008e50 <HAL_GPIO_Init+0x34c>)
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	089b      	lsrs	r3, r3, #2
 8008d74:	3302      	adds	r3, #2
 8008d76:	69ba      	ldr	r2, [r7, #24]
 8008d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	43db      	mvns	r3, r3
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008da2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	43db      	mvns	r3, r3
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	4013      	ands	r3, r2
 8008dba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d003      	beq.n	8008dd0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	43db      	mvns	r3, r3
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	4013      	ands	r3, r2
 8008de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	69ba      	ldr	r2, [r7, #24]
 8008e00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	43db      	mvns	r3, r3
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008e1e:	69ba      	ldr	r2, [r7, #24]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	69ba      	ldr	r2, [r7, #24]
 8008e2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f47f ae6b 	bne.w	8008b18 <HAL_GPIO_Init+0x14>
  }
}
 8008e42:	bf00      	nop
 8008e44:	bf00      	nop
 8008e46:	3724      	adds	r7, #36	; 0x24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	58000400 	.word	0x58000400

08008e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	807b      	strh	r3, [r7, #2]
 8008e60:	4613      	mov	r3, r2
 8008e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e64:	787b      	ldrb	r3, [r7, #1]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d003      	beq.n	8008e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e6a:	887a      	ldrh	r2, [r7, #2]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008e70:	e003      	b.n	8008e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008e72:	887b      	ldrh	r3, [r7, #2]
 8008e74:	041a      	lsls	r2, r3, #16
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	619a      	str	r2, [r3, #24]
}
 8008e7a:	bf00      	nop
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
	...

08008e88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008e90:	4b19      	ldr	r3, [pc, #100]	; (8008ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	d00a      	beq.n	8008eb2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008e9c:	4b16      	ldr	r3, [pc, #88]	; (8008ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	f003 0307 	and.w	r3, r3, #7
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d001      	beq.n	8008eae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e01f      	b.n	8008eee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e01d      	b.n	8008eee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008eb2:	4b11      	ldr	r3, [pc, #68]	; (8008ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	f023 0207 	bic.w	r2, r3, #7
 8008eba:	490f      	ldr	r1, [pc, #60]	; (8008ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008ec2:	f7fc fec9 	bl	8005c58 <HAL_GetTick>
 8008ec6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ec8:	e009      	b.n	8008ede <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008eca:	f7fc fec5 	bl	8005c58 <HAL_GetTick>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ed8:	d901      	bls.n	8008ede <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e007      	b.n	8008eee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ede:	4b06      	ldr	r3, [pc, #24]	; (8008ef8 <HAL_PWREx_ConfigSupply+0x70>)
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eea:	d1ee      	bne.n	8008eca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	58024800 	.word	0x58024800

08008efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08c      	sub	sp, #48	; 0x30
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e39d      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f000 8087 	beq.w	800902a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f1c:	4b88      	ldr	r3, [pc, #544]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f26:	4b86      	ldr	r3, [pc, #536]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	2b10      	cmp	r3, #16
 8008f30:	d007      	beq.n	8008f42 <HAL_RCC_OscConfig+0x46>
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	2b18      	cmp	r3, #24
 8008f36:	d110      	bne.n	8008f5a <HAL_RCC_OscConfig+0x5e>
 8008f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d10b      	bne.n	8008f5a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f42:	4b7f      	ldr	r3, [pc, #508]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d06c      	beq.n	8009028 <HAL_RCC_OscConfig+0x12c>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d168      	bne.n	8009028 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e377      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f62:	d106      	bne.n	8008f72 <HAL_RCC_OscConfig+0x76>
 8008f64:	4b76      	ldr	r3, [pc, #472]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a75      	ldr	r2, [pc, #468]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	e02e      	b.n	8008fd0 <HAL_RCC_OscConfig+0xd4>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10c      	bne.n	8008f94 <HAL_RCC_OscConfig+0x98>
 8008f7a:	4b71      	ldr	r3, [pc, #452]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a70      	ldr	r2, [pc, #448]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	4b6e      	ldr	r3, [pc, #440]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a6d      	ldr	r2, [pc, #436]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f90:	6013      	str	r3, [r2, #0]
 8008f92:	e01d      	b.n	8008fd0 <HAL_RCC_OscConfig+0xd4>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f9c:	d10c      	bne.n	8008fb8 <HAL_RCC_OscConfig+0xbc>
 8008f9e:	4b68      	ldr	r3, [pc, #416]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a67      	ldr	r2, [pc, #412]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	4b65      	ldr	r3, [pc, #404]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a64      	ldr	r2, [pc, #400]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fb4:	6013      	str	r3, [r2, #0]
 8008fb6:	e00b      	b.n	8008fd0 <HAL_RCC_OscConfig+0xd4>
 8008fb8:	4b61      	ldr	r3, [pc, #388]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a60      	ldr	r2, [pc, #384]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	4b5e      	ldr	r3, [pc, #376]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a5d      	ldr	r2, [pc, #372]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d013      	beq.n	8009000 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd8:	f7fc fe3e 	bl	8005c58 <HAL_GetTick>
 8008fdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fde:	e008      	b.n	8008ff2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fe0:	f7fc fe3a 	bl	8005c58 <HAL_GetTick>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	2b64      	cmp	r3, #100	; 0x64
 8008fec:	d901      	bls.n	8008ff2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008fee:	2303      	movs	r3, #3
 8008ff0:	e32b      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ff2:	4b53      	ldr	r3, [pc, #332]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0f0      	beq.n	8008fe0 <HAL_RCC_OscConfig+0xe4>
 8008ffe:	e014      	b.n	800902a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009000:	f7fc fe2a 	bl	8005c58 <HAL_GetTick>
 8009004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009006:	e008      	b.n	800901a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009008:	f7fc fe26 	bl	8005c58 <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	2b64      	cmp	r3, #100	; 0x64
 8009014:	d901      	bls.n	800901a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e317      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800901a:	4b49      	ldr	r3, [pc, #292]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1f0      	bne.n	8009008 <HAL_RCC_OscConfig+0x10c>
 8009026:	e000      	b.n	800902a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0302 	and.w	r3, r3, #2
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 808c 	beq.w	8009150 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009038:	4b41      	ldr	r3, [pc, #260]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009040:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009042:	4b3f      	ldr	r3, [pc, #252]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8009044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009046:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d007      	beq.n	800905e <HAL_RCC_OscConfig+0x162>
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	2b18      	cmp	r3, #24
 8009052:	d137      	bne.n	80090c4 <HAL_RCC_OscConfig+0x1c8>
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d132      	bne.n	80090c4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800905e:	4b38      	ldr	r3, [pc, #224]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0304 	and.w	r3, r3, #4
 8009066:	2b00      	cmp	r3, #0
 8009068:	d005      	beq.n	8009076 <HAL_RCC_OscConfig+0x17a>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e2e9      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009076:	4b32      	ldr	r3, [pc, #200]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f023 0219 	bic.w	r2, r3, #25
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	492f      	ldr	r1, [pc, #188]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8009084:	4313      	orrs	r3, r2
 8009086:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009088:	f7fc fde6 	bl	8005c58 <HAL_GetTick>
 800908c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800908e:	e008      	b.n	80090a2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009090:	f7fc fde2 	bl	8005c58 <HAL_GetTick>
 8009094:	4602      	mov	r2, r0
 8009096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	2b02      	cmp	r3, #2
 800909c:	d901      	bls.n	80090a2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e2d3      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090a2:	4b27      	ldr	r3, [pc, #156]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0304 	and.w	r3, r3, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0f0      	beq.n	8009090 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090ae:	4b24      	ldr	r3, [pc, #144]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	061b      	lsls	r3, r3, #24
 80090bc:	4920      	ldr	r1, [pc, #128]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090c2:	e045      	b.n	8009150 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d026      	beq.n	800911a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80090cc:	4b1c      	ldr	r3, [pc, #112]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f023 0219 	bic.w	r2, r3, #25
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	4919      	ldr	r1, [pc, #100]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090de:	f7fc fdbb 	bl	8005c58 <HAL_GetTick>
 80090e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090e4:	e008      	b.n	80090f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090e6:	f7fc fdb7 	bl	8005c58 <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d901      	bls.n	80090f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e2a8      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090f8:	4b11      	ldr	r3, [pc, #68]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	d0f0      	beq.n	80090e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009104:	4b0e      	ldr	r3, [pc, #56]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	061b      	lsls	r3, r3, #24
 8009112:	490b      	ldr	r1, [pc, #44]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8009114:	4313      	orrs	r3, r2
 8009116:	604b      	str	r3, [r1, #4]
 8009118:	e01a      	b.n	8009150 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800911a:	4b09      	ldr	r3, [pc, #36]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a08      	ldr	r2, [pc, #32]	; (8009140 <HAL_RCC_OscConfig+0x244>)
 8009120:	f023 0301 	bic.w	r3, r3, #1
 8009124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009126:	f7fc fd97 	bl	8005c58 <HAL_GetTick>
 800912a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800912c:	e00a      	b.n	8009144 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800912e:	f7fc fd93 	bl	8005c58 <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	2b02      	cmp	r3, #2
 800913a:	d903      	bls.n	8009144 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e284      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
 8009140:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009144:	4b96      	ldr	r3, [pc, #600]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0304 	and.w	r3, r3, #4
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1ee      	bne.n	800912e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0310 	and.w	r3, r3, #16
 8009158:	2b00      	cmp	r3, #0
 800915a:	d06a      	beq.n	8009232 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800915c:	4b90      	ldr	r3, [pc, #576]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009164:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009166:	4b8e      	ldr	r3, [pc, #568]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 8009168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	2b08      	cmp	r3, #8
 8009170:	d007      	beq.n	8009182 <HAL_RCC_OscConfig+0x286>
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	2b18      	cmp	r3, #24
 8009176:	d11b      	bne.n	80091b0 <HAL_RCC_OscConfig+0x2b4>
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f003 0303 	and.w	r3, r3, #3
 800917e:	2b01      	cmp	r3, #1
 8009180:	d116      	bne.n	80091b0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009182:	4b87      	ldr	r3, [pc, #540]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918a:	2b00      	cmp	r3, #0
 800918c:	d005      	beq.n	800919a <HAL_RCC_OscConfig+0x29e>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	2b80      	cmp	r3, #128	; 0x80
 8009194:	d001      	beq.n	800919a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e257      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800919a:	4b81      	ldr	r3, [pc, #516]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	061b      	lsls	r3, r3, #24
 80091a8:	497d      	ldr	r1, [pc, #500]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091ae:	e040      	b.n	8009232 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	69db      	ldr	r3, [r3, #28]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d023      	beq.n	8009200 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80091b8:	4b79      	ldr	r3, [pc, #484]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a78      	ldr	r2, [pc, #480]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 80091be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091c4:	f7fc fd48 	bl	8005c58 <HAL_GetTick>
 80091c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091ca:	e008      	b.n	80091de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80091cc:	f7fc fd44 	bl	8005c58 <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d901      	bls.n	80091de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e235      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091de:	4b70      	ldr	r3, [pc, #448]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0f0      	beq.n	80091cc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091ea:	4b6d      	ldr	r3, [pc, #436]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	061b      	lsls	r3, r3, #24
 80091f8:	4969      	ldr	r1, [pc, #420]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60cb      	str	r3, [r1, #12]
 80091fe:	e018      	b.n	8009232 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009200:	4b67      	ldr	r3, [pc, #412]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a66      	ldr	r2, [pc, #408]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 8009206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800920a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800920c:	f7fc fd24 	bl	8005c58 <HAL_GetTick>
 8009210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009212:	e008      	b.n	8009226 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009214:	f7fc fd20 	bl	8005c58 <HAL_GetTick>
 8009218:	4602      	mov	r2, r0
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	2b02      	cmp	r3, #2
 8009220:	d901      	bls.n	8009226 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009222:	2303      	movs	r3, #3
 8009224:	e211      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009226:	4b5e      	ldr	r3, [pc, #376]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1f0      	bne.n	8009214 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0308 	and.w	r3, r3, #8
 800923a:	2b00      	cmp	r3, #0
 800923c:	d036      	beq.n	80092ac <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d019      	beq.n	800927a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009246:	4b56      	ldr	r3, [pc, #344]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 8009248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800924a:	4a55      	ldr	r2, [pc, #340]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 800924c:	f043 0301 	orr.w	r3, r3, #1
 8009250:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009252:	f7fc fd01 	bl	8005c58 <HAL_GetTick>
 8009256:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009258:	e008      	b.n	800926c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800925a:	f7fc fcfd 	bl	8005c58 <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	2b02      	cmp	r3, #2
 8009266:	d901      	bls.n	800926c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009268:	2303      	movs	r3, #3
 800926a:	e1ee      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800926c:	4b4c      	ldr	r3, [pc, #304]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 800926e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009270:	f003 0302 	and.w	r3, r3, #2
 8009274:	2b00      	cmp	r3, #0
 8009276:	d0f0      	beq.n	800925a <HAL_RCC_OscConfig+0x35e>
 8009278:	e018      	b.n	80092ac <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800927a:	4b49      	ldr	r3, [pc, #292]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 800927c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800927e:	4a48      	ldr	r2, [pc, #288]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 8009280:	f023 0301 	bic.w	r3, r3, #1
 8009284:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009286:	f7fc fce7 	bl	8005c58 <HAL_GetTick>
 800928a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800928c:	e008      	b.n	80092a0 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800928e:	f7fc fce3 	bl	8005c58 <HAL_GetTick>
 8009292:	4602      	mov	r2, r0
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	2b02      	cmp	r3, #2
 800929a:	d901      	bls.n	80092a0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e1d4      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80092a0:	4b3f      	ldr	r3, [pc, #252]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 80092a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092a4:	f003 0302 	and.w	r3, r3, #2
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1f0      	bne.n	800928e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0320 	and.w	r3, r3, #32
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d036      	beq.n	8009326 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d019      	beq.n	80092f4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80092c0:	4b37      	ldr	r3, [pc, #220]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a36      	ldr	r2, [pc, #216]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 80092c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80092ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092cc:	f7fc fcc4 	bl	8005c58 <HAL_GetTick>
 80092d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092d2:	e008      	b.n	80092e6 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80092d4:	f7fc fcc0 	bl	8005c58 <HAL_GetTick>
 80092d8:	4602      	mov	r2, r0
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d901      	bls.n	80092e6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e1b1      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092e6:	4b2e      	ldr	r3, [pc, #184]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0f0      	beq.n	80092d4 <HAL_RCC_OscConfig+0x3d8>
 80092f2:	e018      	b.n	8009326 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092f4:	4b2a      	ldr	r3, [pc, #168]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a29      	ldr	r2, [pc, #164]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 80092fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009300:	f7fc fcaa 	bl	8005c58 <HAL_GetTick>
 8009304:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009306:	e008      	b.n	800931a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009308:	f7fc fca6 	bl	8005c58 <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	2b02      	cmp	r3, #2
 8009314:	d901      	bls.n	800931a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e197      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800931a:	4b21      	ldr	r3, [pc, #132]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1f0      	bne.n	8009308 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 0304 	and.w	r3, r3, #4
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 8086 	beq.w	8009440 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009334:	4b1b      	ldr	r3, [pc, #108]	; (80093a4 <HAL_RCC_OscConfig+0x4a8>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a1a      	ldr	r2, [pc, #104]	; (80093a4 <HAL_RCC_OscConfig+0x4a8>)
 800933a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800933e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009340:	f7fc fc8a 	bl	8005c58 <HAL_GetTick>
 8009344:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009346:	e008      	b.n	800935a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009348:	f7fc fc86 	bl	8005c58 <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	2b64      	cmp	r3, #100	; 0x64
 8009354:	d901      	bls.n	800935a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e177      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800935a:	4b12      	ldr	r3, [pc, #72]	; (80093a4 <HAL_RCC_OscConfig+0x4a8>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0f0      	beq.n	8009348 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d106      	bne.n	800937c <HAL_RCC_OscConfig+0x480>
 800936e:	4b0c      	ldr	r3, [pc, #48]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 8009370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009372:	4a0b      	ldr	r2, [pc, #44]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 8009374:	f043 0301 	orr.w	r3, r3, #1
 8009378:	6713      	str	r3, [r2, #112]	; 0x70
 800937a:	e032      	b.n	80093e2 <HAL_RCC_OscConfig+0x4e6>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d111      	bne.n	80093a8 <HAL_RCC_OscConfig+0x4ac>
 8009384:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 8009386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009388:	4a05      	ldr	r2, [pc, #20]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 800938a:	f023 0301 	bic.w	r3, r3, #1
 800938e:	6713      	str	r3, [r2, #112]	; 0x70
 8009390:	4b03      	ldr	r3, [pc, #12]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 8009392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009394:	4a02      	ldr	r2, [pc, #8]	; (80093a0 <HAL_RCC_OscConfig+0x4a4>)
 8009396:	f023 0304 	bic.w	r3, r3, #4
 800939a:	6713      	str	r3, [r2, #112]	; 0x70
 800939c:	e021      	b.n	80093e2 <HAL_RCC_OscConfig+0x4e6>
 800939e:	bf00      	nop
 80093a0:	58024400 	.word	0x58024400
 80093a4:	58024800 	.word	0x58024800
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	2b05      	cmp	r3, #5
 80093ae:	d10c      	bne.n	80093ca <HAL_RCC_OscConfig+0x4ce>
 80093b0:	4b83      	ldr	r3, [pc, #524]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 80093b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b4:	4a82      	ldr	r2, [pc, #520]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 80093b6:	f043 0304 	orr.w	r3, r3, #4
 80093ba:	6713      	str	r3, [r2, #112]	; 0x70
 80093bc:	4b80      	ldr	r3, [pc, #512]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 80093be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c0:	4a7f      	ldr	r2, [pc, #508]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 80093c2:	f043 0301 	orr.w	r3, r3, #1
 80093c6:	6713      	str	r3, [r2, #112]	; 0x70
 80093c8:	e00b      	b.n	80093e2 <HAL_RCC_OscConfig+0x4e6>
 80093ca:	4b7d      	ldr	r3, [pc, #500]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 80093cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ce:	4a7c      	ldr	r2, [pc, #496]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 80093d0:	f023 0301 	bic.w	r3, r3, #1
 80093d4:	6713      	str	r3, [r2, #112]	; 0x70
 80093d6:	4b7a      	ldr	r3, [pc, #488]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 80093d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093da:	4a79      	ldr	r2, [pc, #484]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 80093dc:	f023 0304 	bic.w	r3, r3, #4
 80093e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d015      	beq.n	8009416 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ea:	f7fc fc35 	bl	8005c58 <HAL_GetTick>
 80093ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093f0:	e00a      	b.n	8009408 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093f2:	f7fc fc31 	bl	8005c58 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009400:	4293      	cmp	r3, r2
 8009402:	d901      	bls.n	8009408 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e120      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009408:	4b6d      	ldr	r3, [pc, #436]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 800940a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0ee      	beq.n	80093f2 <HAL_RCC_OscConfig+0x4f6>
 8009414:	e014      	b.n	8009440 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009416:	f7fc fc1f 	bl	8005c58 <HAL_GetTick>
 800941a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800941c:	e00a      	b.n	8009434 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800941e:	f7fc fc1b 	bl	8005c58 <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	f241 3288 	movw	r2, #5000	; 0x1388
 800942c:	4293      	cmp	r3, r2
 800942e:	d901      	bls.n	8009434 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	e10a      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009434:	4b62      	ldr	r3, [pc, #392]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009438:	f003 0302 	and.w	r3, r3, #2
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1ee      	bne.n	800941e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 80ff 	beq.w	8009648 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800944a:	4b5d      	ldr	r3, [pc, #372]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009452:	2b18      	cmp	r3, #24
 8009454:	f000 80ba 	beq.w	80095cc <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	2b02      	cmp	r3, #2
 800945e:	f040 8095 	bne.w	800958c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009462:	4b57      	ldr	r3, [pc, #348]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a56      	ldr	r2, [pc, #344]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800946c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800946e:	f7fc fbf3 	bl	8005c58 <HAL_GetTick>
 8009472:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009474:	e008      	b.n	8009488 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009476:	f7fc fbef 	bl	8005c58 <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	2b02      	cmp	r3, #2
 8009482:	d901      	bls.n	8009488 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	e0e0      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009488:	4b4d      	ldr	r3, [pc, #308]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1f0      	bne.n	8009476 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009494:	4b4a      	ldr	r3, [pc, #296]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009498:	4b4a      	ldr	r3, [pc, #296]	; (80095c4 <HAL_RCC_OscConfig+0x6c8>)
 800949a:	4013      	ands	r3, r2
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80094a4:	0112      	lsls	r2, r2, #4
 80094a6:	430a      	orrs	r2, r1
 80094a8:	4945      	ldr	r1, [pc, #276]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	628b      	str	r3, [r1, #40]	; 0x28
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b2:	3b01      	subs	r3, #1
 80094b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094bc:	3b01      	subs	r3, #1
 80094be:	025b      	lsls	r3, r3, #9
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	431a      	orrs	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c8:	3b01      	subs	r3, #1
 80094ca:	041b      	lsls	r3, r3, #16
 80094cc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094d0:	431a      	orrs	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d6:	3b01      	subs	r3, #1
 80094d8:	061b      	lsls	r3, r3, #24
 80094da:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094de:	4938      	ldr	r1, [pc, #224]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 80094e0:	4313      	orrs	r3, r2
 80094e2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80094e4:	4b36      	ldr	r3, [pc, #216]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	4a35      	ldr	r2, [pc, #212]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 80094ea:	f023 0301 	bic.w	r3, r3, #1
 80094ee:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094f0:	4b33      	ldr	r3, [pc, #204]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 80094f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094f4:	4b34      	ldr	r3, [pc, #208]	; (80095c8 <HAL_RCC_OscConfig+0x6cc>)
 80094f6:	4013      	ands	r3, r2
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80094fc:	00d2      	lsls	r2, r2, #3
 80094fe:	4930      	ldr	r1, [pc, #192]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009500:	4313      	orrs	r3, r2
 8009502:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009504:	4b2e      	ldr	r3, [pc, #184]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009508:	f023 020c 	bic.w	r2, r3, #12
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	492b      	ldr	r1, [pc, #172]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009512:	4313      	orrs	r3, r2
 8009514:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009516:	4b2a      	ldr	r3, [pc, #168]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	f023 0202 	bic.w	r2, r3, #2
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009522:	4927      	ldr	r1, [pc, #156]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009524:	4313      	orrs	r3, r2
 8009526:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009528:	4b25      	ldr	r3, [pc, #148]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 800952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952c:	4a24      	ldr	r2, [pc, #144]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 800952e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009532:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009534:	4b22      	ldr	r3, [pc, #136]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009538:	4a21      	ldr	r2, [pc, #132]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 800953a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800953e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009540:	4b1f      	ldr	r3, [pc, #124]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009544:	4a1e      	ldr	r2, [pc, #120]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800954a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800954c:	4b1c      	ldr	r3, [pc, #112]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	4a1b      	ldr	r2, [pc, #108]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009552:	f043 0301 	orr.w	r3, r3, #1
 8009556:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009558:	4b19      	ldr	r3, [pc, #100]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a18      	ldr	r2, [pc, #96]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 800955e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009564:	f7fc fb78 	bl	8005c58 <HAL_GetTick>
 8009568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800956a:	e008      	b.n	800957e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800956c:	f7fc fb74 	bl	8005c58 <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	2b02      	cmp	r3, #2
 8009578:	d901      	bls.n	800957e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e065      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800957e:	4b10      	ldr	r3, [pc, #64]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d0f0      	beq.n	800956c <HAL_RCC_OscConfig+0x670>
 800958a:	e05d      	b.n	8009648 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800958c:	4b0c      	ldr	r3, [pc, #48]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a0b      	ldr	r2, [pc, #44]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 8009592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009598:	f7fc fb5e 	bl	8005c58 <HAL_GetTick>
 800959c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800959e:	e008      	b.n	80095b2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095a0:	f7fc fb5a 	bl	8005c58 <HAL_GetTick>
 80095a4:	4602      	mov	r2, r0
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d901      	bls.n	80095b2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e04b      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80095b2:	4b03      	ldr	r3, [pc, #12]	; (80095c0 <HAL_RCC_OscConfig+0x6c4>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1f0      	bne.n	80095a0 <HAL_RCC_OscConfig+0x6a4>
 80095be:	e043      	b.n	8009648 <HAL_RCC_OscConfig+0x74c>
 80095c0:	58024400 	.word	0x58024400
 80095c4:	fffffc0c 	.word	0xfffffc0c
 80095c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80095cc:	4b21      	ldr	r3, [pc, #132]	; (8009654 <HAL_RCC_OscConfig+0x758>)
 80095ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80095d2:	4b20      	ldr	r3, [pc, #128]	; (8009654 <HAL_RCC_OscConfig+0x758>)
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d031      	beq.n	8009644 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	f003 0203 	and.w	r2, r3, #3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d12a      	bne.n	8009644 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	091b      	lsrs	r3, r3, #4
 80095f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d122      	bne.n	8009644 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009608:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800960a:	429a      	cmp	r2, r3
 800960c:	d11a      	bne.n	8009644 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	0a5b      	lsrs	r3, r3, #9
 8009612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800961a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800961c:	429a      	cmp	r2, r3
 800961e:	d111      	bne.n	8009644 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	0c1b      	lsrs	r3, r3, #16
 8009624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800962e:	429a      	cmp	r2, r3
 8009630:	d108      	bne.n	8009644 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	0e1b      	lsrs	r3, r3, #24
 8009636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009640:	429a      	cmp	r2, r3
 8009642:	d001      	beq.n	8009648 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e000      	b.n	800964a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3730      	adds	r7, #48	; 0x30
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	58024400 	.word	0x58024400

08009658 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d101      	bne.n	800966c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e19c      	b.n	80099a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800966c:	4b8a      	ldr	r3, [pc, #552]	; (8009898 <HAL_RCC_ClockConfig+0x240>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 030f 	and.w	r3, r3, #15
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	429a      	cmp	r2, r3
 8009678:	d910      	bls.n	800969c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800967a:	4b87      	ldr	r3, [pc, #540]	; (8009898 <HAL_RCC_ClockConfig+0x240>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f023 020f 	bic.w	r2, r3, #15
 8009682:	4985      	ldr	r1, [pc, #532]	; (8009898 <HAL_RCC_ClockConfig+0x240>)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	4313      	orrs	r3, r2
 8009688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800968a:	4b83      	ldr	r3, [pc, #524]	; (8009898 <HAL_RCC_ClockConfig+0x240>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 030f 	and.w	r3, r3, #15
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d001      	beq.n	800969c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e184      	b.n	80099a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d010      	beq.n	80096ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	691a      	ldr	r2, [r3, #16]
 80096ac:	4b7b      	ldr	r3, [pc, #492]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d908      	bls.n	80096ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096b8:	4b78      	ldr	r3, [pc, #480]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	4975      	ldr	r1, [pc, #468]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0308 	and.w	r3, r3, #8
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d010      	beq.n	80096f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	695a      	ldr	r2, [r3, #20]
 80096da:	4b70      	ldr	r3, [pc, #448]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d908      	bls.n	80096f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096e6:	4b6d      	ldr	r3, [pc, #436]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 80096e8:	69db      	ldr	r3, [r3, #28]
 80096ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	496a      	ldr	r1, [pc, #424]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 0310 	and.w	r3, r3, #16
 8009700:	2b00      	cmp	r3, #0
 8009702:	d010      	beq.n	8009726 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	699a      	ldr	r2, [r3, #24]
 8009708:	4b64      	ldr	r3, [pc, #400]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009710:	429a      	cmp	r2, r3
 8009712:	d908      	bls.n	8009726 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009714:	4b61      	ldr	r3, [pc, #388]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	495e      	ldr	r1, [pc, #376]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 8009722:	4313      	orrs	r3, r2
 8009724:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0320 	and.w	r3, r3, #32
 800972e:	2b00      	cmp	r3, #0
 8009730:	d010      	beq.n	8009754 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	69da      	ldr	r2, [r3, #28]
 8009736:	4b59      	ldr	r3, [pc, #356]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800973e:	429a      	cmp	r2, r3
 8009740:	d908      	bls.n	8009754 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009742:	4b56      	ldr	r3, [pc, #344]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	4953      	ldr	r1, [pc, #332]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 8009750:	4313      	orrs	r3, r2
 8009752:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0302 	and.w	r3, r3, #2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d010      	beq.n	8009782 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	68da      	ldr	r2, [r3, #12]
 8009764:	4b4d      	ldr	r3, [pc, #308]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	f003 030f 	and.w	r3, r3, #15
 800976c:	429a      	cmp	r2, r3
 800976e:	d908      	bls.n	8009782 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009770:	4b4a      	ldr	r3, [pc, #296]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	f023 020f 	bic.w	r2, r3, #15
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	4947      	ldr	r1, [pc, #284]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 800977e:	4313      	orrs	r3, r2
 8009780:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b00      	cmp	r3, #0
 800978c:	d055      	beq.n	800983a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800978e:	4b43      	ldr	r3, [pc, #268]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	4940      	ldr	r1, [pc, #256]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 800979c:	4313      	orrs	r3, r2
 800979e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d107      	bne.n	80097b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097a8:	4b3c      	ldr	r3, [pc, #240]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d121      	bne.n	80097f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e0f6      	b.n	80099a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	2b03      	cmp	r3, #3
 80097be:	d107      	bne.n	80097d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80097c0:	4b36      	ldr	r3, [pc, #216]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d115      	bne.n	80097f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e0ea      	b.n	80099a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d107      	bne.n	80097e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097d8:	4b30      	ldr	r3, [pc, #192]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d109      	bne.n	80097f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e0de      	b.n	80099a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097e8:	4b2c      	ldr	r3, [pc, #176]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0304 	and.w	r3, r3, #4
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e0d6      	b.n	80099a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097f8:	4b28      	ldr	r3, [pc, #160]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	f023 0207 	bic.w	r2, r3, #7
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	4925      	ldr	r1, [pc, #148]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 8009806:	4313      	orrs	r3, r2
 8009808:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800980a:	f7fc fa25 	bl	8005c58 <HAL_GetTick>
 800980e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009810:	e00a      	b.n	8009828 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009812:	f7fc fa21 	bl	8005c58 <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009820:	4293      	cmp	r3, r2
 8009822:	d901      	bls.n	8009828 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009824:	2303      	movs	r3, #3
 8009826:	e0be      	b.n	80099a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009828:	4b1c      	ldr	r3, [pc, #112]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	00db      	lsls	r3, r3, #3
 8009836:	429a      	cmp	r2, r3
 8009838:	d1eb      	bne.n	8009812 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0302 	and.w	r3, r3, #2
 8009842:	2b00      	cmp	r3, #0
 8009844:	d010      	beq.n	8009868 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68da      	ldr	r2, [r3, #12]
 800984a:	4b14      	ldr	r3, [pc, #80]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	f003 030f 	and.w	r3, r3, #15
 8009852:	429a      	cmp	r2, r3
 8009854:	d208      	bcs.n	8009868 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009856:	4b11      	ldr	r3, [pc, #68]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	f023 020f 	bic.w	r2, r3, #15
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	490e      	ldr	r1, [pc, #56]	; (800989c <HAL_RCC_ClockConfig+0x244>)
 8009864:	4313      	orrs	r3, r2
 8009866:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009868:	4b0b      	ldr	r3, [pc, #44]	; (8009898 <HAL_RCC_ClockConfig+0x240>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 030f 	and.w	r3, r3, #15
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	429a      	cmp	r2, r3
 8009874:	d214      	bcs.n	80098a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009876:	4b08      	ldr	r3, [pc, #32]	; (8009898 <HAL_RCC_ClockConfig+0x240>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f023 020f 	bic.w	r2, r3, #15
 800987e:	4906      	ldr	r1, [pc, #24]	; (8009898 <HAL_RCC_ClockConfig+0x240>)
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	4313      	orrs	r3, r2
 8009884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009886:	4b04      	ldr	r3, [pc, #16]	; (8009898 <HAL_RCC_ClockConfig+0x240>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 030f 	and.w	r3, r3, #15
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	429a      	cmp	r2, r3
 8009892:	d005      	beq.n	80098a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	e086      	b.n	80099a6 <HAL_RCC_ClockConfig+0x34e>
 8009898:	52002000 	.word	0x52002000
 800989c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0304 	and.w	r3, r3, #4
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d010      	beq.n	80098ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691a      	ldr	r2, [r3, #16]
 80098b0:	4b3f      	ldr	r3, [pc, #252]	; (80099b0 <HAL_RCC_ClockConfig+0x358>)
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d208      	bcs.n	80098ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80098bc:	4b3c      	ldr	r3, [pc, #240]	; (80099b0 <HAL_RCC_ClockConfig+0x358>)
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	4939      	ldr	r1, [pc, #228]	; (80099b0 <HAL_RCC_ClockConfig+0x358>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 0308 	and.w	r3, r3, #8
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d010      	beq.n	80098fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	695a      	ldr	r2, [r3, #20]
 80098de:	4b34      	ldr	r3, [pc, #208]	; (80099b0 <HAL_RCC_ClockConfig+0x358>)
 80098e0:	69db      	ldr	r3, [r3, #28]
 80098e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d208      	bcs.n	80098fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80098ea:	4b31      	ldr	r3, [pc, #196]	; (80099b0 <HAL_RCC_ClockConfig+0x358>)
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	492e      	ldr	r1, [pc, #184]	; (80099b0 <HAL_RCC_ClockConfig+0x358>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0310 	and.w	r3, r3, #16
 8009904:	2b00      	cmp	r3, #0
 8009906:	d010      	beq.n	800992a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	699a      	ldr	r2, [r3, #24]
 800990c:	4b28      	ldr	r3, [pc, #160]	; (80099b0 <HAL_RCC_ClockConfig+0x358>)
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009914:	429a      	cmp	r2, r3
 8009916:	d208      	bcs.n	800992a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009918:	4b25      	ldr	r3, [pc, #148]	; (80099b0 <HAL_RCC_ClockConfig+0x358>)
 800991a:	69db      	ldr	r3, [r3, #28]
 800991c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	4922      	ldr	r1, [pc, #136]	; (80099b0 <HAL_RCC_ClockConfig+0x358>)
 8009926:	4313      	orrs	r3, r2
 8009928:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 0320 	and.w	r3, r3, #32
 8009932:	2b00      	cmp	r3, #0
 8009934:	d010      	beq.n	8009958 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	69da      	ldr	r2, [r3, #28]
 800993a:	4b1d      	ldr	r3, [pc, #116]	; (80099b0 <HAL_RCC_ClockConfig+0x358>)
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009942:	429a      	cmp	r2, r3
 8009944:	d208      	bcs.n	8009958 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009946:	4b1a      	ldr	r3, [pc, #104]	; (80099b0 <HAL_RCC_ClockConfig+0x358>)
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	4917      	ldr	r1, [pc, #92]	; (80099b0 <HAL_RCC_ClockConfig+0x358>)
 8009954:	4313      	orrs	r3, r2
 8009956:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009958:	f000 f834 	bl	80099c4 <HAL_RCC_GetSysClockFreq>
 800995c:	4602      	mov	r2, r0
 800995e:	4b14      	ldr	r3, [pc, #80]	; (80099b0 <HAL_RCC_ClockConfig+0x358>)
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	0a1b      	lsrs	r3, r3, #8
 8009964:	f003 030f 	and.w	r3, r3, #15
 8009968:	4912      	ldr	r1, [pc, #72]	; (80099b4 <HAL_RCC_ClockConfig+0x35c>)
 800996a:	5ccb      	ldrb	r3, [r1, r3]
 800996c:	f003 031f 	and.w	r3, r3, #31
 8009970:	fa22 f303 	lsr.w	r3, r2, r3
 8009974:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009976:	4b0e      	ldr	r3, [pc, #56]	; (80099b0 <HAL_RCC_ClockConfig+0x358>)
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	f003 030f 	and.w	r3, r3, #15
 800997e:	4a0d      	ldr	r2, [pc, #52]	; (80099b4 <HAL_RCC_ClockConfig+0x35c>)
 8009980:	5cd3      	ldrb	r3, [r2, r3]
 8009982:	f003 031f 	and.w	r3, r3, #31
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	fa22 f303 	lsr.w	r3, r2, r3
 800998c:	4a0a      	ldr	r2, [pc, #40]	; (80099b8 <HAL_RCC_ClockConfig+0x360>)
 800998e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009990:	4a0a      	ldr	r2, [pc, #40]	; (80099bc <HAL_RCC_ClockConfig+0x364>)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009996:	4b0a      	ldr	r3, [pc, #40]	; (80099c0 <HAL_RCC_ClockConfig+0x368>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4618      	mov	r0, r3
 800999c:	f7fc f912 	bl	8005bc4 <HAL_InitTick>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	58024400 	.word	0x58024400
 80099b4:	0800f674 	.word	0x0800f674
 80099b8:	24000004 	.word	0x24000004
 80099bc:	24000000 	.word	0x24000000
 80099c0:	24000008 	.word	0x24000008

080099c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b089      	sub	sp, #36	; 0x24
 80099c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099ca:	4bb3      	ldr	r3, [pc, #716]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099d2:	2b18      	cmp	r3, #24
 80099d4:	f200 8155 	bhi.w	8009c82 <HAL_RCC_GetSysClockFreq+0x2be>
 80099d8:	a201      	add	r2, pc, #4	; (adr r2, 80099e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80099da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099de:	bf00      	nop
 80099e0:	08009a45 	.word	0x08009a45
 80099e4:	08009c83 	.word	0x08009c83
 80099e8:	08009c83 	.word	0x08009c83
 80099ec:	08009c83 	.word	0x08009c83
 80099f0:	08009c83 	.word	0x08009c83
 80099f4:	08009c83 	.word	0x08009c83
 80099f8:	08009c83 	.word	0x08009c83
 80099fc:	08009c83 	.word	0x08009c83
 8009a00:	08009a6b 	.word	0x08009a6b
 8009a04:	08009c83 	.word	0x08009c83
 8009a08:	08009c83 	.word	0x08009c83
 8009a0c:	08009c83 	.word	0x08009c83
 8009a10:	08009c83 	.word	0x08009c83
 8009a14:	08009c83 	.word	0x08009c83
 8009a18:	08009c83 	.word	0x08009c83
 8009a1c:	08009c83 	.word	0x08009c83
 8009a20:	08009a71 	.word	0x08009a71
 8009a24:	08009c83 	.word	0x08009c83
 8009a28:	08009c83 	.word	0x08009c83
 8009a2c:	08009c83 	.word	0x08009c83
 8009a30:	08009c83 	.word	0x08009c83
 8009a34:	08009c83 	.word	0x08009c83
 8009a38:	08009c83 	.word	0x08009c83
 8009a3c:	08009c83 	.word	0x08009c83
 8009a40:	08009a77 	.word	0x08009a77
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a44:	4b94      	ldr	r3, [pc, #592]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0320 	and.w	r3, r3, #32
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d009      	beq.n	8009a64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a50:	4b91      	ldr	r3, [pc, #580]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	08db      	lsrs	r3, r3, #3
 8009a56:	f003 0303 	and.w	r3, r3, #3
 8009a5a:	4a90      	ldr	r2, [pc, #576]	; (8009c9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009a62:	e111      	b.n	8009c88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a64:	4b8d      	ldr	r3, [pc, #564]	; (8009c9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a66:	61bb      	str	r3, [r7, #24]
    break;
 8009a68:	e10e      	b.n	8009c88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009a6a:	4b8d      	ldr	r3, [pc, #564]	; (8009ca0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a6c:	61bb      	str	r3, [r7, #24]
    break;
 8009a6e:	e10b      	b.n	8009c88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009a70:	4b8c      	ldr	r3, [pc, #560]	; (8009ca4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009a72:	61bb      	str	r3, [r7, #24]
    break;
 8009a74:	e108      	b.n	8009c88 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a76:	4b88      	ldr	r3, [pc, #544]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7a:	f003 0303 	and.w	r3, r3, #3
 8009a7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009a80:	4b85      	ldr	r3, [pc, #532]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	091b      	lsrs	r3, r3, #4
 8009a86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a8c:	4b82      	ldr	r3, [pc, #520]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a96:	4b80      	ldr	r3, [pc, #512]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a9a:	08db      	lsrs	r3, r3, #3
 8009a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	fb02 f303 	mul.w	r3, r2, r3
 8009aa6:	ee07 3a90 	vmov	s15, r3
 8009aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f000 80e1 	beq.w	8009c7c <HAL_RCC_GetSysClockFreq+0x2b8>
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	f000 8083 	beq.w	8009bc8 <HAL_RCC_GetSysClockFreq+0x204>
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	f200 80a1 	bhi.w	8009c0c <HAL_RCC_GetSysClockFreq+0x248>
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d003      	beq.n	8009ad8 <HAL_RCC_GetSysClockFreq+0x114>
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d056      	beq.n	8009b84 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009ad6:	e099      	b.n	8009c0c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ad8:	4b6f      	ldr	r3, [pc, #444]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0320 	and.w	r3, r3, #32
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d02d      	beq.n	8009b40 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ae4:	4b6c      	ldr	r3, [pc, #432]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	08db      	lsrs	r3, r3, #3
 8009aea:	f003 0303 	and.w	r3, r3, #3
 8009aee:	4a6b      	ldr	r2, [pc, #428]	; (8009c9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009af0:	fa22 f303 	lsr.w	r3, r2, r3
 8009af4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	ee07 3a90 	vmov	s15, r3
 8009afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	ee07 3a90 	vmov	s15, r3
 8009b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b0e:	4b62      	ldr	r3, [pc, #392]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b22:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009ca8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009b3e:	e087      	b.n	8009c50 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009cac <HAL_RCC_GetSysClockFreq+0x2e8>
 8009b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b52:	4b51      	ldr	r3, [pc, #324]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5a:	ee07 3a90 	vmov	s15, r3
 8009b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b66:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009ca8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b82:	e065      	b.n	8009c50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	ee07 3a90 	vmov	s15, r3
 8009b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009cb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b96:	4b40      	ldr	r3, [pc, #256]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b9e:	ee07 3a90 	vmov	s15, r3
 8009ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009baa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009ca8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bc6:	e043      	b.n	8009c50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	ee07 3a90 	vmov	s15, r3
 8009bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009cb4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bda:	4b2f      	ldr	r3, [pc, #188]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bea:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009ca8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c0a:	e021      	b.n	8009c50 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	ee07 3a90 	vmov	s15, r3
 8009c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c16:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009cb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1e:	4b1e      	ldr	r3, [pc, #120]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c26:	ee07 3a90 	vmov	s15, r3
 8009c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009ca8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009c50:	4b11      	ldr	r3, [pc, #68]	; (8009c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c54:	0a5b      	lsrs	r3, r3, #9
 8009c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	ee07 3a90 	vmov	s15, r3
 8009c64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c68:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c74:	ee17 3a90 	vmov	r3, s15
 8009c78:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009c7a:	e005      	b.n	8009c88 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	61bb      	str	r3, [r7, #24]
    break;
 8009c80:	e002      	b.n	8009c88 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009c82:	4b07      	ldr	r3, [pc, #28]	; (8009ca0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c84:	61bb      	str	r3, [r7, #24]
    break;
 8009c86:	bf00      	nop
  }

  return sysclockfreq;
 8009c88:	69bb      	ldr	r3, [r7, #24]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3724      	adds	r7, #36	; 0x24
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	58024400 	.word	0x58024400
 8009c9c:	03d09000 	.word	0x03d09000
 8009ca0:	003d0900 	.word	0x003d0900
 8009ca4:	007a1200 	.word	0x007a1200
 8009ca8:	46000000 	.word	0x46000000
 8009cac:	4c742400 	.word	0x4c742400
 8009cb0:	4a742400 	.word	0x4a742400
 8009cb4:	4af42400 	.word	0x4af42400

08009cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009cbe:	f7ff fe81 	bl	80099c4 <HAL_RCC_GetSysClockFreq>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	4b10      	ldr	r3, [pc, #64]	; (8009d08 <HAL_RCC_GetHCLKFreq+0x50>)
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	0a1b      	lsrs	r3, r3, #8
 8009cca:	f003 030f 	and.w	r3, r3, #15
 8009cce:	490f      	ldr	r1, [pc, #60]	; (8009d0c <HAL_RCC_GetHCLKFreq+0x54>)
 8009cd0:	5ccb      	ldrb	r3, [r1, r3]
 8009cd2:	f003 031f 	and.w	r3, r3, #31
 8009cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <HAL_RCC_GetHCLKFreq+0x50>)
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	f003 030f 	and.w	r3, r3, #15
 8009ce4:	4a09      	ldr	r2, [pc, #36]	; (8009d0c <HAL_RCC_GetHCLKFreq+0x54>)
 8009ce6:	5cd3      	ldrb	r3, [r2, r3]
 8009ce8:	f003 031f 	and.w	r3, r3, #31
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf2:	4a07      	ldr	r2, [pc, #28]	; (8009d10 <HAL_RCC_GetHCLKFreq+0x58>)
 8009cf4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cf6:	4a07      	ldr	r2, [pc, #28]	; (8009d14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009cfc:	4b04      	ldr	r3, [pc, #16]	; (8009d10 <HAL_RCC_GetHCLKFreq+0x58>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	58024400 	.word	0x58024400
 8009d0c:	0800f674 	.word	0x0800f674
 8009d10:	24000004 	.word	0x24000004
 8009d14:	24000000 	.word	0x24000000

08009d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009d1c:	f7ff ffcc 	bl	8009cb8 <HAL_RCC_GetHCLKFreq>
 8009d20:	4602      	mov	r2, r0
 8009d22:	4b06      	ldr	r3, [pc, #24]	; (8009d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d24:	69db      	ldr	r3, [r3, #28]
 8009d26:	091b      	lsrs	r3, r3, #4
 8009d28:	f003 0307 	and.w	r3, r3, #7
 8009d2c:	4904      	ldr	r1, [pc, #16]	; (8009d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d2e:	5ccb      	ldrb	r3, [r1, r3]
 8009d30:	f003 031f 	and.w	r3, r3, #31
 8009d34:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	58024400 	.word	0x58024400
 8009d40:	0800f674 	.word	0x0800f674

08009d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009d48:	f7ff ffb6 	bl	8009cb8 <HAL_RCC_GetHCLKFreq>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	0a1b      	lsrs	r3, r3, #8
 8009d54:	f003 0307 	and.w	r3, r3, #7
 8009d58:	4904      	ldr	r1, [pc, #16]	; (8009d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d5a:	5ccb      	ldrb	r3, [r1, r3]
 8009d5c:	f003 031f 	and.w	r3, r3, #31
 8009d60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	58024400 	.word	0x58024400
 8009d6c:	0800f674 	.word	0x0800f674

08009d70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d78:	2300      	movs	r3, #0
 8009d7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d03f      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d94:	d02a      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009d96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d9a:	d824      	bhi.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009d9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009da0:	d018      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009da6:	d81e      	bhi.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d003      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009dac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009db0:	d007      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009db2:	e018      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009db4:	4ba4      	ldr	r3, [pc, #656]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db8:	4aa3      	ldr	r2, [pc, #652]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009dc0:	e015      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	2102      	movs	r1, #2
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f001 f989 	bl	800b0e0 <RCCEx_PLL2_Config>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009dd2:	e00c      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3324      	adds	r3, #36	; 0x24
 8009dd8:	2102      	movs	r1, #2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f001 fa32 	bl	800b244 <RCCEx_PLL3_Config>
 8009de0:	4603      	mov	r3, r0
 8009de2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009de4:	e003      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	75fb      	strb	r3, [r7, #23]
      break;
 8009dea:	e000      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d109      	bne.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009df4:	4b94      	ldr	r3, [pc, #592]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e00:	4991      	ldr	r1, [pc, #580]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e02:	4313      	orrs	r3, r2
 8009e04:	650b      	str	r3, [r1, #80]	; 0x50
 8009e06:	e001      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e08:	7dfb      	ldrb	r3, [r7, #23]
 8009e0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d03d      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d826      	bhi.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009e20:	a201      	add	r2, pc, #4	; (adr r2, 8009e28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e26:	bf00      	nop
 8009e28:	08009e3d 	.word	0x08009e3d
 8009e2c:	08009e4b 	.word	0x08009e4b
 8009e30:	08009e5d 	.word	0x08009e5d
 8009e34:	08009e75 	.word	0x08009e75
 8009e38:	08009e75 	.word	0x08009e75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e3c:	4b82      	ldr	r3, [pc, #520]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e40:	4a81      	ldr	r2, [pc, #516]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e48:	e015      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	2100      	movs	r1, #0
 8009e50:	4618      	mov	r0, r3
 8009e52:	f001 f945 	bl	800b0e0 <RCCEx_PLL2_Config>
 8009e56:	4603      	mov	r3, r0
 8009e58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e5a:	e00c      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3324      	adds	r3, #36	; 0x24
 8009e60:	2100      	movs	r1, #0
 8009e62:	4618      	mov	r0, r3
 8009e64:	f001 f9ee 	bl	800b244 <RCCEx_PLL3_Config>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e6c:	e003      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	75fb      	strb	r3, [r7, #23]
      break;
 8009e72:	e000      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d109      	bne.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e7c:	4b72      	ldr	r3, [pc, #456]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e80:	f023 0207 	bic.w	r2, r3, #7
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e88:	496f      	ldr	r1, [pc, #444]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	650b      	str	r3, [r1, #80]	; 0x50
 8009e8e:	e001      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
 8009e92:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d051      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ea6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009eaa:	d036      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009eac:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009eb0:	d830      	bhi.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009eb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009eb6:	d032      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009eb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ebc:	d82a      	bhi.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009ebe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ec2:	d02e      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009ec4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ec8:	d824      	bhi.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ece:	d018      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ed4:	d81e      	bhi.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d003      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ede:	d007      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009ee0:	e018      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee2:	4b59      	ldr	r3, [pc, #356]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee6:	4a58      	ldr	r2, [pc, #352]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009eee:	e019      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	3304      	adds	r3, #4
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f001 f8f2 	bl	800b0e0 <RCCEx_PLL2_Config>
 8009efc:	4603      	mov	r3, r0
 8009efe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009f00:	e010      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3324      	adds	r3, #36	; 0x24
 8009f06:	2100      	movs	r1, #0
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f001 f99b 	bl	800b244 <RCCEx_PLL3_Config>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f12:	e007      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	75fb      	strb	r3, [r7, #23]
      break;
 8009f18:	e004      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009f1a:	bf00      	nop
 8009f1c:	e002      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009f1e:	bf00      	nop
 8009f20:	e000      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10a      	bne.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009f2a:	4b47      	ldr	r3, [pc, #284]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f2e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f38:	4943      	ldr	r1, [pc, #268]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	658b      	str	r3, [r1, #88]	; 0x58
 8009f3e:	e001      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f40:	7dfb      	ldrb	r3, [r7, #23]
 8009f42:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d051      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f56:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009f5a:	d036      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009f5c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009f60:	d830      	bhi.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009f62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f66:	d032      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009f68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f6c:	d82a      	bhi.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009f6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f72:	d02e      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009f74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f78:	d824      	bhi.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f7e:	d018      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009f80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f84:	d81e      	bhi.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d003      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009f8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f8e:	d007      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009f90:	e018      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f92:	4b2d      	ldr	r3, [pc, #180]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f96:	4a2c      	ldr	r2, [pc, #176]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f9e:	e019      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f001 f89a 	bl	800b0e0 <RCCEx_PLL2_Config>
 8009fac:	4603      	mov	r3, r0
 8009fae:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009fb0:	e010      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	3324      	adds	r3, #36	; 0x24
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f001 f943 	bl	800b244 <RCCEx_PLL3_Config>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009fc2:	e007      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fc8:	e004      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009fca:	bf00      	nop
 8009fcc:	e002      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009fce:	bf00      	nop
 8009fd0:	e000      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fd4:	7dfb      	ldrb	r3, [r7, #23]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10a      	bne.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009fda:	4b1b      	ldr	r3, [pc, #108]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fde:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009fe8:	4917      	ldr	r1, [pc, #92]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	658b      	str	r3, [r1, #88]	; 0x58
 8009fee:	e001      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d035      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a004:	2b30      	cmp	r3, #48	; 0x30
 800a006:	d01c      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a008:	2b30      	cmp	r3, #48	; 0x30
 800a00a:	d817      	bhi.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a00c:	2b20      	cmp	r3, #32
 800a00e:	d00c      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800a010:	2b20      	cmp	r3, #32
 800a012:	d813      	bhi.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a014:	2b00      	cmp	r3, #0
 800a016:	d019      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a018:	2b10      	cmp	r3, #16
 800a01a:	d10f      	bne.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a01c:	4b0a      	ldr	r3, [pc, #40]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a020:	4a09      	ldr	r2, [pc, #36]	; (800a048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a028:	e011      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	3304      	adds	r3, #4
 800a02e:	2102      	movs	r1, #2
 800a030:	4618      	mov	r0, r3
 800a032:	f001 f855 	bl	800b0e0 <RCCEx_PLL2_Config>
 800a036:	4603      	mov	r3, r0
 800a038:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a03a:	e008      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	75fb      	strb	r3, [r7, #23]
      break;
 800a040:	e005      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800a042:	bf00      	nop
 800a044:	e003      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a046:	bf00      	nop
 800a048:	58024400 	.word	0x58024400
      break;
 800a04c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d109      	bne.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a054:	4ba3      	ldr	r3, [pc, #652]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a058:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a060:	49a0      	ldr	r1, [pc, #640]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a062:	4313      	orrs	r3, r2
 800a064:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a066:	e001      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d047      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a07c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a080:	d030      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800a082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a086:	d82a      	bhi.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a088:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a08c:	d02c      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800a08e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a092:	d824      	bhi.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a098:	d018      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a09a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a09e:	d81e      	bhi.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d003      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a0a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0a8:	d007      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a0aa:	e018      	b.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0ac:	4b8d      	ldr	r3, [pc, #564]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b0:	4a8c      	ldr	r2, [pc, #560]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a0b8:	e017      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	2100      	movs	r1, #0
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f001 f80d 	bl	800b0e0 <RCCEx_PLL2_Config>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a0ca:	e00e      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3324      	adds	r3, #36	; 0x24
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f001 f8b6 	bl	800b244 <RCCEx_PLL3_Config>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a0dc:	e005      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	75fb      	strb	r3, [r7, #23]
      break;
 800a0e2:	e002      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a0e4:	bf00      	nop
 800a0e6:	e000      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a0e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d109      	bne.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a0f0:	4b7c      	ldr	r3, [pc, #496]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0f4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0fc:	4979      	ldr	r1, [pc, #484]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0fe:	4313      	orrs	r3, r2
 800a100:	650b      	str	r3, [r1, #80]	; 0x50
 800a102:	e001      	b.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a104:	7dfb      	ldrb	r3, [r7, #23]
 800a106:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d049      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a11c:	d02e      	beq.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800a11e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a122:	d828      	bhi.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a124:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a128:	d02a      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a12a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a12e:	d822      	bhi.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a130:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a134:	d026      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a136:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a13a:	d81c      	bhi.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a13c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a140:	d010      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a146:	d816      	bhi.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d01d      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a14c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a150:	d111      	bne.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	3304      	adds	r3, #4
 800a156:	2101      	movs	r1, #1
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 ffc1 	bl	800b0e0 <RCCEx_PLL2_Config>
 800a15e:	4603      	mov	r3, r0
 800a160:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a162:	e012      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	3324      	adds	r3, #36	; 0x24
 800a168:	2101      	movs	r1, #1
 800a16a:	4618      	mov	r0, r3
 800a16c:	f001 f86a 	bl	800b244 <RCCEx_PLL3_Config>
 800a170:	4603      	mov	r3, r0
 800a172:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a174:	e009      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	75fb      	strb	r3, [r7, #23]
      break;
 800a17a:	e006      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a17c:	bf00      	nop
 800a17e:	e004      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a180:	bf00      	nop
 800a182:	e002      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a184:	bf00      	nop
 800a186:	e000      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d109      	bne.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a190:	4b54      	ldr	r3, [pc, #336]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a194:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a19c:	4951      	ldr	r1, [pc, #324]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	650b      	str	r3, [r1, #80]	; 0x50
 800a1a2:	e001      	b.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1a4:	7dfb      	ldrb	r3, [r7, #23]
 800a1a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d04b      	beq.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a1ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1be:	d02e      	beq.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a1c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1c4:	d828      	bhi.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ca:	d02a      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a1cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d0:	d822      	bhi.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a1d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1d6:	d026      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a1d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1dc:	d81c      	bhi.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a1de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1e2:	d010      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a1e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1e8:	d816      	bhi.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d01d      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a1ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1f2:	d111      	bne.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 ff70 	bl	800b0e0 <RCCEx_PLL2_Config>
 800a200:	4603      	mov	r3, r0
 800a202:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a204:	e012      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3324      	adds	r3, #36	; 0x24
 800a20a:	2101      	movs	r1, #1
 800a20c:	4618      	mov	r0, r3
 800a20e:	f001 f819 	bl	800b244 <RCCEx_PLL3_Config>
 800a212:	4603      	mov	r3, r0
 800a214:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a216:	e009      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	75fb      	strb	r3, [r7, #23]
      break;
 800a21c:	e006      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a21e:	bf00      	nop
 800a220:	e004      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a222:	bf00      	nop
 800a224:	e002      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a226:	bf00      	nop
 800a228:	e000      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a22a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a22c:	7dfb      	ldrb	r3, [r7, #23]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10a      	bne.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a232:	4b2c      	ldr	r3, [pc, #176]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a236:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a240:	4928      	ldr	r1, [pc, #160]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a242:	4313      	orrs	r3, r2
 800a244:	658b      	str	r3, [r1, #88]	; 0x58
 800a246:	e001      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a248:	7dfb      	ldrb	r3, [r7, #23]
 800a24a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d02f      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a25c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a260:	d00e      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a266:	d814      	bhi.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d015      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a26c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a270:	d10f      	bne.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a272:	4b1c      	ldr	r3, [pc, #112]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a276:	4a1b      	ldr	r2, [pc, #108]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a27c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a27e:	e00c      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3304      	adds	r3, #4
 800a284:	2101      	movs	r1, #1
 800a286:	4618      	mov	r0, r3
 800a288:	f000 ff2a 	bl	800b0e0 <RCCEx_PLL2_Config>
 800a28c:	4603      	mov	r3, r0
 800a28e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a290:	e003      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	75fb      	strb	r3, [r7, #23]
      break;
 800a296:	e000      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a29a:	7dfb      	ldrb	r3, [r7, #23]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d109      	bne.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a2a0:	4b10      	ldr	r3, [pc, #64]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a2a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2ac:	490d      	ldr	r1, [pc, #52]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	650b      	str	r3, [r1, #80]	; 0x50
 800a2b2:	e001      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2b4:	7dfb      	ldrb	r3, [r7, #23]
 800a2b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d034      	beq.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c8:	2b03      	cmp	r3, #3
 800a2ca:	d81d      	bhi.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a2cc:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d2:	bf00      	nop
 800a2d4:	0800a30f 	.word	0x0800a30f
 800a2d8:	0800a2e9 	.word	0x0800a2e9
 800a2dc:	0800a2f7 	.word	0x0800a2f7
 800a2e0:	0800a30f 	.word	0x0800a30f
 800a2e4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2e8:	4bb1      	ldr	r3, [pc, #708]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	4ab0      	ldr	r2, [pc, #704]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a2f4:	e00c      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	2102      	movs	r1, #2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 feef 	bl	800b0e0 <RCCEx_PLL2_Config>
 800a302:	4603      	mov	r3, r0
 800a304:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a306:	e003      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	75fb      	strb	r3, [r7, #23]
      break;
 800a30c:	e000      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a30e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a310:	7dfb      	ldrb	r3, [r7, #23]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d109      	bne.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a316:	4ba6      	ldr	r3, [pc, #664]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a31a:	f023 0203 	bic.w	r2, r3, #3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a322:	49a3      	ldr	r1, [pc, #652]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a324:	4313      	orrs	r3, r2
 800a326:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a328:	e001      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
 800a32c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 8086 	beq.w	800a448 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a33c:	4b9d      	ldr	r3, [pc, #628]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a9c      	ldr	r2, [pc, #624]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a346:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a348:	f7fb fc86 	bl	8005c58 <HAL_GetTick>
 800a34c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a34e:	e009      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a350:	f7fb fc82 	bl	8005c58 <HAL_GetTick>
 800a354:	4602      	mov	r2, r0
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	2b64      	cmp	r3, #100	; 0x64
 800a35c:	d902      	bls.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a35e:	2303      	movs	r3, #3
 800a360:	75fb      	strb	r3, [r7, #23]
        break;
 800a362:	e005      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a364:	4b93      	ldr	r3, [pc, #588]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d0ef      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a370:	7dfb      	ldrb	r3, [r7, #23]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d166      	bne.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a376:	4b8e      	ldr	r3, [pc, #568]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a378:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a380:	4053      	eors	r3, r2
 800a382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a386:	2b00      	cmp	r3, #0
 800a388:	d013      	beq.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a38a:	4b89      	ldr	r3, [pc, #548]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a38e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a392:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a394:	4b86      	ldr	r3, [pc, #536]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a398:	4a85      	ldr	r2, [pc, #532]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a39a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a39e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3a0:	4b83      	ldr	r3, [pc, #524]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a3a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a4:	4a82      	ldr	r2, [pc, #520]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a3a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3aa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a3ac:	4a80      	ldr	r2, [pc, #512]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a3b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3bc:	d115      	bne.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3be:	f7fb fc4b 	bl	8005c58 <HAL_GetTick>
 800a3c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3c4:	e00b      	b.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3c6:	f7fb fc47 	bl	8005c58 <HAL_GetTick>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d902      	bls.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	75fb      	strb	r3, [r7, #23]
            break;
 800a3dc:	e005      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3de:	4b74      	ldr	r3, [pc, #464]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e2:	f003 0302 	and.w	r3, r3, #2
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d0ed      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d126      	bne.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a3f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3fe:	d10d      	bne.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a400:	4b6b      	ldr	r3, [pc, #428]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a40e:	0919      	lsrs	r1, r3, #4
 800a410:	4b69      	ldr	r3, [pc, #420]	; (800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a412:	400b      	ands	r3, r1
 800a414:	4966      	ldr	r1, [pc, #408]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a416:	4313      	orrs	r3, r2
 800a418:	610b      	str	r3, [r1, #16]
 800a41a:	e005      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a41c:	4b64      	ldr	r3, [pc, #400]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	4a63      	ldr	r2, [pc, #396]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a422:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a426:	6113      	str	r3, [r2, #16]
 800a428:	4b61      	ldr	r3, [pc, #388]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a42a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a436:	495e      	ldr	r1, [pc, #376]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a438:	4313      	orrs	r3, r2
 800a43a:	670b      	str	r3, [r1, #112]	; 0x70
 800a43c:	e004      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	75bb      	strb	r3, [r7, #22]
 800a442:	e001      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a444:	7dfb      	ldrb	r3, [r7, #23]
 800a446:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d07e      	beq.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a458:	2b28      	cmp	r3, #40	; 0x28
 800a45a:	d867      	bhi.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a45c:	a201      	add	r2, pc, #4	; (adr r2, 800a464 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a462:	bf00      	nop
 800a464:	0800a533 	.word	0x0800a533
 800a468:	0800a52d 	.word	0x0800a52d
 800a46c:	0800a52d 	.word	0x0800a52d
 800a470:	0800a52d 	.word	0x0800a52d
 800a474:	0800a52d 	.word	0x0800a52d
 800a478:	0800a52d 	.word	0x0800a52d
 800a47c:	0800a52d 	.word	0x0800a52d
 800a480:	0800a52d 	.word	0x0800a52d
 800a484:	0800a509 	.word	0x0800a509
 800a488:	0800a52d 	.word	0x0800a52d
 800a48c:	0800a52d 	.word	0x0800a52d
 800a490:	0800a52d 	.word	0x0800a52d
 800a494:	0800a52d 	.word	0x0800a52d
 800a498:	0800a52d 	.word	0x0800a52d
 800a49c:	0800a52d 	.word	0x0800a52d
 800a4a0:	0800a52d 	.word	0x0800a52d
 800a4a4:	0800a51b 	.word	0x0800a51b
 800a4a8:	0800a52d 	.word	0x0800a52d
 800a4ac:	0800a52d 	.word	0x0800a52d
 800a4b0:	0800a52d 	.word	0x0800a52d
 800a4b4:	0800a52d 	.word	0x0800a52d
 800a4b8:	0800a52d 	.word	0x0800a52d
 800a4bc:	0800a52d 	.word	0x0800a52d
 800a4c0:	0800a52d 	.word	0x0800a52d
 800a4c4:	0800a533 	.word	0x0800a533
 800a4c8:	0800a52d 	.word	0x0800a52d
 800a4cc:	0800a52d 	.word	0x0800a52d
 800a4d0:	0800a52d 	.word	0x0800a52d
 800a4d4:	0800a52d 	.word	0x0800a52d
 800a4d8:	0800a52d 	.word	0x0800a52d
 800a4dc:	0800a52d 	.word	0x0800a52d
 800a4e0:	0800a52d 	.word	0x0800a52d
 800a4e4:	0800a533 	.word	0x0800a533
 800a4e8:	0800a52d 	.word	0x0800a52d
 800a4ec:	0800a52d 	.word	0x0800a52d
 800a4f0:	0800a52d 	.word	0x0800a52d
 800a4f4:	0800a52d 	.word	0x0800a52d
 800a4f8:	0800a52d 	.word	0x0800a52d
 800a4fc:	0800a52d 	.word	0x0800a52d
 800a500:	0800a52d 	.word	0x0800a52d
 800a504:	0800a533 	.word	0x0800a533
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	3304      	adds	r3, #4
 800a50c:	2101      	movs	r1, #1
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 fde6 	bl	800b0e0 <RCCEx_PLL2_Config>
 800a514:	4603      	mov	r3, r0
 800a516:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a518:	e00c      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	3324      	adds	r3, #36	; 0x24
 800a51e:	2101      	movs	r1, #1
 800a520:	4618      	mov	r0, r3
 800a522:	f000 fe8f 	bl	800b244 <RCCEx_PLL3_Config>
 800a526:	4603      	mov	r3, r0
 800a528:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a52a:	e003      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	75fb      	strb	r3, [r7, #23]
      break;
 800a530:	e000      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a532:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a534:	7dfb      	ldrb	r3, [r7, #23]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d109      	bne.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a53a:	4b1d      	ldr	r3, [pc, #116]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a53e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a546:	491a      	ldr	r1, [pc, #104]	; (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a548:	4313      	orrs	r3, r2
 800a54a:	654b      	str	r3, [r1, #84]	; 0x54
 800a54c:	e001      	b.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
 800a550:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 0302 	and.w	r3, r3, #2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d03e      	beq.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a562:	2b05      	cmp	r3, #5
 800a564:	d820      	bhi.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a566:	a201      	add	r2, pc, #4	; (adr r2, 800a56c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56c:	0800a5bd 	.word	0x0800a5bd
 800a570:	0800a585 	.word	0x0800a585
 800a574:	0800a597 	.word	0x0800a597
 800a578:	0800a5bd 	.word	0x0800a5bd
 800a57c:	0800a5bd 	.word	0x0800a5bd
 800a580:	0800a5bd 	.word	0x0800a5bd
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3304      	adds	r3, #4
 800a588:	2101      	movs	r1, #1
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 fda8 	bl	800b0e0 <RCCEx_PLL2_Config>
 800a590:	4603      	mov	r3, r0
 800a592:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a594:	e013      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	3324      	adds	r3, #36	; 0x24
 800a59a:	2101      	movs	r1, #1
 800a59c:	4618      	mov	r0, r3
 800a59e:	f000 fe51 	bl	800b244 <RCCEx_PLL3_Config>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a5a6:	e00a      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a5ac:	e007      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a5ae:	bf00      	nop
 800a5b0:	58024400 	.word	0x58024400
 800a5b4:	58024800 	.word	0x58024800
 800a5b8:	00ffffcf 	.word	0x00ffffcf
      break;
 800a5bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5be:	7dfb      	ldrb	r3, [r7, #23]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d109      	bne.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a5c4:	4b9f      	ldr	r3, [pc, #636]	; (800a844 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a5c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5c8:	f023 0207 	bic.w	r2, r3, #7
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5d0:	499c      	ldr	r1, [pc, #624]	; (800a844 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	654b      	str	r3, [r1, #84]	; 0x54
 800a5d6:	e001      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
 800a5da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 0304 	and.w	r3, r3, #4
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d039      	beq.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5ee:	2b05      	cmp	r3, #5
 800a5f0:	d820      	bhi.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a5f2:	a201      	add	r2, pc, #4	; (adr r2, 800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f8:	0800a63b 	.word	0x0800a63b
 800a5fc:	0800a611 	.word	0x0800a611
 800a600:	0800a623 	.word	0x0800a623
 800a604:	0800a63b 	.word	0x0800a63b
 800a608:	0800a63b 	.word	0x0800a63b
 800a60c:	0800a63b 	.word	0x0800a63b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	3304      	adds	r3, #4
 800a614:	2101      	movs	r1, #1
 800a616:	4618      	mov	r0, r3
 800a618:	f000 fd62 	bl	800b0e0 <RCCEx_PLL2_Config>
 800a61c:	4603      	mov	r3, r0
 800a61e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a620:	e00c      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3324      	adds	r3, #36	; 0x24
 800a626:	2101      	movs	r1, #1
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 fe0b 	bl	800b244 <RCCEx_PLL3_Config>
 800a62e:	4603      	mov	r3, r0
 800a630:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a632:	e003      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	75fb      	strb	r3, [r7, #23]
      break;
 800a638:	e000      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a63a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d10a      	bne.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a642:	4b80      	ldr	r3, [pc, #512]	; (800a844 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a646:	f023 0207 	bic.w	r2, r3, #7
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a650:	497c      	ldr	r1, [pc, #496]	; (800a844 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a652:	4313      	orrs	r3, r2
 800a654:	658b      	str	r3, [r1, #88]	; 0x58
 800a656:	e001      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 0320 	and.w	r3, r3, #32
 800a664:	2b00      	cmp	r3, #0
 800a666:	d04b      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a66e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a672:	d02e      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a678:	d828      	bhi.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a67a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a67e:	d02a      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a684:	d822      	bhi.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a686:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a68a:	d026      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a68c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a690:	d81c      	bhi.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a696:	d010      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a69c:	d816      	bhi.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d01d      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a6a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6a6:	d111      	bne.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	3304      	adds	r3, #4
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f000 fd16 	bl	800b0e0 <RCCEx_PLL2_Config>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a6b8:	e012      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	3324      	adds	r3, #36	; 0x24
 800a6be:	2102      	movs	r1, #2
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f000 fdbf 	bl	800b244 <RCCEx_PLL3_Config>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a6ca:	e009      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a6d0:	e006      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a6d2:	bf00      	nop
 800a6d4:	e004      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a6d6:	bf00      	nop
 800a6d8:	e002      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a6da:	bf00      	nop
 800a6dc:	e000      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a6de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6e0:	7dfb      	ldrb	r3, [r7, #23]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10a      	bne.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a6e6:	4b57      	ldr	r3, [pc, #348]	; (800a844 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f4:	4953      	ldr	r1, [pc, #332]	; (800a844 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	654b      	str	r3, [r1, #84]	; 0x54
 800a6fa:	e001      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6fc:	7dfb      	ldrb	r3, [r7, #23]
 800a6fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d04b      	beq.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a712:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a716:	d02e      	beq.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a718:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a71c:	d828      	bhi.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a71e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a722:	d02a      	beq.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a728:	d822      	bhi.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a72a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a72e:	d026      	beq.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a730:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a734:	d81c      	bhi.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a73a:	d010      	beq.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a73c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a740:	d816      	bhi.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a742:	2b00      	cmp	r3, #0
 800a744:	d01d      	beq.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a74a:	d111      	bne.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3304      	adds	r3, #4
 800a750:	2100      	movs	r1, #0
 800a752:	4618      	mov	r0, r3
 800a754:	f000 fcc4 	bl	800b0e0 <RCCEx_PLL2_Config>
 800a758:	4603      	mov	r3, r0
 800a75a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a75c:	e012      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	3324      	adds	r3, #36	; 0x24
 800a762:	2102      	movs	r1, #2
 800a764:	4618      	mov	r0, r3
 800a766:	f000 fd6d 	bl	800b244 <RCCEx_PLL3_Config>
 800a76a:	4603      	mov	r3, r0
 800a76c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a76e:	e009      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	75fb      	strb	r3, [r7, #23]
      break;
 800a774:	e006      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a776:	bf00      	nop
 800a778:	e004      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a77a:	bf00      	nop
 800a77c:	e002      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a77e:	bf00      	nop
 800a780:	e000      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a782:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a784:	7dfb      	ldrb	r3, [r7, #23]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10a      	bne.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a78a:	4b2e      	ldr	r3, [pc, #184]	; (800a844 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a78e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a798:	492a      	ldr	r1, [pc, #168]	; (800a844 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a79a:	4313      	orrs	r3, r2
 800a79c:	658b      	str	r3, [r1, #88]	; 0x58
 800a79e:	e001      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a0:	7dfb      	ldrb	r3, [r7, #23]
 800a7a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d04d      	beq.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a7b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a7ba:	d02e      	beq.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a7bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a7c0:	d828      	bhi.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a7c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7c6:	d02a      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a7c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7cc:	d822      	bhi.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a7ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a7d2:	d026      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a7d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a7d8:	d81c      	bhi.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a7da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7de:	d010      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a7e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7e4:	d816      	bhi.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d01d      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a7ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7ee:	d111      	bne.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 fc72 	bl	800b0e0 <RCCEx_PLL2_Config>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a800:	e012      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	3324      	adds	r3, #36	; 0x24
 800a806:	2102      	movs	r1, #2
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 fd1b 	bl	800b244 <RCCEx_PLL3_Config>
 800a80e:	4603      	mov	r3, r0
 800a810:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a812:	e009      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	75fb      	strb	r3, [r7, #23]
      break;
 800a818:	e006      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a81a:	bf00      	nop
 800a81c:	e004      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a81e:	bf00      	nop
 800a820:	e002      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a822:	bf00      	nop
 800a824:	e000      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a826:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a828:	7dfb      	ldrb	r3, [r7, #23]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d10c      	bne.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a82e:	4b05      	ldr	r3, [pc, #20]	; (800a844 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a83c:	4901      	ldr	r1, [pc, #4]	; (800a844 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a83e:	4313      	orrs	r3, r2
 800a840:	658b      	str	r3, [r1, #88]	; 0x58
 800a842:	e003      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a844:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a848:	7dfb      	ldrb	r3, [r7, #23]
 800a84a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 0308 	and.w	r3, r3, #8
 800a854:	2b00      	cmp	r3, #0
 800a856:	d018      	beq.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a85c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a860:	d10a      	bne.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	3324      	adds	r3, #36	; 0x24
 800a866:	2102      	movs	r1, #2
 800a868:	4618      	mov	r0, r3
 800a86a:	f000 fceb 	bl	800b244 <RCCEx_PLL3_Config>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d001      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a878:	4b8a      	ldr	r3, [pc, #552]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a87a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a884:	4987      	ldr	r1, [pc, #540]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a886:	4313      	orrs	r3, r2
 800a888:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f003 0310 	and.w	r3, r3, #16
 800a892:	2b00      	cmp	r3, #0
 800a894:	d01a      	beq.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a89c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8a0:	d10a      	bne.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	3324      	adds	r3, #36	; 0x24
 800a8a6:	2102      	movs	r1, #2
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 fccb 	bl	800b244 <RCCEx_PLL3_Config>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d001      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a8b8:	4b7a      	ldr	r3, [pc, #488]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8c6:	4977      	ldr	r1, [pc, #476]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d034      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8e2:	d01d      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a8e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8e8:	d817      	bhi.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a8ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8f2:	d009      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a8f4:	e011      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 fbef 	bl	800b0e0 <RCCEx_PLL2_Config>
 800a902:	4603      	mov	r3, r0
 800a904:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a906:	e00c      	b.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	3324      	adds	r3, #36	; 0x24
 800a90c:	2102      	movs	r1, #2
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 fc98 	bl	800b244 <RCCEx_PLL3_Config>
 800a914:	4603      	mov	r3, r0
 800a916:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a918:	e003      	b.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	75fb      	strb	r3, [r7, #23]
      break;
 800a91e:	e000      	b.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a920:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a922:	7dfb      	ldrb	r3, [r7, #23]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10a      	bne.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a928:	4b5e      	ldr	r3, [pc, #376]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a92a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a92c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a936:	495b      	ldr	r1, [pc, #364]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a938:	4313      	orrs	r3, r2
 800a93a:	658b      	str	r3, [r1, #88]	; 0x58
 800a93c:	e001      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a93e:	7dfb      	ldrb	r3, [r7, #23]
 800a940:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d033      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a954:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a958:	d01c      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a95a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a95e:	d816      	bhi.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a964:	d003      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a96a:	d007      	beq.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a96c:	e00f      	b.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a96e:	4b4d      	ldr	r3, [pc, #308]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a972:	4a4c      	ldr	r2, [pc, #304]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a978:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a97a:	e00c      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	3324      	adds	r3, #36	; 0x24
 800a980:	2101      	movs	r1, #1
 800a982:	4618      	mov	r0, r3
 800a984:	f000 fc5e 	bl	800b244 <RCCEx_PLL3_Config>
 800a988:	4603      	mov	r3, r0
 800a98a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a98c:	e003      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	75fb      	strb	r3, [r7, #23]
      break;
 800a992:	e000      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a994:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a996:	7dfb      	ldrb	r3, [r7, #23]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10a      	bne.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a99c:	4b41      	ldr	r3, [pc, #260]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a99e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9aa:	493e      	ldr	r1, [pc, #248]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	654b      	str	r3, [r1, #84]	; 0x54
 800a9b0:	e001      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b2:	7dfb      	ldrb	r3, [r7, #23]
 800a9b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d029      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d003      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a9ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ce:	d007      	beq.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a9d0:	e00f      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9d2:	4b34      	ldr	r3, [pc, #208]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d6:	4a33      	ldr	r2, [pc, #204]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a9d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a9de:	e00b      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	2102      	movs	r1, #2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 fb7a 	bl	800b0e0 <RCCEx_PLL2_Config>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a9f0:	e002      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a9f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9f8:	7dfb      	ldrb	r3, [r7, #23]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d109      	bne.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a9fe:	4b29      	ldr	r3, [pc, #164]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aa00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa0a:	4926      	ldr	r1, [pc, #152]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aa10:	e001      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
 800aa14:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00a      	beq.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	3324      	adds	r3, #36	; 0x24
 800aa26:	2102      	movs	r1, #2
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f000 fc0b 	bl	800b244 <RCCEx_PLL3_Config>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d033      	beq.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa4c:	d017      	beq.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800aa4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa52:	d811      	bhi.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aa54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa58:	d013      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800aa5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa5e:	d80b      	bhi.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d010      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800aa64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa68:	d106      	bne.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa6a:	4b0e      	ldr	r3, [pc, #56]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aa6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6e:	4a0d      	ldr	r2, [pc, #52]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aa70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800aa76:	e007      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa7c:	e004      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800aa7e:	bf00      	nop
 800aa80:	e002      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800aa82:	bf00      	nop
 800aa84:	e000      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800aa86:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10c      	bne.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aa8e:	4b05      	ldr	r3, [pc, #20]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aa90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa9a:	4902      	ldr	r1, [pc, #8]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	654b      	str	r3, [r1, #84]	; 0x54
 800aaa0:	e004      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800aaa2:	bf00      	nop
 800aaa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d008      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800aab8:	4b29      	ldr	r3, [pc, #164]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aaba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aabc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aac4:	4926      	ldr	r1, [pc, #152]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aac6:	4313      	orrs	r3, r2
 800aac8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d008      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aad6:	4b22      	ldr	r3, [pc, #136]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aada:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aae2:	491f      	ldr	r1, [pc, #124]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aae4:	4313      	orrs	r3, r2
 800aae6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00d      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aaf4:	4b1a      	ldr	r3, [pc, #104]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	4a19      	ldr	r2, [pc, #100]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aafa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aafe:	6113      	str	r3, [r2, #16]
 800ab00:	4b17      	ldr	r3, [pc, #92]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab02:	691a      	ldr	r2, [r3, #16]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ab0a:	4915      	ldr	r1, [pc, #84]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	da08      	bge.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ab18:	4b11      	ldr	r3, [pc, #68]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab24:	490e      	ldr	r1, [pc, #56]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab26:	4313      	orrs	r3, r2
 800ab28:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d009      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ab36:	4b0a      	ldr	r3, [pc, #40]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab44:	4906      	ldr	r1, [pc, #24]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ab4a:	7dbb      	ldrb	r3, [r7, #22]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	e000      	b.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3718      	adds	r7, #24
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	58024400 	.word	0x58024400

0800ab64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab68:	f7ff f8a6 	bl	8009cb8 <HAL_RCC_GetHCLKFreq>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	4b06      	ldr	r3, [pc, #24]	; (800ab88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	091b      	lsrs	r3, r3, #4
 800ab74:	f003 0307 	and.w	r3, r3, #7
 800ab78:	4904      	ldr	r1, [pc, #16]	; (800ab8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ab7a:	5ccb      	ldrb	r3, [r1, r3]
 800ab7c:	f003 031f 	and.w	r3, r3, #31
 800ab80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	58024400 	.word	0x58024400
 800ab8c:	0800f674 	.word	0x0800f674

0800ab90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b089      	sub	sp, #36	; 0x24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab98:	4ba1      	ldr	r3, [pc, #644]	; (800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9c:	f003 0303 	and.w	r3, r3, #3
 800aba0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800aba2:	4b9f      	ldr	r3, [pc, #636]	; (800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba6:	0b1b      	lsrs	r3, r3, #12
 800aba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800abae:	4b9c      	ldr	r3, [pc, #624]	; (800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb2:	091b      	lsrs	r3, r3, #4
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800abba:	4b99      	ldr	r3, [pc, #612]	; (800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abbe:	08db      	lsrs	r3, r3, #3
 800abc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	fb02 f303 	mul.w	r3, r2, r3
 800abca:	ee07 3a90 	vmov	s15, r3
 800abce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f000 8111 	beq.w	800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	f000 8083 	beq.w	800acec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	2b02      	cmp	r3, #2
 800abea:	f200 80a1 	bhi.w	800ad30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d056      	beq.n	800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800abfa:	e099      	b.n	800ad30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abfc:	4b88      	ldr	r3, [pc, #544]	; (800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f003 0320 	and.w	r3, r3, #32
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d02d      	beq.n	800ac64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac08:	4b85      	ldr	r3, [pc, #532]	; (800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	08db      	lsrs	r3, r3, #3
 800ac0e:	f003 0303 	and.w	r3, r3, #3
 800ac12:	4a84      	ldr	r2, [pc, #528]	; (800ae24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ac14:	fa22 f303 	lsr.w	r3, r2, r3
 800ac18:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	ee07 3a90 	vmov	s15, r3
 800ac20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	ee07 3a90 	vmov	s15, r3
 800ac2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac32:	4b7b      	ldr	r3, [pc, #492]	; (800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac3a:	ee07 3a90 	vmov	s15, r3
 800ac3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac46:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ac62:	e087      	b.n	800ad74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	ee07 3a90 	vmov	s15, r3
 800ac6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ac72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac76:	4b6a      	ldr	r3, [pc, #424]	; (800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aca2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aca6:	e065      	b.n	800ad74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	ee07 3a90 	vmov	s15, r3
 800acae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800acb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acba:	4b59      	ldr	r3, [pc, #356]	; (800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acc2:	ee07 3a90 	vmov	s15, r3
 800acc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acca:	ed97 6a03 	vldr	s12, [r7, #12]
 800acce:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ace2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acea:	e043      	b.n	800ad74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800acfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfe:	4b48      	ldr	r3, [pc, #288]	; (800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad12:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad2e:	e021      	b.n	800ad74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad42:	4b37      	ldr	r3, [pc, #220]	; (800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad56:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ad74:	4b2a      	ldr	r3, [pc, #168]	; (800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad78:	0a5b      	lsrs	r3, r3, #9
 800ad7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad9a:	ee17 2a90 	vmov	r2, s15
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ada2:	4b1f      	ldr	r3, [pc, #124]	; (800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ada4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada6:	0c1b      	lsrs	r3, r3, #16
 800ada8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adac:	ee07 3a90 	vmov	s15, r3
 800adb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adbc:	edd7 6a07 	vldr	s13, [r7, #28]
 800adc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adc8:	ee17 2a90 	vmov	r2, s15
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800add0:	4b13      	ldr	r3, [pc, #76]	; (800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800add2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add4:	0e1b      	lsrs	r3, r3, #24
 800add6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adda:	ee07 3a90 	vmov	s15, r3
 800adde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ade6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adea:	edd7 6a07 	vldr	s13, [r7, #28]
 800adee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adf6:	ee17 2a90 	vmov	r2, s15
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800adfe:	e008      	b.n	800ae12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	609a      	str	r2, [r3, #8]
}
 800ae12:	bf00      	nop
 800ae14:	3724      	adds	r7, #36	; 0x24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	58024400 	.word	0x58024400
 800ae24:	03d09000 	.word	0x03d09000
 800ae28:	46000000 	.word	0x46000000
 800ae2c:	4c742400 	.word	0x4c742400
 800ae30:	4a742400 	.word	0x4a742400
 800ae34:	4af42400 	.word	0x4af42400

0800ae38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b089      	sub	sp, #36	; 0x24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae40:	4ba1      	ldr	r3, [pc, #644]	; (800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae44:	f003 0303 	and.w	r3, r3, #3
 800ae48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ae4a:	4b9f      	ldr	r3, [pc, #636]	; (800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae4e:	0d1b      	lsrs	r3, r3, #20
 800ae50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae56:	4b9c      	ldr	r3, [pc, #624]	; (800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5a:	0a1b      	lsrs	r3, r3, #8
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ae62:	4b99      	ldr	r3, [pc, #612]	; (800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae66:	08db      	lsrs	r3, r3, #3
 800ae68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	fb02 f303 	mul.w	r3, r2, r3
 800ae72:	ee07 3a90 	vmov	s15, r3
 800ae76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f000 8111 	beq.w	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	f000 8083 	beq.w	800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	f200 80a1 	bhi.w	800afd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d003      	beq.n	800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d056      	beq.n	800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aea2:	e099      	b.n	800afd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aea4:	4b88      	ldr	r3, [pc, #544]	; (800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f003 0320 	and.w	r3, r3, #32
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d02d      	beq.n	800af0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aeb0:	4b85      	ldr	r3, [pc, #532]	; (800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	08db      	lsrs	r3, r3, #3
 800aeb6:	f003 0303 	and.w	r3, r3, #3
 800aeba:	4a84      	ldr	r2, [pc, #528]	; (800b0cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aebc:	fa22 f303 	lsr.w	r3, r2, r3
 800aec0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	ee07 3a90 	vmov	s15, r3
 800aec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	ee07 3a90 	vmov	s15, r3
 800aed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeda:	4b7b      	ldr	r3, [pc, #492]	; (800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee2:	ee07 3a90 	vmov	s15, r3
 800aee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeea:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aefa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aefe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800af0a:	e087      	b.n	800b01c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	ee07 3a90 	vmov	s15, r3
 800af12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800af1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af1e:	4b6a      	ldr	r3, [pc, #424]	; (800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af32:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af4e:	e065      	b.n	800b01c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	ee07 3a90 	vmov	s15, r3
 800af56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af62:	4b59      	ldr	r3, [pc, #356]	; (800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af6a:	ee07 3a90 	vmov	s15, r3
 800af6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af72:	ed97 6a03 	vldr	s12, [r7, #12]
 800af76:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af92:	e043      	b.n	800b01c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	ee07 3a90 	vmov	s15, r3
 800af9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b0dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800afa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afa6:	4b48      	ldr	r3, [pc, #288]	; (800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afae:	ee07 3a90 	vmov	s15, r3
 800afb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afd6:	e021      	b.n	800b01c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	ee07 3a90 	vmov	s15, r3
 800afde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800afe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afea:	4b37      	ldr	r3, [pc, #220]	; (800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff2:	ee07 3a90 	vmov	s15, r3
 800aff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800affa:	ed97 6a03 	vldr	s12, [r7, #12]
 800affe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b00a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b016:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b01a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b01c:	4b2a      	ldr	r3, [pc, #168]	; (800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b020:	0a5b      	lsrs	r3, r3, #9
 800b022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b026:	ee07 3a90 	vmov	s15, r3
 800b02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b032:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b036:	edd7 6a07 	vldr	s13, [r7, #28]
 800b03a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b03e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b042:	ee17 2a90 	vmov	r2, s15
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b04a:	4b1f      	ldr	r3, [pc, #124]	; (800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04e:	0c1b      	lsrs	r3, r3, #16
 800b050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b054:	ee07 3a90 	vmov	s15, r3
 800b058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b060:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b064:	edd7 6a07 	vldr	s13, [r7, #28]
 800b068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b06c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b070:	ee17 2a90 	vmov	r2, s15
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b078:	4b13      	ldr	r3, [pc, #76]	; (800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07c:	0e1b      	lsrs	r3, r3, #24
 800b07e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b082:	ee07 3a90 	vmov	s15, r3
 800b086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b08a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b08e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b092:	edd7 6a07 	vldr	s13, [r7, #28]
 800b096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b09a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b09e:	ee17 2a90 	vmov	r2, s15
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b0a6:	e008      	b.n	800b0ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	609a      	str	r2, [r3, #8]
}
 800b0ba:	bf00      	nop
 800b0bc:	3724      	adds	r7, #36	; 0x24
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	58024400 	.word	0x58024400
 800b0cc:	03d09000 	.word	0x03d09000
 800b0d0:	46000000 	.word	0x46000000
 800b0d4:	4c742400 	.word	0x4c742400
 800b0d8:	4a742400 	.word	0x4a742400
 800b0dc:	4af42400 	.word	0x4af42400

0800b0e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b0ee:	4b53      	ldr	r3, [pc, #332]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f2:	f003 0303 	and.w	r3, r3, #3
 800b0f6:	2b03      	cmp	r3, #3
 800b0f8:	d101      	bne.n	800b0fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e099      	b.n	800b232 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b0fe:	4b4f      	ldr	r3, [pc, #316]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a4e      	ldr	r2, [pc, #312]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b104:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b10a:	f7fa fda5 	bl	8005c58 <HAL_GetTick>
 800b10e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b110:	e008      	b.n	800b124 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b112:	f7fa fda1 	bl	8005c58 <HAL_GetTick>
 800b116:	4602      	mov	r2, r0
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d901      	bls.n	800b124 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b120:	2303      	movs	r3, #3
 800b122:	e086      	b.n	800b232 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b124:	4b45      	ldr	r3, [pc, #276]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1f0      	bne.n	800b112 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b130:	4b42      	ldr	r3, [pc, #264]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b134:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	031b      	lsls	r3, r3, #12
 800b13e:	493f      	ldr	r1, [pc, #252]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b140:	4313      	orrs	r3, r2
 800b142:	628b      	str	r3, [r1, #40]	; 0x28
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	3b01      	subs	r3, #1
 800b14a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	3b01      	subs	r3, #1
 800b154:	025b      	lsls	r3, r3, #9
 800b156:	b29b      	uxth	r3, r3
 800b158:	431a      	orrs	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	3b01      	subs	r3, #1
 800b160:	041b      	lsls	r3, r3, #16
 800b162:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b166:	431a      	orrs	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	691b      	ldr	r3, [r3, #16]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	061b      	lsls	r3, r3, #24
 800b170:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b174:	4931      	ldr	r1, [pc, #196]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b176:	4313      	orrs	r3, r2
 800b178:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b17a:	4b30      	ldr	r3, [pc, #192]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	492d      	ldr	r1, [pc, #180]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b188:	4313      	orrs	r3, r2
 800b18a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b18c:	4b2b      	ldr	r3, [pc, #172]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b190:	f023 0220 	bic.w	r2, r3, #32
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	4928      	ldr	r1, [pc, #160]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b19a:	4313      	orrs	r3, r2
 800b19c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b19e:	4b27      	ldr	r3, [pc, #156]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a2:	4a26      	ldr	r2, [pc, #152]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b1a4:	f023 0310 	bic.w	r3, r3, #16
 800b1a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b1aa:	4b24      	ldr	r3, [pc, #144]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b1ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1ae:	4b24      	ldr	r3, [pc, #144]	; (800b240 <RCCEx_PLL2_Config+0x160>)
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	69d2      	ldr	r2, [r2, #28]
 800b1b6:	00d2      	lsls	r2, r2, #3
 800b1b8:	4920      	ldr	r1, [pc, #128]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b1be:	4b1f      	ldr	r3, [pc, #124]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c2:	4a1e      	ldr	r2, [pc, #120]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b1c4:	f043 0310 	orr.w	r3, r3, #16
 800b1c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d106      	bne.n	800b1de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b1d0:	4b1a      	ldr	r3, [pc, #104]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d4:	4a19      	ldr	r2, [pc, #100]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b1d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b1dc:	e00f      	b.n	800b1fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d106      	bne.n	800b1f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b1e4:	4b15      	ldr	r3, [pc, #84]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e8:	4a14      	ldr	r2, [pc, #80]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b1ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b1f0:	e005      	b.n	800b1fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b1f2:	4b12      	ldr	r3, [pc, #72]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f6:	4a11      	ldr	r2, [pc, #68]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b1f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b1fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b1fe:	4b0f      	ldr	r3, [pc, #60]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a0e      	ldr	r2, [pc, #56]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b204:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b20a:	f7fa fd25 	bl	8005c58 <HAL_GetTick>
 800b20e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b210:	e008      	b.n	800b224 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b212:	f7fa fd21 	bl	8005c58 <HAL_GetTick>
 800b216:	4602      	mov	r2, r0
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d901      	bls.n	800b224 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b220:	2303      	movs	r3, #3
 800b222:	e006      	b.n	800b232 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b224:	4b05      	ldr	r3, [pc, #20]	; (800b23c <RCCEx_PLL2_Config+0x15c>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d0f0      	beq.n	800b212 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b230:	7bfb      	ldrb	r3, [r7, #15]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	58024400 	.word	0x58024400
 800b240:	ffff0007 	.word	0xffff0007

0800b244 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b24e:	2300      	movs	r3, #0
 800b250:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b252:	4b53      	ldr	r3, [pc, #332]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b256:	f003 0303 	and.w	r3, r3, #3
 800b25a:	2b03      	cmp	r3, #3
 800b25c:	d101      	bne.n	800b262 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	e099      	b.n	800b396 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b262:	4b4f      	ldr	r3, [pc, #316]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a4e      	ldr	r2, [pc, #312]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b26c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b26e:	f7fa fcf3 	bl	8005c58 <HAL_GetTick>
 800b272:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b274:	e008      	b.n	800b288 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b276:	f7fa fcef 	bl	8005c58 <HAL_GetTick>
 800b27a:	4602      	mov	r2, r0
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	1ad3      	subs	r3, r2, r3
 800b280:	2b02      	cmp	r3, #2
 800b282:	d901      	bls.n	800b288 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b284:	2303      	movs	r3, #3
 800b286:	e086      	b.n	800b396 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b288:	4b45      	ldr	r3, [pc, #276]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1f0      	bne.n	800b276 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b294:	4b42      	ldr	r3, [pc, #264]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b298:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	051b      	lsls	r3, r3, #20
 800b2a2:	493f      	ldr	r1, [pc, #252]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	628b      	str	r3, [r1, #40]	; 0x28
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	025b      	lsls	r3, r3, #9
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	431a      	orrs	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	041b      	lsls	r3, r3, #16
 800b2c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b2ca:	431a      	orrs	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	061b      	lsls	r3, r3, #24
 800b2d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b2d8:	4931      	ldr	r1, [pc, #196]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b2de:	4b30      	ldr	r3, [pc, #192]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	695b      	ldr	r3, [r3, #20]
 800b2ea:	492d      	ldr	r1, [pc, #180]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b2f0:	4b2b      	ldr	r3, [pc, #172]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	699b      	ldr	r3, [r3, #24]
 800b2fc:	4928      	ldr	r1, [pc, #160]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b2fe:	4313      	orrs	r3, r2
 800b300:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b302:	4b27      	ldr	r3, [pc, #156]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b306:	4a26      	ldr	r2, [pc, #152]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b30c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b30e:	4b24      	ldr	r3, [pc, #144]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b312:	4b24      	ldr	r3, [pc, #144]	; (800b3a4 <RCCEx_PLL3_Config+0x160>)
 800b314:	4013      	ands	r3, r2
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	69d2      	ldr	r2, [r2, #28]
 800b31a:	00d2      	lsls	r2, r2, #3
 800b31c:	4920      	ldr	r1, [pc, #128]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b31e:	4313      	orrs	r3, r2
 800b320:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b322:	4b1f      	ldr	r3, [pc, #124]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b326:	4a1e      	ldr	r2, [pc, #120]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b32c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d106      	bne.n	800b342 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b334:	4b1a      	ldr	r3, [pc, #104]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b338:	4a19      	ldr	r2, [pc, #100]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b33a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b33e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b340:	e00f      	b.n	800b362 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d106      	bne.n	800b356 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b348:	4b15      	ldr	r3, [pc, #84]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34c:	4a14      	ldr	r2, [pc, #80]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b34e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b352:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b354:	e005      	b.n	800b362 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b356:	4b12      	ldr	r3, [pc, #72]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35a:	4a11      	ldr	r2, [pc, #68]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b35c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b360:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b362:	4b0f      	ldr	r3, [pc, #60]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a0e      	ldr	r2, [pc, #56]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b36c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b36e:	f7fa fc73 	bl	8005c58 <HAL_GetTick>
 800b372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b374:	e008      	b.n	800b388 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b376:	f7fa fc6f 	bl	8005c58 <HAL_GetTick>
 800b37a:	4602      	mov	r2, r0
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	1ad3      	subs	r3, r2, r3
 800b380:	2b02      	cmp	r3, #2
 800b382:	d901      	bls.n	800b388 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b384:	2303      	movs	r3, #3
 800b386:	e006      	b.n	800b396 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b388:	4b05      	ldr	r3, [pc, #20]	; (800b3a0 <RCCEx_PLL3_Config+0x15c>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b390:	2b00      	cmp	r3, #0
 800b392:	d0f0      	beq.n	800b376 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b394:	7bfb      	ldrb	r3, [r7, #15]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	58024400 	.word	0x58024400
 800b3a4:	ffff0007 	.word	0xffff0007

0800b3a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e049      	b.n	800b44e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d106      	bne.n	800b3d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7f9 ff7a 	bl	80052c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2202      	movs	r2, #2
 800b3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	3304      	adds	r3, #4
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	4610      	mov	r0, r2
 800b3e8:	f000 ff12 	bl	800c210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2201      	movs	r2, #1
 800b428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
	...

0800b458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b466:	b2db      	uxtb	r3, r3
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d001      	beq.n	800b470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e05e      	b.n	800b52e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2202      	movs	r2, #2
 800b474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68da      	ldr	r2, [r3, #12]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f042 0201 	orr.w	r2, r2, #1
 800b486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a2b      	ldr	r2, [pc, #172]	; (800b53c <HAL_TIM_Base_Start_IT+0xe4>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d02c      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x94>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b49a:	d027      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x94>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a27      	ldr	r2, [pc, #156]	; (800b540 <HAL_TIM_Base_Start_IT+0xe8>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d022      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x94>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a26      	ldr	r2, [pc, #152]	; (800b544 <HAL_TIM_Base_Start_IT+0xec>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d01d      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x94>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a24      	ldr	r2, [pc, #144]	; (800b548 <HAL_TIM_Base_Start_IT+0xf0>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d018      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x94>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a23      	ldr	r2, [pc, #140]	; (800b54c <HAL_TIM_Base_Start_IT+0xf4>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d013      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x94>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a21      	ldr	r2, [pc, #132]	; (800b550 <HAL_TIM_Base_Start_IT+0xf8>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d00e      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x94>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a20      	ldr	r2, [pc, #128]	; (800b554 <HAL_TIM_Base_Start_IT+0xfc>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d009      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x94>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a1e      	ldr	r2, [pc, #120]	; (800b558 <HAL_TIM_Base_Start_IT+0x100>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d004      	beq.n	800b4ec <HAL_TIM_Base_Start_IT+0x94>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a1d      	ldr	r2, [pc, #116]	; (800b55c <HAL_TIM_Base_Start_IT+0x104>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d115      	bne.n	800b518 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	689a      	ldr	r2, [r3, #8]
 800b4f2:	4b1b      	ldr	r3, [pc, #108]	; (800b560 <HAL_TIM_Base_Start_IT+0x108>)
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2b06      	cmp	r3, #6
 800b4fc:	d015      	beq.n	800b52a <HAL_TIM_Base_Start_IT+0xd2>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b504:	d011      	beq.n	800b52a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f042 0201 	orr.w	r2, r2, #1
 800b514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b516:	e008      	b.n	800b52a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f042 0201 	orr.w	r2, r2, #1
 800b526:	601a      	str	r2, [r3, #0]
 800b528:	e000      	b.n	800b52c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b52a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3714      	adds	r7, #20
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	40010000 	.word	0x40010000
 800b540:	40000400 	.word	0x40000400
 800b544:	40000800 	.word	0x40000800
 800b548:	40000c00 	.word	0x40000c00
 800b54c:	40010400 	.word	0x40010400
 800b550:	40001800 	.word	0x40001800
 800b554:	40014000 	.word	0x40014000
 800b558:	4000e000 	.word	0x4000e000
 800b55c:	4000e400 	.word	0x4000e400
 800b560:	00010007 	.word	0x00010007

0800b564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e049      	b.n	800b60a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d106      	bne.n	800b590 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7f9 fe34 	bl	80051f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2202      	movs	r2, #2
 800b594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	3304      	adds	r3, #4
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4610      	mov	r0, r2
 800b5a4:	f000 fe34 	bl	800c210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2201      	movs	r2, #1
 800b604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3708      	adds	r7, #8
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
	...

0800b614 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d109      	bne.n	800b638 <HAL_TIM_PWM_Start+0x24>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	bf14      	ite	ne
 800b630:	2301      	movne	r3, #1
 800b632:	2300      	moveq	r3, #0
 800b634:	b2db      	uxtb	r3, r3
 800b636:	e03c      	b.n	800b6b2 <HAL_TIM_PWM_Start+0x9e>
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	2b04      	cmp	r3, #4
 800b63c:	d109      	bne.n	800b652 <HAL_TIM_PWM_Start+0x3e>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b01      	cmp	r3, #1
 800b648:	bf14      	ite	ne
 800b64a:	2301      	movne	r3, #1
 800b64c:	2300      	moveq	r3, #0
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	e02f      	b.n	800b6b2 <HAL_TIM_PWM_Start+0x9e>
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	2b08      	cmp	r3, #8
 800b656:	d109      	bne.n	800b66c <HAL_TIM_PWM_Start+0x58>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	2b01      	cmp	r3, #1
 800b662:	bf14      	ite	ne
 800b664:	2301      	movne	r3, #1
 800b666:	2300      	moveq	r3, #0
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	e022      	b.n	800b6b2 <HAL_TIM_PWM_Start+0x9e>
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	2b0c      	cmp	r3, #12
 800b670:	d109      	bne.n	800b686 <HAL_TIM_PWM_Start+0x72>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	bf14      	ite	ne
 800b67e:	2301      	movne	r3, #1
 800b680:	2300      	moveq	r3, #0
 800b682:	b2db      	uxtb	r3, r3
 800b684:	e015      	b.n	800b6b2 <HAL_TIM_PWM_Start+0x9e>
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	2b10      	cmp	r3, #16
 800b68a:	d109      	bne.n	800b6a0 <HAL_TIM_PWM_Start+0x8c>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b692:	b2db      	uxtb	r3, r3
 800b694:	2b01      	cmp	r3, #1
 800b696:	bf14      	ite	ne
 800b698:	2301      	movne	r3, #1
 800b69a:	2300      	moveq	r3, #0
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	e008      	b.n	800b6b2 <HAL_TIM_PWM_Start+0x9e>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	bf14      	ite	ne
 800b6ac:	2301      	movne	r3, #1
 800b6ae:	2300      	moveq	r3, #0
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e0ab      	b.n	800b812 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d104      	bne.n	800b6ca <HAL_TIM_PWM_Start+0xb6>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6c8:	e023      	b.n	800b712 <HAL_TIM_PWM_Start+0xfe>
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	2b04      	cmp	r3, #4
 800b6ce:	d104      	bne.n	800b6da <HAL_TIM_PWM_Start+0xc6>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2202      	movs	r2, #2
 800b6d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6d8:	e01b      	b.n	800b712 <HAL_TIM_PWM_Start+0xfe>
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b08      	cmp	r3, #8
 800b6de:	d104      	bne.n	800b6ea <HAL_TIM_PWM_Start+0xd6>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2202      	movs	r2, #2
 800b6e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6e8:	e013      	b.n	800b712 <HAL_TIM_PWM_Start+0xfe>
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	2b0c      	cmp	r3, #12
 800b6ee:	d104      	bne.n	800b6fa <HAL_TIM_PWM_Start+0xe6>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2202      	movs	r2, #2
 800b6f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6f8:	e00b      	b.n	800b712 <HAL_TIM_PWM_Start+0xfe>
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	2b10      	cmp	r3, #16
 800b6fe:	d104      	bne.n	800b70a <HAL_TIM_PWM_Start+0xf6>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2202      	movs	r2, #2
 800b704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b708:	e003      	b.n	800b712 <HAL_TIM_PWM_Start+0xfe>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2202      	movs	r2, #2
 800b70e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2201      	movs	r2, #1
 800b718:	6839      	ldr	r1, [r7, #0]
 800b71a:	4618      	mov	r0, r3
 800b71c:	f001 f992 	bl	800ca44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a3d      	ldr	r2, [pc, #244]	; (800b81c <HAL_TIM_PWM_Start+0x208>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d013      	beq.n	800b752 <HAL_TIM_PWM_Start+0x13e>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a3c      	ldr	r2, [pc, #240]	; (800b820 <HAL_TIM_PWM_Start+0x20c>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d00e      	beq.n	800b752 <HAL_TIM_PWM_Start+0x13e>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a3a      	ldr	r2, [pc, #232]	; (800b824 <HAL_TIM_PWM_Start+0x210>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d009      	beq.n	800b752 <HAL_TIM_PWM_Start+0x13e>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a39      	ldr	r2, [pc, #228]	; (800b828 <HAL_TIM_PWM_Start+0x214>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d004      	beq.n	800b752 <HAL_TIM_PWM_Start+0x13e>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a37      	ldr	r2, [pc, #220]	; (800b82c <HAL_TIM_PWM_Start+0x218>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d101      	bne.n	800b756 <HAL_TIM_PWM_Start+0x142>
 800b752:	2301      	movs	r3, #1
 800b754:	e000      	b.n	800b758 <HAL_TIM_PWM_Start+0x144>
 800b756:	2300      	movs	r3, #0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d007      	beq.n	800b76c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b76a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a2a      	ldr	r2, [pc, #168]	; (800b81c <HAL_TIM_PWM_Start+0x208>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d02c      	beq.n	800b7d0 <HAL_TIM_PWM_Start+0x1bc>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b77e:	d027      	beq.n	800b7d0 <HAL_TIM_PWM_Start+0x1bc>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a2a      	ldr	r2, [pc, #168]	; (800b830 <HAL_TIM_PWM_Start+0x21c>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d022      	beq.n	800b7d0 <HAL_TIM_PWM_Start+0x1bc>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a29      	ldr	r2, [pc, #164]	; (800b834 <HAL_TIM_PWM_Start+0x220>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d01d      	beq.n	800b7d0 <HAL_TIM_PWM_Start+0x1bc>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a27      	ldr	r2, [pc, #156]	; (800b838 <HAL_TIM_PWM_Start+0x224>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d018      	beq.n	800b7d0 <HAL_TIM_PWM_Start+0x1bc>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a1f      	ldr	r2, [pc, #124]	; (800b820 <HAL_TIM_PWM_Start+0x20c>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d013      	beq.n	800b7d0 <HAL_TIM_PWM_Start+0x1bc>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a23      	ldr	r2, [pc, #140]	; (800b83c <HAL_TIM_PWM_Start+0x228>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d00e      	beq.n	800b7d0 <HAL_TIM_PWM_Start+0x1bc>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a1b      	ldr	r2, [pc, #108]	; (800b824 <HAL_TIM_PWM_Start+0x210>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d009      	beq.n	800b7d0 <HAL_TIM_PWM_Start+0x1bc>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a1f      	ldr	r2, [pc, #124]	; (800b840 <HAL_TIM_PWM_Start+0x22c>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d004      	beq.n	800b7d0 <HAL_TIM_PWM_Start+0x1bc>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a1e      	ldr	r2, [pc, #120]	; (800b844 <HAL_TIM_PWM_Start+0x230>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d115      	bne.n	800b7fc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	689a      	ldr	r2, [r3, #8]
 800b7d6:	4b1c      	ldr	r3, [pc, #112]	; (800b848 <HAL_TIM_PWM_Start+0x234>)
 800b7d8:	4013      	ands	r3, r2
 800b7da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2b06      	cmp	r3, #6
 800b7e0:	d015      	beq.n	800b80e <HAL_TIM_PWM_Start+0x1fa>
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e8:	d011      	beq.n	800b80e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f042 0201 	orr.w	r2, r2, #1
 800b7f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7fa:	e008      	b.n	800b80e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f042 0201 	orr.w	r2, r2, #1
 800b80a:	601a      	str	r2, [r3, #0]
 800b80c:	e000      	b.n	800b810 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b80e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	40010000 	.word	0x40010000
 800b820:	40010400 	.word	0x40010400
 800b824:	40014000 	.word	0x40014000
 800b828:	40014400 	.word	0x40014400
 800b82c:	40014800 	.word	0x40014800
 800b830:	40000400 	.word	0x40000400
 800b834:	40000800 	.word	0x40000800
 800b838:	40000c00 	.word	0x40000c00
 800b83c:	40001800 	.word	0x40001800
 800b840:	4000e000 	.word	0x4000e000
 800b844:	4000e400 	.word	0x4000e400
 800b848:	00010007 	.word	0x00010007

0800b84c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d101      	bne.n	800b860 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	e041      	b.n	800b8e4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d106      	bne.n	800b87a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 f839 	bl	800b8ec <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2202      	movs	r2, #2
 800b87e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	3304      	adds	r3, #4
 800b88a:	4619      	mov	r1, r3
 800b88c:	4610      	mov	r0, r2
 800b88e:	f000 fcbf 	bl	800c210 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f022 0208 	bic.w	r2, r2, #8
 800b8a0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	6819      	ldr	r1, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	683a      	ldr	r2, [r7, #0]
 800b8ae:	430a      	orrs	r2, r1
 800b8b0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b8f4:	bf00      	nop
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	e08f      	b.n	800ba34 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d106      	bne.n	800b92e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7f9 fd21 	bl	8005370 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2202      	movs	r2, #2
 800b932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	6899      	ldr	r1, [r3, #8]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	4b3e      	ldr	r3, [pc, #248]	; (800ba3c <HAL_TIM_Encoder_Init+0x13c>)
 800b942:	400b      	ands	r3, r1
 800b944:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	3304      	adds	r3, #4
 800b94e:	4619      	mov	r1, r3
 800b950:	4610      	mov	r0, r2
 800b952:	f000 fc5d 	bl	800c210 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	699b      	ldr	r3, [r3, #24]
 800b964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	6a1b      	ldr	r3, [r3, #32]
 800b96c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	4313      	orrs	r3, r2
 800b976:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b978:	693a      	ldr	r2, [r7, #16]
 800b97a:	4b31      	ldr	r3, [pc, #196]	; (800ba40 <HAL_TIM_Encoder_Init+0x140>)
 800b97c:	4013      	ands	r3, r2
 800b97e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	689a      	ldr	r2, [r3, #8]
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	699b      	ldr	r3, [r3, #24]
 800b988:	021b      	lsls	r3, r3, #8
 800b98a:	4313      	orrs	r3, r2
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	4313      	orrs	r3, r2
 800b990:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b992:	693a      	ldr	r2, [r7, #16]
 800b994:	4b2b      	ldr	r3, [pc, #172]	; (800ba44 <HAL_TIM_Encoder_Init+0x144>)
 800b996:	4013      	ands	r3, r2
 800b998:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b99a:	693a      	ldr	r2, [r7, #16]
 800b99c:	4b2a      	ldr	r3, [pc, #168]	; (800ba48 <HAL_TIM_Encoder_Init+0x148>)
 800b99e:	4013      	ands	r3, r2
 800b9a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	68da      	ldr	r2, [r3, #12]
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	69db      	ldr	r3, [r3, #28]
 800b9aa:	021b      	lsls	r3, r3, #8
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	011a      	lsls	r2, r3, #4
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	6a1b      	ldr	r3, [r3, #32]
 800b9be:	031b      	lsls	r3, r3, #12
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b9ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b9d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	695b      	ldr	r3, [r3, #20]
 800b9e0:	011b      	lsls	r3, r3, #4
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2201      	movs	r2, #1
 800ba16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3718      	adds	r7, #24
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	fffebff8 	.word	0xfffebff8
 800ba40:	fffffcfc 	.word	0xfffffcfc
 800ba44:	fffff3f3 	.word	0xfffff3f3
 800ba48:	ffff0f0f 	.word	0xffff0f0f

0800ba4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ba64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d110      	bne.n	800ba9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d102      	bne.n	800ba88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ba82:	7b7b      	ldrb	r3, [r7, #13]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d001      	beq.n	800ba8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e069      	b.n	800bb60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2202      	movs	r2, #2
 800ba90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2202      	movs	r2, #2
 800ba98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba9c:	e031      	b.n	800bb02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	2b04      	cmp	r3, #4
 800baa2:	d110      	bne.n	800bac6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800baa4:	7bbb      	ldrb	r3, [r7, #14]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d102      	bne.n	800bab0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800baaa:	7b3b      	ldrb	r3, [r7, #12]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d001      	beq.n	800bab4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e055      	b.n	800bb60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2202      	movs	r2, #2
 800bab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2202      	movs	r2, #2
 800bac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bac4:	e01d      	b.n	800bb02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d108      	bne.n	800bade <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bacc:	7bbb      	ldrb	r3, [r7, #14]
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d105      	bne.n	800bade <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bad2:	7b7b      	ldrb	r3, [r7, #13]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d102      	bne.n	800bade <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bad8:	7b3b      	ldrb	r3, [r7, #12]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d001      	beq.n	800bae2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	e03e      	b.n	800bb60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2202      	movs	r2, #2
 800bae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2202      	movs	r2, #2
 800baee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2202      	movs	r2, #2
 800baf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2202      	movs	r2, #2
 800bafe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d003      	beq.n	800bb10 <HAL_TIM_Encoder_Start+0xc4>
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	2b04      	cmp	r3, #4
 800bb0c:	d008      	beq.n	800bb20 <HAL_TIM_Encoder_Start+0xd4>
 800bb0e:	e00f      	b.n	800bb30 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2201      	movs	r2, #1
 800bb16:	2100      	movs	r1, #0
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 ff93 	bl	800ca44 <TIM_CCxChannelCmd>
      break;
 800bb1e:	e016      	b.n	800bb4e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2201      	movs	r2, #1
 800bb26:	2104      	movs	r1, #4
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f000 ff8b 	bl	800ca44 <TIM_CCxChannelCmd>
      break;
 800bb2e:	e00e      	b.n	800bb4e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2201      	movs	r2, #1
 800bb36:	2100      	movs	r1, #0
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f000 ff83 	bl	800ca44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2201      	movs	r2, #1
 800bb44:	2104      	movs	r1, #4
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 ff7c 	bl	800ca44 <TIM_CCxChannelCmd>
      break;
 800bb4c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f042 0201 	orr.w	r2, r2, #1
 800bb5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	f003 0302 	and.w	r3, r3, #2
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d122      	bne.n	800bbc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	f003 0302 	and.w	r3, r3, #2
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d11b      	bne.n	800bbc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f06f 0202 	mvn.w	r2, #2
 800bb94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	699b      	ldr	r3, [r3, #24]
 800bba2:	f003 0303 	and.w	r3, r3, #3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fb12 	bl	800c1d4 <HAL_TIM_IC_CaptureCallback>
 800bbb0:	e005      	b.n	800bbbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fb04 	bl	800c1c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 fb15 	bl	800c1e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	f003 0304 	and.w	r3, r3, #4
 800bbce:	2b04      	cmp	r3, #4
 800bbd0:	d122      	bne.n	800bc18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	f003 0304 	and.w	r3, r3, #4
 800bbdc:	2b04      	cmp	r3, #4
 800bbde:	d11b      	bne.n	800bc18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f06f 0204 	mvn.w	r2, #4
 800bbe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2202      	movs	r2, #2
 800bbee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d003      	beq.n	800bc06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 fae8 	bl	800c1d4 <HAL_TIM_IC_CaptureCallback>
 800bc04:	e005      	b.n	800bc12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fada 	bl	800c1c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 faeb 	bl	800c1e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	f003 0308 	and.w	r3, r3, #8
 800bc22:	2b08      	cmp	r3, #8
 800bc24:	d122      	bne.n	800bc6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	f003 0308 	and.w	r3, r3, #8
 800bc30:	2b08      	cmp	r3, #8
 800bc32:	d11b      	bne.n	800bc6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f06f 0208 	mvn.w	r2, #8
 800bc3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2204      	movs	r2, #4
 800bc42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	69db      	ldr	r3, [r3, #28]
 800bc4a:	f003 0303 	and.w	r3, r3, #3
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d003      	beq.n	800bc5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 fabe 	bl	800c1d4 <HAL_TIM_IC_CaptureCallback>
 800bc58:	e005      	b.n	800bc66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 fab0 	bl	800c1c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fac1 	bl	800c1e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	f003 0310 	and.w	r3, r3, #16
 800bc76:	2b10      	cmp	r3, #16
 800bc78:	d122      	bne.n	800bcc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	f003 0310 	and.w	r3, r3, #16
 800bc84:	2b10      	cmp	r3, #16
 800bc86:	d11b      	bne.n	800bcc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f06f 0210 	mvn.w	r2, #16
 800bc90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2208      	movs	r2, #8
 800bc96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	69db      	ldr	r3, [r3, #28]
 800bc9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d003      	beq.n	800bcae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fa94 	bl	800c1d4 <HAL_TIM_IC_CaptureCallback>
 800bcac:	e005      	b.n	800bcba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 fa86 	bl	800c1c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fa97 	bl	800c1e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	f003 0301 	and.w	r3, r3, #1
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d10e      	bne.n	800bcec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	f003 0301 	and.w	r3, r3, #1
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d107      	bne.n	800bcec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f06f 0201 	mvn.w	r2, #1
 800bce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7f5 fd1a 	bl	8001720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcf6:	2b80      	cmp	r3, #128	; 0x80
 800bcf8:	d10e      	bne.n	800bd18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd04:	2b80      	cmp	r3, #128	; 0x80
 800bd06:	d107      	bne.n	800bd18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bd10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f001 f802 	bl	800cd1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd26:	d10e      	bne.n	800bd46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd32:	2b80      	cmp	r3, #128	; 0x80
 800bd34:	d107      	bne.n	800bd46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bd3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fff5 	bl	800cd30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	691b      	ldr	r3, [r3, #16]
 800bd4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd50:	2b40      	cmp	r3, #64	; 0x40
 800bd52:	d10e      	bne.n	800bd72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd5e:	2b40      	cmp	r3, #64	; 0x40
 800bd60:	d107      	bne.n	800bd72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bd6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 fa45 	bl	800c1fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	f003 0320 	and.w	r3, r3, #32
 800bd7c:	2b20      	cmp	r3, #32
 800bd7e:	d10e      	bne.n	800bd9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	f003 0320 	and.w	r3, r3, #32
 800bd8a:	2b20      	cmp	r3, #32
 800bd8c:	d107      	bne.n	800bd9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f06f 0220 	mvn.w	r2, #32
 800bd96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 ffb5 	bl	800cd08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd9e:	bf00      	nop
 800bda0:	3708      	adds	r7, #8
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
	...

0800bda8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b086      	sub	sp, #24
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d101      	bne.n	800bdc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	e0ff      	b.n	800bfc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2b14      	cmp	r3, #20
 800bdd2:	f200 80f0 	bhi.w	800bfb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bdd6:	a201      	add	r2, pc, #4	; (adr r2, 800bddc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bdd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bddc:	0800be31 	.word	0x0800be31
 800bde0:	0800bfb7 	.word	0x0800bfb7
 800bde4:	0800bfb7 	.word	0x0800bfb7
 800bde8:	0800bfb7 	.word	0x0800bfb7
 800bdec:	0800be71 	.word	0x0800be71
 800bdf0:	0800bfb7 	.word	0x0800bfb7
 800bdf4:	0800bfb7 	.word	0x0800bfb7
 800bdf8:	0800bfb7 	.word	0x0800bfb7
 800bdfc:	0800beb3 	.word	0x0800beb3
 800be00:	0800bfb7 	.word	0x0800bfb7
 800be04:	0800bfb7 	.word	0x0800bfb7
 800be08:	0800bfb7 	.word	0x0800bfb7
 800be0c:	0800bef3 	.word	0x0800bef3
 800be10:	0800bfb7 	.word	0x0800bfb7
 800be14:	0800bfb7 	.word	0x0800bfb7
 800be18:	0800bfb7 	.word	0x0800bfb7
 800be1c:	0800bf35 	.word	0x0800bf35
 800be20:	0800bfb7 	.word	0x0800bfb7
 800be24:	0800bfb7 	.word	0x0800bfb7
 800be28:	0800bfb7 	.word	0x0800bfb7
 800be2c:	0800bf75 	.word	0x0800bf75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	68b9      	ldr	r1, [r7, #8]
 800be36:	4618      	mov	r0, r3
 800be38:	f000 fa90 	bl	800c35c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	699a      	ldr	r2, [r3, #24]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f042 0208 	orr.w	r2, r2, #8
 800be4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	699a      	ldr	r2, [r3, #24]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f022 0204 	bic.w	r2, r2, #4
 800be5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	6999      	ldr	r1, [r3, #24]
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	691a      	ldr	r2, [r3, #16]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	430a      	orrs	r2, r1
 800be6c:	619a      	str	r2, [r3, #24]
      break;
 800be6e:	e0a5      	b.n	800bfbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	68b9      	ldr	r1, [r7, #8]
 800be76:	4618      	mov	r0, r3
 800be78:	f000 fb00 	bl	800c47c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	699a      	ldr	r2, [r3, #24]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	699a      	ldr	r2, [r3, #24]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	6999      	ldr	r1, [r3, #24]
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	021a      	lsls	r2, r3, #8
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	430a      	orrs	r2, r1
 800beae:	619a      	str	r2, [r3, #24]
      break;
 800beb0:	e084      	b.n	800bfbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	68b9      	ldr	r1, [r7, #8]
 800beb8:	4618      	mov	r0, r3
 800beba:	f000 fb69 	bl	800c590 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	69da      	ldr	r2, [r3, #28]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f042 0208 	orr.w	r2, r2, #8
 800becc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	69da      	ldr	r2, [r3, #28]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f022 0204 	bic.w	r2, r2, #4
 800bedc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	69d9      	ldr	r1, [r3, #28]
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	691a      	ldr	r2, [r3, #16]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	430a      	orrs	r2, r1
 800beee:	61da      	str	r2, [r3, #28]
      break;
 800bef0:	e064      	b.n	800bfbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	68b9      	ldr	r1, [r7, #8]
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 fbd1 	bl	800c6a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	69da      	ldr	r2, [r3, #28]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	69da      	ldr	r2, [r3, #28]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	69d9      	ldr	r1, [r3, #28]
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	691b      	ldr	r3, [r3, #16]
 800bf28:	021a      	lsls	r2, r3, #8
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	430a      	orrs	r2, r1
 800bf30:	61da      	str	r2, [r3, #28]
      break;
 800bf32:	e043      	b.n	800bfbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	68b9      	ldr	r1, [r7, #8]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f000 fc1a 	bl	800c774 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f042 0208 	orr.w	r2, r2, #8
 800bf4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f022 0204 	bic.w	r2, r2, #4
 800bf5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	691a      	ldr	r2, [r3, #16]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	430a      	orrs	r2, r1
 800bf70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bf72:	e023      	b.n	800bfbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68b9      	ldr	r1, [r7, #8]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f000 fc5e 	bl	800c83c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	021a      	lsls	r2, r3, #8
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	430a      	orrs	r2, r1
 800bfb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bfb4:	e002      	b.n	800bfbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	75fb      	strb	r3, [r7, #23]
      break;
 800bfba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bfc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3718      	adds	r7, #24
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop

0800bfd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d101      	bne.n	800bfec <HAL_TIM_ConfigClockSource+0x1c>
 800bfe8:	2302      	movs	r3, #2
 800bfea:	e0dc      	b.n	800c1a6 <HAL_TIM_ConfigClockSource+0x1d6>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2202      	movs	r2, #2
 800bff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	4b6a      	ldr	r3, [pc, #424]	; (800c1b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c008:	4013      	ands	r3, r2
 800c00a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a64      	ldr	r2, [pc, #400]	; (800c1b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c022:	4293      	cmp	r3, r2
 800c024:	f000 80a9 	beq.w	800c17a <HAL_TIM_ConfigClockSource+0x1aa>
 800c028:	4a62      	ldr	r2, [pc, #392]	; (800c1b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	f200 80ae 	bhi.w	800c18c <HAL_TIM_ConfigClockSource+0x1bc>
 800c030:	4a61      	ldr	r2, [pc, #388]	; (800c1b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c032:	4293      	cmp	r3, r2
 800c034:	f000 80a1 	beq.w	800c17a <HAL_TIM_ConfigClockSource+0x1aa>
 800c038:	4a5f      	ldr	r2, [pc, #380]	; (800c1b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	f200 80a6 	bhi.w	800c18c <HAL_TIM_ConfigClockSource+0x1bc>
 800c040:	4a5e      	ldr	r2, [pc, #376]	; (800c1bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800c042:	4293      	cmp	r3, r2
 800c044:	f000 8099 	beq.w	800c17a <HAL_TIM_ConfigClockSource+0x1aa>
 800c048:	4a5c      	ldr	r2, [pc, #368]	; (800c1bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	f200 809e 	bhi.w	800c18c <HAL_TIM_ConfigClockSource+0x1bc>
 800c050:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c054:	f000 8091 	beq.w	800c17a <HAL_TIM_ConfigClockSource+0x1aa>
 800c058:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c05c:	f200 8096 	bhi.w	800c18c <HAL_TIM_ConfigClockSource+0x1bc>
 800c060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c064:	f000 8089 	beq.w	800c17a <HAL_TIM_ConfigClockSource+0x1aa>
 800c068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c06c:	f200 808e 	bhi.w	800c18c <HAL_TIM_ConfigClockSource+0x1bc>
 800c070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c074:	d03e      	beq.n	800c0f4 <HAL_TIM_ConfigClockSource+0x124>
 800c076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c07a:	f200 8087 	bhi.w	800c18c <HAL_TIM_ConfigClockSource+0x1bc>
 800c07e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c082:	f000 8086 	beq.w	800c192 <HAL_TIM_ConfigClockSource+0x1c2>
 800c086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c08a:	d87f      	bhi.n	800c18c <HAL_TIM_ConfigClockSource+0x1bc>
 800c08c:	2b70      	cmp	r3, #112	; 0x70
 800c08e:	d01a      	beq.n	800c0c6 <HAL_TIM_ConfigClockSource+0xf6>
 800c090:	2b70      	cmp	r3, #112	; 0x70
 800c092:	d87b      	bhi.n	800c18c <HAL_TIM_ConfigClockSource+0x1bc>
 800c094:	2b60      	cmp	r3, #96	; 0x60
 800c096:	d050      	beq.n	800c13a <HAL_TIM_ConfigClockSource+0x16a>
 800c098:	2b60      	cmp	r3, #96	; 0x60
 800c09a:	d877      	bhi.n	800c18c <HAL_TIM_ConfigClockSource+0x1bc>
 800c09c:	2b50      	cmp	r3, #80	; 0x50
 800c09e:	d03c      	beq.n	800c11a <HAL_TIM_ConfigClockSource+0x14a>
 800c0a0:	2b50      	cmp	r3, #80	; 0x50
 800c0a2:	d873      	bhi.n	800c18c <HAL_TIM_ConfigClockSource+0x1bc>
 800c0a4:	2b40      	cmp	r3, #64	; 0x40
 800c0a6:	d058      	beq.n	800c15a <HAL_TIM_ConfigClockSource+0x18a>
 800c0a8:	2b40      	cmp	r3, #64	; 0x40
 800c0aa:	d86f      	bhi.n	800c18c <HAL_TIM_ConfigClockSource+0x1bc>
 800c0ac:	2b30      	cmp	r3, #48	; 0x30
 800c0ae:	d064      	beq.n	800c17a <HAL_TIM_ConfigClockSource+0x1aa>
 800c0b0:	2b30      	cmp	r3, #48	; 0x30
 800c0b2:	d86b      	bhi.n	800c18c <HAL_TIM_ConfigClockSource+0x1bc>
 800c0b4:	2b20      	cmp	r3, #32
 800c0b6:	d060      	beq.n	800c17a <HAL_TIM_ConfigClockSource+0x1aa>
 800c0b8:	2b20      	cmp	r3, #32
 800c0ba:	d867      	bhi.n	800c18c <HAL_TIM_ConfigClockSource+0x1bc>
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d05c      	beq.n	800c17a <HAL_TIM_ConfigClockSource+0x1aa>
 800c0c0:	2b10      	cmp	r3, #16
 800c0c2:	d05a      	beq.n	800c17a <HAL_TIM_ConfigClockSource+0x1aa>
 800c0c4:	e062      	b.n	800c18c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6818      	ldr	r0, [r3, #0]
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	6899      	ldr	r1, [r3, #8]
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	685a      	ldr	r2, [r3, #4]
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	f000 fc95 	bl	800ca04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c0e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	68ba      	ldr	r2, [r7, #8]
 800c0f0:	609a      	str	r2, [r3, #8]
      break;
 800c0f2:	e04f      	b.n	800c194 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6818      	ldr	r0, [r3, #0]
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	6899      	ldr	r1, [r3, #8]
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	685a      	ldr	r2, [r3, #4]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	f000 fc7e 	bl	800ca04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	689a      	ldr	r2, [r3, #8]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c116:	609a      	str	r2, [r3, #8]
      break;
 800c118:	e03c      	b.n	800c194 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6818      	ldr	r0, [r3, #0]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	6859      	ldr	r1, [r3, #4]
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	461a      	mov	r2, r3
 800c128:	f000 fbee 	bl	800c908 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2150      	movs	r1, #80	; 0x50
 800c132:	4618      	mov	r0, r3
 800c134:	f000 fc48 	bl	800c9c8 <TIM_ITRx_SetConfig>
      break;
 800c138:	e02c      	b.n	800c194 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6818      	ldr	r0, [r3, #0]
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	6859      	ldr	r1, [r3, #4]
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	461a      	mov	r2, r3
 800c148:	f000 fc0d 	bl	800c966 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2160      	movs	r1, #96	; 0x60
 800c152:	4618      	mov	r0, r3
 800c154:	f000 fc38 	bl	800c9c8 <TIM_ITRx_SetConfig>
      break;
 800c158:	e01c      	b.n	800c194 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6818      	ldr	r0, [r3, #0]
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	6859      	ldr	r1, [r3, #4]
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	461a      	mov	r2, r3
 800c168:	f000 fbce 	bl	800c908 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2140      	movs	r1, #64	; 0x40
 800c172:	4618      	mov	r0, r3
 800c174:	f000 fc28 	bl	800c9c8 <TIM_ITRx_SetConfig>
      break;
 800c178:	e00c      	b.n	800c194 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4619      	mov	r1, r3
 800c184:	4610      	mov	r0, r2
 800c186:	f000 fc1f 	bl	800c9c8 <TIM_ITRx_SetConfig>
      break;
 800c18a:	e003      	b.n	800c194 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c18c:	2301      	movs	r3, #1
 800c18e:	73fb      	strb	r3, [r7, #15]
      break;
 800c190:	e000      	b.n	800c194 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c192:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2201      	movs	r2, #1
 800c198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	ffceff88 	.word	0xffceff88
 800c1b4:	00100040 	.word	0x00100040
 800c1b8:	00100030 	.word	0x00100030
 800c1bc:	00100020 	.word	0x00100020

0800c1c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1c8:	bf00      	nop
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1f0:	bf00      	nop
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c204:	bf00      	nop
 800c206:	370c      	adds	r7, #12
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a44      	ldr	r2, [pc, #272]	; (800c334 <TIM_Base_SetConfig+0x124>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d013      	beq.n	800c250 <TIM_Base_SetConfig+0x40>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c22e:	d00f      	beq.n	800c250 <TIM_Base_SetConfig+0x40>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a41      	ldr	r2, [pc, #260]	; (800c338 <TIM_Base_SetConfig+0x128>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d00b      	beq.n	800c250 <TIM_Base_SetConfig+0x40>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a40      	ldr	r2, [pc, #256]	; (800c33c <TIM_Base_SetConfig+0x12c>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d007      	beq.n	800c250 <TIM_Base_SetConfig+0x40>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a3f      	ldr	r2, [pc, #252]	; (800c340 <TIM_Base_SetConfig+0x130>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d003      	beq.n	800c250 <TIM_Base_SetConfig+0x40>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4a3e      	ldr	r2, [pc, #248]	; (800c344 <TIM_Base_SetConfig+0x134>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d108      	bne.n	800c262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	4313      	orrs	r3, r2
 800c260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4a33      	ldr	r2, [pc, #204]	; (800c334 <TIM_Base_SetConfig+0x124>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d027      	beq.n	800c2ba <TIM_Base_SetConfig+0xaa>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c270:	d023      	beq.n	800c2ba <TIM_Base_SetConfig+0xaa>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a30      	ldr	r2, [pc, #192]	; (800c338 <TIM_Base_SetConfig+0x128>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d01f      	beq.n	800c2ba <TIM_Base_SetConfig+0xaa>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a2f      	ldr	r2, [pc, #188]	; (800c33c <TIM_Base_SetConfig+0x12c>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d01b      	beq.n	800c2ba <TIM_Base_SetConfig+0xaa>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a2e      	ldr	r2, [pc, #184]	; (800c340 <TIM_Base_SetConfig+0x130>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d017      	beq.n	800c2ba <TIM_Base_SetConfig+0xaa>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a2d      	ldr	r2, [pc, #180]	; (800c344 <TIM_Base_SetConfig+0x134>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d013      	beq.n	800c2ba <TIM_Base_SetConfig+0xaa>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a2c      	ldr	r2, [pc, #176]	; (800c348 <TIM_Base_SetConfig+0x138>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d00f      	beq.n	800c2ba <TIM_Base_SetConfig+0xaa>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a2b      	ldr	r2, [pc, #172]	; (800c34c <TIM_Base_SetConfig+0x13c>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d00b      	beq.n	800c2ba <TIM_Base_SetConfig+0xaa>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a2a      	ldr	r2, [pc, #168]	; (800c350 <TIM_Base_SetConfig+0x140>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d007      	beq.n	800c2ba <TIM_Base_SetConfig+0xaa>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a29      	ldr	r2, [pc, #164]	; (800c354 <TIM_Base_SetConfig+0x144>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d003      	beq.n	800c2ba <TIM_Base_SetConfig+0xaa>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a28      	ldr	r2, [pc, #160]	; (800c358 <TIM_Base_SetConfig+0x148>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d108      	bne.n	800c2cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	695b      	ldr	r3, [r3, #20]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	689a      	ldr	r2, [r3, #8]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a10      	ldr	r2, [pc, #64]	; (800c334 <TIM_Base_SetConfig+0x124>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d00f      	beq.n	800c318 <TIM_Base_SetConfig+0x108>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4a12      	ldr	r2, [pc, #72]	; (800c344 <TIM_Base_SetConfig+0x134>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d00b      	beq.n	800c318 <TIM_Base_SetConfig+0x108>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a11      	ldr	r2, [pc, #68]	; (800c348 <TIM_Base_SetConfig+0x138>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d007      	beq.n	800c318 <TIM_Base_SetConfig+0x108>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a10      	ldr	r2, [pc, #64]	; (800c34c <TIM_Base_SetConfig+0x13c>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d003      	beq.n	800c318 <TIM_Base_SetConfig+0x108>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4a0f      	ldr	r2, [pc, #60]	; (800c350 <TIM_Base_SetConfig+0x140>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d103      	bne.n	800c320 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	691a      	ldr	r2, [r3, #16]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	615a      	str	r2, [r3, #20]
}
 800c326:	bf00      	nop
 800c328:	3714      	adds	r7, #20
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	40010000 	.word	0x40010000
 800c338:	40000400 	.word	0x40000400
 800c33c:	40000800 	.word	0x40000800
 800c340:	40000c00 	.word	0x40000c00
 800c344:	40010400 	.word	0x40010400
 800c348:	40014000 	.word	0x40014000
 800c34c:	40014400 	.word	0x40014400
 800c350:	40014800 	.word	0x40014800
 800c354:	4000e000 	.word	0x4000e000
 800c358:	4000e400 	.word	0x4000e400

0800c35c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b087      	sub	sp, #28
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a1b      	ldr	r3, [r3, #32]
 800c36a:	f023 0201 	bic.w	r2, r3, #1
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a1b      	ldr	r3, [r3, #32]
 800c376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	4b37      	ldr	r3, [pc, #220]	; (800c464 <TIM_OC1_SetConfig+0x108>)
 800c388:	4013      	ands	r3, r2
 800c38a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f023 0303 	bic.w	r3, r3, #3
 800c392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	f023 0302 	bic.w	r3, r3, #2
 800c3a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	697a      	ldr	r2, [r7, #20]
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	4a2d      	ldr	r2, [pc, #180]	; (800c468 <TIM_OC1_SetConfig+0x10c>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d00f      	beq.n	800c3d8 <TIM_OC1_SetConfig+0x7c>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4a2c      	ldr	r2, [pc, #176]	; (800c46c <TIM_OC1_SetConfig+0x110>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d00b      	beq.n	800c3d8 <TIM_OC1_SetConfig+0x7c>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a2b      	ldr	r2, [pc, #172]	; (800c470 <TIM_OC1_SetConfig+0x114>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d007      	beq.n	800c3d8 <TIM_OC1_SetConfig+0x7c>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a2a      	ldr	r2, [pc, #168]	; (800c474 <TIM_OC1_SetConfig+0x118>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d003      	beq.n	800c3d8 <TIM_OC1_SetConfig+0x7c>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4a29      	ldr	r2, [pc, #164]	; (800c478 <TIM_OC1_SetConfig+0x11c>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d10c      	bne.n	800c3f2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	f023 0308 	bic.w	r3, r3, #8
 800c3de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	697a      	ldr	r2, [r7, #20]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	f023 0304 	bic.w	r3, r3, #4
 800c3f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4a1c      	ldr	r2, [pc, #112]	; (800c468 <TIM_OC1_SetConfig+0x10c>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d00f      	beq.n	800c41a <TIM_OC1_SetConfig+0xbe>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4a1b      	ldr	r2, [pc, #108]	; (800c46c <TIM_OC1_SetConfig+0x110>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d00b      	beq.n	800c41a <TIM_OC1_SetConfig+0xbe>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	4a1a      	ldr	r2, [pc, #104]	; (800c470 <TIM_OC1_SetConfig+0x114>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d007      	beq.n	800c41a <TIM_OC1_SetConfig+0xbe>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4a19      	ldr	r2, [pc, #100]	; (800c474 <TIM_OC1_SetConfig+0x118>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d003      	beq.n	800c41a <TIM_OC1_SetConfig+0xbe>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4a18      	ldr	r2, [pc, #96]	; (800c478 <TIM_OC1_SetConfig+0x11c>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d111      	bne.n	800c43e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	695b      	ldr	r3, [r3, #20]
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	4313      	orrs	r3, r2
 800c432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	699b      	ldr	r3, [r3, #24]
 800c438:	693a      	ldr	r2, [r7, #16]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	693a      	ldr	r2, [r7, #16]
 800c442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	68fa      	ldr	r2, [r7, #12]
 800c448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	685a      	ldr	r2, [r3, #4]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	697a      	ldr	r2, [r7, #20]
 800c456:	621a      	str	r2, [r3, #32]
}
 800c458:	bf00      	nop
 800c45a:	371c      	adds	r7, #28
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr
 800c464:	fffeff8f 	.word	0xfffeff8f
 800c468:	40010000 	.word	0x40010000
 800c46c:	40010400 	.word	0x40010400
 800c470:	40014000 	.word	0x40014000
 800c474:	40014400 	.word	0x40014400
 800c478:	40014800 	.word	0x40014800

0800c47c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b087      	sub	sp, #28
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6a1b      	ldr	r3, [r3, #32]
 800c48a:	f023 0210 	bic.w	r2, r3, #16
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a1b      	ldr	r3, [r3, #32]
 800c496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	4b34      	ldr	r3, [pc, #208]	; (800c578 <TIM_OC2_SetConfig+0xfc>)
 800c4a8:	4013      	ands	r3, r2
 800c4aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	021b      	lsls	r3, r3, #8
 800c4ba:	68fa      	ldr	r2, [r7, #12]
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	f023 0320 	bic.w	r3, r3, #32
 800c4c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	011b      	lsls	r3, r3, #4
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4a29      	ldr	r2, [pc, #164]	; (800c57c <TIM_OC2_SetConfig+0x100>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d003      	beq.n	800c4e4 <TIM_OC2_SetConfig+0x68>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4a28      	ldr	r2, [pc, #160]	; (800c580 <TIM_OC2_SetConfig+0x104>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d10d      	bne.n	800c500 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	011b      	lsls	r3, r3, #4
 800c4f2:	697a      	ldr	r2, [r7, #20]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	4a1e      	ldr	r2, [pc, #120]	; (800c57c <TIM_OC2_SetConfig+0x100>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d00f      	beq.n	800c528 <TIM_OC2_SetConfig+0xac>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4a1d      	ldr	r2, [pc, #116]	; (800c580 <TIM_OC2_SetConfig+0x104>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d00b      	beq.n	800c528 <TIM_OC2_SetConfig+0xac>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4a1c      	ldr	r2, [pc, #112]	; (800c584 <TIM_OC2_SetConfig+0x108>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d007      	beq.n	800c528 <TIM_OC2_SetConfig+0xac>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4a1b      	ldr	r2, [pc, #108]	; (800c588 <TIM_OC2_SetConfig+0x10c>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d003      	beq.n	800c528 <TIM_OC2_SetConfig+0xac>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4a1a      	ldr	r2, [pc, #104]	; (800c58c <TIM_OC2_SetConfig+0x110>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d113      	bne.n	800c550 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c52e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	695b      	ldr	r3, [r3, #20]
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	4313      	orrs	r3, r2
 800c542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	699b      	ldr	r3, [r3, #24]
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	693a      	ldr	r2, [r7, #16]
 800c54c:	4313      	orrs	r3, r2
 800c54e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	693a      	ldr	r2, [r7, #16]
 800c554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	685a      	ldr	r2, [r3, #4]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	697a      	ldr	r2, [r7, #20]
 800c568:	621a      	str	r2, [r3, #32]
}
 800c56a:	bf00      	nop
 800c56c:	371c      	adds	r7, #28
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	feff8fff 	.word	0xfeff8fff
 800c57c:	40010000 	.word	0x40010000
 800c580:	40010400 	.word	0x40010400
 800c584:	40014000 	.word	0x40014000
 800c588:	40014400 	.word	0x40014400
 800c58c:	40014800 	.word	0x40014800

0800c590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c590:	b480      	push	{r7}
 800c592:	b087      	sub	sp, #28
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6a1b      	ldr	r3, [r3, #32]
 800c59e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a1b      	ldr	r3, [r3, #32]
 800c5aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	69db      	ldr	r3, [r3, #28]
 800c5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	4b33      	ldr	r3, [pc, #204]	; (800c688 <TIM_OC3_SetConfig+0xf8>)
 800c5bc:	4013      	ands	r3, r2
 800c5be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f023 0303 	bic.w	r3, r3, #3
 800c5c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c5d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	021b      	lsls	r3, r3, #8
 800c5e0:	697a      	ldr	r2, [r7, #20]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4a28      	ldr	r2, [pc, #160]	; (800c68c <TIM_OC3_SetConfig+0xfc>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d003      	beq.n	800c5f6 <TIM_OC3_SetConfig+0x66>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4a27      	ldr	r2, [pc, #156]	; (800c690 <TIM_OC3_SetConfig+0x100>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d10d      	bne.n	800c612 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	021b      	lsls	r3, r3, #8
 800c604:	697a      	ldr	r2, [r7, #20]
 800c606:	4313      	orrs	r3, r2
 800c608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a1d      	ldr	r2, [pc, #116]	; (800c68c <TIM_OC3_SetConfig+0xfc>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d00f      	beq.n	800c63a <TIM_OC3_SetConfig+0xaa>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	4a1c      	ldr	r2, [pc, #112]	; (800c690 <TIM_OC3_SetConfig+0x100>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d00b      	beq.n	800c63a <TIM_OC3_SetConfig+0xaa>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	4a1b      	ldr	r2, [pc, #108]	; (800c694 <TIM_OC3_SetConfig+0x104>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d007      	beq.n	800c63a <TIM_OC3_SetConfig+0xaa>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a1a      	ldr	r2, [pc, #104]	; (800c698 <TIM_OC3_SetConfig+0x108>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d003      	beq.n	800c63a <TIM_OC3_SetConfig+0xaa>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a19      	ldr	r2, [pc, #100]	; (800c69c <TIM_OC3_SetConfig+0x10c>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d113      	bne.n	800c662 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	695b      	ldr	r3, [r3, #20]
 800c64e:	011b      	lsls	r3, r3, #4
 800c650:	693a      	ldr	r2, [r7, #16]
 800c652:	4313      	orrs	r3, r2
 800c654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	699b      	ldr	r3, [r3, #24]
 800c65a:	011b      	lsls	r3, r3, #4
 800c65c:	693a      	ldr	r2, [r7, #16]
 800c65e:	4313      	orrs	r3, r2
 800c660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	685a      	ldr	r2, [r3, #4]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	697a      	ldr	r2, [r7, #20]
 800c67a:	621a      	str	r2, [r3, #32]
}
 800c67c:	bf00      	nop
 800c67e:	371c      	adds	r7, #28
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr
 800c688:	fffeff8f 	.word	0xfffeff8f
 800c68c:	40010000 	.word	0x40010000
 800c690:	40010400 	.word	0x40010400
 800c694:	40014000 	.word	0x40014000
 800c698:	40014400 	.word	0x40014400
 800c69c:	40014800 	.word	0x40014800

0800c6a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b087      	sub	sp, #28
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6a1b      	ldr	r3, [r3, #32]
 800c6ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a1b      	ldr	r3, [r3, #32]
 800c6ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	69db      	ldr	r3, [r3, #28]
 800c6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	4b24      	ldr	r3, [pc, #144]	; (800c75c <TIM_OC4_SetConfig+0xbc>)
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	021b      	lsls	r3, r3, #8
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c6ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	031b      	lsls	r3, r3, #12
 800c6f2:	693a      	ldr	r2, [r7, #16]
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4a19      	ldr	r2, [pc, #100]	; (800c760 <TIM_OC4_SetConfig+0xc0>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d00f      	beq.n	800c720 <TIM_OC4_SetConfig+0x80>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4a18      	ldr	r2, [pc, #96]	; (800c764 <TIM_OC4_SetConfig+0xc4>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d00b      	beq.n	800c720 <TIM_OC4_SetConfig+0x80>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4a17      	ldr	r2, [pc, #92]	; (800c768 <TIM_OC4_SetConfig+0xc8>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d007      	beq.n	800c720 <TIM_OC4_SetConfig+0x80>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a16      	ldr	r2, [pc, #88]	; (800c76c <TIM_OC4_SetConfig+0xcc>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d003      	beq.n	800c720 <TIM_OC4_SetConfig+0x80>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a15      	ldr	r2, [pc, #84]	; (800c770 <TIM_OC4_SetConfig+0xd0>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d109      	bne.n	800c734 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c726:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	695b      	ldr	r3, [r3, #20]
 800c72c:	019b      	lsls	r3, r3, #6
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	4313      	orrs	r3, r2
 800c732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	697a      	ldr	r2, [r7, #20]
 800c738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	685a      	ldr	r2, [r3, #4]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	693a      	ldr	r2, [r7, #16]
 800c74c:	621a      	str	r2, [r3, #32]
}
 800c74e:	bf00      	nop
 800c750:	371c      	adds	r7, #28
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	feff8fff 	.word	0xfeff8fff
 800c760:	40010000 	.word	0x40010000
 800c764:	40010400 	.word	0x40010400
 800c768:	40014000 	.word	0x40014000
 800c76c:	40014400 	.word	0x40014400
 800c770:	40014800 	.word	0x40014800

0800c774 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c774:	b480      	push	{r7}
 800c776:	b087      	sub	sp, #28
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a1b      	ldr	r3, [r3, #32]
 800c782:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6a1b      	ldr	r3, [r3, #32]
 800c78e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	4b21      	ldr	r3, [pc, #132]	; (800c824 <TIM_OC5_SetConfig+0xb0>)
 800c7a0:	4013      	ands	r3, r2
 800c7a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c7b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	041b      	lsls	r3, r3, #16
 800c7bc:	693a      	ldr	r2, [r7, #16]
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4a18      	ldr	r2, [pc, #96]	; (800c828 <TIM_OC5_SetConfig+0xb4>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d00f      	beq.n	800c7ea <TIM_OC5_SetConfig+0x76>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4a17      	ldr	r2, [pc, #92]	; (800c82c <TIM_OC5_SetConfig+0xb8>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d00b      	beq.n	800c7ea <TIM_OC5_SetConfig+0x76>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4a16      	ldr	r2, [pc, #88]	; (800c830 <TIM_OC5_SetConfig+0xbc>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d007      	beq.n	800c7ea <TIM_OC5_SetConfig+0x76>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4a15      	ldr	r2, [pc, #84]	; (800c834 <TIM_OC5_SetConfig+0xc0>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d003      	beq.n	800c7ea <TIM_OC5_SetConfig+0x76>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4a14      	ldr	r2, [pc, #80]	; (800c838 <TIM_OC5_SetConfig+0xc4>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d109      	bne.n	800c7fe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	695b      	ldr	r3, [r3, #20]
 800c7f6:	021b      	lsls	r3, r3, #8
 800c7f8:	697a      	ldr	r2, [r7, #20]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	697a      	ldr	r2, [r7, #20]
 800c802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	685a      	ldr	r2, [r3, #4]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	693a      	ldr	r2, [r7, #16]
 800c816:	621a      	str	r2, [r3, #32]
}
 800c818:	bf00      	nop
 800c81a:	371c      	adds	r7, #28
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr
 800c824:	fffeff8f 	.word	0xfffeff8f
 800c828:	40010000 	.word	0x40010000
 800c82c:	40010400 	.word	0x40010400
 800c830:	40014000 	.word	0x40014000
 800c834:	40014400 	.word	0x40014400
 800c838:	40014800 	.word	0x40014800

0800c83c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6a1b      	ldr	r3, [r3, #32]
 800c84a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a1b      	ldr	r3, [r3, #32]
 800c856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	4b22      	ldr	r3, [pc, #136]	; (800c8f0 <TIM_OC6_SetConfig+0xb4>)
 800c868:	4013      	ands	r3, r2
 800c86a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	021b      	lsls	r3, r3, #8
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	4313      	orrs	r3, r2
 800c876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c87e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	051b      	lsls	r3, r3, #20
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	4313      	orrs	r3, r2
 800c88a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4a19      	ldr	r2, [pc, #100]	; (800c8f4 <TIM_OC6_SetConfig+0xb8>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d00f      	beq.n	800c8b4 <TIM_OC6_SetConfig+0x78>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4a18      	ldr	r2, [pc, #96]	; (800c8f8 <TIM_OC6_SetConfig+0xbc>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d00b      	beq.n	800c8b4 <TIM_OC6_SetConfig+0x78>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	4a17      	ldr	r2, [pc, #92]	; (800c8fc <TIM_OC6_SetConfig+0xc0>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d007      	beq.n	800c8b4 <TIM_OC6_SetConfig+0x78>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4a16      	ldr	r2, [pc, #88]	; (800c900 <TIM_OC6_SetConfig+0xc4>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d003      	beq.n	800c8b4 <TIM_OC6_SetConfig+0x78>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	4a15      	ldr	r2, [pc, #84]	; (800c904 <TIM_OC6_SetConfig+0xc8>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d109      	bne.n	800c8c8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c8ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	695b      	ldr	r3, [r3, #20]
 800c8c0:	029b      	lsls	r3, r3, #10
 800c8c2:	697a      	ldr	r2, [r7, #20]
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	697a      	ldr	r2, [r7, #20]
 800c8cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	685a      	ldr	r2, [r3, #4]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	693a      	ldr	r2, [r7, #16]
 800c8e0:	621a      	str	r2, [r3, #32]
}
 800c8e2:	bf00      	nop
 800c8e4:	371c      	adds	r7, #28
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	feff8fff 	.word	0xfeff8fff
 800c8f4:	40010000 	.word	0x40010000
 800c8f8:	40010400 	.word	0x40010400
 800c8fc:	40014000 	.word	0x40014000
 800c900:	40014400 	.word	0x40014400
 800c904:	40014800 	.word	0x40014800

0800c908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c908:	b480      	push	{r7}
 800c90a:	b087      	sub	sp, #28
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6a1b      	ldr	r3, [r3, #32]
 800c918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6a1b      	ldr	r3, [r3, #32]
 800c91e:	f023 0201 	bic.w	r2, r3, #1
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	699b      	ldr	r3, [r3, #24]
 800c92a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	011b      	lsls	r3, r3, #4
 800c938:	693a      	ldr	r2, [r7, #16]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	f023 030a 	bic.w	r3, r3, #10
 800c944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c946:	697a      	ldr	r2, [r7, #20]
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	4313      	orrs	r3, r2
 800c94c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	693a      	ldr	r2, [r7, #16]
 800c952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	697a      	ldr	r2, [r7, #20]
 800c958:	621a      	str	r2, [r3, #32]
}
 800c95a:	bf00      	nop
 800c95c:	371c      	adds	r7, #28
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr

0800c966 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c966:	b480      	push	{r7}
 800c968:	b087      	sub	sp, #28
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	60f8      	str	r0, [r7, #12]
 800c96e:	60b9      	str	r1, [r7, #8]
 800c970:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6a1b      	ldr	r3, [r3, #32]
 800c976:	f023 0210 	bic.w	r2, r3, #16
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6a1b      	ldr	r3, [r3, #32]
 800c988:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c990:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	031b      	lsls	r3, r3, #12
 800c996:	697a      	ldr	r2, [r7, #20]
 800c998:	4313      	orrs	r3, r2
 800c99a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c9a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	011b      	lsls	r3, r3, #4
 800c9a8:	693a      	ldr	r2, [r7, #16]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	697a      	ldr	r2, [r7, #20]
 800c9b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	693a      	ldr	r2, [r7, #16]
 800c9b8:	621a      	str	r2, [r3, #32]
}
 800c9ba:	bf00      	nop
 800c9bc:	371c      	adds	r7, #28
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
	...

0800c9c8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	4b09      	ldr	r3, [pc, #36]	; (800ca00 <TIM_ITRx_SetConfig+0x38>)
 800c9dc:	4013      	ands	r3, r2
 800c9de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9e0:	683a      	ldr	r2, [r7, #0]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	f043 0307 	orr.w	r3, r3, #7
 800c9ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	609a      	str	r2, [r3, #8]
}
 800c9f2:	bf00      	nop
 800c9f4:	3714      	adds	r7, #20
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	ffcfff8f 	.word	0xffcfff8f

0800ca04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b087      	sub	sp, #28
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
 800ca10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	021a      	lsls	r2, r3, #8
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	431a      	orrs	r2, r3
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	697a      	ldr	r2, [r7, #20]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	697a      	ldr	r2, [r7, #20]
 800ca36:	609a      	str	r2, [r3, #8]
}
 800ca38:	bf00      	nop
 800ca3a:	371c      	adds	r7, #28
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b087      	sub	sp, #28
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	f003 031f 	and.w	r3, r3, #31
 800ca56:	2201      	movs	r2, #1
 800ca58:	fa02 f303 	lsl.w	r3, r2, r3
 800ca5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6a1a      	ldr	r2, [r3, #32]
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	43db      	mvns	r3, r3
 800ca66:	401a      	ands	r2, r3
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6a1a      	ldr	r2, [r3, #32]
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	f003 031f 	and.w	r3, r3, #31
 800ca76:	6879      	ldr	r1, [r7, #4]
 800ca78:	fa01 f303 	lsl.w	r3, r1, r3
 800ca7c:	431a      	orrs	r2, r3
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	621a      	str	r2, [r3, #32]
}
 800ca82:	bf00      	nop
 800ca84:	371c      	adds	r7, #28
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
	...

0800ca90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b085      	sub	sp, #20
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d101      	bne.n	800caa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800caa4:	2302      	movs	r3, #2
 800caa6:	e077      	b.n	800cb98 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2202      	movs	r2, #2
 800cab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a35      	ldr	r2, [pc, #212]	; (800cba4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d004      	beq.n	800cadc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a34      	ldr	r2, [pc, #208]	; (800cba8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d108      	bne.n	800caee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cae2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	4313      	orrs	r3, r2
 800caec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800caf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a25      	ldr	r2, [pc, #148]	; (800cba4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d02c      	beq.n	800cb6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb1a:	d027      	beq.n	800cb6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a22      	ldr	r2, [pc, #136]	; (800cbac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d022      	beq.n	800cb6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a21      	ldr	r2, [pc, #132]	; (800cbb0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d01d      	beq.n	800cb6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a1f      	ldr	r2, [pc, #124]	; (800cbb4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d018      	beq.n	800cb6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a1a      	ldr	r2, [pc, #104]	; (800cba8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d013      	beq.n	800cb6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a1b      	ldr	r2, [pc, #108]	; (800cbb8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d00e      	beq.n	800cb6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4a1a      	ldr	r2, [pc, #104]	; (800cbbc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d009      	beq.n	800cb6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a18      	ldr	r2, [pc, #96]	; (800cbc0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d004      	beq.n	800cb6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4a17      	ldr	r2, [pc, #92]	; (800cbc4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d10c      	bne.n	800cb86 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	689b      	ldr	r3, [r3, #8]
 800cb78:	68ba      	ldr	r2, [r7, #8]
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	68ba      	ldr	r2, [r7, #8]
 800cb84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb96:	2300      	movs	r3, #0
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3714      	adds	r7, #20
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr
 800cba4:	40010000 	.word	0x40010000
 800cba8:	40010400 	.word	0x40010400
 800cbac:	40000400 	.word	0x40000400
 800cbb0:	40000800 	.word	0x40000800
 800cbb4:	40000c00 	.word	0x40000c00
 800cbb8:	40001800 	.word	0x40001800
 800cbbc:	40014000 	.word	0x40014000
 800cbc0:	4000e000 	.word	0x4000e000
 800cbc4:	4000e400 	.word	0x4000e400

0800cbc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b085      	sub	sp, #20
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d101      	bne.n	800cbe4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cbe0:	2302      	movs	r3, #2
 800cbe2:	e087      	b.n	800ccf4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	4313      	orrs	r3, r2
 800cc06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	4313      	orrs	r3, r2
 800cc14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4313      	orrs	r3, r2
 800cc22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	695b      	ldr	r3, [r3, #20]
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	699b      	ldr	r3, [r3, #24]
 800cc58:	041b      	lsls	r3, r3, #16
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a27      	ldr	r2, [pc, #156]	; (800cd00 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d004      	beq.n	800cc72 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a25      	ldr	r2, [pc, #148]	; (800cd04 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d106      	bne.n	800cc80 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	69db      	ldr	r3, [r3, #28]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a1e      	ldr	r2, [pc, #120]	; (800cd00 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d004      	beq.n	800cc94 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a1d      	ldr	r2, [pc, #116]	; (800cd04 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d126      	bne.n	800cce2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc9e:	051b      	lsls	r3, r3, #20
 800cca0:	4313      	orrs	r3, r2
 800cca2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	6a1b      	ldr	r3, [r3, #32]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a0e      	ldr	r2, [pc, #56]	; (800cd00 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d004      	beq.n	800ccd4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a0d      	ldr	r2, [pc, #52]	; (800cd04 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d106      	bne.n	800cce2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccde:	4313      	orrs	r3, r2
 800cce0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	68fa      	ldr	r2, [r7, #12]
 800cce8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3714      	adds	r7, #20
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	40010000 	.word	0x40010000
 800cd04:	40010400 	.word	0x40010400

0800cd08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cd10:	bf00      	nop
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd24:	bf00      	nop
 800cd26:	370c      	adds	r7, #12
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cd38:	bf00      	nop
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d101      	bne.n	800cd56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd52:	2301      	movs	r3, #1
 800cd54:	e042      	b.n	800cddc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d106      	bne.n	800cd6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f7f8 fcc9 	bl	8005700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2224      	movs	r2, #36	; 0x24
 800cd72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f022 0201 	bic.w	r2, r2, #1
 800cd84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 fcdc 	bl	800d744 <UART_SetConfig>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d101      	bne.n	800cd96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cd92:	2301      	movs	r3, #1
 800cd94:	e022      	b.n	800cddc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d002      	beq.n	800cda4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f001 fb3c 	bl	800e41c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	685a      	ldr	r2, [r3, #4]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cdb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	689a      	ldr	r2, [r3, #8]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cdc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f042 0201 	orr.w	r2, r2, #1
 800cdd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f001 fbc3 	bl	800e560 <UART_CheckIdleState>
 800cdda:	4603      	mov	r3, r0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3708      	adds	r7, #8
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b08a      	sub	sp, #40	; 0x28
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	4613      	mov	r3, r2
 800cdf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdf8:	2b20      	cmp	r3, #32
 800cdfa:	d17a      	bne.n	800cef2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d002      	beq.n	800ce08 <HAL_UART_Transmit_DMA+0x24>
 800ce02:	88fb      	ldrh	r3, [r7, #6]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d101      	bne.n	800ce0c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e073      	b.n	800cef4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d101      	bne.n	800ce1a <HAL_UART_Transmit_DMA+0x36>
 800ce16:	2302      	movs	r3, #2
 800ce18:	e06c      	b.n	800cef4 <HAL_UART_Transmit_DMA+0x110>
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	88fa      	ldrh	r2, [r7, #6]
 800ce2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	88fa      	ldrh	r2, [r7, #6]
 800ce34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2221      	movs	r2, #33	; 0x21
 800ce44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d02c      	beq.n	800ceaa <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce54:	4a29      	ldr	r2, [pc, #164]	; (800cefc <HAL_UART_Transmit_DMA+0x118>)
 800ce56:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce5c:	4a28      	ldr	r2, [pc, #160]	; (800cf00 <HAL_UART_Transmit_DMA+0x11c>)
 800ce5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce64:	4a27      	ldr	r2, [pc, #156]	; (800cf04 <HAL_UART_Transmit_DMA+0x120>)
 800ce66:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce78:	4619      	mov	r1, r3
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	3328      	adds	r3, #40	; 0x28
 800ce80:	461a      	mov	r2, r3
 800ce82:	88fb      	ldrh	r3, [r7, #6]
 800ce84:	f7f9 fb5e 	bl	8006544 <HAL_DMA_Start_IT>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00d      	beq.n	800ceaa <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2210      	movs	r2, #16
 800ce92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2220      	movs	r2, #32
 800cea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800cea6:	2301      	movs	r3, #1
 800cea8:	e024      	b.n	800cef4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2240      	movs	r2, #64	; 0x40
 800ceb0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	3308      	adds	r3, #8
 800cec0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	e853 3f00 	ldrex	r3, [r3]
 800cec8:	613b      	str	r3, [r7, #16]
   return(result);
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ced0:	627b      	str	r3, [r7, #36]	; 0x24
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	3308      	adds	r3, #8
 800ced8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceda:	623a      	str	r2, [r7, #32]
 800cedc:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cede:	69f9      	ldr	r1, [r7, #28]
 800cee0:	6a3a      	ldr	r2, [r7, #32]
 800cee2:	e841 2300 	strex	r3, r2, [r1]
 800cee6:	61bb      	str	r3, [r7, #24]
   return(result);
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1e5      	bne.n	800ceba <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	e000      	b.n	800cef4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800cef2:	2302      	movs	r3, #2
  }
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3728      	adds	r7, #40	; 0x28
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	0800ea29 	.word	0x0800ea29
 800cf00:	0800eabf 	.word	0x0800eabf
 800cf04:	0800ec35 	.word	0x0800ec35

0800cf08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b08a      	sub	sp, #40	; 0x28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	4613      	mov	r3, r2
 800cf14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf1c:	2b20      	cmp	r3, #32
 800cf1e:	d142      	bne.n	800cfa6 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d002      	beq.n	800cf2c <HAL_UART_Receive_DMA+0x24>
 800cf26:	88fb      	ldrh	r3, [r7, #6]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e03b      	b.n	800cfa8 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d101      	bne.n	800cf3e <HAL_UART_Receive_DMA+0x36>
 800cf3a:	2302      	movs	r3, #2
 800cf3c:	e034      	b.n	800cfa8 <HAL_UART_Receive_DMA+0xa0>
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a17      	ldr	r2, [pc, #92]	; (800cfb0 <HAL_UART_Receive_DMA+0xa8>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d01f      	beq.n	800cf96 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d018      	beq.n	800cf96 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	e853 3f00 	ldrex	r3, [r3]
 800cf70:	613b      	str	r3, [r7, #16]
   return(result);
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf78:	627b      	str	r3, [r7, #36]	; 0x24
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	461a      	mov	r2, r3
 800cf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf82:	623b      	str	r3, [r7, #32]
 800cf84:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf86:	69f9      	ldr	r1, [r7, #28]
 800cf88:	6a3a      	ldr	r2, [r7, #32]
 800cf8a:	e841 2300 	strex	r3, r2, [r1]
 800cf8e:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d1e6      	bne.n	800cf64 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cf96:	88fb      	ldrh	r3, [r7, #6]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	68b9      	ldr	r1, [r7, #8]
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f001 fbf3 	bl	800e788 <UART_Start_Receive_DMA>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	e000      	b.n	800cfa8 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cfa6:	2302      	movs	r3, #2
  }
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3728      	adds	r7, #40	; 0x28
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	58000c00 	.word	0x58000c00

0800cfb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b0ba      	sub	sp, #232	; 0xe8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	69db      	ldr	r3, [r3, #28]
 800cfc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	689b      	ldr	r3, [r3, #8]
 800cfd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cfda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cfde:	f640 030f 	movw	r3, #2063	; 0x80f
 800cfe2:	4013      	ands	r3, r2
 800cfe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cfe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d11b      	bne.n	800d028 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cff4:	f003 0320 	and.w	r3, r3, #32
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d015      	beq.n	800d028 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d000:	f003 0320 	and.w	r3, r3, #32
 800d004:	2b00      	cmp	r3, #0
 800d006:	d105      	bne.n	800d014 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d00c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d009      	beq.n	800d028 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f000 835a 	beq.w	800d6d2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	4798      	blx	r3
      }
      return;
 800d026:	e354      	b.n	800d6d2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	f000 811f 	beq.w	800d270 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d032:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d036:	4b8b      	ldr	r3, [pc, #556]	; (800d264 <HAL_UART_IRQHandler+0x2b0>)
 800d038:	4013      	ands	r3, r2
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d106      	bne.n	800d04c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d03e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d042:	4b89      	ldr	r3, [pc, #548]	; (800d268 <HAL_UART_IRQHandler+0x2b4>)
 800d044:	4013      	ands	r3, r2
 800d046:	2b00      	cmp	r3, #0
 800d048:	f000 8112 	beq.w	800d270 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d050:	f003 0301 	and.w	r3, r3, #1
 800d054:	2b00      	cmp	r3, #0
 800d056:	d011      	beq.n	800d07c <HAL_UART_IRQHandler+0xc8>
 800d058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d05c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00b      	beq.n	800d07c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2201      	movs	r2, #1
 800d06a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d072:	f043 0201 	orr.w	r2, r3, #1
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d080:	f003 0302 	and.w	r3, r3, #2
 800d084:	2b00      	cmp	r3, #0
 800d086:	d011      	beq.n	800d0ac <HAL_UART_IRQHandler+0xf8>
 800d088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d08c:	f003 0301 	and.w	r3, r3, #1
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00b      	beq.n	800d0ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2202      	movs	r2, #2
 800d09a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0a2:	f043 0204 	orr.w	r2, r3, #4
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0b0:	f003 0304 	and.w	r3, r3, #4
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d011      	beq.n	800d0dc <HAL_UART_IRQHandler+0x128>
 800d0b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0bc:	f003 0301 	and.w	r3, r3, #1
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00b      	beq.n	800d0dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2204      	movs	r2, #4
 800d0ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0d2:	f043 0202 	orr.w	r2, r3, #2
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0e0:	f003 0308 	and.w	r3, r3, #8
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d017      	beq.n	800d118 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0ec:	f003 0320 	and.w	r3, r3, #32
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d105      	bne.n	800d100 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d0f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d0f8:	4b5a      	ldr	r3, [pc, #360]	; (800d264 <HAL_UART_IRQHandler+0x2b0>)
 800d0fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d00b      	beq.n	800d118 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2208      	movs	r2, #8
 800d106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d10e:	f043 0208 	orr.w	r2, r3, #8
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d11c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d120:	2b00      	cmp	r3, #0
 800d122:	d012      	beq.n	800d14a <HAL_UART_IRQHandler+0x196>
 800d124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00c      	beq.n	800d14a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d140:	f043 0220 	orr.w	r2, r3, #32
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d150:	2b00      	cmp	r3, #0
 800d152:	f000 82c0 	beq.w	800d6d6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d15a:	f003 0320 	and.w	r3, r3, #32
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d013      	beq.n	800d18a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d166:	f003 0320 	and.w	r3, r3, #32
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d105      	bne.n	800d17a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d16e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d176:	2b00      	cmp	r3, #0
 800d178:	d007      	beq.n	800d18a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d003      	beq.n	800d18a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d190:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d19e:	2b40      	cmp	r3, #64	; 0x40
 800d1a0:	d005      	beq.n	800d1ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d1a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d1a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d04f      	beq.n	800d24e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f001 fbd4 	bl	800e95c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1be:	2b40      	cmp	r3, #64	; 0x40
 800d1c0:	d141      	bne.n	800d246 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	3308      	adds	r3, #8
 800d1c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d1d0:	e853 3f00 	ldrex	r3, [r3]
 800d1d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d1d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d1dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	3308      	adds	r3, #8
 800d1ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d1ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d1f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d1fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d1fe:	e841 2300 	strex	r3, r2, [r1]
 800d202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d1d9      	bne.n	800d1c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d212:	2b00      	cmp	r3, #0
 800d214:	d013      	beq.n	800d23e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d21a:	4a14      	ldr	r2, [pc, #80]	; (800d26c <HAL_UART_IRQHandler+0x2b8>)
 800d21c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d222:	4618      	mov	r0, r3
 800d224:	f7f9 ff16 	bl	8007054 <HAL_DMA_Abort_IT>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d017      	beq.n	800d25e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d238:	4610      	mov	r0, r2
 800d23a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d23c:	e00f      	b.n	800d25e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 fa6a 	bl	800d718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d244:	e00b      	b.n	800d25e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fa66 	bl	800d718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d24c:	e007      	b.n	800d25e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 fa62 	bl	800d718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d25c:	e23b      	b.n	800d6d6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d25e:	bf00      	nop
    return;
 800d260:	e239      	b.n	800d6d6 <HAL_UART_IRQHandler+0x722>
 800d262:	bf00      	nop
 800d264:	10000001 	.word	0x10000001
 800d268:	04000120 	.word	0x04000120
 800d26c:	0800ecb5 	.word	0x0800ecb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d274:	2b01      	cmp	r3, #1
 800d276:	f040 81ce 	bne.w	800d616 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d27a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d27e:	f003 0310 	and.w	r3, r3, #16
 800d282:	2b00      	cmp	r3, #0
 800d284:	f000 81c7 	beq.w	800d616 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d28c:	f003 0310 	and.w	r3, r3, #16
 800d290:	2b00      	cmp	r3, #0
 800d292:	f000 81c0 	beq.w	800d616 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2210      	movs	r2, #16
 800d29c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2a8:	2b40      	cmp	r3, #64	; 0x40
 800d2aa:	f040 813b 	bne.w	800d524 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a8b      	ldr	r2, [pc, #556]	; (800d4e4 <HAL_UART_IRQHandler+0x530>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d059      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a89      	ldr	r2, [pc, #548]	; (800d4e8 <HAL_UART_IRQHandler+0x534>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d053      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a87      	ldr	r2, [pc, #540]	; (800d4ec <HAL_UART_IRQHandler+0x538>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d04d      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4a85      	ldr	r2, [pc, #532]	; (800d4f0 <HAL_UART_IRQHandler+0x53c>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d047      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a83      	ldr	r2, [pc, #524]	; (800d4f4 <HAL_UART_IRQHandler+0x540>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d041      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a81      	ldr	r2, [pc, #516]	; (800d4f8 <HAL_UART_IRQHandler+0x544>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d03b      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	4a7f      	ldr	r2, [pc, #508]	; (800d4fc <HAL_UART_IRQHandler+0x548>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d035      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4a7d      	ldr	r2, [pc, #500]	; (800d500 <HAL_UART_IRQHandler+0x54c>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d02f      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a7b      	ldr	r2, [pc, #492]	; (800d504 <HAL_UART_IRQHandler+0x550>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d029      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4a79      	ldr	r2, [pc, #484]	; (800d508 <HAL_UART_IRQHandler+0x554>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d023      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4a77      	ldr	r2, [pc, #476]	; (800d50c <HAL_UART_IRQHandler+0x558>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d01d      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a75      	ldr	r2, [pc, #468]	; (800d510 <HAL_UART_IRQHandler+0x55c>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d017      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a73      	ldr	r2, [pc, #460]	; (800d514 <HAL_UART_IRQHandler+0x560>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d011      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a71      	ldr	r2, [pc, #452]	; (800d518 <HAL_UART_IRQHandler+0x564>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d00b      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a6f      	ldr	r2, [pc, #444]	; (800d51c <HAL_UART_IRQHandler+0x568>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d005      	beq.n	800d36e <HAL_UART_IRQHandler+0x3ba>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a6d      	ldr	r2, [pc, #436]	; (800d520 <HAL_UART_IRQHandler+0x56c>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d105      	bne.n	800d37a <HAL_UART_IRQHandler+0x3c6>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	b29b      	uxth	r3, r3
 800d378:	e004      	b.n	800d384 <HAL_UART_IRQHandler+0x3d0>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	b29b      	uxth	r3, r3
 800d384:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d388:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	f000 81a4 	beq.w	800d6da <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d398:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d39c:	429a      	cmp	r2, r3
 800d39e:	f080 819c 	bcs.w	800d6da <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d3a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3b0:	69db      	ldr	r3, [r3, #28]
 800d3b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3b6:	f000 8086 	beq.w	800d4c6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d3c6:	e853 3f00 	ldrex	r3, [r3]
 800d3ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d3ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d3d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	461a      	mov	r2, r3
 800d3e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d3e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d3e8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d3f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d3f4:	e841 2300 	strex	r3, r2, [r1]
 800d3f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d3fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1da      	bne.n	800d3ba <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	3308      	adds	r3, #8
 800d40a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d40c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d40e:	e853 3f00 	ldrex	r3, [r3]
 800d412:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d414:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d416:	f023 0301 	bic.w	r3, r3, #1
 800d41a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	3308      	adds	r3, #8
 800d424:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d428:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d42c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d42e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d430:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d434:	e841 2300 	strex	r3, r2, [r1]
 800d438:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d43a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d1e1      	bne.n	800d404 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3308      	adds	r3, #8
 800d446:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d44a:	e853 3f00 	ldrex	r3, [r3]
 800d44e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3308      	adds	r3, #8
 800d460:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d464:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d466:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d468:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d46a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d46c:	e841 2300 	strex	r3, r2, [r1]
 800d470:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d472:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d474:	2b00      	cmp	r3, #0
 800d476:	d1e3      	bne.n	800d440 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2220      	movs	r2, #32
 800d47c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d48c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d48e:	e853 3f00 	ldrex	r3, [r3]
 800d492:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d496:	f023 0310 	bic.w	r3, r3, #16
 800d49a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d4a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800d4aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d4ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d4b0:	e841 2300 	strex	r3, r2, [r1]
 800d4b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d4b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d1e4      	bne.n	800d486 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7f9 faa9 	bl	8006a18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	1ad3      	subs	r3, r2, r3
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	4619      	mov	r1, r3
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f926 	bl	800d72c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d4e0:	e0fb      	b.n	800d6da <HAL_UART_IRQHandler+0x726>
 800d4e2:	bf00      	nop
 800d4e4:	40020010 	.word	0x40020010
 800d4e8:	40020028 	.word	0x40020028
 800d4ec:	40020040 	.word	0x40020040
 800d4f0:	40020058 	.word	0x40020058
 800d4f4:	40020070 	.word	0x40020070
 800d4f8:	40020088 	.word	0x40020088
 800d4fc:	400200a0 	.word	0x400200a0
 800d500:	400200b8 	.word	0x400200b8
 800d504:	40020410 	.word	0x40020410
 800d508:	40020428 	.word	0x40020428
 800d50c:	40020440 	.word	0x40020440
 800d510:	40020458 	.word	0x40020458
 800d514:	40020470 	.word	0x40020470
 800d518:	40020488 	.word	0x40020488
 800d51c:	400204a0 	.word	0x400204a0
 800d520:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d530:	b29b      	uxth	r3, r3
 800d532:	1ad3      	subs	r3, r2, r3
 800d534:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d53e:	b29b      	uxth	r3, r3
 800d540:	2b00      	cmp	r3, #0
 800d542:	f000 80cc 	beq.w	800d6de <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d546:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	f000 80c7 	beq.w	800d6de <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d558:	e853 3f00 	ldrex	r3, [r3]
 800d55c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d560:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d564:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	461a      	mov	r2, r3
 800d56e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d572:	647b      	str	r3, [r7, #68]	; 0x44
 800d574:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d576:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d578:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d57a:	e841 2300 	strex	r3, r2, [r1]
 800d57e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d582:	2b00      	cmp	r3, #0
 800d584:	d1e4      	bne.n	800d550 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	3308      	adds	r3, #8
 800d58c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d590:	e853 3f00 	ldrex	r3, [r3]
 800d594:	623b      	str	r3, [r7, #32]
   return(result);
 800d596:	6a3a      	ldr	r2, [r7, #32]
 800d598:	4b54      	ldr	r3, [pc, #336]	; (800d6ec <HAL_UART_IRQHandler+0x738>)
 800d59a:	4013      	ands	r3, r2
 800d59c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	3308      	adds	r3, #8
 800d5a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d5aa:	633a      	str	r2, [r7, #48]	; 0x30
 800d5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5b2:	e841 2300 	strex	r3, r2, [r1]
 800d5b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1e3      	bne.n	800d586 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2220      	movs	r2, #32
 800d5c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	e853 3f00 	ldrex	r3, [r3]
 800d5de:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f023 0310 	bic.w	r3, r3, #16
 800d5e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d5f4:	61fb      	str	r3, [r7, #28]
 800d5f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f8:	69b9      	ldr	r1, [r7, #24]
 800d5fa:	69fa      	ldr	r2, [r7, #28]
 800d5fc:	e841 2300 	strex	r3, r2, [r1]
 800d600:	617b      	str	r3, [r7, #20]
   return(result);
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d1e4      	bne.n	800d5d2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d60c:	4619      	mov	r1, r3
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 f88c 	bl	800d72c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d614:	e063      	b.n	800d6de <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d61a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00e      	beq.n	800d640 <HAL_UART_IRQHandler+0x68c>
 800d622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d008      	beq.n	800d640 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d636:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f001 fb7c 	bl	800ed36 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d63e:	e051      	b.n	800d6e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d014      	beq.n	800d676 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d64c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d654:	2b00      	cmp	r3, #0
 800d656:	d105      	bne.n	800d664 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d65c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d660:	2b00      	cmp	r3, #0
 800d662:	d008      	beq.n	800d676 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d03a      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	4798      	blx	r3
    }
    return;
 800d674:	e035      	b.n	800d6e2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d67a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d009      	beq.n	800d696 <HAL_UART_IRQHandler+0x6e2>
 800d682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d003      	beq.n	800d696 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f001 fb26 	bl	800ece0 <UART_EndTransmit_IT>
    return;
 800d694:	e026      	b.n	800d6e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d69a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d009      	beq.n	800d6b6 <HAL_UART_IRQHandler+0x702>
 800d6a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d003      	beq.n	800d6b6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f001 fb55 	bl	800ed5e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d6b4:	e016      	b.n	800d6e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d010      	beq.n	800d6e4 <HAL_UART_IRQHandler+0x730>
 800d6c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	da0c      	bge.n	800d6e4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f001 fb3d 	bl	800ed4a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d6d0:	e008      	b.n	800d6e4 <HAL_UART_IRQHandler+0x730>
      return;
 800d6d2:	bf00      	nop
 800d6d4:	e006      	b.n	800d6e4 <HAL_UART_IRQHandler+0x730>
    return;
 800d6d6:	bf00      	nop
 800d6d8:	e004      	b.n	800d6e4 <HAL_UART_IRQHandler+0x730>
      return;
 800d6da:	bf00      	nop
 800d6dc:	e002      	b.n	800d6e4 <HAL_UART_IRQHandler+0x730>
      return;
 800d6de:	bf00      	nop
 800d6e0:	e000      	b.n	800d6e4 <HAL_UART_IRQHandler+0x730>
    return;
 800d6e2:	bf00      	nop
  }
}
 800d6e4:	37e8      	adds	r7, #232	; 0xe8
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	effffffe 	.word	0xeffffffe

0800d6f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d6f8:	bf00      	nop
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d704:	b480      	push	{r7}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d70c:	bf00      	nop
 800d70e:	370c      	adds	r7, #12
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr

0800d718 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d718:	b480      	push	{r7}
 800d71a:	b083      	sub	sp, #12
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d720:	bf00      	nop
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	460b      	mov	r3, r1
 800d736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d738:	bf00      	nop
 800d73a:	370c      	adds	r7, #12
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d748:	b092      	sub	sp, #72	; 0x48
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d74e:	2300      	movs	r3, #0
 800d750:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	689a      	ldr	r2, [r3, #8]
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	691b      	ldr	r3, [r3, #16]
 800d75c:	431a      	orrs	r2, r3
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	695b      	ldr	r3, [r3, #20]
 800d762:	431a      	orrs	r2, r3
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	69db      	ldr	r3, [r3, #28]
 800d768:	4313      	orrs	r3, r2
 800d76a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	4bbe      	ldr	r3, [pc, #760]	; (800da6c <UART_SetConfig+0x328>)
 800d774:	4013      	ands	r3, r2
 800d776:	697a      	ldr	r2, [r7, #20]
 800d778:	6812      	ldr	r2, [r2, #0]
 800d77a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d77c:	430b      	orrs	r3, r1
 800d77e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	68da      	ldr	r2, [r3, #12]
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	430a      	orrs	r2, r1
 800d794:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	699b      	ldr	r3, [r3, #24]
 800d79a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4ab3      	ldr	r2, [pc, #716]	; (800da70 <UART_SetConfig+0x32c>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d004      	beq.n	800d7b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	6a1b      	ldr	r3, [r3, #32]
 800d7aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	689a      	ldr	r2, [r3, #8]
 800d7b6:	4baf      	ldr	r3, [pc, #700]	; (800da74 <UART_SetConfig+0x330>)
 800d7b8:	4013      	ands	r3, r2
 800d7ba:	697a      	ldr	r2, [r7, #20]
 800d7bc:	6812      	ldr	r2, [r2, #0]
 800d7be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d7c0:	430b      	orrs	r3, r1
 800d7c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ca:	f023 010f 	bic.w	r1, r3, #15
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	430a      	orrs	r2, r1
 800d7d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4aa6      	ldr	r2, [pc, #664]	; (800da78 <UART_SetConfig+0x334>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d177      	bne.n	800d8d4 <UART_SetConfig+0x190>
 800d7e4:	4ba5      	ldr	r3, [pc, #660]	; (800da7c <UART_SetConfig+0x338>)
 800d7e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d7ec:	2b28      	cmp	r3, #40	; 0x28
 800d7ee:	d86d      	bhi.n	800d8cc <UART_SetConfig+0x188>
 800d7f0:	a201      	add	r2, pc, #4	; (adr r2, 800d7f8 <UART_SetConfig+0xb4>)
 800d7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7f6:	bf00      	nop
 800d7f8:	0800d89d 	.word	0x0800d89d
 800d7fc:	0800d8cd 	.word	0x0800d8cd
 800d800:	0800d8cd 	.word	0x0800d8cd
 800d804:	0800d8cd 	.word	0x0800d8cd
 800d808:	0800d8cd 	.word	0x0800d8cd
 800d80c:	0800d8cd 	.word	0x0800d8cd
 800d810:	0800d8cd 	.word	0x0800d8cd
 800d814:	0800d8cd 	.word	0x0800d8cd
 800d818:	0800d8a5 	.word	0x0800d8a5
 800d81c:	0800d8cd 	.word	0x0800d8cd
 800d820:	0800d8cd 	.word	0x0800d8cd
 800d824:	0800d8cd 	.word	0x0800d8cd
 800d828:	0800d8cd 	.word	0x0800d8cd
 800d82c:	0800d8cd 	.word	0x0800d8cd
 800d830:	0800d8cd 	.word	0x0800d8cd
 800d834:	0800d8cd 	.word	0x0800d8cd
 800d838:	0800d8ad 	.word	0x0800d8ad
 800d83c:	0800d8cd 	.word	0x0800d8cd
 800d840:	0800d8cd 	.word	0x0800d8cd
 800d844:	0800d8cd 	.word	0x0800d8cd
 800d848:	0800d8cd 	.word	0x0800d8cd
 800d84c:	0800d8cd 	.word	0x0800d8cd
 800d850:	0800d8cd 	.word	0x0800d8cd
 800d854:	0800d8cd 	.word	0x0800d8cd
 800d858:	0800d8b5 	.word	0x0800d8b5
 800d85c:	0800d8cd 	.word	0x0800d8cd
 800d860:	0800d8cd 	.word	0x0800d8cd
 800d864:	0800d8cd 	.word	0x0800d8cd
 800d868:	0800d8cd 	.word	0x0800d8cd
 800d86c:	0800d8cd 	.word	0x0800d8cd
 800d870:	0800d8cd 	.word	0x0800d8cd
 800d874:	0800d8cd 	.word	0x0800d8cd
 800d878:	0800d8bd 	.word	0x0800d8bd
 800d87c:	0800d8cd 	.word	0x0800d8cd
 800d880:	0800d8cd 	.word	0x0800d8cd
 800d884:	0800d8cd 	.word	0x0800d8cd
 800d888:	0800d8cd 	.word	0x0800d8cd
 800d88c:	0800d8cd 	.word	0x0800d8cd
 800d890:	0800d8cd 	.word	0x0800d8cd
 800d894:	0800d8cd 	.word	0x0800d8cd
 800d898:	0800d8c5 	.word	0x0800d8c5
 800d89c:	2301      	movs	r3, #1
 800d89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8a2:	e326      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d8a4:	2304      	movs	r3, #4
 800d8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8aa:	e322      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d8ac:	2308      	movs	r3, #8
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8b2:	e31e      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d8b4:	2310      	movs	r3, #16
 800d8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ba:	e31a      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d8bc:	2320      	movs	r3, #32
 800d8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8c2:	e316      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d8c4:	2340      	movs	r3, #64	; 0x40
 800d8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ca:	e312      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d8cc:	2380      	movs	r3, #128	; 0x80
 800d8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8d2:	e30e      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4a69      	ldr	r2, [pc, #420]	; (800da80 <UART_SetConfig+0x33c>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d130      	bne.n	800d940 <UART_SetConfig+0x1fc>
 800d8de:	4b67      	ldr	r3, [pc, #412]	; (800da7c <UART_SetConfig+0x338>)
 800d8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8e2:	f003 0307 	and.w	r3, r3, #7
 800d8e6:	2b05      	cmp	r3, #5
 800d8e8:	d826      	bhi.n	800d938 <UART_SetConfig+0x1f4>
 800d8ea:	a201      	add	r2, pc, #4	; (adr r2, 800d8f0 <UART_SetConfig+0x1ac>)
 800d8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f0:	0800d909 	.word	0x0800d909
 800d8f4:	0800d911 	.word	0x0800d911
 800d8f8:	0800d919 	.word	0x0800d919
 800d8fc:	0800d921 	.word	0x0800d921
 800d900:	0800d929 	.word	0x0800d929
 800d904:	0800d931 	.word	0x0800d931
 800d908:	2300      	movs	r3, #0
 800d90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d90e:	e2f0      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d910:	2304      	movs	r3, #4
 800d912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d916:	e2ec      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d918:	2308      	movs	r3, #8
 800d91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d91e:	e2e8      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d920:	2310      	movs	r3, #16
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d926:	e2e4      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d928:	2320      	movs	r3, #32
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92e:	e2e0      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d930:	2340      	movs	r3, #64	; 0x40
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d936:	e2dc      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d938:	2380      	movs	r3, #128	; 0x80
 800d93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d93e:	e2d8      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a4f      	ldr	r2, [pc, #316]	; (800da84 <UART_SetConfig+0x340>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d130      	bne.n	800d9ac <UART_SetConfig+0x268>
 800d94a:	4b4c      	ldr	r3, [pc, #304]	; (800da7c <UART_SetConfig+0x338>)
 800d94c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d94e:	f003 0307 	and.w	r3, r3, #7
 800d952:	2b05      	cmp	r3, #5
 800d954:	d826      	bhi.n	800d9a4 <UART_SetConfig+0x260>
 800d956:	a201      	add	r2, pc, #4	; (adr r2, 800d95c <UART_SetConfig+0x218>)
 800d958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d95c:	0800d975 	.word	0x0800d975
 800d960:	0800d97d 	.word	0x0800d97d
 800d964:	0800d985 	.word	0x0800d985
 800d968:	0800d98d 	.word	0x0800d98d
 800d96c:	0800d995 	.word	0x0800d995
 800d970:	0800d99d 	.word	0x0800d99d
 800d974:	2300      	movs	r3, #0
 800d976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d97a:	e2ba      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d97c:	2304      	movs	r3, #4
 800d97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d982:	e2b6      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d984:	2308      	movs	r3, #8
 800d986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d98a:	e2b2      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d98c:	2310      	movs	r3, #16
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d992:	e2ae      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d994:	2320      	movs	r3, #32
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d99a:	e2aa      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d99c:	2340      	movs	r3, #64	; 0x40
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9a2:	e2a6      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d9a4:	2380      	movs	r3, #128	; 0x80
 800d9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9aa:	e2a2      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a35      	ldr	r2, [pc, #212]	; (800da88 <UART_SetConfig+0x344>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d130      	bne.n	800da18 <UART_SetConfig+0x2d4>
 800d9b6:	4b31      	ldr	r3, [pc, #196]	; (800da7c <UART_SetConfig+0x338>)
 800d9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9ba:	f003 0307 	and.w	r3, r3, #7
 800d9be:	2b05      	cmp	r3, #5
 800d9c0:	d826      	bhi.n	800da10 <UART_SetConfig+0x2cc>
 800d9c2:	a201      	add	r2, pc, #4	; (adr r2, 800d9c8 <UART_SetConfig+0x284>)
 800d9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9c8:	0800d9e1 	.word	0x0800d9e1
 800d9cc:	0800d9e9 	.word	0x0800d9e9
 800d9d0:	0800d9f1 	.word	0x0800d9f1
 800d9d4:	0800d9f9 	.word	0x0800d9f9
 800d9d8:	0800da01 	.word	0x0800da01
 800d9dc:	0800da09 	.word	0x0800da09
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9e6:	e284      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d9e8:	2304      	movs	r3, #4
 800d9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ee:	e280      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d9f0:	2308      	movs	r3, #8
 800d9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f6:	e27c      	b.n	800def2 <UART_SetConfig+0x7ae>
 800d9f8:	2310      	movs	r3, #16
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fe:	e278      	b.n	800def2 <UART_SetConfig+0x7ae>
 800da00:	2320      	movs	r3, #32
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da06:	e274      	b.n	800def2 <UART_SetConfig+0x7ae>
 800da08:	2340      	movs	r3, #64	; 0x40
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0e:	e270      	b.n	800def2 <UART_SetConfig+0x7ae>
 800da10:	2380      	movs	r3, #128	; 0x80
 800da12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da16:	e26c      	b.n	800def2 <UART_SetConfig+0x7ae>
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a1b      	ldr	r2, [pc, #108]	; (800da8c <UART_SetConfig+0x348>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d142      	bne.n	800daa8 <UART_SetConfig+0x364>
 800da22:	4b16      	ldr	r3, [pc, #88]	; (800da7c <UART_SetConfig+0x338>)
 800da24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da26:	f003 0307 	and.w	r3, r3, #7
 800da2a:	2b05      	cmp	r3, #5
 800da2c:	d838      	bhi.n	800daa0 <UART_SetConfig+0x35c>
 800da2e:	a201      	add	r2, pc, #4	; (adr r2, 800da34 <UART_SetConfig+0x2f0>)
 800da30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da34:	0800da4d 	.word	0x0800da4d
 800da38:	0800da55 	.word	0x0800da55
 800da3c:	0800da5d 	.word	0x0800da5d
 800da40:	0800da65 	.word	0x0800da65
 800da44:	0800da91 	.word	0x0800da91
 800da48:	0800da99 	.word	0x0800da99
 800da4c:	2300      	movs	r3, #0
 800da4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da52:	e24e      	b.n	800def2 <UART_SetConfig+0x7ae>
 800da54:	2304      	movs	r3, #4
 800da56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5a:	e24a      	b.n	800def2 <UART_SetConfig+0x7ae>
 800da5c:	2308      	movs	r3, #8
 800da5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da62:	e246      	b.n	800def2 <UART_SetConfig+0x7ae>
 800da64:	2310      	movs	r3, #16
 800da66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6a:	e242      	b.n	800def2 <UART_SetConfig+0x7ae>
 800da6c:	cfff69f3 	.word	0xcfff69f3
 800da70:	58000c00 	.word	0x58000c00
 800da74:	11fff4ff 	.word	0x11fff4ff
 800da78:	40011000 	.word	0x40011000
 800da7c:	58024400 	.word	0x58024400
 800da80:	40004400 	.word	0x40004400
 800da84:	40004800 	.word	0x40004800
 800da88:	40004c00 	.word	0x40004c00
 800da8c:	40005000 	.word	0x40005000
 800da90:	2320      	movs	r3, #32
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da96:	e22c      	b.n	800def2 <UART_SetConfig+0x7ae>
 800da98:	2340      	movs	r3, #64	; 0x40
 800da9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da9e:	e228      	b.n	800def2 <UART_SetConfig+0x7ae>
 800daa0:	2380      	movs	r3, #128	; 0x80
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daa6:	e224      	b.n	800def2 <UART_SetConfig+0x7ae>
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4ab1      	ldr	r2, [pc, #708]	; (800dd74 <UART_SetConfig+0x630>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d176      	bne.n	800dba0 <UART_SetConfig+0x45c>
 800dab2:	4bb1      	ldr	r3, [pc, #708]	; (800dd78 <UART_SetConfig+0x634>)
 800dab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800daba:	2b28      	cmp	r3, #40	; 0x28
 800dabc:	d86c      	bhi.n	800db98 <UART_SetConfig+0x454>
 800dabe:	a201      	add	r2, pc, #4	; (adr r2, 800dac4 <UART_SetConfig+0x380>)
 800dac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac4:	0800db69 	.word	0x0800db69
 800dac8:	0800db99 	.word	0x0800db99
 800dacc:	0800db99 	.word	0x0800db99
 800dad0:	0800db99 	.word	0x0800db99
 800dad4:	0800db99 	.word	0x0800db99
 800dad8:	0800db99 	.word	0x0800db99
 800dadc:	0800db99 	.word	0x0800db99
 800dae0:	0800db99 	.word	0x0800db99
 800dae4:	0800db71 	.word	0x0800db71
 800dae8:	0800db99 	.word	0x0800db99
 800daec:	0800db99 	.word	0x0800db99
 800daf0:	0800db99 	.word	0x0800db99
 800daf4:	0800db99 	.word	0x0800db99
 800daf8:	0800db99 	.word	0x0800db99
 800dafc:	0800db99 	.word	0x0800db99
 800db00:	0800db99 	.word	0x0800db99
 800db04:	0800db79 	.word	0x0800db79
 800db08:	0800db99 	.word	0x0800db99
 800db0c:	0800db99 	.word	0x0800db99
 800db10:	0800db99 	.word	0x0800db99
 800db14:	0800db99 	.word	0x0800db99
 800db18:	0800db99 	.word	0x0800db99
 800db1c:	0800db99 	.word	0x0800db99
 800db20:	0800db99 	.word	0x0800db99
 800db24:	0800db81 	.word	0x0800db81
 800db28:	0800db99 	.word	0x0800db99
 800db2c:	0800db99 	.word	0x0800db99
 800db30:	0800db99 	.word	0x0800db99
 800db34:	0800db99 	.word	0x0800db99
 800db38:	0800db99 	.word	0x0800db99
 800db3c:	0800db99 	.word	0x0800db99
 800db40:	0800db99 	.word	0x0800db99
 800db44:	0800db89 	.word	0x0800db89
 800db48:	0800db99 	.word	0x0800db99
 800db4c:	0800db99 	.word	0x0800db99
 800db50:	0800db99 	.word	0x0800db99
 800db54:	0800db99 	.word	0x0800db99
 800db58:	0800db99 	.word	0x0800db99
 800db5c:	0800db99 	.word	0x0800db99
 800db60:	0800db99 	.word	0x0800db99
 800db64:	0800db91 	.word	0x0800db91
 800db68:	2301      	movs	r3, #1
 800db6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db6e:	e1c0      	b.n	800def2 <UART_SetConfig+0x7ae>
 800db70:	2304      	movs	r3, #4
 800db72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db76:	e1bc      	b.n	800def2 <UART_SetConfig+0x7ae>
 800db78:	2308      	movs	r3, #8
 800db7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db7e:	e1b8      	b.n	800def2 <UART_SetConfig+0x7ae>
 800db80:	2310      	movs	r3, #16
 800db82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db86:	e1b4      	b.n	800def2 <UART_SetConfig+0x7ae>
 800db88:	2320      	movs	r3, #32
 800db8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8e:	e1b0      	b.n	800def2 <UART_SetConfig+0x7ae>
 800db90:	2340      	movs	r3, #64	; 0x40
 800db92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db96:	e1ac      	b.n	800def2 <UART_SetConfig+0x7ae>
 800db98:	2380      	movs	r3, #128	; 0x80
 800db9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9e:	e1a8      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a75      	ldr	r2, [pc, #468]	; (800dd7c <UART_SetConfig+0x638>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d130      	bne.n	800dc0c <UART_SetConfig+0x4c8>
 800dbaa:	4b73      	ldr	r3, [pc, #460]	; (800dd78 <UART_SetConfig+0x634>)
 800dbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbae:	f003 0307 	and.w	r3, r3, #7
 800dbb2:	2b05      	cmp	r3, #5
 800dbb4:	d826      	bhi.n	800dc04 <UART_SetConfig+0x4c0>
 800dbb6:	a201      	add	r2, pc, #4	; (adr r2, 800dbbc <UART_SetConfig+0x478>)
 800dbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbbc:	0800dbd5 	.word	0x0800dbd5
 800dbc0:	0800dbdd 	.word	0x0800dbdd
 800dbc4:	0800dbe5 	.word	0x0800dbe5
 800dbc8:	0800dbed 	.word	0x0800dbed
 800dbcc:	0800dbf5 	.word	0x0800dbf5
 800dbd0:	0800dbfd 	.word	0x0800dbfd
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbda:	e18a      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dbdc:	2304      	movs	r3, #4
 800dbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe2:	e186      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dbe4:	2308      	movs	r3, #8
 800dbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbea:	e182      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dbec:	2310      	movs	r3, #16
 800dbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf2:	e17e      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dbf4:	2320      	movs	r3, #32
 800dbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfa:	e17a      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dbfc:	2340      	movs	r3, #64	; 0x40
 800dbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc02:	e176      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dc04:	2380      	movs	r3, #128	; 0x80
 800dc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0a:	e172      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a5b      	ldr	r2, [pc, #364]	; (800dd80 <UART_SetConfig+0x63c>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d130      	bne.n	800dc78 <UART_SetConfig+0x534>
 800dc16:	4b58      	ldr	r3, [pc, #352]	; (800dd78 <UART_SetConfig+0x634>)
 800dc18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc1a:	f003 0307 	and.w	r3, r3, #7
 800dc1e:	2b05      	cmp	r3, #5
 800dc20:	d826      	bhi.n	800dc70 <UART_SetConfig+0x52c>
 800dc22:	a201      	add	r2, pc, #4	; (adr r2, 800dc28 <UART_SetConfig+0x4e4>)
 800dc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc28:	0800dc41 	.word	0x0800dc41
 800dc2c:	0800dc49 	.word	0x0800dc49
 800dc30:	0800dc51 	.word	0x0800dc51
 800dc34:	0800dc59 	.word	0x0800dc59
 800dc38:	0800dc61 	.word	0x0800dc61
 800dc3c:	0800dc69 	.word	0x0800dc69
 800dc40:	2300      	movs	r3, #0
 800dc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc46:	e154      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dc48:	2304      	movs	r3, #4
 800dc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4e:	e150      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dc50:	2308      	movs	r3, #8
 800dc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc56:	e14c      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dc58:	2310      	movs	r3, #16
 800dc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5e:	e148      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dc60:	2320      	movs	r3, #32
 800dc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc66:	e144      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dc68:	2340      	movs	r3, #64	; 0x40
 800dc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6e:	e140      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dc70:	2380      	movs	r3, #128	; 0x80
 800dc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc76:	e13c      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a41      	ldr	r2, [pc, #260]	; (800dd84 <UART_SetConfig+0x640>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	f040 8082 	bne.w	800dd88 <UART_SetConfig+0x644>
 800dc84:	4b3c      	ldr	r3, [pc, #240]	; (800dd78 <UART_SetConfig+0x634>)
 800dc86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc8c:	2b28      	cmp	r3, #40	; 0x28
 800dc8e:	d86d      	bhi.n	800dd6c <UART_SetConfig+0x628>
 800dc90:	a201      	add	r2, pc, #4	; (adr r2, 800dc98 <UART_SetConfig+0x554>)
 800dc92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc96:	bf00      	nop
 800dc98:	0800dd3d 	.word	0x0800dd3d
 800dc9c:	0800dd6d 	.word	0x0800dd6d
 800dca0:	0800dd6d 	.word	0x0800dd6d
 800dca4:	0800dd6d 	.word	0x0800dd6d
 800dca8:	0800dd6d 	.word	0x0800dd6d
 800dcac:	0800dd6d 	.word	0x0800dd6d
 800dcb0:	0800dd6d 	.word	0x0800dd6d
 800dcb4:	0800dd6d 	.word	0x0800dd6d
 800dcb8:	0800dd45 	.word	0x0800dd45
 800dcbc:	0800dd6d 	.word	0x0800dd6d
 800dcc0:	0800dd6d 	.word	0x0800dd6d
 800dcc4:	0800dd6d 	.word	0x0800dd6d
 800dcc8:	0800dd6d 	.word	0x0800dd6d
 800dccc:	0800dd6d 	.word	0x0800dd6d
 800dcd0:	0800dd6d 	.word	0x0800dd6d
 800dcd4:	0800dd6d 	.word	0x0800dd6d
 800dcd8:	0800dd4d 	.word	0x0800dd4d
 800dcdc:	0800dd6d 	.word	0x0800dd6d
 800dce0:	0800dd6d 	.word	0x0800dd6d
 800dce4:	0800dd6d 	.word	0x0800dd6d
 800dce8:	0800dd6d 	.word	0x0800dd6d
 800dcec:	0800dd6d 	.word	0x0800dd6d
 800dcf0:	0800dd6d 	.word	0x0800dd6d
 800dcf4:	0800dd6d 	.word	0x0800dd6d
 800dcf8:	0800dd55 	.word	0x0800dd55
 800dcfc:	0800dd6d 	.word	0x0800dd6d
 800dd00:	0800dd6d 	.word	0x0800dd6d
 800dd04:	0800dd6d 	.word	0x0800dd6d
 800dd08:	0800dd6d 	.word	0x0800dd6d
 800dd0c:	0800dd6d 	.word	0x0800dd6d
 800dd10:	0800dd6d 	.word	0x0800dd6d
 800dd14:	0800dd6d 	.word	0x0800dd6d
 800dd18:	0800dd5d 	.word	0x0800dd5d
 800dd1c:	0800dd6d 	.word	0x0800dd6d
 800dd20:	0800dd6d 	.word	0x0800dd6d
 800dd24:	0800dd6d 	.word	0x0800dd6d
 800dd28:	0800dd6d 	.word	0x0800dd6d
 800dd2c:	0800dd6d 	.word	0x0800dd6d
 800dd30:	0800dd6d 	.word	0x0800dd6d
 800dd34:	0800dd6d 	.word	0x0800dd6d
 800dd38:	0800dd65 	.word	0x0800dd65
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd42:	e0d6      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dd44:	2304      	movs	r3, #4
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4a:	e0d2      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dd4c:	2308      	movs	r3, #8
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd52:	e0ce      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dd54:	2310      	movs	r3, #16
 800dd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5a:	e0ca      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dd5c:	2320      	movs	r3, #32
 800dd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd62:	e0c6      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dd64:	2340      	movs	r3, #64	; 0x40
 800dd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6a:	e0c2      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dd6c:	2380      	movs	r3, #128	; 0x80
 800dd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd72:	e0be      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dd74:	40011400 	.word	0x40011400
 800dd78:	58024400 	.word	0x58024400
 800dd7c:	40007800 	.word	0x40007800
 800dd80:	40007c00 	.word	0x40007c00
 800dd84:	40011800 	.word	0x40011800
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4aad      	ldr	r2, [pc, #692]	; (800e044 <UART_SetConfig+0x900>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d176      	bne.n	800de80 <UART_SetConfig+0x73c>
 800dd92:	4bad      	ldr	r3, [pc, #692]	; (800e048 <UART_SetConfig+0x904>)
 800dd94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd9a:	2b28      	cmp	r3, #40	; 0x28
 800dd9c:	d86c      	bhi.n	800de78 <UART_SetConfig+0x734>
 800dd9e:	a201      	add	r2, pc, #4	; (adr r2, 800dda4 <UART_SetConfig+0x660>)
 800dda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda4:	0800de49 	.word	0x0800de49
 800dda8:	0800de79 	.word	0x0800de79
 800ddac:	0800de79 	.word	0x0800de79
 800ddb0:	0800de79 	.word	0x0800de79
 800ddb4:	0800de79 	.word	0x0800de79
 800ddb8:	0800de79 	.word	0x0800de79
 800ddbc:	0800de79 	.word	0x0800de79
 800ddc0:	0800de79 	.word	0x0800de79
 800ddc4:	0800de51 	.word	0x0800de51
 800ddc8:	0800de79 	.word	0x0800de79
 800ddcc:	0800de79 	.word	0x0800de79
 800ddd0:	0800de79 	.word	0x0800de79
 800ddd4:	0800de79 	.word	0x0800de79
 800ddd8:	0800de79 	.word	0x0800de79
 800dddc:	0800de79 	.word	0x0800de79
 800dde0:	0800de79 	.word	0x0800de79
 800dde4:	0800de59 	.word	0x0800de59
 800dde8:	0800de79 	.word	0x0800de79
 800ddec:	0800de79 	.word	0x0800de79
 800ddf0:	0800de79 	.word	0x0800de79
 800ddf4:	0800de79 	.word	0x0800de79
 800ddf8:	0800de79 	.word	0x0800de79
 800ddfc:	0800de79 	.word	0x0800de79
 800de00:	0800de79 	.word	0x0800de79
 800de04:	0800de61 	.word	0x0800de61
 800de08:	0800de79 	.word	0x0800de79
 800de0c:	0800de79 	.word	0x0800de79
 800de10:	0800de79 	.word	0x0800de79
 800de14:	0800de79 	.word	0x0800de79
 800de18:	0800de79 	.word	0x0800de79
 800de1c:	0800de79 	.word	0x0800de79
 800de20:	0800de79 	.word	0x0800de79
 800de24:	0800de69 	.word	0x0800de69
 800de28:	0800de79 	.word	0x0800de79
 800de2c:	0800de79 	.word	0x0800de79
 800de30:	0800de79 	.word	0x0800de79
 800de34:	0800de79 	.word	0x0800de79
 800de38:	0800de79 	.word	0x0800de79
 800de3c:	0800de79 	.word	0x0800de79
 800de40:	0800de79 	.word	0x0800de79
 800de44:	0800de71 	.word	0x0800de71
 800de48:	2301      	movs	r3, #1
 800de4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4e:	e050      	b.n	800def2 <UART_SetConfig+0x7ae>
 800de50:	2304      	movs	r3, #4
 800de52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de56:	e04c      	b.n	800def2 <UART_SetConfig+0x7ae>
 800de58:	2308      	movs	r3, #8
 800de5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5e:	e048      	b.n	800def2 <UART_SetConfig+0x7ae>
 800de60:	2310      	movs	r3, #16
 800de62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de66:	e044      	b.n	800def2 <UART_SetConfig+0x7ae>
 800de68:	2320      	movs	r3, #32
 800de6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6e:	e040      	b.n	800def2 <UART_SetConfig+0x7ae>
 800de70:	2340      	movs	r3, #64	; 0x40
 800de72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de76:	e03c      	b.n	800def2 <UART_SetConfig+0x7ae>
 800de78:	2380      	movs	r3, #128	; 0x80
 800de7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de7e:	e038      	b.n	800def2 <UART_SetConfig+0x7ae>
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4a71      	ldr	r2, [pc, #452]	; (800e04c <UART_SetConfig+0x908>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d130      	bne.n	800deec <UART_SetConfig+0x7a8>
 800de8a:	4b6f      	ldr	r3, [pc, #444]	; (800e048 <UART_SetConfig+0x904>)
 800de8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de8e:	f003 0307 	and.w	r3, r3, #7
 800de92:	2b05      	cmp	r3, #5
 800de94:	d826      	bhi.n	800dee4 <UART_SetConfig+0x7a0>
 800de96:	a201      	add	r2, pc, #4	; (adr r2, 800de9c <UART_SetConfig+0x758>)
 800de98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de9c:	0800deb5 	.word	0x0800deb5
 800dea0:	0800debd 	.word	0x0800debd
 800dea4:	0800dec5 	.word	0x0800dec5
 800dea8:	0800decd 	.word	0x0800decd
 800deac:	0800ded5 	.word	0x0800ded5
 800deb0:	0800dedd 	.word	0x0800dedd
 800deb4:	2302      	movs	r3, #2
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deba:	e01a      	b.n	800def2 <UART_SetConfig+0x7ae>
 800debc:	2304      	movs	r3, #4
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec2:	e016      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dec4:	2308      	movs	r3, #8
 800dec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deca:	e012      	b.n	800def2 <UART_SetConfig+0x7ae>
 800decc:	2310      	movs	r3, #16
 800dece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded2:	e00e      	b.n	800def2 <UART_SetConfig+0x7ae>
 800ded4:	2320      	movs	r3, #32
 800ded6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deda:	e00a      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dedc:	2340      	movs	r3, #64	; 0x40
 800dede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dee2:	e006      	b.n	800def2 <UART_SetConfig+0x7ae>
 800dee4:	2380      	movs	r3, #128	; 0x80
 800dee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deea:	e002      	b.n	800def2 <UART_SetConfig+0x7ae>
 800deec:	2380      	movs	r3, #128	; 0x80
 800deee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4a55      	ldr	r2, [pc, #340]	; (800e04c <UART_SetConfig+0x908>)
 800def8:	4293      	cmp	r3, r2
 800defa:	f040 80f8 	bne.w	800e0ee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800defe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800df02:	2b20      	cmp	r3, #32
 800df04:	dc46      	bgt.n	800df94 <UART_SetConfig+0x850>
 800df06:	2b02      	cmp	r3, #2
 800df08:	db75      	blt.n	800dff6 <UART_SetConfig+0x8b2>
 800df0a:	3b02      	subs	r3, #2
 800df0c:	2b1e      	cmp	r3, #30
 800df0e:	d872      	bhi.n	800dff6 <UART_SetConfig+0x8b2>
 800df10:	a201      	add	r2, pc, #4	; (adr r2, 800df18 <UART_SetConfig+0x7d4>)
 800df12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df16:	bf00      	nop
 800df18:	0800df9b 	.word	0x0800df9b
 800df1c:	0800dff7 	.word	0x0800dff7
 800df20:	0800dfa3 	.word	0x0800dfa3
 800df24:	0800dff7 	.word	0x0800dff7
 800df28:	0800dff7 	.word	0x0800dff7
 800df2c:	0800dff7 	.word	0x0800dff7
 800df30:	0800dfb3 	.word	0x0800dfb3
 800df34:	0800dff7 	.word	0x0800dff7
 800df38:	0800dff7 	.word	0x0800dff7
 800df3c:	0800dff7 	.word	0x0800dff7
 800df40:	0800dff7 	.word	0x0800dff7
 800df44:	0800dff7 	.word	0x0800dff7
 800df48:	0800dff7 	.word	0x0800dff7
 800df4c:	0800dff7 	.word	0x0800dff7
 800df50:	0800dfc3 	.word	0x0800dfc3
 800df54:	0800dff7 	.word	0x0800dff7
 800df58:	0800dff7 	.word	0x0800dff7
 800df5c:	0800dff7 	.word	0x0800dff7
 800df60:	0800dff7 	.word	0x0800dff7
 800df64:	0800dff7 	.word	0x0800dff7
 800df68:	0800dff7 	.word	0x0800dff7
 800df6c:	0800dff7 	.word	0x0800dff7
 800df70:	0800dff7 	.word	0x0800dff7
 800df74:	0800dff7 	.word	0x0800dff7
 800df78:	0800dff7 	.word	0x0800dff7
 800df7c:	0800dff7 	.word	0x0800dff7
 800df80:	0800dff7 	.word	0x0800dff7
 800df84:	0800dff7 	.word	0x0800dff7
 800df88:	0800dff7 	.word	0x0800dff7
 800df8c:	0800dff7 	.word	0x0800dff7
 800df90:	0800dfe9 	.word	0x0800dfe9
 800df94:	2b40      	cmp	r3, #64	; 0x40
 800df96:	d02a      	beq.n	800dfee <UART_SetConfig+0x8aa>
 800df98:	e02d      	b.n	800dff6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800df9a:	f7fc fde3 	bl	800ab64 <HAL_RCCEx_GetD3PCLK1Freq>
 800df9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dfa0:	e02f      	b.n	800e002 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fc fdf2 	bl	800ab90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfb0:	e027      	b.n	800e002 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dfb2:	f107 0318 	add.w	r3, r7, #24
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7fc ff3e 	bl	800ae38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfc0:	e01f      	b.n	800e002 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfc2:	4b21      	ldr	r3, [pc, #132]	; (800e048 <UART_SetConfig+0x904>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f003 0320 	and.w	r3, r3, #32
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d009      	beq.n	800dfe2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dfce:	4b1e      	ldr	r3, [pc, #120]	; (800e048 <UART_SetConfig+0x904>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	08db      	lsrs	r3, r3, #3
 800dfd4:	f003 0303 	and.w	r3, r3, #3
 800dfd8:	4a1d      	ldr	r2, [pc, #116]	; (800e050 <UART_SetConfig+0x90c>)
 800dfda:	fa22 f303 	lsr.w	r3, r2, r3
 800dfde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dfe0:	e00f      	b.n	800e002 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dfe2:	4b1b      	ldr	r3, [pc, #108]	; (800e050 <UART_SetConfig+0x90c>)
 800dfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfe6:	e00c      	b.n	800e002 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dfe8:	4b1a      	ldr	r3, [pc, #104]	; (800e054 <UART_SetConfig+0x910>)
 800dfea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfec:	e009      	b.n	800e002 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dff4:	e005      	b.n	800e002 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dff6:	2300      	movs	r3, #0
 800dff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dffa:	2301      	movs	r3, #1
 800dffc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e000:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e004:	2b00      	cmp	r3, #0
 800e006:	f000 81ee 	beq.w	800e3e6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e00e:	4a12      	ldr	r2, [pc, #72]	; (800e058 <UART_SetConfig+0x914>)
 800e010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e014:	461a      	mov	r2, r3
 800e016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e018:	fbb3 f3f2 	udiv	r3, r3, r2
 800e01c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	685a      	ldr	r2, [r3, #4]
 800e022:	4613      	mov	r3, r2
 800e024:	005b      	lsls	r3, r3, #1
 800e026:	4413      	add	r3, r2
 800e028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d305      	bcc.n	800e03a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e036:	429a      	cmp	r2, r3
 800e038:	d910      	bls.n	800e05c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e03a:	2301      	movs	r3, #1
 800e03c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e040:	e1d1      	b.n	800e3e6 <UART_SetConfig+0xca2>
 800e042:	bf00      	nop
 800e044:	40011c00 	.word	0x40011c00
 800e048:	58024400 	.word	0x58024400
 800e04c:	58000c00 	.word	0x58000c00
 800e050:	03d09000 	.word	0x03d09000
 800e054:	003d0900 	.word	0x003d0900
 800e058:	0800f68c 	.word	0x0800f68c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e05e:	2200      	movs	r2, #0
 800e060:	60bb      	str	r3, [r7, #8]
 800e062:	60fa      	str	r2, [r7, #12]
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e068:	4ac0      	ldr	r2, [pc, #768]	; (800e36c <UART_SetConfig+0xc28>)
 800e06a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e06e:	b29b      	uxth	r3, r3
 800e070:	2200      	movs	r2, #0
 800e072:	603b      	str	r3, [r7, #0]
 800e074:	607a      	str	r2, [r7, #4]
 800e076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e07a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e07e:	f7f2 f94f 	bl	8000320 <__aeabi_uldivmod>
 800e082:	4602      	mov	r2, r0
 800e084:	460b      	mov	r3, r1
 800e086:	4610      	mov	r0, r2
 800e088:	4619      	mov	r1, r3
 800e08a:	f04f 0200 	mov.w	r2, #0
 800e08e:	f04f 0300 	mov.w	r3, #0
 800e092:	020b      	lsls	r3, r1, #8
 800e094:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e098:	0202      	lsls	r2, r0, #8
 800e09a:	6979      	ldr	r1, [r7, #20]
 800e09c:	6849      	ldr	r1, [r1, #4]
 800e09e:	0849      	lsrs	r1, r1, #1
 800e0a0:	2000      	movs	r0, #0
 800e0a2:	460c      	mov	r4, r1
 800e0a4:	4605      	mov	r5, r0
 800e0a6:	eb12 0804 	adds.w	r8, r2, r4
 800e0aa:	eb43 0905 	adc.w	r9, r3, r5
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	469a      	mov	sl, r3
 800e0b6:	4693      	mov	fp, r2
 800e0b8:	4652      	mov	r2, sl
 800e0ba:	465b      	mov	r3, fp
 800e0bc:	4640      	mov	r0, r8
 800e0be:	4649      	mov	r1, r9
 800e0c0:	f7f2 f92e 	bl	8000320 <__aeabi_uldivmod>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	4613      	mov	r3, r2
 800e0ca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e0d2:	d308      	bcc.n	800e0e6 <UART_SetConfig+0x9a2>
 800e0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0da:	d204      	bcs.n	800e0e6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0e2:	60da      	str	r2, [r3, #12]
 800e0e4:	e17f      	b.n	800e3e6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e0ec:	e17b      	b.n	800e3e6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	69db      	ldr	r3, [r3, #28]
 800e0f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0f6:	f040 80bd 	bne.w	800e274 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e0fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e0fe:	2b20      	cmp	r3, #32
 800e100:	dc48      	bgt.n	800e194 <UART_SetConfig+0xa50>
 800e102:	2b00      	cmp	r3, #0
 800e104:	db7b      	blt.n	800e1fe <UART_SetConfig+0xaba>
 800e106:	2b20      	cmp	r3, #32
 800e108:	d879      	bhi.n	800e1fe <UART_SetConfig+0xaba>
 800e10a:	a201      	add	r2, pc, #4	; (adr r2, 800e110 <UART_SetConfig+0x9cc>)
 800e10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e110:	0800e19b 	.word	0x0800e19b
 800e114:	0800e1a3 	.word	0x0800e1a3
 800e118:	0800e1ff 	.word	0x0800e1ff
 800e11c:	0800e1ff 	.word	0x0800e1ff
 800e120:	0800e1ab 	.word	0x0800e1ab
 800e124:	0800e1ff 	.word	0x0800e1ff
 800e128:	0800e1ff 	.word	0x0800e1ff
 800e12c:	0800e1ff 	.word	0x0800e1ff
 800e130:	0800e1bb 	.word	0x0800e1bb
 800e134:	0800e1ff 	.word	0x0800e1ff
 800e138:	0800e1ff 	.word	0x0800e1ff
 800e13c:	0800e1ff 	.word	0x0800e1ff
 800e140:	0800e1ff 	.word	0x0800e1ff
 800e144:	0800e1ff 	.word	0x0800e1ff
 800e148:	0800e1ff 	.word	0x0800e1ff
 800e14c:	0800e1ff 	.word	0x0800e1ff
 800e150:	0800e1cb 	.word	0x0800e1cb
 800e154:	0800e1ff 	.word	0x0800e1ff
 800e158:	0800e1ff 	.word	0x0800e1ff
 800e15c:	0800e1ff 	.word	0x0800e1ff
 800e160:	0800e1ff 	.word	0x0800e1ff
 800e164:	0800e1ff 	.word	0x0800e1ff
 800e168:	0800e1ff 	.word	0x0800e1ff
 800e16c:	0800e1ff 	.word	0x0800e1ff
 800e170:	0800e1ff 	.word	0x0800e1ff
 800e174:	0800e1ff 	.word	0x0800e1ff
 800e178:	0800e1ff 	.word	0x0800e1ff
 800e17c:	0800e1ff 	.word	0x0800e1ff
 800e180:	0800e1ff 	.word	0x0800e1ff
 800e184:	0800e1ff 	.word	0x0800e1ff
 800e188:	0800e1ff 	.word	0x0800e1ff
 800e18c:	0800e1ff 	.word	0x0800e1ff
 800e190:	0800e1f1 	.word	0x0800e1f1
 800e194:	2b40      	cmp	r3, #64	; 0x40
 800e196:	d02e      	beq.n	800e1f6 <UART_SetConfig+0xab2>
 800e198:	e031      	b.n	800e1fe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e19a:	f7fb fdbd 	bl	8009d18 <HAL_RCC_GetPCLK1Freq>
 800e19e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1a0:	e033      	b.n	800e20a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1a2:	f7fb fdcf 	bl	8009d44 <HAL_RCC_GetPCLK2Freq>
 800e1a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1a8:	e02f      	b.n	800e20a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7fc fcee 	bl	800ab90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1b8:	e027      	b.n	800e20a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1ba:	f107 0318 	add.w	r3, r7, #24
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7fc fe3a 	bl	800ae38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1c8:	e01f      	b.n	800e20a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1ca:	4b69      	ldr	r3, [pc, #420]	; (800e370 <UART_SetConfig+0xc2c>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f003 0320 	and.w	r3, r3, #32
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d009      	beq.n	800e1ea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1d6:	4b66      	ldr	r3, [pc, #408]	; (800e370 <UART_SetConfig+0xc2c>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	08db      	lsrs	r3, r3, #3
 800e1dc:	f003 0303 	and.w	r3, r3, #3
 800e1e0:	4a64      	ldr	r2, [pc, #400]	; (800e374 <UART_SetConfig+0xc30>)
 800e1e2:	fa22 f303 	lsr.w	r3, r2, r3
 800e1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1e8:	e00f      	b.n	800e20a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e1ea:	4b62      	ldr	r3, [pc, #392]	; (800e374 <UART_SetConfig+0xc30>)
 800e1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1ee:	e00c      	b.n	800e20a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e1f0:	4b61      	ldr	r3, [pc, #388]	; (800e378 <UART_SetConfig+0xc34>)
 800e1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1f4:	e009      	b.n	800e20a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1fc:	e005      	b.n	800e20a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e1fe:	2300      	movs	r3, #0
 800e200:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e202:	2301      	movs	r3, #1
 800e204:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e208:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f000 80ea 	beq.w	800e3e6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e216:	4a55      	ldr	r2, [pc, #340]	; (800e36c <UART_SetConfig+0xc28>)
 800e218:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e21c:	461a      	mov	r2, r3
 800e21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e220:	fbb3 f3f2 	udiv	r3, r3, r2
 800e224:	005a      	lsls	r2, r3, #1
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	085b      	lsrs	r3, r3, #1
 800e22c:	441a      	add	r2, r3
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	fbb2 f3f3 	udiv	r3, r2, r3
 800e236:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23a:	2b0f      	cmp	r3, #15
 800e23c:	d916      	bls.n	800e26c <UART_SetConfig+0xb28>
 800e23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e244:	d212      	bcs.n	800e26c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e248:	b29b      	uxth	r3, r3
 800e24a:	f023 030f 	bic.w	r3, r3, #15
 800e24e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e252:	085b      	lsrs	r3, r3, #1
 800e254:	b29b      	uxth	r3, r3
 800e256:	f003 0307 	and.w	r3, r3, #7
 800e25a:	b29a      	uxth	r2, r3
 800e25c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e25e:	4313      	orrs	r3, r2
 800e260:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e268:	60da      	str	r2, [r3, #12]
 800e26a:	e0bc      	b.n	800e3e6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e272:	e0b8      	b.n	800e3e6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e274:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e278:	2b20      	cmp	r3, #32
 800e27a:	dc4b      	bgt.n	800e314 <UART_SetConfig+0xbd0>
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f2c0 8087 	blt.w	800e390 <UART_SetConfig+0xc4c>
 800e282:	2b20      	cmp	r3, #32
 800e284:	f200 8084 	bhi.w	800e390 <UART_SetConfig+0xc4c>
 800e288:	a201      	add	r2, pc, #4	; (adr r2, 800e290 <UART_SetConfig+0xb4c>)
 800e28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e28e:	bf00      	nop
 800e290:	0800e31b 	.word	0x0800e31b
 800e294:	0800e323 	.word	0x0800e323
 800e298:	0800e391 	.word	0x0800e391
 800e29c:	0800e391 	.word	0x0800e391
 800e2a0:	0800e32b 	.word	0x0800e32b
 800e2a4:	0800e391 	.word	0x0800e391
 800e2a8:	0800e391 	.word	0x0800e391
 800e2ac:	0800e391 	.word	0x0800e391
 800e2b0:	0800e33b 	.word	0x0800e33b
 800e2b4:	0800e391 	.word	0x0800e391
 800e2b8:	0800e391 	.word	0x0800e391
 800e2bc:	0800e391 	.word	0x0800e391
 800e2c0:	0800e391 	.word	0x0800e391
 800e2c4:	0800e391 	.word	0x0800e391
 800e2c8:	0800e391 	.word	0x0800e391
 800e2cc:	0800e391 	.word	0x0800e391
 800e2d0:	0800e34b 	.word	0x0800e34b
 800e2d4:	0800e391 	.word	0x0800e391
 800e2d8:	0800e391 	.word	0x0800e391
 800e2dc:	0800e391 	.word	0x0800e391
 800e2e0:	0800e391 	.word	0x0800e391
 800e2e4:	0800e391 	.word	0x0800e391
 800e2e8:	0800e391 	.word	0x0800e391
 800e2ec:	0800e391 	.word	0x0800e391
 800e2f0:	0800e391 	.word	0x0800e391
 800e2f4:	0800e391 	.word	0x0800e391
 800e2f8:	0800e391 	.word	0x0800e391
 800e2fc:	0800e391 	.word	0x0800e391
 800e300:	0800e391 	.word	0x0800e391
 800e304:	0800e391 	.word	0x0800e391
 800e308:	0800e391 	.word	0x0800e391
 800e30c:	0800e391 	.word	0x0800e391
 800e310:	0800e383 	.word	0x0800e383
 800e314:	2b40      	cmp	r3, #64	; 0x40
 800e316:	d037      	beq.n	800e388 <UART_SetConfig+0xc44>
 800e318:	e03a      	b.n	800e390 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e31a:	f7fb fcfd 	bl	8009d18 <HAL_RCC_GetPCLK1Freq>
 800e31e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e320:	e03c      	b.n	800e39c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e322:	f7fb fd0f 	bl	8009d44 <HAL_RCC_GetPCLK2Freq>
 800e326:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e328:	e038      	b.n	800e39c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e32a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fc fc2e 	bl	800ab90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e338:	e030      	b.n	800e39c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e33a:	f107 0318 	add.w	r3, r7, #24
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fc fd7a 	bl	800ae38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e348:	e028      	b.n	800e39c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e34a:	4b09      	ldr	r3, [pc, #36]	; (800e370 <UART_SetConfig+0xc2c>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f003 0320 	and.w	r3, r3, #32
 800e352:	2b00      	cmp	r3, #0
 800e354:	d012      	beq.n	800e37c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e356:	4b06      	ldr	r3, [pc, #24]	; (800e370 <UART_SetConfig+0xc2c>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	08db      	lsrs	r3, r3, #3
 800e35c:	f003 0303 	and.w	r3, r3, #3
 800e360:	4a04      	ldr	r2, [pc, #16]	; (800e374 <UART_SetConfig+0xc30>)
 800e362:	fa22 f303 	lsr.w	r3, r2, r3
 800e366:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e368:	e018      	b.n	800e39c <UART_SetConfig+0xc58>
 800e36a:	bf00      	nop
 800e36c:	0800f68c 	.word	0x0800f68c
 800e370:	58024400 	.word	0x58024400
 800e374:	03d09000 	.word	0x03d09000
 800e378:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e37c:	4b24      	ldr	r3, [pc, #144]	; (800e410 <UART_SetConfig+0xccc>)
 800e37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e380:	e00c      	b.n	800e39c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e382:	4b24      	ldr	r3, [pc, #144]	; (800e414 <UART_SetConfig+0xcd0>)
 800e384:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e386:	e009      	b.n	800e39c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e38e:	e005      	b.n	800e39c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e390:	2300      	movs	r3, #0
 800e392:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e394:	2301      	movs	r3, #1
 800e396:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e39a:	bf00      	nop
    }

    if (pclk != 0U)
 800e39c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d021      	beq.n	800e3e6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a6:	4a1c      	ldr	r2, [pc, #112]	; (800e418 <UART_SetConfig+0xcd4>)
 800e3a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3b0:	fbb3 f2f2 	udiv	r2, r3, r2
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	085b      	lsrs	r3, r3, #1
 800e3ba:	441a      	add	r2, r3
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3c4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c8:	2b0f      	cmp	r3, #15
 800e3ca:	d909      	bls.n	800e3e0 <UART_SetConfig+0xc9c>
 800e3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3d2:	d205      	bcs.n	800e3e0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	60da      	str	r2, [r3, #12]
 800e3de:	e002      	b.n	800e3e6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	2200      	movs	r2, #0
 800e400:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e402:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e406:	4618      	mov	r0, r3
 800e408:	3748      	adds	r7, #72	; 0x48
 800e40a:	46bd      	mov	sp, r7
 800e40c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e410:	03d09000 	.word	0x03d09000
 800e414:	003d0900 	.word	0x003d0900
 800e418:	0800f68c 	.word	0x0800f68c

0800e41c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e428:	f003 0301 	and.w	r3, r3, #1
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d00a      	beq.n	800e446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	430a      	orrs	r2, r1
 800e444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e44a:	f003 0302 	and.w	r3, r3, #2
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d00a      	beq.n	800e468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	685b      	ldr	r3, [r3, #4]
 800e458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	430a      	orrs	r2, r1
 800e466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e46c:	f003 0304 	and.w	r3, r3, #4
 800e470:	2b00      	cmp	r3, #0
 800e472:	d00a      	beq.n	800e48a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	430a      	orrs	r2, r1
 800e488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e48e:	f003 0308 	and.w	r3, r3, #8
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00a      	beq.n	800e4ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	430a      	orrs	r2, r1
 800e4aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4b0:	f003 0310 	and.w	r3, r3, #16
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d00a      	beq.n	800e4ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	430a      	orrs	r2, r1
 800e4cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d2:	f003 0320 	and.w	r3, r3, #32
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00a      	beq.n	800e4f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	689b      	ldr	r3, [r3, #8]
 800e4e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	430a      	orrs	r2, r1
 800e4ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d01a      	beq.n	800e532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	430a      	orrs	r2, r1
 800e510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e51a:	d10a      	bne.n	800e532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	430a      	orrs	r2, r1
 800e530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d00a      	beq.n	800e554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	430a      	orrs	r2, r1
 800e552:	605a      	str	r2, [r3, #4]
  }
}
 800e554:	bf00      	nop
 800e556:	370c      	adds	r7, #12
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr

0800e560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b086      	sub	sp, #24
 800e564:	af02      	add	r7, sp, #8
 800e566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e570:	f7f7 fb72 	bl	8005c58 <HAL_GetTick>
 800e574:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f003 0308 	and.w	r3, r3, #8
 800e580:	2b08      	cmp	r3, #8
 800e582:	d10e      	bne.n	800e5a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e588:	9300      	str	r3, [sp, #0]
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2200      	movs	r2, #0
 800e58e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 f82f 	bl	800e5f6 <UART_WaitOnFlagUntilTimeout>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d001      	beq.n	800e5a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e59e:	2303      	movs	r3, #3
 800e5a0:	e025      	b.n	800e5ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f003 0304 	and.w	r3, r3, #4
 800e5ac:	2b04      	cmp	r3, #4
 800e5ae:	d10e      	bne.n	800e5ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e5b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 f819 	bl	800e5f6 <UART_WaitOnFlagUntilTimeout>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d001      	beq.n	800e5ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e5ca:	2303      	movs	r3, #3
 800e5cc:	e00f      	b.n	800e5ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2220      	movs	r2, #32
 800e5d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2220      	movs	r2, #32
 800e5da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e5ec:	2300      	movs	r3, #0
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3710      	adds	r7, #16
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b09c      	sub	sp, #112	; 0x70
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	60f8      	str	r0, [r7, #12]
 800e5fe:	60b9      	str	r1, [r7, #8]
 800e600:	603b      	str	r3, [r7, #0]
 800e602:	4613      	mov	r3, r2
 800e604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e606:	e0a9      	b.n	800e75c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e60a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e60e:	f000 80a5 	beq.w	800e75c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e612:	f7f7 fb21 	bl	8005c58 <HAL_GetTick>
 800e616:	4602      	mov	r2, r0
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	1ad3      	subs	r3, r2, r3
 800e61c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e61e:	429a      	cmp	r2, r3
 800e620:	d302      	bcc.n	800e628 <UART_WaitOnFlagUntilTimeout+0x32>
 800e622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e624:	2b00      	cmp	r3, #0
 800e626:	d140      	bne.n	800e6aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e630:	e853 3f00 	ldrex	r3, [r3]
 800e634:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e638:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e63c:	667b      	str	r3, [r7, #100]	; 0x64
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	461a      	mov	r2, r3
 800e644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e646:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e648:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e64a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e64c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e64e:	e841 2300 	strex	r3, r2, [r1]
 800e652:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1e6      	bne.n	800e628 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	3308      	adds	r3, #8
 800e660:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e664:	e853 3f00 	ldrex	r3, [r3]
 800e668:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66c:	f023 0301 	bic.w	r3, r3, #1
 800e670:	663b      	str	r3, [r7, #96]	; 0x60
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	3308      	adds	r3, #8
 800e678:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e67a:	64ba      	str	r2, [r7, #72]	; 0x48
 800e67c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e67e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e682:	e841 2300 	strex	r3, r2, [r1]
 800e686:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d1e5      	bne.n	800e65a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2220      	movs	r2, #32
 800e692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2220      	movs	r2, #32
 800e69a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e6a6:	2303      	movs	r3, #3
 800e6a8:	e069      	b.n	800e77e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f003 0304 	and.w	r3, r3, #4
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d051      	beq.n	800e75c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	69db      	ldr	r3, [r3, #28]
 800e6be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e6c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e6c6:	d149      	bne.n	800e75c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e6d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6da:	e853 3f00 	ldrex	r3, [r3]
 800e6de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e6e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6f0:	637b      	str	r3, [r7, #52]	; 0x34
 800e6f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e6f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6f8:	e841 2300 	strex	r3, r2, [r1]
 800e6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e700:	2b00      	cmp	r3, #0
 800e702:	d1e6      	bne.n	800e6d2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	3308      	adds	r3, #8
 800e70a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	e853 3f00 	ldrex	r3, [r3]
 800e712:	613b      	str	r3, [r7, #16]
   return(result);
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	f023 0301 	bic.w	r3, r3, #1
 800e71a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	3308      	adds	r3, #8
 800e722:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e724:	623a      	str	r2, [r7, #32]
 800e726:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e728:	69f9      	ldr	r1, [r7, #28]
 800e72a:	6a3a      	ldr	r2, [r7, #32]
 800e72c:	e841 2300 	strex	r3, r2, [r1]
 800e730:	61bb      	str	r3, [r7, #24]
   return(result);
 800e732:	69bb      	ldr	r3, [r7, #24]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1e5      	bne.n	800e704 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2220      	movs	r2, #32
 800e73c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2220      	movs	r2, #32
 800e744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2220      	movs	r2, #32
 800e74c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2200      	movs	r2, #0
 800e754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e758:	2303      	movs	r3, #3
 800e75a:	e010      	b.n	800e77e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	69da      	ldr	r2, [r3, #28]
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	4013      	ands	r3, r2
 800e766:	68ba      	ldr	r2, [r7, #8]
 800e768:	429a      	cmp	r2, r3
 800e76a:	bf0c      	ite	eq
 800e76c:	2301      	moveq	r3, #1
 800e76e:	2300      	movne	r3, #0
 800e770:	b2db      	uxtb	r3, r3
 800e772:	461a      	mov	r2, r3
 800e774:	79fb      	ldrb	r3, [r7, #7]
 800e776:	429a      	cmp	r2, r3
 800e778:	f43f af46 	beq.w	800e608 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e77c:	2300      	movs	r3, #0
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3770      	adds	r7, #112	; 0x70
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
	...

0800e788 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b096      	sub	sp, #88	; 0x58
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	4613      	mov	r3, r2
 800e794:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	68ba      	ldr	r2, [r7, #8]
 800e79a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	88fa      	ldrh	r2, [r7, #6]
 800e7a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2222      	movs	r2, #34	; 0x22
 800e7b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d02c      	beq.n	800e816 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7c0:	4a42      	ldr	r2, [pc, #264]	; (800e8cc <UART_Start_Receive_DMA+0x144>)
 800e7c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7c8:	4a41      	ldr	r2, [pc, #260]	; (800e8d0 <UART_Start_Receive_DMA+0x148>)
 800e7ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7d0:	4a40      	ldr	r2, [pc, #256]	; (800e8d4 <UART_Start_Receive_DMA+0x14c>)
 800e7d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7d8:	2200      	movs	r2, #0
 800e7da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	3324      	adds	r3, #36	; 0x24
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	88fb      	ldrh	r3, [r7, #6]
 800e7f0:	f7f7 fea8 	bl	8006544 <HAL_DMA_Start_IT>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00d      	beq.n	800e816 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2210      	movs	r2, #16
 800e7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2200      	movs	r2, #0
 800e806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2220      	movs	r2, #32
 800e80e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e812:	2301      	movs	r3, #1
 800e814:	e055      	b.n	800e8c2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2200      	movs	r2, #0
 800e81a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	691b      	ldr	r3, [r3, #16]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d018      	beq.n	800e858 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e82e:	e853 3f00 	ldrex	r3, [r3]
 800e832:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e83a:	657b      	str	r3, [r7, #84]	; 0x54
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	461a      	mov	r2, r3
 800e842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e844:	64bb      	str	r3, [r7, #72]	; 0x48
 800e846:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e848:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e84a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e84c:	e841 2300 	strex	r3, r2, [r1]
 800e850:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e854:	2b00      	cmp	r3, #0
 800e856:	d1e6      	bne.n	800e826 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	3308      	adds	r3, #8
 800e85e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e862:	e853 3f00 	ldrex	r3, [r3]
 800e866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	f043 0301 	orr.w	r3, r3, #1
 800e86e:	653b      	str	r3, [r7, #80]	; 0x50
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	3308      	adds	r3, #8
 800e876:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e878:	637a      	str	r2, [r7, #52]	; 0x34
 800e87a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e87c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e87e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e880:	e841 2300 	strex	r3, r2, [r1]
 800e884:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d1e5      	bne.n	800e858 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	3308      	adds	r3, #8
 800e892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	e853 3f00 	ldrex	r3, [r3]
 800e89a:	613b      	str	r3, [r7, #16]
   return(result);
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	3308      	adds	r3, #8
 800e8aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e8ac:	623a      	str	r2, [r7, #32]
 800e8ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b0:	69f9      	ldr	r1, [r7, #28]
 800e8b2:	6a3a      	ldr	r2, [r7, #32]
 800e8b4:	e841 2300 	strex	r3, r2, [r1]
 800e8b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e8ba:	69bb      	ldr	r3, [r7, #24]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d1e5      	bne.n	800e88c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e8c0:	2300      	movs	r3, #0
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3758      	adds	r7, #88	; 0x58
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	0800eadb 	.word	0x0800eadb
 800e8d0:	0800ebfd 	.word	0x0800ebfd
 800e8d4:	0800ec35 	.word	0x0800ec35

0800e8d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b08f      	sub	sp, #60	; 0x3c
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e6:	6a3b      	ldr	r3, [r7, #32]
 800e8e8:	e853 3f00 	ldrex	r3, [r3]
 800e8ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e8f4:	637b      	str	r3, [r7, #52]	; 0x34
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e900:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e906:	e841 2300 	strex	r3, r2, [r1]
 800e90a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1e6      	bne.n	800e8e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	3308      	adds	r3, #8
 800e918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	e853 3f00 	ldrex	r3, [r3]
 800e920:	60bb      	str	r3, [r7, #8]
   return(result);
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e928:	633b      	str	r3, [r7, #48]	; 0x30
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	3308      	adds	r3, #8
 800e930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e932:	61ba      	str	r2, [r7, #24]
 800e934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e936:	6979      	ldr	r1, [r7, #20]
 800e938:	69ba      	ldr	r2, [r7, #24]
 800e93a:	e841 2300 	strex	r3, r2, [r1]
 800e93e:	613b      	str	r3, [r7, #16]
   return(result);
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d1e5      	bne.n	800e912 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2220      	movs	r2, #32
 800e94a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e94e:	bf00      	nop
 800e950:	373c      	adds	r7, #60	; 0x3c
 800e952:	46bd      	mov	sp, r7
 800e954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e958:	4770      	bx	lr
	...

0800e95c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b095      	sub	sp, #84	; 0x54
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e96c:	e853 3f00 	ldrex	r3, [r3]
 800e970:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	461a      	mov	r2, r3
 800e980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e982:	643b      	str	r3, [r7, #64]	; 0x40
 800e984:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e986:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e988:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e98a:	e841 2300 	strex	r3, r2, [r1]
 800e98e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e992:	2b00      	cmp	r3, #0
 800e994:	d1e6      	bne.n	800e964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	3308      	adds	r3, #8
 800e99c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e99e:	6a3b      	ldr	r3, [r7, #32]
 800e9a0:	e853 3f00 	ldrex	r3, [r3]
 800e9a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e9a6:	69fa      	ldr	r2, [r7, #28]
 800e9a8:	4b1e      	ldr	r3, [pc, #120]	; (800ea24 <UART_EndRxTransfer+0xc8>)
 800e9aa:	4013      	ands	r3, r2
 800e9ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	3308      	adds	r3, #8
 800e9b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e9b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9be:	e841 2300 	strex	r3, r2, [r1]
 800e9c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d1e5      	bne.n	800e996 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9ce:	2b01      	cmp	r3, #1
 800e9d0:	d118      	bne.n	800ea04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	e853 3f00 	ldrex	r3, [r3]
 800e9de:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	f023 0310 	bic.w	r3, r3, #16
 800e9e6:	647b      	str	r3, [r7, #68]	; 0x44
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9f0:	61bb      	str	r3, [r7, #24]
 800e9f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9f4:	6979      	ldr	r1, [r7, #20]
 800e9f6:	69ba      	ldr	r2, [r7, #24]
 800e9f8:	e841 2300 	strex	r3, r2, [r1]
 800e9fc:	613b      	str	r3, [r7, #16]
   return(result);
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d1e6      	bne.n	800e9d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2220      	movs	r2, #32
 800ea08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2200      	movs	r2, #0
 800ea16:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ea18:	bf00      	nop
 800ea1a:	3754      	adds	r7, #84	; 0x54
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr
 800ea24:	effffffe 	.word	0xeffffffe

0800ea28 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b090      	sub	sp, #64	; 0x40
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea34:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	69db      	ldr	r3, [r3, #28]
 800ea3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea3e:	d037      	beq.n	800eab0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ea40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea42:	2200      	movs	r2, #0
 800ea44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ea48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	3308      	adds	r3, #8
 800ea4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea52:	e853 3f00 	ldrex	r3, [r3]
 800ea56:	623b      	str	r3, [r7, #32]
   return(result);
 800ea58:	6a3b      	ldr	r3, [r7, #32]
 800ea5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea5e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	3308      	adds	r3, #8
 800ea66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea68:	633a      	str	r2, [r7, #48]	; 0x30
 800ea6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea70:	e841 2300 	strex	r3, r2, [r1]
 800ea74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d1e5      	bne.n	800ea48 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	e853 3f00 	ldrex	r3, [r3]
 800ea88:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea90:	637b      	str	r3, [r7, #52]	; 0x34
 800ea92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	461a      	mov	r2, r3
 800ea98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea9a:	61fb      	str	r3, [r7, #28]
 800ea9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea9e:	69b9      	ldr	r1, [r7, #24]
 800eaa0:	69fa      	ldr	r2, [r7, #28]
 800eaa2:	e841 2300 	strex	r3, r2, [r1]
 800eaa6:	617b      	str	r3, [r7, #20]
   return(result);
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d1e6      	bne.n	800ea7c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eaae:	e002      	b.n	800eab6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800eab0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eab2:	f7f5 fb61 	bl	8004178 <HAL_UART_TxCpltCallback>
}
 800eab6:	bf00      	nop
 800eab8:	3740      	adds	r7, #64	; 0x40
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b084      	sub	sp, #16
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f7fe fe0f 	bl	800d6f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ead2:	bf00      	nop
 800ead4:	3710      	adds	r7, #16
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eada:	b580      	push	{r7, lr}
 800eadc:	b09c      	sub	sp, #112	; 0x70
 800eade:	af00      	add	r7, sp, #0
 800eae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eae6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	69db      	ldr	r3, [r3, #28]
 800eaec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eaf0:	d071      	beq.n	800ebd6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800eaf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb02:	e853 3f00 	ldrex	r3, [r3]
 800eb06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eb08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800eb10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	461a      	mov	r2, r3
 800eb16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb18:	65bb      	str	r3, [r7, #88]	; 0x58
 800eb1a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eb1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb20:	e841 2300 	strex	r3, r2, [r1]
 800eb24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eb26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d1e6      	bne.n	800eafa <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	3308      	adds	r3, #8
 800eb32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb36:	e853 3f00 	ldrex	r3, [r3]
 800eb3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb3e:	f023 0301 	bic.w	r3, r3, #1
 800eb42:	667b      	str	r3, [r7, #100]	; 0x64
 800eb44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	3308      	adds	r3, #8
 800eb4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eb4c:	647a      	str	r2, [r7, #68]	; 0x44
 800eb4e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb54:	e841 2300 	strex	r3, r2, [r1]
 800eb58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eb5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d1e5      	bne.n	800eb2c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	3308      	adds	r3, #8
 800eb66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6a:	e853 3f00 	ldrex	r3, [r3]
 800eb6e:	623b      	str	r3, [r7, #32]
   return(result);
 800eb70:	6a3b      	ldr	r3, [r7, #32]
 800eb72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb76:	663b      	str	r3, [r7, #96]	; 0x60
 800eb78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	3308      	adds	r3, #8
 800eb7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb80:	633a      	str	r2, [r7, #48]	; 0x30
 800eb82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb88:	e841 2300 	strex	r3, r2, [r1]
 800eb8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d1e5      	bne.n	800eb60 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eb94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb96:	2220      	movs	r2, #32
 800eb98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d118      	bne.n	800ebd6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	e853 3f00 	ldrex	r3, [r3]
 800ebb0:	60fb      	str	r3, [r7, #12]
   return(result);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	f023 0310 	bic.w	r3, r3, #16
 800ebb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ebba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebc2:	61fb      	str	r3, [r7, #28]
 800ebc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebc6:	69b9      	ldr	r1, [r7, #24]
 800ebc8:	69fa      	ldr	r2, [r7, #28]
 800ebca:	e841 2300 	strex	r3, r2, [r1]
 800ebce:	617b      	str	r3, [r7, #20]
   return(result);
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d1e6      	bne.n	800eba4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebda:	2b01      	cmp	r3, #1
 800ebdc:	d107      	bne.n	800ebee <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ebde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebe0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ebe8:	f7fe fda0 	bl	800d72c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ebec:	e002      	b.n	800ebf4 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ebee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ebf0:	f7f5 fad4 	bl	800419c <HAL_UART_RxCpltCallback>
}
 800ebf4:	bf00      	nop
 800ebf6:	3770      	adds	r7, #112	; 0x70
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec08:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d109      	bne.n	800ec26 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ec18:	085b      	lsrs	r3, r3, #1
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	68f8      	ldr	r0, [r7, #12]
 800ec20:	f7fe fd84 	bl	800d72c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ec24:	e002      	b.n	800ec2c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	f7fe fd6c 	bl	800d704 <HAL_UART_RxHalfCpltCallback>
}
 800ec2c:	bf00      	nop
 800ec2e:	3710      	adds	r7, #16
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b086      	sub	sp, #24
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec40:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec48:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec50:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec5c:	2b80      	cmp	r3, #128	; 0x80
 800ec5e:	d109      	bne.n	800ec74 <UART_DMAError+0x40>
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	2b21      	cmp	r3, #33	; 0x21
 800ec64:	d106      	bne.n	800ec74 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ec6e:	6978      	ldr	r0, [r7, #20]
 800ec70:	f7ff fe32 	bl	800e8d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	689b      	ldr	r3, [r3, #8]
 800ec7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec7e:	2b40      	cmp	r3, #64	; 0x40
 800ec80:	d109      	bne.n	800ec96 <UART_DMAError+0x62>
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2b22      	cmp	r3, #34	; 0x22
 800ec86:	d106      	bne.n	800ec96 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ec90:	6978      	ldr	r0, [r7, #20]
 800ec92:	f7ff fe63 	bl	800e95c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec9c:	f043 0210 	orr.w	r2, r3, #16
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eca6:	6978      	ldr	r0, [r7, #20]
 800eca8:	f7fe fd36 	bl	800d718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecac:	bf00      	nop
 800ecae:	3718      	adds	r7, #24
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2200      	movs	r2, #0
 800ecce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	f7fe fd20 	bl	800d718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecd8:	bf00      	nop
 800ecda:	3710      	adds	r7, #16
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b088      	sub	sp, #32
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	e853 3f00 	ldrex	r3, [r3]
 800ecf4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecfc:	61fb      	str	r3, [r7, #28]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	461a      	mov	r2, r3
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	61bb      	str	r3, [r7, #24]
 800ed08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed0a:	6979      	ldr	r1, [r7, #20]
 800ed0c:	69ba      	ldr	r2, [r7, #24]
 800ed0e:	e841 2300 	strex	r3, r2, [r1]
 800ed12:	613b      	str	r3, [r7, #16]
   return(result);
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d1e6      	bne.n	800ece8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2220      	movs	r2, #32
 800ed1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2200      	movs	r2, #0
 800ed26:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f7f5 fa25 	bl	8004178 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed2e:	bf00      	nop
 800ed30:	3720      	adds	r7, #32
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ed36:	b480      	push	{r7}
 800ed38:	b083      	sub	sp, #12
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ed3e:	bf00      	nop
 800ed40:	370c      	adds	r7, #12
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr

0800ed4a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ed4a:	b480      	push	{r7}
 800ed4c:	b083      	sub	sp, #12
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ed52:	bf00      	nop
 800ed54:	370c      	adds	r7, #12
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr

0800ed5e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ed5e:	b480      	push	{r7}
 800ed60:	b083      	sub	sp, #12
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ed66:	bf00      	nop
 800ed68:	370c      	adds	r7, #12
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed70:	4770      	bx	lr

0800ed72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ed72:	b480      	push	{r7}
 800ed74:	b085      	sub	sp, #20
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d101      	bne.n	800ed88 <HAL_UARTEx_DisableFifoMode+0x16>
 800ed84:	2302      	movs	r3, #2
 800ed86:	e027      	b.n	800edd8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2224      	movs	r2, #36	; 0x24
 800ed94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f022 0201 	bic.w	r2, r2, #1
 800edae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800edb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	68fa      	ldr	r2, [r7, #12]
 800edc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2220      	movs	r2, #32
 800edca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2200      	movs	r2, #0
 800edd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800edd6:	2300      	movs	r3, #0
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3714      	adds	r7, #20
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr

0800ede4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d101      	bne.n	800edfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800edf8:	2302      	movs	r3, #2
 800edfa:	e02d      	b.n	800ee58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2201      	movs	r2, #1
 800ee00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2224      	movs	r2, #36	; 0x24
 800ee08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	f022 0201 	bic.w	r2, r2, #1
 800ee22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	683a      	ldr	r2, [r7, #0]
 800ee34:	430a      	orrs	r2, r1
 800ee36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 f84f 	bl	800eedc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	68fa      	ldr	r2, [r7, #12]
 800ee44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2220      	movs	r2, #32
 800ee4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2200      	movs	r2, #0
 800ee52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee56:	2300      	movs	r3, #0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3710      	adds	r7, #16
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d101      	bne.n	800ee78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ee74:	2302      	movs	r3, #2
 800ee76:	e02d      	b.n	800eed4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2224      	movs	r2, #36	; 0x24
 800ee84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f022 0201 	bic.w	r2, r2, #1
 800ee9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	689b      	ldr	r3, [r3, #8]
 800eea6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	683a      	ldr	r2, [r7, #0]
 800eeb0:	430a      	orrs	r2, r1
 800eeb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f000 f811 	bl	800eedc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	68fa      	ldr	r2, [r7, #12]
 800eec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2220      	movs	r2, #32
 800eec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2200      	movs	r2, #0
 800eece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eed2:	2300      	movs	r3, #0
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3710      	adds	r7, #16
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d108      	bne.n	800eefe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2201      	movs	r2, #1
 800eef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2201      	movs	r2, #1
 800eef8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eefc:	e031      	b.n	800ef62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eefe:	2310      	movs	r3, #16
 800ef00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ef02:	2310      	movs	r3, #16
 800ef04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	689b      	ldr	r3, [r3, #8]
 800ef0c:	0e5b      	lsrs	r3, r3, #25
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	f003 0307 	and.w	r3, r3, #7
 800ef14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	0f5b      	lsrs	r3, r3, #29
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	f003 0307 	and.w	r3, r3, #7
 800ef24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ef26:	7bbb      	ldrb	r3, [r7, #14]
 800ef28:	7b3a      	ldrb	r2, [r7, #12]
 800ef2a:	4911      	ldr	r1, [pc, #68]	; (800ef70 <UARTEx_SetNbDataToProcess+0x94>)
 800ef2c:	5c8a      	ldrb	r2, [r1, r2]
 800ef2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ef32:	7b3a      	ldrb	r2, [r7, #12]
 800ef34:	490f      	ldr	r1, [pc, #60]	; (800ef74 <UARTEx_SetNbDataToProcess+0x98>)
 800ef36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ef38:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ef44:	7bfb      	ldrb	r3, [r7, #15]
 800ef46:	7b7a      	ldrb	r2, [r7, #13]
 800ef48:	4909      	ldr	r1, [pc, #36]	; (800ef70 <UARTEx_SetNbDataToProcess+0x94>)
 800ef4a:	5c8a      	ldrb	r2, [r1, r2]
 800ef4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ef50:	7b7a      	ldrb	r2, [r7, #13]
 800ef52:	4908      	ldr	r1, [pc, #32]	; (800ef74 <UARTEx_SetNbDataToProcess+0x98>)
 800ef54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ef56:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef5a:	b29a      	uxth	r2, r3
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ef62:	bf00      	nop
 800ef64:	3714      	adds	r7, #20
 800ef66:	46bd      	mov	sp, r7
 800ef68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6c:	4770      	bx	lr
 800ef6e:	bf00      	nop
 800ef70:	0800f6a4 	.word	0x0800f6a4
 800ef74:	0800f6ac 	.word	0x0800f6ac

0800ef78 <__cxa_pure_virtual>:
 800ef78:	b508      	push	{r3, lr}
 800ef7a:	f000 f80d 	bl	800ef98 <_ZSt9terminatev>

0800ef7e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ef7e:	b508      	push	{r3, lr}
 800ef80:	4780      	blx	r0
 800ef82:	f000 f80e 	bl	800efa2 <abort>
	...

0800ef88 <_ZSt13get_terminatev>:
 800ef88:	4b02      	ldr	r3, [pc, #8]	; (800ef94 <_ZSt13get_terminatev+0xc>)
 800ef8a:	6818      	ldr	r0, [r3, #0]
 800ef8c:	f3bf 8f5b 	dmb	ish
 800ef90:	4770      	bx	lr
 800ef92:	bf00      	nop
 800ef94:	24000010 	.word	0x24000010

0800ef98 <_ZSt9terminatev>:
 800ef98:	b508      	push	{r3, lr}
 800ef9a:	f7ff fff5 	bl	800ef88 <_ZSt13get_terminatev>
 800ef9e:	f7ff ffee 	bl	800ef7e <_ZN10__cxxabiv111__terminateEPFvvE>

0800efa2 <abort>:
 800efa2:	b508      	push	{r3, lr}
 800efa4:	2006      	movs	r0, #6
 800efa6:	f000 f873 	bl	800f090 <raise>
 800efaa:	2001      	movs	r0, #1
 800efac:	f7f6 fcec 	bl	8005988 <_exit>

0800efb0 <__errno>:
 800efb0:	4b01      	ldr	r3, [pc, #4]	; (800efb8 <__errno+0x8>)
 800efb2:	6818      	ldr	r0, [r3, #0]
 800efb4:	4770      	bx	lr
 800efb6:	bf00      	nop
 800efb8:	24000014 	.word	0x24000014

0800efbc <__libc_init_array>:
 800efbc:	b570      	push	{r4, r5, r6, lr}
 800efbe:	4d0d      	ldr	r5, [pc, #52]	; (800eff4 <__libc_init_array+0x38>)
 800efc0:	4c0d      	ldr	r4, [pc, #52]	; (800eff8 <__libc_init_array+0x3c>)
 800efc2:	1b64      	subs	r4, r4, r5
 800efc4:	10a4      	asrs	r4, r4, #2
 800efc6:	2600      	movs	r6, #0
 800efc8:	42a6      	cmp	r6, r4
 800efca:	d109      	bne.n	800efe0 <__libc_init_array+0x24>
 800efcc:	4d0b      	ldr	r5, [pc, #44]	; (800effc <__libc_init_array+0x40>)
 800efce:	4c0c      	ldr	r4, [pc, #48]	; (800f000 <__libc_init_array+0x44>)
 800efd0:	f000 f9b0 	bl	800f334 <_init>
 800efd4:	1b64      	subs	r4, r4, r5
 800efd6:	10a4      	asrs	r4, r4, #2
 800efd8:	2600      	movs	r6, #0
 800efda:	42a6      	cmp	r6, r4
 800efdc:	d105      	bne.n	800efea <__libc_init_array+0x2e>
 800efde:	bd70      	pop	{r4, r5, r6, pc}
 800efe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800efe4:	4798      	blx	r3
 800efe6:	3601      	adds	r6, #1
 800efe8:	e7ee      	b.n	800efc8 <__libc_init_array+0xc>
 800efea:	f855 3b04 	ldr.w	r3, [r5], #4
 800efee:	4798      	blx	r3
 800eff0:	3601      	adds	r6, #1
 800eff2:	e7f2      	b.n	800efda <__libc_init_array+0x1e>
 800eff4:	0800f6bc 	.word	0x0800f6bc
 800eff8:	0800f6bc 	.word	0x0800f6bc
 800effc:	0800f6bc 	.word	0x0800f6bc
 800f000:	0800f6c4 	.word	0x0800f6c4

0800f004 <memcpy>:
 800f004:	440a      	add	r2, r1
 800f006:	4291      	cmp	r1, r2
 800f008:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f00c:	d100      	bne.n	800f010 <memcpy+0xc>
 800f00e:	4770      	bx	lr
 800f010:	b510      	push	{r4, lr}
 800f012:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f01a:	4291      	cmp	r1, r2
 800f01c:	d1f9      	bne.n	800f012 <memcpy+0xe>
 800f01e:	bd10      	pop	{r4, pc}

0800f020 <memset>:
 800f020:	4402      	add	r2, r0
 800f022:	4603      	mov	r3, r0
 800f024:	4293      	cmp	r3, r2
 800f026:	d100      	bne.n	800f02a <memset+0xa>
 800f028:	4770      	bx	lr
 800f02a:	f803 1b01 	strb.w	r1, [r3], #1
 800f02e:	e7f9      	b.n	800f024 <memset+0x4>

0800f030 <realloc>:
 800f030:	4b02      	ldr	r3, [pc, #8]	; (800f03c <realloc+0xc>)
 800f032:	460a      	mov	r2, r1
 800f034:	4601      	mov	r1, r0
 800f036:	6818      	ldr	r0, [r3, #0]
 800f038:	f000 b8da 	b.w	800f1f0 <_realloc_r>
 800f03c:	24000014 	.word	0x24000014

0800f040 <_raise_r>:
 800f040:	291f      	cmp	r1, #31
 800f042:	b538      	push	{r3, r4, r5, lr}
 800f044:	4604      	mov	r4, r0
 800f046:	460d      	mov	r5, r1
 800f048:	d904      	bls.n	800f054 <_raise_r+0x14>
 800f04a:	2316      	movs	r3, #22
 800f04c:	6003      	str	r3, [r0, #0]
 800f04e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f052:	bd38      	pop	{r3, r4, r5, pc}
 800f054:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f056:	b112      	cbz	r2, 800f05e <_raise_r+0x1e>
 800f058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f05c:	b94b      	cbnz	r3, 800f072 <_raise_r+0x32>
 800f05e:	4620      	mov	r0, r4
 800f060:	f000 f830 	bl	800f0c4 <_getpid_r>
 800f064:	462a      	mov	r2, r5
 800f066:	4601      	mov	r1, r0
 800f068:	4620      	mov	r0, r4
 800f06a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f06e:	f000 b817 	b.w	800f0a0 <_kill_r>
 800f072:	2b01      	cmp	r3, #1
 800f074:	d00a      	beq.n	800f08c <_raise_r+0x4c>
 800f076:	1c59      	adds	r1, r3, #1
 800f078:	d103      	bne.n	800f082 <_raise_r+0x42>
 800f07a:	2316      	movs	r3, #22
 800f07c:	6003      	str	r3, [r0, #0]
 800f07e:	2001      	movs	r0, #1
 800f080:	e7e7      	b.n	800f052 <_raise_r+0x12>
 800f082:	2400      	movs	r4, #0
 800f084:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f088:	4628      	mov	r0, r5
 800f08a:	4798      	blx	r3
 800f08c:	2000      	movs	r0, #0
 800f08e:	e7e0      	b.n	800f052 <_raise_r+0x12>

0800f090 <raise>:
 800f090:	4b02      	ldr	r3, [pc, #8]	; (800f09c <raise+0xc>)
 800f092:	4601      	mov	r1, r0
 800f094:	6818      	ldr	r0, [r3, #0]
 800f096:	f7ff bfd3 	b.w	800f040 <_raise_r>
 800f09a:	bf00      	nop
 800f09c:	24000014 	.word	0x24000014

0800f0a0 <_kill_r>:
 800f0a0:	b538      	push	{r3, r4, r5, lr}
 800f0a2:	4d07      	ldr	r5, [pc, #28]	; (800f0c0 <_kill_r+0x20>)
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	4608      	mov	r0, r1
 800f0aa:	4611      	mov	r1, r2
 800f0ac:	602b      	str	r3, [r5, #0]
 800f0ae:	f7f6 fc5b 	bl	8005968 <_kill>
 800f0b2:	1c43      	adds	r3, r0, #1
 800f0b4:	d102      	bne.n	800f0bc <_kill_r+0x1c>
 800f0b6:	682b      	ldr	r3, [r5, #0]
 800f0b8:	b103      	cbz	r3, 800f0bc <_kill_r+0x1c>
 800f0ba:	6023      	str	r3, [r4, #0]
 800f0bc:	bd38      	pop	{r3, r4, r5, pc}
 800f0be:	bf00      	nop
 800f0c0:	24001d20 	.word	0x24001d20

0800f0c4 <_getpid_r>:
 800f0c4:	f7f6 bc48 	b.w	8005958 <_getpid>

0800f0c8 <sbrk_aligned>:
 800f0c8:	b570      	push	{r4, r5, r6, lr}
 800f0ca:	4e0e      	ldr	r6, [pc, #56]	; (800f104 <sbrk_aligned+0x3c>)
 800f0cc:	460c      	mov	r4, r1
 800f0ce:	6831      	ldr	r1, [r6, #0]
 800f0d0:	4605      	mov	r5, r0
 800f0d2:	b911      	cbnz	r1, 800f0da <sbrk_aligned+0x12>
 800f0d4:	f000 f8bc 	bl	800f250 <_sbrk_r>
 800f0d8:	6030      	str	r0, [r6, #0]
 800f0da:	4621      	mov	r1, r4
 800f0dc:	4628      	mov	r0, r5
 800f0de:	f000 f8b7 	bl	800f250 <_sbrk_r>
 800f0e2:	1c43      	adds	r3, r0, #1
 800f0e4:	d00a      	beq.n	800f0fc <sbrk_aligned+0x34>
 800f0e6:	1cc4      	adds	r4, r0, #3
 800f0e8:	f024 0403 	bic.w	r4, r4, #3
 800f0ec:	42a0      	cmp	r0, r4
 800f0ee:	d007      	beq.n	800f100 <sbrk_aligned+0x38>
 800f0f0:	1a21      	subs	r1, r4, r0
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	f000 f8ac 	bl	800f250 <_sbrk_r>
 800f0f8:	3001      	adds	r0, #1
 800f0fa:	d101      	bne.n	800f100 <sbrk_aligned+0x38>
 800f0fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f100:	4620      	mov	r0, r4
 800f102:	bd70      	pop	{r4, r5, r6, pc}
 800f104:	24001d1c 	.word	0x24001d1c

0800f108 <_malloc_r>:
 800f108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f10c:	1ccd      	adds	r5, r1, #3
 800f10e:	f025 0503 	bic.w	r5, r5, #3
 800f112:	3508      	adds	r5, #8
 800f114:	2d0c      	cmp	r5, #12
 800f116:	bf38      	it	cc
 800f118:	250c      	movcc	r5, #12
 800f11a:	2d00      	cmp	r5, #0
 800f11c:	4607      	mov	r7, r0
 800f11e:	db01      	blt.n	800f124 <_malloc_r+0x1c>
 800f120:	42a9      	cmp	r1, r5
 800f122:	d905      	bls.n	800f130 <_malloc_r+0x28>
 800f124:	230c      	movs	r3, #12
 800f126:	603b      	str	r3, [r7, #0]
 800f128:	2600      	movs	r6, #0
 800f12a:	4630      	mov	r0, r6
 800f12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f130:	4e2e      	ldr	r6, [pc, #184]	; (800f1ec <_malloc_r+0xe4>)
 800f132:	f000 f89d 	bl	800f270 <__malloc_lock>
 800f136:	6833      	ldr	r3, [r6, #0]
 800f138:	461c      	mov	r4, r3
 800f13a:	bb34      	cbnz	r4, 800f18a <_malloc_r+0x82>
 800f13c:	4629      	mov	r1, r5
 800f13e:	4638      	mov	r0, r7
 800f140:	f7ff ffc2 	bl	800f0c8 <sbrk_aligned>
 800f144:	1c43      	adds	r3, r0, #1
 800f146:	4604      	mov	r4, r0
 800f148:	d14d      	bne.n	800f1e6 <_malloc_r+0xde>
 800f14a:	6834      	ldr	r4, [r6, #0]
 800f14c:	4626      	mov	r6, r4
 800f14e:	2e00      	cmp	r6, #0
 800f150:	d140      	bne.n	800f1d4 <_malloc_r+0xcc>
 800f152:	6823      	ldr	r3, [r4, #0]
 800f154:	4631      	mov	r1, r6
 800f156:	4638      	mov	r0, r7
 800f158:	eb04 0803 	add.w	r8, r4, r3
 800f15c:	f000 f878 	bl	800f250 <_sbrk_r>
 800f160:	4580      	cmp	r8, r0
 800f162:	d13a      	bne.n	800f1da <_malloc_r+0xd2>
 800f164:	6821      	ldr	r1, [r4, #0]
 800f166:	3503      	adds	r5, #3
 800f168:	1a6d      	subs	r5, r5, r1
 800f16a:	f025 0503 	bic.w	r5, r5, #3
 800f16e:	3508      	adds	r5, #8
 800f170:	2d0c      	cmp	r5, #12
 800f172:	bf38      	it	cc
 800f174:	250c      	movcc	r5, #12
 800f176:	4629      	mov	r1, r5
 800f178:	4638      	mov	r0, r7
 800f17a:	f7ff ffa5 	bl	800f0c8 <sbrk_aligned>
 800f17e:	3001      	adds	r0, #1
 800f180:	d02b      	beq.n	800f1da <_malloc_r+0xd2>
 800f182:	6823      	ldr	r3, [r4, #0]
 800f184:	442b      	add	r3, r5
 800f186:	6023      	str	r3, [r4, #0]
 800f188:	e00e      	b.n	800f1a8 <_malloc_r+0xa0>
 800f18a:	6822      	ldr	r2, [r4, #0]
 800f18c:	1b52      	subs	r2, r2, r5
 800f18e:	d41e      	bmi.n	800f1ce <_malloc_r+0xc6>
 800f190:	2a0b      	cmp	r2, #11
 800f192:	d916      	bls.n	800f1c2 <_malloc_r+0xba>
 800f194:	1961      	adds	r1, r4, r5
 800f196:	42a3      	cmp	r3, r4
 800f198:	6025      	str	r5, [r4, #0]
 800f19a:	bf18      	it	ne
 800f19c:	6059      	strne	r1, [r3, #4]
 800f19e:	6863      	ldr	r3, [r4, #4]
 800f1a0:	bf08      	it	eq
 800f1a2:	6031      	streq	r1, [r6, #0]
 800f1a4:	5162      	str	r2, [r4, r5]
 800f1a6:	604b      	str	r3, [r1, #4]
 800f1a8:	4638      	mov	r0, r7
 800f1aa:	f104 060b 	add.w	r6, r4, #11
 800f1ae:	f000 f865 	bl	800f27c <__malloc_unlock>
 800f1b2:	f026 0607 	bic.w	r6, r6, #7
 800f1b6:	1d23      	adds	r3, r4, #4
 800f1b8:	1af2      	subs	r2, r6, r3
 800f1ba:	d0b6      	beq.n	800f12a <_malloc_r+0x22>
 800f1bc:	1b9b      	subs	r3, r3, r6
 800f1be:	50a3      	str	r3, [r4, r2]
 800f1c0:	e7b3      	b.n	800f12a <_malloc_r+0x22>
 800f1c2:	6862      	ldr	r2, [r4, #4]
 800f1c4:	42a3      	cmp	r3, r4
 800f1c6:	bf0c      	ite	eq
 800f1c8:	6032      	streq	r2, [r6, #0]
 800f1ca:	605a      	strne	r2, [r3, #4]
 800f1cc:	e7ec      	b.n	800f1a8 <_malloc_r+0xa0>
 800f1ce:	4623      	mov	r3, r4
 800f1d0:	6864      	ldr	r4, [r4, #4]
 800f1d2:	e7b2      	b.n	800f13a <_malloc_r+0x32>
 800f1d4:	4634      	mov	r4, r6
 800f1d6:	6876      	ldr	r6, [r6, #4]
 800f1d8:	e7b9      	b.n	800f14e <_malloc_r+0x46>
 800f1da:	230c      	movs	r3, #12
 800f1dc:	603b      	str	r3, [r7, #0]
 800f1de:	4638      	mov	r0, r7
 800f1e0:	f000 f84c 	bl	800f27c <__malloc_unlock>
 800f1e4:	e7a1      	b.n	800f12a <_malloc_r+0x22>
 800f1e6:	6025      	str	r5, [r4, #0]
 800f1e8:	e7de      	b.n	800f1a8 <_malloc_r+0xa0>
 800f1ea:	bf00      	nop
 800f1ec:	24001d18 	.word	0x24001d18

0800f1f0 <_realloc_r>:
 800f1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f4:	4680      	mov	r8, r0
 800f1f6:	4614      	mov	r4, r2
 800f1f8:	460e      	mov	r6, r1
 800f1fa:	b921      	cbnz	r1, 800f206 <_realloc_r+0x16>
 800f1fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f200:	4611      	mov	r1, r2
 800f202:	f7ff bf81 	b.w	800f108 <_malloc_r>
 800f206:	b92a      	cbnz	r2, 800f214 <_realloc_r+0x24>
 800f208:	f000 f83e 	bl	800f288 <_free_r>
 800f20c:	4625      	mov	r5, r4
 800f20e:	4628      	mov	r0, r5
 800f210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f214:	f000 f884 	bl	800f320 <_malloc_usable_size_r>
 800f218:	4284      	cmp	r4, r0
 800f21a:	4607      	mov	r7, r0
 800f21c:	d802      	bhi.n	800f224 <_realloc_r+0x34>
 800f21e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f222:	d812      	bhi.n	800f24a <_realloc_r+0x5a>
 800f224:	4621      	mov	r1, r4
 800f226:	4640      	mov	r0, r8
 800f228:	f7ff ff6e 	bl	800f108 <_malloc_r>
 800f22c:	4605      	mov	r5, r0
 800f22e:	2800      	cmp	r0, #0
 800f230:	d0ed      	beq.n	800f20e <_realloc_r+0x1e>
 800f232:	42bc      	cmp	r4, r7
 800f234:	4622      	mov	r2, r4
 800f236:	4631      	mov	r1, r6
 800f238:	bf28      	it	cs
 800f23a:	463a      	movcs	r2, r7
 800f23c:	f7ff fee2 	bl	800f004 <memcpy>
 800f240:	4631      	mov	r1, r6
 800f242:	4640      	mov	r0, r8
 800f244:	f000 f820 	bl	800f288 <_free_r>
 800f248:	e7e1      	b.n	800f20e <_realloc_r+0x1e>
 800f24a:	4635      	mov	r5, r6
 800f24c:	e7df      	b.n	800f20e <_realloc_r+0x1e>
	...

0800f250 <_sbrk_r>:
 800f250:	b538      	push	{r3, r4, r5, lr}
 800f252:	4d06      	ldr	r5, [pc, #24]	; (800f26c <_sbrk_r+0x1c>)
 800f254:	2300      	movs	r3, #0
 800f256:	4604      	mov	r4, r0
 800f258:	4608      	mov	r0, r1
 800f25a:	602b      	str	r3, [r5, #0]
 800f25c:	f7f6 fb9e 	bl	800599c <_sbrk>
 800f260:	1c43      	adds	r3, r0, #1
 800f262:	d102      	bne.n	800f26a <_sbrk_r+0x1a>
 800f264:	682b      	ldr	r3, [r5, #0]
 800f266:	b103      	cbz	r3, 800f26a <_sbrk_r+0x1a>
 800f268:	6023      	str	r3, [r4, #0]
 800f26a:	bd38      	pop	{r3, r4, r5, pc}
 800f26c:	24001d20 	.word	0x24001d20

0800f270 <__malloc_lock>:
 800f270:	4801      	ldr	r0, [pc, #4]	; (800f278 <__malloc_lock+0x8>)
 800f272:	f000 b85d 	b.w	800f330 <__retarget_lock_acquire_recursive>
 800f276:	bf00      	nop
 800f278:	24001d24 	.word	0x24001d24

0800f27c <__malloc_unlock>:
 800f27c:	4801      	ldr	r0, [pc, #4]	; (800f284 <__malloc_unlock+0x8>)
 800f27e:	f000 b858 	b.w	800f332 <__retarget_lock_release_recursive>
 800f282:	bf00      	nop
 800f284:	24001d24 	.word	0x24001d24

0800f288 <_free_r>:
 800f288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f28a:	2900      	cmp	r1, #0
 800f28c:	d044      	beq.n	800f318 <_free_r+0x90>
 800f28e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f292:	9001      	str	r0, [sp, #4]
 800f294:	2b00      	cmp	r3, #0
 800f296:	f1a1 0404 	sub.w	r4, r1, #4
 800f29a:	bfb8      	it	lt
 800f29c:	18e4      	addlt	r4, r4, r3
 800f29e:	f7ff ffe7 	bl	800f270 <__malloc_lock>
 800f2a2:	4a1e      	ldr	r2, [pc, #120]	; (800f31c <_free_r+0x94>)
 800f2a4:	9801      	ldr	r0, [sp, #4]
 800f2a6:	6813      	ldr	r3, [r2, #0]
 800f2a8:	b933      	cbnz	r3, 800f2b8 <_free_r+0x30>
 800f2aa:	6063      	str	r3, [r4, #4]
 800f2ac:	6014      	str	r4, [r2, #0]
 800f2ae:	b003      	add	sp, #12
 800f2b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f2b4:	f7ff bfe2 	b.w	800f27c <__malloc_unlock>
 800f2b8:	42a3      	cmp	r3, r4
 800f2ba:	d908      	bls.n	800f2ce <_free_r+0x46>
 800f2bc:	6825      	ldr	r5, [r4, #0]
 800f2be:	1961      	adds	r1, r4, r5
 800f2c0:	428b      	cmp	r3, r1
 800f2c2:	bf01      	itttt	eq
 800f2c4:	6819      	ldreq	r1, [r3, #0]
 800f2c6:	685b      	ldreq	r3, [r3, #4]
 800f2c8:	1949      	addeq	r1, r1, r5
 800f2ca:	6021      	streq	r1, [r4, #0]
 800f2cc:	e7ed      	b.n	800f2aa <_free_r+0x22>
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	b10b      	cbz	r3, 800f2d8 <_free_r+0x50>
 800f2d4:	42a3      	cmp	r3, r4
 800f2d6:	d9fa      	bls.n	800f2ce <_free_r+0x46>
 800f2d8:	6811      	ldr	r1, [r2, #0]
 800f2da:	1855      	adds	r5, r2, r1
 800f2dc:	42a5      	cmp	r5, r4
 800f2de:	d10b      	bne.n	800f2f8 <_free_r+0x70>
 800f2e0:	6824      	ldr	r4, [r4, #0]
 800f2e2:	4421      	add	r1, r4
 800f2e4:	1854      	adds	r4, r2, r1
 800f2e6:	42a3      	cmp	r3, r4
 800f2e8:	6011      	str	r1, [r2, #0]
 800f2ea:	d1e0      	bne.n	800f2ae <_free_r+0x26>
 800f2ec:	681c      	ldr	r4, [r3, #0]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	6053      	str	r3, [r2, #4]
 800f2f2:	4421      	add	r1, r4
 800f2f4:	6011      	str	r1, [r2, #0]
 800f2f6:	e7da      	b.n	800f2ae <_free_r+0x26>
 800f2f8:	d902      	bls.n	800f300 <_free_r+0x78>
 800f2fa:	230c      	movs	r3, #12
 800f2fc:	6003      	str	r3, [r0, #0]
 800f2fe:	e7d6      	b.n	800f2ae <_free_r+0x26>
 800f300:	6825      	ldr	r5, [r4, #0]
 800f302:	1961      	adds	r1, r4, r5
 800f304:	428b      	cmp	r3, r1
 800f306:	bf04      	itt	eq
 800f308:	6819      	ldreq	r1, [r3, #0]
 800f30a:	685b      	ldreq	r3, [r3, #4]
 800f30c:	6063      	str	r3, [r4, #4]
 800f30e:	bf04      	itt	eq
 800f310:	1949      	addeq	r1, r1, r5
 800f312:	6021      	streq	r1, [r4, #0]
 800f314:	6054      	str	r4, [r2, #4]
 800f316:	e7ca      	b.n	800f2ae <_free_r+0x26>
 800f318:	b003      	add	sp, #12
 800f31a:	bd30      	pop	{r4, r5, pc}
 800f31c:	24001d18 	.word	0x24001d18

0800f320 <_malloc_usable_size_r>:
 800f320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f324:	1f18      	subs	r0, r3, #4
 800f326:	2b00      	cmp	r3, #0
 800f328:	bfbc      	itt	lt
 800f32a:	580b      	ldrlt	r3, [r1, r0]
 800f32c:	18c0      	addlt	r0, r0, r3
 800f32e:	4770      	bx	lr

0800f330 <__retarget_lock_acquire_recursive>:
 800f330:	4770      	bx	lr

0800f332 <__retarget_lock_release_recursive>:
 800f332:	4770      	bx	lr

0800f334 <_init>:
 800f334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f336:	bf00      	nop
 800f338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f33a:	bc08      	pop	{r3}
 800f33c:	469e      	mov	lr, r3
 800f33e:	4770      	bx	lr

0800f340 <_fini>:
 800f340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f342:	bf00      	nop
 800f344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f346:	bc08      	pop	{r3}
 800f348:	469e      	mov	lr, r3
 800f34a:	4770      	bx	lr
