
0210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dea0  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  0800e170  0800e170  0001e170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e404  0800e404  0001e404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800e40c  0800e40c  0001e40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e414  0800e414  0001e414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800e418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001b78  24000078  0800e490  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001bf0  0800e490  00021bf0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001eaed  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000328d  00000000  00000000  0003eb93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001410  00000000  00000000  00041e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001320  00000000  00000000  00043230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034d6b  00000000  00000000  00044550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019f18  00000000  00000000  000792bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001533f3  00000000  00000000  000931d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e65c6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005a60  00000000  00000000  001e6618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e158 	.word	0x0800e158

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800e158 	.word	0x0800e158

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PV1 = 0, PV2 = 0, PV3 = 0, PV4 = 0;
 8000684:	499c      	ldr	r1, [pc, #624]	; (80008f8 <main+0x278>)
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c1 2300 	strd	r2, r3, [r1]
 8000692:	499a      	ldr	r1, [pc, #616]	; (80008fc <main+0x27c>)
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c1 2300 	strd	r2, r3, [r1]
 80006a0:	4997      	ldr	r1, [pc, #604]	; (8000900 <main+0x280>)
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e9c1 2300 	strd	r2, r3, [r1]
 80006ae:	4995      	ldr	r1, [pc, #596]	; (8000904 <main+0x284>)
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	f04f 0300 	mov.w	r3, #0
 80006b8:	e9c1 2300 	strd	r2, r3, [r1]
	SP1 = 0, SP2 = 0, SP3 = 0, SP4 = 0;
 80006bc:	4992      	ldr	r1, [pc, #584]	; (8000908 <main+0x288>)
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
 80006ca:	4990      	ldr	r1, [pc, #576]	; (800090c <main+0x28c>)
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c1 2300 	strd	r2, r3, [r1]
 80006d8:	498d      	ldr	r1, [pc, #564]	; (8000910 <main+0x290>)
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
 80006e6:	498b      	ldr	r1, [pc, #556]	; (8000914 <main+0x294>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]

	n = 0;
 80006f4:	4b88      	ldr	r3, [pc, #544]	; (8000918 <main+0x298>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	kkk = 0;
 80006fa:	4b88      	ldr	r3, [pc, #544]	; (800091c <main+0x29c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
	count = 0;
 8000700:	4b87      	ldr	r3, [pc, #540]	; (8000920 <main+0x2a0>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	error1 = PV1 - SP1;
 8000706:	4b7c      	ldr	r3, [pc, #496]	; (80008f8 <main+0x278>)
 8000708:	ed93 6b00 	vldr	d6, [r3]
 800070c:	4b7e      	ldr	r3, [pc, #504]	; (8000908 <main+0x288>)
 800070e:	ed93 7b00 	vldr	d7, [r3]
 8000712:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000716:	4b83      	ldr	r3, [pc, #524]	; (8000924 <main+0x2a4>)
 8000718:	ed83 7b00 	vstr	d7, [r3]
	error2 = PV2 - SP2;
 800071c:	4b77      	ldr	r3, [pc, #476]	; (80008fc <main+0x27c>)
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	4b7a      	ldr	r3, [pc, #488]	; (800090c <main+0x28c>)
 8000724:	ed93 7b00 	vldr	d7, [r3]
 8000728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072c:	4b7e      	ldr	r3, [pc, #504]	; (8000928 <main+0x2a8>)
 800072e:	ed83 7b00 	vstr	d7, [r3]
	error3 = PV3 - SP3;
 8000732:	4b73      	ldr	r3, [pc, #460]	; (8000900 <main+0x280>)
 8000734:	ed93 6b00 	vldr	d6, [r3]
 8000738:	4b75      	ldr	r3, [pc, #468]	; (8000910 <main+0x290>)
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000742:	4b7a      	ldr	r3, [pc, #488]	; (800092c <main+0x2ac>)
 8000744:	ed83 7b00 	vstr	d7, [r3]
	error4 = PV4 - SP4;
 8000748:	4b6e      	ldr	r3, [pc, #440]	; (8000904 <main+0x284>)
 800074a:	ed93 6b00 	vldr	d6, [r3]
 800074e:	4b71      	ldr	r3, [pc, #452]	; (8000914 <main+0x294>)
 8000750:	ed93 7b00 	vldr	d7, [r3]
 8000754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000758:	4b75      	ldr	r3, [pc, #468]	; (8000930 <main+0x2b0>)
 800075a:	ed83 7b00 	vstr	d7, [r3]
	enc1 = 0, enc2 = 0, enc3 = 0, enc4 = 0;
 800075e:	4b75      	ldr	r3, [pc, #468]	; (8000934 <main+0x2b4>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	4b74      	ldr	r3, [pc, #464]	; (8000938 <main+0x2b8>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	4b74      	ldr	r3, [pc, #464]	; (800093c <main+0x2bc>)
 800076c:	2200      	movs	r2, #0
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	4b73      	ldr	r3, [pc, #460]	; (8000940 <main+0x2c0>)
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]

	Kp1 = 1.314238; // blue
 8000776:	4973      	ldr	r1, [pc, #460]	; (8000944 <main+0x2c4>)
 8000778:	a357      	add	r3, pc, #348	; (adr r3, 80008d8 <main+0x258>)
 800077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 = 37.12271; // blue
 8000782:	4971      	ldr	r1, [pc, #452]	; (8000948 <main+0x2c8>)
 8000784:	a356      	add	r3, pc, #344	; (adr r3, 80008e0 <main+0x260>)
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 = 1.8217; // purple
 800078e:	496f      	ldr	r1, [pc, #444]	; (800094c <main+0x2cc>)
 8000790:	a355      	add	r3, pc, #340	; (adr r3, 80008e8 <main+0x268>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 = 48.293; // purple
 800079a:	496d      	ldr	r1, [pc, #436]	; (8000950 <main+0x2d0>)
 800079c:	a354      	add	r3, pc, #336	; (adr r3, 80008f0 <main+0x270>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	e9c1 2300 	strd	r2, r3, [r1]
	Kp3 = 1;
 80007a6:	496b      	ldr	r1, [pc, #428]	; (8000954 <main+0x2d4>)
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	4b6a      	ldr	r3, [pc, #424]	; (8000958 <main+0x2d8>)
 80007ae:	e9c1 2300 	strd	r2, r3, [r1]
	Ki3 = 30;
 80007b2:	496a      	ldr	r1, [pc, #424]	; (800095c <main+0x2dc>)
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	4b69      	ldr	r3, [pc, #420]	; (8000960 <main+0x2e0>)
 80007ba:	e9c1 2300 	strd	r2, r3, [r1]
	Kp4 = 1;
 80007be:	4969      	ldr	r1, [pc, #420]	; (8000964 <main+0x2e4>)
 80007c0:	f04f 0200 	mov.w	r2, #0
 80007c4:	4b64      	ldr	r3, [pc, #400]	; (8000958 <main+0x2d8>)
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
	Ki4 = 30;
 80007ca:	4967      	ldr	r1, [pc, #412]	; (8000968 <main+0x2e8>)
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	4b63      	ldr	r3, [pc, #396]	; (8000960 <main+0x2e0>)
 80007d2:	e9c1 2300 	strd	r2, r3, [r1]

	error_last1 = 0;
 80007d6:	4965      	ldr	r1, [pc, #404]	; (800096c <main+0x2ec>)
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c1 2300 	strd	r2, r3, [r1]
	error_last2 = 0;
 80007e4:	4962      	ldr	r1, [pc, #392]	; (8000970 <main+0x2f0>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9c1 2300 	strd	r2, r3, [r1]
	error_last3 = 0;
 80007f2:	4960      	ldr	r1, [pc, #384]	; (8000974 <main+0x2f4>)
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c1 2300 	strd	r2, r3, [r1]
	error_last4 = 0;
 8000800:	495d      	ldr	r1, [pc, #372]	; (8000978 <main+0x2f8>)
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c1 2300 	strd	r2, r3, [r1]

	errorsum1 = 0;
 800080e:	495b      	ldr	r1, [pc, #364]	; (800097c <main+0x2fc>)
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum2 = 0;
 800081c:	4958      	ldr	r1, [pc, #352]	; (8000980 <main+0x300>)
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum3 = 0;
 800082a:	4956      	ldr	r1, [pc, #344]	; (8000984 <main+0x304>)
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum4 = 0;
 8000838:	4953      	ldr	r1, [pc, #332]	; (8000988 <main+0x308>)
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f004 f893 	bl	8004970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f8b1 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f000 fd81 	bl	8001354 <MX_GPIO_Init>
  MX_DMA_Init();
 8000852:	f000 fd57 	bl	8001304 <MX_DMA_Init>
  MX_TIM2_Init();
 8000856:	f000 f9a9 	bl	8000bac <MX_TIM2_Init>
  MX_TIM3_Init();
 800085a:	f000 f9f5 	bl	8000c48 <MX_TIM3_Init>
  MX_TIM4_Init();
 800085e:	f000 fa49 	bl	8000cf4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000862:	f000 faff 	bl	8000e64 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000866:	f000 fb3d 	bl	8000ee4 <MX_TIM7_Init>
  MX_TIM1_Init();
 800086a:	f000 f90f 	bl	8000a8c <MX_TIM1_Init>
  MX_TIM5_Init();
 800086e:	f000 fa9d 	bl	8000dac <MX_TIM5_Init>
  MX_TIM8_Init();
 8000872:	f000 fb6d 	bl	8000f50 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000876:	f000 fbc5 	bl	8001004 <MX_TIM15_Init>
  MX_TIM23_Init();
 800087a:	f000 fc4b 	bl	8001114 <MX_TIM23_Init>
  MX_TIM24_Init();
 800087e:	f000 fc9f 	bl	80011c0 <MX_TIM24_Init>
  MX_USART3_UART_Init();
 8000882:	f000 fcf3 	bl	800126c <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000886:	4841      	ldr	r0, [pc, #260]	; (800098c <main+0x30c>)
 8000888:	f009 fcf8 	bl	800a27c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 800088c:	2100      	movs	r1, #0
 800088e:	4840      	ldr	r0, [pc, #256]	; (8000990 <main+0x310>)
 8000890:	f009 ffee 	bl	800a870 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 8000894:	2100      	movs	r1, #0
 8000896:	483f      	ldr	r0, [pc, #252]	; (8000994 <main+0x314>)
 8000898:	f009 ffea 	bl	800a870 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 800089c:	2100      	movs	r1, #0
 800089e:	483e      	ldr	r0, [pc, #248]	; (8000998 <main+0x318>)
 80008a0:	f009 ffe6 	bl	800a870 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80008a4:	2100      	movs	r1, #0
 80008a6:	483d      	ldr	r0, [pc, #244]	; (800099c <main+0x31c>)
 80008a8:	f009 ffe2 	bl	800a870 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80008ac:	2100      	movs	r1, #0
 80008ae:	483c      	ldr	r0, [pc, #240]	; (80009a0 <main+0x320>)
 80008b0:	f009 fdc2 	bl	800a438 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80008b4:	2100      	movs	r1, #0
 80008b6:	483b      	ldr	r0, [pc, #236]	; (80009a4 <main+0x324>)
 80008b8:	f009 fdbe 	bl	800a438 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80008bc:	2100      	movs	r1, #0
 80008be:	483a      	ldr	r0, [pc, #232]	; (80009a8 <main+0x328>)
 80008c0:	f009 fdba 	bl	800a438 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008c4:	2100      	movs	r1, #0
 80008c6:	4839      	ldr	r0, [pc, #228]	; (80009ac <main+0x32c>)
 80008c8:	f009 fdb6 	bl	800a438 <HAL_TIM_PWM_Start>

  setup();
 80008cc:	f002 fc94 	bl	80031f8 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80008d0:	f002 fca2 	bl	8003218 <loop>
 80008d4:	e7fc      	b.n	80008d0 <main+0x250>
 80008d6:	bf00      	nop
 80008d8:	6cd29132 	.word	0x6cd29132
 80008dc:	3ff5071e 	.word	0x3ff5071e
 80008e0:	f6167232 	.word	0xf6167232
 80008e4:	40428fb4 	.word	0x40428fb4
 80008e8:	e631f8a1 	.word	0xe631f8a1
 80008ec:	3ffd25ae 	.word	0x3ffd25ae
 80008f0:	0624dd2f 	.word	0x0624dd2f
 80008f4:	40482581 	.word	0x40482581
 80008f8:	24000558 	.word	0x24000558
 80008fc:	24000560 	.word	0x24000560
 8000900:	24000568 	.word	0x24000568
 8000904:	24000570 	.word	0x24000570
 8000908:	24000578 	.word	0x24000578
 800090c:	24000580 	.word	0x24000580
 8000910:	24000588 	.word	0x24000588
 8000914:	24000590 	.word	0x24000590
 8000918:	24000660 	.word	0x24000660
 800091c:	24000664 	.word	0x24000664
 8000920:	24000668 	.word	0x24000668
 8000924:	24000598 	.word	0x24000598
 8000928:	240005a0 	.word	0x240005a0
 800092c:	240005a8 	.word	0x240005a8
 8000930:	240005b0 	.word	0x240005b0
 8000934:	240005b8 	.word	0x240005b8
 8000938:	240005ba 	.word	0x240005ba
 800093c:	240005bc 	.word	0x240005bc
 8000940:	240005be 	.word	0x240005be
 8000944:	240005c0 	.word	0x240005c0
 8000948:	240005e0 	.word	0x240005e0
 800094c:	240005c8 	.word	0x240005c8
 8000950:	240005e8 	.word	0x240005e8
 8000954:	240005d0 	.word	0x240005d0
 8000958:	3ff00000 	.word	0x3ff00000
 800095c:	240005f0 	.word	0x240005f0
 8000960:	403e0000 	.word	0x403e0000
 8000964:	240005d8 	.word	0x240005d8
 8000968:	240005f8 	.word	0x240005f8
 800096c:	24000620 	.word	0x24000620
 8000970:	24000628 	.word	0x24000628
 8000974:	24000630 	.word	0x24000630
 8000978:	24000638 	.word	0x24000638
 800097c:	24000640 	.word	0x24000640
 8000980:	24000648 	.word	0x24000648
 8000984:	24000650 	.word	0x24000650
 8000988:	24000658 	.word	0x24000658
 800098c:	240000e0 	.word	0x240000e0
 8000990:	2400012c 	.word	0x2400012c
 8000994:	240002a8 	.word	0x240002a8
 8000998:	24000340 	.word	0x24000340
 800099c:	2400038c 	.word	0x2400038c
 80009a0:	24000178 	.word	0x24000178
 80009a4:	240001c4 	.word	0x240001c4
 80009a8:	240002f4 	.word	0x240002f4
 80009ac:	24000094 	.word	0x24000094

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b09c      	sub	sp, #112	; 0x70
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	224c      	movs	r2, #76	; 0x4c
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f00d fa40 	bl	800de44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2220      	movs	r2, #32
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f00d fa3a 	bl	800de44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009d0:	2002      	movs	r0, #2
 80009d2:	f007 f96b 	bl	8007cac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <SystemClock_Config+0xd8>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	4a2a      	ldr	r2, [pc, #168]	; (8000a88 <SystemClock_Config+0xd8>)
 80009e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009e4:	6193      	str	r3, [r2, #24]
 80009e6:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <SystemClock_Config+0xd8>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009f2:	bf00      	nop
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <SystemClock_Config+0xd8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a00:	d1f8      	bne.n	80009f4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a06:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a10:	2302      	movs	r3, #2
 8000a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a14:	2304      	movs	r3, #4
 8000a16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a18:	23a8      	movs	r3, #168	; 0xa8
 8000a1a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a20:	2304      	movs	r3, #4
 8000a22:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f007 f971 	bl	8007d20 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a44:	f001 f9b8 	bl	8001db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	233f      	movs	r3, #63	; 0x3f
 8000a4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a54:	2308      	movs	r3, #8
 8000a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a58:	2340      	movs	r3, #64	; 0x40
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a5c:	2340      	movs	r3, #64	; 0x40
 8000a5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a66:	2340      	movs	r3, #64	; 0x40
 8000a68:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f007 fd04 	bl	800847c <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a7a:	f001 f99d 	bl	8001db8 <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3770      	adds	r7, #112	; 0x70
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	58024800 	.word	0x58024800

08000a8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b098      	sub	sp, #96	; 0x60
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2234      	movs	r2, #52	; 0x34
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f00d f9c3 	bl	800de44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000abe:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000ac0:	4a39      	ldr	r2, [pc, #228]	; (8000ba8 <MX_TIM1_Init+0x11c>)
 8000ac2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 274;
 8000ac4:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000ac6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000aca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b35      	ldr	r3, [pc, #212]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000ad2:	4b34      	ldr	r3, [pc, #208]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000ad4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aec:	482d      	ldr	r0, [pc, #180]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000aee:	f009 fc4b 	bl	800a388 <HAL_TIM_PWM_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000af8:	f001 f95e 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4825      	ldr	r0, [pc, #148]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000b10:	f00a fed0 	bl	800b8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b1a:	f001 f94d 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1e:	2360      	movs	r3, #96	; 0x60
 8000b20:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b26:	2300      	movs	r3, #0
 8000b28:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4619      	mov	r1, r3
 8000b42:	4818      	ldr	r0, [pc, #96]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000b44:	f00a f842 	bl	800abcc <HAL_TIM_PWM_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000b4e:	f001 f933 	bl	8001db8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000b88:	f00a ff30 	bl	800b9ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000b92:	f001 f911 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b96:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000b98:	f003 fc0e 	bl	80043b8 <HAL_TIM_MspPostInit>

}
 8000b9c:	bf00      	nop
 8000b9e:	3760      	adds	r7, #96	; 0x60
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	24000094 	.word	0x24000094
 8000ba8:	40010000 	.word	0x40010000

08000bac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000bcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000bd4:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000bd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000be2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bf4:	4813      	ldr	r0, [pc, #76]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000bf6:	f009 fae9 	bl	800a1cc <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c00:	f001 f8da 	bl	8001db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000c12:	f00a f8ef 	bl	800adf4 <HAL_TIM_ConfigClockSource>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c1c:	f001 f8cc 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000c2e:	f00a fe41 	bl	800b8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c38:	f001 f8be 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	240000e0 	.word	0x240000e0

08000c48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	; 0x30
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	2224      	movs	r2, #36	; 0x24
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f00d f8f4 	bl	800de44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <MX_TIM3_Init+0xa8>)
 8000c6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c94:	2301      	movs	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480d      	ldr	r0, [pc, #52]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000cb8:	f009 fd34 	bl	800a724 <HAL_TIM_Encoder_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000cc2:	f001 f879 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000cd4:	f00a fdee 	bl	800b8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000cde:	f001 f86b 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	3730      	adds	r7, #48	; 0x30
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2400012c 	.word	0x2400012c
 8000cf0:	40000400 	.word	0x40000400

08000cf4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d1a:	4a23      	ldr	r2, [pc, #140]	; (8000da8 <MX_TIM4_Init+0xb4>)
 8000d1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 274;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d20:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000d24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d26:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d40:	4818      	ldr	r0, [pc, #96]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d42:	f009 fb21 	bl	800a388 <HAL_TIM_PWM_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000d4c:	f001 f834 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4811      	ldr	r0, [pc, #68]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d60:	f00a fda8 	bl	800b8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000d6a:	f001 f825 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6e:	2360      	movs	r3, #96	; 0x60
 8000d70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	4619      	mov	r1, r3
 8000d84:	4807      	ldr	r0, [pc, #28]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d86:	f009 ff21 	bl	800abcc <HAL_TIM_PWM_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000d90:	f001 f812 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d94:	4803      	ldr	r0, [pc, #12]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d96:	f003 fb0f 	bl	80043b8 <HAL_TIM_MspPostInit>

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	24000178 	.word	0x24000178
 8000da8:	40000800 	.word	0x40000800

08000dac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
 8000dcc:	615a      	str	r2, [r3, #20]
 8000dce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000dd2:	4a23      	ldr	r2, [pc, #140]	; (8000e60 <MX_TIM5_Init+0xb4>)
 8000dd4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 274;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000dd8:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000ddc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000de6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000df8:	4818      	ldr	r0, [pc, #96]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000dfa:	f009 fac5 	bl	800a388 <HAL_TIM_PWM_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8000e04:	f000 ffd8 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	4811      	ldr	r0, [pc, #68]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000e18:	f00a fd4c 	bl	800b8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8000e22:	f000 ffc9 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e26:	2360      	movs	r3, #96	; 0x60
 8000e28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000e3e:	f009 fec5 	bl	800abcc <HAL_TIM_PWM_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000e48:	f000 ffb6 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000e4e:	f003 fab3 	bl	80043b8 <HAL_TIM_MspPostInit>

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	240001c4 	.word	0x240001c4
 8000e60:	40000c00 	.word	0x40000c00

08000e64 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_TIM6_Init+0x78>)
 8000e76:	4a1a      	ldr	r2, [pc, #104]	; (8000ee0 <MX_TIM6_Init+0x7c>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_TIM6_Init+0x78>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_TIM6_Init+0x78>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_TIM6_Init+0x78>)
 8000e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e8c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_TIM6_Init+0x78>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e94:	4811      	ldr	r0, [pc, #68]	; (8000edc <MX_TIM6_Init+0x78>)
 8000e96:	f009 f999 	bl	800a1cc <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ea0:	f000 ff8a 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <MX_TIM6_Init+0x78>)
 8000ea8:	f009 fbe2 	bl	800a670 <HAL_TIM_OnePulse_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000eb2:	f000 ff81 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <MX_TIM6_Init+0x78>)
 8000ec4:	f00a fcf6 	bl	800b8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f000 ff73 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	24000210 	.word	0x24000210
 8000ee0:	40001000 	.word	0x40001000

08000ee4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_TIM7_Init+0x64>)
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <MX_TIM7_Init+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_TIM7_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_TIM7_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_TIM7_Init+0x64>)
 8000f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_TIM7_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <MX_TIM7_Init+0x64>)
 8000f16:	f009 f959 	bl	800a1cc <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f20:	f000 ff4a 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_TIM7_Init+0x64>)
 8000f32:	f00a fcbf 	bl	800b8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f3c:	f000 ff3c 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	2400025c 	.word	0x2400025c
 8000f4c:	40001400 	.word	0x40001400

08000f50 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	2224      	movs	r2, #36	; 0x24
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f00c ff70 	bl	800de44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f64:	463b      	mov	r3, r7
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000f70:	4a23      	ldr	r2, [pc, #140]	; (8001000 <MX_TIM8_Init+0xb0>)
 8000f72:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f86:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f88:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000fc6:	f009 fbad 	bl	800a724 <HAL_TIM_Encoder_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000fd0:	f000 fef2 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000fe6:	f00a fc65 	bl	800b8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000ff0:	f000 fee2 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3730      	adds	r7, #48	; 0x30
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	240002a8 	.word	0x240002a8
 8001000:	40010400 	.word	0x40010400

08001004 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b098      	sub	sp, #96	; 0x60
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001016:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2234      	movs	r2, #52	; 0x34
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f00c ff07 	bl	800de44 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001036:	4b35      	ldr	r3, [pc, #212]	; (800110c <MX_TIM15_Init+0x108>)
 8001038:	4a35      	ldr	r2, [pc, #212]	; (8001110 <MX_TIM15_Init+0x10c>)
 800103a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 274;
 800103c:	4b33      	ldr	r3, [pc, #204]	; (800110c <MX_TIM15_Init+0x108>)
 800103e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001042:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b31      	ldr	r3, [pc, #196]	; (800110c <MX_TIM15_Init+0x108>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800104a:	4b30      	ldr	r3, [pc, #192]	; (800110c <MX_TIM15_Init+0x108>)
 800104c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001050:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001052:	4b2e      	ldr	r3, [pc, #184]	; (800110c <MX_TIM15_Init+0x108>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001058:	4b2c      	ldr	r3, [pc, #176]	; (800110c <MX_TIM15_Init+0x108>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <MX_TIM15_Init+0x108>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001064:	4829      	ldr	r0, [pc, #164]	; (800110c <MX_TIM15_Init+0x108>)
 8001066:	f009 f98f 	bl	800a388 <HAL_TIM_PWM_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8001070:	f000 fea2 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800107c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001080:	4619      	mov	r1, r3
 8001082:	4822      	ldr	r0, [pc, #136]	; (800110c <MX_TIM15_Init+0x108>)
 8001084:	f00a fc16 	bl	800b8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 800108e:	f000 fe93 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001092:	2360      	movs	r3, #96	; 0x60
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109a:	2300      	movs	r3, #0
 800109c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800109e:	2300      	movs	r3, #0
 80010a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	4815      	ldr	r0, [pc, #84]	; (800110c <MX_TIM15_Init+0x108>)
 80010b8:	f009 fd88 	bl	800abcc <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 80010c2:	f000 fe79 	bl	8001db8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <MX_TIM15_Init+0x108>)
 80010ee:	f00a fc7d 	bl	800b9ec <HAL_TIMEx_ConfigBreakDeadTime>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 80010f8:	f000 fe5e 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <MX_TIM15_Init+0x108>)
 80010fe:	f003 f95b 	bl	80043b8 <HAL_TIM_MspPostInit>

}
 8001102:	bf00      	nop
 8001104:	3760      	adds	r7, #96	; 0x60
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	240002f4 	.word	0x240002f4
 8001110:	40014000 	.word	0x40014000

08001114 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	2224      	movs	r2, #36	; 0x24
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f00c fe8e 	bl	800de44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_TIM23_Init+0xa4>)
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <MX_TIM23_Init+0xa8>)
 8001136:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_TIM23_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_TIM23_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 65535;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_TIM23_Init+0xa4>)
 8001146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114a:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_TIM23_Init+0xa4>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_TIM23_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001158:	2303      	movs	r3, #3
 800115a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001160:	2301      	movs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001170:	2301      	movs	r3, #1
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4619      	mov	r1, r3
 8001182:	480d      	ldr	r0, [pc, #52]	; (80011b8 <MX_TIM23_Init+0xa4>)
 8001184:	f009 face 	bl	800a724 <HAL_TIM_Encoder_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 800118e:	f000 fe13 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_TIM23_Init+0xa4>)
 80011a0:	f00a fb88 	bl	800b8b4 <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 80011aa:	f000 fe05 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3730      	adds	r7, #48	; 0x30
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	24000340 	.word	0x24000340
 80011bc:	4000e000 	.word	0x4000e000

080011c0 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2224      	movs	r2, #36	; 0x24
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f00c fe38 	bl	800de44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_TIM24_Init+0xa4>)
 80011e0:	4a21      	ldr	r2, [pc, #132]	; (8001268 <MX_TIM24_Init+0xa8>)
 80011e2:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_TIM24_Init+0xa4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <MX_TIM24_Init+0xa4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 65535;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_TIM24_Init+0xa4>)
 80011f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f6:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_TIM24_Init+0xa4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_TIM24_Init+0xa4>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001204:	2303      	movs	r3, #3
 8001206:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800121c:	2301      	movs	r3, #1
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4619      	mov	r1, r3
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_TIM24_Init+0xa4>)
 8001230:	f009 fa78 	bl	800a724 <HAL_TIM_Encoder_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 800123a:	f000 fdbd 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8001246:	463b      	mov	r3, r7
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <MX_TIM24_Init+0xa4>)
 800124c:	f00a fb32 	bl	800b8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 8001256:	f000 fdaf 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3730      	adds	r7, #48	; 0x30
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2400038c 	.word	0x2400038c
 8001268:	4000e400 	.word	0x4000e400

0800126c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001272:	4a23      	ldr	r2, [pc, #140]	; (8001300 <MX_USART3_UART_Init+0x94>)
 8001274:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_USART3_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_USART3_UART_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012b4:	4811      	ldr	r0, [pc, #68]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012b6:	f00a fc57 	bl	800bb68 <HAL_UART_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012c0:	f000 fd7a 	bl	8001db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012c8:	f00c fc9e 	bl	800dc08 <HAL_UARTEx_SetTxFifoThreshold>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012d2:	f000 fd71 	bl	8001db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d6:	2100      	movs	r1, #0
 80012d8:	4808      	ldr	r0, [pc, #32]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012da:	f00c fcd3 	bl	800dc84 <HAL_UARTEx_SetRxFifoThreshold>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012e4:	f000 fd68 	bl	8001db8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012ea:	f00c fc54 	bl	800db96 <HAL_UARTEx_DisableFifoMode>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012f4:	f000 fd60 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	240003d8 	.word	0x240003d8
 8001300:	40004800 	.word	0x40004800

08001304 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_DMA_Init+0x4c>)
 800130c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001310:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <MX_DMA_Init+0x4c>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <MX_DMA_Init+0x4c>)
 800131c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	200b      	movs	r0, #11
 800132e:	f003 fc8c 	bl	8004c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001332:	200b      	movs	r0, #11
 8001334:	f003 fca3 	bl	8004c7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	200c      	movs	r0, #12
 800133e:	f003 fc84 	bl	8004c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001342:	200c      	movs	r0, #12
 8001344:	f003 fc9b 	bl	8004c7e <HAL_NVIC_EnableIRQ>

}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	58024400 	.word	0x58024400

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	; 0x38
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136a:	4bb1      	ldr	r3, [pc, #708]	; (8001630 <MX_GPIO_Init+0x2dc>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	4aaf      	ldr	r2, [pc, #700]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137a:	4bad      	ldr	r3, [pc, #692]	; (8001630 <MX_GPIO_Init+0x2dc>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	623b      	str	r3, [r7, #32]
 8001386:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001388:	4ba9      	ldr	r3, [pc, #676]	; (8001630 <MX_GPIO_Init+0x2dc>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138e:	4aa8      	ldr	r2, [pc, #672]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001398:	4ba5      	ldr	r3, [pc, #660]	; (8001630 <MX_GPIO_Init+0x2dc>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	61fb      	str	r3, [r7, #28]
 80013a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013a6:	4ba2      	ldr	r3, [pc, #648]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ac:	4aa0      	ldr	r2, [pc, #640]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013ae:	f043 0320 	orr.w	r3, r3, #32
 80013b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b6:	4b9e      	ldr	r3, [pc, #632]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013bc:	f003 0320 	and.w	r3, r3, #32
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c4:	4b9a      	ldr	r3, [pc, #616]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	4a99      	ldr	r2, [pc, #612]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d4:	4b96      	ldr	r3, [pc, #600]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b93      	ldr	r3, [pc, #588]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	4a91      	ldr	r2, [pc, #580]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f2:	4b8f      	ldr	r3, [pc, #572]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001400:	4b8b      	ldr	r3, [pc, #556]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	4a8a      	ldr	r2, [pc, #552]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001410:	4b87      	ldr	r3, [pc, #540]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141e:	4b84      	ldr	r3, [pc, #528]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	4a82      	ldr	r2, [pc, #520]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142e:	4b80      	ldr	r3, [pc, #512]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800143c:	4b7c      	ldr	r3, [pc, #496]	; (8001630 <MX_GPIO_Init+0x2dc>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001442:	4a7b      	ldr	r2, [pc, #492]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144c:	4b78      	ldr	r3, [pc, #480]	; (8001630 <MX_GPIO_Init+0x2dc>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	f244 0101 	movw	r1, #16385	; 0x4001
 8001460:	4874      	ldr	r0, [pc, #464]	; (8001634 <MX_GPIO_Init+0x2e0>)
 8001462:	f006 fc09 	bl	8007c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 800146c:	4872      	ldr	r0, [pc, #456]	; (8001638 <MX_GPIO_Init+0x2e4>)
 800146e:	f006 fc03 	bl	8007c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2178      	movs	r1, #120	; 0x78
 8001476:	4871      	ldr	r0, [pc, #452]	; (800163c <MX_GPIO_Init+0x2e8>)
 8001478:	f006 fbfe 	bl	8007c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001482:	486f      	ldr	r0, [pc, #444]	; (8001640 <MX_GPIO_Init+0x2ec>)
 8001484:	f006 fbf8 	bl	8007c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148e:	486d      	ldr	r0, [pc, #436]	; (8001644 <MX_GPIO_Init+0x2f0>)
 8001490:	f006 fbf2 	bl	8007c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	2102      	movs	r1, #2
 8001498:	486b      	ldr	r0, [pc, #428]	; (8001648 <MX_GPIO_Init+0x2f4>)
 800149a:	f006 fbed 	bl	8007c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800149e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	4863      	ldr	r0, [pc, #396]	; (8001640 <MX_GPIO_Init+0x2ec>)
 80014b4:	f006 fa38 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014b8:	2332      	movs	r3, #50	; 0x32
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014c8:	230b      	movs	r3, #11
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d0:	4619      	mov	r1, r3
 80014d2:	485b      	ldr	r0, [pc, #364]	; (8001640 <MX_GPIO_Init+0x2ec>)
 80014d4:	f006 fa28 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014d8:	2386      	movs	r3, #134	; 0x86
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014e8:	230b      	movs	r3, #11
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	4854      	ldr	r0, [pc, #336]	; (8001644 <MX_GPIO_Init+0x2f0>)
 80014f4:	f006 fa18 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80014f8:	f244 0301 	movw	r3, #16385	; 0x4001
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	4848      	ldr	r0, [pc, #288]	; (8001634 <MX_GPIO_Init+0x2e0>)
 8001512:	f006 fa09 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001528:	230b      	movs	r3, #11
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	4840      	ldr	r0, [pc, #256]	; (8001634 <MX_GPIO_Init+0x2e0>)
 8001534:	f006 f9f8 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD14 PD15 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8001538:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	4839      	ldr	r0, [pc, #228]	; (8001638 <MX_GPIO_Init+0x2e4>)
 8001552:	f006 f9e9 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001556:	2378      	movs	r3, #120	; 0x78
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	4833      	ldr	r0, [pc, #204]	; (800163c <MX_GPIO_Init+0x2e8>)
 800156e:	f006 f9db 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001576:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	4619      	mov	r1, r3
 8001586:	482d      	ldr	r0, [pc, #180]	; (800163c <MX_GPIO_Init+0x2e8>)
 8001588:	f006 f9ce 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800158c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	4826      	ldr	r0, [pc, #152]	; (8001640 <MX_GPIO_Init+0x2ec>)
 80015a6:	f006 f9bf 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4820      	ldr	r0, [pc, #128]	; (8001644 <MX_GPIO_Init+0x2f0>)
 80015c4:	f006 f9b0 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80015c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80015da:	230a      	movs	r3, #10
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	4817      	ldr	r0, [pc, #92]	; (8001644 <MX_GPIO_Init+0x2f0>)
 80015e6:	f006 f99f 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80015ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fc:	230b      	movs	r3, #11
 80015fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	480d      	ldr	r0, [pc, #52]	; (800163c <MX_GPIO_Init+0x2e8>)
 8001608:	f006 f98e 	bl	8007928 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800160c:	2302      	movs	r3, #2
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	4809      	ldr	r0, [pc, #36]	; (8001648 <MX_GPIO_Init+0x2f4>)
 8001624:	f006 f980 	bl	8007928 <HAL_GPIO_Init>

}
 8001628:	bf00      	nop
 800162a:	3738      	adds	r7, #56	; 0x38
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	58024400 	.word	0x58024400
 8001634:	58020400 	.word	0x58020400
 8001638:	58020c00 	.word	0x58020c00
 800163c:	58021800 	.word	0x58021800
 8001640:	58020800 	.word	0x58020800
 8001644:	58020000 	.word	0x58020000
 8001648:	58021000 	.word	0x58021000
 800164c:	00000000 	.word	0x00000000

08001650 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
}
}
PID ?�度*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001660:	f040 837c 	bne.w	8001d5c <HAL_TIM_PeriodElapsedCallback+0x70c>
		kkk += 1;
 8001664:	4bb4      	ldr	r3, [pc, #720]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	4ab3      	ldr	r2, [pc, #716]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800166c:	6013      	str	r3, [r2, #0]
		if(kkk == 10){
 800166e:	4bb2      	ldr	r3, [pc, #712]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b0a      	cmp	r3, #10
 8001674:	d102      	bne.n	800167c <HAL_TIM_PeriodElapsedCallback+0x2c>
			// publish_vel();
			kkk = 0;
 8001676:	4bb0      	ldr	r3, [pc, #704]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
		}


		enc1 = __HAL_TIM_GetCounter(&htim3);
 800167c:	4baf      	ldr	r3, [pc, #700]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	b21a      	sxth	r2, r3
 8001684:	4bae      	ldr	r3, [pc, #696]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001686:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim8);
 8001688:	4bae      	ldr	r3, [pc, #696]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	b21a      	sxth	r2, r3
 8001690:	4bad      	ldr	r3, [pc, #692]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001692:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim23);
 8001694:	4bad      	ldr	r3, [pc, #692]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	b21a      	sxth	r2, r3
 800169c:	4bac      	ldr	r3, [pc, #688]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800169e:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim24);
 80016a0:	4bac      	ldr	r3, [pc, #688]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	4bab      	ldr	r3, [pc, #684]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80016aa:	801a      	strh	r2, [r3, #0]

		n++;
 80016ac:	4bab      	ldr	r3, [pc, #684]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	4aaa      	ldr	r2, [pc, #680]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80016b4:	6013      	str	r3, [r2, #0]

		PV1 = (double) enc1 / (4 * 512 * 36 * 0.001);
 80016b6:	4ba2      	ldr	r3, [pc, #648]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80016b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016c4:	ed9f 5b98 	vldr	d5, [pc, #608]	; 8001928 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 80016c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016cc:	4ba4      	ldr	r3, [pc, #656]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80016ce:	ed83 7b00 	vstr	d7, [r3]
		PV2 = (double) enc2 / (4 * 512 * 36 * 0.001);
 80016d2:	4b9d      	ldr	r3, [pc, #628]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80016d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d8:	ee07 3a90 	vmov	s15, r3
 80016dc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016e0:	ed9f 5b91 	vldr	d5, [pc, #580]	; 8001928 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 80016e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016e8:	4b9e      	ldr	r3, [pc, #632]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80016ea:	ed83 7b00 	vstr	d7, [r3]
		PV3 = (double) enc3 / (4 * 512 * 36 * 0.001);
 80016ee:	4b98      	ldr	r3, [pc, #608]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80016f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016fc:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8001928 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8001700:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001704:	4b98      	ldr	r3, [pc, #608]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001706:	ed83 7b00 	vstr	d7, [r3]
		PV4 = (double) enc4 / (4 * 512 * 36 * 0.001);
 800170a:	4b93      	ldr	r3, [pc, #588]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800170c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001718:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8001928 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 800171c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001720:	4b92      	ldr	r3, [pc, #584]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001722:	ed83 7b00 	vstr	d7, [r3]

 		__HAL_TIM_SetCounter(&htim3, 0);
 8001726:	4b85      	ldr	r3, [pc, #532]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim8, 0);
 800172e:	4b85      	ldr	r3, [pc, #532]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim23, 0);
 8001736:	4b85      	ldr	r3, [pc, #532]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim24, 0);
 800173e:	4b85      	ldr	r3, [pc, #532]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	; 0x24

		error1 = SP1 - PV1;
 8001746:	4b8a      	ldr	r3, [pc, #552]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001748:	ed93 6b00 	vldr	d6, [r3]
 800174c:	4b84      	ldr	r3, [pc, #528]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800174e:	ed93 7b00 	vldr	d7, [r3]
 8001752:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001756:	4b87      	ldr	r3, [pc, #540]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001758:	ed83 7b00 	vstr	d7, [r3]
		error2 = SP2 - PV2;
 800175c:	4b86      	ldr	r3, [pc, #536]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800175e:	ed93 6b00 	vldr	d6, [r3]
 8001762:	4b80      	ldr	r3, [pc, #512]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001764:	ed93 7b00 	vldr	d7, [r3]
 8001768:	ee36 7b47 	vsub.f64	d7, d6, d7
 800176c:	4b83      	ldr	r3, [pc, #524]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800176e:	ed83 7b00 	vstr	d7, [r3]
		error3 = SP3 - PV3;
 8001772:	4b83      	ldr	r3, [pc, #524]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001774:	ed93 6b00 	vldr	d6, [r3]
 8001778:	4b7b      	ldr	r3, [pc, #492]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800177a:	ed93 7b00 	vldr	d7, [r3]
 800177e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001782:	4b80      	ldr	r3, [pc, #512]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001784:	ed83 7b00 	vstr	d7, [r3]
		error4 = SP4 - PV4;
 8001788:	4b7f      	ldr	r3, [pc, #508]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800178a:	ed93 6b00 	vldr	d6, [r3]
 800178e:	4b77      	ldr	r3, [pc, #476]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001790:	ed93 7b00 	vldr	d7, [r3]
 8001794:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001798:	4b7c      	ldr	r3, [pc, #496]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800179a:	ed83 7b00 	vstr	d7, [r3]

		errorsum1 += error1;
 800179e:	4b7c      	ldr	r3, [pc, #496]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80017a0:	ed93 6b00 	vldr	d6, [r3]
 80017a4:	4b73      	ldr	r3, [pc, #460]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80017a6:	ed93 7b00 	vldr	d7, [r3]
 80017aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017ae:	4b78      	ldr	r3, [pc, #480]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80017b0:	ed83 7b00 	vstr	d7, [r3]
		errorsum2 += error2;
 80017b4:	4b77      	ldr	r3, [pc, #476]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017b6:	ed93 6b00 	vldr	d6, [r3]
 80017ba:	4b70      	ldr	r3, [pc, #448]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80017bc:	ed93 7b00 	vldr	d7, [r3]
 80017c0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017c4:	4b73      	ldr	r3, [pc, #460]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017c6:	ed83 7b00 	vstr	d7, [r3]
		errorsum3 += error3;
 80017ca:	4b73      	ldr	r3, [pc, #460]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80017cc:	ed93 6b00 	vldr	d6, [r3]
 80017d0:	4b6c      	ldr	r3, [pc, #432]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80017d2:	ed93 7b00 	vldr	d7, [r3]
 80017d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017da:	4b6f      	ldr	r3, [pc, #444]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80017dc:	ed83 7b00 	vstr	d7, [r3]
		errorsum4 += error4;
 80017e0:	4b6e      	ldr	r3, [pc, #440]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017e2:	ed93 6b00 	vldr	d6, [r3]
 80017e6:	4b69      	ldr	r3, [pc, #420]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80017e8:	ed93 7b00 	vldr	d7, [r3]
 80017ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017f0:	4b6a      	ldr	r3, [pc, #424]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017f2:	ed83 7b00 	vstr	d7, [r3]

		ut1 = Kp1 * error1 + Ki1 * errorsum1 * 0.001;
 80017f6:	4b6a      	ldr	r3, [pc, #424]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80017f8:	ed93 6b00 	vldr	d6, [r3]
 80017fc:	4b5d      	ldr	r3, [pc, #372]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80017fe:	ed93 7b00 	vldr	d7, [r3]
 8001802:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001806:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001808:	ed93 5b00 	vldr	d5, [r3]
 800180c:	4b60      	ldr	r3, [pc, #384]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800180e:	ed93 7b00 	vldr	d7, [r3]
 8001812:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001816:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001930 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 800181a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800181e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001822:	4b61      	ldr	r3, [pc, #388]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001824:	ed83 7b00 	vstr	d7, [r3]
		ut2 = Kp2 * error2 + Ki2 * errorsum2 * 0.001;
 8001828:	4b60      	ldr	r3, [pc, #384]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800182a:	ed93 6b00 	vldr	d6, [r3]
 800182e:	4b53      	ldr	r3, [pc, #332]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001830:	ed93 7b00 	vldr	d7, [r3]
 8001834:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001838:	4b5d      	ldr	r3, [pc, #372]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800183a:	ed93 5b00 	vldr	d5, [r3]
 800183e:	4b55      	ldr	r3, [pc, #340]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001840:	ed93 7b00 	vldr	d7, [r3]
 8001844:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001848:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8001930 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 800184c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001850:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001854:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001856:	ed83 7b00 	vstr	d7, [r3]
		ut3 = Kp3 * error3 + Ki3 * errorsum3 * 0.001;
 800185a:	4b57      	ldr	r3, [pc, #348]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800185c:	ed93 6b00 	vldr	d6, [r3]
 8001860:	4b48      	ldr	r3, [pc, #288]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001862:	ed93 7b00 	vldr	d7, [r3]
 8001866:	ee26 6b07 	vmul.f64	d6, d6, d7
 800186a:	4b54      	ldr	r3, [pc, #336]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800186c:	ed93 5b00 	vldr	d5, [r3]
 8001870:	4b49      	ldr	r3, [pc, #292]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001872:	ed93 7b00 	vldr	d7, [r3]
 8001876:	ee25 7b07 	vmul.f64	d7, d5, d7
 800187a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8001930 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 800187e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001882:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001886:	4b4e      	ldr	r3, [pc, #312]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001888:	ed83 7b00 	vstr	d7, [r3]
		ut4 = Kp4 * error4 + Ki4 * errorsum4 * 0.001;
 800188c:	4b4d      	ldr	r3, [pc, #308]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800188e:	ed93 6b00 	vldr	d6, [r3]
 8001892:	4b3e      	ldr	r3, [pc, #248]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001894:	ed93 7b00 	vldr	d7, [r3]
 8001898:	ee26 6b07 	vmul.f64	d6, d6, d7
 800189c:	4b4a      	ldr	r3, [pc, #296]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800189e:	ed93 5b00 	vldr	d5, [r3]
 80018a2:	4b3e      	ldr	r3, [pc, #248]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80018a4:	ed93 7b00 	vldr	d7, [r3]
 80018a8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80018ac:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8001930 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 80018b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80018b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018b8:	4b44      	ldr	r3, [pc, #272]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018ba:	ed83 7b00 	vstr	d7, [r3]

		if(ut1 > 1){
 80018be:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80018c0:	ed93 7b00 	vldr	d7, [r3]
 80018c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80018c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	dd06      	ble.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x290>
			ut1 = 1;
 80018d2:	4935      	ldr	r1, [pc, #212]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80018da:	e9c1 2300 	strd	r2, r3, [r1]
 80018de:	e00f      	b.n	8001900 <HAL_TIM_PeriodElapsedCallback+0x2b0>
		}else if(ut1 < -1){
 80018e0:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80018e2:	ed93 7b00 	vldr	d7, [r3]
 80018e6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80018ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	d505      	bpl.n	8001900 <HAL_TIM_PeriodElapsedCallback+0x2b0>
			ut1 = -1;
 80018f4:	492c      	ldr	r1, [pc, #176]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80018fc:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut2 > 1){
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001902:	ed93 7b00 	vldr	d7, [r3]
 8001906:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800190a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	dd61      	ble.n	80019d8 <HAL_TIM_PeriodElapsedCallback+0x388>
			ut2 = 1;
 8001914:	4927      	ldr	r1, [pc, #156]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800191c:	e9c1 2300 	strd	r2, r3, [r1]
 8001920:	e06a      	b.n	80019f8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 8001922:	bf00      	nop
 8001924:	f3af 8000 	nop.w
 8001928:	8d4fdf3c 	.word	0x8d4fdf3c
 800192c:	40526e97 	.word	0x40526e97
 8001930:	d2f1a9fc 	.word	0xd2f1a9fc
 8001934:	3f50624d 	.word	0x3f50624d
 8001938:	24000664 	.word	0x24000664
 800193c:	2400012c 	.word	0x2400012c
 8001940:	240005b8 	.word	0x240005b8
 8001944:	240002a8 	.word	0x240002a8
 8001948:	240005ba 	.word	0x240005ba
 800194c:	24000340 	.word	0x24000340
 8001950:	240005bc 	.word	0x240005bc
 8001954:	2400038c 	.word	0x2400038c
 8001958:	240005be 	.word	0x240005be
 800195c:	24000660 	.word	0x24000660
 8001960:	24000558 	.word	0x24000558
 8001964:	24000560 	.word	0x24000560
 8001968:	24000568 	.word	0x24000568
 800196c:	24000570 	.word	0x24000570
 8001970:	24000578 	.word	0x24000578
 8001974:	24000598 	.word	0x24000598
 8001978:	24000580 	.word	0x24000580
 800197c:	240005a0 	.word	0x240005a0
 8001980:	24000588 	.word	0x24000588
 8001984:	240005a8 	.word	0x240005a8
 8001988:	24000590 	.word	0x24000590
 800198c:	240005b0 	.word	0x240005b0
 8001990:	24000640 	.word	0x24000640
 8001994:	24000648 	.word	0x24000648
 8001998:	24000650 	.word	0x24000650
 800199c:	24000658 	.word	0x24000658
 80019a0:	240005c0 	.word	0x240005c0
 80019a4:	240005e0 	.word	0x240005e0
 80019a8:	24000600 	.word	0x24000600
 80019ac:	240005c8 	.word	0x240005c8
 80019b0:	240005e8 	.word	0x240005e8
 80019b4:	24000608 	.word	0x24000608
 80019b8:	240005d0 	.word	0x240005d0
 80019bc:	240005f0 	.word	0x240005f0
 80019c0:	24000610 	.word	0x24000610
 80019c4:	240005d8 	.word	0x240005d8
 80019c8:	240005f8 	.word	0x240005f8
 80019cc:	24000618 	.word	0x24000618
 80019d0:	3ff00000 	.word	0x3ff00000
 80019d4:	bff00000 	.word	0xbff00000
		}else if(ut2 < -1){
 80019d8:	4b94      	ldr	r3, [pc, #592]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80019da:	ed93 7b00 	vldr	d7, [r3]
 80019de:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80019e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d505      	bpl.n	80019f8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
			ut2 = -1;
 80019ec:	498f      	ldr	r1, [pc, #572]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	4b8f      	ldr	r3, [pc, #572]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80019f4:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut3 > 1){
 80019f8:	4b8e      	ldr	r3, [pc, #568]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80019fa:	ed93 7b00 	vldr	d7, [r3]
 80019fe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001a02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0a:	dd06      	ble.n	8001a1a <HAL_TIM_PeriodElapsedCallback+0x3ca>
			ut3 = 1;
 8001a0c:	4989      	ldr	r1, [pc, #548]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	4b89      	ldr	r3, [pc, #548]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a14:	e9c1 2300 	strd	r2, r3, [r1]
 8001a18:	e00f      	b.n	8001a3a <HAL_TIM_PeriodElapsedCallback+0x3ea>
		}else if(ut3 < -1){
 8001a1a:	4b86      	ldr	r3, [pc, #536]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001a1c:	ed93 7b00 	vldr	d7, [r3]
 8001a20:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001a24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2c:	d505      	bpl.n	8001a3a <HAL_TIM_PeriodElapsedCallback+0x3ea>
			ut3 = -1;
 8001a2e:	4981      	ldr	r1, [pc, #516]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4b7e      	ldr	r3, [pc, #504]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001a36:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut4 > 1){
 8001a3a:	4b80      	ldr	r3, [pc, #512]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001a3c:	ed93 7b00 	vldr	d7, [r3]
 8001a40:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001a44:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	dd06      	ble.n	8001a5c <HAL_TIM_PeriodElapsedCallback+0x40c>
			ut4 = 1;
 8001a4e:	497b      	ldr	r1, [pc, #492]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	4b78      	ldr	r3, [pc, #480]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a56:	e9c1 2300 	strd	r2, r3, [r1]
 8001a5a:	e00f      	b.n	8001a7c <HAL_TIM_PeriodElapsedCallback+0x42c>
		}else if(ut4 < -1){
 8001a5c:	4b77      	ldr	r3, [pc, #476]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001a5e:	ed93 7b00 	vldr	d7, [r3]
 8001a62:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001a66:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6e:	d505      	bpl.n	8001a7c <HAL_TIM_PeriodElapsedCallback+0x42c>
			ut4 = -1;
 8001a70:	4972      	ldr	r1, [pc, #456]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	4b6e      	ldr	r3, [pc, #440]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001a78:	e9c1 2300 	strd	r2, r3, [r1]
		}


		if(ut1 > 0){
 8001a7c:	4b70      	ldr	r3, [pc, #448]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001a7e:	ed93 7b00 	vldr	d7, [r3]
 8001a82:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8a:	dd0a      	ble.n	8001aa2 <HAL_TIM_PeriodElapsedCallback+0x452>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2120      	movs	r1, #32
 8001a90:	486c      	ldr	r0, [pc, #432]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001a92:	f006 f8f1 	bl	8007c78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2140      	movs	r1, #64	; 0x40
 8001a9a:	486a      	ldr	r0, [pc, #424]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001a9c:	f006 f8ec 	bl	8007c78 <HAL_GPIO_WritePin>
 8001aa0:	e024      	b.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x49c>
		}else if(ut1 < 0){
 8001aa2:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001aa4:	ed93 7b00 	vldr	d7, [r3]
 8001aa8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab0:	d50a      	bpl.n	8001ac8 <HAL_TIM_PeriodElapsedCallback+0x478>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	4863      	ldr	r0, [pc, #396]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001ab8:	f006 f8de 	bl	8007c78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	4860      	ldr	r0, [pc, #384]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001ac2:	f006 f8d9 	bl	8007c78 <HAL_GPIO_WritePin>
 8001ac6:	e011      	b.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x49c>
		}else if(ut1 == 0){
 8001ac8:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001aca:	ed93 7b00 	vldr	d7, [r3]
 8001ace:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	d109      	bne.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x49c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2120      	movs	r1, #32
 8001adc:	4859      	ldr	r0, [pc, #356]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001ade:	f006 f8cb 	bl	8007c78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2140      	movs	r1, #64	; 0x40
 8001ae6:	4857      	ldr	r0, [pc, #348]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001ae8:	f006 f8c6 	bl	8007c78 <HAL_GPIO_WritePin>
		}

		if(ut2 > 0){
 8001aec:	4b4f      	ldr	r3, [pc, #316]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001aee:	ed93 7b00 	vldr	d7, [r3]
 8001af2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afa:	dd0a      	ble.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x4c2>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 8001afc:	2201      	movs	r2, #1
 8001afe:	2110      	movs	r1, #16
 8001b00:	4850      	ldr	r0, [pc, #320]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001b02:	f006 f8b9 	bl	8007c78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2108      	movs	r1, #8
 8001b0a:	484e      	ldr	r0, [pc, #312]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001b0c:	f006 f8b4 	bl	8007c78 <HAL_GPIO_WritePin>
 8001b10:	e024      	b.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x50c>
		}else if(ut2 < 0){
 8001b12:	4b46      	ldr	r3, [pc, #280]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001b14:	ed93 7b00 	vldr	d7, [r3]
 8001b18:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b20:	d50a      	bpl.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x4e8>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2110      	movs	r1, #16
 8001b26:	4847      	ldr	r0, [pc, #284]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001b28:	f006 f8a6 	bl	8007c78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2108      	movs	r1, #8
 8001b30:	4844      	ldr	r0, [pc, #272]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001b32:	f006 f8a1 	bl	8007c78 <HAL_GPIO_WritePin>
 8001b36:	e011      	b.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x50c>
		}else if(ut2 == 0){
 8001b38:	4b3c      	ldr	r3, [pc, #240]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001b3a:	ed93 7b00 	vldr	d7, [r3]
 8001b3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	d109      	bne.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x50c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	483d      	ldr	r0, [pc, #244]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001b4e:	f006 f893 	bl	8007c78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2108      	movs	r1, #8
 8001b56:	483b      	ldr	r0, [pc, #236]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001b58:	f006 f88e 	bl	8007c78 <HAL_GPIO_WritePin>
		}

		if(ut3 > 0){
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001b5e:	ed93 7b00 	vldr	d7, [r3]
 8001b62:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6a:	dd0c      	ble.n	8001b86 <HAL_TIM_PeriodElapsedCallback+0x536>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b72:	4835      	ldr	r0, [pc, #212]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001b74:	f006 f880 	bl	8007c78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b7e:	4832      	ldr	r0, [pc, #200]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001b80:	f006 f87a 	bl	8007c78 <HAL_GPIO_WritePin>
 8001b84:	e028      	b.n	8001bd8 <HAL_TIM_PeriodElapsedCallback+0x588>
		}else if(ut3 < 0){
 8001b86:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001b88:	ed93 7b00 	vldr	d7, [r3]
 8001b8c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	d50c      	bpl.n	8001bb0 <HAL_TIM_PeriodElapsedCallback+0x560>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9c:	482a      	ldr	r0, [pc, #168]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001b9e:	f006 f86b 	bl	8007c78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba8:	4827      	ldr	r0, [pc, #156]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001baa:	f006 f865 	bl	8007c78 <HAL_GPIO_WritePin>
 8001bae:	e013      	b.n	8001bd8 <HAL_TIM_PeriodElapsedCallback+0x588>
		}else if(ut3 == 0){
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001bb2:	ed93 7b00 	vldr	d7, [r3]
 8001bb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	d10b      	bne.n	8001bd8 <HAL_TIM_PeriodElapsedCallback+0x588>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc6:	4820      	ldr	r0, [pc, #128]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001bc8:	f006 f856 	bl	8007c78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bd2:	481d      	ldr	r0, [pc, #116]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001bd4:	f006 f850 	bl	8007c78 <HAL_GPIO_WritePin>
		}

		if(ut4 > 0){
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001bda:	ed93 7b00 	vldr	d7, [r3]
 8001bde:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	dd0c      	ble.n	8001c02 <HAL_TIM_PeriodElapsedCallback+0x5b2>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bee:	4817      	ldr	r0, [pc, #92]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001bf0:	f006 f842 	bl	8007c78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bfa:	4815      	ldr	r0, [pc, #84]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001bfc:	f006 f83c 	bl	8007c78 <HAL_GPIO_WritePin>
 8001c00:	e03c      	b.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0x62c>
		}else if(ut4 < 0){
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001c04:	ed93 7b00 	vldr	d7, [r3]
 8001c08:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	d520      	bpl.n	8001c54 <HAL_TIM_PeriodElapsedCallback+0x604>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001c1a:	f006 f82d 	bl	8007c78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c24:	480a      	ldr	r0, [pc, #40]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001c26:	f006 f827 	bl	8007c78 <HAL_GPIO_WritePin>
 8001c2a:	e027      	b.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0x62c>
 8001c2c:	24000608 	.word	0x24000608
 8001c30:	bff00000 	.word	0xbff00000
 8001c34:	24000610 	.word	0x24000610
 8001c38:	3ff00000 	.word	0x3ff00000
 8001c3c:	24000618 	.word	0x24000618
 8001c40:	24000600 	.word	0x24000600
 8001c44:	58021800 	.word	0x58021800
 8001c48:	58020c00 	.word	0x58020c00
 8001c4c:	58020000 	.word	0x58020000
 8001c50:	58020800 	.word	0x58020800
		}else if(ut4 == 0){
 8001c54:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8001c56:	ed93 7b00 	vldr	d7, [r3]
 8001c5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c62:	d10b      	bne.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0x62c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c6a:	4842      	ldr	r0, [pc, #264]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8001c6c:	f006 f804 	bl	8007c78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c76:	4840      	ldr	r0, [pc, #256]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001c78:	f005 fffe 	bl	8007c78 <HAL_GPIO_WritePin>
		}


		ut1 = fabs(ut1);
 8001c7c:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8001c7e:	ed93 7b00 	vldr	d7, [r3]
 8001c82:	eeb0 7bc7 	vabs.f64	d7, d7
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8001c88:	ed83 7b00 	vstr	d7, [r3]
		ut2 = fabs(ut2);
 8001c8c:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8001c8e:	ed93 7b00 	vldr	d7, [r3]
 8001c92:	eeb0 7bc7 	vabs.f64	d7, d7
 8001c96:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8001c98:	ed83 7b00 	vstr	d7, [r3]
		ut3 = fabs(ut3);
 8001c9c:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001c9e:	ed93 7b00 	vldr	d7, [r3]
 8001ca2:	eeb0 7bc7 	vabs.f64	d7, d7
 8001ca6:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001ca8:	ed83 7b00 	vstr	d7, [r3]
		ut4 = fabs(ut4);
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8001cae:	ed93 7b00 	vldr	d7, [r3]
 8001cb2:	eeb0 7bc7 	vabs.f64	d7, d7
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8001cb8:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ut1 * 1000);
 8001cbc:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8001cbe:	ed93 7b00 	vldr	d7, [r3]
 8001cc2:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8001d68 <HAL_TIM_PeriodElapsedCallback+0x718>
 8001cc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cca:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cd2:	ee17 2a90 	vmov	r2, s15
 8001cd6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ut2 * 1000);
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8001cda:	ed93 7b00 	vldr	d7, [r3]
 8001cde:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001d68 <HAL_TIM_PeriodElapsedCallback+0x718>
 8001ce2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cee:	ee17 2a90 	vmov	r2, s15
 8001cf2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ut3 * 1000);
 8001cf4:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001cf6:	ed93 7b00 	vldr	d7, [r3]
 8001cfa:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8001d68 <HAL_TIM_PeriodElapsedCallback+0x718>
 8001cfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d0a:	ee17 2a90 	vmov	r2, s15
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ut4 * 1000);
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8001d12:	ed93 7b00 	vldr	d7, [r3]
 8001d16:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8001d68 <HAL_TIM_PeriodElapsedCallback+0x718>
 8001d1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x744>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d26:	ee17 2a90 	vmov	r2, s15
 8001d2a:	635a      	str	r2, [r3, #52]	; 0x34

		error_last1 = error1;
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x748>)
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	491a      	ldr	r1, [pc, #104]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8001d34:	e9c1 2300 	strd	r2, r3, [r1]
		error_last2 = error2;
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	4919      	ldr	r1, [pc, #100]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x754>)
 8001d40:	e9c1 2300 	strd	r2, r3, [r1]
		error_last3 = error3;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	4918      	ldr	r1, [pc, #96]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8001d4c:	e9c1 2300 	strd	r2, r3, [r1]
		error_last4 = error4;
 8001d50:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x760>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	4917      	ldr	r1, [pc, #92]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x764>)
 8001d58:	e9c1 2300 	strd	r2, r3, [r1]


	}
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	f3af 8000 	nop.w
 8001d68:	00000000 	.word	0x00000000
 8001d6c:	408f4000 	.word	0x408f4000
 8001d70:	24000618 	.word	0x24000618
 8001d74:	58020000 	.word	0x58020000
 8001d78:	58020800 	.word	0x58020800
 8001d7c:	24000600 	.word	0x24000600
 8001d80:	24000608 	.word	0x24000608
 8001d84:	24000610 	.word	0x24000610
 8001d88:	24000178 	.word	0x24000178
 8001d8c:	240001c4 	.word	0x240001c4
 8001d90:	240002f4 	.word	0x240002f4
 8001d94:	24000094 	.word	0x24000094
 8001d98:	24000598 	.word	0x24000598
 8001d9c:	24000620 	.word	0x24000620
 8001da0:	240005a0 	.word	0x240005a0
 8001da4:	24000628 	.word	0x24000628
 8001da8:	240005a8 	.word	0x240005a8
 8001dac:	24000630 	.word	0x24000630
 8001db0:	240005b0 	.word	0x240005b0
 8001db4:	24000638 	.word	0x24000638

08001db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
}
 8001dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <Error_Handler+0x8>

08001dc2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <_ZN3ros3MsgC1Ev+0x1c>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	0800e3b4 	.word	0x0800e3b4

08001e04 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
      data()
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ffe8 	bl	8001de4 <_ZN3ros3MsgC1Ev>
 8001e14:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ffcf 	bl	8001dc2 <_ZN3ros4TimeC1Ev>
    {
    }
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	0800e39c 	.word	0x0800e39c

08001e34 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6859      	ldr	r1, [r3, #4]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b2ca      	uxtb	r2, r1
 8001e4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	0a19      	lsrs	r1, r3, #8
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b2ca      	uxtb	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	0c19      	lsrs	r1, r3, #16
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b2ca      	uxtb	r2, r1
 8001e72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	0e19      	lsrs	r1, r3, #24
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	b2ca      	uxtb	r2, r1
 8001e84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6899      	ldr	r1, [r3, #8]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	b2ca      	uxtb	r2, r1
 8001e98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0a19      	lsrs	r1, r3, #8
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b2ca      	uxtb	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	0c19      	lsrs	r1, r3, #16
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	4413      	add	r3, r2
 8001eba:	b2ca      	uxtb	r2, r1
 8001ebc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	0e19      	lsrs	r1, r3, #24
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3303      	adds	r3, #3
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	b2ca      	uxtb	r2, r1
 8001ece:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	60fb      	str	r3, [r7, #12]
      return offset;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
    }
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3301      	adds	r3, #1
 8001f08:	6839      	ldr	r1, [r7, #0]
 8001f0a:	440b      	add	r3, r1
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	6839      	ldr	r1, [r7, #0]
 8001f20:	440b      	add	r3, r1
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3303      	adds	r3, #3
 8001f34:	6839      	ldr	r1, [r7, #0]
 8001f36:	440b      	add	r3, r1
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	061b      	lsls	r3, r3, #24
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3304      	adds	r3, #4
 8001f46:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	6839      	ldr	r1, [r7, #0]
 8001f60:	440b      	add	r3, r1
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3302      	adds	r3, #2
 8001f74:	6839      	ldr	r1, [r7, #0]
 8001f76:	440b      	add	r3, r1
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3303      	adds	r3, #3
 8001f8a:	6839      	ldr	r1, [r7, #0]
 8001f8c:	440b      	add	r3, r1
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	061b      	lsls	r3, r3, #24
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	60fb      	str	r3, [r7, #12]
     return offset;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    }
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	0800e170 	.word	0x0800e170

08001fc8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	0800e180 	.word	0x0800e180

08001fe4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fef8 	bl	8001de4 <_ZN3ros3MsgC1Ev>
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	809a      	strh	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a09      	ldr	r2, [pc, #36]	; (8002028 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a07      	ldr	r2, [pc, #28]	; (8002028 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a06      	ldr	r2, [pc, #24]	; (8002028 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	615a      	str	r2, [r3, #20]
    {
    }
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	0800e384 	.word	0x0800e384
 8002028:	0800e1a4 	.word	0x0800e1a4

0800202c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	8899      	ldrh	r1, [r3, #4]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	4413      	add	r3, r2
 8002044:	b2ca      	uxtb	r2, r1
 8002046:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	889b      	ldrh	r3, [r3, #4]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	b299      	uxth	r1, r3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	3301      	adds	r3, #1
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4413      	add	r3, r2
 8002058:	b2ca      	uxtb	r2, r1
 800205a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3302      	adds	r3, #2
 8002060:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f952 	bl	8000310 <strlen>
 800206c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	4413      	add	r3, r2
 8002074:	69b9      	ldr	r1, [r7, #24]
 8002076:	4618      	mov	r0, r3
 8002078:	f001 f8d8 	bl	800322c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	3304      	adds	r3, #4
 8002080:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	18d0      	adds	r0, r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4619      	mov	r1, r3
 8002090:	f00b feca 	bl	800de28 <memcpy>
      offset += length_topic_name;
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	4413      	add	r3, r2
 800209a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe f935 	bl	8000310 <strlen>
 80020a6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	4413      	add	r3, r2
 80020ae:	6979      	ldr	r1, [r7, #20]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f001 f8bb 	bl	800322c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	18d0      	adds	r0, r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f00b fead 	bl	800de28 <memcpy>
      offset += length_message_type;
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	4413      	add	r3, r2
 80020d4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe f918 	bl	8000310 <strlen>
 80020e0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	6939      	ldr	r1, [r7, #16]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 f89e 	bl	800322c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	3304      	adds	r3, #4
 80020f4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	18d0      	adds	r0, r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4619      	mov	r1, r3
 8002104:	f00b fe90 	bl	800de28 <memcpy>
      offset += length_md5sum;
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002116:	68f9      	ldr	r1, [r7, #12]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4413      	add	r3, r2
 800211e:	b2ca      	uxtb	r2, r1
 8002120:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	0a19      	lsrs	r1, r3, #8
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	4413      	add	r3, r2
 800212e:	b2ca      	uxtb	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	0c19      	lsrs	r1, r3, #16
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3302      	adds	r3, #2
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	4413      	add	r3, r2
 800213e:	b2ca      	uxtb	r2, r1
 8002140:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	0e19      	lsrs	r1, r3, #24
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3303      	adds	r3, #3
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4413      	add	r3, r2
 800214e:	b2ca      	uxtb	r2, r1
 8002150:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	61fb      	str	r3, [r7, #28]
      return offset;
 8002158:	69fb      	ldr	r3, [r7, #28]
    }
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002162:	b580      	push	{r7, lr}
 8002164:	b08a      	sub	sp, #40	; 0x28
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	4413      	add	r3, r2
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b29a      	uxth	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	889b      	ldrh	r3, [r3, #4]
 8002182:	b21a      	sxth	r2, r3
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	3301      	adds	r3, #1
 8002188:	6839      	ldr	r1, [r7, #0]
 800218a:	440b      	add	r3, r1
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	b21b      	sxth	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b21b      	sxth	r3, r3
 8002196:	b29a      	uxth	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	3302      	adds	r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	441a      	add	r2, r3
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 f85a 	bl	8003268 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	3304      	adds	r3, #4
 80021b8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	4413      	add	r3, r2
 80021c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d20c      	bcs.n	80021e4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	441a      	add	r2, r3
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	3b01      	subs	r3, #1
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	440b      	add	r3, r1
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	3301      	adds	r3, #1
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	e7ec      	b.n	80021be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	4413      	add	r3, r2
 80021ea:	3b01      	subs	r3, #1
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	441a      	add	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	4413      	add	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	441a      	add	r2, r3
 800220e:	f107 0310 	add.w	r3, r7, #16
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f001 f827 	bl	8003268 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	3304      	adds	r3, #4
 800221e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	623b      	str	r3, [r7, #32]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	6a3a      	ldr	r2, [r7, #32]
 800222c:	429a      	cmp	r2, r3
 800222e:	d20c      	bcs.n	800224a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	441a      	add	r2, r3
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	3b01      	subs	r3, #1
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	440b      	add	r3, r1
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	3301      	adds	r3, #1
 8002246:	623b      	str	r3, [r7, #32]
 8002248:	e7ec      	b.n	8002224 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	3b01      	subs	r3, #1
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	4413      	add	r3, r2
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	3b01      	subs	r3, #1
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	441a      	add	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	441a      	add	r2, r3
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fff4 	bl	8003268 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	3304      	adds	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	429a      	cmp	r2, r3
 8002294:	d20c      	bcs.n	80022b0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	441a      	add	r2, r3
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	3b01      	subs	r3, #1
 80022a0:	6839      	ldr	r1, [r7, #0]
 80022a2:	440b      	add	r3, r1
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	3301      	adds	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	e7ec      	b.n	800228a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4413      	add	r3, r2
 80022b6:	3b01      	subs	r3, #1
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	441a      	add	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4413      	add	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	6839      	ldr	r1, [r7, #0]
 80022de:	440a      	add	r2, r1
 80022e0:	7812      	ldrb	r2, [r2, #0]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	3301      	adds	r3, #1
 80022ec:	6839      	ldr	r1, [r7, #0]
 80022ee:	440b      	add	r3, r1
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	3302      	adds	r3, #2
 80022fe:	6839      	ldr	r1, [r7, #0]
 8002300:	440b      	add	r3, r1
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	4313      	orrs	r3, r2
 8002308:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	3303      	adds	r3, #3
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	440b      	add	r3, r1
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	061b      	lsls	r3, r3, #24
 8002318:	4313      	orrs	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	3304      	adds	r3, #4
 8002326:	61bb      	str	r3, [r7, #24]
     return offset;
 8002328:	69bb      	ldr	r3, [r7, #24]
    }
 800232a:	4618      	mov	r0, r3
 800232c:	3728      	adds	r7, #40	; 0x28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	0800e1a8 	.word	0x0800e1a8

08002350 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	0800e1c4 	.word	0x0800e1c4

0800236c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fd34 	bl	8001de4 <_ZN3ros3MsgC1Ev>
 800237c:	4a06      	ldr	r2, [pc, #24]	; (8002398 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	711a      	strb	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a04      	ldr	r2, [pc, #16]	; (800239c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800238c:	609a      	str	r2, [r3, #8]
    {
    }
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	0800e36c 	.word	0x0800e36c
 800239c:	0800e1a4 	.word	0x0800e1a4

080023a0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	7912      	ldrb	r2, [r2, #4]
 80023b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3301      	adds	r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fd ffa3 	bl	8000310 <strlen>
 80023ca:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	4413      	add	r3, r2
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 ff29 	bl	800322c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	3304      	adds	r3, #4
 80023de:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	18d0      	adds	r0, r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4619      	mov	r1, r3
 80023ee:	f00b fd1b 	bl	800de28 <memcpy>
      offset += length_msg;
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	4413      	add	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
      return offset;
 80023fa:	68fb      	ldr	r3, [r7, #12]
    }
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	4413      	add	r3, r2
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	3301      	adds	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	441a      	add	r2, r3
 800242a:	f107 030c 	add.w	r3, r7, #12
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f000 ff19 	bl	8003268 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	3304      	adds	r3, #4
 800243a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4413      	add	r3, r2
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	d20c      	bcs.n	8002466 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	441a      	add	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	3b01      	subs	r3, #1
 8002456:	6839      	ldr	r1, [r7, #0]
 8002458:	440b      	add	r3, r1
 800245a:	7812      	ldrb	r2, [r2, #0]
 800245c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3301      	adds	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e7ec      	b.n	8002440 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	3b01      	subs	r3, #1
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	4413      	add	r3, r2
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	3b01      	subs	r3, #1
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	441a      	add	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
     return offset;
 800248a:	693b      	ldr	r3, [r7, #16]
    }
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	0800e1e8 	.word	0x0800e1e8

080024b0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	0800e1fc 	.word	0x0800e1fc

080024cc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fc84 	bl	8001de4 <_ZN3ros3MsgC1Ev>
 80024dc:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	619a      	str	r2, [r3, #24]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	61da      	str	r2, [r3, #28]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	0800e354 	.word	0x0800e354

08002514 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	4413      	add	r3, r2
 800252c:	b2ca      	uxtb	r2, r1
 800252e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	0a19      	lsrs	r1, r3, #8
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	3301      	adds	r3, #1
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4413      	add	r3, r2
 800253e:	b2ca      	uxtb	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	0c19      	lsrs	r1, r3, #16
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	3302      	adds	r3, #2
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4413      	add	r3, r2
 8002550:	b2ca      	uxtb	r2, r1
 8002552:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	0e19      	lsrs	r1, r3, #24
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	3303      	adds	r3, #3
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	4413      	add	r3, r2
 8002562:	b2ca      	uxtb	r2, r1
 8002564:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	3304      	adds	r3, #4
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	429a      	cmp	r2, r3
 8002578:	d22b      	bcs.n	80025d2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002588:	6939      	ldr	r1, [r7, #16]
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	4413      	add	r3, r2
 8002590:	b2ca      	uxtb	r2, r1
 8002592:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	0a19      	lsrs	r1, r3, #8
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	3301      	adds	r3, #1
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	b2ca      	uxtb	r2, r1
 80025a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	0c19      	lsrs	r1, r3, #16
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	3302      	adds	r3, #2
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	b2ca      	uxtb	r2, r1
 80025b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	0e19      	lsrs	r1, r3, #24
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	3303      	adds	r3, #3
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	b2ca      	uxtb	r2, r1
 80025c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	3304      	adds	r3, #4
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	3301      	adds	r3, #1
 80025ce:	623b      	str	r3, [r7, #32]
 80025d0:	e7ce      	b.n	8002570 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6919      	ldr	r1, [r3, #16]
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	b2ca      	uxtb	r2, r1
 80025de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	0a19      	lsrs	r1, r3, #8
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	3301      	adds	r3, #1
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	4413      	add	r3, r2
 80025ee:	b2ca      	uxtb	r2, r1
 80025f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	0c19      	lsrs	r1, r3, #16
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	3302      	adds	r3, #2
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	b2ca      	uxtb	r2, r1
 8002602:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	0e19      	lsrs	r1, r3, #24
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	3303      	adds	r3, #3
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	4413      	add	r3, r2
 8002612:	b2ca      	uxtb	r2, r1
 8002614:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	3304      	adds	r3, #4
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	429a      	cmp	r2, r3
 8002628:	d22b      	bcs.n	8002682 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002638:	68f9      	ldr	r1, [r7, #12]
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	4413      	add	r3, r2
 8002640:	b2ca      	uxtb	r2, r1
 8002642:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	0a19      	lsrs	r1, r3, #8
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	3301      	adds	r3, #1
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	4413      	add	r3, r2
 8002650:	b2ca      	uxtb	r2, r1
 8002652:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	0c19      	lsrs	r1, r3, #16
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	3302      	adds	r3, #2
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	4413      	add	r3, r2
 8002660:	b2ca      	uxtb	r2, r1
 8002662:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	0e19      	lsrs	r1, r3, #24
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	3303      	adds	r3, #3
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	4413      	add	r3, r2
 8002670:	b2ca      	uxtb	r2, r1
 8002672:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	3304      	adds	r3, #4
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3301      	adds	r3, #1
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	e7ce      	b.n	8002620 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69d9      	ldr	r1, [r3, #28]
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	4413      	add	r3, r2
 800268c:	b2ca      	uxtb	r2, r1
 800268e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	0a19      	lsrs	r1, r3, #8
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	3301      	adds	r3, #1
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	4413      	add	r3, r2
 800269e:	b2ca      	uxtb	r2, r1
 80026a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	0c19      	lsrs	r1, r3, #16
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	3302      	adds	r3, #2
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	b2ca      	uxtb	r2, r1
 80026b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	0e19      	lsrs	r1, r3, #24
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	3303      	adds	r3, #3
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	4413      	add	r3, r2
 80026c2:	b2ca      	uxtb	r2, r1
 80026c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	3304      	adds	r3, #4
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d228      	bcs.n	800272c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd fe12 	bl	8000310 <strlen>
 80026ec:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	6979      	ldr	r1, [r7, #20]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fd98 	bl	800322c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	3304      	adds	r3, #4
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	18d0      	adds	r0, r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	4619      	mov	r1, r3
 8002718:	f00b fb86 	bl	800de28 <memcpy>
      offset += length_stringsi;
 800271c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	4413      	add	r3, r2
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	3301      	adds	r3, #1
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	e7d1      	b.n	80026d0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800272e:	4618      	mov	r0, r3
 8002730:	3728      	adds	r7, #40	; 0x28
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002736:	b580      	push	{r7, lr}
 8002738:	b08e      	sub	sp, #56	; 0x38
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4413      	add	r3, r2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800274e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002750:	3301      	adds	r3, #1
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	4413      	add	r3, r2
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	6a3a      	ldr	r2, [r7, #32]
 800275c:	4313      	orrs	r3, r2
 800275e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002762:	3302      	adds	r3, #2
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	4413      	add	r3, r2
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	041b      	lsls	r3, r3, #16
 800276c:	6a3a      	ldr	r2, [r7, #32]
 800276e:	4313      	orrs	r3, r2
 8002770:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	3303      	adds	r3, #3
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	4413      	add	r3, r2
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	6a3a      	ldr	r2, [r7, #32]
 8002780:	4313      	orrs	r3, r2
 8002782:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	3304      	adds	r3, #4
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	6a3a      	ldr	r2, [r7, #32]
 8002790:	429a      	cmp	r2, r3
 8002792:	d90a      	bls.n	80027aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f00b fb58 	bl	800de54 <realloc>
 80027a4:	4602      	mov	r2, r0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a3a      	ldr	r2, [r7, #32]
 80027ae:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80027b0:	2300      	movs	r3, #0
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d236      	bcs.n	800282c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027c6:	6839      	ldr	r1, [r7, #0]
 80027c8:	440a      	add	r2, r1
 80027ca:	7812      	ldrb	r2, [r2, #0]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d4:	3301      	adds	r3, #1
 80027d6:	6839      	ldr	r1, [r7, #0]
 80027d8:	440b      	add	r3, r1
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e6:	3302      	adds	r3, #2
 80027e8:	6839      	ldr	r1, [r7, #0]
 80027ea:	440b      	add	r3, r1
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f8:	3303      	adds	r3, #3
 80027fa:	6839      	ldr	r1, [r7, #0]
 80027fc:	440b      	add	r3, r1
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	4313      	orrs	r3, r2
 8002804:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800280c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280e:	3304      	adds	r3, #4
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	3301      	adds	r3, #1
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
 800282a:	e7c3      	b.n	80027b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800282c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	4413      	add	r3, r2
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002838:	3301      	adds	r3, #1
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	4413      	add	r3, r2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	4313      	orrs	r3, r2
 8002846:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284a:	3302      	adds	r3, #2
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	041b      	lsls	r3, r3, #16
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	4313      	orrs	r3, r2
 8002858:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285c:	3303      	adds	r3, #3
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4413      	add	r3, r2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	4313      	orrs	r3, r2
 800286a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800286c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286e:	3304      	adds	r3, #4
 8002870:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	429a      	cmp	r2, r3
 800287a:	d90a      	bls.n	8002892 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f00b fae4 	bl	800de54 <realloc>
 800288c:	4602      	mov	r2, r0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002898:	2300      	movs	r3, #0
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d236      	bcs.n	8002914 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ae:	6839      	ldr	r1, [r7, #0]
 80028b0:	440a      	add	r2, r1
 80028b2:	7812      	ldrb	r2, [r2, #0]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028bc:	3301      	adds	r3, #1
 80028be:	6839      	ldr	r1, [r7, #0]
 80028c0:	440b      	add	r3, r1
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ce:	3302      	adds	r3, #2
 80028d0:	6839      	ldr	r1, [r7, #0]
 80028d2:	440b      	add	r3, r1
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e0:	3303      	adds	r3, #3
 80028e2:	6839      	ldr	r1, [r7, #0]
 80028e4:	440b      	add	r3, r1
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80028f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f6:	3304      	adds	r3, #4
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	3214      	adds	r2, #20
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290e:	3301      	adds	r3, #1
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002912:	e7c3      	b.n	800289c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	4413      	add	r3, r2
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800291e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002920:	3301      	adds	r3, #1
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002932:	3302      	adds	r3, #2
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	4413      	add	r3, r2
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	041b      	lsls	r3, r3, #16
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002944:	3303      	adds	r3, #3
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	4413      	add	r3, r2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002956:	3304      	adds	r3, #4
 8002958:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	429a      	cmp	r2, r3
 8002962:	d90a      	bls.n	800297a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f00b fa70 	bl	800de54 <realloc>
 8002974:	4602      	mov	r2, r0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002980:	2300      	movs	r3, #0
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800298a:	429a      	cmp	r2, r3
 800298c:	d23f      	bcs.n	8002a0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800298e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	441a      	add	r2, r3
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fc64 	bl	8003268 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	3304      	adds	r3, #4
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80029a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
 80029aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d20c      	bcs.n	80029d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	441a      	add	r2, r3
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	3b01      	subs	r3, #1
 80029c0:	6839      	ldr	r1, [r7, #0]
 80029c2:	440b      	add	r3, r1
 80029c4:	7812      	ldrb	r2, [r2, #0]
 80029c6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	3301      	adds	r3, #1
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
 80029ce:	e7ec      	b.n	80029aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80029d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4413      	add	r3, r2
 80029d6:	3b01      	subs	r3, #1
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80029e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e2:	3b01      	subs	r3, #1
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	441a      	add	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80029ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4413      	add	r3, r2
 80029f2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	3220      	adds	r2, #32
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	3301      	adds	r3, #1
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0c:	e7ba      	b.n	8002984 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002a10:	4618      	mov	r0, r3
 8002a12:	3738      	adds	r7, #56	; 0x38
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	0800e2c0 	.word	0x0800e2c0

08002a34 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	0800e220 	.word	0x0800e220

08002a50 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
  }
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a42      	ldr	r2, [pc, #264]	; (8002b84 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d068      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a40      	ldr	r2, [pc, #256]	; (8002b88 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d061      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a3d      	ldr	r2, [pc, #244]	; (8002b8c <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d05a      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a3b      	ldr	r2, [pc, #236]	; (8002b90 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d053      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a38      	ldr	r2, [pc, #224]	; (8002b94 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d04c      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a36      	ldr	r2, [pc, #216]	; (8002b98 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d045      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a33      	ldr	r2, [pc, #204]	; (8002b9c <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d03e      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a31      	ldr	r2, [pc, #196]	; (8002ba0 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d037      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a2e      	ldr	r2, [pc, #184]	; (8002ba4 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d030      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a2c      	ldr	r2, [pc, #176]	; (8002ba8 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d029      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a29      	ldr	r2, [pc, #164]	; (8002bac <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d022      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a27      	ldr	r2, [pc, #156]	; (8002bb0 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d01b      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d014      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00d      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d006      	beq.n	8002b50 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d109      	bne.n	8002b64 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b62:	e008      	b.n	8002b76 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40020010 	.word	0x40020010
 8002b88:	40020028 	.word	0x40020028
 8002b8c:	40020040 	.word	0x40020040
 8002b90:	40020058 	.word	0x40020058
 8002b94:	40020070 	.word	0x40020070
 8002b98:	40020088 	.word	0x40020088
 8002b9c:	400200a0 	.word	0x400200a0
 8002ba0:	400200b8 	.word	0x400200b8
 8002ba4:	40020410 	.word	0x40020410
 8002ba8:	40020428 	.word	0x40020428
 8002bac:	40020440 	.word	0x40020440
 8002bb0:	40020458 	.word	0x40020458
 8002bb4:	40020470 	.word	0x40020470
 8002bb8:	40020488 	.word	0x40020488
 8002bbc:	400204a0 	.word	0x400204a0
 8002bc0:	400204b8 	.word	0x400204b8

08002bc4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a0c      	ldr	r2, [pc, #48]	; (8002c00 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be0:	461a      	mov	r2, r3
 8002be2:	2300      	movs	r3, #0
 8002be4:	6093      	str	r3, [r2, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bec:	461a      	mov	r2, r3
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60d3      	str	r3, [r2, #12]
    }
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	240003d8 	.word	0x240003d8

08002c04 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f804 	bl	8002c1a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f009 f87c 	bl	800bd2c <HAL_UART_Receive_DMA>
    }
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_ZN13STM32Hardware4readEv>:

    int read(){
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c48:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ff09 	bl	8002a68 <_ZN13STM32Hardware10getRdmaIndEv>
 8002c56:	4603      	mov	r3, r0
 8002c58:	429c      	cmp	r4, r3
 8002c5a:	bf14      	ite	ne
 8002c5c:	2301      	movne	r3, #1
 8002c5e:	2300      	moveq	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d012      	beq.n	8002c8c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002c6c:	1c59      	adds	r1, r3, #1
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4413      	add	r3, r2
 8002c78:	791b      	ldrb	r3, [r3, #4]
 8002c7a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002c82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    }
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd90      	pop	{r4, r7, pc}
	...

08002c98 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d108      	bne.n	8002cbe <_ZN13STM32Hardware5flushEv+0x26>
 8002cac:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	f083 0301 	eor.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <_ZN13STM32Hardware5flushEv+0x26>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <_ZN13STM32Hardware5flushEv+0x28>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d049      	beq.n	8002d58 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002cc4:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d039      	beq.n	8002d52 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d20c      	bcs.n	8002d0c <_ZN13STM32Hardware5flushEv+0x74>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	e007      	b.n	8002d1c <_ZN13STM32Hardware5flushEv+0x84>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	89fa      	ldrh	r2, [r7, #14]
 8002d34:	4619      	mov	r1, r3
 8002d36:	f008 ff67 	bl	800bc08 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	89fb      	ldrh	r3, [r7, #14]
 8002d44:	4413      	add	r3, r2
 8002d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d50:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002d52:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
      }
    }
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	2400066c 	.word	0x2400066c

08002d64 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7a:	bfa8      	it	ge
 8002d7c:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002d80:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	4293      	cmp	r3, r2
 8002d92:	bf28      	it	cs
 8002d94:	4613      	movcs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4413      	add	r3, r2
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f00b f83b 	bl	800de28 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dc8:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d00b      	beq.n	8002dea <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	18d1      	adds	r1, r2, r3
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	f00b f81f 	bl	800de28 <memcpy>
      }

      flush();
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f7ff ff54 	bl	8002c98 <_ZN13STM32Hardware5flushEv>
    }
 8002df0:	bf00      	nop
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	f001 fe3c 	bl	8004a7c <HAL_GetTick>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
      data(0)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe ffe2 	bl	8001de4 <_ZN3ros3MsgC1Ev>
 8002e20:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	0800e310 	.word	0x0800e310

08002e44 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e58:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e60:	6979      	ldr	r1, [r7, #20]
 8002e62:	6838      	ldr	r0, [r7, #0]
 8002e64:	4401      	add	r1, r0
 8002e66:	b2d3      	uxtb	r3, r2
 8002e68:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002e6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	0a02      	lsrs	r2, r0, #8
 8002e78:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002e7c:	0a0b      	lsrs	r3, r1, #8
 8002e7e:	6979      	ldr	r1, [r7, #20]
 8002e80:	3101      	adds	r1, #1
 8002e82:	6838      	ldr	r0, [r7, #0]
 8002e84:	4401      	add	r1, r0
 8002e86:	b2d3      	uxtb	r3, r2
 8002e88:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002e8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	0c02      	lsrs	r2, r0, #16
 8002e98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e9c:	0c0b      	lsrs	r3, r1, #16
 8002e9e:	6979      	ldr	r1, [r7, #20]
 8002ea0:	3102      	adds	r1, #2
 8002ea2:	6838      	ldr	r0, [r7, #0]
 8002ea4:	4401      	add	r1, r0
 8002ea6:	b2d3      	uxtb	r3, r2
 8002ea8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002eaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	0e02      	lsrs	r2, r0, #24
 8002eb8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ebc:	0e0b      	lsrs	r3, r1, #24
 8002ebe:	6979      	ldr	r1, [r7, #20]
 8002ec0:	3103      	adds	r1, #3
 8002ec2:	6838      	ldr	r0, [r7, #0]
 8002ec4:	4401      	add	r1, r0
 8002ec6:	b2d3      	uxtb	r3, r2
 8002ec8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8002eca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	000a      	movs	r2, r1
 8002ed8:	2300      	movs	r3, #0
 8002eda:	6979      	ldr	r1, [r7, #20]
 8002edc:	3104      	adds	r1, #4
 8002ede:	6838      	ldr	r0, [r7, #0]
 8002ee0:	4401      	add	r1, r0
 8002ee2:	b2d3      	uxtb	r3, r2
 8002ee4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8002ee6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	0a0a      	lsrs	r2, r1, #8
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	6979      	ldr	r1, [r7, #20]
 8002ef8:	3105      	adds	r1, #5
 8002efa:	6838      	ldr	r0, [r7, #0]
 8002efc:	4401      	add	r1, r0
 8002efe:	b2d3      	uxtb	r3, r2
 8002f00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8002f02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	0c0a      	lsrs	r2, r1, #16
 8002f10:	2300      	movs	r3, #0
 8002f12:	6979      	ldr	r1, [r7, #20]
 8002f14:	3106      	adds	r1, #6
 8002f16:	6838      	ldr	r0, [r7, #0]
 8002f18:	4401      	add	r1, r0
 8002f1a:	b2d3      	uxtb	r3, r2
 8002f1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8002f1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	0e0a      	lsrs	r2, r1, #24
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	6979      	ldr	r1, [r7, #20]
 8002f30:	3107      	adds	r1, #7
 8002f32:	6838      	ldr	r0, [r7, #0]
 8002f34:	4401      	add	r1, r0
 8002f36:	b2d3      	uxtb	r3, r2
 8002f38:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	617b      	str	r3, [r7, #20]
      return offset;
 8002f40:	697b      	ldr	r3, [r7, #20]
    }
 8002f42:	4618      	mov	r0, r3
 8002f44:	371c      	adds	r7, #28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002f4e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f52:	b0a3      	sub	sp, #140	; 0x8c
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6778      	str	r0, [r7, #116]	; 0x74
 8002f58:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f6c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002f70:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002f74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f76:	4413      	add	r3, r2
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	461c      	mov	r4, r3
 8002f80:	4615      	mov	r5, r2
 8002f82:	ea40 0804 	orr.w	r8, r0, r4
 8002f86:	ea41 0905 	orr.w	r9, r1, r5
 8002f8a:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f8e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f9a:	4413      	add	r3, r2
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	469a      	mov	sl, r3
 8002fa4:	4693      	mov	fp, r2
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002fb2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002fb6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002fba:	ea40 0402 	orr.w	r4, r0, r2
 8002fbe:	66bc      	str	r4, [r7, #104]	; 0x68
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fc4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002fc8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fcc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002fd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fd4:	1c9a      	adds	r2, r3, #2
 8002fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fd8:	4413      	add	r3, r2
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2200      	movs	r2, #0
 8002fe0:	663b      	str	r3, [r7, #96]	; 0x60
 8002fe2:	667a      	str	r2, [r7, #100]	; 0x64
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ff0:	464c      	mov	r4, r9
 8002ff2:	0423      	lsls	r3, r4, #16
 8002ff4:	4644      	mov	r4, r8
 8002ff6:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002ffa:	4644      	mov	r4, r8
 8002ffc:	0422      	lsls	r2, r4, #16
 8002ffe:	ea40 0402 	orr.w	r4, r0, r2
 8003002:	65bc      	str	r4, [r7, #88]	; 0x58
 8003004:	430b      	orrs	r3, r1
 8003006:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003008:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800300c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003010:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003018:	1cda      	adds	r2, r3, #3
 800301a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800301c:	4413      	add	r3, r2
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2200      	movs	r2, #0
 8003024:	653b      	str	r3, [r7, #80]	; 0x50
 8003026:	657a      	str	r2, [r7, #84]	; 0x54
 8003028:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800302c:	4623      	mov	r3, r4
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003032:	4623      	mov	r3, r4
 8003034:	061b      	lsls	r3, r3, #24
 8003036:	64bb      	str	r3, [r7, #72]	; 0x48
 8003038:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800303c:	4623      	mov	r3, r4
 800303e:	4303      	orrs	r3, r0
 8003040:	643b      	str	r3, [r7, #64]	; 0x40
 8003042:	462b      	mov	r3, r5
 8003044:	430b      	orrs	r3, r1
 8003046:	647b      	str	r3, [r7, #68]	; 0x44
 8003048:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800304c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003050:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003054:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003058:	1d1a      	adds	r2, r3, #4
 800305a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800305c:	4413      	add	r3, r2
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2200      	movs	r2, #0
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38
 8003066:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003072:	0023      	movs	r3, r4
 8003074:	2200      	movs	r2, #0
 8003076:	ea40 0402 	orr.w	r4, r0, r2
 800307a:	633c      	str	r4, [r7, #48]	; 0x30
 800307c:	430b      	orrs	r3, r1
 800307e:	637b      	str	r3, [r7, #52]	; 0x34
 8003080:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003084:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003088:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800308c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003090:	1d5a      	adds	r2, r3, #5
 8003092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003094:	4413      	add	r3, r2
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2200      	movs	r2, #0
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
 800309e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80030aa:	0223      	lsls	r3, r4, #8
 80030ac:	2200      	movs	r2, #0
 80030ae:	ea40 0402 	orr.w	r4, r0, r2
 80030b2:	623c      	str	r4, [r7, #32]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
 80030b8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80030bc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80030c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80030c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c8:	3306      	adds	r3, #6
 80030ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80030cc:	4413      	add	r3, r2
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2200      	movs	r2, #0
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	61fa      	str	r2, [r7, #28]
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	69bc      	ldr	r4, [r7, #24]
 80030e2:	0423      	lsls	r3, r4, #16
 80030e4:	2200      	movs	r2, #0
 80030e6:	ea40 0402 	orr.w	r4, r0, r2
 80030ea:	613c      	str	r4, [r7, #16]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80030f4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80030f8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80030fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003100:	3307      	adds	r3, #7
 8003102:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003104:	4413      	add	r3, r2
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2200      	movs	r2, #0
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	60fa      	str	r2, [r7, #12]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	68bc      	ldr	r4, [r7, #8]
 800311a:	0623      	lsls	r3, r4, #24
 800311c:	2200      	movs	r2, #0
 800311e:	ea40 0402 	orr.w	r4, r0, r2
 8003122:	603c      	str	r4, [r7, #0]
 8003124:	430b      	orrs	r3, r1
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	e9d7 3400 	ldrd	r3, r4, [r7]
 800312c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003130:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003134:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003136:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 800313a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800313e:	3308      	adds	r3, #8
 8003140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003144:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8003148:	4618      	mov	r0, r3
 800314a:	378c      	adds	r7, #140	; 0x8c
 800314c:	46bd      	mov	sp, r7
 800314e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003152:	4770      	bx	lr

08003154 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <_ZN8std_msgs5Int647getTypeEv+0x18>)
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	0800e244 	.word	0x0800e244

08003170 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	0800e254 	.word	0x0800e254

0800318c <_Z8callbackRKN8std_msgs5Int64E>:
#include "ros.h"
#include "std_msgs/Int64.h"
#include "STM32Hardware.h"

void callback(const std_msgs::Int64 &msg)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
   count = msg.data;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800319a:	4b04      	ldr	r3, [pc, #16]	; (80031ac <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 800319c:	601a      	str	r2, [r3, #0]
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	24000668 	.word	0x24000668

080031b0 <HAL_UART_TxCpltCallback>:

ros::NodeHandle nh;
ros::Subscriber<std_msgs::Int64> sub("counting", callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 80031b8:	4805      	ldr	r0, [pc, #20]	; (80031d0 <HAL_UART_TxCpltCallback+0x20>)
 80031ba:	f000 f959 	bl	8003470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80031be:	4603      	mov	r3, r0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fd69 	bl	8002c98 <_ZN13STM32Hardware5flushEv>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	24000670 	.word	0x24000670

080031d4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 80031dc:	4805      	ldr	r0, [pc, #20]	; (80031f4 <HAL_UART_RxCpltCallback+0x20>)
 80031de:	f000 f947 	bl	8003470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fd18 	bl	8002c1a <_ZN13STM32Hardware10reset_rbufEv>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	24000670 	.word	0x24000670

080031f8 <setup>:

void setup(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
    nh.initNode();
 80031fc:	4804      	ldr	r0, [pc, #16]	; (8003210 <setup+0x18>)
 80031fe:	f000 f943 	bl	8003488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 8003202:	4904      	ldr	r1, [pc, #16]	; (8003214 <setup+0x1c>)
 8003204:	4802      	ldr	r0, [pc, #8]	; (8003210 <setup+0x18>)
 8003206:	f000 f968 	bl	80034da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	24000670 	.word	0x24000670
 8003214:	24001bb0 	.word	0x24001bb0

08003218 <loop>:
void loop(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
    nh.spinOnce();
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <loop+0x10>)
 800321e:	f000 f987 	bl	8003530 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	24000670 	.word	0x24000670

0800322c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d80d      	bhi.n	800325c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	fa22 f103 	lsr.w	r1, r2, r3
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	b2ca      	uxtb	r2, r1
 8003252:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	e7ee      	b.n	800323a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d811      	bhi.n	80032a6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6839      	ldr	r1, [r7, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	440a      	add	r2, r1
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	4611      	mov	r1, r2
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	00d2      	lsls	r2, r2, #3
 8003294:	fa01 f202 	lsl.w	r2, r1, r2
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3301      	adds	r3, #1
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	e7ea      	b.n	800327c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	0800e340 	.word	0x0800e340

080032d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff ffe8 	bl	80032b4 <_ZN3ros15NodeHandleBase_C1Ev>
 80032e4:	4a47      	ldr	r2, [pc, #284]	; (8003404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3304      	adds	r3, #4
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fc68 	bl	8002bc4 <_ZN13STM32HardwareC1Ev>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	f241 5314 	movw	r3, #5396	; 0x1514
 8003306:	4413      	add	r3, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff f8df 	bl	80024cc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b18      	cmp	r3, #24
 8003316:	d80b      	bhi.n	8003330 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	2200      	movs	r2, #0
 8003326:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	3301      	adds	r3, #1
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e7f0      	b.n	8003312 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b18      	cmp	r3, #24
 8003338:	d80a      	bhi.n	8003350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003342:	2100      	movs	r1, #0
 8003344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	3301      	adds	r3, #1
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	e7f1      	b.n	8003334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335a:	d20b      	bcs.n	8003374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	441a      	add	r2, r3
 8003362:	f241 0324 	movw	r3, #4132	; 0x1024
 8003366:	4413      	add	r3, r2
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	3301      	adds	r3, #1
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e7ef      	b.n	8003354 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337e:	d20b      	bcs.n	8003398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	441a      	add	r2, r3
 8003386:	f241 2324 	movw	r3, #4644	; 0x1224
 800338a:	4413      	add	r3, r2
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	3301      	adds	r3, #1
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	e7ef      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800339e:	461a      	mov	r2, r3
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ac:	461a      	mov	r2, r3
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ba:	461a      	mov	r2, r3
 80033bc:	2300      	movs	r3, #0
 80033be:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033c8:	461a      	mov	r2, r3
 80033ca:	2300      	movs	r3, #0
 80033cc:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033d6:	461a      	mov	r2, r3
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e4:	461a      	mov	r2, r3
 80033e6:	2300      	movs	r3, #0
 80033e8:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f2:	461a      	mov	r2, r3
 80033f4:	2300      	movs	r3, #0
 80033f6:	6213      	str	r3, [r2, #32]
  }
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	0800e2fc 	.word	0x0800e2fc

08003408 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	4a04      	ldr	r2, [pc, #16]	; (8003424 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	0800e328 	.word	0x0800e328

08003428 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ffe5 	bl	8003408 <_ZN3ros11Subscriber_C1Ev>
 800343e:	4a0b      	ldr	r2, [pc, #44]	; (800346c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3310      	adds	r3, #16
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fce1 	bl	8002e10 <_ZN8std_msgs5Int64C1Ev>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	621a      	str	r2, [r3, #32]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24
  {
    topic_ = topic_name;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	609a      	str	r2, [r3, #8]
  };
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	0800e2e4 	.word	0x0800e2e4

08003470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3304      	adds	r3, #4
  }
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3304      	adds	r3, #4
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fbb5 	bl	8002c04 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034a0:	461a      	mov	r2, r3
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ae:	461a      	mov	r2, r3
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034bc:	461a      	mov	r2, r3
 80034be:	2300      	movs	r3, #0
 80034c0:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ca:	461a      	mov	r2, r3
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b18      	cmp	r3, #24
 80034ec:	dc19      	bgt.n	8003522 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80034f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10d      	bne.n	800351a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80034fe:	6839      	ldr	r1, [r7, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	605a      	str	r2, [r3, #4]
        return true;
 8003516:	2301      	movs	r3, #1
 8003518:	e004      	b.n	8003524 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3301      	adds	r3, #1
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	e7e2      	b.n	80034e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
      }
    }
    return false;
 8003522:	2300      	movs	r3, #0
  }
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fc5b 	bl	8002df8 <_ZN13STM32Hardware4timeEv>
 8003542:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003556:	4293      	cmp	r3, r2
 8003558:	d905      	bls.n	8003566 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800356c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00e      	beq.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800357a:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	429a      	cmp	r2, r3
 8003582:	d906      	bls.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358a:	461a      	mov	r2, r3
 800358c:	2300      	movs	r3, #0
 800358e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d015      	beq.n	80035ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3304      	adds	r3, #4
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fc28 	bl	8002df8 <_ZN13STM32Hardware4timeEv>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad2      	subs	r2, r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	bf8c      	ite	hi
 80035ba:	2301      	movhi	r3, #1
 80035bc:	2300      	movls	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80035c4:	f06f 0301 	mvn.w	r3, #1
 80035c8:	e226      	b.n	8003a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3304      	adds	r3, #4
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fb34 	bl	8002c3c <_ZN13STM32Hardware4readEv>
 80035d4:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f2c0 81ff 	blt.w	80039dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e4:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4413      	add	r3, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035f2:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035fc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003600:	2b07      	cmp	r3, #7
 8003602:	d12d      	bne.n	8003660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800360a:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8003616:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	b2d1      	uxtb	r1, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	441a      	add	r2, r3
 8003622:	f241 0324 	movw	r3, #4132	; 0x1024
 8003626:	4413      	add	r3, r2
 8003628:	460a      	mov	r2, r1
 800362a:	701a      	strb	r2, [r3, #0]
        bytes_--;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003632:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003636:	3b01      	subs	r3, #1
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800363e:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003648:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1a0      	bne.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003656:	461a      	mov	r2, r3
 8003658:	2308      	movs	r3, #8
 800365a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800365e:	e798      	b.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003666:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800366a:	2b00      	cmp	r3, #0
 800366c:	d130      	bne.n	80036d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2bff      	cmp	r3, #255	; 0xff
 8003672:	d112      	bne.n	800369a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800367e:	3301      	adds	r3, #1
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003686:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3314      	adds	r3, #20
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003694:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 8003698:	e77b      	b.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3304      	adds	r3, #4
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fbaa 	bl	8002df8 <_ZN13STM32Hardware4timeEv>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	bf8c      	ite	hi
 80036b2:	2301      	movhi	r3, #1
 80036b4:	2300      	movls	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f43f af6a 	beq.w	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 80036ca:	f06f 0301 	mvn.w	r3, #1
 80036ce:	e1a3      	b.n	8003a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d121      	bne.n	8003722 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2bfe      	cmp	r3, #254	; 0xfe
 80036e2:	d10b      	bne.n	80036fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ea:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80036ee:	3301      	adds	r3, #1
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036f6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80036fa:	e74a      	b.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003702:	461a      	mov	r2, r3
 8003704:	2300      	movs	r3, #0
 8003706:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003710:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003714:	2b00      	cmp	r3, #0
 8003716:	f47f af3c 	bne.w	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f980 	bl	8003a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003720:	e737      	b.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003728:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800372c:	2b02      	cmp	r3, #2
 800372e:	d120      	bne.n	8003772 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003736:	461a      	mov	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003744:	461a      	mov	r2, r3
 8003746:	2300      	movs	r3, #0
 8003748:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003752:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003756:	3301      	adds	r3, #1
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800375e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003768:	461a      	mov	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003770:	e70f      	b.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003778:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800377c:	2b03      	cmp	r3, #3
 800377e:	d118      	bne.n	80037b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003786:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	4413      	add	r3, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003796:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037a4:	3301      	adds	r3, #1
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037ac:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80037b0:	e6ef      	b.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d11f      	bne.n	8003800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80037ca:	425a      	negs	r2, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	bf58      	it	pl
 80037d2:	4253      	negpl	r3, r2
 80037d4:	2bff      	cmp	r3, #255	; 0xff
 80037d6:	d10b      	bne.n	80037f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037de:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037e2:	3301      	adds	r3, #1
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037ea:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80037ee:	e6d0      	b.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f6:	461a      	mov	r2, r3
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80037fe:	e6c8      	b.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003806:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800380a:	2b05      	cmp	r3, #5
 800380c:	d119      	bne.n	8003842 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003814:	461a      	mov	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003822:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003826:	3301      	adds	r3, #1
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800382e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003838:	461a      	mov	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003840:	e6a7      	b.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003848:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800384c:	2b06      	cmp	r3, #6
 800384e:	d123      	bne.n	8003898 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003856:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	4413      	add	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003866:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003870:	461a      	mov	r2, r3
 8003872:	2307      	movs	r3, #7
 8003874:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800387e:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003882:	2b00      	cmp	r3, #0
 8003884:	f47f ae85 	bne.w	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800388e:	461a      	mov	r2, r3
 8003890:	2308      	movs	r3, #8
 8003892:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003896:	e67c      	b.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	f47f ae75 	bne.w	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ae:	461a      	mov	r2, r3
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038bc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038c0:	425a      	negs	r2, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	bf58      	it	pl
 80038c8:	4253      	negpl	r3, r2
 80038ca:	2bff      	cmp	r3, #255	; 0xff
 80038cc:	f47f ae61 	bne.w	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d116      	bne.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f89e 	bl	8003a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f8ba 	bl	8003a5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f0:	461a      	mov	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800390a:	e085      	b.n	8003a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003912:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003916:	2b0a      	cmp	r3, #10
 8003918:	d108      	bne.n	800392c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	f241 0324 	movw	r3, #4132	; 0x1024
 8003920:	4413      	add	r3, r2
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f97b 	bl	8003c20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800392a:	e632      	b.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003932:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003936:	2b06      	cmp	r3, #6
 8003938:	d112      	bne.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	f241 5314 	movw	r3, #5396	; 0x1514
 8003940:	4413      	add	r3, r2
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	f241 0224 	movw	r2, #4132	; 0x1024
 8003948:	440a      	add	r2, r1
 800394a:	4611      	mov	r1, r2
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe fef2 	bl	8002736 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 800395e:	e618      	b.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003966:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800396a:	2b0b      	cmp	r3, #11
 800396c:	d106      	bne.n	800397c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 800397a:	e60a      	b.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003982:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003986:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003994:	2b00      	cmp	r3, #0
 8003996:	f43f adfc 	beq.w	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80039a4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80039ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80039bc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80039c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	f241 0324 	movw	r3, #4132	; 0x1024
 80039d4:	440b      	add	r3, r1
 80039d6:	4619      	mov	r1, r3
 80039d8:	4790      	blx	r2
    while (true)
 80039da:	e5da      	b.n	8003592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 80039dc:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e4:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d014      	beq.n	8003a16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d909      	bls.n	8003a16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f80c 	bl	8003a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8003a16:	2300      	movs	r3, #0
  }
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003a28:	f107 030c 	add.w	r3, r7, #12
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe f9e9 	bl	8001e04 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f107 020c 	add.w	r2, r7, #12
 8003a3c:	210a      	movs	r1, #10
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4798      	blx	r3
    rt_time = hardware_.time();
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3304      	adds	r3, #4
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff f9d6 	bl	8002df8 <_ZN13STM32Hardware4timeEv>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a54:	615a      	str	r2, [r3, #20]
  }
 8003a56:	bf00      	nop
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003a5e:	b590      	push	{r4, r7, lr}
 8003a60:	b08b      	sub	sp, #44	; 0x2c
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003a66:	f107 030c 	add.w	r3, r7, #12
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe faba 	bl	8001fe4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003a70:	2300      	movs	r3, #0
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	2b18      	cmp	r3, #24
 8003a78:	dc63      	bgt.n	8003b42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d056      	beq.n	8003b3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	6859      	ldr	r1, [r3, #4]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4798      	blx	r3
 8003adc:	4603      	mov	r3, r0
 8003ade:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	330c      	adds	r3, #12
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4608      	mov	r0, r1
 8003b08:	4798      	blx	r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b12:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681c      	ldr	r4, [r3, #0]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe ff91 	bl	8002a50 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003b2e:	4601      	mov	r1, r0
 8003b30:	f107 030c 	add.w	r3, r7, #12
 8003b34:	461a      	mov	r2, r3
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b40:	e798      	b.n	8003a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	2b18      	cmp	r3, #24
 8003b4a:	dc5f      	bgt.n	8003c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b50:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d053      	beq.n	8003c04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b72:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b82:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4798      	blx	r3
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003bac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4608      	mov	r0, r1
 8003bc4:	4798      	blx	r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003bca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bce:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681c      	ldr	r4, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bda:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003bde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	4798      	blx	r3
 8003bf8:	4601      	mov	r1, r0
 8003bfa:	f107 030c 	add.w	r3, r7, #12
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	3301      	adds	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0a:	e79c      	b.n	8003b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8003c18:	bf00      	nop
 8003c1a:	372c      	adds	r7, #44	; 0x2c
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd90      	pop	{r4, r7, pc}

08003c20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003c2a:	f107 0308 	add.w	r3, r7, #8
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe f8e8 	bl	8001e04 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff f8dd 	bl	8002df8 <_ZN13STM32Hardware4timeEv>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003c4c:	f107 0308 	add.w	r3, r7, #8
 8003c50:	6839      	ldr	r1, [r7, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe f946 	bl	8001ee4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	4915      	ldr	r1, [pc, #84]	; (8003cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003c5e:	fba1 1303 	umull	r1, r3, r1, r3
 8003c62:	099b      	lsrs	r3, r3, #6
 8003c64:	4413      	add	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003c68:	6939      	ldr	r1, [r7, #16]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c78:	fb00 f303 	mul.w	r3, r0, r3
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	4a0e      	ldr	r2, [pc, #56]	; (8003cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	440b      	add	r3, r1
 8003c86:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003c88:	f107 0308 	add.w	r3, r7, #8
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f8bf 	bl	8003e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff f8ac 	bl	8002df8 <_ZN13STM32Hardware4timeEv>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8003cac:	bf00      	nop
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	10624dd3 	.word	0x10624dd3
 8003cb8:	000f4240 	.word	0x000f4240

08003cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b63      	cmp	r3, #99	; 0x63
 8003ccc:	dd0b      	ble.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd4:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003cd8:	f083 0301 	eor.w	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e090      	b.n	8003e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	f241 2324 	movw	r3, #4644	; 0x1224
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3307      	adds	r3, #7
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	4790      	blx	r2
 8003cfc:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d04:	22ff      	movs	r2, #255	; 0xff
 8003d06:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d10:	22fe      	movs	r2, #254	; 0xfe
 8003d12:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d20:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d34:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d3e:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d48:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8003d4c:	4413      	add	r3, r2
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d5a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d68:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	b21b      	sxth	r3, r3
 8003d70:	121b      	asrs	r3, r3, #8
 8003d72:	b21b      	sxth	r3, r3
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7c:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003d84:	2305      	movs	r3, #5
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	3306      	adds	r3, #6
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	dc0e      	bgt.n	8003db0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	441a      	add	r2, r3
 8003d98:	f241 2324 	movw	r3, #4644	; 0x1224
 8003d9c:	4413      	add	r3, r2
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	3301      	adds	r3, #1
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	e7eb      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	3307      	adds	r3, #7
 8003db4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	425a      	negs	r2, r3
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	bf58      	it	pl
 8003dc0:	4253      	negpl	r3, r2
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	1c59      	adds	r1, r3, #1
 8003dc8:	6179      	str	r1, [r7, #20]
 8003dca:	43d2      	mvns	r2, r2
 8003dcc:	b2d1      	uxtb	r1, r2
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	f241 2324 	movw	r3, #4644	; 0x1224
 8003dd6:	4413      	add	r3, r2
 8003dd8:	460a      	mov	r2, r1
 8003dda:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de2:	dc0b      	bgt.n	8003dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	1d18      	adds	r0, r3, #4
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	f241 2324 	movw	r3, #4644	; 0x1224
 8003dee:	4413      	add	r3, r2
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4619      	mov	r1, r3
 8003df4:	f7fe ffb6 	bl	8002d64 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	e005      	b.n	8003e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003dfc:	4904      	ldr	r1, [pc, #16]	; (8003e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f84c 	bl	8003e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	0800e278 	.word	0x0800e278

08003e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe ffe8 	bl	8002df8 <_ZN13STM32Hardware4timeEv>
 8003e28:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4917      	ldr	r1, [pc, #92]	; (8003e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003e32:	fba1 1303 	umull	r1, r3, r1, r3
 8003e36:	099b      	lsrs	r3, r3, #6
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e42:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	6859      	ldr	r1, [r3, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003e4c:	fba3 0302 	umull	r0, r3, r3, r2
 8003e50:	099b      	lsrs	r3, r3, #6
 8003e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e56:	fb00 f303 	mul.w	r3, r0, r3
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	4a0d      	ldr	r2, [pc, #52]	; (8003e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	1aca      	subs	r2, r1, r3
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8003e66:	4413      	add	r3, r2
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e6e:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e76:	4413      	add	r3, r2
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	f241 021c 	movw	r2, #4124	; 0x101c
 8003e7e:	440a      	add	r2, r1
 8003e80:	4611      	mov	r1, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fc fbce 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003e88:	bf00      	nop
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	10624dd3 	.word	0x10624dd3
 8003e94:	000f4240 	.word	0x000f4240
 8003e98:	3b9aca00 	.word	0x3b9aca00

08003e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	2103      	movs	r1, #3
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f804 	bl	8003eb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003ec6:	f107 0314 	add.w	r3, r7, #20
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe fa4e 	bl	800236c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003ed0:	7afb      	ldrb	r3, [r7, #11]
 8003ed2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f107 0214 	add.w	r2, r7, #20
 8003ee2:	2107      	movs	r1, #7
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	4798      	blx	r3
  }
 8003ee8:	bf00      	nop
 8003eea:	3720      	adds	r7, #32
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <_Z41__static_initialization_and_destruction_0ii>:
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d10d      	bne.n	8003f1c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d108      	bne.n	8003f1c <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 8003f0a:	4806      	ldr	r0, [pc, #24]	; (8003f24 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003f0c:	f7ff f9e2 	bl	80032d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8003f10:	2301      	movs	r3, #1
 8003f12:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003f14:	4905      	ldr	r1, [pc, #20]	; (8003f2c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003f16:	4806      	ldr	r0, [pc, #24]	; (8003f30 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003f18:	f7ff fa86 	bl	8003428 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	24000670 	.word	0x24000670
 8003f28:	0800318d 	.word	0x0800318d
 8003f2c:	0800e2b4 	.word	0x0800e2b4
 8003f30:	24001bb0 	.word	0x24001bb0

08003f34 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3310      	adds	r3, #16
 8003f42:	6839      	ldr	r1, [r7, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff f802 	bl	8002f4e <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	3210      	adds	r2, #16
 8003f52:	4610      	mov	r0, r2
 8003f54:	4798      	blx	r3
  }
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3310      	adds	r3, #16
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff f8e6 	bl	8003154 <_ZN8std_msgs5Int647getTypeEv>
 8003f88:	4603      	mov	r3, r0
  }
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3310      	adds	r3, #16
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff f8e6 	bl	8003170 <_ZN8std_msgs5Int646getMD5Ev>
 8003fa4:	4603      	mov	r3, r0
  }
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
    return configured_;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fbc:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <_GLOBAL__sub_I__Z8callbackRKN8std_msgs5Int64E>:
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	f7ff ff8b 	bl	8003ef0 <_Z41__static_initialization_and_destruction_0ii>
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <HAL_MspInit+0x3c>)
 8003fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fe8:	4a0b      	ldr	r2, [pc, #44]	; (8004018 <HAL_MspInit+0x3c>)
 8003fea:	f043 0302 	orr.w	r3, r3, #2
 8003fee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_MspInit+0x3c>)
 8003ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	607b      	str	r3, [r7, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004000:	2200      	movs	r2, #0
 8004002:	2100      	movs	r1, #0
 8004004:	2005      	movs	r0, #5
 8004006:	f000 fe20 	bl	8004c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800400a:	2005      	movs	r0, #5
 800400c:	f000 fe37 	bl	8004c7e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	58024400 	.word	0x58024400

0800401c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a2b      	ldr	r2, [pc, #172]	; (80040d8 <HAL_TIM_PWM_MspInit+0xbc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d10f      	bne.n	800404e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800402e:	4b2b      	ldr	r3, [pc, #172]	; (80040dc <HAL_TIM_PWM_MspInit+0xc0>)
 8004030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004034:	4a29      	ldr	r2, [pc, #164]	; (80040dc <HAL_TIM_PWM_MspInit+0xc0>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800403e:	4b27      	ldr	r3, [pc, #156]	; (80040dc <HAL_TIM_PWM_MspInit+0xc0>)
 8004040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800404c:	e03d      	b.n	80040ca <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <HAL_TIM_PWM_MspInit+0xc4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d10f      	bne.n	8004078 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004058:	4b20      	ldr	r3, [pc, #128]	; (80040dc <HAL_TIM_PWM_MspInit+0xc0>)
 800405a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800405e:	4a1f      	ldr	r2, [pc, #124]	; (80040dc <HAL_TIM_PWM_MspInit+0xc0>)
 8004060:	f043 0304 	orr.w	r3, r3, #4
 8004064:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004068:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <HAL_TIM_PWM_MspInit+0xc0>)
 800406a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	693b      	ldr	r3, [r7, #16]
}
 8004076:	e028      	b.n	80040ca <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <HAL_TIM_PWM_MspInit+0xc8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d10f      	bne.n	80040a2 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004082:	4b16      	ldr	r3, [pc, #88]	; (80040dc <HAL_TIM_PWM_MspInit+0xc0>)
 8004084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004088:	4a14      	ldr	r2, [pc, #80]	; (80040dc <HAL_TIM_PWM_MspInit+0xc0>)
 800408a:	f043 0308 	orr.w	r3, r3, #8
 800408e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004092:	4b12      	ldr	r3, [pc, #72]	; (80040dc <HAL_TIM_PWM_MspInit+0xc0>)
 8004094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]
}
 80040a0:	e013      	b.n	80040ca <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM15)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a10      	ldr	r2, [pc, #64]	; (80040e8 <HAL_TIM_PWM_MspInit+0xcc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d10e      	bne.n	80040ca <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <HAL_TIM_PWM_MspInit+0xc0>)
 80040ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <HAL_TIM_PWM_MspInit+0xc0>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80040bc:	4b07      	ldr	r3, [pc, #28]	; (80040dc <HAL_TIM_PWM_MspInit+0xc0>)
 80040be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c6:	60bb      	str	r3, [r7, #8]
 80040c8:	68bb      	ldr	r3, [r7, #8]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40010000 	.word	0x40010000
 80040dc:	58024400 	.word	0x58024400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40000c00 	.word	0x40000c00
 80040e8:	40014000 	.word	0x40014000

080040ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fc:	d117      	bne.n	800412e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040fe:	4b22      	ldr	r3, [pc, #136]	; (8004188 <HAL_TIM_Base_MspInit+0x9c>)
 8004100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004104:	4a20      	ldr	r2, [pc, #128]	; (8004188 <HAL_TIM_Base_MspInit+0x9c>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800410e:	4b1e      	ldr	r3, [pc, #120]	; (8004188 <HAL_TIM_Base_MspInit+0x9c>)
 8004110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800411c:	2200      	movs	r2, #0
 800411e:	2100      	movs	r1, #0
 8004120:	201c      	movs	r0, #28
 8004122:	f000 fd92 	bl	8004c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004126:	201c      	movs	r0, #28
 8004128:	f000 fda9 	bl	8004c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800412c:	e028      	b.n	8004180 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM6)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a16      	ldr	r2, [pc, #88]	; (800418c <HAL_TIM_Base_MspInit+0xa0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d10f      	bne.n	8004158 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004138:	4b13      	ldr	r3, [pc, #76]	; (8004188 <HAL_TIM_Base_MspInit+0x9c>)
 800413a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800413e:	4a12      	ldr	r2, [pc, #72]	; (8004188 <HAL_TIM_Base_MspInit+0x9c>)
 8004140:	f043 0310 	orr.w	r3, r3, #16
 8004144:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <HAL_TIM_Base_MspInit+0x9c>)
 800414a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	693b      	ldr	r3, [r7, #16]
}
 8004156:	e013      	b.n	8004180 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM7)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a0c      	ldr	r2, [pc, #48]	; (8004190 <HAL_TIM_Base_MspInit+0xa4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d10e      	bne.n	8004180 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_TIM_Base_MspInit+0x9c>)
 8004164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004168:	4a07      	ldr	r2, [pc, #28]	; (8004188 <HAL_TIM_Base_MspInit+0x9c>)
 800416a:	f043 0320 	orr.w	r3, r3, #32
 800416e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_TIM_Base_MspInit+0x9c>)
 8004174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
}
 8004180:	bf00      	nop
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	58024400 	.word	0x58024400
 800418c:	40001000 	.word	0x40001000
 8004190:	40001400 	.word	0x40001400

08004194 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b090      	sub	sp, #64	; 0x40
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800419c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	60da      	str	r2, [r3, #12]
 80041aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a78      	ldr	r2, [pc, #480]	; (8004394 <HAL_TIM_Encoder_MspInit+0x200>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d14d      	bne.n	8004252 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041b6:	4b78      	ldr	r3, [pc, #480]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 80041b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041bc:	4a76      	ldr	r2, [pc, #472]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 80041be:	f043 0302 	orr.w	r3, r3, #2
 80041c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041c6:	4b74      	ldr	r3, [pc, #464]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 80041c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d4:	4b70      	ldr	r3, [pc, #448]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 80041d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041da:	4a6f      	ldr	r2, [pc, #444]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041e4:	4b6c      	ldr	r3, [pc, #432]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 80041e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041f2:	4b69      	ldr	r3, [pc, #420]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 80041f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f8:	4a67      	ldr	r2, [pc, #412]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 80041fa:	f043 0302 	orr.w	r3, r3, #2
 80041fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004202:	4b65      	ldr	r3, [pc, #404]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 8004204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	623b      	str	r3, [r7, #32]
 800420e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004210:	2340      	movs	r3, #64	; 0x40
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004214:	2302      	movs	r3, #2
 8004216:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004218:	2300      	movs	r3, #0
 800421a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421c:	2300      	movs	r3, #0
 800421e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004220:	2302      	movs	r3, #2
 8004222:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004228:	4619      	mov	r1, r3
 800422a:	485c      	ldr	r0, [pc, #368]	; (800439c <HAL_TIM_Encoder_MspInit+0x208>)
 800422c:	f003 fb7c 	bl	8007928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004230:	2320      	movs	r3, #32
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004234:	2302      	movs	r3, #2
 8004236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004238:	2300      	movs	r3, #0
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423c:	2300      	movs	r3, #0
 800423e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004240:	2302      	movs	r3, #2
 8004242:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004248:	4619      	mov	r1, r3
 800424a:	4855      	ldr	r0, [pc, #340]	; (80043a0 <HAL_TIM_Encoder_MspInit+0x20c>)
 800424c:	f003 fb6c 	bl	8007928 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8004250:	e09b      	b.n	800438a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a53      	ldr	r2, [pc, #332]	; (80043a4 <HAL_TIM_Encoder_MspInit+0x210>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d12e      	bne.n	80042ba <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800425c:	4b4e      	ldr	r3, [pc, #312]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 800425e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004262:	4a4d      	ldr	r2, [pc, #308]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 8004264:	f043 0302 	orr.w	r3, r3, #2
 8004268:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800426c:	4b4a      	ldr	r3, [pc, #296]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 800426e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800427a:	4b47      	ldr	r3, [pc, #284]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 800427c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004280:	4a45      	ldr	r2, [pc, #276]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 8004282:	f043 0304 	orr.w	r3, r3, #4
 8004286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800428a:	4b43      	ldr	r3, [pc, #268]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 800428c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004298:	23c0      	movs	r3, #192	; 0xc0
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429c:	2302      	movs	r3, #2
 800429e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a4:	2300      	movs	r3, #0
 80042a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80042a8:	2303      	movs	r3, #3
 80042aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042b0:	4619      	mov	r1, r3
 80042b2:	483d      	ldr	r0, [pc, #244]	; (80043a8 <HAL_TIM_Encoder_MspInit+0x214>)
 80042b4:	f003 fb38 	bl	8007928 <HAL_GPIO_Init>
}
 80042b8:	e067      	b.n	800438a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM23)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a3b      	ldr	r2, [pc, #236]	; (80043ac <HAL_TIM_Encoder_MspInit+0x218>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d12e      	bne.n	8004322 <HAL_TIM_Encoder_MspInit+0x18e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80042c4:	4b34      	ldr	r3, [pc, #208]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 80042c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80042ca:	4a33      	ldr	r2, [pc, #204]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 80042cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80042d4:	4b30      	ldr	r3, [pc, #192]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 80042d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80042da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80042e2:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 80042e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e8:	4a2b      	ldr	r2, [pc, #172]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 80042ea:	f043 0320 	orr.w	r3, r3, #32
 80042ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042f2:	4b29      	ldr	r3, [pc, #164]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 80042f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004300:	2303      	movs	r3, #3
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004304:	2302      	movs	r3, #2
 8004306:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004308:	2300      	movs	r3, #0
 800430a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430c:	2300      	movs	r3, #0
 800430e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8004310:	230d      	movs	r3, #13
 8004312:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004314:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004318:	4619      	mov	r1, r3
 800431a:	4825      	ldr	r0, [pc, #148]	; (80043b0 <HAL_TIM_Encoder_MspInit+0x21c>)
 800431c:	f003 fb04 	bl	8007928 <HAL_GPIO_Init>
}
 8004320:	e033      	b.n	800438a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM24)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a23      	ldr	r2, [pc, #140]	; (80043b4 <HAL_TIM_Encoder_MspInit+0x220>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d12e      	bne.n	800438a <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM24_CLK_ENABLE();
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 800432e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004332:	4a19      	ldr	r2, [pc, #100]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 8004334:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004338:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800433c:	4b16      	ldr	r3, [pc, #88]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 800433e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800434a:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 800434c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004350:	4a11      	ldr	r2, [pc, #68]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 8004352:	f043 0320 	orr.w	r3, r3, #32
 8004356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800435a:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <HAL_TIM_Encoder_MspInit+0x204>)
 800435c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004368:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436e:	2302      	movs	r3, #2
 8004370:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004372:	2300      	movs	r3, #0
 8004374:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004376:	2300      	movs	r3, #0
 8004378:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 800437a:	230e      	movs	r3, #14
 800437c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800437e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004382:	4619      	mov	r1, r3
 8004384:	480a      	ldr	r0, [pc, #40]	; (80043b0 <HAL_TIM_Encoder_MspInit+0x21c>)
 8004386:	f003 facf 	bl	8007928 <HAL_GPIO_Init>
}
 800438a:	bf00      	nop
 800438c:	3740      	adds	r7, #64	; 0x40
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40000400 	.word	0x40000400
 8004398:	58024400 	.word	0x58024400
 800439c:	58020000 	.word	0x58020000
 80043a0:	58020400 	.word	0x58020400
 80043a4:	40010400 	.word	0x40010400
 80043a8:	58020800 	.word	0x58020800
 80043ac:	4000e000 	.word	0x4000e000
 80043b0:	58021400 	.word	0x58021400
 80043b4:	4000e400 	.word	0x4000e400

080043b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08c      	sub	sp, #48	; 0x30
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c0:	f107 031c 	add.w	r3, r7, #28
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a4b      	ldr	r2, [pc, #300]	; (8004504 <HAL_TIM_MspPostInit+0x14c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d120      	bne.n	800441c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80043da:	4b4b      	ldr	r3, [pc, #300]	; (8004508 <HAL_TIM_MspPostInit+0x150>)
 80043dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043e0:	4a49      	ldr	r2, [pc, #292]	; (8004508 <HAL_TIM_MspPostInit+0x150>)
 80043e2:	f043 0310 	orr.w	r3, r3, #16
 80043e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043ea:	4b47      	ldr	r3, [pc, #284]	; (8004508 <HAL_TIM_MspPostInit+0x150>)
 80043ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80043f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fe:	2302      	movs	r3, #2
 8004400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004406:	2300      	movs	r3, #0
 8004408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800440a:	2301      	movs	r3, #1
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800440e:	f107 031c 	add.w	r3, r7, #28
 8004412:	4619      	mov	r1, r3
 8004414:	483d      	ldr	r0, [pc, #244]	; (800450c <HAL_TIM_MspPostInit+0x154>)
 8004416:	f003 fa87 	bl	8007928 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800441a:	e06e      	b.n	80044fa <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a3b      	ldr	r2, [pc, #236]	; (8004510 <HAL_TIM_MspPostInit+0x158>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d120      	bne.n	8004468 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004426:	4b38      	ldr	r3, [pc, #224]	; (8004508 <HAL_TIM_MspPostInit+0x150>)
 8004428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800442c:	4a36      	ldr	r2, [pc, #216]	; (8004508 <HAL_TIM_MspPostInit+0x150>)
 800442e:	f043 0308 	orr.w	r3, r3, #8
 8004432:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004436:	4b34      	ldr	r3, [pc, #208]	; (8004508 <HAL_TIM_MspPostInit+0x150>)
 8004438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444a:	2302      	movs	r3, #2
 800444c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444e:	2300      	movs	r3, #0
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004452:	2300      	movs	r3, #0
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004456:	2302      	movs	r3, #2
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800445a:	f107 031c 	add.w	r3, r7, #28
 800445e:	4619      	mov	r1, r3
 8004460:	482c      	ldr	r0, [pc, #176]	; (8004514 <HAL_TIM_MspPostInit+0x15c>)
 8004462:	f003 fa61 	bl	8007928 <HAL_GPIO_Init>
}
 8004466:	e048      	b.n	80044fa <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a2a      	ldr	r2, [pc, #168]	; (8004518 <HAL_TIM_MspPostInit+0x160>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d11f      	bne.n	80044b2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004472:	4b25      	ldr	r3, [pc, #148]	; (8004508 <HAL_TIM_MspPostInit+0x150>)
 8004474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004478:	4a23      	ldr	r2, [pc, #140]	; (8004508 <HAL_TIM_MspPostInit+0x150>)
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004482:	4b21      	ldr	r3, [pc, #132]	; (8004508 <HAL_TIM_MspPostInit+0x150>)
 8004484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004490:	2301      	movs	r3, #1
 8004492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004494:	2302      	movs	r3, #2
 8004496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004498:	2300      	movs	r3, #0
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449c:	2300      	movs	r3, #0
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80044a0:	2302      	movs	r3, #2
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044a4:	f107 031c 	add.w	r3, r7, #28
 80044a8:	4619      	mov	r1, r3
 80044aa:	481c      	ldr	r0, [pc, #112]	; (800451c <HAL_TIM_MspPostInit+0x164>)
 80044ac:	f003 fa3c 	bl	8007928 <HAL_GPIO_Init>
}
 80044b0:	e023      	b.n	80044fa <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1a      	ldr	r2, [pc, #104]	; (8004520 <HAL_TIM_MspPostInit+0x168>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d11e      	bne.n	80044fa <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044bc:	4b12      	ldr	r3, [pc, #72]	; (8004508 <HAL_TIM_MspPostInit+0x150>)
 80044be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044c2:	4a11      	ldr	r2, [pc, #68]	; (8004508 <HAL_TIM_MspPostInit+0x150>)
 80044c4:	f043 0310 	orr.w	r3, r3, #16
 80044c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044cc:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <HAL_TIM_MspPostInit+0x150>)
 80044ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80044da:	2320      	movs	r3, #32
 80044dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044de:	2302      	movs	r3, #2
 80044e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e6:	2300      	movs	r3, #0
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80044ea:	2304      	movs	r3, #4
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044ee:	f107 031c 	add.w	r3, r7, #28
 80044f2:	4619      	mov	r1, r3
 80044f4:	4805      	ldr	r0, [pc, #20]	; (800450c <HAL_TIM_MspPostInit+0x154>)
 80044f6:	f003 fa17 	bl	8007928 <HAL_GPIO_Init>
}
 80044fa:	bf00      	nop
 80044fc:	3730      	adds	r7, #48	; 0x30
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40010000 	.word	0x40010000
 8004508:	58024400 	.word	0x58024400
 800450c:	58021000 	.word	0x58021000
 8004510:	40000800 	.word	0x40000800
 8004514:	58020c00 	.word	0x58020c00
 8004518:	40000c00 	.word	0x40000c00
 800451c:	58020000 	.word	0x58020000
 8004520:	40014000 	.word	0x40014000

08004524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b0b6      	sub	sp, #216	; 0xd8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800452c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800453c:	f107 0310 	add.w	r3, r7, #16
 8004540:	22b4      	movs	r2, #180	; 0xb4
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f009 fc7d 	bl	800de44 <memset>
  if(huart->Instance==USART3)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a57      	ldr	r2, [pc, #348]	; (80046ac <HAL_UART_MspInit+0x188>)
 8004550:	4293      	cmp	r3, r2
 8004552:	f040 80a7 	bne.w	80046a4 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004556:	2302      	movs	r3, #2
 8004558:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004560:	f107 0310 	add.w	r3, r7, #16
 8004564:	4618      	mov	r0, r3
 8004566:	f004 fb15 	bl	8008b94 <HAL_RCCEx_PeriphCLKConfig>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004570:	f7fd fc22 	bl	8001db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004574:	4b4e      	ldr	r3, [pc, #312]	; (80046b0 <HAL_UART_MspInit+0x18c>)
 8004576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800457a:	4a4d      	ldr	r2, [pc, #308]	; (80046b0 <HAL_UART_MspInit+0x18c>)
 800457c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004580:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004584:	4b4a      	ldr	r3, [pc, #296]	; (80046b0 <HAL_UART_MspInit+0x18c>)
 8004586:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800458a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004592:	4b47      	ldr	r3, [pc, #284]	; (80046b0 <HAL_UART_MspInit+0x18c>)
 8004594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004598:	4a45      	ldr	r2, [pc, #276]	; (80046b0 <HAL_UART_MspInit+0x18c>)
 800459a:	f043 0302 	orr.w	r3, r3, #2
 800459e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045a2:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <HAL_UART_MspInit+0x18c>)
 80045a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80045b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80045b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b8:	2302      	movs	r3, #2
 80045ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80045ca:	2307      	movs	r3, #7
 80045cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80045d4:	4619      	mov	r1, r3
 80045d6:	4837      	ldr	r0, [pc, #220]	; (80046b4 <HAL_UART_MspInit+0x190>)
 80045d8:	f003 f9a6 	bl	8007928 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80045dc:	4b36      	ldr	r3, [pc, #216]	; (80046b8 <HAL_UART_MspInit+0x194>)
 80045de:	4a37      	ldr	r2, [pc, #220]	; (80046bc <HAL_UART_MspInit+0x198>)
 80045e0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80045e2:	4b35      	ldr	r3, [pc, #212]	; (80046b8 <HAL_UART_MspInit+0x194>)
 80045e4:	222d      	movs	r2, #45	; 0x2d
 80045e6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045e8:	4b33      	ldr	r3, [pc, #204]	; (80046b8 <HAL_UART_MspInit+0x194>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045ee:	4b32      	ldr	r3, [pc, #200]	; (80046b8 <HAL_UART_MspInit+0x194>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045f4:	4b30      	ldr	r3, [pc, #192]	; (80046b8 <HAL_UART_MspInit+0x194>)
 80045f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045fa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045fc:	4b2e      	ldr	r3, [pc, #184]	; (80046b8 <HAL_UART_MspInit+0x194>)
 80045fe:	2200      	movs	r2, #0
 8004600:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004602:	4b2d      	ldr	r3, [pc, #180]	; (80046b8 <HAL_UART_MspInit+0x194>)
 8004604:	2200      	movs	r2, #0
 8004606:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004608:	4b2b      	ldr	r3, [pc, #172]	; (80046b8 <HAL_UART_MspInit+0x194>)
 800460a:	2200      	movs	r2, #0
 800460c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800460e:	4b2a      	ldr	r3, [pc, #168]	; (80046b8 <HAL_UART_MspInit+0x194>)
 8004610:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004614:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004616:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <HAL_UART_MspInit+0x194>)
 8004618:	2200      	movs	r2, #0
 800461a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800461c:	4826      	ldr	r0, [pc, #152]	; (80046b8 <HAL_UART_MspInit+0x194>)
 800461e:	f000 fb49 	bl	8004cb4 <HAL_DMA_Init>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8004628:	f7fd fbc6 	bl	8001db8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a22      	ldr	r2, [pc, #136]	; (80046b8 <HAL_UART_MspInit+0x194>)
 8004630:	67da      	str	r2, [r3, #124]	; 0x7c
 8004632:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <HAL_UART_MspInit+0x194>)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8004638:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <HAL_UART_MspInit+0x19c>)
 800463a:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <HAL_UART_MspInit+0x1a0>)
 800463c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800463e:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <HAL_UART_MspInit+0x19c>)
 8004640:	222e      	movs	r2, #46	; 0x2e
 8004642:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004644:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <HAL_UART_MspInit+0x19c>)
 8004646:	2240      	movs	r2, #64	; 0x40
 8004648:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800464a:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <HAL_UART_MspInit+0x19c>)
 800464c:	2200      	movs	r2, #0
 800464e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004650:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <HAL_UART_MspInit+0x19c>)
 8004652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004656:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004658:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <HAL_UART_MspInit+0x19c>)
 800465a:	2200      	movs	r2, #0
 800465c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800465e:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <HAL_UART_MspInit+0x19c>)
 8004660:	2200      	movs	r2, #0
 8004662:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004664:	4b16      	ldr	r3, [pc, #88]	; (80046c0 <HAL_UART_MspInit+0x19c>)
 8004666:	2200      	movs	r2, #0
 8004668:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800466a:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <HAL_UART_MspInit+0x19c>)
 800466c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004670:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004672:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <HAL_UART_MspInit+0x19c>)
 8004674:	2200      	movs	r2, #0
 8004676:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004678:	4811      	ldr	r0, [pc, #68]	; (80046c0 <HAL_UART_MspInit+0x19c>)
 800467a:	f000 fb1b 	bl	8004cb4 <HAL_DMA_Init>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8004684:	f7fd fb98 	bl	8001db8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a0d      	ldr	r2, [pc, #52]	; (80046c0 <HAL_UART_MspInit+0x19c>)
 800468c:	679a      	str	r2, [r3, #120]	; 0x78
 800468e:	4a0c      	ldr	r2, [pc, #48]	; (80046c0 <HAL_UART_MspInit+0x19c>)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004694:	2200      	movs	r2, #0
 8004696:	2100      	movs	r1, #0
 8004698:	2027      	movs	r0, #39	; 0x27
 800469a:	f000 fad6 	bl	8004c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800469e:	2027      	movs	r0, #39	; 0x27
 80046a0:	f000 faed 	bl	8004c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80046a4:	bf00      	nop
 80046a6:	37d8      	adds	r7, #216	; 0xd8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40004800 	.word	0x40004800
 80046b0:	58024400 	.word	0x58024400
 80046b4:	58020400 	.word	0x58020400
 80046b8:	24000468 	.word	0x24000468
 80046bc:	40020010 	.word	0x40020010
 80046c0:	240004e0 	.word	0x240004e0
 80046c4:	40020028 	.word	0x40020028

080046c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80046cc:	e7fe      	b.n	80046cc <NMI_Handler+0x4>

080046ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046ce:	b480      	push	{r7}
 80046d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046d2:	e7fe      	b.n	80046d2 <HardFault_Handler+0x4>

080046d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046d8:	e7fe      	b.n	80046d8 <MemManage_Handler+0x4>

080046da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046da:	b480      	push	{r7}
 80046dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046de:	e7fe      	b.n	80046de <BusFault_Handler+0x4>

080046e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046e4:	e7fe      	b.n	80046e4 <UsageFault_Handler+0x4>

080046e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046e6:	b480      	push	{r7}
 80046e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046f8:	bf00      	nop
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004702:	b480      	push	{r7}
 8004704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004706:	bf00      	nop
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004714:	f000 f99e 	bl	8004a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004718:	bf00      	nop
 800471a:	bd80      	pop	{r7, pc}

0800471c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004720:	bf00      	nop
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004730:	4802      	ldr	r0, [pc, #8]	; (800473c <DMA1_Stream0_IRQHandler+0x10>)
 8004732:	f001 fde7 	bl	8006304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004736:	bf00      	nop
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	24000468 	.word	0x24000468

08004740 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004744:	4802      	ldr	r0, [pc, #8]	; (8004750 <DMA1_Stream1_IRQHandler+0x10>)
 8004746:	f001 fddd 	bl	8006304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800474a:	bf00      	nop
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	240004e0 	.word	0x240004e0

08004754 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004758:	4802      	ldr	r0, [pc, #8]	; (8004764 <TIM2_IRQHandler+0x10>)
 800475a:	f006 f917 	bl	800a98c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800475e:	bf00      	nop
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	240000e0 	.word	0x240000e0

08004768 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800476c:	4802      	ldr	r0, [pc, #8]	; (8004778 <USART3_IRQHandler+0x10>)
 800476e:	f007 fb33 	bl	800bdd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004772:	bf00      	nop
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	240003d8 	.word	0x240003d8

0800477c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
	return 1;
 8004780:	2301      	movs	r3, #1
}
 8004782:	4618      	mov	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <_kill>:

int _kill(int pid, int sig)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004796:	f009 fb1d 	bl	800ddd4 <__errno>
 800479a:	4603      	mov	r3, r0
 800479c:	2216      	movs	r2, #22
 800479e:	601a      	str	r2, [r3, #0]
	return -1;
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <_exit>:

void _exit (int status)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80047b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ffe7 	bl	800478c <_kill>
	while (1) {}		/* Make sure we hang here */
 80047be:	e7fe      	b.n	80047be <_exit+0x12>

080047c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047c8:	4a14      	ldr	r2, [pc, #80]	; (800481c <_sbrk+0x5c>)
 80047ca:	4b15      	ldr	r3, [pc, #84]	; (8004820 <_sbrk+0x60>)
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047d4:	4b13      	ldr	r3, [pc, #76]	; (8004824 <_sbrk+0x64>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d102      	bne.n	80047e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047dc:	4b11      	ldr	r3, [pc, #68]	; (8004824 <_sbrk+0x64>)
 80047de:	4a12      	ldr	r2, [pc, #72]	; (8004828 <_sbrk+0x68>)
 80047e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <_sbrk+0x64>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4413      	add	r3, r2
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d207      	bcs.n	8004800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047f0:	f009 faf0 	bl	800ddd4 <__errno>
 80047f4:	4603      	mov	r3, r0
 80047f6:	220c      	movs	r2, #12
 80047f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047fe:	e009      	b.n	8004814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004800:	4b08      	ldr	r3, [pc, #32]	; (8004824 <_sbrk+0x64>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004806:	4b07      	ldr	r3, [pc, #28]	; (8004824 <_sbrk+0x64>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4413      	add	r3, r2
 800480e:	4a05      	ldr	r2, [pc, #20]	; (8004824 <_sbrk+0x64>)
 8004810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004812:	68fb      	ldr	r3, [r7, #12]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	24050000 	.word	0x24050000
 8004820:	00000400 	.word	0x00000400
 8004824:	24001bd8 	.word	0x24001bd8
 8004828:	24001bf0 	.word	0x24001bf0

0800482c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004830:	4b32      	ldr	r3, [pc, #200]	; (80048fc <SystemInit+0xd0>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004836:	4a31      	ldr	r2, [pc, #196]	; (80048fc <SystemInit+0xd0>)
 8004838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800483c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004840:	4b2f      	ldr	r3, [pc, #188]	; (8004900 <SystemInit+0xd4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	2b06      	cmp	r3, #6
 800484a:	d807      	bhi.n	800485c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800484c:	4b2c      	ldr	r3, [pc, #176]	; (8004900 <SystemInit+0xd4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f023 030f 	bic.w	r3, r3, #15
 8004854:	4a2a      	ldr	r2, [pc, #168]	; (8004900 <SystemInit+0xd4>)
 8004856:	f043 0307 	orr.w	r3, r3, #7
 800485a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800485c:	4b29      	ldr	r3, [pc, #164]	; (8004904 <SystemInit+0xd8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a28      	ldr	r2, [pc, #160]	; (8004904 <SystemInit+0xd8>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004868:	4b26      	ldr	r3, [pc, #152]	; (8004904 <SystemInit+0xd8>)
 800486a:	2200      	movs	r2, #0
 800486c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800486e:	4b25      	ldr	r3, [pc, #148]	; (8004904 <SystemInit+0xd8>)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4924      	ldr	r1, [pc, #144]	; (8004904 <SystemInit+0xd8>)
 8004874:	4b24      	ldr	r3, [pc, #144]	; (8004908 <SystemInit+0xdc>)
 8004876:	4013      	ands	r3, r2
 8004878:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800487a:	4b21      	ldr	r3, [pc, #132]	; (8004900 <SystemInit+0xd4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004886:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <SystemInit+0xd4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 030f 	bic.w	r3, r3, #15
 800488e:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <SystemInit+0xd4>)
 8004890:	f043 0307 	orr.w	r3, r3, #7
 8004894:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004896:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <SystemInit+0xd8>)
 8004898:	2200      	movs	r2, #0
 800489a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <SystemInit+0xd8>)
 800489e:	2200      	movs	r2, #0
 80048a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80048a2:	4b18      	ldr	r3, [pc, #96]	; (8004904 <SystemInit+0xd8>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80048a8:	4b16      	ldr	r3, [pc, #88]	; (8004904 <SystemInit+0xd8>)
 80048aa:	4a18      	ldr	r2, [pc, #96]	; (800490c <SystemInit+0xe0>)
 80048ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80048ae:	4b15      	ldr	r3, [pc, #84]	; (8004904 <SystemInit+0xd8>)
 80048b0:	4a17      	ldr	r2, [pc, #92]	; (8004910 <SystemInit+0xe4>)
 80048b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80048b4:	4b13      	ldr	r3, [pc, #76]	; (8004904 <SystemInit+0xd8>)
 80048b6:	4a17      	ldr	r2, [pc, #92]	; (8004914 <SystemInit+0xe8>)
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <SystemInit+0xd8>)
 80048bc:	2200      	movs	r2, #0
 80048be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80048c0:	4b10      	ldr	r3, [pc, #64]	; (8004904 <SystemInit+0xd8>)
 80048c2:	4a14      	ldr	r2, [pc, #80]	; (8004914 <SystemInit+0xe8>)
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80048c6:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <SystemInit+0xd8>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80048cc:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <SystemInit+0xd8>)
 80048ce:	4a11      	ldr	r2, [pc, #68]	; (8004914 <SystemInit+0xe8>)
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80048d2:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <SystemInit+0xd8>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <SystemInit+0xd8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a09      	ldr	r2, [pc, #36]	; (8004904 <SystemInit+0xd8>)
 80048de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80048e4:	4b07      	ldr	r3, [pc, #28]	; (8004904 <SystemInit+0xd8>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80048ea:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <SystemInit+0xec>)
 80048ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80048f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80048f2:	bf00      	nop
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	e000ed00 	.word	0xe000ed00
 8004900:	52002000 	.word	0x52002000
 8004904:	58024400 	.word	0x58024400
 8004908:	eaf6ed7f 	.word	0xeaf6ed7f
 800490c:	02020200 	.word	0x02020200
 8004910:	01ff0000 	.word	0x01ff0000
 8004914:	01010280 	.word	0x01010280
 8004918:	52004000 	.word	0x52004000

0800491c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800491c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004954 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004920:	f7ff ff84 	bl	800482c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004924:	480c      	ldr	r0, [pc, #48]	; (8004958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004926:	490d      	ldr	r1, [pc, #52]	; (800495c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004928:	4a0d      	ldr	r2, [pc, #52]	; (8004960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800492a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800492c:	e002      	b.n	8004934 <LoopCopyDataInit>

0800492e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800492e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004932:	3304      	adds	r3, #4

08004934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004938:	d3f9      	bcc.n	800492e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800493a:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800493c:	4c0a      	ldr	r4, [pc, #40]	; (8004968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800493e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004940:	e001      	b.n	8004946 <LoopFillZerobss>

08004942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004944:	3204      	adds	r2, #4

08004946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004948:	d3fb      	bcc.n	8004942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800494a:	f009 fa49 	bl	800dde0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800494e:	f7fb fe97 	bl	8000680 <main>
  bx  lr
 8004952:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004954:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004958:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800495c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004960:	0800e418 	.word	0x0800e418
  ldr r2, =_sbss
 8004964:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8004968:	24001bf0 	.word	0x24001bf0

0800496c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800496c:	e7fe      	b.n	800496c <ADC3_IRQHandler>
	...

08004970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004976:	2003      	movs	r0, #3
 8004978:	f000 f95c 	bl	8004c34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800497c:	f003 ff34 	bl	80087e8 <HAL_RCC_GetSysClockFreq>
 8004980:	4602      	mov	r2, r0
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <HAL_Init+0x68>)
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	0a1b      	lsrs	r3, r3, #8
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	4913      	ldr	r1, [pc, #76]	; (80049dc <HAL_Init+0x6c>)
 800498e:	5ccb      	ldrb	r3, [r1, r3]
 8004990:	f003 031f 	and.w	r3, r3, #31
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
 8004998:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800499a:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <HAL_Init+0x68>)
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	4a0e      	ldr	r2, [pc, #56]	; (80049dc <HAL_Init+0x6c>)
 80049a4:	5cd3      	ldrb	r3, [r2, r3]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
 80049b0:	4a0b      	ldr	r2, [pc, #44]	; (80049e0 <HAL_Init+0x70>)
 80049b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049b4:	4a0b      	ldr	r2, [pc, #44]	; (80049e4 <HAL_Init+0x74>)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049ba:	2000      	movs	r0, #0
 80049bc:	f000 f814 	bl	80049e8 <HAL_InitTick>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e002      	b.n	80049d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80049ca:	f7ff fb07 	bl	8003fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	58024400 	.word	0x58024400
 80049dc:	0800e3c4 	.word	0x0800e3c4
 80049e0:	24000004 	.word	0x24000004
 80049e4:	24000000 	.word	0x24000000

080049e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80049f0:	4b15      	ldr	r3, [pc, #84]	; (8004a48 <HAL_InitTick+0x60>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e021      	b.n	8004a40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80049fc:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <HAL_InitTick+0x64>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <HAL_InitTick+0x60>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	4619      	mov	r1, r3
 8004a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 f941 	bl	8004c9a <HAL_SYSTICK_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e00e      	b.n	8004a40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b0f      	cmp	r3, #15
 8004a26:	d80a      	bhi.n	8004a3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a28:	2200      	movs	r2, #0
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a30:	f000 f90b 	bl	8004c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a34:	4a06      	ldr	r2, [pc, #24]	; (8004a50 <HAL_InitTick+0x68>)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e000      	b.n	8004a40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	2400000c 	.word	0x2400000c
 8004a4c:	24000000 	.word	0x24000000
 8004a50:	24000008 	.word	0x24000008

08004a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a58:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <HAL_IncTick+0x20>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <HAL_IncTick+0x24>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4413      	add	r3, r2
 8004a64:	4a04      	ldr	r2, [pc, #16]	; (8004a78 <HAL_IncTick+0x24>)
 8004a66:	6013      	str	r3, [r2, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	2400000c 	.word	0x2400000c
 8004a78:	24001bdc 	.word	0x24001bdc

08004a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <HAL_GetTick+0x14>)
 8004a82:	681b      	ldr	r3, [r3, #0]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	24001bdc 	.word	0x24001bdc

08004a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ac2:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	60d3      	str	r3, [r2, #12]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000ed00 	.word	0xe000ed00
 8004ad8:	05fa0000 	.word	0x05fa0000

08004adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae0:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	0a1b      	lsrs	r3, r3, #8
 8004ae6:	f003 0307 	and.w	r3, r3, #7
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	e000ed00 	.word	0xe000ed00

08004af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	db0b      	blt.n	8004b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	f003 021f 	and.w	r2, r3, #31
 8004b10:	4907      	ldr	r1, [pc, #28]	; (8004b30 <__NVIC_EnableIRQ+0x38>)
 8004b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	2001      	movs	r0, #1
 8004b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	e000e100 	.word	0xe000e100

08004b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	6039      	str	r1, [r7, #0]
 8004b3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	db0a      	blt.n	8004b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	490c      	ldr	r1, [pc, #48]	; (8004b80 <__NVIC_SetPriority+0x4c>)
 8004b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b52:	0112      	lsls	r2, r2, #4
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	440b      	add	r3, r1
 8004b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b5c:	e00a      	b.n	8004b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	4908      	ldr	r1, [pc, #32]	; (8004b84 <__NVIC_SetPriority+0x50>)
 8004b64:	88fb      	ldrh	r3, [r7, #6]
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	3b04      	subs	r3, #4
 8004b6c:	0112      	lsls	r2, r2, #4
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	440b      	add	r3, r1
 8004b72:	761a      	strb	r2, [r3, #24]
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	e000e100 	.word	0xe000e100
 8004b84:	e000ed00 	.word	0xe000ed00

08004b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b089      	sub	sp, #36	; 0x24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f1c3 0307 	rsb	r3, r3, #7
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	bf28      	it	cs
 8004ba6:	2304      	movcs	r3, #4
 8004ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	3304      	adds	r3, #4
 8004bae:	2b06      	cmp	r3, #6
 8004bb0:	d902      	bls.n	8004bb8 <NVIC_EncodePriority+0x30>
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	3b03      	subs	r3, #3
 8004bb6:	e000      	b.n	8004bba <NVIC_EncodePriority+0x32>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	43da      	mvns	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	401a      	ands	r2, r3
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bda:	43d9      	mvns	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be0:	4313      	orrs	r3, r2
         );
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3724      	adds	r7, #36	; 0x24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c00:	d301      	bcc.n	8004c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c02:	2301      	movs	r3, #1
 8004c04:	e00f      	b.n	8004c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c06:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <SysTick_Config+0x40>)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c0e:	210f      	movs	r1, #15
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c14:	f7ff ff8e 	bl	8004b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <SysTick_Config+0x40>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c1e:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <SysTick_Config+0x40>)
 8004c20:	2207      	movs	r2, #7
 8004c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	e000e010 	.word	0xe000e010

08004c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff ff29 	bl	8004a94 <__NVIC_SetPriorityGrouping>
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b086      	sub	sp, #24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	4603      	mov	r3, r0
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c58:	f7ff ff40 	bl	8004adc <__NVIC_GetPriorityGrouping>
 8004c5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	6978      	ldr	r0, [r7, #20]
 8004c64:	f7ff ff90 	bl	8004b88 <NVIC_EncodePriority>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c6e:	4611      	mov	r1, r2
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ff5f 	bl	8004b34 <__NVIC_SetPriority>
}
 8004c76:	bf00      	nop
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	4603      	mov	r3, r0
 8004c86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff ff33 	bl	8004af8 <__NVIC_EnableIRQ>
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff ffa4 	bl	8004bf0 <SysTick_Config>
 8004ca8:	4603      	mov	r3, r0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004cbc:	f7ff fede 	bl	8004a7c <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e314      	b.n	80052f6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a66      	ldr	r2, [pc, #408]	; (8004e6c <HAL_DMA_Init+0x1b8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d04a      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a65      	ldr	r2, [pc, #404]	; (8004e70 <HAL_DMA_Init+0x1bc>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d045      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a63      	ldr	r2, [pc, #396]	; (8004e74 <HAL_DMA_Init+0x1c0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d040      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a62      	ldr	r2, [pc, #392]	; (8004e78 <HAL_DMA_Init+0x1c4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d03b      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a60      	ldr	r2, [pc, #384]	; (8004e7c <HAL_DMA_Init+0x1c8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d036      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a5f      	ldr	r2, [pc, #380]	; (8004e80 <HAL_DMA_Init+0x1cc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d031      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a5d      	ldr	r2, [pc, #372]	; (8004e84 <HAL_DMA_Init+0x1d0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d02c      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a5c      	ldr	r2, [pc, #368]	; (8004e88 <HAL_DMA_Init+0x1d4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d027      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a5a      	ldr	r2, [pc, #360]	; (8004e8c <HAL_DMA_Init+0x1d8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d022      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a59      	ldr	r2, [pc, #356]	; (8004e90 <HAL_DMA_Init+0x1dc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d01d      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a57      	ldr	r2, [pc, #348]	; (8004e94 <HAL_DMA_Init+0x1e0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d018      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a56      	ldr	r2, [pc, #344]	; (8004e98 <HAL_DMA_Init+0x1e4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d013      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a54      	ldr	r2, [pc, #336]	; (8004e9c <HAL_DMA_Init+0x1e8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00e      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a53      	ldr	r2, [pc, #332]	; (8004ea0 <HAL_DMA_Init+0x1ec>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d009      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a51      	ldr	r2, [pc, #324]	; (8004ea4 <HAL_DMA_Init+0x1f0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d004      	beq.n	8004d6c <HAL_DMA_Init+0xb8>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a50      	ldr	r2, [pc, #320]	; (8004ea8 <HAL_DMA_Init+0x1f4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d101      	bne.n	8004d70 <HAL_DMA_Init+0xbc>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <HAL_DMA_Init+0xbe>
 8004d70:	2300      	movs	r3, #0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 813c 	beq.w	8004ff0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a37      	ldr	r2, [pc, #220]	; (8004e6c <HAL_DMA_Init+0x1b8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d04a      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a36      	ldr	r2, [pc, #216]	; (8004e70 <HAL_DMA_Init+0x1bc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d045      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a34      	ldr	r2, [pc, #208]	; (8004e74 <HAL_DMA_Init+0x1c0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d040      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a33      	ldr	r2, [pc, #204]	; (8004e78 <HAL_DMA_Init+0x1c4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d03b      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a31      	ldr	r2, [pc, #196]	; (8004e7c <HAL_DMA_Init+0x1c8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d036      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a30      	ldr	r2, [pc, #192]	; (8004e80 <HAL_DMA_Init+0x1cc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d031      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a2e      	ldr	r2, [pc, #184]	; (8004e84 <HAL_DMA_Init+0x1d0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d02c      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a2d      	ldr	r2, [pc, #180]	; (8004e88 <HAL_DMA_Init+0x1d4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d027      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2b      	ldr	r2, [pc, #172]	; (8004e8c <HAL_DMA_Init+0x1d8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d022      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a2a      	ldr	r2, [pc, #168]	; (8004e90 <HAL_DMA_Init+0x1dc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d01d      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a28      	ldr	r2, [pc, #160]	; (8004e94 <HAL_DMA_Init+0x1e0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d018      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a27      	ldr	r2, [pc, #156]	; (8004e98 <HAL_DMA_Init+0x1e4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d013      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a25      	ldr	r2, [pc, #148]	; (8004e9c <HAL_DMA_Init+0x1e8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00e      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a24      	ldr	r2, [pc, #144]	; (8004ea0 <HAL_DMA_Init+0x1ec>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d009      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a22      	ldr	r2, [pc, #136]	; (8004ea4 <HAL_DMA_Init+0x1f0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d004      	beq.n	8004e28 <HAL_DMA_Init+0x174>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a21      	ldr	r2, [pc, #132]	; (8004ea8 <HAL_DMA_Init+0x1f4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d108      	bne.n	8004e3a <HAL_DMA_Init+0x186>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0201 	bic.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	e007      	b.n	8004e4a <HAL_DMA_Init+0x196>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0201 	bic.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e4a:	e02f      	b.n	8004eac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e4c:	f7ff fe16 	bl	8004a7c <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b05      	cmp	r3, #5
 8004e58:	d928      	bls.n	8004eac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2203      	movs	r2, #3
 8004e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e244      	b.n	80052f6 <HAL_DMA_Init+0x642>
 8004e6c:	40020010 	.word	0x40020010
 8004e70:	40020028 	.word	0x40020028
 8004e74:	40020040 	.word	0x40020040
 8004e78:	40020058 	.word	0x40020058
 8004e7c:	40020070 	.word	0x40020070
 8004e80:	40020088 	.word	0x40020088
 8004e84:	400200a0 	.word	0x400200a0
 8004e88:	400200b8 	.word	0x400200b8
 8004e8c:	40020410 	.word	0x40020410
 8004e90:	40020428 	.word	0x40020428
 8004e94:	40020440 	.word	0x40020440
 8004e98:	40020458 	.word	0x40020458
 8004e9c:	40020470 	.word	0x40020470
 8004ea0:	40020488 	.word	0x40020488
 8004ea4:	400204a0 	.word	0x400204a0
 8004ea8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1c8      	bne.n	8004e4c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4b84      	ldr	r3, [pc, #528]	; (80050d8 <HAL_DMA_Init+0x424>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004ed2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ede:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d107      	bne.n	8004f10 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b28      	cmp	r3, #40	; 0x28
 8004f16:	d903      	bls.n	8004f20 <HAL_DMA_Init+0x26c>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8004f1e:	d91f      	bls.n	8004f60 <HAL_DMA_Init+0x2ac>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b3e      	cmp	r3, #62	; 0x3e
 8004f26:	d903      	bls.n	8004f30 <HAL_DMA_Init+0x27c>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b42      	cmp	r3, #66	; 0x42
 8004f2e:	d917      	bls.n	8004f60 <HAL_DMA_Init+0x2ac>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b46      	cmp	r3, #70	; 0x46
 8004f36:	d903      	bls.n	8004f40 <HAL_DMA_Init+0x28c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b48      	cmp	r3, #72	; 0x48
 8004f3e:	d90f      	bls.n	8004f60 <HAL_DMA_Init+0x2ac>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b4e      	cmp	r3, #78	; 0x4e
 8004f46:	d903      	bls.n	8004f50 <HAL_DMA_Init+0x29c>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b52      	cmp	r3, #82	; 0x52
 8004f4e:	d907      	bls.n	8004f60 <HAL_DMA_Init+0x2ac>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b73      	cmp	r3, #115	; 0x73
 8004f56:	d905      	bls.n	8004f64 <HAL_DMA_Init+0x2b0>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b77      	cmp	r3, #119	; 0x77
 8004f5e:	d801      	bhi.n	8004f64 <HAL_DMA_Init+0x2b0>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <HAL_DMA_Init+0x2b2>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f70:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f023 0307 	bic.w	r3, r3, #7
 8004f88:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d117      	bne.n	8004fcc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00e      	beq.n	8004fcc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f002 fb30 	bl	8007614 <DMA_CheckFifoParam>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d008      	beq.n	8004fcc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2240      	movs	r2, #64	; 0x40
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e194      	b.n	80052f6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f002 fa6b 	bl	80074b0 <DMA_CalcBaseAndBitshift>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	223f      	movs	r2, #63	; 0x3f
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	609a      	str	r2, [r3, #8]
 8004fee:	e0ca      	b.n	8005186 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a39      	ldr	r2, [pc, #228]	; (80050dc <HAL_DMA_Init+0x428>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d022      	beq.n	8005040 <HAL_DMA_Init+0x38c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a38      	ldr	r2, [pc, #224]	; (80050e0 <HAL_DMA_Init+0x42c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d01d      	beq.n	8005040 <HAL_DMA_Init+0x38c>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a36      	ldr	r2, [pc, #216]	; (80050e4 <HAL_DMA_Init+0x430>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d018      	beq.n	8005040 <HAL_DMA_Init+0x38c>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a35      	ldr	r2, [pc, #212]	; (80050e8 <HAL_DMA_Init+0x434>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d013      	beq.n	8005040 <HAL_DMA_Init+0x38c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a33      	ldr	r2, [pc, #204]	; (80050ec <HAL_DMA_Init+0x438>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00e      	beq.n	8005040 <HAL_DMA_Init+0x38c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a32      	ldr	r2, [pc, #200]	; (80050f0 <HAL_DMA_Init+0x43c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d009      	beq.n	8005040 <HAL_DMA_Init+0x38c>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a30      	ldr	r2, [pc, #192]	; (80050f4 <HAL_DMA_Init+0x440>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d004      	beq.n	8005040 <HAL_DMA_Init+0x38c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a2f      	ldr	r2, [pc, #188]	; (80050f8 <HAL_DMA_Init+0x444>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d101      	bne.n	8005044 <HAL_DMA_Init+0x390>
 8005040:	2301      	movs	r3, #1
 8005042:	e000      	b.n	8005046 <HAL_DMA_Init+0x392>
 8005044:	2300      	movs	r3, #0
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8094 	beq.w	8005174 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a22      	ldr	r2, [pc, #136]	; (80050dc <HAL_DMA_Init+0x428>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d021      	beq.n	800509a <HAL_DMA_Init+0x3e6>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a21      	ldr	r2, [pc, #132]	; (80050e0 <HAL_DMA_Init+0x42c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d01c      	beq.n	800509a <HAL_DMA_Init+0x3e6>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <HAL_DMA_Init+0x430>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d017      	beq.n	800509a <HAL_DMA_Init+0x3e6>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1e      	ldr	r2, [pc, #120]	; (80050e8 <HAL_DMA_Init+0x434>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d012      	beq.n	800509a <HAL_DMA_Init+0x3e6>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <HAL_DMA_Init+0x438>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00d      	beq.n	800509a <HAL_DMA_Init+0x3e6>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <HAL_DMA_Init+0x43c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d008      	beq.n	800509a <HAL_DMA_Init+0x3e6>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <HAL_DMA_Init+0x440>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d003      	beq.n	800509a <HAL_DMA_Init+0x3e6>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <HAL_DMA_Init+0x444>)
 8005098:	4293      	cmp	r3, r2
 800509a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4b11      	ldr	r3, [pc, #68]	; (80050fc <HAL_DMA_Init+0x448>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d01d      	beq.n	8005100 <HAL_DMA_Init+0x44c>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b80      	cmp	r3, #128	; 0x80
 80050ca:	d102      	bne.n	80050d2 <HAL_DMA_Init+0x41e>
 80050cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050d0:	e017      	b.n	8005102 <HAL_DMA_Init+0x44e>
 80050d2:	2300      	movs	r3, #0
 80050d4:	e015      	b.n	8005102 <HAL_DMA_Init+0x44e>
 80050d6:	bf00      	nop
 80050d8:	fe10803f 	.word	0xfe10803f
 80050dc:	58025408 	.word	0x58025408
 80050e0:	5802541c 	.word	0x5802541c
 80050e4:	58025430 	.word	0x58025430
 80050e8:	58025444 	.word	0x58025444
 80050ec:	58025458 	.word	0x58025458
 80050f0:	5802546c 	.word	0x5802546c
 80050f4:	58025480 	.word	0x58025480
 80050f8:	58025494 	.word	0x58025494
 80050fc:	fffe000f 	.word	0xfffe000f
 8005100:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	68d2      	ldr	r2, [r2, #12]
 8005106:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005108:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005110:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005118:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005120:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005128:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005130:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	4b6e      	ldr	r3, [pc, #440]	; (8005300 <HAL_DMA_Init+0x64c>)
 8005148:	4413      	add	r3, r2
 800514a:	4a6e      	ldr	r2, [pc, #440]	; (8005304 <HAL_DMA_Init+0x650>)
 800514c:	fba2 2303 	umull	r2, r3, r2, r3
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	009a      	lsls	r2, r3, #2
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f002 f9a9 	bl	80074b0 <DMA_CalcBaseAndBitshift>
 800515e:	4603      	mov	r3, r0
 8005160:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	2201      	movs	r2, #1
 800516c:	409a      	lsls	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	e008      	b.n	8005186 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2240      	movs	r2, #64	; 0x40
 8005178:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2203      	movs	r2, #3
 800517e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e0b7      	b.n	80052f6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a5f      	ldr	r2, [pc, #380]	; (8005308 <HAL_DMA_Init+0x654>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d072      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a5d      	ldr	r2, [pc, #372]	; (800530c <HAL_DMA_Init+0x658>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d06d      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a5c      	ldr	r2, [pc, #368]	; (8005310 <HAL_DMA_Init+0x65c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d068      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a5a      	ldr	r2, [pc, #360]	; (8005314 <HAL_DMA_Init+0x660>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d063      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a59      	ldr	r2, [pc, #356]	; (8005318 <HAL_DMA_Init+0x664>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d05e      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a57      	ldr	r2, [pc, #348]	; (800531c <HAL_DMA_Init+0x668>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d059      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a56      	ldr	r2, [pc, #344]	; (8005320 <HAL_DMA_Init+0x66c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d054      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a54      	ldr	r2, [pc, #336]	; (8005324 <HAL_DMA_Init+0x670>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d04f      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a53      	ldr	r2, [pc, #332]	; (8005328 <HAL_DMA_Init+0x674>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d04a      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a51      	ldr	r2, [pc, #324]	; (800532c <HAL_DMA_Init+0x678>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d045      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a50      	ldr	r2, [pc, #320]	; (8005330 <HAL_DMA_Init+0x67c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d040      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a4e      	ldr	r2, [pc, #312]	; (8005334 <HAL_DMA_Init+0x680>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d03b      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a4d      	ldr	r2, [pc, #308]	; (8005338 <HAL_DMA_Init+0x684>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d036      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a4b      	ldr	r2, [pc, #300]	; (800533c <HAL_DMA_Init+0x688>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d031      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a4a      	ldr	r2, [pc, #296]	; (8005340 <HAL_DMA_Init+0x68c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d02c      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a48      	ldr	r2, [pc, #288]	; (8005344 <HAL_DMA_Init+0x690>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d027      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a47      	ldr	r2, [pc, #284]	; (8005348 <HAL_DMA_Init+0x694>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d022      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a45      	ldr	r2, [pc, #276]	; (800534c <HAL_DMA_Init+0x698>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01d      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a44      	ldr	r2, [pc, #272]	; (8005350 <HAL_DMA_Init+0x69c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d018      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a42      	ldr	r2, [pc, #264]	; (8005354 <HAL_DMA_Init+0x6a0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a41      	ldr	r2, [pc, #260]	; (8005358 <HAL_DMA_Init+0x6a4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00e      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a3f      	ldr	r2, [pc, #252]	; (800535c <HAL_DMA_Init+0x6a8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d009      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a3e      	ldr	r2, [pc, #248]	; (8005360 <HAL_DMA_Init+0x6ac>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d004      	beq.n	8005276 <HAL_DMA_Init+0x5c2>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a3c      	ldr	r2, [pc, #240]	; (8005364 <HAL_DMA_Init+0x6b0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d101      	bne.n	800527a <HAL_DMA_Init+0x5c6>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <HAL_DMA_Init+0x5c8>
 800527a:	2300      	movs	r3, #0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d032      	beq.n	80052e6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f002 fa43 	bl	800770c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b80      	cmp	r3, #128	; 0x80
 800528c:	d102      	bne.n	8005294 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d010      	beq.n	80052d4 <HAL_DMA_Init+0x620>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d80c      	bhi.n	80052d4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f002 fac0 	bl	8007840 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052d0:	605a      	str	r2, [r3, #4]
 80052d2:	e008      	b.n	80052e6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	a7fdabf8 	.word	0xa7fdabf8
 8005304:	cccccccd 	.word	0xcccccccd
 8005308:	40020010 	.word	0x40020010
 800530c:	40020028 	.word	0x40020028
 8005310:	40020040 	.word	0x40020040
 8005314:	40020058 	.word	0x40020058
 8005318:	40020070 	.word	0x40020070
 800531c:	40020088 	.word	0x40020088
 8005320:	400200a0 	.word	0x400200a0
 8005324:	400200b8 	.word	0x400200b8
 8005328:	40020410 	.word	0x40020410
 800532c:	40020428 	.word	0x40020428
 8005330:	40020440 	.word	0x40020440
 8005334:	40020458 	.word	0x40020458
 8005338:	40020470 	.word	0x40020470
 800533c:	40020488 	.word	0x40020488
 8005340:	400204a0 	.word	0x400204a0
 8005344:	400204b8 	.word	0x400204b8
 8005348:	58025408 	.word	0x58025408
 800534c:	5802541c 	.word	0x5802541c
 8005350:	58025430 	.word	0x58025430
 8005354:	58025444 	.word	0x58025444
 8005358:	58025458 	.word	0x58025458
 800535c:	5802546c 	.word	0x5802546c
 8005360:	58025480 	.word	0x58025480
 8005364:	58025494 	.word	0x58025494

08005368 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e226      	b.n	80057d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_DMA_Start_IT+0x2a>
 800538e:	2302      	movs	r3, #2
 8005390:	e21f      	b.n	80057d2 <HAL_DMA_Start_IT+0x46a>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	f040 820a 	bne.w	80057bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a68      	ldr	r2, [pc, #416]	; (800555c <HAL_DMA_Start_IT+0x1f4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d04a      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a66      	ldr	r2, [pc, #408]	; (8005560 <HAL_DMA_Start_IT+0x1f8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d045      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a65      	ldr	r2, [pc, #404]	; (8005564 <HAL_DMA_Start_IT+0x1fc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d040      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a63      	ldr	r2, [pc, #396]	; (8005568 <HAL_DMA_Start_IT+0x200>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d03b      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a62      	ldr	r2, [pc, #392]	; (800556c <HAL_DMA_Start_IT+0x204>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d036      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a60      	ldr	r2, [pc, #384]	; (8005570 <HAL_DMA_Start_IT+0x208>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d031      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a5f      	ldr	r2, [pc, #380]	; (8005574 <HAL_DMA_Start_IT+0x20c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d02c      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a5d      	ldr	r2, [pc, #372]	; (8005578 <HAL_DMA_Start_IT+0x210>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d027      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a5c      	ldr	r2, [pc, #368]	; (800557c <HAL_DMA_Start_IT+0x214>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d022      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a5a      	ldr	r2, [pc, #360]	; (8005580 <HAL_DMA_Start_IT+0x218>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d01d      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a59      	ldr	r2, [pc, #356]	; (8005584 <HAL_DMA_Start_IT+0x21c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d018      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a57      	ldr	r2, [pc, #348]	; (8005588 <HAL_DMA_Start_IT+0x220>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d013      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a56      	ldr	r2, [pc, #344]	; (800558c <HAL_DMA_Start_IT+0x224>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00e      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a54      	ldr	r2, [pc, #336]	; (8005590 <HAL_DMA_Start_IT+0x228>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d009      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a53      	ldr	r2, [pc, #332]	; (8005594 <HAL_DMA_Start_IT+0x22c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d004      	beq.n	8005456 <HAL_DMA_Start_IT+0xee>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a51      	ldr	r2, [pc, #324]	; (8005598 <HAL_DMA_Start_IT+0x230>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d108      	bne.n	8005468 <HAL_DMA_Start_IT+0x100>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	e007      	b.n	8005478 <HAL_DMA_Start_IT+0x110>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0201 	bic.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f001 fe6a 	bl	8007158 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a34      	ldr	r2, [pc, #208]	; (800555c <HAL_DMA_Start_IT+0x1f4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d04a      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a33      	ldr	r2, [pc, #204]	; (8005560 <HAL_DMA_Start_IT+0x1f8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d045      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a31      	ldr	r2, [pc, #196]	; (8005564 <HAL_DMA_Start_IT+0x1fc>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d040      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a30      	ldr	r2, [pc, #192]	; (8005568 <HAL_DMA_Start_IT+0x200>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d03b      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a2e      	ldr	r2, [pc, #184]	; (800556c <HAL_DMA_Start_IT+0x204>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d036      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a2d      	ldr	r2, [pc, #180]	; (8005570 <HAL_DMA_Start_IT+0x208>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d031      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a2b      	ldr	r2, [pc, #172]	; (8005574 <HAL_DMA_Start_IT+0x20c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d02c      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a2a      	ldr	r2, [pc, #168]	; (8005578 <HAL_DMA_Start_IT+0x210>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d027      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a28      	ldr	r2, [pc, #160]	; (800557c <HAL_DMA_Start_IT+0x214>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d022      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a27      	ldr	r2, [pc, #156]	; (8005580 <HAL_DMA_Start_IT+0x218>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d01d      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a25      	ldr	r2, [pc, #148]	; (8005584 <HAL_DMA_Start_IT+0x21c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d018      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a24      	ldr	r2, [pc, #144]	; (8005588 <HAL_DMA_Start_IT+0x220>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d013      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a22      	ldr	r2, [pc, #136]	; (800558c <HAL_DMA_Start_IT+0x224>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00e      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a21      	ldr	r2, [pc, #132]	; (8005590 <HAL_DMA_Start_IT+0x228>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d009      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1f      	ldr	r2, [pc, #124]	; (8005594 <HAL_DMA_Start_IT+0x22c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_DMA_Start_IT+0x1bc>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <HAL_DMA_Start_IT+0x230>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d101      	bne.n	8005528 <HAL_DMA_Start_IT+0x1c0>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <HAL_DMA_Start_IT+0x1c2>
 8005528:	2300      	movs	r3, #0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d036      	beq.n	800559c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f023 021e 	bic.w	r2, r3, #30
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0216 	orr.w	r2, r2, #22
 8005540:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d03e      	beq.n	80055c8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0208 	orr.w	r2, r2, #8
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	e035      	b.n	80055c8 <HAL_DMA_Start_IT+0x260>
 800555c:	40020010 	.word	0x40020010
 8005560:	40020028 	.word	0x40020028
 8005564:	40020040 	.word	0x40020040
 8005568:	40020058 	.word	0x40020058
 800556c:	40020070 	.word	0x40020070
 8005570:	40020088 	.word	0x40020088
 8005574:	400200a0 	.word	0x400200a0
 8005578:	400200b8 	.word	0x400200b8
 800557c:	40020410 	.word	0x40020410
 8005580:	40020428 	.word	0x40020428
 8005584:	40020440 	.word	0x40020440
 8005588:	40020458 	.word	0x40020458
 800558c:	40020470 	.word	0x40020470
 8005590:	40020488 	.word	0x40020488
 8005594:	400204a0 	.word	0x400204a0
 8005598:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 020e 	bic.w	r2, r3, #14
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 020a 	orr.w	r2, r2, #10
 80055ae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0204 	orr.w	r2, r2, #4
 80055c6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a83      	ldr	r2, [pc, #524]	; (80057dc <HAL_DMA_Start_IT+0x474>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d072      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a82      	ldr	r2, [pc, #520]	; (80057e0 <HAL_DMA_Start_IT+0x478>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d06d      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a80      	ldr	r2, [pc, #512]	; (80057e4 <HAL_DMA_Start_IT+0x47c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d068      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a7f      	ldr	r2, [pc, #508]	; (80057e8 <HAL_DMA_Start_IT+0x480>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d063      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a7d      	ldr	r2, [pc, #500]	; (80057ec <HAL_DMA_Start_IT+0x484>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d05e      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a7c      	ldr	r2, [pc, #496]	; (80057f0 <HAL_DMA_Start_IT+0x488>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d059      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a7a      	ldr	r2, [pc, #488]	; (80057f4 <HAL_DMA_Start_IT+0x48c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d054      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a79      	ldr	r2, [pc, #484]	; (80057f8 <HAL_DMA_Start_IT+0x490>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d04f      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a77      	ldr	r2, [pc, #476]	; (80057fc <HAL_DMA_Start_IT+0x494>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d04a      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a76      	ldr	r2, [pc, #472]	; (8005800 <HAL_DMA_Start_IT+0x498>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d045      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a74      	ldr	r2, [pc, #464]	; (8005804 <HAL_DMA_Start_IT+0x49c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d040      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a73      	ldr	r2, [pc, #460]	; (8005808 <HAL_DMA_Start_IT+0x4a0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d03b      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a71      	ldr	r2, [pc, #452]	; (800580c <HAL_DMA_Start_IT+0x4a4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d036      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a70      	ldr	r2, [pc, #448]	; (8005810 <HAL_DMA_Start_IT+0x4a8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d031      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a6e      	ldr	r2, [pc, #440]	; (8005814 <HAL_DMA_Start_IT+0x4ac>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d02c      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a6d      	ldr	r2, [pc, #436]	; (8005818 <HAL_DMA_Start_IT+0x4b0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d027      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a6b      	ldr	r2, [pc, #428]	; (800581c <HAL_DMA_Start_IT+0x4b4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a6a      	ldr	r2, [pc, #424]	; (8005820 <HAL_DMA_Start_IT+0x4b8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d01d      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a68      	ldr	r2, [pc, #416]	; (8005824 <HAL_DMA_Start_IT+0x4bc>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a67      	ldr	r2, [pc, #412]	; (8005828 <HAL_DMA_Start_IT+0x4c0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a65      	ldr	r2, [pc, #404]	; (800582c <HAL_DMA_Start_IT+0x4c4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a64      	ldr	r2, [pc, #400]	; (8005830 <HAL_DMA_Start_IT+0x4c8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a62      	ldr	r2, [pc, #392]	; (8005834 <HAL_DMA_Start_IT+0x4cc>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_DMA_Start_IT+0x350>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a61      	ldr	r2, [pc, #388]	; (8005838 <HAL_DMA_Start_IT+0x4d0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_DMA_Start_IT+0x354>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <HAL_DMA_Start_IT+0x356>
 80056bc:	2300      	movs	r3, #0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d01a      	beq.n	80056f8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d007      	beq.n	80056e0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a37      	ldr	r2, [pc, #220]	; (80057dc <HAL_DMA_Start_IT+0x474>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d04a      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a36      	ldr	r2, [pc, #216]	; (80057e0 <HAL_DMA_Start_IT+0x478>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d045      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a34      	ldr	r2, [pc, #208]	; (80057e4 <HAL_DMA_Start_IT+0x47c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d040      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a33      	ldr	r2, [pc, #204]	; (80057e8 <HAL_DMA_Start_IT+0x480>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d03b      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a31      	ldr	r2, [pc, #196]	; (80057ec <HAL_DMA_Start_IT+0x484>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d036      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a30      	ldr	r2, [pc, #192]	; (80057f0 <HAL_DMA_Start_IT+0x488>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d031      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a2e      	ldr	r2, [pc, #184]	; (80057f4 <HAL_DMA_Start_IT+0x48c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d02c      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2d      	ldr	r2, [pc, #180]	; (80057f8 <HAL_DMA_Start_IT+0x490>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d027      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a2b      	ldr	r2, [pc, #172]	; (80057fc <HAL_DMA_Start_IT+0x494>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d022      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a2a      	ldr	r2, [pc, #168]	; (8005800 <HAL_DMA_Start_IT+0x498>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d01d      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a28      	ldr	r2, [pc, #160]	; (8005804 <HAL_DMA_Start_IT+0x49c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d018      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a27      	ldr	r2, [pc, #156]	; (8005808 <HAL_DMA_Start_IT+0x4a0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d013      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a25      	ldr	r2, [pc, #148]	; (800580c <HAL_DMA_Start_IT+0x4a4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00e      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a24      	ldr	r2, [pc, #144]	; (8005810 <HAL_DMA_Start_IT+0x4a8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d009      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <HAL_DMA_Start_IT+0x4ac>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_DMA_Start_IT+0x430>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a21      	ldr	r2, [pc, #132]	; (8005818 <HAL_DMA_Start_IT+0x4b0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d108      	bne.n	80057aa <HAL_DMA_Start_IT+0x442>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0201 	orr.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e012      	b.n	80057d0 <HAL_DMA_Start_IT+0x468>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 0201 	orr.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	e009      	b.n	80057d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80057d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40020010 	.word	0x40020010
 80057e0:	40020028 	.word	0x40020028
 80057e4:	40020040 	.word	0x40020040
 80057e8:	40020058 	.word	0x40020058
 80057ec:	40020070 	.word	0x40020070
 80057f0:	40020088 	.word	0x40020088
 80057f4:	400200a0 	.word	0x400200a0
 80057f8:	400200b8 	.word	0x400200b8
 80057fc:	40020410 	.word	0x40020410
 8005800:	40020428 	.word	0x40020428
 8005804:	40020440 	.word	0x40020440
 8005808:	40020458 	.word	0x40020458
 800580c:	40020470 	.word	0x40020470
 8005810:	40020488 	.word	0x40020488
 8005814:	400204a0 	.word	0x400204a0
 8005818:	400204b8 	.word	0x400204b8
 800581c:	58025408 	.word	0x58025408
 8005820:	5802541c 	.word	0x5802541c
 8005824:	58025430 	.word	0x58025430
 8005828:	58025444 	.word	0x58025444
 800582c:	58025458 	.word	0x58025458
 8005830:	5802546c 	.word	0x5802546c
 8005834:	58025480 	.word	0x58025480
 8005838:	58025494 	.word	0x58025494

0800583c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005844:	f7ff f91a 	bl	8004a7c <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e2dc      	b.n	8005e0e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d008      	beq.n	8005872 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2280      	movs	r2, #128	; 0x80
 8005864:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e2cd      	b.n	8005e0e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a76      	ldr	r2, [pc, #472]	; (8005a50 <HAL_DMA_Abort+0x214>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d04a      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a74      	ldr	r2, [pc, #464]	; (8005a54 <HAL_DMA_Abort+0x218>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d045      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a73      	ldr	r2, [pc, #460]	; (8005a58 <HAL_DMA_Abort+0x21c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d040      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a71      	ldr	r2, [pc, #452]	; (8005a5c <HAL_DMA_Abort+0x220>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d03b      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a70      	ldr	r2, [pc, #448]	; (8005a60 <HAL_DMA_Abort+0x224>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d036      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a6e      	ldr	r2, [pc, #440]	; (8005a64 <HAL_DMA_Abort+0x228>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d031      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a6d      	ldr	r2, [pc, #436]	; (8005a68 <HAL_DMA_Abort+0x22c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d02c      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a6b      	ldr	r2, [pc, #428]	; (8005a6c <HAL_DMA_Abort+0x230>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d027      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a6a      	ldr	r2, [pc, #424]	; (8005a70 <HAL_DMA_Abort+0x234>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d022      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a68      	ldr	r2, [pc, #416]	; (8005a74 <HAL_DMA_Abort+0x238>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01d      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a67      	ldr	r2, [pc, #412]	; (8005a78 <HAL_DMA_Abort+0x23c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d018      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a65      	ldr	r2, [pc, #404]	; (8005a7c <HAL_DMA_Abort+0x240>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a64      	ldr	r2, [pc, #400]	; (8005a80 <HAL_DMA_Abort+0x244>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00e      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a62      	ldr	r2, [pc, #392]	; (8005a84 <HAL_DMA_Abort+0x248>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a61      	ldr	r2, [pc, #388]	; (8005a88 <HAL_DMA_Abort+0x24c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <HAL_DMA_Abort+0xd6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a5f      	ldr	r2, [pc, #380]	; (8005a8c <HAL_DMA_Abort+0x250>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d101      	bne.n	8005916 <HAL_DMA_Abort+0xda>
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <HAL_DMA_Abort+0xdc>
 8005916:	2300      	movs	r3, #0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d013      	beq.n	8005944 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 021e 	bic.w	r2, r2, #30
 800592a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695a      	ldr	r2, [r3, #20]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800593a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e00a      	b.n	800595a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 020e 	bic.w	r2, r2, #14
 8005952:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a3c      	ldr	r2, [pc, #240]	; (8005a50 <HAL_DMA_Abort+0x214>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d072      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a3a      	ldr	r2, [pc, #232]	; (8005a54 <HAL_DMA_Abort+0x218>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d06d      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a39      	ldr	r2, [pc, #228]	; (8005a58 <HAL_DMA_Abort+0x21c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d068      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a37      	ldr	r2, [pc, #220]	; (8005a5c <HAL_DMA_Abort+0x220>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d063      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a36      	ldr	r2, [pc, #216]	; (8005a60 <HAL_DMA_Abort+0x224>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d05e      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a34      	ldr	r2, [pc, #208]	; (8005a64 <HAL_DMA_Abort+0x228>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d059      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a33      	ldr	r2, [pc, #204]	; (8005a68 <HAL_DMA_Abort+0x22c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d054      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a31      	ldr	r2, [pc, #196]	; (8005a6c <HAL_DMA_Abort+0x230>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d04f      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a30      	ldr	r2, [pc, #192]	; (8005a70 <HAL_DMA_Abort+0x234>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d04a      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a2e      	ldr	r2, [pc, #184]	; (8005a74 <HAL_DMA_Abort+0x238>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d045      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a2d      	ldr	r2, [pc, #180]	; (8005a78 <HAL_DMA_Abort+0x23c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d040      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a2b      	ldr	r2, [pc, #172]	; (8005a7c <HAL_DMA_Abort+0x240>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d03b      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a2a      	ldr	r2, [pc, #168]	; (8005a80 <HAL_DMA_Abort+0x244>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d036      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a28      	ldr	r2, [pc, #160]	; (8005a84 <HAL_DMA_Abort+0x248>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d031      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a27      	ldr	r2, [pc, #156]	; (8005a88 <HAL_DMA_Abort+0x24c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d02c      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a25      	ldr	r2, [pc, #148]	; (8005a8c <HAL_DMA_Abort+0x250>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d027      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a24      	ldr	r2, [pc, #144]	; (8005a90 <HAL_DMA_Abort+0x254>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d022      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a22      	ldr	r2, [pc, #136]	; (8005a94 <HAL_DMA_Abort+0x258>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d01d      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a21      	ldr	r2, [pc, #132]	; (8005a98 <HAL_DMA_Abort+0x25c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d018      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1f      	ldr	r2, [pc, #124]	; (8005a9c <HAL_DMA_Abort+0x260>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1e      	ldr	r2, [pc, #120]	; (8005aa0 <HAL_DMA_Abort+0x264>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00e      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1c      	ldr	r2, [pc, #112]	; (8005aa4 <HAL_DMA_Abort+0x268>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d009      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1b      	ldr	r2, [pc, #108]	; (8005aa8 <HAL_DMA_Abort+0x26c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <HAL_DMA_Abort+0x20e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a19      	ldr	r2, [pc, #100]	; (8005aac <HAL_DMA_Abort+0x270>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d132      	bne.n	8005ab0 <HAL_DMA_Abort+0x274>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e031      	b.n	8005ab2 <HAL_DMA_Abort+0x276>
 8005a4e:	bf00      	nop
 8005a50:	40020010 	.word	0x40020010
 8005a54:	40020028 	.word	0x40020028
 8005a58:	40020040 	.word	0x40020040
 8005a5c:	40020058 	.word	0x40020058
 8005a60:	40020070 	.word	0x40020070
 8005a64:	40020088 	.word	0x40020088
 8005a68:	400200a0 	.word	0x400200a0
 8005a6c:	400200b8 	.word	0x400200b8
 8005a70:	40020410 	.word	0x40020410
 8005a74:	40020428 	.word	0x40020428
 8005a78:	40020440 	.word	0x40020440
 8005a7c:	40020458 	.word	0x40020458
 8005a80:	40020470 	.word	0x40020470
 8005a84:	40020488 	.word	0x40020488
 8005a88:	400204a0 	.word	0x400204a0
 8005a8c:	400204b8 	.word	0x400204b8
 8005a90:	58025408 	.word	0x58025408
 8005a94:	5802541c 	.word	0x5802541c
 8005a98:	58025430 	.word	0x58025430
 8005a9c:	58025444 	.word	0x58025444
 8005aa0:	58025458 	.word	0x58025458
 8005aa4:	5802546c 	.word	0x5802546c
 8005aa8:	58025480 	.word	0x58025480
 8005aac:	58025494 	.word	0x58025494
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a6d      	ldr	r2, [pc, #436]	; (8005c80 <HAL_DMA_Abort+0x444>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d04a      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a6b      	ldr	r2, [pc, #428]	; (8005c84 <HAL_DMA_Abort+0x448>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d045      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a6a      	ldr	r2, [pc, #424]	; (8005c88 <HAL_DMA_Abort+0x44c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d040      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a68      	ldr	r2, [pc, #416]	; (8005c8c <HAL_DMA_Abort+0x450>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d03b      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a67      	ldr	r2, [pc, #412]	; (8005c90 <HAL_DMA_Abort+0x454>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d036      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a65      	ldr	r2, [pc, #404]	; (8005c94 <HAL_DMA_Abort+0x458>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d031      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a64      	ldr	r2, [pc, #400]	; (8005c98 <HAL_DMA_Abort+0x45c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d02c      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a62      	ldr	r2, [pc, #392]	; (8005c9c <HAL_DMA_Abort+0x460>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d027      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a61      	ldr	r2, [pc, #388]	; (8005ca0 <HAL_DMA_Abort+0x464>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d022      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a5f      	ldr	r2, [pc, #380]	; (8005ca4 <HAL_DMA_Abort+0x468>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d01d      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a5e      	ldr	r2, [pc, #376]	; (8005ca8 <HAL_DMA_Abort+0x46c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d018      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a5c      	ldr	r2, [pc, #368]	; (8005cac <HAL_DMA_Abort+0x470>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d013      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a5b      	ldr	r2, [pc, #364]	; (8005cb0 <HAL_DMA_Abort+0x474>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00e      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a59      	ldr	r2, [pc, #356]	; (8005cb4 <HAL_DMA_Abort+0x478>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d009      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a58      	ldr	r2, [pc, #352]	; (8005cb8 <HAL_DMA_Abort+0x47c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d004      	beq.n	8005b66 <HAL_DMA_Abort+0x32a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a56      	ldr	r2, [pc, #344]	; (8005cbc <HAL_DMA_Abort+0x480>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d108      	bne.n	8005b78 <HAL_DMA_Abort+0x33c>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0201 	bic.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e007      	b.n	8005b88 <HAL_DMA_Abort+0x34c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0201 	bic.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b88:	e013      	b.n	8005bb2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b8a:	f7fe ff77 	bl	8004a7c <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b05      	cmp	r3, #5
 8005b96:	d90c      	bls.n	8005bb2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2203      	movs	r2, #3
 8005ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e12d      	b.n	8005e0e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e5      	bne.n	8005b8a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a2f      	ldr	r2, [pc, #188]	; (8005c80 <HAL_DMA_Abort+0x444>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d04a      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a2d      	ldr	r2, [pc, #180]	; (8005c84 <HAL_DMA_Abort+0x448>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d045      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a2c      	ldr	r2, [pc, #176]	; (8005c88 <HAL_DMA_Abort+0x44c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d040      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a2a      	ldr	r2, [pc, #168]	; (8005c8c <HAL_DMA_Abort+0x450>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d03b      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a29      	ldr	r2, [pc, #164]	; (8005c90 <HAL_DMA_Abort+0x454>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d036      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a27      	ldr	r2, [pc, #156]	; (8005c94 <HAL_DMA_Abort+0x458>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d031      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a26      	ldr	r2, [pc, #152]	; (8005c98 <HAL_DMA_Abort+0x45c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d02c      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a24      	ldr	r2, [pc, #144]	; (8005c9c <HAL_DMA_Abort+0x460>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d027      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a23      	ldr	r2, [pc, #140]	; (8005ca0 <HAL_DMA_Abort+0x464>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d022      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a21      	ldr	r2, [pc, #132]	; (8005ca4 <HAL_DMA_Abort+0x468>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d01d      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a20      	ldr	r2, [pc, #128]	; (8005ca8 <HAL_DMA_Abort+0x46c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d018      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a1e      	ldr	r2, [pc, #120]	; (8005cac <HAL_DMA_Abort+0x470>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a1d      	ldr	r2, [pc, #116]	; (8005cb0 <HAL_DMA_Abort+0x474>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00e      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a1b      	ldr	r2, [pc, #108]	; (8005cb4 <HAL_DMA_Abort+0x478>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d009      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a1a      	ldr	r2, [pc, #104]	; (8005cb8 <HAL_DMA_Abort+0x47c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d004      	beq.n	8005c5e <HAL_DMA_Abort+0x422>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a18      	ldr	r2, [pc, #96]	; (8005cbc <HAL_DMA_Abort+0x480>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d101      	bne.n	8005c62 <HAL_DMA_Abort+0x426>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <HAL_DMA_Abort+0x428>
 8005c62:	2300      	movs	r3, #0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d02b      	beq.n	8005cc0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c72:	f003 031f 	and.w	r3, r3, #31
 8005c76:	223f      	movs	r2, #63	; 0x3f
 8005c78:	409a      	lsls	r2, r3
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	609a      	str	r2, [r3, #8]
 8005c7e:	e02a      	b.n	8005cd6 <HAL_DMA_Abort+0x49a>
 8005c80:	40020010 	.word	0x40020010
 8005c84:	40020028 	.word	0x40020028
 8005c88:	40020040 	.word	0x40020040
 8005c8c:	40020058 	.word	0x40020058
 8005c90:	40020070 	.word	0x40020070
 8005c94:	40020088 	.word	0x40020088
 8005c98:	400200a0 	.word	0x400200a0
 8005c9c:	400200b8 	.word	0x400200b8
 8005ca0:	40020410 	.word	0x40020410
 8005ca4:	40020428 	.word	0x40020428
 8005ca8:	40020440 	.word	0x40020440
 8005cac:	40020458 	.word	0x40020458
 8005cb0:	40020470 	.word	0x40020470
 8005cb4:	40020488 	.word	0x40020488
 8005cb8:	400204a0 	.word	0x400204a0
 8005cbc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	2201      	movs	r2, #1
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a4f      	ldr	r2, [pc, #316]	; (8005e18 <HAL_DMA_Abort+0x5dc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d072      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a4d      	ldr	r2, [pc, #308]	; (8005e1c <HAL_DMA_Abort+0x5e0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d06d      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a4c      	ldr	r2, [pc, #304]	; (8005e20 <HAL_DMA_Abort+0x5e4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d068      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a4a      	ldr	r2, [pc, #296]	; (8005e24 <HAL_DMA_Abort+0x5e8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d063      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a49      	ldr	r2, [pc, #292]	; (8005e28 <HAL_DMA_Abort+0x5ec>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d05e      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a47      	ldr	r2, [pc, #284]	; (8005e2c <HAL_DMA_Abort+0x5f0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d059      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a46      	ldr	r2, [pc, #280]	; (8005e30 <HAL_DMA_Abort+0x5f4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d054      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a44      	ldr	r2, [pc, #272]	; (8005e34 <HAL_DMA_Abort+0x5f8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d04f      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a43      	ldr	r2, [pc, #268]	; (8005e38 <HAL_DMA_Abort+0x5fc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d04a      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a41      	ldr	r2, [pc, #260]	; (8005e3c <HAL_DMA_Abort+0x600>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d045      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a40      	ldr	r2, [pc, #256]	; (8005e40 <HAL_DMA_Abort+0x604>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d040      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a3e      	ldr	r2, [pc, #248]	; (8005e44 <HAL_DMA_Abort+0x608>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d03b      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a3d      	ldr	r2, [pc, #244]	; (8005e48 <HAL_DMA_Abort+0x60c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d036      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a3b      	ldr	r2, [pc, #236]	; (8005e4c <HAL_DMA_Abort+0x610>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d031      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a3a      	ldr	r2, [pc, #232]	; (8005e50 <HAL_DMA_Abort+0x614>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d02c      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a38      	ldr	r2, [pc, #224]	; (8005e54 <HAL_DMA_Abort+0x618>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d027      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a37      	ldr	r2, [pc, #220]	; (8005e58 <HAL_DMA_Abort+0x61c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d022      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a35      	ldr	r2, [pc, #212]	; (8005e5c <HAL_DMA_Abort+0x620>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d01d      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a34      	ldr	r2, [pc, #208]	; (8005e60 <HAL_DMA_Abort+0x624>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d018      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a32      	ldr	r2, [pc, #200]	; (8005e64 <HAL_DMA_Abort+0x628>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d013      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a31      	ldr	r2, [pc, #196]	; (8005e68 <HAL_DMA_Abort+0x62c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00e      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a2f      	ldr	r2, [pc, #188]	; (8005e6c <HAL_DMA_Abort+0x630>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d009      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a2e      	ldr	r2, [pc, #184]	; (8005e70 <HAL_DMA_Abort+0x634>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d004      	beq.n	8005dc6 <HAL_DMA_Abort+0x58a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a2c      	ldr	r2, [pc, #176]	; (8005e74 <HAL_DMA_Abort+0x638>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d101      	bne.n	8005dca <HAL_DMA_Abort+0x58e>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <HAL_DMA_Abort+0x590>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d015      	beq.n	8005dfc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005dd8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00c      	beq.n	8005dfc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005df0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005dfa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	40020010 	.word	0x40020010
 8005e1c:	40020028 	.word	0x40020028
 8005e20:	40020040 	.word	0x40020040
 8005e24:	40020058 	.word	0x40020058
 8005e28:	40020070 	.word	0x40020070
 8005e2c:	40020088 	.word	0x40020088
 8005e30:	400200a0 	.word	0x400200a0
 8005e34:	400200b8 	.word	0x400200b8
 8005e38:	40020410 	.word	0x40020410
 8005e3c:	40020428 	.word	0x40020428
 8005e40:	40020440 	.word	0x40020440
 8005e44:	40020458 	.word	0x40020458
 8005e48:	40020470 	.word	0x40020470
 8005e4c:	40020488 	.word	0x40020488
 8005e50:	400204a0 	.word	0x400204a0
 8005e54:	400204b8 	.word	0x400204b8
 8005e58:	58025408 	.word	0x58025408
 8005e5c:	5802541c 	.word	0x5802541c
 8005e60:	58025430 	.word	0x58025430
 8005e64:	58025444 	.word	0x58025444
 8005e68:	58025458 	.word	0x58025458
 8005e6c:	5802546c 	.word	0x5802546c
 8005e70:	58025480 	.word	0x58025480
 8005e74:	58025494 	.word	0x58025494

08005e78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e237      	b.n	80062fa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d004      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2280      	movs	r2, #128	; 0x80
 8005e9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e22c      	b.n	80062fa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a5c      	ldr	r2, [pc, #368]	; (8006018 <HAL_DMA_Abort_IT+0x1a0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d04a      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a5b      	ldr	r2, [pc, #364]	; (800601c <HAL_DMA_Abort_IT+0x1a4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d045      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a59      	ldr	r2, [pc, #356]	; (8006020 <HAL_DMA_Abort_IT+0x1a8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d040      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a58      	ldr	r2, [pc, #352]	; (8006024 <HAL_DMA_Abort_IT+0x1ac>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d03b      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a56      	ldr	r2, [pc, #344]	; (8006028 <HAL_DMA_Abort_IT+0x1b0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d036      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a55      	ldr	r2, [pc, #340]	; (800602c <HAL_DMA_Abort_IT+0x1b4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d031      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a53      	ldr	r2, [pc, #332]	; (8006030 <HAL_DMA_Abort_IT+0x1b8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d02c      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a52      	ldr	r2, [pc, #328]	; (8006034 <HAL_DMA_Abort_IT+0x1bc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d027      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a50      	ldr	r2, [pc, #320]	; (8006038 <HAL_DMA_Abort_IT+0x1c0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d022      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a4f      	ldr	r2, [pc, #316]	; (800603c <HAL_DMA_Abort_IT+0x1c4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d01d      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a4d      	ldr	r2, [pc, #308]	; (8006040 <HAL_DMA_Abort_IT+0x1c8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d018      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a4c      	ldr	r2, [pc, #304]	; (8006044 <HAL_DMA_Abort_IT+0x1cc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d013      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a4a      	ldr	r2, [pc, #296]	; (8006048 <HAL_DMA_Abort_IT+0x1d0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00e      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a49      	ldr	r2, [pc, #292]	; (800604c <HAL_DMA_Abort_IT+0x1d4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d009      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a47      	ldr	r2, [pc, #284]	; (8006050 <HAL_DMA_Abort_IT+0x1d8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d004      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc8>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a46      	ldr	r2, [pc, #280]	; (8006054 <HAL_DMA_Abort_IT+0x1dc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d101      	bne.n	8005f44 <HAL_DMA_Abort_IT+0xcc>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <HAL_DMA_Abort_IT+0xce>
 8005f44:	2300      	movs	r3, #0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 8086 	beq.w	8006058 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2204      	movs	r2, #4
 8005f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a2f      	ldr	r2, [pc, #188]	; (8006018 <HAL_DMA_Abort_IT+0x1a0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d04a      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a2e      	ldr	r2, [pc, #184]	; (800601c <HAL_DMA_Abort_IT+0x1a4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d045      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2c      	ldr	r2, [pc, #176]	; (8006020 <HAL_DMA_Abort_IT+0x1a8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d040      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a2b      	ldr	r2, [pc, #172]	; (8006024 <HAL_DMA_Abort_IT+0x1ac>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d03b      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a29      	ldr	r2, [pc, #164]	; (8006028 <HAL_DMA_Abort_IT+0x1b0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d036      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a28      	ldr	r2, [pc, #160]	; (800602c <HAL_DMA_Abort_IT+0x1b4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d031      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a26      	ldr	r2, [pc, #152]	; (8006030 <HAL_DMA_Abort_IT+0x1b8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d02c      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a25      	ldr	r2, [pc, #148]	; (8006034 <HAL_DMA_Abort_IT+0x1bc>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d027      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a23      	ldr	r2, [pc, #140]	; (8006038 <HAL_DMA_Abort_IT+0x1c0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d022      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a22      	ldr	r2, [pc, #136]	; (800603c <HAL_DMA_Abort_IT+0x1c4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d01d      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a20      	ldr	r2, [pc, #128]	; (8006040 <HAL_DMA_Abort_IT+0x1c8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d018      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1f      	ldr	r2, [pc, #124]	; (8006044 <HAL_DMA_Abort_IT+0x1cc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d013      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1d      	ldr	r2, [pc, #116]	; (8006048 <HAL_DMA_Abort_IT+0x1d0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00e      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1c      	ldr	r2, [pc, #112]	; (800604c <HAL_DMA_Abort_IT+0x1d4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d009      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1a      	ldr	r2, [pc, #104]	; (8006050 <HAL_DMA_Abort_IT+0x1d8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d004      	beq.n	8005ff4 <HAL_DMA_Abort_IT+0x17c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a19      	ldr	r2, [pc, #100]	; (8006054 <HAL_DMA_Abort_IT+0x1dc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d108      	bne.n	8006006 <HAL_DMA_Abort_IT+0x18e>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0201 	bic.w	r2, r2, #1
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e178      	b.n	80062f8 <HAL_DMA_Abort_IT+0x480>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0201 	bic.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	e16f      	b.n	80062f8 <HAL_DMA_Abort_IT+0x480>
 8006018:	40020010 	.word	0x40020010
 800601c:	40020028 	.word	0x40020028
 8006020:	40020040 	.word	0x40020040
 8006024:	40020058 	.word	0x40020058
 8006028:	40020070 	.word	0x40020070
 800602c:	40020088 	.word	0x40020088
 8006030:	400200a0 	.word	0x400200a0
 8006034:	400200b8 	.word	0x400200b8
 8006038:	40020410 	.word	0x40020410
 800603c:	40020428 	.word	0x40020428
 8006040:	40020440 	.word	0x40020440
 8006044:	40020458 	.word	0x40020458
 8006048:	40020470 	.word	0x40020470
 800604c:	40020488 	.word	0x40020488
 8006050:	400204a0 	.word	0x400204a0
 8006054:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 020e 	bic.w	r2, r2, #14
 8006066:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a6c      	ldr	r2, [pc, #432]	; (8006220 <HAL_DMA_Abort_IT+0x3a8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d04a      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a6b      	ldr	r2, [pc, #428]	; (8006224 <HAL_DMA_Abort_IT+0x3ac>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d045      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a69      	ldr	r2, [pc, #420]	; (8006228 <HAL_DMA_Abort_IT+0x3b0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d040      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a68      	ldr	r2, [pc, #416]	; (800622c <HAL_DMA_Abort_IT+0x3b4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d03b      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a66      	ldr	r2, [pc, #408]	; (8006230 <HAL_DMA_Abort_IT+0x3b8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d036      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a65      	ldr	r2, [pc, #404]	; (8006234 <HAL_DMA_Abort_IT+0x3bc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d031      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a63      	ldr	r2, [pc, #396]	; (8006238 <HAL_DMA_Abort_IT+0x3c0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d02c      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a62      	ldr	r2, [pc, #392]	; (800623c <HAL_DMA_Abort_IT+0x3c4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d027      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a60      	ldr	r2, [pc, #384]	; (8006240 <HAL_DMA_Abort_IT+0x3c8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d022      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a5f      	ldr	r2, [pc, #380]	; (8006244 <HAL_DMA_Abort_IT+0x3cc>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d01d      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a5d      	ldr	r2, [pc, #372]	; (8006248 <HAL_DMA_Abort_IT+0x3d0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d018      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a5c      	ldr	r2, [pc, #368]	; (800624c <HAL_DMA_Abort_IT+0x3d4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d013      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a5a      	ldr	r2, [pc, #360]	; (8006250 <HAL_DMA_Abort_IT+0x3d8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00e      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a59      	ldr	r2, [pc, #356]	; (8006254 <HAL_DMA_Abort_IT+0x3dc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d009      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a57      	ldr	r2, [pc, #348]	; (8006258 <HAL_DMA_Abort_IT+0x3e0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <HAL_DMA_Abort_IT+0x290>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a56      	ldr	r2, [pc, #344]	; (800625c <HAL_DMA_Abort_IT+0x3e4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d108      	bne.n	800611a <HAL_DMA_Abort_IT+0x2a2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0201 	bic.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	e007      	b.n	800612a <HAL_DMA_Abort_IT+0x2b2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0201 	bic.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a3c      	ldr	r2, [pc, #240]	; (8006220 <HAL_DMA_Abort_IT+0x3a8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d072      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a3a      	ldr	r2, [pc, #232]	; (8006224 <HAL_DMA_Abort_IT+0x3ac>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d06d      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a39      	ldr	r2, [pc, #228]	; (8006228 <HAL_DMA_Abort_IT+0x3b0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d068      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a37      	ldr	r2, [pc, #220]	; (800622c <HAL_DMA_Abort_IT+0x3b4>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d063      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a36      	ldr	r2, [pc, #216]	; (8006230 <HAL_DMA_Abort_IT+0x3b8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d05e      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a34      	ldr	r2, [pc, #208]	; (8006234 <HAL_DMA_Abort_IT+0x3bc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d059      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a33      	ldr	r2, [pc, #204]	; (8006238 <HAL_DMA_Abort_IT+0x3c0>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d054      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a31      	ldr	r2, [pc, #196]	; (800623c <HAL_DMA_Abort_IT+0x3c4>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d04f      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a30      	ldr	r2, [pc, #192]	; (8006240 <HAL_DMA_Abort_IT+0x3c8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d04a      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a2e      	ldr	r2, [pc, #184]	; (8006244 <HAL_DMA_Abort_IT+0x3cc>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d045      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a2d      	ldr	r2, [pc, #180]	; (8006248 <HAL_DMA_Abort_IT+0x3d0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d040      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a2b      	ldr	r2, [pc, #172]	; (800624c <HAL_DMA_Abort_IT+0x3d4>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d03b      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a2a      	ldr	r2, [pc, #168]	; (8006250 <HAL_DMA_Abort_IT+0x3d8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d036      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a28      	ldr	r2, [pc, #160]	; (8006254 <HAL_DMA_Abort_IT+0x3dc>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d031      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a27      	ldr	r2, [pc, #156]	; (8006258 <HAL_DMA_Abort_IT+0x3e0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d02c      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a25      	ldr	r2, [pc, #148]	; (800625c <HAL_DMA_Abort_IT+0x3e4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d027      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a24      	ldr	r2, [pc, #144]	; (8006260 <HAL_DMA_Abort_IT+0x3e8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d022      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a22      	ldr	r2, [pc, #136]	; (8006264 <HAL_DMA_Abort_IT+0x3ec>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d01d      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a21      	ldr	r2, [pc, #132]	; (8006268 <HAL_DMA_Abort_IT+0x3f0>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d018      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a1f      	ldr	r2, [pc, #124]	; (800626c <HAL_DMA_Abort_IT+0x3f4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d013      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a1e      	ldr	r2, [pc, #120]	; (8006270 <HAL_DMA_Abort_IT+0x3f8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00e      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1c      	ldr	r2, [pc, #112]	; (8006274 <HAL_DMA_Abort_IT+0x3fc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d009      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1b      	ldr	r2, [pc, #108]	; (8006278 <HAL_DMA_Abort_IT+0x400>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d004      	beq.n	800621a <HAL_DMA_Abort_IT+0x3a2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a19      	ldr	r2, [pc, #100]	; (800627c <HAL_DMA_Abort_IT+0x404>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d132      	bne.n	8006280 <HAL_DMA_Abort_IT+0x408>
 800621a:	2301      	movs	r3, #1
 800621c:	e031      	b.n	8006282 <HAL_DMA_Abort_IT+0x40a>
 800621e:	bf00      	nop
 8006220:	40020010 	.word	0x40020010
 8006224:	40020028 	.word	0x40020028
 8006228:	40020040 	.word	0x40020040
 800622c:	40020058 	.word	0x40020058
 8006230:	40020070 	.word	0x40020070
 8006234:	40020088 	.word	0x40020088
 8006238:	400200a0 	.word	0x400200a0
 800623c:	400200b8 	.word	0x400200b8
 8006240:	40020410 	.word	0x40020410
 8006244:	40020428 	.word	0x40020428
 8006248:	40020440 	.word	0x40020440
 800624c:	40020458 	.word	0x40020458
 8006250:	40020470 	.word	0x40020470
 8006254:	40020488 	.word	0x40020488
 8006258:	400204a0 	.word	0x400204a0
 800625c:	400204b8 	.word	0x400204b8
 8006260:	58025408 	.word	0x58025408
 8006264:	5802541c 	.word	0x5802541c
 8006268:	58025430 	.word	0x58025430
 800626c:	58025444 	.word	0x58025444
 8006270:	58025458 	.word	0x58025458
 8006274:	5802546c 	.word	0x5802546c
 8006278:	58025480 	.word	0x58025480
 800627c:	58025494 	.word	0x58025494
 8006280:	2300      	movs	r3, #0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d028      	beq.n	80062d8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006294:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	2201      	movs	r2, #1
 80062a6:	409a      	lsls	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00c      	beq.n	80062d8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop

08006304 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08a      	sub	sp, #40	; 0x28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006310:	4b67      	ldr	r3, [pc, #412]	; (80064b0 <HAL_DMA_IRQHandler+0x1ac>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a67      	ldr	r2, [pc, #412]	; (80064b4 <HAL_DMA_IRQHandler+0x1b0>)
 8006316:	fba2 2303 	umull	r2, r3, r2, r3
 800631a:	0a9b      	lsrs	r3, r3, #10
 800631c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006322:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006328:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a5f      	ldr	r2, [pc, #380]	; (80064b8 <HAL_DMA_IRQHandler+0x1b4>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d04a      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a5d      	ldr	r2, [pc, #372]	; (80064bc <HAL_DMA_IRQHandler+0x1b8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d045      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a5c      	ldr	r2, [pc, #368]	; (80064c0 <HAL_DMA_IRQHandler+0x1bc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d040      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a5a      	ldr	r2, [pc, #360]	; (80064c4 <HAL_DMA_IRQHandler+0x1c0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d03b      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a59      	ldr	r2, [pc, #356]	; (80064c8 <HAL_DMA_IRQHandler+0x1c4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d036      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a57      	ldr	r2, [pc, #348]	; (80064cc <HAL_DMA_IRQHandler+0x1c8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d031      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a56      	ldr	r2, [pc, #344]	; (80064d0 <HAL_DMA_IRQHandler+0x1cc>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d02c      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a54      	ldr	r2, [pc, #336]	; (80064d4 <HAL_DMA_IRQHandler+0x1d0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d027      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a53      	ldr	r2, [pc, #332]	; (80064d8 <HAL_DMA_IRQHandler+0x1d4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d022      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a51      	ldr	r2, [pc, #324]	; (80064dc <HAL_DMA_IRQHandler+0x1d8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01d      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a50      	ldr	r2, [pc, #320]	; (80064e0 <HAL_DMA_IRQHandler+0x1dc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d018      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a4e      	ldr	r2, [pc, #312]	; (80064e4 <HAL_DMA_IRQHandler+0x1e0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d013      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a4d      	ldr	r2, [pc, #308]	; (80064e8 <HAL_DMA_IRQHandler+0x1e4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00e      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a4b      	ldr	r2, [pc, #300]	; (80064ec <HAL_DMA_IRQHandler+0x1e8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d009      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a4a      	ldr	r2, [pc, #296]	; (80064f0 <HAL_DMA_IRQHandler+0x1ec>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d004      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xd2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a48      	ldr	r2, [pc, #288]	; (80064f4 <HAL_DMA_IRQHandler+0x1f0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d101      	bne.n	80063da <HAL_DMA_IRQHandler+0xd6>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <HAL_DMA_IRQHandler+0xd8>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 842b 	beq.w	8006c38 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e6:	f003 031f 	and.w	r3, r3, #31
 80063ea:	2208      	movs	r2, #8
 80063ec:	409a      	lsls	r2, r3
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	4013      	ands	r3, r2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 80a2 	beq.w	800653c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a2e      	ldr	r2, [pc, #184]	; (80064b8 <HAL_DMA_IRQHandler+0x1b4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d04a      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a2d      	ldr	r2, [pc, #180]	; (80064bc <HAL_DMA_IRQHandler+0x1b8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d045      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a2b      	ldr	r2, [pc, #172]	; (80064c0 <HAL_DMA_IRQHandler+0x1bc>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d040      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a2a      	ldr	r2, [pc, #168]	; (80064c4 <HAL_DMA_IRQHandler+0x1c0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d03b      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a28      	ldr	r2, [pc, #160]	; (80064c8 <HAL_DMA_IRQHandler+0x1c4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d036      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a27      	ldr	r2, [pc, #156]	; (80064cc <HAL_DMA_IRQHandler+0x1c8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d031      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a25      	ldr	r2, [pc, #148]	; (80064d0 <HAL_DMA_IRQHandler+0x1cc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d02c      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a24      	ldr	r2, [pc, #144]	; (80064d4 <HAL_DMA_IRQHandler+0x1d0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d027      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a22      	ldr	r2, [pc, #136]	; (80064d8 <HAL_DMA_IRQHandler+0x1d4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d022      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a21      	ldr	r2, [pc, #132]	; (80064dc <HAL_DMA_IRQHandler+0x1d8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d01d      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <HAL_DMA_IRQHandler+0x1dc>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d018      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1e      	ldr	r2, [pc, #120]	; (80064e4 <HAL_DMA_IRQHandler+0x1e0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d013      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <HAL_DMA_IRQHandler+0x1e4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00e      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1b      	ldr	r2, [pc, #108]	; (80064ec <HAL_DMA_IRQHandler+0x1e8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d009      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a19      	ldr	r2, [pc, #100]	; (80064f0 <HAL_DMA_IRQHandler+0x1ec>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <HAL_DMA_IRQHandler+0x194>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <HAL_DMA_IRQHandler+0x1f0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d12f      	bne.n	80064f8 <HAL_DMA_IRQHandler+0x1f4>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bf14      	ite	ne
 80064a6:	2301      	movne	r3, #1
 80064a8:	2300      	moveq	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	e02e      	b.n	800650c <HAL_DMA_IRQHandler+0x208>
 80064ae:	bf00      	nop
 80064b0:	24000000 	.word	0x24000000
 80064b4:	1b4e81b5 	.word	0x1b4e81b5
 80064b8:	40020010 	.word	0x40020010
 80064bc:	40020028 	.word	0x40020028
 80064c0:	40020040 	.word	0x40020040
 80064c4:	40020058 	.word	0x40020058
 80064c8:	40020070 	.word	0x40020070
 80064cc:	40020088 	.word	0x40020088
 80064d0:	400200a0 	.word	0x400200a0
 80064d4:	400200b8 	.word	0x400200b8
 80064d8:	40020410 	.word	0x40020410
 80064dc:	40020428 	.word	0x40020428
 80064e0:	40020440 	.word	0x40020440
 80064e4:	40020458 	.word	0x40020458
 80064e8:	40020470 	.word	0x40020470
 80064ec:	40020488 	.word	0x40020488
 80064f0:	400204a0 	.word	0x400204a0
 80064f4:	400204b8 	.word	0x400204b8
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	bf14      	ite	ne
 8006506:	2301      	movne	r3, #1
 8006508:	2300      	moveq	r3, #0
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d015      	beq.n	800653c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0204 	bic.w	r2, r2, #4
 800651e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2208      	movs	r2, #8
 800652a:	409a      	lsls	r2, r3
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006534:	f043 0201 	orr.w	r2, r3, #1
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	fa22 f303 	lsr.w	r3, r2, r3
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d06e      	beq.n	8006630 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a69      	ldr	r2, [pc, #420]	; (80066fc <HAL_DMA_IRQHandler+0x3f8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d04a      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a67      	ldr	r2, [pc, #412]	; (8006700 <HAL_DMA_IRQHandler+0x3fc>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d045      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a66      	ldr	r2, [pc, #408]	; (8006704 <HAL_DMA_IRQHandler+0x400>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d040      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a64      	ldr	r2, [pc, #400]	; (8006708 <HAL_DMA_IRQHandler+0x404>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d03b      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a63      	ldr	r2, [pc, #396]	; (800670c <HAL_DMA_IRQHandler+0x408>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d036      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a61      	ldr	r2, [pc, #388]	; (8006710 <HAL_DMA_IRQHandler+0x40c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d031      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a60      	ldr	r2, [pc, #384]	; (8006714 <HAL_DMA_IRQHandler+0x410>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d02c      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a5e      	ldr	r2, [pc, #376]	; (8006718 <HAL_DMA_IRQHandler+0x414>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d027      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a5d      	ldr	r2, [pc, #372]	; (800671c <HAL_DMA_IRQHandler+0x418>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d022      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a5b      	ldr	r2, [pc, #364]	; (8006720 <HAL_DMA_IRQHandler+0x41c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d01d      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a5a      	ldr	r2, [pc, #360]	; (8006724 <HAL_DMA_IRQHandler+0x420>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d018      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a58      	ldr	r2, [pc, #352]	; (8006728 <HAL_DMA_IRQHandler+0x424>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d013      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a57      	ldr	r2, [pc, #348]	; (800672c <HAL_DMA_IRQHandler+0x428>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00e      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a55      	ldr	r2, [pc, #340]	; (8006730 <HAL_DMA_IRQHandler+0x42c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d009      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a54      	ldr	r2, [pc, #336]	; (8006734 <HAL_DMA_IRQHandler+0x430>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d004      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x2ee>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a52      	ldr	r2, [pc, #328]	; (8006738 <HAL_DMA_IRQHandler+0x434>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d10a      	bne.n	8006608 <HAL_DMA_IRQHandler+0x304>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	bf14      	ite	ne
 8006600:	2301      	movne	r3, #1
 8006602:	2300      	moveq	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	e003      	b.n	8006610 <HAL_DMA_IRQHandler+0x30c>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2300      	movs	r3, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00d      	beq.n	8006630 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006618:	f003 031f 	and.w	r3, r3, #31
 800661c:	2201      	movs	r2, #1
 800661e:	409a      	lsls	r2, r3
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006628:	f043 0202 	orr.w	r2, r3, #2
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	2204      	movs	r2, #4
 800663a:	409a      	lsls	r2, r3
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	4013      	ands	r3, r2
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 808f 	beq.w	8006764 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a2c      	ldr	r2, [pc, #176]	; (80066fc <HAL_DMA_IRQHandler+0x3f8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d04a      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a2a      	ldr	r2, [pc, #168]	; (8006700 <HAL_DMA_IRQHandler+0x3fc>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d045      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a29      	ldr	r2, [pc, #164]	; (8006704 <HAL_DMA_IRQHandler+0x400>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d040      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a27      	ldr	r2, [pc, #156]	; (8006708 <HAL_DMA_IRQHandler+0x404>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d03b      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a26      	ldr	r2, [pc, #152]	; (800670c <HAL_DMA_IRQHandler+0x408>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d036      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a24      	ldr	r2, [pc, #144]	; (8006710 <HAL_DMA_IRQHandler+0x40c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d031      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a23      	ldr	r2, [pc, #140]	; (8006714 <HAL_DMA_IRQHandler+0x410>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d02c      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a21      	ldr	r2, [pc, #132]	; (8006718 <HAL_DMA_IRQHandler+0x414>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d027      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a20      	ldr	r2, [pc, #128]	; (800671c <HAL_DMA_IRQHandler+0x418>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d022      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1e      	ldr	r2, [pc, #120]	; (8006720 <HAL_DMA_IRQHandler+0x41c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01d      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <HAL_DMA_IRQHandler+0x420>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d018      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1b      	ldr	r2, [pc, #108]	; (8006728 <HAL_DMA_IRQHandler+0x424>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1a      	ldr	r2, [pc, #104]	; (800672c <HAL_DMA_IRQHandler+0x428>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00e      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a18      	ldr	r2, [pc, #96]	; (8006730 <HAL_DMA_IRQHandler+0x42c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d009      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a17      	ldr	r2, [pc, #92]	; (8006734 <HAL_DMA_IRQHandler+0x430>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d004      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x3e2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a15      	ldr	r2, [pc, #84]	; (8006738 <HAL_DMA_IRQHandler+0x434>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d12a      	bne.n	800673c <HAL_DMA_IRQHandler+0x438>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	bf14      	ite	ne
 80066f4:	2301      	movne	r3, #1
 80066f6:	2300      	moveq	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	e023      	b.n	8006744 <HAL_DMA_IRQHandler+0x440>
 80066fc:	40020010 	.word	0x40020010
 8006700:	40020028 	.word	0x40020028
 8006704:	40020040 	.word	0x40020040
 8006708:	40020058 	.word	0x40020058
 800670c:	40020070 	.word	0x40020070
 8006710:	40020088 	.word	0x40020088
 8006714:	400200a0 	.word	0x400200a0
 8006718:	400200b8 	.word	0x400200b8
 800671c:	40020410 	.word	0x40020410
 8006720:	40020428 	.word	0x40020428
 8006724:	40020440 	.word	0x40020440
 8006728:	40020458 	.word	0x40020458
 800672c:	40020470 	.word	0x40020470
 8006730:	40020488 	.word	0x40020488
 8006734:	400204a0 	.word	0x400204a0
 8006738:	400204b8 	.word	0x400204b8
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2300      	movs	r3, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00d      	beq.n	8006764 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674c:	f003 031f 	and.w	r3, r3, #31
 8006750:	2204      	movs	r2, #4
 8006752:	409a      	lsls	r2, r3
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675c:	f043 0204 	orr.w	r2, r3, #4
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006768:	f003 031f 	and.w	r3, r3, #31
 800676c:	2210      	movs	r2, #16
 800676e:	409a      	lsls	r2, r3
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	4013      	ands	r3, r2
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80a6 	beq.w	80068c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a85      	ldr	r2, [pc, #532]	; (8006994 <HAL_DMA_IRQHandler+0x690>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d04a      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a83      	ldr	r2, [pc, #524]	; (8006998 <HAL_DMA_IRQHandler+0x694>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d045      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a82      	ldr	r2, [pc, #520]	; (800699c <HAL_DMA_IRQHandler+0x698>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d040      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a80      	ldr	r2, [pc, #512]	; (80069a0 <HAL_DMA_IRQHandler+0x69c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d03b      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a7f      	ldr	r2, [pc, #508]	; (80069a4 <HAL_DMA_IRQHandler+0x6a0>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d036      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a7d      	ldr	r2, [pc, #500]	; (80069a8 <HAL_DMA_IRQHandler+0x6a4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d031      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a7c      	ldr	r2, [pc, #496]	; (80069ac <HAL_DMA_IRQHandler+0x6a8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d02c      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a7a      	ldr	r2, [pc, #488]	; (80069b0 <HAL_DMA_IRQHandler+0x6ac>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d027      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a79      	ldr	r2, [pc, #484]	; (80069b4 <HAL_DMA_IRQHandler+0x6b0>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d022      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a77      	ldr	r2, [pc, #476]	; (80069b8 <HAL_DMA_IRQHandler+0x6b4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d01d      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a76      	ldr	r2, [pc, #472]	; (80069bc <HAL_DMA_IRQHandler+0x6b8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d018      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a74      	ldr	r2, [pc, #464]	; (80069c0 <HAL_DMA_IRQHandler+0x6bc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d013      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a73      	ldr	r2, [pc, #460]	; (80069c4 <HAL_DMA_IRQHandler+0x6c0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00e      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a71      	ldr	r2, [pc, #452]	; (80069c8 <HAL_DMA_IRQHandler+0x6c4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d009      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a70      	ldr	r2, [pc, #448]	; (80069cc <HAL_DMA_IRQHandler+0x6c8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d004      	beq.n	800681a <HAL_DMA_IRQHandler+0x516>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a6e      	ldr	r2, [pc, #440]	; (80069d0 <HAL_DMA_IRQHandler+0x6cc>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d10a      	bne.n	8006830 <HAL_DMA_IRQHandler+0x52c>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	bf14      	ite	ne
 8006828:	2301      	movne	r3, #1
 800682a:	2300      	moveq	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	e009      	b.n	8006844 <HAL_DMA_IRQHandler+0x540>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	2b00      	cmp	r3, #0
 800683c:	bf14      	ite	ne
 800683e:	2301      	movne	r3, #1
 8006840:	2300      	moveq	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d03e      	beq.n	80068c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684c:	f003 031f 	and.w	r3, r3, #31
 8006850:	2210      	movs	r2, #16
 8006852:	409a      	lsls	r2, r3
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d018      	beq.n	8006898 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d108      	bne.n	8006886 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	2b00      	cmp	r3, #0
 800687a:	d024      	beq.n	80068c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
 8006884:	e01f      	b.n	80068c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800688a:	2b00      	cmp	r3, #0
 800688c:	d01b      	beq.n	80068c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	4798      	blx	r3
 8006896:	e016      	b.n	80068c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d107      	bne.n	80068b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0208 	bic.w	r2, r2, #8
 80068b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2220      	movs	r2, #32
 80068d0:	409a      	lsls	r2, r3
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	4013      	ands	r3, r2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 8110 	beq.w	8006afc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a2c      	ldr	r2, [pc, #176]	; (8006994 <HAL_DMA_IRQHandler+0x690>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d04a      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a2b      	ldr	r2, [pc, #172]	; (8006998 <HAL_DMA_IRQHandler+0x694>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d045      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a29      	ldr	r2, [pc, #164]	; (800699c <HAL_DMA_IRQHandler+0x698>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d040      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a28      	ldr	r2, [pc, #160]	; (80069a0 <HAL_DMA_IRQHandler+0x69c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d03b      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a26      	ldr	r2, [pc, #152]	; (80069a4 <HAL_DMA_IRQHandler+0x6a0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d036      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a25      	ldr	r2, [pc, #148]	; (80069a8 <HAL_DMA_IRQHandler+0x6a4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d031      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a23      	ldr	r2, [pc, #140]	; (80069ac <HAL_DMA_IRQHandler+0x6a8>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d02c      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a22      	ldr	r2, [pc, #136]	; (80069b0 <HAL_DMA_IRQHandler+0x6ac>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d027      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a20      	ldr	r2, [pc, #128]	; (80069b4 <HAL_DMA_IRQHandler+0x6b0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d022      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1f      	ldr	r2, [pc, #124]	; (80069b8 <HAL_DMA_IRQHandler+0x6b4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d01d      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1d      	ldr	r2, [pc, #116]	; (80069bc <HAL_DMA_IRQHandler+0x6b8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d018      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <HAL_DMA_IRQHandler+0x6bc>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d013      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <HAL_DMA_IRQHandler+0x6c0>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00e      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a19      	ldr	r2, [pc, #100]	; (80069c8 <HAL_DMA_IRQHandler+0x6c4>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d009      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a17      	ldr	r2, [pc, #92]	; (80069cc <HAL_DMA_IRQHandler+0x6c8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d004      	beq.n	800697c <HAL_DMA_IRQHandler+0x678>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a16      	ldr	r2, [pc, #88]	; (80069d0 <HAL_DMA_IRQHandler+0x6cc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d12b      	bne.n	80069d4 <HAL_DMA_IRQHandler+0x6d0>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b00      	cmp	r3, #0
 8006988:	bf14      	ite	ne
 800698a:	2301      	movne	r3, #1
 800698c:	2300      	moveq	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	e02a      	b.n	80069e8 <HAL_DMA_IRQHandler+0x6e4>
 8006992:	bf00      	nop
 8006994:	40020010 	.word	0x40020010
 8006998:	40020028 	.word	0x40020028
 800699c:	40020040 	.word	0x40020040
 80069a0:	40020058 	.word	0x40020058
 80069a4:	40020070 	.word	0x40020070
 80069a8:	40020088 	.word	0x40020088
 80069ac:	400200a0 	.word	0x400200a0
 80069b0:	400200b8 	.word	0x400200b8
 80069b4:	40020410 	.word	0x40020410
 80069b8:	40020428 	.word	0x40020428
 80069bc:	40020440 	.word	0x40020440
 80069c0:	40020458 	.word	0x40020458
 80069c4:	40020470 	.word	0x40020470
 80069c8:	40020488 	.word	0x40020488
 80069cc:	400204a0 	.word	0x400204a0
 80069d0:	400204b8 	.word	0x400204b8
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bf14      	ite	ne
 80069e2:	2301      	movne	r3, #1
 80069e4:	2300      	moveq	r3, #0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 8087 	beq.w	8006afc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f2:	f003 031f 	and.w	r3, r3, #31
 80069f6:	2220      	movs	r2, #32
 80069f8:	409a      	lsls	r2, r3
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d139      	bne.n	8006a7e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0216 	bic.w	r2, r2, #22
 8006a18:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	695a      	ldr	r2, [r3, #20]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a28:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d103      	bne.n	8006a3a <HAL_DMA_IRQHandler+0x736>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d007      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0208 	bic.w	r2, r2, #8
 8006a48:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	223f      	movs	r2, #63	; 0x3f
 8006a54:	409a      	lsls	r2, r3
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 834a 	beq.w	8007108 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	4798      	blx	r3
          }
          return;
 8006a7c:	e344      	b.n	8007108 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d018      	beq.n	8006abe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d108      	bne.n	8006aac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d02c      	beq.n	8006afc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
 8006aaa:	e027      	b.n	8006afc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d023      	beq.n	8006afc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
 8006abc:	e01e      	b.n	8006afc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10f      	bne.n	8006aec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0210 	bic.w	r2, r2, #16
 8006ada:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 8306 	beq.w	8007112 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 8088 	beq.w	8006c24 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2204      	movs	r2, #4
 8006b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a7a      	ldr	r2, [pc, #488]	; (8006d0c <HAL_DMA_IRQHandler+0xa08>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d04a      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a79      	ldr	r2, [pc, #484]	; (8006d10 <HAL_DMA_IRQHandler+0xa0c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d045      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a77      	ldr	r2, [pc, #476]	; (8006d14 <HAL_DMA_IRQHandler+0xa10>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d040      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a76      	ldr	r2, [pc, #472]	; (8006d18 <HAL_DMA_IRQHandler+0xa14>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d03b      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a74      	ldr	r2, [pc, #464]	; (8006d1c <HAL_DMA_IRQHandler+0xa18>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d036      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a73      	ldr	r2, [pc, #460]	; (8006d20 <HAL_DMA_IRQHandler+0xa1c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d031      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a71      	ldr	r2, [pc, #452]	; (8006d24 <HAL_DMA_IRQHandler+0xa20>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d02c      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a70      	ldr	r2, [pc, #448]	; (8006d28 <HAL_DMA_IRQHandler+0xa24>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d027      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a6e      	ldr	r2, [pc, #440]	; (8006d2c <HAL_DMA_IRQHandler+0xa28>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d022      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a6d      	ldr	r2, [pc, #436]	; (8006d30 <HAL_DMA_IRQHandler+0xa2c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d01d      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a6b      	ldr	r2, [pc, #428]	; (8006d34 <HAL_DMA_IRQHandler+0xa30>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d018      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a6a      	ldr	r2, [pc, #424]	; (8006d38 <HAL_DMA_IRQHandler+0xa34>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d013      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a68      	ldr	r2, [pc, #416]	; (8006d3c <HAL_DMA_IRQHandler+0xa38>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00e      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a67      	ldr	r2, [pc, #412]	; (8006d40 <HAL_DMA_IRQHandler+0xa3c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a65      	ldr	r2, [pc, #404]	; (8006d44 <HAL_DMA_IRQHandler+0xa40>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x8b8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a64      	ldr	r2, [pc, #400]	; (8006d48 <HAL_DMA_IRQHandler+0xa44>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d108      	bne.n	8006bce <HAL_DMA_IRQHandler+0x8ca>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0201 	bic.w	r2, r2, #1
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	e007      	b.n	8006bde <HAL_DMA_IRQHandler+0x8da>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0201 	bic.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3301      	adds	r3, #1
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d307      	bcc.n	8006bfa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1f2      	bne.n	8006bde <HAL_DMA_IRQHandler+0x8da>
 8006bf8:	e000      	b.n	8006bfc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006bfa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d004      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006c12:	e003      	b.n	8006c1c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 8272 	beq.w	8007112 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	4798      	blx	r3
 8006c36:	e26c      	b.n	8007112 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a43      	ldr	r2, [pc, #268]	; (8006d4c <HAL_DMA_IRQHandler+0xa48>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d022      	beq.n	8006c88 <HAL_DMA_IRQHandler+0x984>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a42      	ldr	r2, [pc, #264]	; (8006d50 <HAL_DMA_IRQHandler+0xa4c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d01d      	beq.n	8006c88 <HAL_DMA_IRQHandler+0x984>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a40      	ldr	r2, [pc, #256]	; (8006d54 <HAL_DMA_IRQHandler+0xa50>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d018      	beq.n	8006c88 <HAL_DMA_IRQHandler+0x984>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a3f      	ldr	r2, [pc, #252]	; (8006d58 <HAL_DMA_IRQHandler+0xa54>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d013      	beq.n	8006c88 <HAL_DMA_IRQHandler+0x984>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a3d      	ldr	r2, [pc, #244]	; (8006d5c <HAL_DMA_IRQHandler+0xa58>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00e      	beq.n	8006c88 <HAL_DMA_IRQHandler+0x984>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a3c      	ldr	r2, [pc, #240]	; (8006d60 <HAL_DMA_IRQHandler+0xa5c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d009      	beq.n	8006c88 <HAL_DMA_IRQHandler+0x984>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a3a      	ldr	r2, [pc, #232]	; (8006d64 <HAL_DMA_IRQHandler+0xa60>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d004      	beq.n	8006c88 <HAL_DMA_IRQHandler+0x984>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a39      	ldr	r2, [pc, #228]	; (8006d68 <HAL_DMA_IRQHandler+0xa64>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d101      	bne.n	8006c8c <HAL_DMA_IRQHandler+0x988>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e000      	b.n	8006c8e <HAL_DMA_IRQHandler+0x98a>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 823f 	beq.w	8007112 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca0:	f003 031f 	and.w	r3, r3, #31
 8006ca4:	2204      	movs	r2, #4
 8006ca6:	409a      	lsls	r2, r3
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 80cd 	beq.w	8006e4c <HAL_DMA_IRQHandler+0xb48>
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 80c7 	beq.w	8006e4c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc2:	f003 031f 	and.w	r3, r3, #31
 8006cc6:	2204      	movs	r2, #4
 8006cc8:	409a      	lsls	r2, r3
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d049      	beq.n	8006d6c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 8210 	beq.w	800710c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cf4:	e20a      	b.n	800710c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 8206 	beq.w	800710c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d08:	e200      	b.n	800710c <HAL_DMA_IRQHandler+0xe08>
 8006d0a:	bf00      	nop
 8006d0c:	40020010 	.word	0x40020010
 8006d10:	40020028 	.word	0x40020028
 8006d14:	40020040 	.word	0x40020040
 8006d18:	40020058 	.word	0x40020058
 8006d1c:	40020070 	.word	0x40020070
 8006d20:	40020088 	.word	0x40020088
 8006d24:	400200a0 	.word	0x400200a0
 8006d28:	400200b8 	.word	0x400200b8
 8006d2c:	40020410 	.word	0x40020410
 8006d30:	40020428 	.word	0x40020428
 8006d34:	40020440 	.word	0x40020440
 8006d38:	40020458 	.word	0x40020458
 8006d3c:	40020470 	.word	0x40020470
 8006d40:	40020488 	.word	0x40020488
 8006d44:	400204a0 	.word	0x400204a0
 8006d48:	400204b8 	.word	0x400204b8
 8006d4c:	58025408 	.word	0x58025408
 8006d50:	5802541c 	.word	0x5802541c
 8006d54:	58025430 	.word	0x58025430
 8006d58:	58025444 	.word	0x58025444
 8006d5c:	58025458 	.word	0x58025458
 8006d60:	5802546c 	.word	0x5802546c
 8006d64:	58025480 	.word	0x58025480
 8006d68:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f003 0320 	and.w	r3, r3, #32
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d160      	bne.n	8006e38 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a7f      	ldr	r2, [pc, #508]	; (8006f78 <HAL_DMA_IRQHandler+0xc74>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d04a      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a7d      	ldr	r2, [pc, #500]	; (8006f7c <HAL_DMA_IRQHandler+0xc78>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d045      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a7c      	ldr	r2, [pc, #496]	; (8006f80 <HAL_DMA_IRQHandler+0xc7c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d040      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a7a      	ldr	r2, [pc, #488]	; (8006f84 <HAL_DMA_IRQHandler+0xc80>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d03b      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a79      	ldr	r2, [pc, #484]	; (8006f88 <HAL_DMA_IRQHandler+0xc84>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d036      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a77      	ldr	r2, [pc, #476]	; (8006f8c <HAL_DMA_IRQHandler+0xc88>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d031      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a76      	ldr	r2, [pc, #472]	; (8006f90 <HAL_DMA_IRQHandler+0xc8c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d02c      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a74      	ldr	r2, [pc, #464]	; (8006f94 <HAL_DMA_IRQHandler+0xc90>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d027      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a73      	ldr	r2, [pc, #460]	; (8006f98 <HAL_DMA_IRQHandler+0xc94>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d022      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a71      	ldr	r2, [pc, #452]	; (8006f9c <HAL_DMA_IRQHandler+0xc98>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d01d      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a70      	ldr	r2, [pc, #448]	; (8006fa0 <HAL_DMA_IRQHandler+0xc9c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d018      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a6e      	ldr	r2, [pc, #440]	; (8006fa4 <HAL_DMA_IRQHandler+0xca0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d013      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a6d      	ldr	r2, [pc, #436]	; (8006fa8 <HAL_DMA_IRQHandler+0xca4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00e      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a6b      	ldr	r2, [pc, #428]	; (8006fac <HAL_DMA_IRQHandler+0xca8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d009      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a6a      	ldr	r2, [pc, #424]	; (8006fb0 <HAL_DMA_IRQHandler+0xcac>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d004      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xb12>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a68      	ldr	r2, [pc, #416]	; (8006fb4 <HAL_DMA_IRQHandler+0xcb0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d108      	bne.n	8006e28 <HAL_DMA_IRQHandler+0xb24>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0208 	bic.w	r2, r2, #8
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	e007      	b.n	8006e38 <HAL_DMA_IRQHandler+0xb34>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0204 	bic.w	r2, r2, #4
 8006e36:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 8165 	beq.w	800710c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e4a:	e15f      	b.n	800710c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e50:	f003 031f 	and.w	r3, r3, #31
 8006e54:	2202      	movs	r2, #2
 8006e56:	409a      	lsls	r2, r3
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 80c5 	beq.w	8006fec <HAL_DMA_IRQHandler+0xce8>
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80bf 	beq.w	8006fec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e72:	f003 031f 	and.w	r3, r3, #31
 8006e76:	2202      	movs	r2, #2
 8006e78:	409a      	lsls	r2, r3
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d018      	beq.n	8006eba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d109      	bne.n	8006ea6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 813a 	beq.w	8007110 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ea4:	e134      	b.n	8007110 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f000 8130 	beq.w	8007110 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eb8:	e12a      	b.n	8007110 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f040 8089 	bne.w	8006fd8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a2b      	ldr	r2, [pc, #172]	; (8006f78 <HAL_DMA_IRQHandler+0xc74>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d04a      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a29      	ldr	r2, [pc, #164]	; (8006f7c <HAL_DMA_IRQHandler+0xc78>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d045      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a28      	ldr	r2, [pc, #160]	; (8006f80 <HAL_DMA_IRQHandler+0xc7c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d040      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a26      	ldr	r2, [pc, #152]	; (8006f84 <HAL_DMA_IRQHandler+0xc80>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d03b      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a25      	ldr	r2, [pc, #148]	; (8006f88 <HAL_DMA_IRQHandler+0xc84>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d036      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a23      	ldr	r2, [pc, #140]	; (8006f8c <HAL_DMA_IRQHandler+0xc88>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d031      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a22      	ldr	r2, [pc, #136]	; (8006f90 <HAL_DMA_IRQHandler+0xc8c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d02c      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a20      	ldr	r2, [pc, #128]	; (8006f94 <HAL_DMA_IRQHandler+0xc90>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d027      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1f      	ldr	r2, [pc, #124]	; (8006f98 <HAL_DMA_IRQHandler+0xc94>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d022      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1d      	ldr	r2, [pc, #116]	; (8006f9c <HAL_DMA_IRQHandler+0xc98>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d01d      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1c      	ldr	r2, [pc, #112]	; (8006fa0 <HAL_DMA_IRQHandler+0xc9c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d018      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a1a      	ldr	r2, [pc, #104]	; (8006fa4 <HAL_DMA_IRQHandler+0xca0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d013      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a19      	ldr	r2, [pc, #100]	; (8006fa8 <HAL_DMA_IRQHandler+0xca4>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d00e      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a17      	ldr	r2, [pc, #92]	; (8006fac <HAL_DMA_IRQHandler+0xca8>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d009      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a16      	ldr	r2, [pc, #88]	; (8006fb0 <HAL_DMA_IRQHandler+0xcac>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d004      	beq.n	8006f66 <HAL_DMA_IRQHandler+0xc62>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a14      	ldr	r2, [pc, #80]	; (8006fb4 <HAL_DMA_IRQHandler+0xcb0>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d128      	bne.n	8006fb8 <HAL_DMA_IRQHandler+0xcb4>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0214 	bic.w	r2, r2, #20
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	e027      	b.n	8006fc8 <HAL_DMA_IRQHandler+0xcc4>
 8006f78:	40020010 	.word	0x40020010
 8006f7c:	40020028 	.word	0x40020028
 8006f80:	40020040 	.word	0x40020040
 8006f84:	40020058 	.word	0x40020058
 8006f88:	40020070 	.word	0x40020070
 8006f8c:	40020088 	.word	0x40020088
 8006f90:	400200a0 	.word	0x400200a0
 8006f94:	400200b8 	.word	0x400200b8
 8006f98:	40020410 	.word	0x40020410
 8006f9c:	40020428 	.word	0x40020428
 8006fa0:	40020440 	.word	0x40020440
 8006fa4:	40020458 	.word	0x40020458
 8006fa8:	40020470 	.word	0x40020470
 8006fac:	40020488 	.word	0x40020488
 8006fb0:	400204a0 	.word	0x400204a0
 8006fb4:	400204b8 	.word	0x400204b8
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 020a 	bic.w	r2, r2, #10
 8006fc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 8097 	beq.w	8007110 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fea:	e091      	b.n	8007110 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff0:	f003 031f 	and.w	r3, r3, #31
 8006ff4:	2208      	movs	r2, #8
 8006ff6:	409a      	lsls	r2, r3
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 8088 	beq.w	8007112 <HAL_DMA_IRQHandler+0xe0e>
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f003 0308 	and.w	r3, r3, #8
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8082 	beq.w	8007112 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a41      	ldr	r2, [pc, #260]	; (8007118 <HAL_DMA_IRQHandler+0xe14>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d04a      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a3f      	ldr	r2, [pc, #252]	; (800711c <HAL_DMA_IRQHandler+0xe18>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d045      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a3e      	ldr	r2, [pc, #248]	; (8007120 <HAL_DMA_IRQHandler+0xe1c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d040      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a3c      	ldr	r2, [pc, #240]	; (8007124 <HAL_DMA_IRQHandler+0xe20>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d03b      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a3b      	ldr	r2, [pc, #236]	; (8007128 <HAL_DMA_IRQHandler+0xe24>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d036      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a39      	ldr	r2, [pc, #228]	; (800712c <HAL_DMA_IRQHandler+0xe28>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d031      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a38      	ldr	r2, [pc, #224]	; (8007130 <HAL_DMA_IRQHandler+0xe2c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d02c      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a36      	ldr	r2, [pc, #216]	; (8007134 <HAL_DMA_IRQHandler+0xe30>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d027      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a35      	ldr	r2, [pc, #212]	; (8007138 <HAL_DMA_IRQHandler+0xe34>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d022      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a33      	ldr	r2, [pc, #204]	; (800713c <HAL_DMA_IRQHandler+0xe38>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d01d      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a32      	ldr	r2, [pc, #200]	; (8007140 <HAL_DMA_IRQHandler+0xe3c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d018      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a30      	ldr	r2, [pc, #192]	; (8007144 <HAL_DMA_IRQHandler+0xe40>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d013      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a2f      	ldr	r2, [pc, #188]	; (8007148 <HAL_DMA_IRQHandler+0xe44>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00e      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a2d      	ldr	r2, [pc, #180]	; (800714c <HAL_DMA_IRQHandler+0xe48>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d009      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a2c      	ldr	r2, [pc, #176]	; (8007150 <HAL_DMA_IRQHandler+0xe4c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d004      	beq.n	80070ae <HAL_DMA_IRQHandler+0xdaa>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a2a      	ldr	r2, [pc, #168]	; (8007154 <HAL_DMA_IRQHandler+0xe50>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d108      	bne.n	80070c0 <HAL_DMA_IRQHandler+0xdbc>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 021c 	bic.w	r2, r2, #28
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e007      	b.n	80070d0 <HAL_DMA_IRQHandler+0xdcc>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 020e 	bic.w	r2, r2, #14
 80070ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d4:	f003 031f 	and.w	r3, r3, #31
 80070d8:	2201      	movs	r2, #1
 80070da:	409a      	lsls	r2, r3
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d009      	beq.n	8007112 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	4798      	blx	r3
 8007106:	e004      	b.n	8007112 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007108:	bf00      	nop
 800710a:	e002      	b.n	8007112 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800710c:	bf00      	nop
 800710e:	e000      	b.n	8007112 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007110:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007112:	3728      	adds	r7, #40	; 0x28
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	40020010 	.word	0x40020010
 800711c:	40020028 	.word	0x40020028
 8007120:	40020040 	.word	0x40020040
 8007124:	40020058 	.word	0x40020058
 8007128:	40020070 	.word	0x40020070
 800712c:	40020088 	.word	0x40020088
 8007130:	400200a0 	.word	0x400200a0
 8007134:	400200b8 	.word	0x400200b8
 8007138:	40020410 	.word	0x40020410
 800713c:	40020428 	.word	0x40020428
 8007140:	40020440 	.word	0x40020440
 8007144:	40020458 	.word	0x40020458
 8007148:	40020470 	.word	0x40020470
 800714c:	40020488 	.word	0x40020488
 8007150:	400204a0 	.word	0x400204a0
 8007154:	400204b8 	.word	0x400204b8

08007158 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800716a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007170:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a7f      	ldr	r2, [pc, #508]	; (8007374 <DMA_SetConfig+0x21c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d072      	beq.n	8007262 <DMA_SetConfig+0x10a>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a7d      	ldr	r2, [pc, #500]	; (8007378 <DMA_SetConfig+0x220>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d06d      	beq.n	8007262 <DMA_SetConfig+0x10a>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a7c      	ldr	r2, [pc, #496]	; (800737c <DMA_SetConfig+0x224>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d068      	beq.n	8007262 <DMA_SetConfig+0x10a>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a7a      	ldr	r2, [pc, #488]	; (8007380 <DMA_SetConfig+0x228>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d063      	beq.n	8007262 <DMA_SetConfig+0x10a>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a79      	ldr	r2, [pc, #484]	; (8007384 <DMA_SetConfig+0x22c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d05e      	beq.n	8007262 <DMA_SetConfig+0x10a>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a77      	ldr	r2, [pc, #476]	; (8007388 <DMA_SetConfig+0x230>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d059      	beq.n	8007262 <DMA_SetConfig+0x10a>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a76      	ldr	r2, [pc, #472]	; (800738c <DMA_SetConfig+0x234>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d054      	beq.n	8007262 <DMA_SetConfig+0x10a>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a74      	ldr	r2, [pc, #464]	; (8007390 <DMA_SetConfig+0x238>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d04f      	beq.n	8007262 <DMA_SetConfig+0x10a>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a73      	ldr	r2, [pc, #460]	; (8007394 <DMA_SetConfig+0x23c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d04a      	beq.n	8007262 <DMA_SetConfig+0x10a>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a71      	ldr	r2, [pc, #452]	; (8007398 <DMA_SetConfig+0x240>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d045      	beq.n	8007262 <DMA_SetConfig+0x10a>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a70      	ldr	r2, [pc, #448]	; (800739c <DMA_SetConfig+0x244>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d040      	beq.n	8007262 <DMA_SetConfig+0x10a>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a6e      	ldr	r2, [pc, #440]	; (80073a0 <DMA_SetConfig+0x248>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d03b      	beq.n	8007262 <DMA_SetConfig+0x10a>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a6d      	ldr	r2, [pc, #436]	; (80073a4 <DMA_SetConfig+0x24c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d036      	beq.n	8007262 <DMA_SetConfig+0x10a>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a6b      	ldr	r2, [pc, #428]	; (80073a8 <DMA_SetConfig+0x250>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d031      	beq.n	8007262 <DMA_SetConfig+0x10a>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a6a      	ldr	r2, [pc, #424]	; (80073ac <DMA_SetConfig+0x254>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d02c      	beq.n	8007262 <DMA_SetConfig+0x10a>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a68      	ldr	r2, [pc, #416]	; (80073b0 <DMA_SetConfig+0x258>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d027      	beq.n	8007262 <DMA_SetConfig+0x10a>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a67      	ldr	r2, [pc, #412]	; (80073b4 <DMA_SetConfig+0x25c>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d022      	beq.n	8007262 <DMA_SetConfig+0x10a>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a65      	ldr	r2, [pc, #404]	; (80073b8 <DMA_SetConfig+0x260>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d01d      	beq.n	8007262 <DMA_SetConfig+0x10a>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a64      	ldr	r2, [pc, #400]	; (80073bc <DMA_SetConfig+0x264>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d018      	beq.n	8007262 <DMA_SetConfig+0x10a>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a62      	ldr	r2, [pc, #392]	; (80073c0 <DMA_SetConfig+0x268>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d013      	beq.n	8007262 <DMA_SetConfig+0x10a>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a61      	ldr	r2, [pc, #388]	; (80073c4 <DMA_SetConfig+0x26c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00e      	beq.n	8007262 <DMA_SetConfig+0x10a>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a5f      	ldr	r2, [pc, #380]	; (80073c8 <DMA_SetConfig+0x270>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d009      	beq.n	8007262 <DMA_SetConfig+0x10a>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a5e      	ldr	r2, [pc, #376]	; (80073cc <DMA_SetConfig+0x274>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d004      	beq.n	8007262 <DMA_SetConfig+0x10a>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a5c      	ldr	r2, [pc, #368]	; (80073d0 <DMA_SetConfig+0x278>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d101      	bne.n	8007266 <DMA_SetConfig+0x10e>
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <DMA_SetConfig+0x110>
 8007266:	2300      	movs	r3, #0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00d      	beq.n	8007288 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007274:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800727a:	2b00      	cmp	r3, #0
 800727c:	d004      	beq.n	8007288 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007286:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a39      	ldr	r2, [pc, #228]	; (8007374 <DMA_SetConfig+0x21c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d04a      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a38      	ldr	r2, [pc, #224]	; (8007378 <DMA_SetConfig+0x220>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d045      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a36      	ldr	r2, [pc, #216]	; (800737c <DMA_SetConfig+0x224>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d040      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a35      	ldr	r2, [pc, #212]	; (8007380 <DMA_SetConfig+0x228>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d03b      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a33      	ldr	r2, [pc, #204]	; (8007384 <DMA_SetConfig+0x22c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d036      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a32      	ldr	r2, [pc, #200]	; (8007388 <DMA_SetConfig+0x230>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d031      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a30      	ldr	r2, [pc, #192]	; (800738c <DMA_SetConfig+0x234>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d02c      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a2f      	ldr	r2, [pc, #188]	; (8007390 <DMA_SetConfig+0x238>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d027      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a2d      	ldr	r2, [pc, #180]	; (8007394 <DMA_SetConfig+0x23c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d022      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a2c      	ldr	r2, [pc, #176]	; (8007398 <DMA_SetConfig+0x240>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d01d      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a2a      	ldr	r2, [pc, #168]	; (800739c <DMA_SetConfig+0x244>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d018      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a29      	ldr	r2, [pc, #164]	; (80073a0 <DMA_SetConfig+0x248>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d013      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a27      	ldr	r2, [pc, #156]	; (80073a4 <DMA_SetConfig+0x24c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d00e      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a26      	ldr	r2, [pc, #152]	; (80073a8 <DMA_SetConfig+0x250>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d009      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a24      	ldr	r2, [pc, #144]	; (80073ac <DMA_SetConfig+0x254>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d004      	beq.n	8007328 <DMA_SetConfig+0x1d0>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a23      	ldr	r2, [pc, #140]	; (80073b0 <DMA_SetConfig+0x258>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d101      	bne.n	800732c <DMA_SetConfig+0x1d4>
 8007328:	2301      	movs	r3, #1
 800732a:	e000      	b.n	800732e <DMA_SetConfig+0x1d6>
 800732c:	2300      	movs	r3, #0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d059      	beq.n	80073e6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007336:	f003 031f 	and.w	r3, r3, #31
 800733a:	223f      	movs	r2, #63	; 0x3f
 800733c:	409a      	lsls	r2, r3
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007350:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	d138      	bne.n	80073d4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007372:	e086      	b.n	8007482 <DMA_SetConfig+0x32a>
 8007374:	40020010 	.word	0x40020010
 8007378:	40020028 	.word	0x40020028
 800737c:	40020040 	.word	0x40020040
 8007380:	40020058 	.word	0x40020058
 8007384:	40020070 	.word	0x40020070
 8007388:	40020088 	.word	0x40020088
 800738c:	400200a0 	.word	0x400200a0
 8007390:	400200b8 	.word	0x400200b8
 8007394:	40020410 	.word	0x40020410
 8007398:	40020428 	.word	0x40020428
 800739c:	40020440 	.word	0x40020440
 80073a0:	40020458 	.word	0x40020458
 80073a4:	40020470 	.word	0x40020470
 80073a8:	40020488 	.word	0x40020488
 80073ac:	400204a0 	.word	0x400204a0
 80073b0:	400204b8 	.word	0x400204b8
 80073b4:	58025408 	.word	0x58025408
 80073b8:	5802541c 	.word	0x5802541c
 80073bc:	58025430 	.word	0x58025430
 80073c0:	58025444 	.word	0x58025444
 80073c4:	58025458 	.word	0x58025458
 80073c8:	5802546c 	.word	0x5802546c
 80073cc:	58025480 	.word	0x58025480
 80073d0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	60da      	str	r2, [r3, #12]
}
 80073e4:	e04d      	b.n	8007482 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a29      	ldr	r2, [pc, #164]	; (8007490 <DMA_SetConfig+0x338>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d022      	beq.n	8007436 <DMA_SetConfig+0x2de>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a27      	ldr	r2, [pc, #156]	; (8007494 <DMA_SetConfig+0x33c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d01d      	beq.n	8007436 <DMA_SetConfig+0x2de>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a26      	ldr	r2, [pc, #152]	; (8007498 <DMA_SetConfig+0x340>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d018      	beq.n	8007436 <DMA_SetConfig+0x2de>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a24      	ldr	r2, [pc, #144]	; (800749c <DMA_SetConfig+0x344>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d013      	beq.n	8007436 <DMA_SetConfig+0x2de>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a23      	ldr	r2, [pc, #140]	; (80074a0 <DMA_SetConfig+0x348>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00e      	beq.n	8007436 <DMA_SetConfig+0x2de>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a21      	ldr	r2, [pc, #132]	; (80074a4 <DMA_SetConfig+0x34c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d009      	beq.n	8007436 <DMA_SetConfig+0x2de>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a20      	ldr	r2, [pc, #128]	; (80074a8 <DMA_SetConfig+0x350>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d004      	beq.n	8007436 <DMA_SetConfig+0x2de>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a1e      	ldr	r2, [pc, #120]	; (80074ac <DMA_SetConfig+0x354>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d101      	bne.n	800743a <DMA_SetConfig+0x2e2>
 8007436:	2301      	movs	r3, #1
 8007438:	e000      	b.n	800743c <DMA_SetConfig+0x2e4>
 800743a:	2300      	movs	r3, #0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d020      	beq.n	8007482 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007444:	f003 031f 	and.w	r3, r3, #31
 8007448:	2201      	movs	r2, #1
 800744a:	409a      	lsls	r2, r3
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	2b40      	cmp	r3, #64	; 0x40
 800745e:	d108      	bne.n	8007472 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	60da      	str	r2, [r3, #12]
}
 8007470:	e007      	b.n	8007482 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	60da      	str	r2, [r3, #12]
}
 8007482:	bf00      	nop
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	58025408 	.word	0x58025408
 8007494:	5802541c 	.word	0x5802541c
 8007498:	58025430 	.word	0x58025430
 800749c:	58025444 	.word	0x58025444
 80074a0:	58025458 	.word	0x58025458
 80074a4:	5802546c 	.word	0x5802546c
 80074a8:	58025480 	.word	0x58025480
 80074ac:	58025494 	.word	0x58025494

080074b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a42      	ldr	r2, [pc, #264]	; (80075c8 <DMA_CalcBaseAndBitshift+0x118>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d04a      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a41      	ldr	r2, [pc, #260]	; (80075cc <DMA_CalcBaseAndBitshift+0x11c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d045      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a3f      	ldr	r2, [pc, #252]	; (80075d0 <DMA_CalcBaseAndBitshift+0x120>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d040      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a3e      	ldr	r2, [pc, #248]	; (80075d4 <DMA_CalcBaseAndBitshift+0x124>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d03b      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a3c      	ldr	r2, [pc, #240]	; (80075d8 <DMA_CalcBaseAndBitshift+0x128>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d036      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a3b      	ldr	r2, [pc, #236]	; (80075dc <DMA_CalcBaseAndBitshift+0x12c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d031      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a39      	ldr	r2, [pc, #228]	; (80075e0 <DMA_CalcBaseAndBitshift+0x130>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d02c      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a38      	ldr	r2, [pc, #224]	; (80075e4 <DMA_CalcBaseAndBitshift+0x134>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d027      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a36      	ldr	r2, [pc, #216]	; (80075e8 <DMA_CalcBaseAndBitshift+0x138>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d022      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a35      	ldr	r2, [pc, #212]	; (80075ec <DMA_CalcBaseAndBitshift+0x13c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d01d      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a33      	ldr	r2, [pc, #204]	; (80075f0 <DMA_CalcBaseAndBitshift+0x140>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d018      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a32      	ldr	r2, [pc, #200]	; (80075f4 <DMA_CalcBaseAndBitshift+0x144>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d013      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a30      	ldr	r2, [pc, #192]	; (80075f8 <DMA_CalcBaseAndBitshift+0x148>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00e      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a2f      	ldr	r2, [pc, #188]	; (80075fc <DMA_CalcBaseAndBitshift+0x14c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d009      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a2d      	ldr	r2, [pc, #180]	; (8007600 <DMA_CalcBaseAndBitshift+0x150>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d004      	beq.n	8007558 <DMA_CalcBaseAndBitshift+0xa8>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a2c      	ldr	r2, [pc, #176]	; (8007604 <DMA_CalcBaseAndBitshift+0x154>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d101      	bne.n	800755c <DMA_CalcBaseAndBitshift+0xac>
 8007558:	2301      	movs	r3, #1
 800755a:	e000      	b.n	800755e <DMA_CalcBaseAndBitshift+0xae>
 800755c:	2300      	movs	r3, #0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d024      	beq.n	80075ac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	b2db      	uxtb	r3, r3
 8007568:	3b10      	subs	r3, #16
 800756a:	4a27      	ldr	r2, [pc, #156]	; (8007608 <DMA_CalcBaseAndBitshift+0x158>)
 800756c:	fba2 2303 	umull	r2, r3, r2, r3
 8007570:	091b      	lsrs	r3, r3, #4
 8007572:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	4a24      	ldr	r2, [pc, #144]	; (800760c <DMA_CalcBaseAndBitshift+0x15c>)
 800757c:	5cd3      	ldrb	r3, [r2, r3]
 800757e:	461a      	mov	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b03      	cmp	r3, #3
 8007588:	d908      	bls.n	800759c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	4b1f      	ldr	r3, [pc, #124]	; (8007610 <DMA_CalcBaseAndBitshift+0x160>)
 8007592:	4013      	ands	r3, r2
 8007594:	1d1a      	adds	r2, r3, #4
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	659a      	str	r2, [r3, #88]	; 0x58
 800759a:	e00d      	b.n	80075b8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	461a      	mov	r2, r3
 80075a2:	4b1b      	ldr	r3, [pc, #108]	; (8007610 <DMA_CalcBaseAndBitshift+0x160>)
 80075a4:	4013      	ands	r3, r2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6593      	str	r3, [r2, #88]	; 0x58
 80075aa:	e005      	b.n	80075b8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	40020010 	.word	0x40020010
 80075cc:	40020028 	.word	0x40020028
 80075d0:	40020040 	.word	0x40020040
 80075d4:	40020058 	.word	0x40020058
 80075d8:	40020070 	.word	0x40020070
 80075dc:	40020088 	.word	0x40020088
 80075e0:	400200a0 	.word	0x400200a0
 80075e4:	400200b8 	.word	0x400200b8
 80075e8:	40020410 	.word	0x40020410
 80075ec:	40020428 	.word	0x40020428
 80075f0:	40020440 	.word	0x40020440
 80075f4:	40020458 	.word	0x40020458
 80075f8:	40020470 	.word	0x40020470
 80075fc:	40020488 	.word	0x40020488
 8007600:	400204a0 	.word	0x400204a0
 8007604:	400204b8 	.word	0x400204b8
 8007608:	aaaaaaab 	.word	0xaaaaaaab
 800760c:	0800e3d4 	.word	0x0800e3d4
 8007610:	fffffc00 	.word	0xfffffc00

08007614 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d120      	bne.n	800766a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	2b03      	cmp	r3, #3
 800762e:	d858      	bhi.n	80076e2 <DMA_CheckFifoParam+0xce>
 8007630:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <DMA_CheckFifoParam+0x24>)
 8007632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007636:	bf00      	nop
 8007638:	08007649 	.word	0x08007649
 800763c:	0800765b 	.word	0x0800765b
 8007640:	08007649 	.word	0x08007649
 8007644:	080076e3 	.word	0x080076e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d048      	beq.n	80076e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007658:	e045      	b.n	80076e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007662:	d142      	bne.n	80076ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007668:	e03f      	b.n	80076ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007672:	d123      	bne.n	80076bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	2b03      	cmp	r3, #3
 800767a:	d838      	bhi.n	80076ee <DMA_CheckFifoParam+0xda>
 800767c:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <DMA_CheckFifoParam+0x70>)
 800767e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007682:	bf00      	nop
 8007684:	08007695 	.word	0x08007695
 8007688:	0800769b 	.word	0x0800769b
 800768c:	08007695 	.word	0x08007695
 8007690:	080076ad 	.word	0x080076ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
        break;
 8007698:	e030      	b.n	80076fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d025      	beq.n	80076f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076aa:	e022      	b.n	80076f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076b4:	d11f      	bne.n	80076f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076ba:	e01c      	b.n	80076f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d902      	bls.n	80076ca <DMA_CheckFifoParam+0xb6>
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d003      	beq.n	80076d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80076c8:	e018      	b.n	80076fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	73fb      	strb	r3, [r7, #15]
        break;
 80076ce:	e015      	b.n	80076fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00e      	beq.n	80076fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]
    break;
 80076e0:	e00b      	b.n	80076fa <DMA_CheckFifoParam+0xe6>
        break;
 80076e2:	bf00      	nop
 80076e4:	e00a      	b.n	80076fc <DMA_CheckFifoParam+0xe8>
        break;
 80076e6:	bf00      	nop
 80076e8:	e008      	b.n	80076fc <DMA_CheckFifoParam+0xe8>
        break;
 80076ea:	bf00      	nop
 80076ec:	e006      	b.n	80076fc <DMA_CheckFifoParam+0xe8>
        break;
 80076ee:	bf00      	nop
 80076f0:	e004      	b.n	80076fc <DMA_CheckFifoParam+0xe8>
        break;
 80076f2:	bf00      	nop
 80076f4:	e002      	b.n	80076fc <DMA_CheckFifoParam+0xe8>
        break;
 80076f6:	bf00      	nop
 80076f8:	e000      	b.n	80076fc <DMA_CheckFifoParam+0xe8>
    break;
 80076fa:	bf00      	nop
    }
  }

  return status;
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop

0800770c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a38      	ldr	r2, [pc, #224]	; (8007800 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d022      	beq.n	800776a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a36      	ldr	r2, [pc, #216]	; (8007804 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d01d      	beq.n	800776a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a35      	ldr	r2, [pc, #212]	; (8007808 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d018      	beq.n	800776a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a33      	ldr	r2, [pc, #204]	; (800780c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d013      	beq.n	800776a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a32      	ldr	r2, [pc, #200]	; (8007810 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00e      	beq.n	800776a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a30      	ldr	r2, [pc, #192]	; (8007814 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d009      	beq.n	800776a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a2f      	ldr	r2, [pc, #188]	; (8007818 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d004      	beq.n	800776a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a2d      	ldr	r2, [pc, #180]	; (800781c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d101      	bne.n	800776e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800776a:	2301      	movs	r3, #1
 800776c:	e000      	b.n	8007770 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800776e:	2300      	movs	r3, #0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d01a      	beq.n	80077aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	b2db      	uxtb	r3, r3
 800777a:	3b08      	subs	r3, #8
 800777c:	4a28      	ldr	r2, [pc, #160]	; (8007820 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800777e:	fba2 2303 	umull	r2, r3, r2, r3
 8007782:	091b      	lsrs	r3, r3, #4
 8007784:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4b26      	ldr	r3, [pc, #152]	; (8007824 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	461a      	mov	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a24      	ldr	r2, [pc, #144]	; (8007828 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007798:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f003 031f 	and.w	r3, r3, #31
 80077a0:	2201      	movs	r2, #1
 80077a2:	409a      	lsls	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80077a8:	e024      	b.n	80077f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	3b10      	subs	r3, #16
 80077b2:	4a1e      	ldr	r2, [pc, #120]	; (800782c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80077b4:	fba2 2303 	umull	r2, r3, r2, r3
 80077b8:	091b      	lsrs	r3, r3, #4
 80077ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	4a1c      	ldr	r2, [pc, #112]	; (8007830 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d806      	bhi.n	80077d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	4a1b      	ldr	r2, [pc, #108]	; (8007834 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d902      	bls.n	80077d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3308      	adds	r3, #8
 80077d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4b18      	ldr	r3, [pc, #96]	; (8007838 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a16      	ldr	r2, [pc, #88]	; (800783c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80077e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f003 031f 	and.w	r3, r3, #31
 80077ec:	2201      	movs	r2, #1
 80077ee:	409a      	lsls	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80077f4:	bf00      	nop
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	58025408 	.word	0x58025408
 8007804:	5802541c 	.word	0x5802541c
 8007808:	58025430 	.word	0x58025430
 800780c:	58025444 	.word	0x58025444
 8007810:	58025458 	.word	0x58025458
 8007814:	5802546c 	.word	0x5802546c
 8007818:	58025480 	.word	0x58025480
 800781c:	58025494 	.word	0x58025494
 8007820:	cccccccd 	.word	0xcccccccd
 8007824:	16009600 	.word	0x16009600
 8007828:	58025880 	.word	0x58025880
 800782c:	aaaaaaab 	.word	0xaaaaaaab
 8007830:	400204b8 	.word	0x400204b8
 8007834:	4002040f 	.word	0x4002040f
 8007838:	10008200 	.word	0x10008200
 800783c:	40020880 	.word	0x40020880

08007840 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d04a      	beq.n	80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2b08      	cmp	r3, #8
 800785a:	d847      	bhi.n	80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a25      	ldr	r2, [pc, #148]	; (80078f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d022      	beq.n	80078ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a24      	ldr	r2, [pc, #144]	; (80078fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d01d      	beq.n	80078ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a22      	ldr	r2, [pc, #136]	; (8007900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d018      	beq.n	80078ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a21      	ldr	r2, [pc, #132]	; (8007904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d013      	beq.n	80078ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a1f      	ldr	r2, [pc, #124]	; (8007908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00e      	beq.n	80078ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a1e      	ldr	r2, [pc, #120]	; (800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d009      	beq.n	80078ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a1c      	ldr	r2, [pc, #112]	; (8007910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d004      	beq.n	80078ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a1b      	ldr	r2, [pc, #108]	; (8007914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d101      	bne.n	80078b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80078ac:	2301      	movs	r3, #1
 80078ae:	e000      	b.n	80078b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80078b0:	2300      	movs	r3, #0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4b17      	ldr	r3, [pc, #92]	; (8007918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	461a      	mov	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a15      	ldr	r2, [pc, #84]	; (800791c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80078c8:	671a      	str	r2, [r3, #112]	; 0x70
 80078ca:	e009      	b.n	80078e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	4b14      	ldr	r3, [pc, #80]	; (8007920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80078d0:	4413      	add	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	461a      	mov	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a11      	ldr	r2, [pc, #68]	; (8007924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80078de:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	2201      	movs	r2, #1
 80078e6:	409a      	lsls	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80078ec:	bf00      	nop
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	58025408 	.word	0x58025408
 80078fc:	5802541c 	.word	0x5802541c
 8007900:	58025430 	.word	0x58025430
 8007904:	58025444 	.word	0x58025444
 8007908:	58025458 	.word	0x58025458
 800790c:	5802546c 	.word	0x5802546c
 8007910:	58025480 	.word	0x58025480
 8007914:	58025494 	.word	0x58025494
 8007918:	1600963f 	.word	0x1600963f
 800791c:	58025940 	.word	0x58025940
 8007920:	1000823f 	.word	0x1000823f
 8007924:	40020940 	.word	0x40020940

08007928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007928:	b480      	push	{r7}
 800792a:	b089      	sub	sp, #36	; 0x24
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007932:	2300      	movs	r3, #0
 8007934:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007936:	4b86      	ldr	r3, [pc, #536]	; (8007b50 <HAL_GPIO_Init+0x228>)
 8007938:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800793a:	e18c      	b.n	8007c56 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	2101      	movs	r1, #1
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	fa01 f303 	lsl.w	r3, r1, r3
 8007948:	4013      	ands	r3, r2
 800794a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 817e 	beq.w	8007c50 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	2b01      	cmp	r3, #1
 800795e:	d005      	beq.n	800796c <HAL_GPIO_Init+0x44>
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f003 0303 	and.w	r3, r3, #3
 8007968:	2b02      	cmp	r3, #2
 800796a:	d130      	bne.n	80079ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	2203      	movs	r2, #3
 8007978:	fa02 f303 	lsl.w	r3, r2, r3
 800797c:	43db      	mvns	r3, r3
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	4013      	ands	r3, r2
 8007982:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	fa02 f303 	lsl.w	r3, r2, r3
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	4313      	orrs	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079a2:	2201      	movs	r2, #1
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	fa02 f303 	lsl.w	r3, r2, r3
 80079aa:	43db      	mvns	r3, r3
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	4013      	ands	r3, r2
 80079b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	091b      	lsrs	r3, r3, #4
 80079b8:	f003 0201 	and.w	r2, r3, #1
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	fa02 f303 	lsl.w	r3, r2, r3
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f003 0303 	and.w	r3, r3, #3
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d017      	beq.n	8007a0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	2203      	movs	r2, #3
 80079e6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ea:	43db      	mvns	r3, r3
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	4013      	ands	r3, r2
 80079f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	689a      	ldr	r2, [r3, #8]
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	fa02 f303 	lsl.w	r3, r2, r3
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d123      	bne.n	8007a5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	08da      	lsrs	r2, r3, #3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3208      	adds	r2, #8
 8007a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	f003 0307 	and.w	r3, r3, #7
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	220f      	movs	r2, #15
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	43db      	mvns	r3, r3
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	4013      	ands	r3, r2
 8007a38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	691a      	ldr	r2, [r3, #16]
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	f003 0307 	and.w	r3, r3, #7
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	08da      	lsrs	r2, r3, #3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3208      	adds	r2, #8
 8007a58:	69b9      	ldr	r1, [r7, #24]
 8007a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	2203      	movs	r2, #3
 8007a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6e:	43db      	mvns	r3, r3
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	4013      	ands	r3, r2
 8007a74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f003 0203 	and.w	r2, r3, #3
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	fa02 f303 	lsl.w	r3, r2, r3
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 80d8 	beq.w	8007c50 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007aa0:	4b2c      	ldr	r3, [pc, #176]	; (8007b54 <HAL_GPIO_Init+0x22c>)
 8007aa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007aa6:	4a2b      	ldr	r2, [pc, #172]	; (8007b54 <HAL_GPIO_Init+0x22c>)
 8007aa8:	f043 0302 	orr.w	r3, r3, #2
 8007aac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007ab0:	4b28      	ldr	r3, [pc, #160]	; (8007b54 <HAL_GPIO_Init+0x22c>)
 8007ab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007abe:	4a26      	ldr	r2, [pc, #152]	; (8007b58 <HAL_GPIO_Init+0x230>)
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	089b      	lsrs	r3, r3, #2
 8007ac4:	3302      	adds	r3, #2
 8007ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	220f      	movs	r2, #15
 8007ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ada:	43db      	mvns	r3, r3
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a1d      	ldr	r2, [pc, #116]	; (8007b5c <HAL_GPIO_Init+0x234>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d04a      	beq.n	8007b80 <HAL_GPIO_Init+0x258>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a1c      	ldr	r2, [pc, #112]	; (8007b60 <HAL_GPIO_Init+0x238>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d02b      	beq.n	8007b4a <HAL_GPIO_Init+0x222>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a1b      	ldr	r2, [pc, #108]	; (8007b64 <HAL_GPIO_Init+0x23c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d025      	beq.n	8007b46 <HAL_GPIO_Init+0x21e>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a1a      	ldr	r2, [pc, #104]	; (8007b68 <HAL_GPIO_Init+0x240>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d01f      	beq.n	8007b42 <HAL_GPIO_Init+0x21a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a19      	ldr	r2, [pc, #100]	; (8007b6c <HAL_GPIO_Init+0x244>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d019      	beq.n	8007b3e <HAL_GPIO_Init+0x216>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a18      	ldr	r2, [pc, #96]	; (8007b70 <HAL_GPIO_Init+0x248>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d013      	beq.n	8007b3a <HAL_GPIO_Init+0x212>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a17      	ldr	r2, [pc, #92]	; (8007b74 <HAL_GPIO_Init+0x24c>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d00d      	beq.n	8007b36 <HAL_GPIO_Init+0x20e>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a16      	ldr	r2, [pc, #88]	; (8007b78 <HAL_GPIO_Init+0x250>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d007      	beq.n	8007b32 <HAL_GPIO_Init+0x20a>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a15      	ldr	r2, [pc, #84]	; (8007b7c <HAL_GPIO_Init+0x254>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d101      	bne.n	8007b2e <HAL_GPIO_Init+0x206>
 8007b2a:	2309      	movs	r3, #9
 8007b2c:	e029      	b.n	8007b82 <HAL_GPIO_Init+0x25a>
 8007b2e:	230a      	movs	r3, #10
 8007b30:	e027      	b.n	8007b82 <HAL_GPIO_Init+0x25a>
 8007b32:	2307      	movs	r3, #7
 8007b34:	e025      	b.n	8007b82 <HAL_GPIO_Init+0x25a>
 8007b36:	2306      	movs	r3, #6
 8007b38:	e023      	b.n	8007b82 <HAL_GPIO_Init+0x25a>
 8007b3a:	2305      	movs	r3, #5
 8007b3c:	e021      	b.n	8007b82 <HAL_GPIO_Init+0x25a>
 8007b3e:	2304      	movs	r3, #4
 8007b40:	e01f      	b.n	8007b82 <HAL_GPIO_Init+0x25a>
 8007b42:	2303      	movs	r3, #3
 8007b44:	e01d      	b.n	8007b82 <HAL_GPIO_Init+0x25a>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e01b      	b.n	8007b82 <HAL_GPIO_Init+0x25a>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e019      	b.n	8007b82 <HAL_GPIO_Init+0x25a>
 8007b4e:	bf00      	nop
 8007b50:	58000080 	.word	0x58000080
 8007b54:	58024400 	.word	0x58024400
 8007b58:	58000400 	.word	0x58000400
 8007b5c:	58020000 	.word	0x58020000
 8007b60:	58020400 	.word	0x58020400
 8007b64:	58020800 	.word	0x58020800
 8007b68:	58020c00 	.word	0x58020c00
 8007b6c:	58021000 	.word	0x58021000
 8007b70:	58021400 	.word	0x58021400
 8007b74:	58021800 	.word	0x58021800
 8007b78:	58021c00 	.word	0x58021c00
 8007b7c:	58022400 	.word	0x58022400
 8007b80:	2300      	movs	r3, #0
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	f002 0203 	and.w	r2, r2, #3
 8007b88:	0092      	lsls	r2, r2, #2
 8007b8a:	4093      	lsls	r3, r2
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b92:	4938      	ldr	r1, [pc, #224]	; (8007c74 <HAL_GPIO_Init+0x34c>)
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	089b      	lsrs	r3, r3, #2
 8007b98:	3302      	adds	r3, #2
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	43db      	mvns	r3, r3
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	43db      	mvns	r3, r3
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	4013      	ands	r3, r2
 8007bde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	43db      	mvns	r3, r3
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	4013      	ands	r3, r2
 8007c0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d003      	beq.n	8007c20 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	43db      	mvns	r3, r3
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	4013      	ands	r3, r2
 8007c34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	3301      	adds	r3, #1
 8007c54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f47f ae6b 	bne.w	800793c <HAL_GPIO_Init+0x14>
  }
}
 8007c66:	bf00      	nop
 8007c68:	bf00      	nop
 8007c6a:	3724      	adds	r7, #36	; 0x24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	58000400 	.word	0x58000400

08007c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	807b      	strh	r3, [r7, #2]
 8007c84:	4613      	mov	r3, r2
 8007c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c88:	787b      	ldrb	r3, [r7, #1]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c8e:	887a      	ldrh	r2, [r7, #2]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007c94:	e003      	b.n	8007c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c96:	887b      	ldrh	r3, [r7, #2]
 8007c98:	041a      	lsls	r2, r3, #16
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	619a      	str	r2, [r3, #24]
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
	...

08007cac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007cb4:	4b19      	ldr	r3, [pc, #100]	; (8007d1c <HAL_PWREx_ConfigSupply+0x70>)
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	2b04      	cmp	r3, #4
 8007cbe:	d00a      	beq.n	8007cd6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007cc0:	4b16      	ldr	r3, [pc, #88]	; (8007d1c <HAL_PWREx_ConfigSupply+0x70>)
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f003 0307 	and.w	r3, r3, #7
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d001      	beq.n	8007cd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e01f      	b.n	8007d12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e01d      	b.n	8007d12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007cd6:	4b11      	ldr	r3, [pc, #68]	; (8007d1c <HAL_PWREx_ConfigSupply+0x70>)
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f023 0207 	bic.w	r2, r3, #7
 8007cde:	490f      	ldr	r1, [pc, #60]	; (8007d1c <HAL_PWREx_ConfigSupply+0x70>)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007ce6:	f7fc fec9 	bl	8004a7c <HAL_GetTick>
 8007cea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007cec:	e009      	b.n	8007d02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007cee:	f7fc fec5 	bl	8004a7c <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cfc:	d901      	bls.n	8007d02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e007      	b.n	8007d12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d02:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <HAL_PWREx_ConfigSupply+0x70>)
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d0e:	d1ee      	bne.n	8007cee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	58024800 	.word	0x58024800

08007d20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08c      	sub	sp, #48	; 0x30
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e39d      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 8087 	beq.w	8007e4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d40:	4b88      	ldr	r3, [pc, #544]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d4a:	4b86      	ldr	r3, [pc, #536]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	2b10      	cmp	r3, #16
 8007d54:	d007      	beq.n	8007d66 <HAL_RCC_OscConfig+0x46>
 8007d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d58:	2b18      	cmp	r3, #24
 8007d5a:	d110      	bne.n	8007d7e <HAL_RCC_OscConfig+0x5e>
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	f003 0303 	and.w	r3, r3, #3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d10b      	bne.n	8007d7e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d66:	4b7f      	ldr	r3, [pc, #508]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d06c      	beq.n	8007e4c <HAL_RCC_OscConfig+0x12c>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d168      	bne.n	8007e4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e377      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d86:	d106      	bne.n	8007d96 <HAL_RCC_OscConfig+0x76>
 8007d88:	4b76      	ldr	r3, [pc, #472]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a75      	ldr	r2, [pc, #468]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	e02e      	b.n	8007df4 <HAL_RCC_OscConfig+0xd4>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10c      	bne.n	8007db8 <HAL_RCC_OscConfig+0x98>
 8007d9e:	4b71      	ldr	r3, [pc, #452]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a70      	ldr	r2, [pc, #448]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007da8:	6013      	str	r3, [r2, #0]
 8007daa:	4b6e      	ldr	r3, [pc, #440]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a6d      	ldr	r2, [pc, #436]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	e01d      	b.n	8007df4 <HAL_RCC_OscConfig+0xd4>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dc0:	d10c      	bne.n	8007ddc <HAL_RCC_OscConfig+0xbc>
 8007dc2:	4b68      	ldr	r3, [pc, #416]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a67      	ldr	r2, [pc, #412]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	4b65      	ldr	r3, [pc, #404]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a64      	ldr	r2, [pc, #400]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dd8:	6013      	str	r3, [r2, #0]
 8007dda:	e00b      	b.n	8007df4 <HAL_RCC_OscConfig+0xd4>
 8007ddc:	4b61      	ldr	r3, [pc, #388]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a60      	ldr	r2, [pc, #384]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	4b5e      	ldr	r3, [pc, #376]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a5d      	ldr	r2, [pc, #372]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d013      	beq.n	8007e24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dfc:	f7fc fe3e 	bl	8004a7c <HAL_GetTick>
 8007e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e02:	e008      	b.n	8007e16 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e04:	f7fc fe3a 	bl	8004a7c <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	2b64      	cmp	r3, #100	; 0x64
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e32b      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e16:	4b53      	ldr	r3, [pc, #332]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0f0      	beq.n	8007e04 <HAL_RCC_OscConfig+0xe4>
 8007e22:	e014      	b.n	8007e4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e24:	f7fc fe2a 	bl	8004a7c <HAL_GetTick>
 8007e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e2a:	e008      	b.n	8007e3e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e2c:	f7fc fe26 	bl	8004a7c <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	2b64      	cmp	r3, #100	; 0x64
 8007e38:	d901      	bls.n	8007e3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e317      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e3e:	4b49      	ldr	r3, [pc, #292]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1f0      	bne.n	8007e2c <HAL_RCC_OscConfig+0x10c>
 8007e4a:	e000      	b.n	8007e4e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 808c 	beq.w	8007f74 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e5c:	4b41      	ldr	r3, [pc, #260]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e66:	4b3f      	ldr	r3, [pc, #252]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d007      	beq.n	8007e82 <HAL_RCC_OscConfig+0x162>
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	2b18      	cmp	r3, #24
 8007e76:	d137      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x1c8>
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	f003 0303 	and.w	r3, r3, #3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d132      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e82:	4b38      	ldr	r3, [pc, #224]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0304 	and.w	r3, r3, #4
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d005      	beq.n	8007e9a <HAL_RCC_OscConfig+0x17a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e2e9      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e9a:	4b32      	ldr	r3, [pc, #200]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f023 0219 	bic.w	r2, r3, #25
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	492f      	ldr	r1, [pc, #188]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007eac:	f7fc fde6 	bl	8004a7c <HAL_GetTick>
 8007eb0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007eb4:	f7fc fde2 	bl	8004a7c <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e2d3      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ec6:	4b27      	ldr	r3, [pc, #156]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0304 	and.w	r3, r3, #4
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0f0      	beq.n	8007eb4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed2:	4b24      	ldr	r3, [pc, #144]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	061b      	lsls	r3, r3, #24
 8007ee0:	4920      	ldr	r1, [pc, #128]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ee6:	e045      	b.n	8007f74 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d026      	beq.n	8007f3e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ef0:	4b1c      	ldr	r3, [pc, #112]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f023 0219 	bic.w	r2, r3, #25
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	4919      	ldr	r1, [pc, #100]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f02:	f7fc fdbb 	bl	8004a7c <HAL_GetTick>
 8007f06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f08:	e008      	b.n	8007f1c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f0a:	f7fc fdb7 	bl	8004a7c <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d901      	bls.n	8007f1c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e2a8      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f1c:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0304 	and.w	r3, r3, #4
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0f0      	beq.n	8007f0a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f28:	4b0e      	ldr	r3, [pc, #56]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	061b      	lsls	r3, r3, #24
 8007f36:	490b      	ldr	r1, [pc, #44]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	604b      	str	r3, [r1, #4]
 8007f3c:	e01a      	b.n	8007f74 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f3e:	4b09      	ldr	r3, [pc, #36]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a08      	ldr	r2, [pc, #32]	; (8007f64 <HAL_RCC_OscConfig+0x244>)
 8007f44:	f023 0301 	bic.w	r3, r3, #1
 8007f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f4a:	f7fc fd97 	bl	8004a7c <HAL_GetTick>
 8007f4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f50:	e00a      	b.n	8007f68 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f52:	f7fc fd93 	bl	8004a7c <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d903      	bls.n	8007f68 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e284      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
 8007f64:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f68:	4b96      	ldr	r3, [pc, #600]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1ee      	bne.n	8007f52 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d06a      	beq.n	8008056 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f80:	4b90      	ldr	r3, [pc, #576]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f88:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f8a:	4b8e      	ldr	r3, [pc, #568]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	2b08      	cmp	r3, #8
 8007f94:	d007      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x286>
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	2b18      	cmp	r3, #24
 8007f9a:	d11b      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x2b4>
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f003 0303 	and.w	r3, r3, #3
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d116      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fa6:	4b87      	ldr	r3, [pc, #540]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d005      	beq.n	8007fbe <HAL_RCC_OscConfig+0x29e>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	2b80      	cmp	r3, #128	; 0x80
 8007fb8:	d001      	beq.n	8007fbe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e257      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fbe:	4b81      	ldr	r3, [pc, #516]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	061b      	lsls	r3, r3, #24
 8007fcc:	497d      	ldr	r1, [pc, #500]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fd2:	e040      	b.n	8008056 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	69db      	ldr	r3, [r3, #28]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d023      	beq.n	8008024 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007fdc:	4b79      	ldr	r3, [pc, #484]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a78      	ldr	r2, [pc, #480]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8007fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe8:	f7fc fd48 	bl	8004a7c <HAL_GetTick>
 8007fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fee:	e008      	b.n	8008002 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007ff0:	f7fc fd44 	bl	8004a7c <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d901      	bls.n	8008002 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e235      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008002:	4b70      	ldr	r3, [pc, #448]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0f0      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800800e:	4b6d      	ldr	r3, [pc, #436]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	061b      	lsls	r3, r3, #24
 800801c:	4969      	ldr	r1, [pc, #420]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 800801e:	4313      	orrs	r3, r2
 8008020:	60cb      	str	r3, [r1, #12]
 8008022:	e018      	b.n	8008056 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008024:	4b67      	ldr	r3, [pc, #412]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a66      	ldr	r2, [pc, #408]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 800802a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800802e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008030:	f7fc fd24 	bl	8004a7c <HAL_GetTick>
 8008034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008036:	e008      	b.n	800804a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008038:	f7fc fd20 	bl	8004a7c <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d901      	bls.n	800804a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e211      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800804a:	4b5e      	ldr	r3, [pc, #376]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1f0      	bne.n	8008038 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d036      	beq.n	80080d0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d019      	beq.n	800809e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800806a:	4b56      	ldr	r3, [pc, #344]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 800806c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800806e:	4a55      	ldr	r2, [pc, #340]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8008070:	f043 0301 	orr.w	r3, r3, #1
 8008074:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008076:	f7fc fd01 	bl	8004a7c <HAL_GetTick>
 800807a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800807c:	e008      	b.n	8008090 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800807e:	f7fc fcfd 	bl	8004a7c <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	2b02      	cmp	r3, #2
 800808a:	d901      	bls.n	8008090 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e1ee      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008090:	4b4c      	ldr	r3, [pc, #304]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8008092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d0f0      	beq.n	800807e <HAL_RCC_OscConfig+0x35e>
 800809c:	e018      	b.n	80080d0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800809e:	4b49      	ldr	r3, [pc, #292]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 80080a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080a2:	4a48      	ldr	r2, [pc, #288]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 80080a4:	f023 0301 	bic.w	r3, r3, #1
 80080a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080aa:	f7fc fce7 	bl	8004a7c <HAL_GetTick>
 80080ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080b0:	e008      	b.n	80080c4 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080b2:	f7fc fce3 	bl	8004a7c <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d901      	bls.n	80080c4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e1d4      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080c4:	4b3f      	ldr	r3, [pc, #252]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 80080c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080c8:	f003 0302 	and.w	r3, r3, #2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1f0      	bne.n	80080b2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0320 	and.w	r3, r3, #32
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d036      	beq.n	800814a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d019      	beq.n	8008118 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80080e4:	4b37      	ldr	r3, [pc, #220]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a36      	ldr	r2, [pc, #216]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 80080ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80080f0:	f7fc fcc4 	bl	8004a7c <HAL_GetTick>
 80080f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80080f8:	f7fc fcc0 	bl	8004a7c <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e1b1      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800810a:	4b2e      	ldr	r3, [pc, #184]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0f0      	beq.n	80080f8 <HAL_RCC_OscConfig+0x3d8>
 8008116:	e018      	b.n	800814a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008118:	4b2a      	ldr	r3, [pc, #168]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a29      	ldr	r2, [pc, #164]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 800811e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008122:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008124:	f7fc fcaa 	bl	8004a7c <HAL_GetTick>
 8008128:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800812a:	e008      	b.n	800813e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800812c:	f7fc fca6 	bl	8004a7c <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d901      	bls.n	800813e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e197      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800813e:	4b21      	ldr	r3, [pc, #132]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1f0      	bne.n	800812c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0304 	and.w	r3, r3, #4
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 8086 	beq.w	8008264 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008158:	4b1b      	ldr	r3, [pc, #108]	; (80081c8 <HAL_RCC_OscConfig+0x4a8>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a1a      	ldr	r2, [pc, #104]	; (80081c8 <HAL_RCC_OscConfig+0x4a8>)
 800815e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008162:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008164:	f7fc fc8a 	bl	8004a7c <HAL_GetTick>
 8008168:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800816a:	e008      	b.n	800817e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800816c:	f7fc fc86 	bl	8004a7c <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b64      	cmp	r3, #100	; 0x64
 8008178:	d901      	bls.n	800817e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e177      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800817e:	4b12      	ldr	r3, [pc, #72]	; (80081c8 <HAL_RCC_OscConfig+0x4a8>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0f0      	beq.n	800816c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d106      	bne.n	80081a0 <HAL_RCC_OscConfig+0x480>
 8008192:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8008194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008196:	4a0b      	ldr	r2, [pc, #44]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 8008198:	f043 0301 	orr.w	r3, r3, #1
 800819c:	6713      	str	r3, [r2, #112]	; 0x70
 800819e:	e032      	b.n	8008206 <HAL_RCC_OscConfig+0x4e6>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d111      	bne.n	80081cc <HAL_RCC_OscConfig+0x4ac>
 80081a8:	4b06      	ldr	r3, [pc, #24]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 80081aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ac:	4a05      	ldr	r2, [pc, #20]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 80081ae:	f023 0301 	bic.w	r3, r3, #1
 80081b2:	6713      	str	r3, [r2, #112]	; 0x70
 80081b4:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 80081b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b8:	4a02      	ldr	r2, [pc, #8]	; (80081c4 <HAL_RCC_OscConfig+0x4a4>)
 80081ba:	f023 0304 	bic.w	r3, r3, #4
 80081be:	6713      	str	r3, [r2, #112]	; 0x70
 80081c0:	e021      	b.n	8008206 <HAL_RCC_OscConfig+0x4e6>
 80081c2:	bf00      	nop
 80081c4:	58024400 	.word	0x58024400
 80081c8:	58024800 	.word	0x58024800
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	2b05      	cmp	r3, #5
 80081d2:	d10c      	bne.n	80081ee <HAL_RCC_OscConfig+0x4ce>
 80081d4:	4b83      	ldr	r3, [pc, #524]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 80081d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d8:	4a82      	ldr	r2, [pc, #520]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 80081da:	f043 0304 	orr.w	r3, r3, #4
 80081de:	6713      	str	r3, [r2, #112]	; 0x70
 80081e0:	4b80      	ldr	r3, [pc, #512]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 80081e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e4:	4a7f      	ldr	r2, [pc, #508]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 80081e6:	f043 0301 	orr.w	r3, r3, #1
 80081ea:	6713      	str	r3, [r2, #112]	; 0x70
 80081ec:	e00b      	b.n	8008206 <HAL_RCC_OscConfig+0x4e6>
 80081ee:	4b7d      	ldr	r3, [pc, #500]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 80081f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f2:	4a7c      	ldr	r2, [pc, #496]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 80081f4:	f023 0301 	bic.w	r3, r3, #1
 80081f8:	6713      	str	r3, [r2, #112]	; 0x70
 80081fa:	4b7a      	ldr	r3, [pc, #488]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 80081fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fe:	4a79      	ldr	r2, [pc, #484]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 8008200:	f023 0304 	bic.w	r3, r3, #4
 8008204:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d015      	beq.n	800823a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800820e:	f7fc fc35 	bl	8004a7c <HAL_GetTick>
 8008212:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008214:	e00a      	b.n	800822c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008216:	f7fc fc31 	bl	8004a7c <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	f241 3288 	movw	r2, #5000	; 0x1388
 8008224:	4293      	cmp	r3, r2
 8008226:	d901      	bls.n	800822c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e120      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800822c:	4b6d      	ldr	r3, [pc, #436]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 800822e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d0ee      	beq.n	8008216 <HAL_RCC_OscConfig+0x4f6>
 8008238:	e014      	b.n	8008264 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800823a:	f7fc fc1f 	bl	8004a7c <HAL_GetTick>
 800823e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008240:	e00a      	b.n	8008258 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008242:	f7fc fc1b 	bl	8004a7c <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008250:	4293      	cmp	r3, r2
 8008252:	d901      	bls.n	8008258 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e10a      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008258:	4b62      	ldr	r3, [pc, #392]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 800825a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1ee      	bne.n	8008242 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 80ff 	beq.w	800846c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800826e:	4b5d      	ldr	r3, [pc, #372]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008276:	2b18      	cmp	r3, #24
 8008278:	f000 80ba 	beq.w	80083f0 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	2b02      	cmp	r3, #2
 8008282:	f040 8095 	bne.w	80083b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008286:	4b57      	ldr	r3, [pc, #348]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a56      	ldr	r2, [pc, #344]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 800828c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008292:	f7fc fbf3 	bl	8004a7c <HAL_GetTick>
 8008296:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008298:	e008      	b.n	80082ac <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800829a:	f7fc fbef 	bl	8004a7c <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d901      	bls.n	80082ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e0e0      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082ac:	4b4d      	ldr	r3, [pc, #308]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1f0      	bne.n	800829a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082b8:	4b4a      	ldr	r3, [pc, #296]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 80082ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082bc:	4b4a      	ldr	r3, [pc, #296]	; (80083e8 <HAL_RCC_OscConfig+0x6c8>)
 80082be:	4013      	ands	r3, r2
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80082c8:	0112      	lsls	r2, r2, #4
 80082ca:	430a      	orrs	r2, r1
 80082cc:	4945      	ldr	r1, [pc, #276]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	628b      	str	r3, [r1, #40]	; 0x28
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d6:	3b01      	subs	r3, #1
 80082d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e0:	3b01      	subs	r3, #1
 80082e2:	025b      	lsls	r3, r3, #9
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	431a      	orrs	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ec:	3b01      	subs	r3, #1
 80082ee:	041b      	lsls	r3, r3, #16
 80082f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082f4:	431a      	orrs	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fa:	3b01      	subs	r3, #1
 80082fc:	061b      	lsls	r3, r3, #24
 80082fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008302:	4938      	ldr	r1, [pc, #224]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 8008304:	4313      	orrs	r3, r2
 8008306:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008308:	4b36      	ldr	r3, [pc, #216]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	4a35      	ldr	r2, [pc, #212]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 800830e:	f023 0301 	bic.w	r3, r3, #1
 8008312:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008314:	4b33      	ldr	r3, [pc, #204]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 8008316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008318:	4b34      	ldr	r3, [pc, #208]	; (80083ec <HAL_RCC_OscConfig+0x6cc>)
 800831a:	4013      	ands	r3, r2
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008320:	00d2      	lsls	r2, r2, #3
 8008322:	4930      	ldr	r1, [pc, #192]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 8008324:	4313      	orrs	r3, r2
 8008326:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008328:	4b2e      	ldr	r3, [pc, #184]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	f023 020c 	bic.w	r2, r3, #12
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	492b      	ldr	r1, [pc, #172]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 8008336:	4313      	orrs	r3, r2
 8008338:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800833a:	4b2a      	ldr	r3, [pc, #168]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 800833c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833e:	f023 0202 	bic.w	r2, r3, #2
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008346:	4927      	ldr	r1, [pc, #156]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 8008348:	4313      	orrs	r3, r2
 800834a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800834c:	4b25      	ldr	r3, [pc, #148]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	4a24      	ldr	r2, [pc, #144]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 8008352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008358:	4b22      	ldr	r3, [pc, #136]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	4a21      	ldr	r2, [pc, #132]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 800835e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008362:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008364:	4b1f      	ldr	r3, [pc, #124]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 8008366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008368:	4a1e      	ldr	r2, [pc, #120]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 800836a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800836e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008370:	4b1c      	ldr	r3, [pc, #112]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 8008372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008374:	4a1b      	ldr	r2, [pc, #108]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 8008376:	f043 0301 	orr.w	r3, r3, #1
 800837a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800837c:	4b19      	ldr	r3, [pc, #100]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a18      	ldr	r2, [pc, #96]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 8008382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008388:	f7fc fb78 	bl	8004a7c <HAL_GetTick>
 800838c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800838e:	e008      	b.n	80083a2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008390:	f7fc fb74 	bl	8004a7c <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b02      	cmp	r3, #2
 800839c:	d901      	bls.n	80083a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e065      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083a2:	4b10      	ldr	r3, [pc, #64]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0f0      	beq.n	8008390 <HAL_RCC_OscConfig+0x670>
 80083ae:	e05d      	b.n	800846c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083b0:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a0b      	ldr	r2, [pc, #44]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 80083b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083bc:	f7fc fb5e 	bl	8004a7c <HAL_GetTick>
 80083c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083c2:	e008      	b.n	80083d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083c4:	f7fc fb5a 	bl	8004a7c <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d901      	bls.n	80083d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e04b      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083d6:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <HAL_RCC_OscConfig+0x6c4>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1f0      	bne.n	80083c4 <HAL_RCC_OscConfig+0x6a4>
 80083e2:	e043      	b.n	800846c <HAL_RCC_OscConfig+0x74c>
 80083e4:	58024400 	.word	0x58024400
 80083e8:	fffffc0c 	.word	0xfffffc0c
 80083ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80083f0:	4b21      	ldr	r3, [pc, #132]	; (8008478 <HAL_RCC_OscConfig+0x758>)
 80083f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80083f6:	4b20      	ldr	r3, [pc, #128]	; (8008478 <HAL_RCC_OscConfig+0x758>)
 80083f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	2b01      	cmp	r3, #1
 8008402:	d031      	beq.n	8008468 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	f003 0203 	and.w	r2, r3, #3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800840e:	429a      	cmp	r2, r3
 8008410:	d12a      	bne.n	8008468 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	091b      	lsrs	r3, r3, #4
 8008416:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800841e:	429a      	cmp	r2, r3
 8008420:	d122      	bne.n	8008468 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800842e:	429a      	cmp	r2, r3
 8008430:	d11a      	bne.n	8008468 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	0a5b      	lsrs	r3, r3, #9
 8008436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008440:	429a      	cmp	r2, r3
 8008442:	d111      	bne.n	8008468 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	0c1b      	lsrs	r3, r3, #16
 8008448:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008452:	429a      	cmp	r2, r3
 8008454:	d108      	bne.n	8008468 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	0e1b      	lsrs	r3, r3, #24
 800845a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008462:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008464:	429a      	cmp	r2, r3
 8008466:	d001      	beq.n	800846c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e000      	b.n	800846e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3730      	adds	r7, #48	; 0x30
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	58024400 	.word	0x58024400

0800847c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e19c      	b.n	80087ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008490:	4b8a      	ldr	r3, [pc, #552]	; (80086bc <HAL_RCC_ClockConfig+0x240>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 030f 	and.w	r3, r3, #15
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d910      	bls.n	80084c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800849e:	4b87      	ldr	r3, [pc, #540]	; (80086bc <HAL_RCC_ClockConfig+0x240>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f023 020f 	bic.w	r2, r3, #15
 80084a6:	4985      	ldr	r1, [pc, #532]	; (80086bc <HAL_RCC_ClockConfig+0x240>)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ae:	4b83      	ldr	r3, [pc, #524]	; (80086bc <HAL_RCC_ClockConfig+0x240>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 030f 	and.w	r3, r3, #15
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d001      	beq.n	80084c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e184      	b.n	80087ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d010      	beq.n	80084ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	691a      	ldr	r2, [r3, #16]
 80084d0:	4b7b      	ldr	r3, [pc, #492]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084d8:	429a      	cmp	r2, r3
 80084da:	d908      	bls.n	80084ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084dc:	4b78      	ldr	r3, [pc, #480]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	4975      	ldr	r1, [pc, #468]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0308 	and.w	r3, r3, #8
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d010      	beq.n	800851c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	695a      	ldr	r2, [r3, #20]
 80084fe:	4b70      	ldr	r3, [pc, #448]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 8008500:	69db      	ldr	r3, [r3, #28]
 8008502:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008506:	429a      	cmp	r2, r3
 8008508:	d908      	bls.n	800851c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800850a:	4b6d      	ldr	r3, [pc, #436]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	496a      	ldr	r1, [pc, #424]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 8008518:	4313      	orrs	r3, r2
 800851a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0310 	and.w	r3, r3, #16
 8008524:	2b00      	cmp	r3, #0
 8008526:	d010      	beq.n	800854a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	699a      	ldr	r2, [r3, #24]
 800852c:	4b64      	ldr	r3, [pc, #400]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008534:	429a      	cmp	r2, r3
 8008536:	d908      	bls.n	800854a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008538:	4b61      	ldr	r3, [pc, #388]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	495e      	ldr	r1, [pc, #376]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 8008546:	4313      	orrs	r3, r2
 8008548:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0320 	and.w	r3, r3, #32
 8008552:	2b00      	cmp	r3, #0
 8008554:	d010      	beq.n	8008578 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	69da      	ldr	r2, [r3, #28]
 800855a:	4b59      	ldr	r3, [pc, #356]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008562:	429a      	cmp	r2, r3
 8008564:	d908      	bls.n	8008578 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008566:	4b56      	ldr	r3, [pc, #344]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	4953      	ldr	r1, [pc, #332]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 8008574:	4313      	orrs	r3, r2
 8008576:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d010      	beq.n	80085a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	4b4d      	ldr	r3, [pc, #308]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	f003 030f 	and.w	r3, r3, #15
 8008590:	429a      	cmp	r2, r3
 8008592:	d908      	bls.n	80085a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008594:	4b4a      	ldr	r3, [pc, #296]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	f023 020f 	bic.w	r2, r3, #15
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	4947      	ldr	r1, [pc, #284]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d055      	beq.n	800865e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80085b2:	4b43      	ldr	r3, [pc, #268]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	4940      	ldr	r1, [pc, #256]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d107      	bne.n	80085dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085cc:	4b3c      	ldr	r3, [pc, #240]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d121      	bne.n	800861c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e0f6      	b.n	80087ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d107      	bne.n	80085f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085e4:	4b36      	ldr	r3, [pc, #216]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d115      	bne.n	800861c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e0ea      	b.n	80087ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d107      	bne.n	800860c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085fc:	4b30      	ldr	r3, [pc, #192]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008604:	2b00      	cmp	r3, #0
 8008606:	d109      	bne.n	800861c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e0de      	b.n	80087ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800860c:	4b2c      	ldr	r3, [pc, #176]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e0d6      	b.n	80087ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800861c:	4b28      	ldr	r3, [pc, #160]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	f023 0207 	bic.w	r2, r3, #7
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	4925      	ldr	r1, [pc, #148]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 800862a:	4313      	orrs	r3, r2
 800862c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800862e:	f7fc fa25 	bl	8004a7c <HAL_GetTick>
 8008632:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008634:	e00a      	b.n	800864c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008636:	f7fc fa21 	bl	8004a7c <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	f241 3288 	movw	r2, #5000	; 0x1388
 8008644:	4293      	cmp	r3, r2
 8008646:	d901      	bls.n	800864c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e0be      	b.n	80087ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800864c:	4b1c      	ldr	r3, [pc, #112]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	00db      	lsls	r3, r3, #3
 800865a:	429a      	cmp	r2, r3
 800865c:	d1eb      	bne.n	8008636 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	2b00      	cmp	r3, #0
 8008668:	d010      	beq.n	800868c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	429a      	cmp	r2, r3
 8008678:	d208      	bcs.n	800868c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800867a:	4b11      	ldr	r3, [pc, #68]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	f023 020f 	bic.w	r2, r3, #15
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	490e      	ldr	r1, [pc, #56]	; (80086c0 <HAL_RCC_ClockConfig+0x244>)
 8008688:	4313      	orrs	r3, r2
 800868a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800868c:	4b0b      	ldr	r3, [pc, #44]	; (80086bc <HAL_RCC_ClockConfig+0x240>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 030f 	and.w	r3, r3, #15
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d214      	bcs.n	80086c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800869a:	4b08      	ldr	r3, [pc, #32]	; (80086bc <HAL_RCC_ClockConfig+0x240>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f023 020f 	bic.w	r2, r3, #15
 80086a2:	4906      	ldr	r1, [pc, #24]	; (80086bc <HAL_RCC_ClockConfig+0x240>)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086aa:	4b04      	ldr	r3, [pc, #16]	; (80086bc <HAL_RCC_ClockConfig+0x240>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 030f 	and.w	r3, r3, #15
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d005      	beq.n	80086c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e086      	b.n	80087ca <HAL_RCC_ClockConfig+0x34e>
 80086bc:	52002000 	.word	0x52002000
 80086c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0304 	and.w	r3, r3, #4
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d010      	beq.n	80086f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	691a      	ldr	r2, [r3, #16]
 80086d4:	4b3f      	ldr	r3, [pc, #252]	; (80087d4 <HAL_RCC_ClockConfig+0x358>)
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086dc:	429a      	cmp	r2, r3
 80086de:	d208      	bcs.n	80086f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80086e0:	4b3c      	ldr	r3, [pc, #240]	; (80087d4 <HAL_RCC_ClockConfig+0x358>)
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	4939      	ldr	r1, [pc, #228]	; (80087d4 <HAL_RCC_ClockConfig+0x358>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0308 	and.w	r3, r3, #8
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d010      	beq.n	8008720 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	695a      	ldr	r2, [r3, #20]
 8008702:	4b34      	ldr	r3, [pc, #208]	; (80087d4 <HAL_RCC_ClockConfig+0x358>)
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800870a:	429a      	cmp	r2, r3
 800870c:	d208      	bcs.n	8008720 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800870e:	4b31      	ldr	r3, [pc, #196]	; (80087d4 <HAL_RCC_ClockConfig+0x358>)
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	492e      	ldr	r1, [pc, #184]	; (80087d4 <HAL_RCC_ClockConfig+0x358>)
 800871c:	4313      	orrs	r3, r2
 800871e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0310 	and.w	r3, r3, #16
 8008728:	2b00      	cmp	r3, #0
 800872a:	d010      	beq.n	800874e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	699a      	ldr	r2, [r3, #24]
 8008730:	4b28      	ldr	r3, [pc, #160]	; (80087d4 <HAL_RCC_ClockConfig+0x358>)
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008738:	429a      	cmp	r2, r3
 800873a:	d208      	bcs.n	800874e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800873c:	4b25      	ldr	r3, [pc, #148]	; (80087d4 <HAL_RCC_ClockConfig+0x358>)
 800873e:	69db      	ldr	r3, [r3, #28]
 8008740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	4922      	ldr	r1, [pc, #136]	; (80087d4 <HAL_RCC_ClockConfig+0x358>)
 800874a:	4313      	orrs	r3, r2
 800874c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0320 	and.w	r3, r3, #32
 8008756:	2b00      	cmp	r3, #0
 8008758:	d010      	beq.n	800877c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	69da      	ldr	r2, [r3, #28]
 800875e:	4b1d      	ldr	r3, [pc, #116]	; (80087d4 <HAL_RCC_ClockConfig+0x358>)
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008766:	429a      	cmp	r2, r3
 8008768:	d208      	bcs.n	800877c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800876a:	4b1a      	ldr	r3, [pc, #104]	; (80087d4 <HAL_RCC_ClockConfig+0x358>)
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	4917      	ldr	r1, [pc, #92]	; (80087d4 <HAL_RCC_ClockConfig+0x358>)
 8008778:	4313      	orrs	r3, r2
 800877a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800877c:	f000 f834 	bl	80087e8 <HAL_RCC_GetSysClockFreq>
 8008780:	4602      	mov	r2, r0
 8008782:	4b14      	ldr	r3, [pc, #80]	; (80087d4 <HAL_RCC_ClockConfig+0x358>)
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	0a1b      	lsrs	r3, r3, #8
 8008788:	f003 030f 	and.w	r3, r3, #15
 800878c:	4912      	ldr	r1, [pc, #72]	; (80087d8 <HAL_RCC_ClockConfig+0x35c>)
 800878e:	5ccb      	ldrb	r3, [r1, r3]
 8008790:	f003 031f 	and.w	r3, r3, #31
 8008794:	fa22 f303 	lsr.w	r3, r2, r3
 8008798:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800879a:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <HAL_RCC_ClockConfig+0x358>)
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	4a0d      	ldr	r2, [pc, #52]	; (80087d8 <HAL_RCC_ClockConfig+0x35c>)
 80087a4:	5cd3      	ldrb	r3, [r2, r3]
 80087a6:	f003 031f 	and.w	r3, r3, #31
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	fa22 f303 	lsr.w	r3, r2, r3
 80087b0:	4a0a      	ldr	r2, [pc, #40]	; (80087dc <HAL_RCC_ClockConfig+0x360>)
 80087b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80087b4:	4a0a      	ldr	r2, [pc, #40]	; (80087e0 <HAL_RCC_ClockConfig+0x364>)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80087ba:	4b0a      	ldr	r3, [pc, #40]	; (80087e4 <HAL_RCC_ClockConfig+0x368>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fc f912 	bl	80049e8 <HAL_InitTick>
 80087c4:	4603      	mov	r3, r0
 80087c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	58024400 	.word	0x58024400
 80087d8:	0800e3c4 	.word	0x0800e3c4
 80087dc:	24000004 	.word	0x24000004
 80087e0:	24000000 	.word	0x24000000
 80087e4:	24000008 	.word	0x24000008

080087e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b089      	sub	sp, #36	; 0x24
 80087ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087ee:	4bb3      	ldr	r3, [pc, #716]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087f6:	2b18      	cmp	r3, #24
 80087f8:	f200 8155 	bhi.w	8008aa6 <HAL_RCC_GetSysClockFreq+0x2be>
 80087fc:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <HAL_RCC_GetSysClockFreq+0x1c>)
 80087fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008802:	bf00      	nop
 8008804:	08008869 	.word	0x08008869
 8008808:	08008aa7 	.word	0x08008aa7
 800880c:	08008aa7 	.word	0x08008aa7
 8008810:	08008aa7 	.word	0x08008aa7
 8008814:	08008aa7 	.word	0x08008aa7
 8008818:	08008aa7 	.word	0x08008aa7
 800881c:	08008aa7 	.word	0x08008aa7
 8008820:	08008aa7 	.word	0x08008aa7
 8008824:	0800888f 	.word	0x0800888f
 8008828:	08008aa7 	.word	0x08008aa7
 800882c:	08008aa7 	.word	0x08008aa7
 8008830:	08008aa7 	.word	0x08008aa7
 8008834:	08008aa7 	.word	0x08008aa7
 8008838:	08008aa7 	.word	0x08008aa7
 800883c:	08008aa7 	.word	0x08008aa7
 8008840:	08008aa7 	.word	0x08008aa7
 8008844:	08008895 	.word	0x08008895
 8008848:	08008aa7 	.word	0x08008aa7
 800884c:	08008aa7 	.word	0x08008aa7
 8008850:	08008aa7 	.word	0x08008aa7
 8008854:	08008aa7 	.word	0x08008aa7
 8008858:	08008aa7 	.word	0x08008aa7
 800885c:	08008aa7 	.word	0x08008aa7
 8008860:	08008aa7 	.word	0x08008aa7
 8008864:	0800889b 	.word	0x0800889b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008868:	4b94      	ldr	r3, [pc, #592]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0320 	and.w	r3, r3, #32
 8008870:	2b00      	cmp	r3, #0
 8008872:	d009      	beq.n	8008888 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008874:	4b91      	ldr	r3, [pc, #580]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	08db      	lsrs	r3, r3, #3
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	4a90      	ldr	r2, [pc, #576]	; (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008880:	fa22 f303 	lsr.w	r3, r2, r3
 8008884:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008886:	e111      	b.n	8008aac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008888:	4b8d      	ldr	r3, [pc, #564]	; (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800888a:	61bb      	str	r3, [r7, #24]
    break;
 800888c:	e10e      	b.n	8008aac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800888e:	4b8d      	ldr	r3, [pc, #564]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008890:	61bb      	str	r3, [r7, #24]
    break;
 8008892:	e10b      	b.n	8008aac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008894:	4b8c      	ldr	r3, [pc, #560]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008896:	61bb      	str	r3, [r7, #24]
    break;
 8008898:	e108      	b.n	8008aac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800889a:	4b88      	ldr	r3, [pc, #544]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800889c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80088a4:	4b85      	ldr	r3, [pc, #532]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	091b      	lsrs	r3, r3, #4
 80088aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80088b0:	4b82      	ldr	r3, [pc, #520]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80088ba:	4b80      	ldr	r3, [pc, #512]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088be:	08db      	lsrs	r3, r3, #3
 80088c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	fb02 f303 	mul.w	r3, r2, r3
 80088ca:	ee07 3a90 	vmov	s15, r3
 80088ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 80e1 	beq.w	8008aa0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	f000 8083 	beq.w	80089ec <HAL_RCC_GetSysClockFreq+0x204>
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	f200 80a1 	bhi.w	8008a30 <HAL_RCC_GetSysClockFreq+0x248>
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d003      	beq.n	80088fc <HAL_RCC_GetSysClockFreq+0x114>
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d056      	beq.n	80089a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80088fa:	e099      	b.n	8008a30 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088fc:	4b6f      	ldr	r3, [pc, #444]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0320 	and.w	r3, r3, #32
 8008904:	2b00      	cmp	r3, #0
 8008906:	d02d      	beq.n	8008964 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008908:	4b6c      	ldr	r3, [pc, #432]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	08db      	lsrs	r3, r3, #3
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	4a6b      	ldr	r2, [pc, #428]	; (8008ac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008914:	fa22 f303 	lsr.w	r3, r2, r3
 8008918:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	ee07 3a90 	vmov	s15, r3
 8008920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008932:	4b62      	ldr	r3, [pc, #392]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008942:	ed97 6a02 	vldr	s12, [r7, #8]
 8008946:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008acc <HAL_RCC_GetSysClockFreq+0x2e4>
 800894a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008962:	e087      	b.n	8008a74 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008ad0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008976:	4b51      	ldr	r3, [pc, #324]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008986:	ed97 6a02 	vldr	s12, [r7, #8]
 800898a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008acc <HAL_RCC_GetSysClockFreq+0x2e4>
 800898e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800899a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089a6:	e065      	b.n	8008a74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008ad4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80089b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ba:	4b40      	ldr	r3, [pc, #256]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80089ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008acc <HAL_RCC_GetSysClockFreq+0x2e4>
 80089d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089ea:	e043      	b.n	8008a74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008ad8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80089fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fe:	4b2f      	ldr	r3, [pc, #188]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008acc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a2e:	e021      	b.n	8008a74 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008ad4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	4b1e      	ldr	r3, [pc, #120]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008acc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a72:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008a74:	4b11      	ldr	r3, [pc, #68]	; (8008abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a78:	0a5b      	lsrs	r3, r3, #9
 8008a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a7e:	3301      	adds	r3, #1
 8008a80:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	ee07 3a90 	vmov	s15, r3
 8008a88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a98:	ee17 3a90 	vmov	r3, s15
 8008a9c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008a9e:	e005      	b.n	8008aac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	61bb      	str	r3, [r7, #24]
    break;
 8008aa4:	e002      	b.n	8008aac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008aa6:	4b07      	ldr	r3, [pc, #28]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008aa8:	61bb      	str	r3, [r7, #24]
    break;
 8008aaa:	bf00      	nop
  }

  return sysclockfreq;
 8008aac:	69bb      	ldr	r3, [r7, #24]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3724      	adds	r7, #36	; 0x24
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	58024400 	.word	0x58024400
 8008ac0:	03d09000 	.word	0x03d09000
 8008ac4:	003d0900 	.word	0x003d0900
 8008ac8:	007a1200 	.word	0x007a1200
 8008acc:	46000000 	.word	0x46000000
 8008ad0:	4c742400 	.word	0x4c742400
 8008ad4:	4a742400 	.word	0x4a742400
 8008ad8:	4af42400 	.word	0x4af42400

08008adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ae2:	f7ff fe81 	bl	80087e8 <HAL_RCC_GetSysClockFreq>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	4b10      	ldr	r3, [pc, #64]	; (8008b2c <HAL_RCC_GetHCLKFreq+0x50>)
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	0a1b      	lsrs	r3, r3, #8
 8008aee:	f003 030f 	and.w	r3, r3, #15
 8008af2:	490f      	ldr	r1, [pc, #60]	; (8008b30 <HAL_RCC_GetHCLKFreq+0x54>)
 8008af4:	5ccb      	ldrb	r3, [r1, r3]
 8008af6:	f003 031f 	and.w	r3, r3, #31
 8008afa:	fa22 f303 	lsr.w	r3, r2, r3
 8008afe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b00:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <HAL_RCC_GetHCLKFreq+0x50>)
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	f003 030f 	and.w	r3, r3, #15
 8008b08:	4a09      	ldr	r2, [pc, #36]	; (8008b30 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b0a:	5cd3      	ldrb	r3, [r2, r3]
 8008b0c:	f003 031f 	and.w	r3, r3, #31
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	fa22 f303 	lsr.w	r3, r2, r3
 8008b16:	4a07      	ldr	r2, [pc, #28]	; (8008b34 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b1a:	4a07      	ldr	r2, [pc, #28]	; (8008b38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008b20:	4b04      	ldr	r3, [pc, #16]	; (8008b34 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b22:	681b      	ldr	r3, [r3, #0]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	58024400 	.word	0x58024400
 8008b30:	0800e3c4 	.word	0x0800e3c4
 8008b34:	24000004 	.word	0x24000004
 8008b38:	24000000 	.word	0x24000000

08008b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b40:	f7ff ffcc 	bl	8008adc <HAL_RCC_GetHCLKFreq>
 8008b44:	4602      	mov	r2, r0
 8008b46:	4b06      	ldr	r3, [pc, #24]	; (8008b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	091b      	lsrs	r3, r3, #4
 8008b4c:	f003 0307 	and.w	r3, r3, #7
 8008b50:	4904      	ldr	r1, [pc, #16]	; (8008b64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b52:	5ccb      	ldrb	r3, [r1, r3]
 8008b54:	f003 031f 	and.w	r3, r3, #31
 8008b58:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	58024400 	.word	0x58024400
 8008b64:	0800e3c4 	.word	0x0800e3c4

08008b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008b6c:	f7ff ffb6 	bl	8008adc <HAL_RCC_GetHCLKFreq>
 8008b70:	4602      	mov	r2, r0
 8008b72:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b74:	69db      	ldr	r3, [r3, #28]
 8008b76:	0a1b      	lsrs	r3, r3, #8
 8008b78:	f003 0307 	and.w	r3, r3, #7
 8008b7c:	4904      	ldr	r1, [pc, #16]	; (8008b90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b7e:	5ccb      	ldrb	r3, [r1, r3]
 8008b80:	f003 031f 	and.w	r3, r3, #31
 8008b84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	58024400 	.word	0x58024400
 8008b90:	0800e3c4 	.word	0x0800e3c4

08008b94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d03f      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bb8:	d02a      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008bba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bbe:	d824      	bhi.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008bc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bc4:	d018      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bca:	d81e      	bhi.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d003      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bd4:	d007      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008bd6:	e018      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bd8:	4ba4      	ldr	r3, [pc, #656]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	4aa3      	ldr	r2, [pc, #652]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008be2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008be4:	e015      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	3304      	adds	r3, #4
 8008bea:	2102      	movs	r1, #2
 8008bec:	4618      	mov	r0, r3
 8008bee:	f001 f989 	bl	8009f04 <RCCEx_PLL2_Config>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008bf6:	e00c      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3324      	adds	r3, #36	; 0x24
 8008bfc:	2102      	movs	r1, #2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f001 fa32 	bl	800a068 <RCCEx_PLL3_Config>
 8008c04:	4603      	mov	r3, r0
 8008c06:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c08:	e003      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c0e:	e000      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008c10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d109      	bne.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008c18:	4b94      	ldr	r3, [pc, #592]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c24:	4991      	ldr	r1, [pc, #580]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c26:	4313      	orrs	r3, r2
 8008c28:	650b      	str	r3, [r1, #80]	; 0x50
 8008c2a:	e001      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
 8008c2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d03d      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d826      	bhi.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008c44:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4a:	bf00      	nop
 8008c4c:	08008c61 	.word	0x08008c61
 8008c50:	08008c6f 	.word	0x08008c6f
 8008c54:	08008c81 	.word	0x08008c81
 8008c58:	08008c99 	.word	0x08008c99
 8008c5c:	08008c99 	.word	0x08008c99
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c60:	4b82      	ldr	r3, [pc, #520]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c64:	4a81      	ldr	r2, [pc, #516]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c6c:	e015      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	3304      	adds	r3, #4
 8008c72:	2100      	movs	r1, #0
 8008c74:	4618      	mov	r0, r3
 8008c76:	f001 f945 	bl	8009f04 <RCCEx_PLL2_Config>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c7e:	e00c      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3324      	adds	r3, #36	; 0x24
 8008c84:	2100      	movs	r1, #0
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 f9ee 	bl	800a068 <RCCEx_PLL3_Config>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c90:	e003      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	75fb      	strb	r3, [r7, #23]
      break;
 8008c96:	e000      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d109      	bne.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ca0:	4b72      	ldr	r3, [pc, #456]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca4:	f023 0207 	bic.w	r2, r3, #7
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cac:	496f      	ldr	r1, [pc, #444]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	650b      	str	r3, [r1, #80]	; 0x50
 8008cb2:	e001      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d051      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008cca:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008cce:	d036      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008cd0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008cd4:	d830      	bhi.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008cd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cda:	d032      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008cdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ce0:	d82a      	bhi.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008ce2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ce6:	d02e      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008ce8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cec:	d824      	bhi.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cf2:	d018      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cf8:	d81e      	bhi.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d003      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008cfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d02:	d007      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008d04:	e018      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d06:	4b59      	ldr	r3, [pc, #356]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	4a58      	ldr	r2, [pc, #352]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d12:	e019      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3304      	adds	r3, #4
 8008d18:	2100      	movs	r1, #0
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 f8f2 	bl	8009f04 <RCCEx_PLL2_Config>
 8008d20:	4603      	mov	r3, r0
 8008d22:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008d24:	e010      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	3324      	adds	r3, #36	; 0x24
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 f99b 	bl	800a068 <RCCEx_PLL3_Config>
 8008d32:	4603      	mov	r3, r0
 8008d34:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d36:	e007      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d3c:	e004      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008d3e:	bf00      	nop
 8008d40:	e002      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008d42:	bf00      	nop
 8008d44:	e000      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10a      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d4e:	4b47      	ldr	r3, [pc, #284]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d52:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d5c:	4943      	ldr	r1, [pc, #268]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	658b      	str	r3, [r1, #88]	; 0x58
 8008d62:	e001      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
 8008d66:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d051      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d7a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008d7e:	d036      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008d80:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008d84:	d830      	bhi.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008d86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d8a:	d032      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008d8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d90:	d82a      	bhi.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008d92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d96:	d02e      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008d98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d9c:	d824      	bhi.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008d9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008da2:	d018      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008da4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008da8:	d81e      	bhi.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008dae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008db2:	d007      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008db4:	e018      	b.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008db6:	4b2d      	ldr	r3, [pc, #180]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dba:	4a2c      	ldr	r2, [pc, #176]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dc2:	e019      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	2100      	movs	r1, #0
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f001 f89a 	bl	8009f04 <RCCEx_PLL2_Config>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008dd4:	e010      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3324      	adds	r3, #36	; 0x24
 8008dda:	2100      	movs	r1, #0
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f001 f943 	bl	800a068 <RCCEx_PLL3_Config>
 8008de2:	4603      	mov	r3, r0
 8008de4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008de6:	e007      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	75fb      	strb	r3, [r7, #23]
      break;
 8008dec:	e004      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008dee:	bf00      	nop
 8008df0:	e002      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008df2:	bf00      	nop
 8008df4:	e000      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008df8:	7dfb      	ldrb	r3, [r7, #23]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008dfe:	4b1b      	ldr	r3, [pc, #108]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e02:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e0c:	4917      	ldr	r1, [pc, #92]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	658b      	str	r3, [r1, #88]	; 0x58
 8008e12:	e001      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
 8008e16:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d035      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e28:	2b30      	cmp	r3, #48	; 0x30
 8008e2a:	d01c      	beq.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e2c:	2b30      	cmp	r3, #48	; 0x30
 8008e2e:	d817      	bhi.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008e30:	2b20      	cmp	r3, #32
 8008e32:	d00c      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008e34:	2b20      	cmp	r3, #32
 8008e36:	d813      	bhi.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d019      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008e3c:	2b10      	cmp	r3, #16
 8008e3e:	d10f      	bne.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e40:	4b0a      	ldr	r3, [pc, #40]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	4a09      	ldr	r2, [pc, #36]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008e4c:	e011      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3304      	adds	r3, #4
 8008e52:	2102      	movs	r1, #2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f001 f855 	bl	8009f04 <RCCEx_PLL2_Config>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008e5e:	e008      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	75fb      	strb	r3, [r7, #23]
      break;
 8008e64:	e005      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008e66:	bf00      	nop
 8008e68:	e003      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008e6a:	bf00      	nop
 8008e6c:	58024400 	.word	0x58024400
      break;
 8008e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d109      	bne.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008e78:	4ba3      	ldr	r3, [pc, #652]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e84:	49a0      	ldr	r1, [pc, #640]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008e8a:	e001      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e8c:	7dfb      	ldrb	r3, [r7, #23]
 8008e8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d047      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ea4:	d030      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008eaa:	d82a      	bhi.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008eac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008eb0:	d02c      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008eb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008eb6:	d824      	bhi.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ebc:	d018      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ec2:	d81e      	bhi.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d003      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ecc:	d007      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008ece:	e018      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ed0:	4b8d      	ldr	r3, [pc, #564]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	4a8c      	ldr	r2, [pc, #560]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008edc:	e017      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f001 f80d 	bl	8009f04 <RCCEx_PLL2_Config>
 8008eea:	4603      	mov	r3, r0
 8008eec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008eee:	e00e      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3324      	adds	r3, #36	; 0x24
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f001 f8b6 	bl	800a068 <RCCEx_PLL3_Config>
 8008efc:	4603      	mov	r3, r0
 8008efe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008f00:	e005      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	75fb      	strb	r3, [r7, #23]
      break;
 8008f06:	e002      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008f08:	bf00      	nop
 8008f0a:	e000      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d109      	bne.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008f14:	4b7c      	ldr	r3, [pc, #496]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f18:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f20:	4979      	ldr	r1, [pc, #484]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f22:	4313      	orrs	r3, r2
 8008f24:	650b      	str	r3, [r1, #80]	; 0x50
 8008f26:	e001      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d049      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f40:	d02e      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008f42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f46:	d828      	bhi.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008f48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f4c:	d02a      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008f4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f52:	d822      	bhi.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008f54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f58:	d026      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008f5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f5e:	d81c      	bhi.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f64:	d010      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f6a:	d816      	bhi.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d01d      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f74:	d111      	bne.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3304      	adds	r3, #4
 8008f7a:	2101      	movs	r1, #1
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 ffc1 	bl	8009f04 <RCCEx_PLL2_Config>
 8008f82:	4603      	mov	r3, r0
 8008f84:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f86:	e012      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3324      	adds	r3, #36	; 0x24
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f001 f86a 	bl	800a068 <RCCEx_PLL3_Config>
 8008f94:	4603      	mov	r3, r0
 8008f96:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f98:	e009      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f9e:	e006      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008fa0:	bf00      	nop
 8008fa2:	e004      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008fa4:	bf00      	nop
 8008fa6:	e002      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008fa8:	bf00      	nop
 8008faa:	e000      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d109      	bne.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008fb4:	4b54      	ldr	r3, [pc, #336]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc0:	4951      	ldr	r1, [pc, #324]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	650b      	str	r3, [r1, #80]	; 0x50
 8008fc6:	e001      	b.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d04b      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fe2:	d02e      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fe8:	d828      	bhi.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fee:	d02a      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ff4:	d822      	bhi.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008ff6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ffa:	d026      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008ffc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009000:	d81c      	bhi.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009006:	d010      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800900c:	d816      	bhi.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800900e:	2b00      	cmp	r3, #0
 8009010:	d01d      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009016:	d111      	bne.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	3304      	adds	r3, #4
 800901c:	2101      	movs	r1, #1
 800901e:	4618      	mov	r0, r3
 8009020:	f000 ff70 	bl	8009f04 <RCCEx_PLL2_Config>
 8009024:	4603      	mov	r3, r0
 8009026:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009028:	e012      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	3324      	adds	r3, #36	; 0x24
 800902e:	2101      	movs	r1, #1
 8009030:	4618      	mov	r0, r3
 8009032:	f001 f819 	bl	800a068 <RCCEx_PLL3_Config>
 8009036:	4603      	mov	r3, r0
 8009038:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800903a:	e009      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	75fb      	strb	r3, [r7, #23]
      break;
 8009040:	e006      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009042:	bf00      	nop
 8009044:	e004      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009046:	bf00      	nop
 8009048:	e002      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800904a:	bf00      	nop
 800904c:	e000      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800904e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009050:	7dfb      	ldrb	r3, [r7, #23]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10a      	bne.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009056:	4b2c      	ldr	r3, [pc, #176]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800905a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009064:	4928      	ldr	r1, [pc, #160]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009066:	4313      	orrs	r3, r2
 8009068:	658b      	str	r3, [r1, #88]	; 0x58
 800906a:	e001      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d02f      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009084:	d00e      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800908a:	d814      	bhi.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d015      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009094:	d10f      	bne.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009096:	4b1c      	ldr	r3, [pc, #112]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909a:	4a1b      	ldr	r2, [pc, #108]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800909c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80090a2:	e00c      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3304      	adds	r3, #4
 80090a8:	2101      	movs	r1, #1
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 ff2a 	bl	8009f04 <RCCEx_PLL2_Config>
 80090b0:	4603      	mov	r3, r0
 80090b2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80090b4:	e003      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	75fb      	strb	r3, [r7, #23]
      break;
 80090ba:	e000      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80090bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090be:	7dfb      	ldrb	r3, [r7, #23]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d109      	bne.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80090c4:	4b10      	ldr	r3, [pc, #64]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80090c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090d0:	490d      	ldr	r1, [pc, #52]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80090d2:	4313      	orrs	r3, r2
 80090d4:	650b      	str	r3, [r1, #80]	; 0x50
 80090d6:	e001      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d8:	7dfb      	ldrb	r3, [r7, #23]
 80090da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d034      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d81d      	bhi.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x598>
 80090f0:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80090f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f6:	bf00      	nop
 80090f8:	08009133 	.word	0x08009133
 80090fc:	0800910d 	.word	0x0800910d
 8009100:	0800911b 	.word	0x0800911b
 8009104:	08009133 	.word	0x08009133
 8009108:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800910c:	4bb1      	ldr	r3, [pc, #708]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800910e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009110:	4ab0      	ldr	r2, [pc, #704]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009118:	e00c      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	3304      	adds	r3, #4
 800911e:	2102      	movs	r1, #2
 8009120:	4618      	mov	r0, r3
 8009122:	f000 feef 	bl	8009f04 <RCCEx_PLL2_Config>
 8009126:	4603      	mov	r3, r0
 8009128:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800912a:	e003      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	75fb      	strb	r3, [r7, #23]
      break;
 8009130:	e000      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009134:	7dfb      	ldrb	r3, [r7, #23]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d109      	bne.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800913a:	4ba6      	ldr	r3, [pc, #664]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800913c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800913e:	f023 0203 	bic.w	r2, r3, #3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009146:	49a3      	ldr	r1, [pc, #652]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009148:	4313      	orrs	r3, r2
 800914a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800914c:	e001      	b.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800914e:	7dfb      	ldrb	r3, [r7, #23]
 8009150:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 8086 	beq.w	800926c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009160:	4b9d      	ldr	r3, [pc, #628]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a9c      	ldr	r2, [pc, #624]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800916a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800916c:	f7fb fc86 	bl	8004a7c <HAL_GetTick>
 8009170:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009172:	e009      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009174:	f7fb fc82 	bl	8004a7c <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	2b64      	cmp	r3, #100	; 0x64
 8009180:	d902      	bls.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	75fb      	strb	r3, [r7, #23]
        break;
 8009186:	e005      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009188:	4b93      	ldr	r3, [pc, #588]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0ef      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009194:	7dfb      	ldrb	r3, [r7, #23]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d166      	bne.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800919a:	4b8e      	ldr	r3, [pc, #568]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800919c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091a4:	4053      	eors	r3, r2
 80091a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d013      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091ae:	4b89      	ldr	r3, [pc, #548]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80091b8:	4b86      	ldr	r3, [pc, #536]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091bc:	4a85      	ldr	r2, [pc, #532]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80091c4:	4b83      	ldr	r3, [pc, #524]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c8:	4a82      	ldr	r2, [pc, #520]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80091d0:	4a80      	ldr	r2, [pc, #512]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091e0:	d115      	bne.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091e2:	f7fb fc4b 	bl	8004a7c <HAL_GetTick>
 80091e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091e8:	e00b      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091ea:	f7fb fc47 	bl	8004a7c <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d902      	bls.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	75fb      	strb	r3, [r7, #23]
            break;
 8009200:	e005      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009202:	4b74      	ldr	r3, [pc, #464]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	2b00      	cmp	r3, #0
 800920c:	d0ed      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800920e:	7dfb      	ldrb	r3, [r7, #23]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d126      	bne.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800921a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800921e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009222:	d10d      	bne.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009224:	4b6b      	ldr	r3, [pc, #428]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009232:	0919      	lsrs	r1, r3, #4
 8009234:	4b69      	ldr	r3, [pc, #420]	; (80093dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009236:	400b      	ands	r3, r1
 8009238:	4966      	ldr	r1, [pc, #408]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800923a:	4313      	orrs	r3, r2
 800923c:	610b      	str	r3, [r1, #16]
 800923e:	e005      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009240:	4b64      	ldr	r3, [pc, #400]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	4a63      	ldr	r2, [pc, #396]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009246:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800924a:	6113      	str	r3, [r2, #16]
 800924c:	4b61      	ldr	r3, [pc, #388]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800924e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800925a:	495e      	ldr	r1, [pc, #376]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800925c:	4313      	orrs	r3, r2
 800925e:	670b      	str	r3, [r1, #112]	; 0x70
 8009260:	e004      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	75bb      	strb	r3, [r7, #22]
 8009266:	e001      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 0301 	and.w	r3, r3, #1
 8009274:	2b00      	cmp	r3, #0
 8009276:	d07e      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800927c:	2b28      	cmp	r3, #40	; 0x28
 800927e:	d867      	bhi.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009280:	a201      	add	r2, pc, #4	; (adr r2, 8009288 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009286:	bf00      	nop
 8009288:	08009357 	.word	0x08009357
 800928c:	08009351 	.word	0x08009351
 8009290:	08009351 	.word	0x08009351
 8009294:	08009351 	.word	0x08009351
 8009298:	08009351 	.word	0x08009351
 800929c:	08009351 	.word	0x08009351
 80092a0:	08009351 	.word	0x08009351
 80092a4:	08009351 	.word	0x08009351
 80092a8:	0800932d 	.word	0x0800932d
 80092ac:	08009351 	.word	0x08009351
 80092b0:	08009351 	.word	0x08009351
 80092b4:	08009351 	.word	0x08009351
 80092b8:	08009351 	.word	0x08009351
 80092bc:	08009351 	.word	0x08009351
 80092c0:	08009351 	.word	0x08009351
 80092c4:	08009351 	.word	0x08009351
 80092c8:	0800933f 	.word	0x0800933f
 80092cc:	08009351 	.word	0x08009351
 80092d0:	08009351 	.word	0x08009351
 80092d4:	08009351 	.word	0x08009351
 80092d8:	08009351 	.word	0x08009351
 80092dc:	08009351 	.word	0x08009351
 80092e0:	08009351 	.word	0x08009351
 80092e4:	08009351 	.word	0x08009351
 80092e8:	08009357 	.word	0x08009357
 80092ec:	08009351 	.word	0x08009351
 80092f0:	08009351 	.word	0x08009351
 80092f4:	08009351 	.word	0x08009351
 80092f8:	08009351 	.word	0x08009351
 80092fc:	08009351 	.word	0x08009351
 8009300:	08009351 	.word	0x08009351
 8009304:	08009351 	.word	0x08009351
 8009308:	08009357 	.word	0x08009357
 800930c:	08009351 	.word	0x08009351
 8009310:	08009351 	.word	0x08009351
 8009314:	08009351 	.word	0x08009351
 8009318:	08009351 	.word	0x08009351
 800931c:	08009351 	.word	0x08009351
 8009320:	08009351 	.word	0x08009351
 8009324:	08009351 	.word	0x08009351
 8009328:	08009357 	.word	0x08009357
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3304      	adds	r3, #4
 8009330:	2101      	movs	r1, #1
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fde6 	bl	8009f04 <RCCEx_PLL2_Config>
 8009338:	4603      	mov	r3, r0
 800933a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800933c:	e00c      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3324      	adds	r3, #36	; 0x24
 8009342:	2101      	movs	r1, #1
 8009344:	4618      	mov	r0, r3
 8009346:	f000 fe8f 	bl	800a068 <RCCEx_PLL3_Config>
 800934a:	4603      	mov	r3, r0
 800934c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800934e:	e003      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	75fb      	strb	r3, [r7, #23]
      break;
 8009354:	e000      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009358:	7dfb      	ldrb	r3, [r7, #23]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d109      	bne.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800935e:	4b1d      	ldr	r3, [pc, #116]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009362:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800936a:	491a      	ldr	r1, [pc, #104]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800936c:	4313      	orrs	r3, r2
 800936e:	654b      	str	r3, [r1, #84]	; 0x54
 8009370:	e001      	b.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 0302 	and.w	r3, r3, #2
 800937e:	2b00      	cmp	r3, #0
 8009380:	d03e      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009386:	2b05      	cmp	r3, #5
 8009388:	d820      	bhi.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x838>
 800938a:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800938c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009390:	080093e1 	.word	0x080093e1
 8009394:	080093a9 	.word	0x080093a9
 8009398:	080093bb 	.word	0x080093bb
 800939c:	080093e1 	.word	0x080093e1
 80093a0:	080093e1 	.word	0x080093e1
 80093a4:	080093e1 	.word	0x080093e1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	3304      	adds	r3, #4
 80093ac:	2101      	movs	r1, #1
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fda8 	bl	8009f04 <RCCEx_PLL2_Config>
 80093b4:	4603      	mov	r3, r0
 80093b6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80093b8:	e013      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	3324      	adds	r3, #36	; 0x24
 80093be:	2101      	movs	r1, #1
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 fe51 	bl	800a068 <RCCEx_PLL3_Config>
 80093c6:	4603      	mov	r3, r0
 80093c8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80093ca:	e00a      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	75fb      	strb	r3, [r7, #23]
      break;
 80093d0:	e007      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80093d2:	bf00      	nop
 80093d4:	58024400 	.word	0x58024400
 80093d8:	58024800 	.word	0x58024800
 80093dc:	00ffffcf 	.word	0x00ffffcf
      break;
 80093e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d109      	bne.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80093e8:	4b9f      	ldr	r3, [pc, #636]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80093ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ec:	f023 0207 	bic.w	r2, r3, #7
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f4:	499c      	ldr	r1, [pc, #624]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	654b      	str	r3, [r1, #84]	; 0x54
 80093fa:	e001      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	2b00      	cmp	r3, #0
 800940a:	d039      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009412:	2b05      	cmp	r3, #5
 8009414:	d820      	bhi.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009416:	a201      	add	r2, pc, #4	; (adr r2, 800941c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941c:	0800945f 	.word	0x0800945f
 8009420:	08009435 	.word	0x08009435
 8009424:	08009447 	.word	0x08009447
 8009428:	0800945f 	.word	0x0800945f
 800942c:	0800945f 	.word	0x0800945f
 8009430:	0800945f 	.word	0x0800945f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	3304      	adds	r3, #4
 8009438:	2101      	movs	r1, #1
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fd62 	bl	8009f04 <RCCEx_PLL2_Config>
 8009440:	4603      	mov	r3, r0
 8009442:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009444:	e00c      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	3324      	adds	r3, #36	; 0x24
 800944a:	2101      	movs	r1, #1
 800944c:	4618      	mov	r0, r3
 800944e:	f000 fe0b 	bl	800a068 <RCCEx_PLL3_Config>
 8009452:	4603      	mov	r3, r0
 8009454:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009456:	e003      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	75fb      	strb	r3, [r7, #23]
      break;
 800945c:	e000      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800945e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009460:	7dfb      	ldrb	r3, [r7, #23]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10a      	bne.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009466:	4b80      	ldr	r3, [pc, #512]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946a:	f023 0207 	bic.w	r2, r3, #7
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009474:	497c      	ldr	r1, [pc, #496]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009476:	4313      	orrs	r3, r2
 8009478:	658b      	str	r3, [r1, #88]	; 0x58
 800947a:	e001      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800947c:	7dfb      	ldrb	r3, [r7, #23]
 800947e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0320 	and.w	r3, r3, #32
 8009488:	2b00      	cmp	r3, #0
 800948a:	d04b      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009492:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009496:	d02e      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800949c:	d828      	bhi.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800949e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a2:	d02a      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x966>
 80094a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a8:	d822      	bhi.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80094aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094ae:	d026      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80094b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094b4:	d81c      	bhi.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80094b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094ba:	d010      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80094bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094c0:	d816      	bhi.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d01d      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80094c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094ca:	d111      	bne.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3304      	adds	r3, #4
 80094d0:	2100      	movs	r1, #0
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 fd16 	bl	8009f04 <RCCEx_PLL2_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80094dc:	e012      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3324      	adds	r3, #36	; 0x24
 80094e2:	2102      	movs	r1, #2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 fdbf 	bl	800a068 <RCCEx_PLL3_Config>
 80094ea:	4603      	mov	r3, r0
 80094ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80094ee:	e009      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	75fb      	strb	r3, [r7, #23]
      break;
 80094f4:	e006      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80094f6:	bf00      	nop
 80094f8:	e004      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80094fa:	bf00      	nop
 80094fc:	e002      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80094fe:	bf00      	nop
 8009500:	e000      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009502:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009504:	7dfb      	ldrb	r3, [r7, #23]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10a      	bne.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800950a:	4b57      	ldr	r3, [pc, #348]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800950c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009518:	4953      	ldr	r1, [pc, #332]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800951a:	4313      	orrs	r3, r2
 800951c:	654b      	str	r3, [r1, #84]	; 0x54
 800951e:	e001      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009520:	7dfb      	ldrb	r3, [r7, #23]
 8009522:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952c:	2b00      	cmp	r3, #0
 800952e:	d04b      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009536:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800953a:	d02e      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800953c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009540:	d828      	bhi.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009546:	d02a      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800954c:	d822      	bhi.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800954e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009552:	d026      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009554:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009558:	d81c      	bhi.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800955a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800955e:	d010      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009564:	d816      	bhi.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009566:	2b00      	cmp	r3, #0
 8009568:	d01d      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800956a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800956e:	d111      	bne.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	3304      	adds	r3, #4
 8009574:	2100      	movs	r1, #0
 8009576:	4618      	mov	r0, r3
 8009578:	f000 fcc4 	bl	8009f04 <RCCEx_PLL2_Config>
 800957c:	4603      	mov	r3, r0
 800957e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009580:	e012      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3324      	adds	r3, #36	; 0x24
 8009586:	2102      	movs	r1, #2
 8009588:	4618      	mov	r0, r3
 800958a:	f000 fd6d 	bl	800a068 <RCCEx_PLL3_Config>
 800958e:	4603      	mov	r3, r0
 8009590:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009592:	e009      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	75fb      	strb	r3, [r7, #23]
      break;
 8009598:	e006      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800959a:	bf00      	nop
 800959c:	e004      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800959e:	bf00      	nop
 80095a0:	e002      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80095a2:	bf00      	nop
 80095a4:	e000      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80095a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10a      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80095ae:	4b2e      	ldr	r3, [pc, #184]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80095b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095bc:	492a      	ldr	r1, [pc, #168]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80095be:	4313      	orrs	r3, r2
 80095c0:	658b      	str	r3, [r1, #88]	; 0x58
 80095c2:	e001      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
 80095c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d04d      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80095de:	d02e      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80095e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80095e4:	d828      	bhi.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80095e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ea:	d02a      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80095ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095f0:	d822      	bhi.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80095f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095f6:	d026      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80095f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095fc:	d81c      	bhi.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80095fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009602:	d010      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009608:	d816      	bhi.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800960a:	2b00      	cmp	r3, #0
 800960c:	d01d      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800960e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009612:	d111      	bne.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	3304      	adds	r3, #4
 8009618:	2100      	movs	r1, #0
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fc72 	bl	8009f04 <RCCEx_PLL2_Config>
 8009620:	4603      	mov	r3, r0
 8009622:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009624:	e012      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3324      	adds	r3, #36	; 0x24
 800962a:	2102      	movs	r1, #2
 800962c:	4618      	mov	r0, r3
 800962e:	f000 fd1b 	bl	800a068 <RCCEx_PLL3_Config>
 8009632:	4603      	mov	r3, r0
 8009634:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009636:	e009      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	75fb      	strb	r3, [r7, #23]
      break;
 800963c:	e006      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800963e:	bf00      	nop
 8009640:	e004      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009642:	bf00      	nop
 8009644:	e002      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009646:	bf00      	nop
 8009648:	e000      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800964a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800964c:	7dfb      	ldrb	r3, [r7, #23]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10c      	bne.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009652:	4b05      	ldr	r3, [pc, #20]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009660:	4901      	ldr	r1, [pc, #4]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009662:	4313      	orrs	r3, r2
 8009664:	658b      	str	r3, [r1, #88]	; 0x58
 8009666:	e003      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009668:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966c:	7dfb      	ldrb	r3, [r7, #23]
 800966e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0308 	and.w	r3, r3, #8
 8009678:	2b00      	cmp	r3, #0
 800967a:	d018      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009684:	d10a      	bne.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	3324      	adds	r3, #36	; 0x24
 800968a:	2102      	movs	r1, #2
 800968c:	4618      	mov	r0, r3
 800968e:	f000 fceb 	bl	800a068 <RCCEx_PLL3_Config>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800969c:	4b8a      	ldr	r3, [pc, #552]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800969e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096a8:	4987      	ldr	r1, [pc, #540]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096aa:	4313      	orrs	r3, r2
 80096ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 0310 	and.w	r3, r3, #16
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d01a      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096c4:	d10a      	bne.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	3324      	adds	r3, #36	; 0x24
 80096ca:	2102      	movs	r1, #2
 80096cc:	4618      	mov	r0, r3
 80096ce:	f000 fccb 	bl	800a068 <RCCEx_PLL3_Config>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096dc:	4b7a      	ldr	r3, [pc, #488]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ea:	4977      	ldr	r1, [pc, #476]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096ec:	4313      	orrs	r3, r2
 80096ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d034      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009702:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009706:	d01d      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800970c:	d817      	bhi.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009716:	d009      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009718:	e011      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	3304      	adds	r3, #4
 800971e:	2100      	movs	r1, #0
 8009720:	4618      	mov	r0, r3
 8009722:	f000 fbef 	bl	8009f04 <RCCEx_PLL2_Config>
 8009726:	4603      	mov	r3, r0
 8009728:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800972a:	e00c      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	3324      	adds	r3, #36	; 0x24
 8009730:	2102      	movs	r1, #2
 8009732:	4618      	mov	r0, r3
 8009734:	f000 fc98 	bl	800a068 <RCCEx_PLL3_Config>
 8009738:	4603      	mov	r3, r0
 800973a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800973c:	e003      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	75fb      	strb	r3, [r7, #23]
      break;
 8009742:	e000      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10a      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800974c:	4b5e      	ldr	r3, [pc, #376]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800974e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009750:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800975a:	495b      	ldr	r1, [pc, #364]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800975c:	4313      	orrs	r3, r2
 800975e:	658b      	str	r3, [r1, #88]	; 0x58
 8009760:	e001      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d033      	beq.n	80097da <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009778:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800977c:	d01c      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800977e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009782:	d816      	bhi.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009788:	d003      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800978a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800978e:	d007      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009790:	e00f      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009792:	4b4d      	ldr	r3, [pc, #308]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009796:	4a4c      	ldr	r2, [pc, #304]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800979c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800979e:	e00c      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3324      	adds	r3, #36	; 0x24
 80097a4:	2101      	movs	r1, #1
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fc5e 	bl	800a068 <RCCEx_PLL3_Config>
 80097ac:	4603      	mov	r3, r0
 80097ae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80097b0:	e003      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	75fb      	strb	r3, [r7, #23]
      break;
 80097b6:	e000      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80097b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097ba:	7dfb      	ldrb	r3, [r7, #23]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10a      	bne.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097c0:	4b41      	ldr	r3, [pc, #260]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097ce:	493e      	ldr	r1, [pc, #248]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097d0:	4313      	orrs	r3, r2
 80097d2:	654b      	str	r3, [r1, #84]	; 0x54
 80097d4:	e001      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d6:	7dfb      	ldrb	r3, [r7, #23]
 80097d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d029      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80097ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097f2:	d007      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80097f4:	e00f      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097f6:	4b34      	ldr	r3, [pc, #208]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fa:	4a33      	ldr	r2, [pc, #204]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009800:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009802:	e00b      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3304      	adds	r3, #4
 8009808:	2102      	movs	r1, #2
 800980a:	4618      	mov	r0, r3
 800980c:	f000 fb7a 	bl	8009f04 <RCCEx_PLL2_Config>
 8009810:	4603      	mov	r3, r0
 8009812:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009814:	e002      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	75fb      	strb	r3, [r7, #23]
      break;
 800981a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800981c:	7dfb      	ldrb	r3, [r7, #23]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d109      	bne.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009822:	4b29      	ldr	r3, [pc, #164]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009826:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800982e:	4926      	ldr	r1, [pc, #152]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009830:	4313      	orrs	r3, r2
 8009832:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009834:	e001      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00a      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	3324      	adds	r3, #36	; 0x24
 800984a:	2102      	movs	r1, #2
 800984c:	4618      	mov	r0, r3
 800984e:	f000 fc0b 	bl	800a068 <RCCEx_PLL3_Config>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d033      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800986c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009870:	d017      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009876:	d811      	bhi.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800987c:	d013      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800987e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009882:	d80b      	bhi.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009884:	2b00      	cmp	r3, #0
 8009886:	d010      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800988c:	d106      	bne.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800988e:	4b0e      	ldr	r3, [pc, #56]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009892:	4a0d      	ldr	r2, [pc, #52]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009898:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800989a:	e007      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	75fb      	strb	r3, [r7, #23]
      break;
 80098a0:	e004      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80098a2:	bf00      	nop
 80098a4:	e002      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80098a6:	bf00      	nop
 80098a8:	e000      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80098aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ac:	7dfb      	ldrb	r3, [r7, #23]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10c      	bne.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80098b2:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098be:	4902      	ldr	r1, [pc, #8]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098c0:	4313      	orrs	r3, r2
 80098c2:	654b      	str	r3, [r1, #84]	; 0x54
 80098c4:	e004      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80098c6:	bf00      	nop
 80098c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098cc:	7dfb      	ldrb	r3, [r7, #23]
 80098ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d008      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80098dc:	4b29      	ldr	r3, [pc, #164]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098e8:	4926      	ldr	r1, [pc, #152]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098ea:	4313      	orrs	r3, r2
 80098ec:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d008      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80098fa:	4b22      	ldr	r3, [pc, #136]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009906:	491f      	ldr	r1, [pc, #124]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009908:	4313      	orrs	r3, r2
 800990a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00d      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009918:	4b1a      	ldr	r3, [pc, #104]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	4a19      	ldr	r2, [pc, #100]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800991e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009922:	6113      	str	r3, [r2, #16]
 8009924:	4b17      	ldr	r3, [pc, #92]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009926:	691a      	ldr	r2, [r3, #16]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800992e:	4915      	ldr	r1, [pc, #84]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009930:	4313      	orrs	r3, r2
 8009932:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	da08      	bge.n	800994e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800993c:	4b11      	ldr	r3, [pc, #68]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800993e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009940:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009948:	490e      	ldr	r1, [pc, #56]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800994a:	4313      	orrs	r3, r2
 800994c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009956:	2b00      	cmp	r3, #0
 8009958:	d009      	beq.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800995a:	4b0a      	ldr	r3, [pc, #40]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800995c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800995e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009968:	4906      	ldr	r1, [pc, #24]	; (8009984 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800996a:	4313      	orrs	r3, r2
 800996c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800996e:	7dbb      	ldrb	r3, [r7, #22]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	e000      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	58024400 	.word	0x58024400

08009988 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800998c:	f7ff f8a6 	bl	8008adc <HAL_RCC_GetHCLKFreq>
 8009990:	4602      	mov	r2, r0
 8009992:	4b06      	ldr	r3, [pc, #24]	; (80099ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	091b      	lsrs	r3, r3, #4
 8009998:	f003 0307 	and.w	r3, r3, #7
 800999c:	4904      	ldr	r1, [pc, #16]	; (80099b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800999e:	5ccb      	ldrb	r3, [r1, r3]
 80099a0:	f003 031f 	and.w	r3, r3, #31
 80099a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	58024400 	.word	0x58024400
 80099b0:	0800e3c4 	.word	0x0800e3c4

080099b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b089      	sub	sp, #36	; 0x24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099bc:	4ba1      	ldr	r3, [pc, #644]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c0:	f003 0303 	and.w	r3, r3, #3
 80099c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80099c6:	4b9f      	ldr	r3, [pc, #636]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ca:	0b1b      	lsrs	r3, r3, #12
 80099cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80099d2:	4b9c      	ldr	r3, [pc, #624]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	091b      	lsrs	r3, r3, #4
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80099de:	4b99      	ldr	r3, [pc, #612]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e2:	08db      	lsrs	r3, r3, #3
 80099e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	fb02 f303 	mul.w	r3, r2, r3
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 8111 	beq.w	8009c24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	f000 8083 	beq.w	8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	f200 80a1 	bhi.w	8009b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d056      	beq.n	8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a1e:	e099      	b.n	8009b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a20:	4b88      	ldr	r3, [pc, #544]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0320 	and.w	r3, r3, #32
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d02d      	beq.n	8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a2c:	4b85      	ldr	r3, [pc, #532]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	08db      	lsrs	r3, r3, #3
 8009a32:	f003 0303 	and.w	r3, r3, #3
 8009a36:	4a84      	ldr	r2, [pc, #528]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a38:	fa22 f303 	lsr.w	r3, r2, r3
 8009a3c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	ee07 3a90 	vmov	s15, r3
 8009a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a56:	4b7b      	ldr	r3, [pc, #492]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5e:	ee07 3a90 	vmov	s15, r3
 8009a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a86:	e087      	b.n	8009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	ee07 3a90 	vmov	s15, r3
 8009a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a9a:	4b6a      	ldr	r3, [pc, #424]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009aca:	e065      	b.n	8009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	ee07 3a90 	vmov	s15, r3
 8009ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ade:	4b59      	ldr	r3, [pc, #356]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009af2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b0e:	e043      	b.n	8009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b22:	4b48      	ldr	r3, [pc, #288]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b52:	e021      	b.n	8009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b66:	4b37      	ldr	r3, [pc, #220]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009b98:	4b2a      	ldr	r3, [pc, #168]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9c:	0a5b      	lsrs	r3, r3, #9
 8009b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bbe:	ee17 2a90 	vmov	r2, s15
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009bc6:	4b1f      	ldr	r3, [pc, #124]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bca:	0c1b      	lsrs	r3, r3, #16
 8009bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bd0:	ee07 3a90 	vmov	s15, r3
 8009bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bec:	ee17 2a90 	vmov	r2, s15
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009bf4:	4b13      	ldr	r3, [pc, #76]	; (8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf8:	0e1b      	lsrs	r3, r3, #24
 8009bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c1a:	ee17 2a90 	vmov	r2, s15
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c22:	e008      	b.n	8009c36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	609a      	str	r2, [r3, #8]
}
 8009c36:	bf00      	nop
 8009c38:	3724      	adds	r7, #36	; 0x24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	58024400 	.word	0x58024400
 8009c48:	03d09000 	.word	0x03d09000
 8009c4c:	46000000 	.word	0x46000000
 8009c50:	4c742400 	.word	0x4c742400
 8009c54:	4a742400 	.word	0x4a742400
 8009c58:	4af42400 	.word	0x4af42400

08009c5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b089      	sub	sp, #36	; 0x24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c64:	4ba1      	ldr	r3, [pc, #644]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c68:	f003 0303 	and.w	r3, r3, #3
 8009c6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009c6e:	4b9f      	ldr	r3, [pc, #636]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c72:	0d1b      	lsrs	r3, r3, #20
 8009c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c7a:	4b9c      	ldr	r3, [pc, #624]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7e:	0a1b      	lsrs	r3, r3, #8
 8009c80:	f003 0301 	and.w	r3, r3, #1
 8009c84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c86:	4b99      	ldr	r3, [pc, #612]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8a:	08db      	lsrs	r3, r3, #3
 8009c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c90:	693a      	ldr	r2, [r7, #16]
 8009c92:	fb02 f303 	mul.w	r3, r2, r3
 8009c96:	ee07 3a90 	vmov	s15, r3
 8009c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 8111 	beq.w	8009ecc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	f000 8083 	beq.w	8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	f200 80a1 	bhi.w	8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d056      	beq.n	8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009cc6:	e099      	b.n	8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cc8:	4b88      	ldr	r3, [pc, #544]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 0320 	and.w	r3, r3, #32
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d02d      	beq.n	8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cd4:	4b85      	ldr	r3, [pc, #532]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	08db      	lsrs	r3, r3, #3
 8009cda:	f003 0303 	and.w	r3, r3, #3
 8009cde:	4a84      	ldr	r2, [pc, #528]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	ee07 3a90 	vmov	s15, r3
 8009cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	ee07 3a90 	vmov	s15, r3
 8009cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cfe:	4b7b      	ldr	r3, [pc, #492]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d06:	ee07 3a90 	vmov	s15, r3
 8009d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009d2e:	e087      	b.n	8009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	ee07 3a90 	vmov	s15, r3
 8009d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d42:	4b6a      	ldr	r3, [pc, #424]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d4a:	ee07 3a90 	vmov	s15, r3
 8009d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d72:	e065      	b.n	8009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	ee07 3a90 	vmov	s15, r3
 8009d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d86:	4b59      	ldr	r3, [pc, #356]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8e:	ee07 3a90 	vmov	s15, r3
 8009d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009db2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009db6:	e043      	b.n	8009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dca:	4b48      	ldr	r3, [pc, #288]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dde:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dfa:	e021      	b.n	8009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e0e:	4b37      	ldr	r3, [pc, #220]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e16:	ee07 3a90 	vmov	s15, r3
 8009e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009e40:	4b2a      	ldr	r3, [pc, #168]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e44:	0a5b      	lsrs	r3, r3, #9
 8009e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e66:	ee17 2a90 	vmov	r2, s15
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009e6e:	4b1f      	ldr	r3, [pc, #124]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e72:	0c1b      	lsrs	r3, r3, #16
 8009e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e78:	ee07 3a90 	vmov	s15, r3
 8009e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e94:	ee17 2a90 	vmov	r2, s15
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009e9c:	4b13      	ldr	r3, [pc, #76]	; (8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea0:	0e1b      	lsrs	r3, r3, #24
 8009ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ea6:	ee07 3a90 	vmov	s15, r3
 8009eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ec2:	ee17 2a90 	vmov	r2, s15
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009eca:	e008      	b.n	8009ede <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	609a      	str	r2, [r3, #8]
}
 8009ede:	bf00      	nop
 8009ee0:	3724      	adds	r7, #36	; 0x24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	58024400 	.word	0x58024400
 8009ef0:	03d09000 	.word	0x03d09000
 8009ef4:	46000000 	.word	0x46000000
 8009ef8:	4c742400 	.word	0x4c742400
 8009efc:	4a742400 	.word	0x4a742400
 8009f00:	4af42400 	.word	0x4af42400

08009f04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f12:	4b53      	ldr	r3, [pc, #332]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f16:	f003 0303 	and.w	r3, r3, #3
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d101      	bne.n	8009f22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e099      	b.n	800a056 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009f22:	4b4f      	ldr	r3, [pc, #316]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a4e      	ldr	r2, [pc, #312]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009f28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f2e:	f7fa fda5 	bl	8004a7c <HAL_GetTick>
 8009f32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f34:	e008      	b.n	8009f48 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009f36:	f7fa fda1 	bl	8004a7c <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d901      	bls.n	8009f48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e086      	b.n	800a056 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f48:	4b45      	ldr	r3, [pc, #276]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1f0      	bne.n	8009f36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009f54:	4b42      	ldr	r3, [pc, #264]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	031b      	lsls	r3, r3, #12
 8009f62:	493f      	ldr	r1, [pc, #252]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	628b      	str	r3, [r1, #40]	; 0x28
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	3b01      	subs	r3, #1
 8009f78:	025b      	lsls	r3, r3, #9
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	431a      	orrs	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	3b01      	subs	r3, #1
 8009f84:	041b      	lsls	r3, r3, #16
 8009f86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	061b      	lsls	r3, r3, #24
 8009f94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f98:	4931      	ldr	r1, [pc, #196]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009f9e:	4b30      	ldr	r3, [pc, #192]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	492d      	ldr	r1, [pc, #180]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009fac:	4313      	orrs	r3, r2
 8009fae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009fb0:	4b2b      	ldr	r3, [pc, #172]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb4:	f023 0220 	bic.w	r2, r3, #32
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	699b      	ldr	r3, [r3, #24]
 8009fbc:	4928      	ldr	r1, [pc, #160]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009fc2:	4b27      	ldr	r3, [pc, #156]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc6:	4a26      	ldr	r2, [pc, #152]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009fc8:	f023 0310 	bic.w	r3, r3, #16
 8009fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009fce:	4b24      	ldr	r3, [pc, #144]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fd2:	4b24      	ldr	r3, [pc, #144]	; (800a064 <RCCEx_PLL2_Config+0x160>)
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	69d2      	ldr	r2, [r2, #28]
 8009fda:	00d2      	lsls	r2, r2, #3
 8009fdc:	4920      	ldr	r1, [pc, #128]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009fe2:	4b1f      	ldr	r3, [pc, #124]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	4a1e      	ldr	r2, [pc, #120]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009fe8:	f043 0310 	orr.w	r3, r3, #16
 8009fec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d106      	bne.n	800a002 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ff4:	4b1a      	ldr	r3, [pc, #104]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	4a19      	ldr	r2, [pc, #100]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 8009ffa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a000:	e00f      	b.n	800a022 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d106      	bne.n	800a016 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a008:	4b15      	ldr	r3, [pc, #84]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 800a00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00c:	4a14      	ldr	r2, [pc, #80]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 800a00e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a012:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a014:	e005      	b.n	800a022 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a016:	4b12      	ldr	r3, [pc, #72]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 800a018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01a:	4a11      	ldr	r2, [pc, #68]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 800a01c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a020:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a022:	4b0f      	ldr	r3, [pc, #60]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a0e      	ldr	r2, [pc, #56]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 800a028:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a02c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a02e:	f7fa fd25 	bl	8004a7c <HAL_GetTick>
 800a032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a034:	e008      	b.n	800a048 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a036:	f7fa fd21 	bl	8004a7c <HAL_GetTick>
 800a03a:	4602      	mov	r2, r0
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	2b02      	cmp	r3, #2
 800a042:	d901      	bls.n	800a048 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a044:	2303      	movs	r3, #3
 800a046:	e006      	b.n	800a056 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a048:	4b05      	ldr	r3, [pc, #20]	; (800a060 <RCCEx_PLL2_Config+0x15c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d0f0      	beq.n	800a036 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a054:	7bfb      	ldrb	r3, [r7, #15]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	58024400 	.word	0x58024400
 800a064:	ffff0007 	.word	0xffff0007

0800a068 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a076:	4b53      	ldr	r3, [pc, #332]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a07a:	f003 0303 	and.w	r3, r3, #3
 800a07e:	2b03      	cmp	r3, #3
 800a080:	d101      	bne.n	800a086 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e099      	b.n	800a1ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a086:	4b4f      	ldr	r3, [pc, #316]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a4e      	ldr	r2, [pc, #312]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a08c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a092:	f7fa fcf3 	bl	8004a7c <HAL_GetTick>
 800a096:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a098:	e008      	b.n	800a0ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a09a:	f7fa fcef 	bl	8004a7c <HAL_GetTick>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d901      	bls.n	800a0ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e086      	b.n	800a1ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0ac:	4b45      	ldr	r3, [pc, #276]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1f0      	bne.n	800a09a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a0b8:	4b42      	ldr	r3, [pc, #264]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	051b      	lsls	r3, r3, #20
 800a0c6:	493f      	ldr	r1, [pc, #252]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	628b      	str	r3, [r1, #40]	; 0x28
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	025b      	lsls	r3, r3, #9
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	431a      	orrs	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	041b      	lsls	r3, r3, #16
 800a0ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a0ee:	431a      	orrs	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	061b      	lsls	r3, r3, #24
 800a0f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a0fc:	4931      	ldr	r1, [pc, #196]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a0fe:	4313      	orrs	r3, r2
 800a100:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a102:	4b30      	ldr	r3, [pc, #192]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a106:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	695b      	ldr	r3, [r3, #20]
 800a10e:	492d      	ldr	r1, [pc, #180]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a110:	4313      	orrs	r3, r2
 800a112:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a114:	4b2b      	ldr	r3, [pc, #172]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a118:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	4928      	ldr	r1, [pc, #160]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a122:	4313      	orrs	r3, r2
 800a124:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a126:	4b27      	ldr	r3, [pc, #156]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12a:	4a26      	ldr	r2, [pc, #152]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a12c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a130:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a132:	4b24      	ldr	r3, [pc, #144]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a136:	4b24      	ldr	r3, [pc, #144]	; (800a1c8 <RCCEx_PLL3_Config+0x160>)
 800a138:	4013      	ands	r3, r2
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	69d2      	ldr	r2, [r2, #28]
 800a13e:	00d2      	lsls	r2, r2, #3
 800a140:	4920      	ldr	r1, [pc, #128]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a142:	4313      	orrs	r3, r2
 800a144:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a146:	4b1f      	ldr	r3, [pc, #124]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14a:	4a1e      	ldr	r2, [pc, #120]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a14c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a150:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d106      	bne.n	800a166 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a158:	4b1a      	ldr	r3, [pc, #104]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15c:	4a19      	ldr	r2, [pc, #100]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a15e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a162:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a164:	e00f      	b.n	800a186 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d106      	bne.n	800a17a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a16c:	4b15      	ldr	r3, [pc, #84]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a170:	4a14      	ldr	r2, [pc, #80]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a172:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a176:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a178:	e005      	b.n	800a186 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a17a:	4b12      	ldr	r3, [pc, #72]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17e:	4a11      	ldr	r2, [pc, #68]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a184:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a186:	4b0f      	ldr	r3, [pc, #60]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a0e      	ldr	r2, [pc, #56]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a18c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a192:	f7fa fc73 	bl	8004a7c <HAL_GetTick>
 800a196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a198:	e008      	b.n	800a1ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a19a:	f7fa fc6f 	bl	8004a7c <HAL_GetTick>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d901      	bls.n	800a1ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	e006      	b.n	800a1ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1ac:	4b05      	ldr	r3, [pc, #20]	; (800a1c4 <RCCEx_PLL3_Config+0x15c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d0f0      	beq.n	800a19a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	58024400 	.word	0x58024400
 800a1c8:	ffff0007 	.word	0xffff0007

0800a1cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d101      	bne.n	800a1de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e049      	b.n	800a272 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d106      	bne.n	800a1f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7f9 ff7a 	bl	80040ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	3304      	adds	r3, #4
 800a208:	4619      	mov	r1, r3
 800a20a:	4610      	mov	r0, r2
 800a20c:	f000 ff12 	bl	800b034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
	...

0800a27c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d001      	beq.n	800a294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e05e      	b.n	800a352 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2202      	movs	r2, #2
 800a298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68da      	ldr	r2, [r3, #12]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f042 0201 	orr.w	r2, r2, #1
 800a2aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a2b      	ldr	r2, [pc, #172]	; (800a360 <HAL_TIM_Base_Start_IT+0xe4>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d02c      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x94>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2be:	d027      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x94>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a27      	ldr	r2, [pc, #156]	; (800a364 <HAL_TIM_Base_Start_IT+0xe8>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d022      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x94>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a26      	ldr	r2, [pc, #152]	; (800a368 <HAL_TIM_Base_Start_IT+0xec>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d01d      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x94>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a24      	ldr	r2, [pc, #144]	; (800a36c <HAL_TIM_Base_Start_IT+0xf0>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d018      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x94>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a23      	ldr	r2, [pc, #140]	; (800a370 <HAL_TIM_Base_Start_IT+0xf4>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d013      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x94>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a21      	ldr	r2, [pc, #132]	; (800a374 <HAL_TIM_Base_Start_IT+0xf8>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d00e      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x94>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a20      	ldr	r2, [pc, #128]	; (800a378 <HAL_TIM_Base_Start_IT+0xfc>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d009      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x94>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a1e      	ldr	r2, [pc, #120]	; (800a37c <HAL_TIM_Base_Start_IT+0x100>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d004      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0x94>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a1d      	ldr	r2, [pc, #116]	; (800a380 <HAL_TIM_Base_Start_IT+0x104>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d115      	bne.n	800a33c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	689a      	ldr	r2, [r3, #8]
 800a316:	4b1b      	ldr	r3, [pc, #108]	; (800a384 <HAL_TIM_Base_Start_IT+0x108>)
 800a318:	4013      	ands	r3, r2
 800a31a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2b06      	cmp	r3, #6
 800a320:	d015      	beq.n	800a34e <HAL_TIM_Base_Start_IT+0xd2>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a328:	d011      	beq.n	800a34e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f042 0201 	orr.w	r2, r2, #1
 800a338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a33a:	e008      	b.n	800a34e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f042 0201 	orr.w	r2, r2, #1
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	e000      	b.n	800a350 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a34e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	40010000 	.word	0x40010000
 800a364:	40000400 	.word	0x40000400
 800a368:	40000800 	.word	0x40000800
 800a36c:	40000c00 	.word	0x40000c00
 800a370:	40010400 	.word	0x40010400
 800a374:	40001800 	.word	0x40001800
 800a378:	40014000 	.word	0x40014000
 800a37c:	4000e000 	.word	0x4000e000
 800a380:	4000e400 	.word	0x4000e400
 800a384:	00010007 	.word	0x00010007

0800a388 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d101      	bne.n	800a39a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e049      	b.n	800a42e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d106      	bne.n	800a3b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7f9 fe34 	bl	800401c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	3304      	adds	r3, #4
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	4610      	mov	r0, r2
 800a3c8:	f000 fe34 	bl	800b034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
	...

0800a438 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d109      	bne.n	800a45c <HAL_TIM_PWM_Start+0x24>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	2b01      	cmp	r3, #1
 800a452:	bf14      	ite	ne
 800a454:	2301      	movne	r3, #1
 800a456:	2300      	moveq	r3, #0
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	e03c      	b.n	800a4d6 <HAL_TIM_PWM_Start+0x9e>
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	2b04      	cmp	r3, #4
 800a460:	d109      	bne.n	800a476 <HAL_TIM_PWM_Start+0x3e>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	bf14      	ite	ne
 800a46e:	2301      	movne	r3, #1
 800a470:	2300      	moveq	r3, #0
 800a472:	b2db      	uxtb	r3, r3
 800a474:	e02f      	b.n	800a4d6 <HAL_TIM_PWM_Start+0x9e>
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2b08      	cmp	r3, #8
 800a47a:	d109      	bne.n	800a490 <HAL_TIM_PWM_Start+0x58>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b01      	cmp	r3, #1
 800a486:	bf14      	ite	ne
 800a488:	2301      	movne	r3, #1
 800a48a:	2300      	moveq	r3, #0
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	e022      	b.n	800a4d6 <HAL_TIM_PWM_Start+0x9e>
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	2b0c      	cmp	r3, #12
 800a494:	d109      	bne.n	800a4aa <HAL_TIM_PWM_Start+0x72>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	bf14      	ite	ne
 800a4a2:	2301      	movne	r3, #1
 800a4a4:	2300      	moveq	r3, #0
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	e015      	b.n	800a4d6 <HAL_TIM_PWM_Start+0x9e>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b10      	cmp	r3, #16
 800a4ae:	d109      	bne.n	800a4c4 <HAL_TIM_PWM_Start+0x8c>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	bf14      	ite	ne
 800a4bc:	2301      	movne	r3, #1
 800a4be:	2300      	moveq	r3, #0
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	e008      	b.n	800a4d6 <HAL_TIM_PWM_Start+0x9e>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	bf14      	ite	ne
 800a4d0:	2301      	movne	r3, #1
 800a4d2:	2300      	moveq	r3, #0
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d001      	beq.n	800a4de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e0ab      	b.n	800a636 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d104      	bne.n	800a4ee <HAL_TIM_PWM_Start+0xb6>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4ec:	e023      	b.n	800a536 <HAL_TIM_PWM_Start+0xfe>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b04      	cmp	r3, #4
 800a4f2:	d104      	bne.n	800a4fe <HAL_TIM_PWM_Start+0xc6>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4fc:	e01b      	b.n	800a536 <HAL_TIM_PWM_Start+0xfe>
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2b08      	cmp	r3, #8
 800a502:	d104      	bne.n	800a50e <HAL_TIM_PWM_Start+0xd6>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2202      	movs	r2, #2
 800a508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a50c:	e013      	b.n	800a536 <HAL_TIM_PWM_Start+0xfe>
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b0c      	cmp	r3, #12
 800a512:	d104      	bne.n	800a51e <HAL_TIM_PWM_Start+0xe6>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2202      	movs	r2, #2
 800a518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a51c:	e00b      	b.n	800a536 <HAL_TIM_PWM_Start+0xfe>
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	2b10      	cmp	r3, #16
 800a522:	d104      	bne.n	800a52e <HAL_TIM_PWM_Start+0xf6>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2202      	movs	r2, #2
 800a528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a52c:	e003      	b.n	800a536 <HAL_TIM_PWM_Start+0xfe>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2202      	movs	r2, #2
 800a532:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2201      	movs	r2, #1
 800a53c:	6839      	ldr	r1, [r7, #0]
 800a53e:	4618      	mov	r0, r3
 800a540:	f001 f992 	bl	800b868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a3d      	ldr	r2, [pc, #244]	; (800a640 <HAL_TIM_PWM_Start+0x208>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d013      	beq.n	800a576 <HAL_TIM_PWM_Start+0x13e>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a3c      	ldr	r2, [pc, #240]	; (800a644 <HAL_TIM_PWM_Start+0x20c>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d00e      	beq.n	800a576 <HAL_TIM_PWM_Start+0x13e>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a3a      	ldr	r2, [pc, #232]	; (800a648 <HAL_TIM_PWM_Start+0x210>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d009      	beq.n	800a576 <HAL_TIM_PWM_Start+0x13e>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a39      	ldr	r2, [pc, #228]	; (800a64c <HAL_TIM_PWM_Start+0x214>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d004      	beq.n	800a576 <HAL_TIM_PWM_Start+0x13e>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a37      	ldr	r2, [pc, #220]	; (800a650 <HAL_TIM_PWM_Start+0x218>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d101      	bne.n	800a57a <HAL_TIM_PWM_Start+0x142>
 800a576:	2301      	movs	r3, #1
 800a578:	e000      	b.n	800a57c <HAL_TIM_PWM_Start+0x144>
 800a57a:	2300      	movs	r3, #0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d007      	beq.n	800a590 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a58e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a2a      	ldr	r2, [pc, #168]	; (800a640 <HAL_TIM_PWM_Start+0x208>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d02c      	beq.n	800a5f4 <HAL_TIM_PWM_Start+0x1bc>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5a2:	d027      	beq.n	800a5f4 <HAL_TIM_PWM_Start+0x1bc>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a2a      	ldr	r2, [pc, #168]	; (800a654 <HAL_TIM_PWM_Start+0x21c>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d022      	beq.n	800a5f4 <HAL_TIM_PWM_Start+0x1bc>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a29      	ldr	r2, [pc, #164]	; (800a658 <HAL_TIM_PWM_Start+0x220>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d01d      	beq.n	800a5f4 <HAL_TIM_PWM_Start+0x1bc>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a27      	ldr	r2, [pc, #156]	; (800a65c <HAL_TIM_PWM_Start+0x224>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d018      	beq.n	800a5f4 <HAL_TIM_PWM_Start+0x1bc>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a1f      	ldr	r2, [pc, #124]	; (800a644 <HAL_TIM_PWM_Start+0x20c>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d013      	beq.n	800a5f4 <HAL_TIM_PWM_Start+0x1bc>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a23      	ldr	r2, [pc, #140]	; (800a660 <HAL_TIM_PWM_Start+0x228>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d00e      	beq.n	800a5f4 <HAL_TIM_PWM_Start+0x1bc>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a1b      	ldr	r2, [pc, #108]	; (800a648 <HAL_TIM_PWM_Start+0x210>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d009      	beq.n	800a5f4 <HAL_TIM_PWM_Start+0x1bc>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a1f      	ldr	r2, [pc, #124]	; (800a664 <HAL_TIM_PWM_Start+0x22c>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d004      	beq.n	800a5f4 <HAL_TIM_PWM_Start+0x1bc>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a1e      	ldr	r2, [pc, #120]	; (800a668 <HAL_TIM_PWM_Start+0x230>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d115      	bne.n	800a620 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	689a      	ldr	r2, [r3, #8]
 800a5fa:	4b1c      	ldr	r3, [pc, #112]	; (800a66c <HAL_TIM_PWM_Start+0x234>)
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2b06      	cmp	r3, #6
 800a604:	d015      	beq.n	800a632 <HAL_TIM_PWM_Start+0x1fa>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a60c:	d011      	beq.n	800a632 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f042 0201 	orr.w	r2, r2, #1
 800a61c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a61e:	e008      	b.n	800a632 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f042 0201 	orr.w	r2, r2, #1
 800a62e:	601a      	str	r2, [r3, #0]
 800a630:	e000      	b.n	800a634 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a632:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	40010000 	.word	0x40010000
 800a644:	40010400 	.word	0x40010400
 800a648:	40014000 	.word	0x40014000
 800a64c:	40014400 	.word	0x40014400
 800a650:	40014800 	.word	0x40014800
 800a654:	40000400 	.word	0x40000400
 800a658:	40000800 	.word	0x40000800
 800a65c:	40000c00 	.word	0x40000c00
 800a660:	40001800 	.word	0x40001800
 800a664:	4000e000 	.word	0x4000e000
 800a668:	4000e400 	.word	0x4000e400
 800a66c:	00010007 	.word	0x00010007

0800a670 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d101      	bne.n	800a684 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e041      	b.n	800a708 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d106      	bne.n	800a69e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f839 	bl	800a710 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2202      	movs	r2, #2
 800a6a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	3304      	adds	r3, #4
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	f000 fcbf 	bl	800b034 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f022 0208 	bic.w	r2, r2, #8
 800a6c4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	6819      	ldr	r1, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	683a      	ldr	r2, [r7, #0]
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e08f      	b.n	800a858 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b00      	cmp	r3, #0
 800a742:	d106      	bne.n	800a752 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f7f9 fd21 	bl	8004194 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2202      	movs	r2, #2
 800a756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	6899      	ldr	r1, [r3, #8]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	4b3e      	ldr	r3, [pc, #248]	; (800a860 <HAL_TIM_Encoder_Init+0x13c>)
 800a766:	400b      	ands	r3, r1
 800a768:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3304      	adds	r3, #4
 800a772:	4619      	mov	r1, r3
 800a774:	4610      	mov	r0, r2
 800a776:	f000 fc5d 	bl	800b034 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	6a1b      	ldr	r3, [r3, #32]
 800a790:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	4313      	orrs	r3, r2
 800a79a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	4b31      	ldr	r3, [pc, #196]	; (800a864 <HAL_TIM_Encoder_Init+0x140>)
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	689a      	ldr	r2, [r3, #8]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	021b      	lsls	r3, r3, #8
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	693a      	ldr	r2, [r7, #16]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	4b2b      	ldr	r3, [pc, #172]	; (800a868 <HAL_TIM_Encoder_Init+0x144>)
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a7be:	693a      	ldr	r2, [r7, #16]
 800a7c0:	4b2a      	ldr	r3, [pc, #168]	; (800a86c <HAL_TIM_Encoder_Init+0x148>)
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	68da      	ldr	r2, [r3, #12]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	021b      	lsls	r3, r3, #8
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	693a      	ldr	r2, [r7, #16]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	011a      	lsls	r2, r3, #4
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	031b      	lsls	r3, r3, #12
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	693a      	ldr	r2, [r7, #16]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a7f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a7fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	695b      	ldr	r3, [r3, #20]
 800a804:	011b      	lsls	r3, r3, #4
 800a806:	4313      	orrs	r3, r2
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	693a      	ldr	r2, [r7, #16]
 800a81c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2201      	movs	r2, #1
 800a82a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	fffebff8 	.word	0xfffebff8
 800a864:	fffffcfc 	.word	0xfffffcfc
 800a868:	fffff3f3 	.word	0xfffff3f3
 800a86c:	ffff0f0f 	.word	0xffff0f0f

0800a870 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a880:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a888:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a890:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a898:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d110      	bne.n	800a8c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d102      	bne.n	800a8ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a8a6:	7b7b      	ldrb	r3, [r7, #13]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d001      	beq.n	800a8b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e069      	b.n	800a984 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8c0:	e031      	b.n	800a926 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	2b04      	cmp	r3, #4
 800a8c6:	d110      	bne.n	800a8ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8c8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d102      	bne.n	800a8d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a8ce:	7b3b      	ldrb	r3, [r7, #12]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d001      	beq.n	800a8d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e055      	b.n	800a984 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2202      	movs	r2, #2
 800a8e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8e8:	e01d      	b.n	800a926 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d108      	bne.n	800a902 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8f0:	7bbb      	ldrb	r3, [r7, #14]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d105      	bne.n	800a902 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8f6:	7b7b      	ldrb	r3, [r7, #13]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d102      	bne.n	800a902 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a8fc:	7b3b      	ldrb	r3, [r7, #12]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d001      	beq.n	800a906 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e03e      	b.n	800a984 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2202      	movs	r2, #2
 800a90a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2202      	movs	r2, #2
 800a912:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2202      	movs	r2, #2
 800a91a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2202      	movs	r2, #2
 800a922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d003      	beq.n	800a934 <HAL_TIM_Encoder_Start+0xc4>
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	2b04      	cmp	r3, #4
 800a930:	d008      	beq.n	800a944 <HAL_TIM_Encoder_Start+0xd4>
 800a932:	e00f      	b.n	800a954 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2201      	movs	r2, #1
 800a93a:	2100      	movs	r1, #0
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 ff93 	bl	800b868 <TIM_CCxChannelCmd>
      break;
 800a942:	e016      	b.n	800a972 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2201      	movs	r2, #1
 800a94a:	2104      	movs	r1, #4
 800a94c:	4618      	mov	r0, r3
 800a94e:	f000 ff8b 	bl	800b868 <TIM_CCxChannelCmd>
      break;
 800a952:	e00e      	b.n	800a972 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2201      	movs	r2, #1
 800a95a:	2100      	movs	r1, #0
 800a95c:	4618      	mov	r0, r3
 800a95e:	f000 ff83 	bl	800b868 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2201      	movs	r2, #1
 800a968:	2104      	movs	r1, #4
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 ff7c 	bl	800b868 <TIM_CCxChannelCmd>
      break;
 800a970:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f042 0201 	orr.w	r2, r2, #1
 800a980:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	f003 0302 	and.w	r3, r3, #2
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d122      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	f003 0302 	and.w	r3, r3, #2
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d11b      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f06f 0202 	mvn.w	r2, #2
 800a9b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	f003 0303 	and.w	r3, r3, #3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fb12 	bl	800aff8 <HAL_TIM_IC_CaptureCallback>
 800a9d4:	e005      	b.n	800a9e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fb04 	bl	800afe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fb15 	bl	800b00c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	f003 0304 	and.w	r3, r3, #4
 800a9f2:	2b04      	cmp	r3, #4
 800a9f4:	d122      	bne.n	800aa3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f003 0304 	and.w	r3, r3, #4
 800aa00:	2b04      	cmp	r3, #4
 800aa02:	d11b      	bne.n	800aa3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f06f 0204 	mvn.w	r2, #4
 800aa0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2202      	movs	r2, #2
 800aa12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fae8 	bl	800aff8 <HAL_TIM_IC_CaptureCallback>
 800aa28:	e005      	b.n	800aa36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fada 	bl	800afe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 faeb 	bl	800b00c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	f003 0308 	and.w	r3, r3, #8
 800aa46:	2b08      	cmp	r3, #8
 800aa48:	d122      	bne.n	800aa90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	f003 0308 	and.w	r3, r3, #8
 800aa54:	2b08      	cmp	r3, #8
 800aa56:	d11b      	bne.n	800aa90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f06f 0208 	mvn.w	r2, #8
 800aa60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2204      	movs	r2, #4
 800aa66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	69db      	ldr	r3, [r3, #28]
 800aa6e:	f003 0303 	and.w	r3, r3, #3
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 fabe 	bl	800aff8 <HAL_TIM_IC_CaptureCallback>
 800aa7c:	e005      	b.n	800aa8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fab0 	bl	800afe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fac1 	bl	800b00c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	f003 0310 	and.w	r3, r3, #16
 800aa9a:	2b10      	cmp	r3, #16
 800aa9c:	d122      	bne.n	800aae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	f003 0310 	and.w	r3, r3, #16
 800aaa8:	2b10      	cmp	r3, #16
 800aaaa:	d11b      	bne.n	800aae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f06f 0210 	mvn.w	r2, #16
 800aab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2208      	movs	r2, #8
 800aaba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	69db      	ldr	r3, [r3, #28]
 800aac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d003      	beq.n	800aad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fa94 	bl	800aff8 <HAL_TIM_IC_CaptureCallback>
 800aad0:	e005      	b.n	800aade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fa86 	bl	800afe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 fa97 	bl	800b00c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	f003 0301 	and.w	r3, r3, #1
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d10e      	bne.n	800ab10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d107      	bne.n	800ab10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f06f 0201 	mvn.w	r2, #1
 800ab08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f7f6 fda0 	bl	8001650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab1a:	2b80      	cmp	r3, #128	; 0x80
 800ab1c:	d10e      	bne.n	800ab3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab28:	2b80      	cmp	r3, #128	; 0x80
 800ab2a:	d107      	bne.n	800ab3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f001 f802 	bl	800bb40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab4a:	d10e      	bne.n	800ab6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab56:	2b80      	cmp	r3, #128	; 0x80
 800ab58:	d107      	bne.n	800ab6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ab62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fff5 	bl	800bb54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab74:	2b40      	cmp	r3, #64	; 0x40
 800ab76:	d10e      	bne.n	800ab96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab82:	2b40      	cmp	r3, #64	; 0x40
 800ab84:	d107      	bne.n	800ab96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 fa45 	bl	800b020 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	f003 0320 	and.w	r3, r3, #32
 800aba0:	2b20      	cmp	r3, #32
 800aba2:	d10e      	bne.n	800abc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	f003 0320 	and.w	r3, r3, #32
 800abae:	2b20      	cmp	r3, #32
 800abb0:	d107      	bne.n	800abc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f06f 0220 	mvn.w	r2, #32
 800abba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 ffb5 	bl	800bb2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abc2:	bf00      	nop
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
	...

0800abcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b086      	sub	sp, #24
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d101      	bne.n	800abea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800abe6:	2302      	movs	r3, #2
 800abe8:	e0ff      	b.n	800adea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2201      	movs	r2, #1
 800abee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b14      	cmp	r3, #20
 800abf6:	f200 80f0 	bhi.w	800adda <HAL_TIM_PWM_ConfigChannel+0x20e>
 800abfa:	a201      	add	r2, pc, #4	; (adr r2, 800ac00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800abfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac00:	0800ac55 	.word	0x0800ac55
 800ac04:	0800addb 	.word	0x0800addb
 800ac08:	0800addb 	.word	0x0800addb
 800ac0c:	0800addb 	.word	0x0800addb
 800ac10:	0800ac95 	.word	0x0800ac95
 800ac14:	0800addb 	.word	0x0800addb
 800ac18:	0800addb 	.word	0x0800addb
 800ac1c:	0800addb 	.word	0x0800addb
 800ac20:	0800acd7 	.word	0x0800acd7
 800ac24:	0800addb 	.word	0x0800addb
 800ac28:	0800addb 	.word	0x0800addb
 800ac2c:	0800addb 	.word	0x0800addb
 800ac30:	0800ad17 	.word	0x0800ad17
 800ac34:	0800addb 	.word	0x0800addb
 800ac38:	0800addb 	.word	0x0800addb
 800ac3c:	0800addb 	.word	0x0800addb
 800ac40:	0800ad59 	.word	0x0800ad59
 800ac44:	0800addb 	.word	0x0800addb
 800ac48:	0800addb 	.word	0x0800addb
 800ac4c:	0800addb 	.word	0x0800addb
 800ac50:	0800ad99 	.word	0x0800ad99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68b9      	ldr	r1, [r7, #8]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 fa90 	bl	800b180 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	699a      	ldr	r2, [r3, #24]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f042 0208 	orr.w	r2, r2, #8
 800ac6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	699a      	ldr	r2, [r3, #24]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f022 0204 	bic.w	r2, r2, #4
 800ac7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6999      	ldr	r1, [r3, #24]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	691a      	ldr	r2, [r3, #16]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	619a      	str	r2, [r3, #24]
      break;
 800ac92:	e0a5      	b.n	800ade0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68b9      	ldr	r1, [r7, #8]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f000 fb00 	bl	800b2a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	699a      	ldr	r2, [r3, #24]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	699a      	ldr	r2, [r3, #24]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	6999      	ldr	r1, [r3, #24]
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	021a      	lsls	r2, r3, #8
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	430a      	orrs	r2, r1
 800acd2:	619a      	str	r2, [r3, #24]
      break;
 800acd4:	e084      	b.n	800ade0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68b9      	ldr	r1, [r7, #8]
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 fb69 	bl	800b3b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	69da      	ldr	r2, [r3, #28]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f042 0208 	orr.w	r2, r2, #8
 800acf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	69da      	ldr	r2, [r3, #28]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f022 0204 	bic.w	r2, r2, #4
 800ad00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	69d9      	ldr	r1, [r3, #28]
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	691a      	ldr	r2, [r3, #16]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	430a      	orrs	r2, r1
 800ad12:	61da      	str	r2, [r3, #28]
      break;
 800ad14:	e064      	b.n	800ade0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68b9      	ldr	r1, [r7, #8]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 fbd1 	bl	800b4c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	69da      	ldr	r2, [r3, #28]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	69da      	ldr	r2, [r3, #28]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	69d9      	ldr	r1, [r3, #28]
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	021a      	lsls	r2, r3, #8
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	430a      	orrs	r2, r1
 800ad54:	61da      	str	r2, [r3, #28]
      break;
 800ad56:	e043      	b.n	800ade0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68b9      	ldr	r1, [r7, #8]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 fc1a 	bl	800b598 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f042 0208 	orr.w	r2, r2, #8
 800ad72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f022 0204 	bic.w	r2, r2, #4
 800ad82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	691a      	ldr	r2, [r3, #16]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	430a      	orrs	r2, r1
 800ad94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ad96:	e023      	b.n	800ade0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68b9      	ldr	r1, [r7, #8]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 fc5e 	bl	800b660 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	021a      	lsls	r2, r3, #8
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	430a      	orrs	r2, r1
 800add6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800add8:	e002      	b.n	800ade0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	75fb      	strb	r3, [r7, #23]
      break;
 800adde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ade8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3718      	adds	r7, #24
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop

0800adf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d101      	bne.n	800ae10 <HAL_TIM_ConfigClockSource+0x1c>
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	e0dc      	b.n	800afca <HAL_TIM_ConfigClockSource+0x1d6>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	4b6a      	ldr	r3, [pc, #424]	; (800afd4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a64      	ldr	r2, [pc, #400]	; (800afd8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	f000 80a9 	beq.w	800af9e <HAL_TIM_ConfigClockSource+0x1aa>
 800ae4c:	4a62      	ldr	r2, [pc, #392]	; (800afd8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	f200 80ae 	bhi.w	800afb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae54:	4a61      	ldr	r2, [pc, #388]	; (800afdc <HAL_TIM_ConfigClockSource+0x1e8>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	f000 80a1 	beq.w	800af9e <HAL_TIM_ConfigClockSource+0x1aa>
 800ae5c:	4a5f      	ldr	r2, [pc, #380]	; (800afdc <HAL_TIM_ConfigClockSource+0x1e8>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	f200 80a6 	bhi.w	800afb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae64:	4a5e      	ldr	r2, [pc, #376]	; (800afe0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	f000 8099 	beq.w	800af9e <HAL_TIM_ConfigClockSource+0x1aa>
 800ae6c:	4a5c      	ldr	r2, [pc, #368]	; (800afe0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	f200 809e 	bhi.w	800afb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ae78:	f000 8091 	beq.w	800af9e <HAL_TIM_ConfigClockSource+0x1aa>
 800ae7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ae80:	f200 8096 	bhi.w	800afb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae88:	f000 8089 	beq.w	800af9e <HAL_TIM_ConfigClockSource+0x1aa>
 800ae8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae90:	f200 808e 	bhi.w	800afb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae98:	d03e      	beq.n	800af18 <HAL_TIM_ConfigClockSource+0x124>
 800ae9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae9e:	f200 8087 	bhi.w	800afb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aea6:	f000 8086 	beq.w	800afb6 <HAL_TIM_ConfigClockSource+0x1c2>
 800aeaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeae:	d87f      	bhi.n	800afb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aeb0:	2b70      	cmp	r3, #112	; 0x70
 800aeb2:	d01a      	beq.n	800aeea <HAL_TIM_ConfigClockSource+0xf6>
 800aeb4:	2b70      	cmp	r3, #112	; 0x70
 800aeb6:	d87b      	bhi.n	800afb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aeb8:	2b60      	cmp	r3, #96	; 0x60
 800aeba:	d050      	beq.n	800af5e <HAL_TIM_ConfigClockSource+0x16a>
 800aebc:	2b60      	cmp	r3, #96	; 0x60
 800aebe:	d877      	bhi.n	800afb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aec0:	2b50      	cmp	r3, #80	; 0x50
 800aec2:	d03c      	beq.n	800af3e <HAL_TIM_ConfigClockSource+0x14a>
 800aec4:	2b50      	cmp	r3, #80	; 0x50
 800aec6:	d873      	bhi.n	800afb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aec8:	2b40      	cmp	r3, #64	; 0x40
 800aeca:	d058      	beq.n	800af7e <HAL_TIM_ConfigClockSource+0x18a>
 800aecc:	2b40      	cmp	r3, #64	; 0x40
 800aece:	d86f      	bhi.n	800afb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aed0:	2b30      	cmp	r3, #48	; 0x30
 800aed2:	d064      	beq.n	800af9e <HAL_TIM_ConfigClockSource+0x1aa>
 800aed4:	2b30      	cmp	r3, #48	; 0x30
 800aed6:	d86b      	bhi.n	800afb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aed8:	2b20      	cmp	r3, #32
 800aeda:	d060      	beq.n	800af9e <HAL_TIM_ConfigClockSource+0x1aa>
 800aedc:	2b20      	cmp	r3, #32
 800aede:	d867      	bhi.n	800afb0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d05c      	beq.n	800af9e <HAL_TIM_ConfigClockSource+0x1aa>
 800aee4:	2b10      	cmp	r3, #16
 800aee6:	d05a      	beq.n	800af9e <HAL_TIM_ConfigClockSource+0x1aa>
 800aee8:	e062      	b.n	800afb0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	6899      	ldr	r1, [r3, #8]
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	685a      	ldr	r2, [r3, #4]
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	f000 fc95 	bl	800b828 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800af0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	609a      	str	r2, [r3, #8]
      break;
 800af16:	e04f      	b.n	800afb8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6818      	ldr	r0, [r3, #0]
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	6899      	ldr	r1, [r3, #8]
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	685a      	ldr	r2, [r3, #4]
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	f000 fc7e 	bl	800b828 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	689a      	ldr	r2, [r3, #8]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af3a:	609a      	str	r2, [r3, #8]
      break;
 800af3c:	e03c      	b.n	800afb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6818      	ldr	r0, [r3, #0]
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	6859      	ldr	r1, [r3, #4]
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	461a      	mov	r2, r3
 800af4c:	f000 fbee 	bl	800b72c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2150      	movs	r1, #80	; 0x50
 800af56:	4618      	mov	r0, r3
 800af58:	f000 fc48 	bl	800b7ec <TIM_ITRx_SetConfig>
      break;
 800af5c:	e02c      	b.n	800afb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6818      	ldr	r0, [r3, #0]
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	6859      	ldr	r1, [r3, #4]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	461a      	mov	r2, r3
 800af6c:	f000 fc0d 	bl	800b78a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2160      	movs	r1, #96	; 0x60
 800af76:	4618      	mov	r0, r3
 800af78:	f000 fc38 	bl	800b7ec <TIM_ITRx_SetConfig>
      break;
 800af7c:	e01c      	b.n	800afb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6818      	ldr	r0, [r3, #0]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	6859      	ldr	r1, [r3, #4]
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	461a      	mov	r2, r3
 800af8c:	f000 fbce 	bl	800b72c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2140      	movs	r1, #64	; 0x40
 800af96:	4618      	mov	r0, r3
 800af98:	f000 fc28 	bl	800b7ec <TIM_ITRx_SetConfig>
      break;
 800af9c:	e00c      	b.n	800afb8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4619      	mov	r1, r3
 800afa8:	4610      	mov	r0, r2
 800afaa:	f000 fc1f 	bl	800b7ec <TIM_ITRx_SetConfig>
      break;
 800afae:	e003      	b.n	800afb8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	73fb      	strb	r3, [r7, #15]
      break;
 800afb4:	e000      	b.n	800afb8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800afb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	ffceff88 	.word	0xffceff88
 800afd8:	00100040 	.word	0x00100040
 800afdc:	00100030 	.word	0x00100030
 800afe0:	00100020 	.word	0x00100020

0800afe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b028:	bf00      	nop
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b034:	b480      	push	{r7}
 800b036:	b085      	sub	sp, #20
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a44      	ldr	r2, [pc, #272]	; (800b158 <TIM_Base_SetConfig+0x124>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d013      	beq.n	800b074 <TIM_Base_SetConfig+0x40>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b052:	d00f      	beq.n	800b074 <TIM_Base_SetConfig+0x40>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a41      	ldr	r2, [pc, #260]	; (800b15c <TIM_Base_SetConfig+0x128>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d00b      	beq.n	800b074 <TIM_Base_SetConfig+0x40>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a40      	ldr	r2, [pc, #256]	; (800b160 <TIM_Base_SetConfig+0x12c>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d007      	beq.n	800b074 <TIM_Base_SetConfig+0x40>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a3f      	ldr	r2, [pc, #252]	; (800b164 <TIM_Base_SetConfig+0x130>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d003      	beq.n	800b074 <TIM_Base_SetConfig+0x40>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4a3e      	ldr	r2, [pc, #248]	; (800b168 <TIM_Base_SetConfig+0x134>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d108      	bne.n	800b086 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b07a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	4313      	orrs	r3, r2
 800b084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a33      	ldr	r2, [pc, #204]	; (800b158 <TIM_Base_SetConfig+0x124>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d027      	beq.n	800b0de <TIM_Base_SetConfig+0xaa>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b094:	d023      	beq.n	800b0de <TIM_Base_SetConfig+0xaa>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a30      	ldr	r2, [pc, #192]	; (800b15c <TIM_Base_SetConfig+0x128>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d01f      	beq.n	800b0de <TIM_Base_SetConfig+0xaa>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a2f      	ldr	r2, [pc, #188]	; (800b160 <TIM_Base_SetConfig+0x12c>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d01b      	beq.n	800b0de <TIM_Base_SetConfig+0xaa>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a2e      	ldr	r2, [pc, #184]	; (800b164 <TIM_Base_SetConfig+0x130>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d017      	beq.n	800b0de <TIM_Base_SetConfig+0xaa>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a2d      	ldr	r2, [pc, #180]	; (800b168 <TIM_Base_SetConfig+0x134>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d013      	beq.n	800b0de <TIM_Base_SetConfig+0xaa>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a2c      	ldr	r2, [pc, #176]	; (800b16c <TIM_Base_SetConfig+0x138>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d00f      	beq.n	800b0de <TIM_Base_SetConfig+0xaa>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a2b      	ldr	r2, [pc, #172]	; (800b170 <TIM_Base_SetConfig+0x13c>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d00b      	beq.n	800b0de <TIM_Base_SetConfig+0xaa>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a2a      	ldr	r2, [pc, #168]	; (800b174 <TIM_Base_SetConfig+0x140>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d007      	beq.n	800b0de <TIM_Base_SetConfig+0xaa>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a29      	ldr	r2, [pc, #164]	; (800b178 <TIM_Base_SetConfig+0x144>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d003      	beq.n	800b0de <TIM_Base_SetConfig+0xaa>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a28      	ldr	r2, [pc, #160]	; (800b17c <TIM_Base_SetConfig+0x148>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d108      	bne.n	800b0f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	689a      	ldr	r2, [r3, #8]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a10      	ldr	r2, [pc, #64]	; (800b158 <TIM_Base_SetConfig+0x124>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d00f      	beq.n	800b13c <TIM_Base_SetConfig+0x108>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4a12      	ldr	r2, [pc, #72]	; (800b168 <TIM_Base_SetConfig+0x134>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d00b      	beq.n	800b13c <TIM_Base_SetConfig+0x108>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4a11      	ldr	r2, [pc, #68]	; (800b16c <TIM_Base_SetConfig+0x138>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d007      	beq.n	800b13c <TIM_Base_SetConfig+0x108>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a10      	ldr	r2, [pc, #64]	; (800b170 <TIM_Base_SetConfig+0x13c>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d003      	beq.n	800b13c <TIM_Base_SetConfig+0x108>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a0f      	ldr	r2, [pc, #60]	; (800b174 <TIM_Base_SetConfig+0x140>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d103      	bne.n	800b144 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	691a      	ldr	r2, [r3, #16]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	615a      	str	r2, [r3, #20]
}
 800b14a:	bf00      	nop
 800b14c:	3714      	adds	r7, #20
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	40010000 	.word	0x40010000
 800b15c:	40000400 	.word	0x40000400
 800b160:	40000800 	.word	0x40000800
 800b164:	40000c00 	.word	0x40000c00
 800b168:	40010400 	.word	0x40010400
 800b16c:	40014000 	.word	0x40014000
 800b170:	40014400 	.word	0x40014400
 800b174:	40014800 	.word	0x40014800
 800b178:	4000e000 	.word	0x4000e000
 800b17c:	4000e400 	.word	0x4000e400

0800b180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b180:	b480      	push	{r7}
 800b182:	b087      	sub	sp, #28
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	f023 0201 	bic.w	r2, r3, #1
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a1b      	ldr	r3, [r3, #32]
 800b19a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	4b37      	ldr	r3, [pc, #220]	; (800b288 <TIM_OC1_SetConfig+0x108>)
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f023 0303 	bic.w	r3, r3, #3
 800b1b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	f023 0302 	bic.w	r3, r3, #2
 800b1c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	697a      	ldr	r2, [r7, #20]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a2d      	ldr	r2, [pc, #180]	; (800b28c <TIM_OC1_SetConfig+0x10c>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d00f      	beq.n	800b1fc <TIM_OC1_SetConfig+0x7c>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a2c      	ldr	r2, [pc, #176]	; (800b290 <TIM_OC1_SetConfig+0x110>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d00b      	beq.n	800b1fc <TIM_OC1_SetConfig+0x7c>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a2b      	ldr	r2, [pc, #172]	; (800b294 <TIM_OC1_SetConfig+0x114>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d007      	beq.n	800b1fc <TIM_OC1_SetConfig+0x7c>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a2a      	ldr	r2, [pc, #168]	; (800b298 <TIM_OC1_SetConfig+0x118>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d003      	beq.n	800b1fc <TIM_OC1_SetConfig+0x7c>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a29      	ldr	r2, [pc, #164]	; (800b29c <TIM_OC1_SetConfig+0x11c>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d10c      	bne.n	800b216 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	f023 0308 	bic.w	r3, r3, #8
 800b202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	697a      	ldr	r2, [r7, #20]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	f023 0304 	bic.w	r3, r3, #4
 800b214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a1c      	ldr	r2, [pc, #112]	; (800b28c <TIM_OC1_SetConfig+0x10c>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d00f      	beq.n	800b23e <TIM_OC1_SetConfig+0xbe>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a1b      	ldr	r2, [pc, #108]	; (800b290 <TIM_OC1_SetConfig+0x110>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d00b      	beq.n	800b23e <TIM_OC1_SetConfig+0xbe>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a1a      	ldr	r2, [pc, #104]	; (800b294 <TIM_OC1_SetConfig+0x114>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d007      	beq.n	800b23e <TIM_OC1_SetConfig+0xbe>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a19      	ldr	r2, [pc, #100]	; (800b298 <TIM_OC1_SetConfig+0x118>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d003      	beq.n	800b23e <TIM_OC1_SetConfig+0xbe>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a18      	ldr	r2, [pc, #96]	; (800b29c <TIM_OC1_SetConfig+0x11c>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d111      	bne.n	800b262 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b24c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	4313      	orrs	r3, r2
 800b256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	4313      	orrs	r3, r2
 800b260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	685a      	ldr	r2, [r3, #4]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	697a      	ldr	r2, [r7, #20]
 800b27a:	621a      	str	r2, [r3, #32]
}
 800b27c:	bf00      	nop
 800b27e:	371c      	adds	r7, #28
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	fffeff8f 	.word	0xfffeff8f
 800b28c:	40010000 	.word	0x40010000
 800b290:	40010400 	.word	0x40010400
 800b294:	40014000 	.word	0x40014000
 800b298:	40014400 	.word	0x40014400
 800b29c:	40014800 	.word	0x40014800

0800b2a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	f023 0210 	bic.w	r2, r3, #16
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	4b34      	ldr	r3, [pc, #208]	; (800b39c <TIM_OC2_SetConfig+0xfc>)
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	021b      	lsls	r3, r3, #8
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	f023 0320 	bic.w	r3, r3, #32
 800b2ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	011b      	lsls	r3, r3, #4
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a29      	ldr	r2, [pc, #164]	; (800b3a0 <TIM_OC2_SetConfig+0x100>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d003      	beq.n	800b308 <TIM_OC2_SetConfig+0x68>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a28      	ldr	r2, [pc, #160]	; (800b3a4 <TIM_OC2_SetConfig+0x104>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d10d      	bne.n	800b324 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b30e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	011b      	lsls	r3, r3, #4
 800b316:	697a      	ldr	r2, [r7, #20]
 800b318:	4313      	orrs	r3, r2
 800b31a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b322:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a1e      	ldr	r2, [pc, #120]	; (800b3a0 <TIM_OC2_SetConfig+0x100>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d00f      	beq.n	800b34c <TIM_OC2_SetConfig+0xac>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a1d      	ldr	r2, [pc, #116]	; (800b3a4 <TIM_OC2_SetConfig+0x104>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d00b      	beq.n	800b34c <TIM_OC2_SetConfig+0xac>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a1c      	ldr	r2, [pc, #112]	; (800b3a8 <TIM_OC2_SetConfig+0x108>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d007      	beq.n	800b34c <TIM_OC2_SetConfig+0xac>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a1b      	ldr	r2, [pc, #108]	; (800b3ac <TIM_OC2_SetConfig+0x10c>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d003      	beq.n	800b34c <TIM_OC2_SetConfig+0xac>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a1a      	ldr	r2, [pc, #104]	; (800b3b0 <TIM_OC2_SetConfig+0x110>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d113      	bne.n	800b374 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b35a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	695b      	ldr	r3, [r3, #20]
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	4313      	orrs	r3, r2
 800b366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	4313      	orrs	r3, r2
 800b372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	621a      	str	r2, [r3, #32]
}
 800b38e:	bf00      	nop
 800b390:	371c      	adds	r7, #28
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	feff8fff 	.word	0xfeff8fff
 800b3a0:	40010000 	.word	0x40010000
 800b3a4:	40010400 	.word	0x40010400
 800b3a8:	40014000 	.word	0x40014000
 800b3ac:	40014400 	.word	0x40014400
 800b3b0:	40014800 	.word	0x40014800

0800b3b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	69db      	ldr	r3, [r3, #28]
 800b3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	4b33      	ldr	r3, [pc, #204]	; (800b4ac <TIM_OC3_SetConfig+0xf8>)
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f023 0303 	bic.w	r3, r3, #3
 800b3ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	021b      	lsls	r3, r3, #8
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	4313      	orrs	r3, r2
 800b408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a28      	ldr	r2, [pc, #160]	; (800b4b0 <TIM_OC3_SetConfig+0xfc>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d003      	beq.n	800b41a <TIM_OC3_SetConfig+0x66>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a27      	ldr	r2, [pc, #156]	; (800b4b4 <TIM_OC3_SetConfig+0x100>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d10d      	bne.n	800b436 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	021b      	lsls	r3, r3, #8
 800b428:	697a      	ldr	r2, [r7, #20]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a1d      	ldr	r2, [pc, #116]	; (800b4b0 <TIM_OC3_SetConfig+0xfc>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d00f      	beq.n	800b45e <TIM_OC3_SetConfig+0xaa>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a1c      	ldr	r2, [pc, #112]	; (800b4b4 <TIM_OC3_SetConfig+0x100>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d00b      	beq.n	800b45e <TIM_OC3_SetConfig+0xaa>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a1b      	ldr	r2, [pc, #108]	; (800b4b8 <TIM_OC3_SetConfig+0x104>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d007      	beq.n	800b45e <TIM_OC3_SetConfig+0xaa>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a1a      	ldr	r2, [pc, #104]	; (800b4bc <TIM_OC3_SetConfig+0x108>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d003      	beq.n	800b45e <TIM_OC3_SetConfig+0xaa>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a19      	ldr	r2, [pc, #100]	; (800b4c0 <TIM_OC3_SetConfig+0x10c>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d113      	bne.n	800b486 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b46c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	695b      	ldr	r3, [r3, #20]
 800b472:	011b      	lsls	r3, r3, #4
 800b474:	693a      	ldr	r2, [r7, #16]
 800b476:	4313      	orrs	r3, r2
 800b478:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	699b      	ldr	r3, [r3, #24]
 800b47e:	011b      	lsls	r3, r3, #4
 800b480:	693a      	ldr	r2, [r7, #16]
 800b482:	4313      	orrs	r3, r2
 800b484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	685a      	ldr	r2, [r3, #4]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	697a      	ldr	r2, [r7, #20]
 800b49e:	621a      	str	r2, [r3, #32]
}
 800b4a0:	bf00      	nop
 800b4a2:	371c      	adds	r7, #28
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr
 800b4ac:	fffeff8f 	.word	0xfffeff8f
 800b4b0:	40010000 	.word	0x40010000
 800b4b4:	40010400 	.word	0x40010400
 800b4b8:	40014000 	.word	0x40014000
 800b4bc:	40014400 	.word	0x40014400
 800b4c0:	40014800 	.word	0x40014800

0800b4c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a1b      	ldr	r3, [r3, #32]
 800b4d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a1b      	ldr	r3, [r3, #32]
 800b4de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	69db      	ldr	r3, [r3, #28]
 800b4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	4b24      	ldr	r3, [pc, #144]	; (800b580 <TIM_OC4_SetConfig+0xbc>)
 800b4f0:	4013      	ands	r3, r2
 800b4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	021b      	lsls	r3, r3, #8
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	4313      	orrs	r3, r2
 800b506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b50e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	031b      	lsls	r3, r3, #12
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	4313      	orrs	r3, r2
 800b51a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	4a19      	ldr	r2, [pc, #100]	; (800b584 <TIM_OC4_SetConfig+0xc0>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d00f      	beq.n	800b544 <TIM_OC4_SetConfig+0x80>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a18      	ldr	r2, [pc, #96]	; (800b588 <TIM_OC4_SetConfig+0xc4>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d00b      	beq.n	800b544 <TIM_OC4_SetConfig+0x80>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a17      	ldr	r2, [pc, #92]	; (800b58c <TIM_OC4_SetConfig+0xc8>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d007      	beq.n	800b544 <TIM_OC4_SetConfig+0x80>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4a16      	ldr	r2, [pc, #88]	; (800b590 <TIM_OC4_SetConfig+0xcc>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d003      	beq.n	800b544 <TIM_OC4_SetConfig+0x80>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	4a15      	ldr	r2, [pc, #84]	; (800b594 <TIM_OC4_SetConfig+0xd0>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d109      	bne.n	800b558 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b54a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	695b      	ldr	r3, [r3, #20]
 800b550:	019b      	lsls	r3, r3, #6
 800b552:	697a      	ldr	r2, [r7, #20]
 800b554:	4313      	orrs	r3, r2
 800b556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	685a      	ldr	r2, [r3, #4]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	621a      	str	r2, [r3, #32]
}
 800b572:	bf00      	nop
 800b574:	371c      	adds	r7, #28
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr
 800b57e:	bf00      	nop
 800b580:	feff8fff 	.word	0xfeff8fff
 800b584:	40010000 	.word	0x40010000
 800b588:	40010400 	.word	0x40010400
 800b58c:	40014000 	.word	0x40014000
 800b590:	40014400 	.word	0x40014400
 800b594:	40014800 	.word	0x40014800

0800b598 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b598:	b480      	push	{r7}
 800b59a:	b087      	sub	sp, #28
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a1b      	ldr	r3, [r3, #32]
 800b5a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a1b      	ldr	r3, [r3, #32]
 800b5b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	4b21      	ldr	r3, [pc, #132]	; (800b648 <TIM_OC5_SetConfig+0xb0>)
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b5d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	041b      	lsls	r3, r3, #16
 800b5e0:	693a      	ldr	r2, [r7, #16]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a18      	ldr	r2, [pc, #96]	; (800b64c <TIM_OC5_SetConfig+0xb4>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d00f      	beq.n	800b60e <TIM_OC5_SetConfig+0x76>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a17      	ldr	r2, [pc, #92]	; (800b650 <TIM_OC5_SetConfig+0xb8>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d00b      	beq.n	800b60e <TIM_OC5_SetConfig+0x76>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4a16      	ldr	r2, [pc, #88]	; (800b654 <TIM_OC5_SetConfig+0xbc>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d007      	beq.n	800b60e <TIM_OC5_SetConfig+0x76>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4a15      	ldr	r2, [pc, #84]	; (800b658 <TIM_OC5_SetConfig+0xc0>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d003      	beq.n	800b60e <TIM_OC5_SetConfig+0x76>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4a14      	ldr	r2, [pc, #80]	; (800b65c <TIM_OC5_SetConfig+0xc4>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d109      	bne.n	800b622 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b614:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	695b      	ldr	r3, [r3, #20]
 800b61a:	021b      	lsls	r3, r3, #8
 800b61c:	697a      	ldr	r2, [r7, #20]
 800b61e:	4313      	orrs	r3, r2
 800b620:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	697a      	ldr	r2, [r7, #20]
 800b626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	685a      	ldr	r2, [r3, #4]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	693a      	ldr	r2, [r7, #16]
 800b63a:	621a      	str	r2, [r3, #32]
}
 800b63c:	bf00      	nop
 800b63e:	371c      	adds	r7, #28
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr
 800b648:	fffeff8f 	.word	0xfffeff8f
 800b64c:	40010000 	.word	0x40010000
 800b650:	40010400 	.word	0x40010400
 800b654:	40014000 	.word	0x40014000
 800b658:	40014400 	.word	0x40014400
 800b65c:	40014800 	.word	0x40014800

0800b660 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b660:	b480      	push	{r7}
 800b662:	b087      	sub	sp, #28
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	4b22      	ldr	r3, [pc, #136]	; (800b714 <TIM_OC6_SetConfig+0xb4>)
 800b68c:	4013      	ands	r3, r2
 800b68e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	021b      	lsls	r3, r3, #8
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	4313      	orrs	r3, r2
 800b69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b6a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	051b      	lsls	r3, r3, #20
 800b6aa:	693a      	ldr	r2, [r7, #16]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a19      	ldr	r2, [pc, #100]	; (800b718 <TIM_OC6_SetConfig+0xb8>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d00f      	beq.n	800b6d8 <TIM_OC6_SetConfig+0x78>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a18      	ldr	r2, [pc, #96]	; (800b71c <TIM_OC6_SetConfig+0xbc>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d00b      	beq.n	800b6d8 <TIM_OC6_SetConfig+0x78>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a17      	ldr	r2, [pc, #92]	; (800b720 <TIM_OC6_SetConfig+0xc0>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d007      	beq.n	800b6d8 <TIM_OC6_SetConfig+0x78>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a16      	ldr	r2, [pc, #88]	; (800b724 <TIM_OC6_SetConfig+0xc4>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d003      	beq.n	800b6d8 <TIM_OC6_SetConfig+0x78>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a15      	ldr	r2, [pc, #84]	; (800b728 <TIM_OC6_SetConfig+0xc8>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d109      	bne.n	800b6ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	695b      	ldr	r3, [r3, #20]
 800b6e4:	029b      	lsls	r3, r3, #10
 800b6e6:	697a      	ldr	r2, [r7, #20]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	621a      	str	r2, [r3, #32]
}
 800b706:	bf00      	nop
 800b708:	371c      	adds	r7, #28
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	feff8fff 	.word	0xfeff8fff
 800b718:	40010000 	.word	0x40010000
 800b71c:	40010400 	.word	0x40010400
 800b720:	40014000 	.word	0x40014000
 800b724:	40014400 	.word	0x40014400
 800b728:	40014800 	.word	0x40014800

0800b72c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b087      	sub	sp, #28
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6a1b      	ldr	r3, [r3, #32]
 800b73c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6a1b      	ldr	r3, [r3, #32]
 800b742:	f023 0201 	bic.w	r2, r3, #1
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	699b      	ldr	r3, [r3, #24]
 800b74e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	011b      	lsls	r3, r3, #4
 800b75c:	693a      	ldr	r2, [r7, #16]
 800b75e:	4313      	orrs	r3, r2
 800b760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	f023 030a 	bic.w	r3, r3, #10
 800b768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	4313      	orrs	r3, r2
 800b770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	693a      	ldr	r2, [r7, #16]
 800b776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	621a      	str	r2, [r3, #32]
}
 800b77e:	bf00      	nop
 800b780:	371c      	adds	r7, #28
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b78a:	b480      	push	{r7}
 800b78c:	b087      	sub	sp, #28
 800b78e:	af00      	add	r7, sp, #0
 800b790:	60f8      	str	r0, [r7, #12]
 800b792:	60b9      	str	r1, [r7, #8]
 800b794:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	f023 0210 	bic.w	r2, r3, #16
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6a1b      	ldr	r3, [r3, #32]
 800b7ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	031b      	lsls	r3, r3, #12
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	011b      	lsls	r3, r3, #4
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	697a      	ldr	r2, [r7, #20]
 800b7d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	621a      	str	r2, [r3, #32]
}
 800b7de:	bf00      	nop
 800b7e0:	371c      	adds	r7, #28
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
	...

0800b7ec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	4b09      	ldr	r3, [pc, #36]	; (800b824 <TIM_ITRx_SetConfig+0x38>)
 800b800:	4013      	ands	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	4313      	orrs	r3, r2
 800b80a:	f043 0307 	orr.w	r3, r3, #7
 800b80e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	609a      	str	r2, [r3, #8]
}
 800b816:	bf00      	nop
 800b818:	3714      	adds	r7, #20
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	ffcfff8f 	.word	0xffcfff8f

0800b828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b828:	b480      	push	{r7}
 800b82a:	b087      	sub	sp, #28
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
 800b834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	021a      	lsls	r2, r3, #8
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	431a      	orrs	r2, r3
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	4313      	orrs	r3, r2
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	4313      	orrs	r3, r2
 800b854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	697a      	ldr	r2, [r7, #20]
 800b85a:	609a      	str	r2, [r3, #8]
}
 800b85c:	bf00      	nop
 800b85e:	371c      	adds	r7, #28
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b868:	b480      	push	{r7}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	f003 031f 	and.w	r3, r3, #31
 800b87a:	2201      	movs	r2, #1
 800b87c:	fa02 f303 	lsl.w	r3, r2, r3
 800b880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	6a1a      	ldr	r2, [r3, #32]
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	43db      	mvns	r3, r3
 800b88a:	401a      	ands	r2, r3
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6a1a      	ldr	r2, [r3, #32]
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	f003 031f 	and.w	r3, r3, #31
 800b89a:	6879      	ldr	r1, [r7, #4]
 800b89c:	fa01 f303 	lsl.w	r3, r1, r3
 800b8a0:	431a      	orrs	r2, r3
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	621a      	str	r2, [r3, #32]
}
 800b8a6:	bf00      	nop
 800b8a8:	371c      	adds	r7, #28
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr
	...

0800b8b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d101      	bne.n	800b8cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	e077      	b.n	800b9bc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2202      	movs	r2, #2
 800b8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a35      	ldr	r2, [pc, #212]	; (800b9c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d004      	beq.n	800b900 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a34      	ldr	r2, [pc, #208]	; (800b9cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d108      	bne.n	800b912 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b906:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	4313      	orrs	r3, r2
 800b910:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b918:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	4313      	orrs	r3, r2
 800b922:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a25      	ldr	r2, [pc, #148]	; (800b9c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d02c      	beq.n	800b990 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b93e:	d027      	beq.n	800b990 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a22      	ldr	r2, [pc, #136]	; (800b9d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d022      	beq.n	800b990 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a21      	ldr	r2, [pc, #132]	; (800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d01d      	beq.n	800b990 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a1f      	ldr	r2, [pc, #124]	; (800b9d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d018      	beq.n	800b990 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a1a      	ldr	r2, [pc, #104]	; (800b9cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d013      	beq.n	800b990 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a1b      	ldr	r2, [pc, #108]	; (800b9dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d00e      	beq.n	800b990 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a1a      	ldr	r2, [pc, #104]	; (800b9e0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d009      	beq.n	800b990 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a18      	ldr	r2, [pc, #96]	; (800b9e4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d004      	beq.n	800b990 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a17      	ldr	r2, [pc, #92]	; (800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d10c      	bne.n	800b9aa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b996:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3714      	adds	r7, #20
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr
 800b9c8:	40010000 	.word	0x40010000
 800b9cc:	40010400 	.word	0x40010400
 800b9d0:	40000400 	.word	0x40000400
 800b9d4:	40000800 	.word	0x40000800
 800b9d8:	40000c00 	.word	0x40000c00
 800b9dc:	40001800 	.word	0x40001800
 800b9e0:	40014000 	.word	0x40014000
 800b9e4:	4000e000 	.word	0x4000e000
 800b9e8:	4000e400 	.word	0x4000e400

0800b9ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d101      	bne.n	800ba08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ba04:	2302      	movs	r3, #2
 800ba06:	e087      	b.n	800bb18 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	691b      	ldr	r3, [r3, #16]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	699b      	ldr	r3, [r3, #24]
 800ba7c:	041b      	lsls	r3, r3, #16
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a27      	ldr	r2, [pc, #156]	; (800bb24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d004      	beq.n	800ba96 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a25      	ldr	r2, [pc, #148]	; (800bb28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d106      	bne.n	800baa4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	69db      	ldr	r3, [r3, #28]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a1e      	ldr	r2, [pc, #120]	; (800bb24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d004      	beq.n	800bab8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a1d      	ldr	r2, [pc, #116]	; (800bb28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d126      	bne.n	800bb06 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac2:	051b      	lsls	r3, r3, #20
 800bac4:	4313      	orrs	r3, r2
 800bac6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae0:	4313      	orrs	r3, r2
 800bae2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a0e      	ldr	r2, [pc, #56]	; (800bb24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d004      	beq.n	800baf8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a0d      	ldr	r2, [pc, #52]	; (800bb28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d106      	bne.n	800bb06 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb02:	4313      	orrs	r3, r2
 800bb04:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3714      	adds	r7, #20
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr
 800bb24:	40010000 	.word	0x40010000
 800bb28:	40010400 	.word	0x40010400

0800bb2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d101      	bne.n	800bb7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e042      	b.n	800bc00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d106      	bne.n	800bb92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f7f8 fcc9 	bl	8004524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2224      	movs	r2, #36	; 0x24
 800bb96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f022 0201 	bic.w	r2, r2, #1
 800bba8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fcdc 	bl	800c568 <UART_SetConfig>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d101      	bne.n	800bbba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e022      	b.n	800bc00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d002      	beq.n	800bbc8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f001 fb3c 	bl	800d240 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	685a      	ldr	r2, [r3, #4]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	689a      	ldr	r2, [r3, #8]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f042 0201 	orr.w	r2, r2, #1
 800bbf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f001 fbc3 	bl	800d384 <UART_CheckIdleState>
 800bbfe:	4603      	mov	r3, r0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b08a      	sub	sp, #40	; 0x28
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	4613      	mov	r3, r2
 800bc14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc1c:	2b20      	cmp	r3, #32
 800bc1e:	d17a      	bne.n	800bd16 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d002      	beq.n	800bc2c <HAL_UART_Transmit_DMA+0x24>
 800bc26:	88fb      	ldrh	r3, [r7, #6]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e073      	b.n	800bd18 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d101      	bne.n	800bc3e <HAL_UART_Transmit_DMA+0x36>
 800bc3a:	2302      	movs	r3, #2
 800bc3c:	e06c      	b.n	800bd18 <HAL_UART_Transmit_DMA+0x110>
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2201      	movs	r2, #1
 800bc42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	68ba      	ldr	r2, [r7, #8]
 800bc4a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	88fa      	ldrh	r2, [r7, #6]
 800bc50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	88fa      	ldrh	r2, [r7, #6]
 800bc58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2221      	movs	r2, #33	; 0x21
 800bc68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d02c      	beq.n	800bcce <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc78:	4a29      	ldr	r2, [pc, #164]	; (800bd20 <HAL_UART_Transmit_DMA+0x118>)
 800bc7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc80:	4a28      	ldr	r2, [pc, #160]	; (800bd24 <HAL_UART_Transmit_DMA+0x11c>)
 800bc82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc88:	4a27      	ldr	r2, [pc, #156]	; (800bd28 <HAL_UART_Transmit_DMA+0x120>)
 800bc8a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc90:	2200      	movs	r2, #0
 800bc92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	3328      	adds	r3, #40	; 0x28
 800bca4:	461a      	mov	r2, r3
 800bca6:	88fb      	ldrh	r3, [r7, #6]
 800bca8:	f7f9 fb5e 	bl	8005368 <HAL_DMA_Start_IT>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00d      	beq.n	800bcce <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2210      	movs	r2, #16
 800bcb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2220      	movs	r2, #32
 800bcc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bcca:	2301      	movs	r3, #1
 800bccc:	e024      	b.n	800bd18 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2240      	movs	r2, #64	; 0x40
 800bcd4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	3308      	adds	r3, #8
 800bce4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	e853 3f00 	ldrex	r3, [r3]
 800bcec:	613b      	str	r3, [r7, #16]
   return(result);
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcf4:	627b      	str	r3, [r7, #36]	; 0x24
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	3308      	adds	r3, #8
 800bcfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcfe:	623a      	str	r2, [r7, #32]
 800bd00:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd02:	69f9      	ldr	r1, [r7, #28]
 800bd04:	6a3a      	ldr	r2, [r7, #32]
 800bd06:	e841 2300 	strex	r3, r2, [r1]
 800bd0a:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1e5      	bne.n	800bcde <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800bd12:	2300      	movs	r3, #0
 800bd14:	e000      	b.n	800bd18 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800bd16:	2302      	movs	r3, #2
  }
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3728      	adds	r7, #40	; 0x28
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	0800d84d 	.word	0x0800d84d
 800bd24:	0800d8e3 	.word	0x0800d8e3
 800bd28:	0800da59 	.word	0x0800da59

0800bd2c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b08a      	sub	sp, #40	; 0x28
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	4613      	mov	r3, r2
 800bd38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd40:	2b20      	cmp	r3, #32
 800bd42:	d142      	bne.n	800bdca <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d002      	beq.n	800bd50 <HAL_UART_Receive_DMA+0x24>
 800bd4a:	88fb      	ldrh	r3, [r7, #6]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d101      	bne.n	800bd54 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	e03b      	b.n	800bdcc <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d101      	bne.n	800bd62 <HAL_UART_Receive_DMA+0x36>
 800bd5e:	2302      	movs	r3, #2
 800bd60:	e034      	b.n	800bdcc <HAL_UART_Receive_DMA+0xa0>
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2201      	movs	r2, #1
 800bd66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a17      	ldr	r2, [pc, #92]	; (800bdd4 <HAL_UART_Receive_DMA+0xa8>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d01f      	beq.n	800bdba <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d018      	beq.n	800bdba <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	e853 3f00 	ldrex	r3, [r3]
 800bd94:	613b      	str	r3, [r7, #16]
   return(result);
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd9c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	461a      	mov	r2, r3
 800bda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda6:	623b      	str	r3, [r7, #32]
 800bda8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdaa:	69f9      	ldr	r1, [r7, #28]
 800bdac:	6a3a      	ldr	r2, [r7, #32]
 800bdae:	e841 2300 	strex	r3, r2, [r1]
 800bdb2:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1e6      	bne.n	800bd88 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bdba:	88fb      	ldrh	r3, [r7, #6]
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	68b9      	ldr	r1, [r7, #8]
 800bdc0:	68f8      	ldr	r0, [r7, #12]
 800bdc2:	f001 fbf3 	bl	800d5ac <UART_Start_Receive_DMA>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	e000      	b.n	800bdcc <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bdca:	2302      	movs	r3, #2
  }
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3728      	adds	r7, #40	; 0x28
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	58000c00 	.word	0x58000c00

0800bdd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b0ba      	sub	sp, #232	; 0xe8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	69db      	ldr	r3, [r3, #28]
 800bde6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bdfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800be02:	f640 030f 	movw	r3, #2063	; 0x80f
 800be06:	4013      	ands	r3, r2
 800be08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800be0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be10:	2b00      	cmp	r3, #0
 800be12:	d11b      	bne.n	800be4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be18:	f003 0320 	and.w	r3, r3, #32
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d015      	beq.n	800be4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be24:	f003 0320 	and.w	r3, r3, #32
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d105      	bne.n	800be38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be34:	2b00      	cmp	r3, #0
 800be36:	d009      	beq.n	800be4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f000 835a 	beq.w	800c4f6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	4798      	blx	r3
      }
      return;
 800be4a:	e354      	b.n	800c4f6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 811f 	beq.w	800c094 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800be56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800be5a:	4b8b      	ldr	r3, [pc, #556]	; (800c088 <HAL_UART_IRQHandler+0x2b0>)
 800be5c:	4013      	ands	r3, r2
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d106      	bne.n	800be70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800be62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800be66:	4b89      	ldr	r3, [pc, #548]	; (800c08c <HAL_UART_IRQHandler+0x2b4>)
 800be68:	4013      	ands	r3, r2
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f000 8112 	beq.w	800c094 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be74:	f003 0301 	and.w	r3, r3, #1
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d011      	beq.n	800bea0 <HAL_UART_IRQHandler+0xc8>
 800be7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00b      	beq.n	800bea0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2201      	movs	r2, #1
 800be8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be96:	f043 0201 	orr.w	r2, r3, #1
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bea4:	f003 0302 	and.w	r3, r3, #2
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d011      	beq.n	800bed0 <HAL_UART_IRQHandler+0xf8>
 800beac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00b      	beq.n	800bed0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2202      	movs	r2, #2
 800bebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bec6:	f043 0204 	orr.w	r2, r3, #4
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bed4:	f003 0304 	and.w	r3, r3, #4
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d011      	beq.n	800bf00 <HAL_UART_IRQHandler+0x128>
 800bedc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bee0:	f003 0301 	and.w	r3, r3, #1
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00b      	beq.n	800bf00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2204      	movs	r2, #4
 800beee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bef6:	f043 0202 	orr.w	r2, r3, #2
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bf00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf04:	f003 0308 	and.w	r3, r3, #8
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d017      	beq.n	800bf3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf10:	f003 0320 	and.w	r3, r3, #32
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d105      	bne.n	800bf24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bf18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bf1c:	4b5a      	ldr	r3, [pc, #360]	; (800c088 <HAL_UART_IRQHandler+0x2b0>)
 800bf1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00b      	beq.n	800bf3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2208      	movs	r2, #8
 800bf2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf32:	f043 0208 	orr.w	r2, r3, #8
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bf3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d012      	beq.n	800bf6e <HAL_UART_IRQHandler+0x196>
 800bf48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00c      	beq.n	800bf6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf64:	f043 0220 	orr.w	r2, r3, #32
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f000 82c0 	beq.w	800c4fa <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf7e:	f003 0320 	and.w	r3, r3, #32
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d013      	beq.n	800bfae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf8a:	f003 0320 	and.w	r3, r3, #32
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d105      	bne.n	800bf9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d007      	beq.n	800bfae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d003      	beq.n	800bfae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc2:	2b40      	cmp	r3, #64	; 0x40
 800bfc4:	d005      	beq.n	800bfd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bfc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bfca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d04f      	beq.n	800c072 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f001 fbd4 	bl	800d780 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfe2:	2b40      	cmp	r3, #64	; 0x40
 800bfe4:	d141      	bne.n	800c06a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	3308      	adds	r3, #8
 800bfec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bff4:	e853 3f00 	ldrex	r3, [r3]
 800bff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	3308      	adds	r3, #8
 800c00e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c012:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c01e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c022:	e841 2300 	strex	r3, r2, [r1]
 800c026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c02a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1d9      	bne.n	800bfe6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c036:	2b00      	cmp	r3, #0
 800c038:	d013      	beq.n	800c062 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c03e:	4a14      	ldr	r2, [pc, #80]	; (800c090 <HAL_UART_IRQHandler+0x2b8>)
 800c040:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c046:	4618      	mov	r0, r3
 800c048:	f7f9 ff16 	bl	8005e78 <HAL_DMA_Abort_IT>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d017      	beq.n	800c082 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c05c:	4610      	mov	r0, r2
 800c05e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c060:	e00f      	b.n	800c082 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fa6a 	bl	800c53c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c068:	e00b      	b.n	800c082 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fa66 	bl	800c53c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c070:	e007      	b.n	800c082 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fa62 	bl	800c53c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c080:	e23b      	b.n	800c4fa <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c082:	bf00      	nop
    return;
 800c084:	e239      	b.n	800c4fa <HAL_UART_IRQHandler+0x722>
 800c086:	bf00      	nop
 800c088:	10000001 	.word	0x10000001
 800c08c:	04000120 	.word	0x04000120
 800c090:	0800dad9 	.word	0x0800dad9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c098:	2b01      	cmp	r3, #1
 800c09a:	f040 81ce 	bne.w	800c43a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c09e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0a2:	f003 0310 	and.w	r3, r3, #16
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f000 81c7 	beq.w	800c43a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c0ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0b0:	f003 0310 	and.w	r3, r3, #16
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f000 81c0 	beq.w	800c43a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2210      	movs	r2, #16
 800c0c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0cc:	2b40      	cmp	r3, #64	; 0x40
 800c0ce:	f040 813b 	bne.w	800c348 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a8b      	ldr	r2, [pc, #556]	; (800c308 <HAL_UART_IRQHandler+0x530>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d059      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a89      	ldr	r2, [pc, #548]	; (800c30c <HAL_UART_IRQHandler+0x534>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d053      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a87      	ldr	r2, [pc, #540]	; (800c310 <HAL_UART_IRQHandler+0x538>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d04d      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a85      	ldr	r2, [pc, #532]	; (800c314 <HAL_UART_IRQHandler+0x53c>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d047      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a83      	ldr	r2, [pc, #524]	; (800c318 <HAL_UART_IRQHandler+0x540>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d041      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a81      	ldr	r2, [pc, #516]	; (800c31c <HAL_UART_IRQHandler+0x544>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d03b      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a7f      	ldr	r2, [pc, #508]	; (800c320 <HAL_UART_IRQHandler+0x548>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d035      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a7d      	ldr	r2, [pc, #500]	; (800c324 <HAL_UART_IRQHandler+0x54c>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d02f      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a7b      	ldr	r2, [pc, #492]	; (800c328 <HAL_UART_IRQHandler+0x550>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d029      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a79      	ldr	r2, [pc, #484]	; (800c32c <HAL_UART_IRQHandler+0x554>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d023      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a77      	ldr	r2, [pc, #476]	; (800c330 <HAL_UART_IRQHandler+0x558>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d01d      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a75      	ldr	r2, [pc, #468]	; (800c334 <HAL_UART_IRQHandler+0x55c>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d017      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a73      	ldr	r2, [pc, #460]	; (800c338 <HAL_UART_IRQHandler+0x560>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d011      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a71      	ldr	r2, [pc, #452]	; (800c33c <HAL_UART_IRQHandler+0x564>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d00b      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a6f      	ldr	r2, [pc, #444]	; (800c340 <HAL_UART_IRQHandler+0x568>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d005      	beq.n	800c192 <HAL_UART_IRQHandler+0x3ba>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a6d      	ldr	r2, [pc, #436]	; (800c344 <HAL_UART_IRQHandler+0x56c>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d105      	bne.n	800c19e <HAL_UART_IRQHandler+0x3c6>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	e004      	b.n	800c1a8 <HAL_UART_IRQHandler+0x3d0>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c1ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f000 81a4 	beq.w	800c4fe <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c1bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	f080 819c 	bcs.w	800c4fe <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1d4:	69db      	ldr	r3, [r3, #28]
 800c1d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1da:	f000 8086 	beq.w	800c2ea <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c1ea:	e853 3f00 	ldrex	r3, [r3]
 800c1ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c1f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c1f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	461a      	mov	r2, r3
 800c204:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c208:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c20c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c210:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c214:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c218:	e841 2300 	strex	r3, r2, [r1]
 800c21c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c224:	2b00      	cmp	r3, #0
 800c226:	d1da      	bne.n	800c1de <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	3308      	adds	r3, #8
 800c22e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c232:	e853 3f00 	ldrex	r3, [r3]
 800c236:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c23a:	f023 0301 	bic.w	r3, r3, #1
 800c23e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	3308      	adds	r3, #8
 800c248:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c24c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c250:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c252:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c254:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c258:	e841 2300 	strex	r3, r2, [r1]
 800c25c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c25e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c260:	2b00      	cmp	r3, #0
 800c262:	d1e1      	bne.n	800c228 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	3308      	adds	r3, #8
 800c26a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c26e:	e853 3f00 	ldrex	r3, [r3]
 800c272:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c27a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	3308      	adds	r3, #8
 800c284:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c288:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c28a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c28e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c290:	e841 2300 	strex	r3, r2, [r1]
 800c294:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c296:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1e3      	bne.n	800c264 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2220      	movs	r2, #32
 800c2a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2b2:	e853 3f00 	ldrex	r3, [r3]
 800c2b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c2b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2ba:	f023 0310 	bic.w	r3, r3, #16
 800c2be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c2d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2d4:	e841 2300 	strex	r3, r2, [r1]
 800c2d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1e4      	bne.n	800c2aa <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7f9 faa9 	bl	800583c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f926 	bl	800c550 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c304:	e0fb      	b.n	800c4fe <HAL_UART_IRQHandler+0x726>
 800c306:	bf00      	nop
 800c308:	40020010 	.word	0x40020010
 800c30c:	40020028 	.word	0x40020028
 800c310:	40020040 	.word	0x40020040
 800c314:	40020058 	.word	0x40020058
 800c318:	40020070 	.word	0x40020070
 800c31c:	40020088 	.word	0x40020088
 800c320:	400200a0 	.word	0x400200a0
 800c324:	400200b8 	.word	0x400200b8
 800c328:	40020410 	.word	0x40020410
 800c32c:	40020428 	.word	0x40020428
 800c330:	40020440 	.word	0x40020440
 800c334:	40020458 	.word	0x40020458
 800c338:	40020470 	.word	0x40020470
 800c33c:	40020488 	.word	0x40020488
 800c340:	400204a0 	.word	0x400204a0
 800c344:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c354:	b29b      	uxth	r3, r3
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c362:	b29b      	uxth	r3, r3
 800c364:	2b00      	cmp	r3, #0
 800c366:	f000 80cc 	beq.w	800c502 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c36a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f000 80c7 	beq.w	800c502 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37c:	e853 3f00 	ldrex	r3, [r3]
 800c380:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c384:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	461a      	mov	r2, r3
 800c392:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c396:	647b      	str	r3, [r7, #68]	; 0x44
 800c398:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c39a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c39c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c39e:	e841 2300 	strex	r3, r2, [r1]
 800c3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1e4      	bne.n	800c374 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	3308      	adds	r3, #8
 800c3b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b4:	e853 3f00 	ldrex	r3, [r3]
 800c3b8:	623b      	str	r3, [r7, #32]
   return(result);
 800c3ba:	6a3a      	ldr	r2, [r7, #32]
 800c3bc:	4b54      	ldr	r3, [pc, #336]	; (800c510 <HAL_UART_IRQHandler+0x738>)
 800c3be:	4013      	ands	r3, r2
 800c3c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	3308      	adds	r3, #8
 800c3ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c3ce:	633a      	str	r2, [r7, #48]	; 0x30
 800c3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3d6:	e841 2300 	strex	r3, r2, [r1]
 800c3da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1e3      	bne.n	800c3aa <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2220      	movs	r2, #32
 800c3e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	e853 3f00 	ldrex	r3, [r3]
 800c402:	60fb      	str	r3, [r7, #12]
   return(result);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f023 0310 	bic.w	r3, r3, #16
 800c40a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	461a      	mov	r2, r3
 800c414:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c418:	61fb      	str	r3, [r7, #28]
 800c41a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41c:	69b9      	ldr	r1, [r7, #24]
 800c41e:	69fa      	ldr	r2, [r7, #28]
 800c420:	e841 2300 	strex	r3, r2, [r1]
 800c424:	617b      	str	r3, [r7, #20]
   return(result);
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1e4      	bne.n	800c3f6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c42c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c430:	4619      	mov	r1, r3
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 f88c 	bl	800c550 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c438:	e063      	b.n	800c502 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c43a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c43e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00e      	beq.n	800c464 <HAL_UART_IRQHandler+0x68c>
 800c446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c44a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d008      	beq.n	800c464 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c45a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f001 fb7c 	bl	800db5a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c462:	e051      	b.n	800c508 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d014      	beq.n	800c49a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d105      	bne.n	800c488 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c47c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d008      	beq.n	800c49a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d03a      	beq.n	800c506 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	4798      	blx	r3
    }
    return;
 800c498:	e035      	b.n	800c506 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c49a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d009      	beq.n	800c4ba <HAL_UART_IRQHandler+0x6e2>
 800c4a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d003      	beq.n	800c4ba <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f001 fb26 	bl	800db04 <UART_EndTransmit_IT>
    return;
 800c4b8:	e026      	b.n	800c508 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c4ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d009      	beq.n	800c4da <HAL_UART_IRQHandler+0x702>
 800c4c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d003      	beq.n	800c4da <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f001 fb55 	bl	800db82 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4d8:	e016      	b.n	800c508 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c4da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d010      	beq.n	800c508 <HAL_UART_IRQHandler+0x730>
 800c4e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	da0c      	bge.n	800c508 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f001 fb3d 	bl	800db6e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4f4:	e008      	b.n	800c508 <HAL_UART_IRQHandler+0x730>
      return;
 800c4f6:	bf00      	nop
 800c4f8:	e006      	b.n	800c508 <HAL_UART_IRQHandler+0x730>
    return;
 800c4fa:	bf00      	nop
 800c4fc:	e004      	b.n	800c508 <HAL_UART_IRQHandler+0x730>
      return;
 800c4fe:	bf00      	nop
 800c500:	e002      	b.n	800c508 <HAL_UART_IRQHandler+0x730>
      return;
 800c502:	bf00      	nop
 800c504:	e000      	b.n	800c508 <HAL_UART_IRQHandler+0x730>
    return;
 800c506:	bf00      	nop
  }
}
 800c508:	37e8      	adds	r7, #232	; 0xe8
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	effffffe 	.word	0xeffffffe

0800c514 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c51c:	bf00      	nop
 800c51e:	370c      	adds	r7, #12
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c530:	bf00      	nop
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c544:	bf00      	nop
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	460b      	mov	r3, r1
 800c55a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c55c:	bf00      	nop
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c56c:	b092      	sub	sp, #72	; 0x48
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	689a      	ldr	r2, [r3, #8]
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	691b      	ldr	r3, [r3, #16]
 800c580:	431a      	orrs	r2, r3
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	695b      	ldr	r3, [r3, #20]
 800c586:	431a      	orrs	r2, r3
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	69db      	ldr	r3, [r3, #28]
 800c58c:	4313      	orrs	r3, r2
 800c58e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	4bbe      	ldr	r3, [pc, #760]	; (800c890 <UART_SetConfig+0x328>)
 800c598:	4013      	ands	r3, r2
 800c59a:	697a      	ldr	r2, [r7, #20]
 800c59c:	6812      	ldr	r2, [r2, #0]
 800c59e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c5a0:	430b      	orrs	r3, r1
 800c5a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	68da      	ldr	r2, [r3, #12]
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	430a      	orrs	r2, r1
 800c5b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	699b      	ldr	r3, [r3, #24]
 800c5be:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4ab3      	ldr	r2, [pc, #716]	; (800c894 <UART_SetConfig+0x32c>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d004      	beq.n	800c5d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689a      	ldr	r2, [r3, #8]
 800c5da:	4baf      	ldr	r3, [pc, #700]	; (800c898 <UART_SetConfig+0x330>)
 800c5dc:	4013      	ands	r3, r2
 800c5de:	697a      	ldr	r2, [r7, #20]
 800c5e0:	6812      	ldr	r2, [r2, #0]
 800c5e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c5e4:	430b      	orrs	r3, r1
 800c5e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ee:	f023 010f 	bic.w	r1, r3, #15
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4aa6      	ldr	r2, [pc, #664]	; (800c89c <UART_SetConfig+0x334>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d177      	bne.n	800c6f8 <UART_SetConfig+0x190>
 800c608:	4ba5      	ldr	r3, [pc, #660]	; (800c8a0 <UART_SetConfig+0x338>)
 800c60a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c60c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c610:	2b28      	cmp	r3, #40	; 0x28
 800c612:	d86d      	bhi.n	800c6f0 <UART_SetConfig+0x188>
 800c614:	a201      	add	r2, pc, #4	; (adr r2, 800c61c <UART_SetConfig+0xb4>)
 800c616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c61a:	bf00      	nop
 800c61c:	0800c6c1 	.word	0x0800c6c1
 800c620:	0800c6f1 	.word	0x0800c6f1
 800c624:	0800c6f1 	.word	0x0800c6f1
 800c628:	0800c6f1 	.word	0x0800c6f1
 800c62c:	0800c6f1 	.word	0x0800c6f1
 800c630:	0800c6f1 	.word	0x0800c6f1
 800c634:	0800c6f1 	.word	0x0800c6f1
 800c638:	0800c6f1 	.word	0x0800c6f1
 800c63c:	0800c6c9 	.word	0x0800c6c9
 800c640:	0800c6f1 	.word	0x0800c6f1
 800c644:	0800c6f1 	.word	0x0800c6f1
 800c648:	0800c6f1 	.word	0x0800c6f1
 800c64c:	0800c6f1 	.word	0x0800c6f1
 800c650:	0800c6f1 	.word	0x0800c6f1
 800c654:	0800c6f1 	.word	0x0800c6f1
 800c658:	0800c6f1 	.word	0x0800c6f1
 800c65c:	0800c6d1 	.word	0x0800c6d1
 800c660:	0800c6f1 	.word	0x0800c6f1
 800c664:	0800c6f1 	.word	0x0800c6f1
 800c668:	0800c6f1 	.word	0x0800c6f1
 800c66c:	0800c6f1 	.word	0x0800c6f1
 800c670:	0800c6f1 	.word	0x0800c6f1
 800c674:	0800c6f1 	.word	0x0800c6f1
 800c678:	0800c6f1 	.word	0x0800c6f1
 800c67c:	0800c6d9 	.word	0x0800c6d9
 800c680:	0800c6f1 	.word	0x0800c6f1
 800c684:	0800c6f1 	.word	0x0800c6f1
 800c688:	0800c6f1 	.word	0x0800c6f1
 800c68c:	0800c6f1 	.word	0x0800c6f1
 800c690:	0800c6f1 	.word	0x0800c6f1
 800c694:	0800c6f1 	.word	0x0800c6f1
 800c698:	0800c6f1 	.word	0x0800c6f1
 800c69c:	0800c6e1 	.word	0x0800c6e1
 800c6a0:	0800c6f1 	.word	0x0800c6f1
 800c6a4:	0800c6f1 	.word	0x0800c6f1
 800c6a8:	0800c6f1 	.word	0x0800c6f1
 800c6ac:	0800c6f1 	.word	0x0800c6f1
 800c6b0:	0800c6f1 	.word	0x0800c6f1
 800c6b4:	0800c6f1 	.word	0x0800c6f1
 800c6b8:	0800c6f1 	.word	0x0800c6f1
 800c6bc:	0800c6e9 	.word	0x0800c6e9
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6c6:	e326      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c6c8:	2304      	movs	r3, #4
 800c6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ce:	e322      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c6d0:	2308      	movs	r3, #8
 800c6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6d6:	e31e      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c6d8:	2310      	movs	r3, #16
 800c6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6de:	e31a      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c6e0:	2320      	movs	r3, #32
 800c6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6e6:	e316      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c6e8:	2340      	movs	r3, #64	; 0x40
 800c6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ee:	e312      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c6f0:	2380      	movs	r3, #128	; 0x80
 800c6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6f6:	e30e      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a69      	ldr	r2, [pc, #420]	; (800c8a4 <UART_SetConfig+0x33c>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d130      	bne.n	800c764 <UART_SetConfig+0x1fc>
 800c702:	4b67      	ldr	r3, [pc, #412]	; (800c8a0 <UART_SetConfig+0x338>)
 800c704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c706:	f003 0307 	and.w	r3, r3, #7
 800c70a:	2b05      	cmp	r3, #5
 800c70c:	d826      	bhi.n	800c75c <UART_SetConfig+0x1f4>
 800c70e:	a201      	add	r2, pc, #4	; (adr r2, 800c714 <UART_SetConfig+0x1ac>)
 800c710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c714:	0800c72d 	.word	0x0800c72d
 800c718:	0800c735 	.word	0x0800c735
 800c71c:	0800c73d 	.word	0x0800c73d
 800c720:	0800c745 	.word	0x0800c745
 800c724:	0800c74d 	.word	0x0800c74d
 800c728:	0800c755 	.word	0x0800c755
 800c72c:	2300      	movs	r3, #0
 800c72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c732:	e2f0      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c734:	2304      	movs	r3, #4
 800c736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c73a:	e2ec      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c73c:	2308      	movs	r3, #8
 800c73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c742:	e2e8      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c744:	2310      	movs	r3, #16
 800c746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74a:	e2e4      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c74c:	2320      	movs	r3, #32
 800c74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c752:	e2e0      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c754:	2340      	movs	r3, #64	; 0x40
 800c756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c75a:	e2dc      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c75c:	2380      	movs	r3, #128	; 0x80
 800c75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c762:	e2d8      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a4f      	ldr	r2, [pc, #316]	; (800c8a8 <UART_SetConfig+0x340>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d130      	bne.n	800c7d0 <UART_SetConfig+0x268>
 800c76e:	4b4c      	ldr	r3, [pc, #304]	; (800c8a0 <UART_SetConfig+0x338>)
 800c770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c772:	f003 0307 	and.w	r3, r3, #7
 800c776:	2b05      	cmp	r3, #5
 800c778:	d826      	bhi.n	800c7c8 <UART_SetConfig+0x260>
 800c77a:	a201      	add	r2, pc, #4	; (adr r2, 800c780 <UART_SetConfig+0x218>)
 800c77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c780:	0800c799 	.word	0x0800c799
 800c784:	0800c7a1 	.word	0x0800c7a1
 800c788:	0800c7a9 	.word	0x0800c7a9
 800c78c:	0800c7b1 	.word	0x0800c7b1
 800c790:	0800c7b9 	.word	0x0800c7b9
 800c794:	0800c7c1 	.word	0x0800c7c1
 800c798:	2300      	movs	r3, #0
 800c79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c79e:	e2ba      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c7a0:	2304      	movs	r3, #4
 800c7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7a6:	e2b6      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c7a8:	2308      	movs	r3, #8
 800c7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ae:	e2b2      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c7b0:	2310      	movs	r3, #16
 800c7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7b6:	e2ae      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c7b8:	2320      	movs	r3, #32
 800c7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7be:	e2aa      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c7c0:	2340      	movs	r3, #64	; 0x40
 800c7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7c6:	e2a6      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c7c8:	2380      	movs	r3, #128	; 0x80
 800c7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ce:	e2a2      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a35      	ldr	r2, [pc, #212]	; (800c8ac <UART_SetConfig+0x344>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d130      	bne.n	800c83c <UART_SetConfig+0x2d4>
 800c7da:	4b31      	ldr	r3, [pc, #196]	; (800c8a0 <UART_SetConfig+0x338>)
 800c7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7de:	f003 0307 	and.w	r3, r3, #7
 800c7e2:	2b05      	cmp	r3, #5
 800c7e4:	d826      	bhi.n	800c834 <UART_SetConfig+0x2cc>
 800c7e6:	a201      	add	r2, pc, #4	; (adr r2, 800c7ec <UART_SetConfig+0x284>)
 800c7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ec:	0800c805 	.word	0x0800c805
 800c7f0:	0800c80d 	.word	0x0800c80d
 800c7f4:	0800c815 	.word	0x0800c815
 800c7f8:	0800c81d 	.word	0x0800c81d
 800c7fc:	0800c825 	.word	0x0800c825
 800c800:	0800c82d 	.word	0x0800c82d
 800c804:	2300      	movs	r3, #0
 800c806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c80a:	e284      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c80c:	2304      	movs	r3, #4
 800c80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c812:	e280      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c814:	2308      	movs	r3, #8
 800c816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c81a:	e27c      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c81c:	2310      	movs	r3, #16
 800c81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c822:	e278      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c824:	2320      	movs	r3, #32
 800c826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82a:	e274      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c82c:	2340      	movs	r3, #64	; 0x40
 800c82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c832:	e270      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c834:	2380      	movs	r3, #128	; 0x80
 800c836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c83a:	e26c      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a1b      	ldr	r2, [pc, #108]	; (800c8b0 <UART_SetConfig+0x348>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d142      	bne.n	800c8cc <UART_SetConfig+0x364>
 800c846:	4b16      	ldr	r3, [pc, #88]	; (800c8a0 <UART_SetConfig+0x338>)
 800c848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c84a:	f003 0307 	and.w	r3, r3, #7
 800c84e:	2b05      	cmp	r3, #5
 800c850:	d838      	bhi.n	800c8c4 <UART_SetConfig+0x35c>
 800c852:	a201      	add	r2, pc, #4	; (adr r2, 800c858 <UART_SetConfig+0x2f0>)
 800c854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c858:	0800c871 	.word	0x0800c871
 800c85c:	0800c879 	.word	0x0800c879
 800c860:	0800c881 	.word	0x0800c881
 800c864:	0800c889 	.word	0x0800c889
 800c868:	0800c8b5 	.word	0x0800c8b5
 800c86c:	0800c8bd 	.word	0x0800c8bd
 800c870:	2300      	movs	r3, #0
 800c872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c876:	e24e      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c878:	2304      	movs	r3, #4
 800c87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c87e:	e24a      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c880:	2308      	movs	r3, #8
 800c882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c886:	e246      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c888:	2310      	movs	r3, #16
 800c88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c88e:	e242      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c890:	cfff69f3 	.word	0xcfff69f3
 800c894:	58000c00 	.word	0x58000c00
 800c898:	11fff4ff 	.word	0x11fff4ff
 800c89c:	40011000 	.word	0x40011000
 800c8a0:	58024400 	.word	0x58024400
 800c8a4:	40004400 	.word	0x40004400
 800c8a8:	40004800 	.word	0x40004800
 800c8ac:	40004c00 	.word	0x40004c00
 800c8b0:	40005000 	.word	0x40005000
 800c8b4:	2320      	movs	r3, #32
 800c8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ba:	e22c      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c8bc:	2340      	movs	r3, #64	; 0x40
 800c8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8c2:	e228      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c8c4:	2380      	movs	r3, #128	; 0x80
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ca:	e224      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4ab1      	ldr	r2, [pc, #708]	; (800cb98 <UART_SetConfig+0x630>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d176      	bne.n	800c9c4 <UART_SetConfig+0x45c>
 800c8d6:	4bb1      	ldr	r3, [pc, #708]	; (800cb9c <UART_SetConfig+0x634>)
 800c8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8de:	2b28      	cmp	r3, #40	; 0x28
 800c8e0:	d86c      	bhi.n	800c9bc <UART_SetConfig+0x454>
 800c8e2:	a201      	add	r2, pc, #4	; (adr r2, 800c8e8 <UART_SetConfig+0x380>)
 800c8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e8:	0800c98d 	.word	0x0800c98d
 800c8ec:	0800c9bd 	.word	0x0800c9bd
 800c8f0:	0800c9bd 	.word	0x0800c9bd
 800c8f4:	0800c9bd 	.word	0x0800c9bd
 800c8f8:	0800c9bd 	.word	0x0800c9bd
 800c8fc:	0800c9bd 	.word	0x0800c9bd
 800c900:	0800c9bd 	.word	0x0800c9bd
 800c904:	0800c9bd 	.word	0x0800c9bd
 800c908:	0800c995 	.word	0x0800c995
 800c90c:	0800c9bd 	.word	0x0800c9bd
 800c910:	0800c9bd 	.word	0x0800c9bd
 800c914:	0800c9bd 	.word	0x0800c9bd
 800c918:	0800c9bd 	.word	0x0800c9bd
 800c91c:	0800c9bd 	.word	0x0800c9bd
 800c920:	0800c9bd 	.word	0x0800c9bd
 800c924:	0800c9bd 	.word	0x0800c9bd
 800c928:	0800c99d 	.word	0x0800c99d
 800c92c:	0800c9bd 	.word	0x0800c9bd
 800c930:	0800c9bd 	.word	0x0800c9bd
 800c934:	0800c9bd 	.word	0x0800c9bd
 800c938:	0800c9bd 	.word	0x0800c9bd
 800c93c:	0800c9bd 	.word	0x0800c9bd
 800c940:	0800c9bd 	.word	0x0800c9bd
 800c944:	0800c9bd 	.word	0x0800c9bd
 800c948:	0800c9a5 	.word	0x0800c9a5
 800c94c:	0800c9bd 	.word	0x0800c9bd
 800c950:	0800c9bd 	.word	0x0800c9bd
 800c954:	0800c9bd 	.word	0x0800c9bd
 800c958:	0800c9bd 	.word	0x0800c9bd
 800c95c:	0800c9bd 	.word	0x0800c9bd
 800c960:	0800c9bd 	.word	0x0800c9bd
 800c964:	0800c9bd 	.word	0x0800c9bd
 800c968:	0800c9ad 	.word	0x0800c9ad
 800c96c:	0800c9bd 	.word	0x0800c9bd
 800c970:	0800c9bd 	.word	0x0800c9bd
 800c974:	0800c9bd 	.word	0x0800c9bd
 800c978:	0800c9bd 	.word	0x0800c9bd
 800c97c:	0800c9bd 	.word	0x0800c9bd
 800c980:	0800c9bd 	.word	0x0800c9bd
 800c984:	0800c9bd 	.word	0x0800c9bd
 800c988:	0800c9b5 	.word	0x0800c9b5
 800c98c:	2301      	movs	r3, #1
 800c98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c992:	e1c0      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c994:	2304      	movs	r3, #4
 800c996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c99a:	e1bc      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c99c:	2308      	movs	r3, #8
 800c99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9a2:	e1b8      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c9a4:	2310      	movs	r3, #16
 800c9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9aa:	e1b4      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c9ac:	2320      	movs	r3, #32
 800c9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9b2:	e1b0      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c9b4:	2340      	movs	r3, #64	; 0x40
 800c9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ba:	e1ac      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c9bc:	2380      	movs	r3, #128	; 0x80
 800c9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9c2:	e1a8      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a75      	ldr	r2, [pc, #468]	; (800cba0 <UART_SetConfig+0x638>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d130      	bne.n	800ca30 <UART_SetConfig+0x4c8>
 800c9ce:	4b73      	ldr	r3, [pc, #460]	; (800cb9c <UART_SetConfig+0x634>)
 800c9d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9d2:	f003 0307 	and.w	r3, r3, #7
 800c9d6:	2b05      	cmp	r3, #5
 800c9d8:	d826      	bhi.n	800ca28 <UART_SetConfig+0x4c0>
 800c9da:	a201      	add	r2, pc, #4	; (adr r2, 800c9e0 <UART_SetConfig+0x478>)
 800c9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e0:	0800c9f9 	.word	0x0800c9f9
 800c9e4:	0800ca01 	.word	0x0800ca01
 800c9e8:	0800ca09 	.word	0x0800ca09
 800c9ec:	0800ca11 	.word	0x0800ca11
 800c9f0:	0800ca19 	.word	0x0800ca19
 800c9f4:	0800ca21 	.word	0x0800ca21
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9fe:	e18a      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ca00:	2304      	movs	r3, #4
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca06:	e186      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ca08:	2308      	movs	r3, #8
 800ca0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca0e:	e182      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ca10:	2310      	movs	r3, #16
 800ca12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca16:	e17e      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ca18:	2320      	movs	r3, #32
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1e:	e17a      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ca20:	2340      	movs	r3, #64	; 0x40
 800ca22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca26:	e176      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ca28:	2380      	movs	r3, #128	; 0x80
 800ca2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca2e:	e172      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a5b      	ldr	r2, [pc, #364]	; (800cba4 <UART_SetConfig+0x63c>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d130      	bne.n	800ca9c <UART_SetConfig+0x534>
 800ca3a:	4b58      	ldr	r3, [pc, #352]	; (800cb9c <UART_SetConfig+0x634>)
 800ca3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca3e:	f003 0307 	and.w	r3, r3, #7
 800ca42:	2b05      	cmp	r3, #5
 800ca44:	d826      	bhi.n	800ca94 <UART_SetConfig+0x52c>
 800ca46:	a201      	add	r2, pc, #4	; (adr r2, 800ca4c <UART_SetConfig+0x4e4>)
 800ca48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca4c:	0800ca65 	.word	0x0800ca65
 800ca50:	0800ca6d 	.word	0x0800ca6d
 800ca54:	0800ca75 	.word	0x0800ca75
 800ca58:	0800ca7d 	.word	0x0800ca7d
 800ca5c:	0800ca85 	.word	0x0800ca85
 800ca60:	0800ca8d 	.word	0x0800ca8d
 800ca64:	2300      	movs	r3, #0
 800ca66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6a:	e154      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ca6c:	2304      	movs	r3, #4
 800ca6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca72:	e150      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ca74:	2308      	movs	r3, #8
 800ca76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca7a:	e14c      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ca7c:	2310      	movs	r3, #16
 800ca7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca82:	e148      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ca84:	2320      	movs	r3, #32
 800ca86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca8a:	e144      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ca8c:	2340      	movs	r3, #64	; 0x40
 800ca8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca92:	e140      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ca94:	2380      	movs	r3, #128	; 0x80
 800ca96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca9a:	e13c      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a41      	ldr	r2, [pc, #260]	; (800cba8 <UART_SetConfig+0x640>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	f040 8082 	bne.w	800cbac <UART_SetConfig+0x644>
 800caa8:	4b3c      	ldr	r3, [pc, #240]	; (800cb9c <UART_SetConfig+0x634>)
 800caaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cab0:	2b28      	cmp	r3, #40	; 0x28
 800cab2:	d86d      	bhi.n	800cb90 <UART_SetConfig+0x628>
 800cab4:	a201      	add	r2, pc, #4	; (adr r2, 800cabc <UART_SetConfig+0x554>)
 800cab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caba:	bf00      	nop
 800cabc:	0800cb61 	.word	0x0800cb61
 800cac0:	0800cb91 	.word	0x0800cb91
 800cac4:	0800cb91 	.word	0x0800cb91
 800cac8:	0800cb91 	.word	0x0800cb91
 800cacc:	0800cb91 	.word	0x0800cb91
 800cad0:	0800cb91 	.word	0x0800cb91
 800cad4:	0800cb91 	.word	0x0800cb91
 800cad8:	0800cb91 	.word	0x0800cb91
 800cadc:	0800cb69 	.word	0x0800cb69
 800cae0:	0800cb91 	.word	0x0800cb91
 800cae4:	0800cb91 	.word	0x0800cb91
 800cae8:	0800cb91 	.word	0x0800cb91
 800caec:	0800cb91 	.word	0x0800cb91
 800caf0:	0800cb91 	.word	0x0800cb91
 800caf4:	0800cb91 	.word	0x0800cb91
 800caf8:	0800cb91 	.word	0x0800cb91
 800cafc:	0800cb71 	.word	0x0800cb71
 800cb00:	0800cb91 	.word	0x0800cb91
 800cb04:	0800cb91 	.word	0x0800cb91
 800cb08:	0800cb91 	.word	0x0800cb91
 800cb0c:	0800cb91 	.word	0x0800cb91
 800cb10:	0800cb91 	.word	0x0800cb91
 800cb14:	0800cb91 	.word	0x0800cb91
 800cb18:	0800cb91 	.word	0x0800cb91
 800cb1c:	0800cb79 	.word	0x0800cb79
 800cb20:	0800cb91 	.word	0x0800cb91
 800cb24:	0800cb91 	.word	0x0800cb91
 800cb28:	0800cb91 	.word	0x0800cb91
 800cb2c:	0800cb91 	.word	0x0800cb91
 800cb30:	0800cb91 	.word	0x0800cb91
 800cb34:	0800cb91 	.word	0x0800cb91
 800cb38:	0800cb91 	.word	0x0800cb91
 800cb3c:	0800cb81 	.word	0x0800cb81
 800cb40:	0800cb91 	.word	0x0800cb91
 800cb44:	0800cb91 	.word	0x0800cb91
 800cb48:	0800cb91 	.word	0x0800cb91
 800cb4c:	0800cb91 	.word	0x0800cb91
 800cb50:	0800cb91 	.word	0x0800cb91
 800cb54:	0800cb91 	.word	0x0800cb91
 800cb58:	0800cb91 	.word	0x0800cb91
 800cb5c:	0800cb89 	.word	0x0800cb89
 800cb60:	2301      	movs	r3, #1
 800cb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb66:	e0d6      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cb68:	2304      	movs	r3, #4
 800cb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb6e:	e0d2      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cb70:	2308      	movs	r3, #8
 800cb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb76:	e0ce      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cb78:	2310      	movs	r3, #16
 800cb7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb7e:	e0ca      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cb80:	2320      	movs	r3, #32
 800cb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb86:	e0c6      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cb88:	2340      	movs	r3, #64	; 0x40
 800cb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb8e:	e0c2      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cb90:	2380      	movs	r3, #128	; 0x80
 800cb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb96:	e0be      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cb98:	40011400 	.word	0x40011400
 800cb9c:	58024400 	.word	0x58024400
 800cba0:	40007800 	.word	0x40007800
 800cba4:	40007c00 	.word	0x40007c00
 800cba8:	40011800 	.word	0x40011800
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4aad      	ldr	r2, [pc, #692]	; (800ce68 <UART_SetConfig+0x900>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d176      	bne.n	800cca4 <UART_SetConfig+0x73c>
 800cbb6:	4bad      	ldr	r3, [pc, #692]	; (800ce6c <UART_SetConfig+0x904>)
 800cbb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbbe:	2b28      	cmp	r3, #40	; 0x28
 800cbc0:	d86c      	bhi.n	800cc9c <UART_SetConfig+0x734>
 800cbc2:	a201      	add	r2, pc, #4	; (adr r2, 800cbc8 <UART_SetConfig+0x660>)
 800cbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc8:	0800cc6d 	.word	0x0800cc6d
 800cbcc:	0800cc9d 	.word	0x0800cc9d
 800cbd0:	0800cc9d 	.word	0x0800cc9d
 800cbd4:	0800cc9d 	.word	0x0800cc9d
 800cbd8:	0800cc9d 	.word	0x0800cc9d
 800cbdc:	0800cc9d 	.word	0x0800cc9d
 800cbe0:	0800cc9d 	.word	0x0800cc9d
 800cbe4:	0800cc9d 	.word	0x0800cc9d
 800cbe8:	0800cc75 	.word	0x0800cc75
 800cbec:	0800cc9d 	.word	0x0800cc9d
 800cbf0:	0800cc9d 	.word	0x0800cc9d
 800cbf4:	0800cc9d 	.word	0x0800cc9d
 800cbf8:	0800cc9d 	.word	0x0800cc9d
 800cbfc:	0800cc9d 	.word	0x0800cc9d
 800cc00:	0800cc9d 	.word	0x0800cc9d
 800cc04:	0800cc9d 	.word	0x0800cc9d
 800cc08:	0800cc7d 	.word	0x0800cc7d
 800cc0c:	0800cc9d 	.word	0x0800cc9d
 800cc10:	0800cc9d 	.word	0x0800cc9d
 800cc14:	0800cc9d 	.word	0x0800cc9d
 800cc18:	0800cc9d 	.word	0x0800cc9d
 800cc1c:	0800cc9d 	.word	0x0800cc9d
 800cc20:	0800cc9d 	.word	0x0800cc9d
 800cc24:	0800cc9d 	.word	0x0800cc9d
 800cc28:	0800cc85 	.word	0x0800cc85
 800cc2c:	0800cc9d 	.word	0x0800cc9d
 800cc30:	0800cc9d 	.word	0x0800cc9d
 800cc34:	0800cc9d 	.word	0x0800cc9d
 800cc38:	0800cc9d 	.word	0x0800cc9d
 800cc3c:	0800cc9d 	.word	0x0800cc9d
 800cc40:	0800cc9d 	.word	0x0800cc9d
 800cc44:	0800cc9d 	.word	0x0800cc9d
 800cc48:	0800cc8d 	.word	0x0800cc8d
 800cc4c:	0800cc9d 	.word	0x0800cc9d
 800cc50:	0800cc9d 	.word	0x0800cc9d
 800cc54:	0800cc9d 	.word	0x0800cc9d
 800cc58:	0800cc9d 	.word	0x0800cc9d
 800cc5c:	0800cc9d 	.word	0x0800cc9d
 800cc60:	0800cc9d 	.word	0x0800cc9d
 800cc64:	0800cc9d 	.word	0x0800cc9d
 800cc68:	0800cc95 	.word	0x0800cc95
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc72:	e050      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cc74:	2304      	movs	r3, #4
 800cc76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc7a:	e04c      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cc7c:	2308      	movs	r3, #8
 800cc7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc82:	e048      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cc84:	2310      	movs	r3, #16
 800cc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8a:	e044      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cc8c:	2320      	movs	r3, #32
 800cc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc92:	e040      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cc94:	2340      	movs	r3, #64	; 0x40
 800cc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9a:	e03c      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cc9c:	2380      	movs	r3, #128	; 0x80
 800cc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca2:	e038      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a71      	ldr	r2, [pc, #452]	; (800ce70 <UART_SetConfig+0x908>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d130      	bne.n	800cd10 <UART_SetConfig+0x7a8>
 800ccae:	4b6f      	ldr	r3, [pc, #444]	; (800ce6c <UART_SetConfig+0x904>)
 800ccb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccb2:	f003 0307 	and.w	r3, r3, #7
 800ccb6:	2b05      	cmp	r3, #5
 800ccb8:	d826      	bhi.n	800cd08 <UART_SetConfig+0x7a0>
 800ccba:	a201      	add	r2, pc, #4	; (adr r2, 800ccc0 <UART_SetConfig+0x758>)
 800ccbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc0:	0800ccd9 	.word	0x0800ccd9
 800ccc4:	0800cce1 	.word	0x0800cce1
 800ccc8:	0800cce9 	.word	0x0800cce9
 800cccc:	0800ccf1 	.word	0x0800ccf1
 800ccd0:	0800ccf9 	.word	0x0800ccf9
 800ccd4:	0800cd01 	.word	0x0800cd01
 800ccd8:	2302      	movs	r3, #2
 800ccda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccde:	e01a      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cce0:	2304      	movs	r3, #4
 800cce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cce6:	e016      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cce8:	2308      	movs	r3, #8
 800ccea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccee:	e012      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ccf0:	2310      	movs	r3, #16
 800ccf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccf6:	e00e      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800ccf8:	2320      	movs	r3, #32
 800ccfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccfe:	e00a      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cd00:	2340      	movs	r3, #64	; 0x40
 800cd02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd06:	e006      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cd08:	2380      	movs	r3, #128	; 0x80
 800cd0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd0e:	e002      	b.n	800cd16 <UART_SetConfig+0x7ae>
 800cd10:	2380      	movs	r3, #128	; 0x80
 800cd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a55      	ldr	r2, [pc, #340]	; (800ce70 <UART_SetConfig+0x908>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	f040 80f8 	bne.w	800cf12 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cd22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cd26:	2b20      	cmp	r3, #32
 800cd28:	dc46      	bgt.n	800cdb8 <UART_SetConfig+0x850>
 800cd2a:	2b02      	cmp	r3, #2
 800cd2c:	db75      	blt.n	800ce1a <UART_SetConfig+0x8b2>
 800cd2e:	3b02      	subs	r3, #2
 800cd30:	2b1e      	cmp	r3, #30
 800cd32:	d872      	bhi.n	800ce1a <UART_SetConfig+0x8b2>
 800cd34:	a201      	add	r2, pc, #4	; (adr r2, 800cd3c <UART_SetConfig+0x7d4>)
 800cd36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd3a:	bf00      	nop
 800cd3c:	0800cdbf 	.word	0x0800cdbf
 800cd40:	0800ce1b 	.word	0x0800ce1b
 800cd44:	0800cdc7 	.word	0x0800cdc7
 800cd48:	0800ce1b 	.word	0x0800ce1b
 800cd4c:	0800ce1b 	.word	0x0800ce1b
 800cd50:	0800ce1b 	.word	0x0800ce1b
 800cd54:	0800cdd7 	.word	0x0800cdd7
 800cd58:	0800ce1b 	.word	0x0800ce1b
 800cd5c:	0800ce1b 	.word	0x0800ce1b
 800cd60:	0800ce1b 	.word	0x0800ce1b
 800cd64:	0800ce1b 	.word	0x0800ce1b
 800cd68:	0800ce1b 	.word	0x0800ce1b
 800cd6c:	0800ce1b 	.word	0x0800ce1b
 800cd70:	0800ce1b 	.word	0x0800ce1b
 800cd74:	0800cde7 	.word	0x0800cde7
 800cd78:	0800ce1b 	.word	0x0800ce1b
 800cd7c:	0800ce1b 	.word	0x0800ce1b
 800cd80:	0800ce1b 	.word	0x0800ce1b
 800cd84:	0800ce1b 	.word	0x0800ce1b
 800cd88:	0800ce1b 	.word	0x0800ce1b
 800cd8c:	0800ce1b 	.word	0x0800ce1b
 800cd90:	0800ce1b 	.word	0x0800ce1b
 800cd94:	0800ce1b 	.word	0x0800ce1b
 800cd98:	0800ce1b 	.word	0x0800ce1b
 800cd9c:	0800ce1b 	.word	0x0800ce1b
 800cda0:	0800ce1b 	.word	0x0800ce1b
 800cda4:	0800ce1b 	.word	0x0800ce1b
 800cda8:	0800ce1b 	.word	0x0800ce1b
 800cdac:	0800ce1b 	.word	0x0800ce1b
 800cdb0:	0800ce1b 	.word	0x0800ce1b
 800cdb4:	0800ce0d 	.word	0x0800ce0d
 800cdb8:	2b40      	cmp	r3, #64	; 0x40
 800cdba:	d02a      	beq.n	800ce12 <UART_SetConfig+0x8aa>
 800cdbc:	e02d      	b.n	800ce1a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cdbe:	f7fc fde3 	bl	8009988 <HAL_RCCEx_GetD3PCLK1Freq>
 800cdc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cdc4:	e02f      	b.n	800ce26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7fc fdf2 	bl	80099b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdd4:	e027      	b.n	800ce26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdd6:	f107 0318 	add.w	r3, r7, #24
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fc ff3e 	bl	8009c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cde4:	e01f      	b.n	800ce26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cde6:	4b21      	ldr	r3, [pc, #132]	; (800ce6c <UART_SetConfig+0x904>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f003 0320 	and.w	r3, r3, #32
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d009      	beq.n	800ce06 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cdf2:	4b1e      	ldr	r3, [pc, #120]	; (800ce6c <UART_SetConfig+0x904>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	08db      	lsrs	r3, r3, #3
 800cdf8:	f003 0303 	and.w	r3, r3, #3
 800cdfc:	4a1d      	ldr	r2, [pc, #116]	; (800ce74 <UART_SetConfig+0x90c>)
 800cdfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ce02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce04:	e00f      	b.n	800ce26 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ce06:	4b1b      	ldr	r3, [pc, #108]	; (800ce74 <UART_SetConfig+0x90c>)
 800ce08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce0a:	e00c      	b.n	800ce26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce0c:	4b1a      	ldr	r3, [pc, #104]	; (800ce78 <UART_SetConfig+0x910>)
 800ce0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce10:	e009      	b.n	800ce26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce18:	e005      	b.n	800ce26 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ce24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f000 81ee 	beq.w	800d20a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce32:	4a12      	ldr	r2, [pc, #72]	; (800ce7c <UART_SetConfig+0x914>)
 800ce34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce40:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	685a      	ldr	r2, [r3, #4]
 800ce46:	4613      	mov	r3, r2
 800ce48:	005b      	lsls	r3, r3, #1
 800ce4a:	4413      	add	r3, r2
 800ce4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d305      	bcc.n	800ce5e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d910      	bls.n	800ce80 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ce64:	e1d1      	b.n	800d20a <UART_SetConfig+0xca2>
 800ce66:	bf00      	nop
 800ce68:	40011c00 	.word	0x40011c00
 800ce6c:	58024400 	.word	0x58024400
 800ce70:	58000c00 	.word	0x58000c00
 800ce74:	03d09000 	.word	0x03d09000
 800ce78:	003d0900 	.word	0x003d0900
 800ce7c:	0800e3dc 	.word	0x0800e3dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce82:	2200      	movs	r2, #0
 800ce84:	60bb      	str	r3, [r7, #8]
 800ce86:	60fa      	str	r2, [r7, #12]
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8c:	4ac0      	ldr	r2, [pc, #768]	; (800d190 <UART_SetConfig+0xc28>)
 800ce8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	2200      	movs	r2, #0
 800ce96:	603b      	str	r3, [r7, #0]
 800ce98:	607a      	str	r2, [r7, #4]
 800ce9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cea2:	f7f3 fa3d 	bl	8000320 <__aeabi_uldivmod>
 800cea6:	4602      	mov	r2, r0
 800cea8:	460b      	mov	r3, r1
 800ceaa:	4610      	mov	r0, r2
 800ceac:	4619      	mov	r1, r3
 800ceae:	f04f 0200 	mov.w	r2, #0
 800ceb2:	f04f 0300 	mov.w	r3, #0
 800ceb6:	020b      	lsls	r3, r1, #8
 800ceb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cebc:	0202      	lsls	r2, r0, #8
 800cebe:	6979      	ldr	r1, [r7, #20]
 800cec0:	6849      	ldr	r1, [r1, #4]
 800cec2:	0849      	lsrs	r1, r1, #1
 800cec4:	2000      	movs	r0, #0
 800cec6:	460c      	mov	r4, r1
 800cec8:	4605      	mov	r5, r0
 800ceca:	eb12 0804 	adds.w	r8, r2, r4
 800cece:	eb43 0905 	adc.w	r9, r3, r5
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	469a      	mov	sl, r3
 800ceda:	4693      	mov	fp, r2
 800cedc:	4652      	mov	r2, sl
 800cede:	465b      	mov	r3, fp
 800cee0:	4640      	mov	r0, r8
 800cee2:	4649      	mov	r1, r9
 800cee4:	f7f3 fa1c 	bl	8000320 <__aeabi_uldivmod>
 800cee8:	4602      	mov	r2, r0
 800ceea:	460b      	mov	r3, r1
 800ceec:	4613      	mov	r3, r2
 800ceee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cef6:	d308      	bcc.n	800cf0a <UART_SetConfig+0x9a2>
 800cef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cefe:	d204      	bcs.n	800cf0a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf06:	60da      	str	r2, [r3, #12]
 800cf08:	e17f      	b.n	800d20a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cf10:	e17b      	b.n	800d20a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	69db      	ldr	r3, [r3, #28]
 800cf16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf1a:	f040 80bd 	bne.w	800d098 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cf1e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cf22:	2b20      	cmp	r3, #32
 800cf24:	dc48      	bgt.n	800cfb8 <UART_SetConfig+0xa50>
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	db7b      	blt.n	800d022 <UART_SetConfig+0xaba>
 800cf2a:	2b20      	cmp	r3, #32
 800cf2c:	d879      	bhi.n	800d022 <UART_SetConfig+0xaba>
 800cf2e:	a201      	add	r2, pc, #4	; (adr r2, 800cf34 <UART_SetConfig+0x9cc>)
 800cf30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf34:	0800cfbf 	.word	0x0800cfbf
 800cf38:	0800cfc7 	.word	0x0800cfc7
 800cf3c:	0800d023 	.word	0x0800d023
 800cf40:	0800d023 	.word	0x0800d023
 800cf44:	0800cfcf 	.word	0x0800cfcf
 800cf48:	0800d023 	.word	0x0800d023
 800cf4c:	0800d023 	.word	0x0800d023
 800cf50:	0800d023 	.word	0x0800d023
 800cf54:	0800cfdf 	.word	0x0800cfdf
 800cf58:	0800d023 	.word	0x0800d023
 800cf5c:	0800d023 	.word	0x0800d023
 800cf60:	0800d023 	.word	0x0800d023
 800cf64:	0800d023 	.word	0x0800d023
 800cf68:	0800d023 	.word	0x0800d023
 800cf6c:	0800d023 	.word	0x0800d023
 800cf70:	0800d023 	.word	0x0800d023
 800cf74:	0800cfef 	.word	0x0800cfef
 800cf78:	0800d023 	.word	0x0800d023
 800cf7c:	0800d023 	.word	0x0800d023
 800cf80:	0800d023 	.word	0x0800d023
 800cf84:	0800d023 	.word	0x0800d023
 800cf88:	0800d023 	.word	0x0800d023
 800cf8c:	0800d023 	.word	0x0800d023
 800cf90:	0800d023 	.word	0x0800d023
 800cf94:	0800d023 	.word	0x0800d023
 800cf98:	0800d023 	.word	0x0800d023
 800cf9c:	0800d023 	.word	0x0800d023
 800cfa0:	0800d023 	.word	0x0800d023
 800cfa4:	0800d023 	.word	0x0800d023
 800cfa8:	0800d023 	.word	0x0800d023
 800cfac:	0800d023 	.word	0x0800d023
 800cfb0:	0800d023 	.word	0x0800d023
 800cfb4:	0800d015 	.word	0x0800d015
 800cfb8:	2b40      	cmp	r3, #64	; 0x40
 800cfba:	d02e      	beq.n	800d01a <UART_SetConfig+0xab2>
 800cfbc:	e031      	b.n	800d022 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cfbe:	f7fb fdbd 	bl	8008b3c <HAL_RCC_GetPCLK1Freq>
 800cfc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cfc4:	e033      	b.n	800d02e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cfc6:	f7fb fdcf 	bl	8008b68 <HAL_RCC_GetPCLK2Freq>
 800cfca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cfcc:	e02f      	b.n	800d02e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fc fcee 	bl	80099b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfdc:	e027      	b.n	800d02e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfde:	f107 0318 	add.w	r3, r7, #24
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fc fe3a 	bl	8009c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfec:	e01f      	b.n	800d02e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfee:	4b69      	ldr	r3, [pc, #420]	; (800d194 <UART_SetConfig+0xc2c>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f003 0320 	and.w	r3, r3, #32
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d009      	beq.n	800d00e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cffa:	4b66      	ldr	r3, [pc, #408]	; (800d194 <UART_SetConfig+0xc2c>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	08db      	lsrs	r3, r3, #3
 800d000:	f003 0303 	and.w	r3, r3, #3
 800d004:	4a64      	ldr	r2, [pc, #400]	; (800d198 <UART_SetConfig+0xc30>)
 800d006:	fa22 f303 	lsr.w	r3, r2, r3
 800d00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d00c:	e00f      	b.n	800d02e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d00e:	4b62      	ldr	r3, [pc, #392]	; (800d198 <UART_SetConfig+0xc30>)
 800d010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d012:	e00c      	b.n	800d02e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d014:	4b61      	ldr	r3, [pc, #388]	; (800d19c <UART_SetConfig+0xc34>)
 800d016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d018:	e009      	b.n	800d02e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d01a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d020:	e005      	b.n	800d02e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d022:	2300      	movs	r3, #0
 800d024:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d026:	2301      	movs	r3, #1
 800d028:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d02c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d030:	2b00      	cmp	r3, #0
 800d032:	f000 80ea 	beq.w	800d20a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03a:	4a55      	ldr	r2, [pc, #340]	; (800d190 <UART_SetConfig+0xc28>)
 800d03c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d040:	461a      	mov	r2, r3
 800d042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d044:	fbb3 f3f2 	udiv	r3, r3, r2
 800d048:	005a      	lsls	r2, r3, #1
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	085b      	lsrs	r3, r3, #1
 800d050:	441a      	add	r2, r3
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	fbb2 f3f3 	udiv	r3, r2, r3
 800d05a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05e:	2b0f      	cmp	r3, #15
 800d060:	d916      	bls.n	800d090 <UART_SetConfig+0xb28>
 800d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d068:	d212      	bcs.n	800d090 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06c:	b29b      	uxth	r3, r3
 800d06e:	f023 030f 	bic.w	r3, r3, #15
 800d072:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d076:	085b      	lsrs	r3, r3, #1
 800d078:	b29b      	uxth	r3, r3
 800d07a:	f003 0307 	and.w	r3, r3, #7
 800d07e:	b29a      	uxth	r2, r3
 800d080:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d082:	4313      	orrs	r3, r2
 800d084:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d08c:	60da      	str	r2, [r3, #12]
 800d08e:	e0bc      	b.n	800d20a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d090:	2301      	movs	r3, #1
 800d092:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d096:	e0b8      	b.n	800d20a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d098:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d09c:	2b20      	cmp	r3, #32
 800d09e:	dc4b      	bgt.n	800d138 <UART_SetConfig+0xbd0>
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f2c0 8087 	blt.w	800d1b4 <UART_SetConfig+0xc4c>
 800d0a6:	2b20      	cmp	r3, #32
 800d0a8:	f200 8084 	bhi.w	800d1b4 <UART_SetConfig+0xc4c>
 800d0ac:	a201      	add	r2, pc, #4	; (adr r2, 800d0b4 <UART_SetConfig+0xb4c>)
 800d0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b2:	bf00      	nop
 800d0b4:	0800d13f 	.word	0x0800d13f
 800d0b8:	0800d147 	.word	0x0800d147
 800d0bc:	0800d1b5 	.word	0x0800d1b5
 800d0c0:	0800d1b5 	.word	0x0800d1b5
 800d0c4:	0800d14f 	.word	0x0800d14f
 800d0c8:	0800d1b5 	.word	0x0800d1b5
 800d0cc:	0800d1b5 	.word	0x0800d1b5
 800d0d0:	0800d1b5 	.word	0x0800d1b5
 800d0d4:	0800d15f 	.word	0x0800d15f
 800d0d8:	0800d1b5 	.word	0x0800d1b5
 800d0dc:	0800d1b5 	.word	0x0800d1b5
 800d0e0:	0800d1b5 	.word	0x0800d1b5
 800d0e4:	0800d1b5 	.word	0x0800d1b5
 800d0e8:	0800d1b5 	.word	0x0800d1b5
 800d0ec:	0800d1b5 	.word	0x0800d1b5
 800d0f0:	0800d1b5 	.word	0x0800d1b5
 800d0f4:	0800d16f 	.word	0x0800d16f
 800d0f8:	0800d1b5 	.word	0x0800d1b5
 800d0fc:	0800d1b5 	.word	0x0800d1b5
 800d100:	0800d1b5 	.word	0x0800d1b5
 800d104:	0800d1b5 	.word	0x0800d1b5
 800d108:	0800d1b5 	.word	0x0800d1b5
 800d10c:	0800d1b5 	.word	0x0800d1b5
 800d110:	0800d1b5 	.word	0x0800d1b5
 800d114:	0800d1b5 	.word	0x0800d1b5
 800d118:	0800d1b5 	.word	0x0800d1b5
 800d11c:	0800d1b5 	.word	0x0800d1b5
 800d120:	0800d1b5 	.word	0x0800d1b5
 800d124:	0800d1b5 	.word	0x0800d1b5
 800d128:	0800d1b5 	.word	0x0800d1b5
 800d12c:	0800d1b5 	.word	0x0800d1b5
 800d130:	0800d1b5 	.word	0x0800d1b5
 800d134:	0800d1a7 	.word	0x0800d1a7
 800d138:	2b40      	cmp	r3, #64	; 0x40
 800d13a:	d037      	beq.n	800d1ac <UART_SetConfig+0xc44>
 800d13c:	e03a      	b.n	800d1b4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d13e:	f7fb fcfd 	bl	8008b3c <HAL_RCC_GetPCLK1Freq>
 800d142:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d144:	e03c      	b.n	800d1c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d146:	f7fb fd0f 	bl	8008b68 <HAL_RCC_GetPCLK2Freq>
 800d14a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d14c:	e038      	b.n	800d1c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d14e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d152:	4618      	mov	r0, r3
 800d154:	f7fc fc2e 	bl	80099b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d15c:	e030      	b.n	800d1c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d15e:	f107 0318 	add.w	r3, r7, #24
 800d162:	4618      	mov	r0, r3
 800d164:	f7fc fd7a 	bl	8009c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d16c:	e028      	b.n	800d1c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d16e:	4b09      	ldr	r3, [pc, #36]	; (800d194 <UART_SetConfig+0xc2c>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f003 0320 	and.w	r3, r3, #32
 800d176:	2b00      	cmp	r3, #0
 800d178:	d012      	beq.n	800d1a0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d17a:	4b06      	ldr	r3, [pc, #24]	; (800d194 <UART_SetConfig+0xc2c>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	08db      	lsrs	r3, r3, #3
 800d180:	f003 0303 	and.w	r3, r3, #3
 800d184:	4a04      	ldr	r2, [pc, #16]	; (800d198 <UART_SetConfig+0xc30>)
 800d186:	fa22 f303 	lsr.w	r3, r2, r3
 800d18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d18c:	e018      	b.n	800d1c0 <UART_SetConfig+0xc58>
 800d18e:	bf00      	nop
 800d190:	0800e3dc 	.word	0x0800e3dc
 800d194:	58024400 	.word	0x58024400
 800d198:	03d09000 	.word	0x03d09000
 800d19c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d1a0:	4b24      	ldr	r3, [pc, #144]	; (800d234 <UART_SetConfig+0xccc>)
 800d1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1a4:	e00c      	b.n	800d1c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1a6:	4b24      	ldr	r3, [pc, #144]	; (800d238 <UART_SetConfig+0xcd0>)
 800d1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1aa:	e009      	b.n	800d1c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1b2:	e005      	b.n	800d1c0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d1be:	bf00      	nop
    }

    if (pclk != 0U)
 800d1c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d021      	beq.n	800d20a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ca:	4a1c      	ldr	r2, [pc, #112]	; (800d23c <UART_SetConfig+0xcd4>)
 800d1cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1d4:	fbb3 f2f2 	udiv	r2, r3, r2
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	085b      	lsrs	r3, r3, #1
 800d1de:	441a      	add	r2, r3
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1e8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ec:	2b0f      	cmp	r3, #15
 800d1ee:	d909      	bls.n	800d204 <UART_SetConfig+0xc9c>
 800d1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1f6:	d205      	bcs.n	800d204 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fa:	b29a      	uxth	r2, r3
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	60da      	str	r2, [r3, #12]
 800d202:	e002      	b.n	800d20a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d204:	2301      	movs	r3, #1
 800d206:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	2201      	movs	r2, #1
 800d216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	2200      	movs	r2, #0
 800d21e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	2200      	movs	r2, #0
 800d224:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d226:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3748      	adds	r7, #72	; 0x48
 800d22e:	46bd      	mov	sp, r7
 800d230:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d234:	03d09000 	.word	0x03d09000
 800d238:	003d0900 	.word	0x003d0900
 800d23c:	0800e3dc 	.word	0x0800e3dc

0800d240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d240:	b480      	push	{r7}
 800d242:	b083      	sub	sp, #12
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d24c:	f003 0301 	and.w	r3, r3, #1
 800d250:	2b00      	cmp	r3, #0
 800d252:	d00a      	beq.n	800d26a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	430a      	orrs	r2, r1
 800d268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d26e:	f003 0302 	and.w	r3, r3, #2
 800d272:	2b00      	cmp	r3, #0
 800d274:	d00a      	beq.n	800d28c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	430a      	orrs	r2, r1
 800d28a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d290:	f003 0304 	and.w	r3, r3, #4
 800d294:	2b00      	cmp	r3, #0
 800d296:	d00a      	beq.n	800d2ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	430a      	orrs	r2, r1
 800d2ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b2:	f003 0308 	and.w	r3, r3, #8
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00a      	beq.n	800d2d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	430a      	orrs	r2, r1
 800d2ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2d4:	f003 0310 	and.w	r3, r3, #16
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d00a      	beq.n	800d2f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	430a      	orrs	r2, r1
 800d2f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2f6:	f003 0320 	and.w	r3, r3, #32
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00a      	beq.n	800d314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	430a      	orrs	r2, r1
 800d312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d01a      	beq.n	800d356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	430a      	orrs	r2, r1
 800d334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d33a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d33e:	d10a      	bne.n	800d356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	430a      	orrs	r2, r1
 800d354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d35a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d00a      	beq.n	800d378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	430a      	orrs	r2, r1
 800d376:	605a      	str	r2, [r3, #4]
  }
}
 800d378:	bf00      	nop
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af02      	add	r7, sp, #8
 800d38a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d394:	f7f7 fb72 	bl	8004a7c <HAL_GetTick>
 800d398:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f003 0308 	and.w	r3, r3, #8
 800d3a4:	2b08      	cmp	r3, #8
 800d3a6:	d10e      	bne.n	800d3c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d3ac:	9300      	str	r3, [sp, #0]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 f82f 	bl	800d41a <UART_WaitOnFlagUntilTimeout>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d001      	beq.n	800d3c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3c2:	2303      	movs	r3, #3
 800d3c4:	e025      	b.n	800d412 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f003 0304 	and.w	r3, r3, #4
 800d3d0:	2b04      	cmp	r3, #4
 800d3d2:	d10e      	bne.n	800d3f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d3d8:	9300      	str	r3, [sp, #0]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 f819 	bl	800d41a <UART_WaitOnFlagUntilTimeout>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d001      	beq.n	800d3f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	e00f      	b.n	800d412 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2220      	movs	r2, #32
 800d3f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2220      	movs	r2, #32
 800d3fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2200      	movs	r2, #0
 800d406:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d410:	2300      	movs	r3, #0
}
 800d412:	4618      	mov	r0, r3
 800d414:	3710      	adds	r7, #16
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}

0800d41a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d41a:	b580      	push	{r7, lr}
 800d41c:	b09c      	sub	sp, #112	; 0x70
 800d41e:	af00      	add	r7, sp, #0
 800d420:	60f8      	str	r0, [r7, #12]
 800d422:	60b9      	str	r1, [r7, #8]
 800d424:	603b      	str	r3, [r7, #0]
 800d426:	4613      	mov	r3, r2
 800d428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d42a:	e0a9      	b.n	800d580 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d42c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d42e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d432:	f000 80a5 	beq.w	800d580 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d436:	f7f7 fb21 	bl	8004a7c <HAL_GetTick>
 800d43a:	4602      	mov	r2, r0
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d442:	429a      	cmp	r2, r3
 800d444:	d302      	bcc.n	800d44c <UART_WaitOnFlagUntilTimeout+0x32>
 800d446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d140      	bne.n	800d4ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d454:	e853 3f00 	ldrex	r3, [r3]
 800d458:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d45c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d460:	667b      	str	r3, [r7, #100]	; 0x64
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	461a      	mov	r2, r3
 800d468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d46a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d46c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d46e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d470:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d472:	e841 2300 	strex	r3, r2, [r1]
 800d476:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d1e6      	bne.n	800d44c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3308      	adds	r3, #8
 800d484:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d488:	e853 3f00 	ldrex	r3, [r3]
 800d48c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d490:	f023 0301 	bic.w	r3, r3, #1
 800d494:	663b      	str	r3, [r7, #96]	; 0x60
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	3308      	adds	r3, #8
 800d49c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d49e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d4a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4a6:	e841 2300 	strex	r3, r2, [r1]
 800d4aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d4ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d1e5      	bne.n	800d47e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2220      	movs	r2, #32
 800d4b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2220      	movs	r2, #32
 800d4be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d4ca:	2303      	movs	r3, #3
 800d4cc:	e069      	b.n	800d5a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f003 0304 	and.w	r3, r3, #4
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d051      	beq.n	800d580 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	69db      	ldr	r3, [r3, #28]
 800d4e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4ea:	d149      	bne.n	800d580 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fe:	e853 3f00 	ldrex	r3, [r3]
 800d502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d506:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d50a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	461a      	mov	r2, r3
 800d512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d514:	637b      	str	r3, [r7, #52]	; 0x34
 800d516:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d518:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d51a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d51c:	e841 2300 	strex	r3, r2, [r1]
 800d520:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d524:	2b00      	cmp	r3, #0
 800d526:	d1e6      	bne.n	800d4f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	3308      	adds	r3, #8
 800d52e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	e853 3f00 	ldrex	r3, [r3]
 800d536:	613b      	str	r3, [r7, #16]
   return(result);
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	f023 0301 	bic.w	r3, r3, #1
 800d53e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	3308      	adds	r3, #8
 800d546:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d548:	623a      	str	r2, [r7, #32]
 800d54a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d54c:	69f9      	ldr	r1, [r7, #28]
 800d54e:	6a3a      	ldr	r2, [r7, #32]
 800d550:	e841 2300 	strex	r3, r2, [r1]
 800d554:	61bb      	str	r3, [r7, #24]
   return(result);
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1e5      	bne.n	800d528 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2220      	movs	r2, #32
 800d560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2220      	movs	r2, #32
 800d568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2220      	movs	r2, #32
 800d570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2200      	movs	r2, #0
 800d578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d57c:	2303      	movs	r3, #3
 800d57e:	e010      	b.n	800d5a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	69da      	ldr	r2, [r3, #28]
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	4013      	ands	r3, r2
 800d58a:	68ba      	ldr	r2, [r7, #8]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	bf0c      	ite	eq
 800d590:	2301      	moveq	r3, #1
 800d592:	2300      	movne	r3, #0
 800d594:	b2db      	uxtb	r3, r3
 800d596:	461a      	mov	r2, r3
 800d598:	79fb      	ldrb	r3, [r7, #7]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	f43f af46 	beq.w	800d42c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d5a0:	2300      	movs	r3, #0
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3770      	adds	r7, #112	; 0x70
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
	...

0800d5ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b096      	sub	sp, #88	; 0x58
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	68ba      	ldr	r2, [r7, #8]
 800d5be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	88fa      	ldrh	r2, [r7, #6]
 800d5c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2222      	movs	r2, #34	; 0x22
 800d5d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d02c      	beq.n	800d63a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5e4:	4a42      	ldr	r2, [pc, #264]	; (800d6f0 <UART_Start_Receive_DMA+0x144>)
 800d5e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5ec:	4a41      	ldr	r2, [pc, #260]	; (800d6f4 <UART_Start_Receive_DMA+0x148>)
 800d5ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5f4:	4a40      	ldr	r2, [pc, #256]	; (800d6f8 <UART_Start_Receive_DMA+0x14c>)
 800d5f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	3324      	adds	r3, #36	; 0x24
 800d60a:	4619      	mov	r1, r3
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d610:	461a      	mov	r2, r3
 800d612:	88fb      	ldrh	r3, [r7, #6]
 800d614:	f7f7 fea8 	bl	8005368 <HAL_DMA_Start_IT>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d00d      	beq.n	800d63a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2210      	movs	r2, #16
 800d622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2220      	movs	r2, #32
 800d632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d636:	2301      	movs	r3, #1
 800d638:	e055      	b.n	800d6e6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2200      	movs	r2, #0
 800d63e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	691b      	ldr	r3, [r3, #16]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d018      	beq.n	800d67c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d652:	e853 3f00 	ldrex	r3, [r3]
 800d656:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d65e:	657b      	str	r3, [r7, #84]	; 0x54
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	461a      	mov	r2, r3
 800d666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d668:	64bb      	str	r3, [r7, #72]	; 0x48
 800d66a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d66e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d670:	e841 2300 	strex	r3, r2, [r1]
 800d674:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d1e6      	bne.n	800d64a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	3308      	adds	r3, #8
 800d682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d686:	e853 3f00 	ldrex	r3, [r3]
 800d68a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68e:	f043 0301 	orr.w	r3, r3, #1
 800d692:	653b      	str	r3, [r7, #80]	; 0x50
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	3308      	adds	r3, #8
 800d69a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d69c:	637a      	str	r2, [r7, #52]	; 0x34
 800d69e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d6a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6a4:	e841 2300 	strex	r3, r2, [r1]
 800d6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d1e5      	bne.n	800d67c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	3308      	adds	r3, #8
 800d6b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	e853 3f00 	ldrex	r3, [r3]
 800d6be:	613b      	str	r3, [r7, #16]
   return(result);
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	3308      	adds	r3, #8
 800d6ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d6d0:	623a      	str	r2, [r7, #32]
 800d6d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d4:	69f9      	ldr	r1, [r7, #28]
 800d6d6:	6a3a      	ldr	r2, [r7, #32]
 800d6d8:	e841 2300 	strex	r3, r2, [r1]
 800d6dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d1e5      	bne.n	800d6b0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3758      	adds	r7, #88	; 0x58
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	0800d8ff 	.word	0x0800d8ff
 800d6f4:	0800da21 	.word	0x0800da21
 800d6f8:	0800da59 	.word	0x0800da59

0800d6fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b08f      	sub	sp, #60	; 0x3c
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70a:	6a3b      	ldr	r3, [r7, #32]
 800d70c:	e853 3f00 	ldrex	r3, [r3]
 800d710:	61fb      	str	r3, [r7, #28]
   return(result);
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d718:	637b      	str	r3, [r7, #52]	; 0x34
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	461a      	mov	r2, r3
 800d720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d722:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d724:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d726:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d72a:	e841 2300 	strex	r3, r2, [r1]
 800d72e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d732:	2b00      	cmp	r3, #0
 800d734:	d1e6      	bne.n	800d704 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	3308      	adds	r3, #8
 800d73c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	e853 3f00 	ldrex	r3, [r3]
 800d744:	60bb      	str	r3, [r7, #8]
   return(result);
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d74c:	633b      	str	r3, [r7, #48]	; 0x30
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	3308      	adds	r3, #8
 800d754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d756:	61ba      	str	r2, [r7, #24]
 800d758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d75a:	6979      	ldr	r1, [r7, #20]
 800d75c:	69ba      	ldr	r2, [r7, #24]
 800d75e:	e841 2300 	strex	r3, r2, [r1]
 800d762:	613b      	str	r3, [r7, #16]
   return(result);
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d1e5      	bne.n	800d736 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2220      	movs	r2, #32
 800d76e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d772:	bf00      	nop
 800d774:	373c      	adds	r7, #60	; 0x3c
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr
	...

0800d780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d780:	b480      	push	{r7}
 800d782:	b095      	sub	sp, #84	; 0x54
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d790:	e853 3f00 	ldrex	r3, [r3]
 800d794:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d798:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d79c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7a6:	643b      	str	r3, [r7, #64]	; 0x40
 800d7a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d7ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7ae:	e841 2300 	strex	r3, r2, [r1]
 800d7b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d1e6      	bne.n	800d788 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	3308      	adds	r3, #8
 800d7c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c2:	6a3b      	ldr	r3, [r7, #32]
 800d7c4:	e853 3f00 	ldrex	r3, [r3]
 800d7c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7ca:	69fa      	ldr	r2, [r7, #28]
 800d7cc:	4b1e      	ldr	r3, [pc, #120]	; (800d848 <UART_EndRxTransfer+0xc8>)
 800d7ce:	4013      	ands	r3, r2
 800d7d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	3308      	adds	r3, #8
 800d7d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7da:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d7dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7e2:	e841 2300 	strex	r3, r2, [r1]
 800d7e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1e5      	bne.n	800d7ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d118      	bne.n	800d828 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	e853 3f00 	ldrex	r3, [r3]
 800d802:	60bb      	str	r3, [r7, #8]
   return(result);
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	f023 0310 	bic.w	r3, r3, #16
 800d80a:	647b      	str	r3, [r7, #68]	; 0x44
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	461a      	mov	r2, r3
 800d812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d814:	61bb      	str	r3, [r7, #24]
 800d816:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d818:	6979      	ldr	r1, [r7, #20]
 800d81a:	69ba      	ldr	r2, [r7, #24]
 800d81c:	e841 2300 	strex	r3, r2, [r1]
 800d820:	613b      	str	r3, [r7, #16]
   return(result);
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d1e6      	bne.n	800d7f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2220      	movs	r2, #32
 800d82c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2200      	movs	r2, #0
 800d83a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d83c:	bf00      	nop
 800d83e:	3754      	adds	r7, #84	; 0x54
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr
 800d848:	effffffe 	.word	0xeffffffe

0800d84c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b090      	sub	sp, #64	; 0x40
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d858:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	69db      	ldr	r3, [r3, #28]
 800d85e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d862:	d037      	beq.n	800d8d4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d866:	2200      	movs	r2, #0
 800d868:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	3308      	adds	r3, #8
 800d872:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d876:	e853 3f00 	ldrex	r3, [r3]
 800d87a:	623b      	str	r3, [r7, #32]
   return(result);
 800d87c:	6a3b      	ldr	r3, [r7, #32]
 800d87e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d882:	63bb      	str	r3, [r7, #56]	; 0x38
 800d884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	3308      	adds	r3, #8
 800d88a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d88c:	633a      	str	r2, [r7, #48]	; 0x30
 800d88e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d890:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d894:	e841 2300 	strex	r3, r2, [r1]
 800d898:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d1e5      	bne.n	800d86c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	e853 3f00 	ldrex	r3, [r3]
 800d8ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8b4:	637b      	str	r3, [r7, #52]	; 0x34
 800d8b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8be:	61fb      	str	r3, [r7, #28]
 800d8c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c2:	69b9      	ldr	r1, [r7, #24]
 800d8c4:	69fa      	ldr	r2, [r7, #28]
 800d8c6:	e841 2300 	strex	r3, r2, [r1]
 800d8ca:	617b      	str	r3, [r7, #20]
   return(result);
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d1e6      	bne.n	800d8a0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d8d2:	e002      	b.n	800d8da <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d8d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d8d6:	f7f5 fc6b 	bl	80031b0 <HAL_UART_TxCpltCallback>
}
 800d8da:	bf00      	nop
 800d8dc:	3740      	adds	r7, #64	; 0x40
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}

0800d8e2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d8e2:	b580      	push	{r7, lr}
 800d8e4:	b084      	sub	sp, #16
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f7fe fe0f 	bl	800c514 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8f6:	bf00      	nop
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b09c      	sub	sp, #112	; 0x70
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d90a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	69db      	ldr	r3, [r3, #28]
 800d910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d914:	d071      	beq.n	800d9fa <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d918:	2200      	movs	r2, #0
 800d91a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d91e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d926:	e853 3f00 	ldrex	r3, [r3]
 800d92a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d92c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d92e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d932:	66bb      	str	r3, [r7, #104]	; 0x68
 800d934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	461a      	mov	r2, r3
 800d93a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d93c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d93e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d940:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d942:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d944:	e841 2300 	strex	r3, r2, [r1]
 800d948:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d94a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d1e6      	bne.n	800d91e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	3308      	adds	r3, #8
 800d956:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95a:	e853 3f00 	ldrex	r3, [r3]
 800d95e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d962:	f023 0301 	bic.w	r3, r3, #1
 800d966:	667b      	str	r3, [r7, #100]	; 0x64
 800d968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	3308      	adds	r3, #8
 800d96e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d970:	647a      	str	r2, [r7, #68]	; 0x44
 800d972:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d974:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d978:	e841 2300 	strex	r3, r2, [r1]
 800d97c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1e5      	bne.n	800d950 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	3308      	adds	r3, #8
 800d98a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98e:	e853 3f00 	ldrex	r3, [r3]
 800d992:	623b      	str	r3, [r7, #32]
   return(result);
 800d994:	6a3b      	ldr	r3, [r7, #32]
 800d996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d99a:	663b      	str	r3, [r7, #96]	; 0x60
 800d99c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	3308      	adds	r3, #8
 800d9a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d9a4:	633a      	str	r2, [r7, #48]	; 0x30
 800d9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9ac:	e841 2300 	strex	r3, r2, [r1]
 800d9b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d1e5      	bne.n	800d984 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ba:	2220      	movs	r2, #32
 800d9bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d118      	bne.n	800d9fa <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	e853 3f00 	ldrex	r3, [r3]
 800d9d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f023 0310 	bic.w	r3, r3, #16
 800d9dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9e6:	61fb      	str	r3, [r7, #28]
 800d9e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ea:	69b9      	ldr	r1, [r7, #24]
 800d9ec:	69fa      	ldr	r2, [r7, #28]
 800d9ee:	e841 2300 	strex	r3, r2, [r1]
 800d9f2:	617b      	str	r3, [r7, #20]
   return(result);
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d1e6      	bne.n	800d9c8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d107      	bne.n	800da12 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da08:	4619      	mov	r1, r3
 800da0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800da0c:	f7fe fda0 	bl	800c550 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da10:	e002      	b.n	800da18 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800da12:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800da14:	f7f5 fbde 	bl	80031d4 <HAL_UART_RxCpltCallback>
}
 800da18:	bf00      	nop
 800da1a:	3770      	adds	r7, #112	; 0x70
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da2c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da32:	2b01      	cmp	r3, #1
 800da34:	d109      	bne.n	800da4a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da3c:	085b      	lsrs	r3, r3, #1
 800da3e:	b29b      	uxth	r3, r3
 800da40:	4619      	mov	r1, r3
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	f7fe fd84 	bl	800c550 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da48:	e002      	b.n	800da50 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800da4a:	68f8      	ldr	r0, [r7, #12]
 800da4c:	f7fe fd6c 	bl	800c528 <HAL_UART_RxHalfCpltCallback>
}
 800da50:	bf00      	nop
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b086      	sub	sp, #24
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da6c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da74:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da80:	2b80      	cmp	r3, #128	; 0x80
 800da82:	d109      	bne.n	800da98 <UART_DMAError+0x40>
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	2b21      	cmp	r3, #33	; 0x21
 800da88:	d106      	bne.n	800da98 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	2200      	movs	r2, #0
 800da8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800da92:	6978      	ldr	r0, [r7, #20]
 800da94:	f7ff fe32 	bl	800d6fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	689b      	ldr	r3, [r3, #8]
 800da9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daa2:	2b40      	cmp	r3, #64	; 0x40
 800daa4:	d109      	bne.n	800daba <UART_DMAError+0x62>
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2b22      	cmp	r3, #34	; 0x22
 800daaa:	d106      	bne.n	800daba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	2200      	movs	r2, #0
 800dab0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800dab4:	6978      	ldr	r0, [r7, #20]
 800dab6:	f7ff fe63 	bl	800d780 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dac0:	f043 0210 	orr.w	r2, r3, #16
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800daca:	6978      	ldr	r0, [r7, #20]
 800dacc:	f7fe fd36 	bl	800c53c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dad0:	bf00      	nop
 800dad2:	3718      	adds	r7, #24
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2200      	movs	r2, #0
 800daea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	f7fe fd20 	bl	800c53c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dafc:	bf00      	nop
 800dafe:	3710      	adds	r7, #16
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b088      	sub	sp, #32
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	e853 3f00 	ldrex	r3, [r3]
 800db18:	60bb      	str	r3, [r7, #8]
   return(result);
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db20:	61fb      	str	r3, [r7, #28]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	461a      	mov	r2, r3
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	61bb      	str	r3, [r7, #24]
 800db2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db2e:	6979      	ldr	r1, [r7, #20]
 800db30:	69ba      	ldr	r2, [r7, #24]
 800db32:	e841 2300 	strex	r3, r2, [r1]
 800db36:	613b      	str	r3, [r7, #16]
   return(result);
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d1e6      	bne.n	800db0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2220      	movs	r2, #32
 800db42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2200      	movs	r2, #0
 800db4a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f7f5 fb2f 	bl	80031b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db52:	bf00      	nop
 800db54:	3720      	adds	r7, #32
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db5a:	b480      	push	{r7}
 800db5c:	b083      	sub	sp, #12
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db62:	bf00      	nop
 800db64:	370c      	adds	r7, #12
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr

0800db6e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800db6e:	b480      	push	{r7}
 800db70:	b083      	sub	sp, #12
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800db76:	bf00      	nop
 800db78:	370c      	adds	r7, #12
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr

0800db82 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800db82:	b480      	push	{r7}
 800db84:	b083      	sub	sp, #12
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800db8a:	bf00      	nop
 800db8c:	370c      	adds	r7, #12
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr

0800db96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db96:	b480      	push	{r7}
 800db98:	b085      	sub	sp, #20
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d101      	bne.n	800dbac <HAL_UARTEx_DisableFifoMode+0x16>
 800dba8:	2302      	movs	r3, #2
 800dbaa:	e027      	b.n	800dbfc <HAL_UARTEx_DisableFifoMode+0x66>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2224      	movs	r2, #36	; 0x24
 800dbb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f022 0201 	bic.w	r2, r2, #1
 800dbd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dbda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2220      	movs	r2, #32
 800dbee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dbfa:	2300      	movs	r3, #0
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3714      	adds	r7, #20
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d101      	bne.n	800dc20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dc1c:	2302      	movs	r3, #2
 800dc1e:	e02d      	b.n	800dc7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2201      	movs	r2, #1
 800dc24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2224      	movs	r2, #36	; 0x24
 800dc2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f022 0201 	bic.w	r2, r2, #1
 800dc46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	683a      	ldr	r2, [r7, #0]
 800dc58:	430a      	orrs	r2, r1
 800dc5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 f84f 	bl	800dd00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	68fa      	ldr	r2, [r7, #12]
 800dc68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2220      	movs	r2, #32
 800dc6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc7a:	2300      	movs	r3, #0
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3710      	adds	r7, #16
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d101      	bne.n	800dc9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc98:	2302      	movs	r3, #2
 800dc9a:	e02d      	b.n	800dcf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2224      	movs	r2, #36	; 0x24
 800dca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f022 0201 	bic.w	r2, r2, #1
 800dcc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	683a      	ldr	r2, [r7, #0]
 800dcd4:	430a      	orrs	r2, r1
 800dcd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 f811 	bl	800dd00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2220      	movs	r2, #32
 800dcea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcf6:	2300      	movs	r3, #0
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d108      	bne.n	800dd22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2201      	movs	r2, #1
 800dd14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dd20:	e031      	b.n	800dd86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dd22:	2310      	movs	r3, #16
 800dd24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dd26:	2310      	movs	r3, #16
 800dd28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	689b      	ldr	r3, [r3, #8]
 800dd30:	0e5b      	lsrs	r3, r3, #25
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	f003 0307 	and.w	r3, r3, #7
 800dd38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	0f5b      	lsrs	r3, r3, #29
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	f003 0307 	and.w	r3, r3, #7
 800dd48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd4a:	7bbb      	ldrb	r3, [r7, #14]
 800dd4c:	7b3a      	ldrb	r2, [r7, #12]
 800dd4e:	4911      	ldr	r1, [pc, #68]	; (800dd94 <UARTEx_SetNbDataToProcess+0x94>)
 800dd50:	5c8a      	ldrb	r2, [r1, r2]
 800dd52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd56:	7b3a      	ldrb	r2, [r7, #12]
 800dd58:	490f      	ldr	r1, [pc, #60]	; (800dd98 <UARTEx_SetNbDataToProcess+0x98>)
 800dd5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd60:	b29a      	uxth	r2, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd68:	7bfb      	ldrb	r3, [r7, #15]
 800dd6a:	7b7a      	ldrb	r2, [r7, #13]
 800dd6c:	4909      	ldr	r1, [pc, #36]	; (800dd94 <UARTEx_SetNbDataToProcess+0x94>)
 800dd6e:	5c8a      	ldrb	r2, [r1, r2]
 800dd70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd74:	7b7a      	ldrb	r2, [r7, #13]
 800dd76:	4908      	ldr	r1, [pc, #32]	; (800dd98 <UARTEx_SetNbDataToProcess+0x98>)
 800dd78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd7e:	b29a      	uxth	r2, r3
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dd86:	bf00      	nop
 800dd88:	3714      	adds	r7, #20
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	0800e3f4 	.word	0x0800e3f4
 800dd98:	0800e3fc 	.word	0x0800e3fc

0800dd9c <__cxa_pure_virtual>:
 800dd9c:	b508      	push	{r3, lr}
 800dd9e:	f000 f80d 	bl	800ddbc <_ZSt9terminatev>

0800dda2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800dda2:	b508      	push	{r3, lr}
 800dda4:	4780      	blx	r0
 800dda6:	f000 f80e 	bl	800ddc6 <abort>
	...

0800ddac <_ZSt13get_terminatev>:
 800ddac:	4b02      	ldr	r3, [pc, #8]	; (800ddb8 <_ZSt13get_terminatev+0xc>)
 800ddae:	6818      	ldr	r0, [r3, #0]
 800ddb0:	f3bf 8f5b 	dmb	ish
 800ddb4:	4770      	bx	lr
 800ddb6:	bf00      	nop
 800ddb8:	24000010 	.word	0x24000010

0800ddbc <_ZSt9terminatev>:
 800ddbc:	b508      	push	{r3, lr}
 800ddbe:	f7ff fff5 	bl	800ddac <_ZSt13get_terminatev>
 800ddc2:	f7ff ffee 	bl	800dda2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800ddc6 <abort>:
 800ddc6:	b508      	push	{r3, lr}
 800ddc8:	2006      	movs	r0, #6
 800ddca:	f000 f873 	bl	800deb4 <raise>
 800ddce:	2001      	movs	r0, #1
 800ddd0:	f7f6 fcec 	bl	80047ac <_exit>

0800ddd4 <__errno>:
 800ddd4:	4b01      	ldr	r3, [pc, #4]	; (800dddc <__errno+0x8>)
 800ddd6:	6818      	ldr	r0, [r3, #0]
 800ddd8:	4770      	bx	lr
 800ddda:	bf00      	nop
 800dddc:	24000014 	.word	0x24000014

0800dde0 <__libc_init_array>:
 800dde0:	b570      	push	{r4, r5, r6, lr}
 800dde2:	4d0d      	ldr	r5, [pc, #52]	; (800de18 <__libc_init_array+0x38>)
 800dde4:	4c0d      	ldr	r4, [pc, #52]	; (800de1c <__libc_init_array+0x3c>)
 800dde6:	1b64      	subs	r4, r4, r5
 800dde8:	10a4      	asrs	r4, r4, #2
 800ddea:	2600      	movs	r6, #0
 800ddec:	42a6      	cmp	r6, r4
 800ddee:	d109      	bne.n	800de04 <__libc_init_array+0x24>
 800ddf0:	4d0b      	ldr	r5, [pc, #44]	; (800de20 <__libc_init_array+0x40>)
 800ddf2:	4c0c      	ldr	r4, [pc, #48]	; (800de24 <__libc_init_array+0x44>)
 800ddf4:	f000 f9b0 	bl	800e158 <_init>
 800ddf8:	1b64      	subs	r4, r4, r5
 800ddfa:	10a4      	asrs	r4, r4, #2
 800ddfc:	2600      	movs	r6, #0
 800ddfe:	42a6      	cmp	r6, r4
 800de00:	d105      	bne.n	800de0e <__libc_init_array+0x2e>
 800de02:	bd70      	pop	{r4, r5, r6, pc}
 800de04:	f855 3b04 	ldr.w	r3, [r5], #4
 800de08:	4798      	blx	r3
 800de0a:	3601      	adds	r6, #1
 800de0c:	e7ee      	b.n	800ddec <__libc_init_array+0xc>
 800de0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de12:	4798      	blx	r3
 800de14:	3601      	adds	r6, #1
 800de16:	e7f2      	b.n	800ddfe <__libc_init_array+0x1e>
 800de18:	0800e40c 	.word	0x0800e40c
 800de1c:	0800e40c 	.word	0x0800e40c
 800de20:	0800e40c 	.word	0x0800e40c
 800de24:	0800e414 	.word	0x0800e414

0800de28 <memcpy>:
 800de28:	440a      	add	r2, r1
 800de2a:	4291      	cmp	r1, r2
 800de2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800de30:	d100      	bne.n	800de34 <memcpy+0xc>
 800de32:	4770      	bx	lr
 800de34:	b510      	push	{r4, lr}
 800de36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de3e:	4291      	cmp	r1, r2
 800de40:	d1f9      	bne.n	800de36 <memcpy+0xe>
 800de42:	bd10      	pop	{r4, pc}

0800de44 <memset>:
 800de44:	4402      	add	r2, r0
 800de46:	4603      	mov	r3, r0
 800de48:	4293      	cmp	r3, r2
 800de4a:	d100      	bne.n	800de4e <memset+0xa>
 800de4c:	4770      	bx	lr
 800de4e:	f803 1b01 	strb.w	r1, [r3], #1
 800de52:	e7f9      	b.n	800de48 <memset+0x4>

0800de54 <realloc>:
 800de54:	4b02      	ldr	r3, [pc, #8]	; (800de60 <realloc+0xc>)
 800de56:	460a      	mov	r2, r1
 800de58:	4601      	mov	r1, r0
 800de5a:	6818      	ldr	r0, [r3, #0]
 800de5c:	f000 b8da 	b.w	800e014 <_realloc_r>
 800de60:	24000014 	.word	0x24000014

0800de64 <_raise_r>:
 800de64:	291f      	cmp	r1, #31
 800de66:	b538      	push	{r3, r4, r5, lr}
 800de68:	4604      	mov	r4, r0
 800de6a:	460d      	mov	r5, r1
 800de6c:	d904      	bls.n	800de78 <_raise_r+0x14>
 800de6e:	2316      	movs	r3, #22
 800de70:	6003      	str	r3, [r0, #0]
 800de72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de76:	bd38      	pop	{r3, r4, r5, pc}
 800de78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de7a:	b112      	cbz	r2, 800de82 <_raise_r+0x1e>
 800de7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de80:	b94b      	cbnz	r3, 800de96 <_raise_r+0x32>
 800de82:	4620      	mov	r0, r4
 800de84:	f000 f830 	bl	800dee8 <_getpid_r>
 800de88:	462a      	mov	r2, r5
 800de8a:	4601      	mov	r1, r0
 800de8c:	4620      	mov	r0, r4
 800de8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de92:	f000 b817 	b.w	800dec4 <_kill_r>
 800de96:	2b01      	cmp	r3, #1
 800de98:	d00a      	beq.n	800deb0 <_raise_r+0x4c>
 800de9a:	1c59      	adds	r1, r3, #1
 800de9c:	d103      	bne.n	800dea6 <_raise_r+0x42>
 800de9e:	2316      	movs	r3, #22
 800dea0:	6003      	str	r3, [r0, #0]
 800dea2:	2001      	movs	r0, #1
 800dea4:	e7e7      	b.n	800de76 <_raise_r+0x12>
 800dea6:	2400      	movs	r4, #0
 800dea8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800deac:	4628      	mov	r0, r5
 800deae:	4798      	blx	r3
 800deb0:	2000      	movs	r0, #0
 800deb2:	e7e0      	b.n	800de76 <_raise_r+0x12>

0800deb4 <raise>:
 800deb4:	4b02      	ldr	r3, [pc, #8]	; (800dec0 <raise+0xc>)
 800deb6:	4601      	mov	r1, r0
 800deb8:	6818      	ldr	r0, [r3, #0]
 800deba:	f7ff bfd3 	b.w	800de64 <_raise_r>
 800debe:	bf00      	nop
 800dec0:	24000014 	.word	0x24000014

0800dec4 <_kill_r>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4d07      	ldr	r5, [pc, #28]	; (800dee4 <_kill_r+0x20>)
 800dec8:	2300      	movs	r3, #0
 800deca:	4604      	mov	r4, r0
 800decc:	4608      	mov	r0, r1
 800dece:	4611      	mov	r1, r2
 800ded0:	602b      	str	r3, [r5, #0]
 800ded2:	f7f6 fc5b 	bl	800478c <_kill>
 800ded6:	1c43      	adds	r3, r0, #1
 800ded8:	d102      	bne.n	800dee0 <_kill_r+0x1c>
 800deda:	682b      	ldr	r3, [r5, #0]
 800dedc:	b103      	cbz	r3, 800dee0 <_kill_r+0x1c>
 800dede:	6023      	str	r3, [r4, #0]
 800dee0:	bd38      	pop	{r3, r4, r5, pc}
 800dee2:	bf00      	nop
 800dee4:	24001be8 	.word	0x24001be8

0800dee8 <_getpid_r>:
 800dee8:	f7f6 bc48 	b.w	800477c <_getpid>

0800deec <sbrk_aligned>:
 800deec:	b570      	push	{r4, r5, r6, lr}
 800deee:	4e0e      	ldr	r6, [pc, #56]	; (800df28 <sbrk_aligned+0x3c>)
 800def0:	460c      	mov	r4, r1
 800def2:	6831      	ldr	r1, [r6, #0]
 800def4:	4605      	mov	r5, r0
 800def6:	b911      	cbnz	r1, 800defe <sbrk_aligned+0x12>
 800def8:	f000 f8bc 	bl	800e074 <_sbrk_r>
 800defc:	6030      	str	r0, [r6, #0]
 800defe:	4621      	mov	r1, r4
 800df00:	4628      	mov	r0, r5
 800df02:	f000 f8b7 	bl	800e074 <_sbrk_r>
 800df06:	1c43      	adds	r3, r0, #1
 800df08:	d00a      	beq.n	800df20 <sbrk_aligned+0x34>
 800df0a:	1cc4      	adds	r4, r0, #3
 800df0c:	f024 0403 	bic.w	r4, r4, #3
 800df10:	42a0      	cmp	r0, r4
 800df12:	d007      	beq.n	800df24 <sbrk_aligned+0x38>
 800df14:	1a21      	subs	r1, r4, r0
 800df16:	4628      	mov	r0, r5
 800df18:	f000 f8ac 	bl	800e074 <_sbrk_r>
 800df1c:	3001      	adds	r0, #1
 800df1e:	d101      	bne.n	800df24 <sbrk_aligned+0x38>
 800df20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800df24:	4620      	mov	r0, r4
 800df26:	bd70      	pop	{r4, r5, r6, pc}
 800df28:	24001be4 	.word	0x24001be4

0800df2c <_malloc_r>:
 800df2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df30:	1ccd      	adds	r5, r1, #3
 800df32:	f025 0503 	bic.w	r5, r5, #3
 800df36:	3508      	adds	r5, #8
 800df38:	2d0c      	cmp	r5, #12
 800df3a:	bf38      	it	cc
 800df3c:	250c      	movcc	r5, #12
 800df3e:	2d00      	cmp	r5, #0
 800df40:	4607      	mov	r7, r0
 800df42:	db01      	blt.n	800df48 <_malloc_r+0x1c>
 800df44:	42a9      	cmp	r1, r5
 800df46:	d905      	bls.n	800df54 <_malloc_r+0x28>
 800df48:	230c      	movs	r3, #12
 800df4a:	603b      	str	r3, [r7, #0]
 800df4c:	2600      	movs	r6, #0
 800df4e:	4630      	mov	r0, r6
 800df50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df54:	4e2e      	ldr	r6, [pc, #184]	; (800e010 <_malloc_r+0xe4>)
 800df56:	f000 f89d 	bl	800e094 <__malloc_lock>
 800df5a:	6833      	ldr	r3, [r6, #0]
 800df5c:	461c      	mov	r4, r3
 800df5e:	bb34      	cbnz	r4, 800dfae <_malloc_r+0x82>
 800df60:	4629      	mov	r1, r5
 800df62:	4638      	mov	r0, r7
 800df64:	f7ff ffc2 	bl	800deec <sbrk_aligned>
 800df68:	1c43      	adds	r3, r0, #1
 800df6a:	4604      	mov	r4, r0
 800df6c:	d14d      	bne.n	800e00a <_malloc_r+0xde>
 800df6e:	6834      	ldr	r4, [r6, #0]
 800df70:	4626      	mov	r6, r4
 800df72:	2e00      	cmp	r6, #0
 800df74:	d140      	bne.n	800dff8 <_malloc_r+0xcc>
 800df76:	6823      	ldr	r3, [r4, #0]
 800df78:	4631      	mov	r1, r6
 800df7a:	4638      	mov	r0, r7
 800df7c:	eb04 0803 	add.w	r8, r4, r3
 800df80:	f000 f878 	bl	800e074 <_sbrk_r>
 800df84:	4580      	cmp	r8, r0
 800df86:	d13a      	bne.n	800dffe <_malloc_r+0xd2>
 800df88:	6821      	ldr	r1, [r4, #0]
 800df8a:	3503      	adds	r5, #3
 800df8c:	1a6d      	subs	r5, r5, r1
 800df8e:	f025 0503 	bic.w	r5, r5, #3
 800df92:	3508      	adds	r5, #8
 800df94:	2d0c      	cmp	r5, #12
 800df96:	bf38      	it	cc
 800df98:	250c      	movcc	r5, #12
 800df9a:	4629      	mov	r1, r5
 800df9c:	4638      	mov	r0, r7
 800df9e:	f7ff ffa5 	bl	800deec <sbrk_aligned>
 800dfa2:	3001      	adds	r0, #1
 800dfa4:	d02b      	beq.n	800dffe <_malloc_r+0xd2>
 800dfa6:	6823      	ldr	r3, [r4, #0]
 800dfa8:	442b      	add	r3, r5
 800dfaa:	6023      	str	r3, [r4, #0]
 800dfac:	e00e      	b.n	800dfcc <_malloc_r+0xa0>
 800dfae:	6822      	ldr	r2, [r4, #0]
 800dfb0:	1b52      	subs	r2, r2, r5
 800dfb2:	d41e      	bmi.n	800dff2 <_malloc_r+0xc6>
 800dfb4:	2a0b      	cmp	r2, #11
 800dfb6:	d916      	bls.n	800dfe6 <_malloc_r+0xba>
 800dfb8:	1961      	adds	r1, r4, r5
 800dfba:	42a3      	cmp	r3, r4
 800dfbc:	6025      	str	r5, [r4, #0]
 800dfbe:	bf18      	it	ne
 800dfc0:	6059      	strne	r1, [r3, #4]
 800dfc2:	6863      	ldr	r3, [r4, #4]
 800dfc4:	bf08      	it	eq
 800dfc6:	6031      	streq	r1, [r6, #0]
 800dfc8:	5162      	str	r2, [r4, r5]
 800dfca:	604b      	str	r3, [r1, #4]
 800dfcc:	4638      	mov	r0, r7
 800dfce:	f104 060b 	add.w	r6, r4, #11
 800dfd2:	f000 f865 	bl	800e0a0 <__malloc_unlock>
 800dfd6:	f026 0607 	bic.w	r6, r6, #7
 800dfda:	1d23      	adds	r3, r4, #4
 800dfdc:	1af2      	subs	r2, r6, r3
 800dfde:	d0b6      	beq.n	800df4e <_malloc_r+0x22>
 800dfe0:	1b9b      	subs	r3, r3, r6
 800dfe2:	50a3      	str	r3, [r4, r2]
 800dfe4:	e7b3      	b.n	800df4e <_malloc_r+0x22>
 800dfe6:	6862      	ldr	r2, [r4, #4]
 800dfe8:	42a3      	cmp	r3, r4
 800dfea:	bf0c      	ite	eq
 800dfec:	6032      	streq	r2, [r6, #0]
 800dfee:	605a      	strne	r2, [r3, #4]
 800dff0:	e7ec      	b.n	800dfcc <_malloc_r+0xa0>
 800dff2:	4623      	mov	r3, r4
 800dff4:	6864      	ldr	r4, [r4, #4]
 800dff6:	e7b2      	b.n	800df5e <_malloc_r+0x32>
 800dff8:	4634      	mov	r4, r6
 800dffa:	6876      	ldr	r6, [r6, #4]
 800dffc:	e7b9      	b.n	800df72 <_malloc_r+0x46>
 800dffe:	230c      	movs	r3, #12
 800e000:	603b      	str	r3, [r7, #0]
 800e002:	4638      	mov	r0, r7
 800e004:	f000 f84c 	bl	800e0a0 <__malloc_unlock>
 800e008:	e7a1      	b.n	800df4e <_malloc_r+0x22>
 800e00a:	6025      	str	r5, [r4, #0]
 800e00c:	e7de      	b.n	800dfcc <_malloc_r+0xa0>
 800e00e:	bf00      	nop
 800e010:	24001be0 	.word	0x24001be0

0800e014 <_realloc_r>:
 800e014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e018:	4680      	mov	r8, r0
 800e01a:	4614      	mov	r4, r2
 800e01c:	460e      	mov	r6, r1
 800e01e:	b921      	cbnz	r1, 800e02a <_realloc_r+0x16>
 800e020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e024:	4611      	mov	r1, r2
 800e026:	f7ff bf81 	b.w	800df2c <_malloc_r>
 800e02a:	b92a      	cbnz	r2, 800e038 <_realloc_r+0x24>
 800e02c:	f000 f83e 	bl	800e0ac <_free_r>
 800e030:	4625      	mov	r5, r4
 800e032:	4628      	mov	r0, r5
 800e034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e038:	f000 f884 	bl	800e144 <_malloc_usable_size_r>
 800e03c:	4284      	cmp	r4, r0
 800e03e:	4607      	mov	r7, r0
 800e040:	d802      	bhi.n	800e048 <_realloc_r+0x34>
 800e042:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e046:	d812      	bhi.n	800e06e <_realloc_r+0x5a>
 800e048:	4621      	mov	r1, r4
 800e04a:	4640      	mov	r0, r8
 800e04c:	f7ff ff6e 	bl	800df2c <_malloc_r>
 800e050:	4605      	mov	r5, r0
 800e052:	2800      	cmp	r0, #0
 800e054:	d0ed      	beq.n	800e032 <_realloc_r+0x1e>
 800e056:	42bc      	cmp	r4, r7
 800e058:	4622      	mov	r2, r4
 800e05a:	4631      	mov	r1, r6
 800e05c:	bf28      	it	cs
 800e05e:	463a      	movcs	r2, r7
 800e060:	f7ff fee2 	bl	800de28 <memcpy>
 800e064:	4631      	mov	r1, r6
 800e066:	4640      	mov	r0, r8
 800e068:	f000 f820 	bl	800e0ac <_free_r>
 800e06c:	e7e1      	b.n	800e032 <_realloc_r+0x1e>
 800e06e:	4635      	mov	r5, r6
 800e070:	e7df      	b.n	800e032 <_realloc_r+0x1e>
	...

0800e074 <_sbrk_r>:
 800e074:	b538      	push	{r3, r4, r5, lr}
 800e076:	4d06      	ldr	r5, [pc, #24]	; (800e090 <_sbrk_r+0x1c>)
 800e078:	2300      	movs	r3, #0
 800e07a:	4604      	mov	r4, r0
 800e07c:	4608      	mov	r0, r1
 800e07e:	602b      	str	r3, [r5, #0]
 800e080:	f7f6 fb9e 	bl	80047c0 <_sbrk>
 800e084:	1c43      	adds	r3, r0, #1
 800e086:	d102      	bne.n	800e08e <_sbrk_r+0x1a>
 800e088:	682b      	ldr	r3, [r5, #0]
 800e08a:	b103      	cbz	r3, 800e08e <_sbrk_r+0x1a>
 800e08c:	6023      	str	r3, [r4, #0]
 800e08e:	bd38      	pop	{r3, r4, r5, pc}
 800e090:	24001be8 	.word	0x24001be8

0800e094 <__malloc_lock>:
 800e094:	4801      	ldr	r0, [pc, #4]	; (800e09c <__malloc_lock+0x8>)
 800e096:	f000 b85d 	b.w	800e154 <__retarget_lock_acquire_recursive>
 800e09a:	bf00      	nop
 800e09c:	24001bec 	.word	0x24001bec

0800e0a0 <__malloc_unlock>:
 800e0a0:	4801      	ldr	r0, [pc, #4]	; (800e0a8 <__malloc_unlock+0x8>)
 800e0a2:	f000 b858 	b.w	800e156 <__retarget_lock_release_recursive>
 800e0a6:	bf00      	nop
 800e0a8:	24001bec 	.word	0x24001bec

0800e0ac <_free_r>:
 800e0ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0ae:	2900      	cmp	r1, #0
 800e0b0:	d044      	beq.n	800e13c <_free_r+0x90>
 800e0b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0b6:	9001      	str	r0, [sp, #4]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	f1a1 0404 	sub.w	r4, r1, #4
 800e0be:	bfb8      	it	lt
 800e0c0:	18e4      	addlt	r4, r4, r3
 800e0c2:	f7ff ffe7 	bl	800e094 <__malloc_lock>
 800e0c6:	4a1e      	ldr	r2, [pc, #120]	; (800e140 <_free_r+0x94>)
 800e0c8:	9801      	ldr	r0, [sp, #4]
 800e0ca:	6813      	ldr	r3, [r2, #0]
 800e0cc:	b933      	cbnz	r3, 800e0dc <_free_r+0x30>
 800e0ce:	6063      	str	r3, [r4, #4]
 800e0d0:	6014      	str	r4, [r2, #0]
 800e0d2:	b003      	add	sp, #12
 800e0d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0d8:	f7ff bfe2 	b.w	800e0a0 <__malloc_unlock>
 800e0dc:	42a3      	cmp	r3, r4
 800e0de:	d908      	bls.n	800e0f2 <_free_r+0x46>
 800e0e0:	6825      	ldr	r5, [r4, #0]
 800e0e2:	1961      	adds	r1, r4, r5
 800e0e4:	428b      	cmp	r3, r1
 800e0e6:	bf01      	itttt	eq
 800e0e8:	6819      	ldreq	r1, [r3, #0]
 800e0ea:	685b      	ldreq	r3, [r3, #4]
 800e0ec:	1949      	addeq	r1, r1, r5
 800e0ee:	6021      	streq	r1, [r4, #0]
 800e0f0:	e7ed      	b.n	800e0ce <_free_r+0x22>
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	b10b      	cbz	r3, 800e0fc <_free_r+0x50>
 800e0f8:	42a3      	cmp	r3, r4
 800e0fa:	d9fa      	bls.n	800e0f2 <_free_r+0x46>
 800e0fc:	6811      	ldr	r1, [r2, #0]
 800e0fe:	1855      	adds	r5, r2, r1
 800e100:	42a5      	cmp	r5, r4
 800e102:	d10b      	bne.n	800e11c <_free_r+0x70>
 800e104:	6824      	ldr	r4, [r4, #0]
 800e106:	4421      	add	r1, r4
 800e108:	1854      	adds	r4, r2, r1
 800e10a:	42a3      	cmp	r3, r4
 800e10c:	6011      	str	r1, [r2, #0]
 800e10e:	d1e0      	bne.n	800e0d2 <_free_r+0x26>
 800e110:	681c      	ldr	r4, [r3, #0]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	6053      	str	r3, [r2, #4]
 800e116:	4421      	add	r1, r4
 800e118:	6011      	str	r1, [r2, #0]
 800e11a:	e7da      	b.n	800e0d2 <_free_r+0x26>
 800e11c:	d902      	bls.n	800e124 <_free_r+0x78>
 800e11e:	230c      	movs	r3, #12
 800e120:	6003      	str	r3, [r0, #0]
 800e122:	e7d6      	b.n	800e0d2 <_free_r+0x26>
 800e124:	6825      	ldr	r5, [r4, #0]
 800e126:	1961      	adds	r1, r4, r5
 800e128:	428b      	cmp	r3, r1
 800e12a:	bf04      	itt	eq
 800e12c:	6819      	ldreq	r1, [r3, #0]
 800e12e:	685b      	ldreq	r3, [r3, #4]
 800e130:	6063      	str	r3, [r4, #4]
 800e132:	bf04      	itt	eq
 800e134:	1949      	addeq	r1, r1, r5
 800e136:	6021      	streq	r1, [r4, #0]
 800e138:	6054      	str	r4, [r2, #4]
 800e13a:	e7ca      	b.n	800e0d2 <_free_r+0x26>
 800e13c:	b003      	add	sp, #12
 800e13e:	bd30      	pop	{r4, r5, pc}
 800e140:	24001be0 	.word	0x24001be0

0800e144 <_malloc_usable_size_r>:
 800e144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e148:	1f18      	subs	r0, r3, #4
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	bfbc      	itt	lt
 800e14e:	580b      	ldrlt	r3, [r1, r0]
 800e150:	18c0      	addlt	r0, r0, r3
 800e152:	4770      	bx	lr

0800e154 <__retarget_lock_acquire_recursive>:
 800e154:	4770      	bx	lr

0800e156 <__retarget_lock_release_recursive>:
 800e156:	4770      	bx	lr

0800e158 <_init>:
 800e158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e15a:	bf00      	nop
 800e15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e15e:	bc08      	pop	{r3}
 800e160:	469e      	mov	lr, r3
 800e162:	4770      	bx	lr

0800e164 <_fini>:
 800e164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e166:	bf00      	nop
 800e168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e16a:	bc08      	pop	{r3}
 800e16c:	469e      	mov	lr, r3
 800e16e:	4770      	bx	lr
